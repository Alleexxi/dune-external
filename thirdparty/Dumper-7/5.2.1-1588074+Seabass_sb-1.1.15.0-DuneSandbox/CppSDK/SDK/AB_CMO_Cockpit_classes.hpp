#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_CMO_Cockpit

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_CMO_Cockpit.AB_CMO_Cockpit_C
// 0x02B0 (0x08C0 - 0x0610)
class UAB_CMO_Cockpit_C final : public UDuneOrnithopterAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0610(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0618(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0620(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0628(0x0020)()
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0650(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x06B0(0x0060)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0710(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0758(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0778(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x07C0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x07E0(0x00C8)()
	bool                                          bOpenCockpit;                                      // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A9[0x7];                                      // 0x08A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      VFX_DamageSparks;                                  // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AB_CMO_Cockpit(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_CMO_Cockpit_C">();
	}
	static class UAB_CMO_Cockpit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_CMO_Cockpit_C>();
	}
};
static_assert(alignof(UAB_CMO_Cockpit_C) == 0x000010, "Wrong alignment on UAB_CMO_Cockpit_C");
static_assert(sizeof(UAB_CMO_Cockpit_C) == 0x0008C0, "Wrong size on UAB_CMO_Cockpit_C");
static_assert(offsetof(UAB_CMO_Cockpit_C, UberGraphFrame) == 0x000610, "Member 'UAB_CMO_Cockpit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, AnimBlueprintExtension_PropertyAccess) == 0x000618, "Member 'UAB_CMO_Cockpit_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, AnimBlueprintExtension_Base) == 0x000620, "Member 'UAB_CMO_Cockpit_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, AnimGraphNode_Root) == 0x000628, "Member 'UAB_CMO_Cockpit_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, AnimGraphNode_TransitionResult_1) == 0x000650, "Member 'UAB_CMO_Cockpit_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, AnimGraphNode_TransitionResult) == 0x0006B0, "Member 'UAB_CMO_Cockpit_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, AnimGraphNode_SequencePlayer_1) == 0x000710, "Member 'UAB_CMO_Cockpit_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, AnimGraphNode_StateResult_1) == 0x000758, "Member 'UAB_CMO_Cockpit_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, AnimGraphNode_SequencePlayer) == 0x000778, "Member 'UAB_CMO_Cockpit_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, AnimGraphNode_StateResult) == 0x0007C0, "Member 'UAB_CMO_Cockpit_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, AnimGraphNode_StateMachine) == 0x0007E0, "Member 'UAB_CMO_Cockpit_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, bOpenCockpit) == 0x0008A8, "Member 'UAB_CMO_Cockpit_C::bOpenCockpit' has a wrong offset!");
static_assert(offsetof(UAB_CMO_Cockpit_C, VFX_DamageSparks) == 0x0008B0, "Member 'UAB_CMO_Cockpit_C::VFX_DamageSparks' has a wrong offset!");

}

