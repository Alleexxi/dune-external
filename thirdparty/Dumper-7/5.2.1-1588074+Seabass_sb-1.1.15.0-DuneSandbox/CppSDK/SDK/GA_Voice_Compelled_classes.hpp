#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Voice_Compelled

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Voice_Compelled.GA_Voice_Compelled_C
// 0x00E0 (0x05F8 - 0x0518)
class UGA_Voice_Compelled_C final : public UDuneGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0518(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 LocationSource;                                    // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class ACharacter*                             CharacterAvatar;                                   // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            ActiveCompelledEffect;                             // 0x0530(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Kneel_Dist;                                        // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastStuckPos;                                      // 0x0548(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StuckDistSqr;                                      // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StuckTimer;                                        // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StuckThreshold;                                    // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUpdatingRotation;                                 // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RotationTime;                                      // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSliding;                                          // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CompelSpeed;                                       // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CompelTime;                                        // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PostCompelFreezeTime;                              // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           BeingCompelled_AM;                                 // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasRecovered;                                     // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B1[0x7];                                      // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CompelIn_AM;                                       // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RecoveryHeadShakeTime;                             // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CompelOut_AM;                                      // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        NearTargetThresholdSquared;                        // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CompelledTargetGC_Tag;                             // 0x05D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        NPCCompelTime;                                     // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayerCompelTime;                                  // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CompelIdle_AM;                                     // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyCompelGC();
	struct FRotator CalcNewRotation();
	void CalculateWalkVector(struct FVector* OutVector);
	void CalcVelocityDirection(struct FVector* OutVelocity);
	void CheckNearTarget(bool* bNear);
	void CheckStuck(double DeltaTime, bool* bStuck);
	void EndCharmedMovement(class ACharacter* CharmedCharacter);
	void EndCompelSlide(class ACharacter* CompelledCharacter);
	void ExecuteUbergraph_GA_Voice_Compelled(int32 EntryPoint);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_OnEndAbility(bool bWasCancelled);
	void LoopRotation();
	void LoopSlideAndStuck();
	void OnBlendOut_48EB880D4AEA7691777FF0BF0313B74A();
	void OnBlendOut_7088972C45C8BDAB27567A92C0956552();
	void OnBlendOut_A42F64B64A397F1E02120688EC5E37CA();
	void OnBlendOut_ACE702A74BBAF730A51502B0A5DB5007();
	void OnBlendOut_B53460714E5D5403AA7B8FB2AD2EA137();
	void OnCancelled_48EB880D4AEA7691777FF0BF0313B74A();
	void OnCancelled_7088972C45C8BDAB27567A92C0956552();
	void OnCancelled_A42F64B64A397F1E02120688EC5E37CA();
	void OnCancelled_ACE702A74BBAF730A51502B0A5DB5007();
	void OnCancelled_B53460714E5D5403AA7B8FB2AD2EA137();
	void OnChange_160E231B4F3D334FFF7AD18F3FFA8FF1(EMovementMode NewMovementMode, uint8 CustomMoveMode);
	void OnChange_2370C89241DEA332A44F90AC5ACF7102(EMovementMode NewMovementMode, uint8 CustomMoveMode);
	void OnChange_D75B30F24B99B9D05A8481AD4C941B16(EMovementMode NewMovementMode, uint8 CustomMoveMode);
	void OnCompleted_48EB880D4AEA7691777FF0BF0313B74A();
	void OnCompleted_7088972C45C8BDAB27567A92C0956552();
	void OnCompleted_A42F64B64A397F1E02120688EC5E37CA();
	void OnCompleted_ACE702A74BBAF730A51502B0A5DB5007();
	void OnCompleted_B53460714E5D5403AA7B8FB2AD2EA137();
	void OnFinish_27F24A524ADDA417AE7C2C9339FD7D1E();
	void OnFinish_352857444D48CC8F2F55928DF4E1ACAD();
	void OnFinish_3FC55EF643BE7DE590C91E87DDF78A36();
	void OnFinish_405C7B014C44B464AA6C42AA846D7ED6();
	void OnFinish_5189A6ED49DC483076E08EA35B4AD70E();
	void OnFinish_715338FC4131842A26987FB3C9B1F647();
	void OnFinish_97FE3A7A4A6AD804B1D41DA3B6BDD2DB();
	void OnFinish_F6AD5F334065C4E2A79DEB846C713BB1();
	void OnInterrupted_48EB880D4AEA7691777FF0BF0313B74A();
	void OnInterrupted_7088972C45C8BDAB27567A92C0956552();
	void OnInterrupted_A42F64B64A397F1E02120688EC5E37CA();
	void OnInterrupted_ACE702A74BBAF730A51502B0A5DB5007();
	void OnInterrupted_B53460714E5D5403AA7B8FB2AD2EA137();
	void OnThresholdMet_B29712754FA9EE0FA1E0528608BE3CB6();
	void PlayMontageAndSlide();
	void RecoverBeforeEnd();
	void RecoveryFinished();
	void ReleaseLookLock();
	void SetCompelTime();
	void StartCharmedMovement(class ACharacter* CharmedCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Voice_Compelled_C">();
	}
	static class UGA_Voice_Compelled_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Voice_Compelled_C>();
	}
};
static_assert(alignof(UGA_Voice_Compelled_C) == 0x000008, "Wrong alignment on UGA_Voice_Compelled_C");
static_assert(sizeof(UGA_Voice_Compelled_C) == 0x0005F8, "Wrong size on UGA_Voice_Compelled_C");
static_assert(offsetof(UGA_Voice_Compelled_C, UberGraphFrame) == 0x000518, "Member 'UGA_Voice_Compelled_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, LocationSource) == 0x000520, "Member 'UGA_Voice_Compelled_C::LocationSource' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, CharacterAvatar) == 0x000528, "Member 'UGA_Voice_Compelled_C::CharacterAvatar' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, ActiveCompelledEffect) == 0x000530, "Member 'UGA_Voice_Compelled_C::ActiveCompelledEffect' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, Kneel_Dist) == 0x000540, "Member 'UGA_Voice_Compelled_C::Kneel_Dist' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, LastStuckPos) == 0x000548, "Member 'UGA_Voice_Compelled_C::LastStuckPos' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, StuckDistSqr) == 0x000560, "Member 'UGA_Voice_Compelled_C::StuckDistSqr' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, StuckTimer) == 0x000568, "Member 'UGA_Voice_Compelled_C::StuckTimer' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, StuckThreshold) == 0x000570, "Member 'UGA_Voice_Compelled_C::StuckThreshold' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, bUpdatingRotation) == 0x000578, "Member 'UGA_Voice_Compelled_C::bUpdatingRotation' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, RotationTime) == 0x000580, "Member 'UGA_Voice_Compelled_C::RotationTime' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, bSliding) == 0x000588, "Member 'UGA_Voice_Compelled_C::bSliding' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, CompelSpeed) == 0x000590, "Member 'UGA_Voice_Compelled_C::CompelSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, CompelTime) == 0x000598, "Member 'UGA_Voice_Compelled_C::CompelTime' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, PostCompelFreezeTime) == 0x0005A0, "Member 'UGA_Voice_Compelled_C::PostCompelFreezeTime' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, BeingCompelled_AM) == 0x0005A8, "Member 'UGA_Voice_Compelled_C::BeingCompelled_AM' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, bHasRecovered) == 0x0005B0, "Member 'UGA_Voice_Compelled_C::bHasRecovered' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, CompelIn_AM) == 0x0005B8, "Member 'UGA_Voice_Compelled_C::CompelIn_AM' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, RecoveryHeadShakeTime) == 0x0005C0, "Member 'UGA_Voice_Compelled_C::RecoveryHeadShakeTime' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, CompelOut_AM) == 0x0005C8, "Member 'UGA_Voice_Compelled_C::CompelOut_AM' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, NearTargetThresholdSquared) == 0x0005D0, "Member 'UGA_Voice_Compelled_C::NearTargetThresholdSquared' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, CompelledTargetGC_Tag) == 0x0005D8, "Member 'UGA_Voice_Compelled_C::CompelledTargetGC_Tag' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, NPCCompelTime) == 0x0005E0, "Member 'UGA_Voice_Compelled_C::NPCCompelTime' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, PlayerCompelTime) == 0x0005E8, "Member 'UGA_Voice_Compelled_C::PlayerCompelTime' has a wrong offset!");
static_assert(offsetof(UGA_Voice_Compelled_C, CompelIdle_AM) == 0x0005F0, "Member 'UGA_Voice_Compelled_C::CompelIdle_AM' has a wrong offset!");

}

