#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NinjaLiveComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SingleObjectType_Enum_structs.hpp"
#include "QuantizerMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SimPrecision_Enum_structs.hpp"
#include "UserInput_Enum_structs.hpp"
#include "RenderTargetList_structs.hpp"
#include "DreamworldPreInit_structs.hpp"
#include "QuantizerAxisIgnore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NinjaLiveComponent.NinjaLiveComponent_C
// 0x0DD8 (0x0F00 - 0x0128)
class UNinjaLiveComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0128(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          ComponentActivatedByPawnProximity;                 // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableComponent;                                  // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BeginPlaySupressed;                                // 0x0132(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InitDone;                                          // 0x0133(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MaterialInstacesDone;                              // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoConnectToMemoryPool_IF_Found;                  // 0x0135(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MemPoolManagerDetected;                            // 0x0136(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PoolManagerOverridesLocalSettings;                 // 0x0137(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResolutionX;                                       // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResolutionY;                                       // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PreferredTraceChannelName;                         // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CollisionChannel;                                  // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TraceChannelsSet;                                  // 0x0152(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESimPrecision_Enum                            SimPrecision;                                      // 0x0153(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePressureSolver1__DefaultIs2_;                   // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PressureSolver1_MaxIterations;                     // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PressureSolver2_MaxIterations;                     // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PressureSolver2_KernelReduction;                   // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSamplingFPS;                                    // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinSamplingFPS;                                    // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HalfResPressureAndDivergenceBuffers;               // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugMessages_TraceChannels;                   // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugMessages_MemoryManagement;                // 0x0172(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugMessages_CollisionAndTracing;             // 0x0173(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugMessages_LODInitial;                      // 0x0174(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugMessages_LODRuntime;                      // 0x0175(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugMessages_InterfaceControl;                // 0x0176(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugMessages_RenderTargetExport;              // 0x0177(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowWarning_NumberOfBonesToTrack;                  // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisualizeCustomTraceSource;                        // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SaveDebugMessagesToDefaultLog;                     // 0x017A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17B[0x5];                                      // 0x017B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebugMessagesLifetime;                             // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TraceMeshComponent;                                // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         SamplingFPS;                                       // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TickRateCustom;                                    // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LOD1_ReduceSimQuality;                             // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LOD2_ReduceSamplingFPS;                            // 0x01A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A2[0x6];                                      // 0x01A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LOD_FarBound;                                      // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LOD_NearBound;                                     // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LOD_Steps;                                         // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LOD_StepRange;                                     // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                LOD_StepsArray;                                    // 0x01C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SimPrecisionIndex;                                 // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MemConsumption;                                    // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapLengthTmp;                                      // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      InactiveGrayMaterial;                              // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              ComponentRePlayEvent;                              // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UObject* Consumer, double MemConsumption, bool TakenOrReturned)> ComponentBroadcastMemConsumption; // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          PawnInsideActivationBounds;                        // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LoadedDataTable;                                   // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 LoadedDataTablePath;                               // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FString, double>                   PresetMap;                                         // 0x0238(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 ActualPreset;                                      // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UDataTable*                             DefaultPreset;                                     // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             PersistentPreset;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           PresetSearchPaths;                                 // 0x02A8(0x0010)(Edit, BlueprintVisible)
	class FName                                   PresetNameFilterCriteria;                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TraceMeshInvisible;                                // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutputMaterialSelected;                            // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             OutputMaterials;                                   // 0x02C8(0x0010)(Edit, BlueprintVisible)
	bool                                          ForceAutoLoadPreset;                               // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         RenderTargetsList;                                 // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, class UTextureRenderTarget2D*> RenderTargetsMap;                             // 0x02F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               MI_Advection;                                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_Divergence;                                     // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_PressureCycle1;                                 // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_PressureCycle2;                                 // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        VeloStrength;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VeloOffsetX;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VeloOffsetY;                                       // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VeloRotate;                                        // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VeloAmpNoise;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VeloDirNoise;                                      // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Apply1stOutMatToActorsWithTag;                     // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Apply1stOutMatToComponentsWithTag;                 // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FeedTaggedActorNiagaraComponent;                   // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Make1stOutputAvailableFor2ndOutput;                // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Make1stOutputAvailableForNiagara;                  // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MakePressureAvailableForNiagara;                   // 0x03B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B3[0x1];                                      // 0x03B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SecondaryOutputMaterialSelected;                   // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             SecondaryOutputMaterials;                          // 0x03B8(0x0010)(Edit, BlueprintVisible)
	class FName                                   Apply2ndOutMatToActorsWithTag;                     // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Apply2ndOutMatToComponentsWithTag;                 // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TertiaryOutputMaterialSelected;                    // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             TertiaryOutputMaterials;                           // 0x03E0(0x0010)(Edit, BlueprintVisible)
	class FName                                   Apply3rdOutMatToActorsWithTag;                     // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Apply3rdOutMatToComponentsWithTag;                 // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRenderTargetAsInput;                            // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget*                   InputRenderTarget;                                 // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          RGB_InputMaterial;                                 // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InputMaterialClamp;                                // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_412[0x2];                                      // 0x0412(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputMaterialSelected;                             // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             InputMaterials;                                    // 0x0418(0x0010)(Edit, BlueprintVisible)
	bool                                          SimAreaClamp;                                      // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowMouseCursor;                                   // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42A[0x6];                                      // 0x042A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Divergence;                                        // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputFeedback;                                     // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlowFeedback;                                      // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VeloFromSimAreaMotion;                             // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OffsetFromSimAreaMotion;                           // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VeloFromBrushMotion;                               // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrushSize;                                         // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        BrushStrength;                                     // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrushStrengthTemp1;                                // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EraserMode;                                        // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BrushHardness;                                     // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ParticleTemplate;                                  // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DensityTemplate;                                   // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 VelocityTemplate;                                  // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 MetaData;                                          // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        BrushPuncture;                                     // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_CollisionPainterDot;                            // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_CollisionPainterLine;                           // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_CollisionPainterOffset;                         // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_CompositeAndGradient;                           // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_Output;                                         // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_SecondaryOutput;                                // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_TertiaryOutput;                                 // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_Null;                                           // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     NullMaterial;                                      // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   NullName;                                          // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 NullString;                                        // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UTexture2D*                             VelocityInput;                                     // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             DensityInput;                                      // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipRenderTargetsForMobile;                        // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SelfService_IF_PoolEmpty;                          // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_542[0x6];                                      // 0x0542(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          ActivationVolume;                                  // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          AutonomousMode;                                    // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AbsPathForVelocityTemplate;                        // 0x0551(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AbsPathForDensityTemplate;                         // 0x0552(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_553[0x5];                                      // 0x0553(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UPrimitiveComponent*>       SkeletalMesh_TempArray_Pairs;                      // 0x0558(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPrimitiveComponent*>            OverlappingComponents;                             // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class USkeletalMeshComponent*>         ContinuousInteractionSkeletalComponent;            // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<bool>                                  ListOfAvailableTempArrays;                         // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UPrimitiveComponent*                    OverlappingSkeletalMesh;                           // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   OverlappingBone;                                   // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position1_3D;                                      // 0x05E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastPosition1_3D;                                  // 0x0600(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TraceMeshSizeCoeff;                                // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OverlappingMeshSizeCoeff;                          // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OverlappingComponent;                              // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         TouchLookupIndex;                                  // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   LastPosition3_2D;                                  // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           LastPosition2_2D;                                  // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MousePass;                                         // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_659[0x3];                                      // 0x0659(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Position2_2D;                                      // 0x065C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66C[0x4];                                      // 0x066C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   Position3_2D;                                      // 0x0670(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PosDataType;                                       // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowVelocityDebugCone;                             // 0x0684(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreInterfaceCommands;                           // 0x0685(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableAndNotTickBlock;                            // 0x0686(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_687[0x1];                                      // 0x0687(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InputFeedbackInterface;                            // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrushStrengthTemp2;                                // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TickBlocker;                                       // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699[0x3];                                      // 0x0699(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FluidSolver1Iterations;                            // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         NinjaLIVETraceExclude;                             // 0x06A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        DeltaSeconds;                                      // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseUnrealNativeEventTick;                          // 0x06B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SingleInput;                                       // 0x06B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Touch;                                             // 0x06BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BB[0x5];                                      // 0x06BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LOD_CheckFrequency;                                // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PauseSimWhenNotVisible;                            // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WaitBeforePause;                                   // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MousePressed;                                      // 0x06D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ContinuousInteractionWithOwnerActor;               // 0x06D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DA[0x2];                                      // 0x06DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Position1_2D;                                      // 0x06DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeSinceLastClick;                                // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Position1_3D_Static;                               // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F9[0x7];                                      // 0x06F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeSinceLastCollision;                            // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeCounter;                                       // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Overlap1;                                          // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711[0x7];                                      // 0x0711(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ComponentShutdownEvent;                            // 0x0718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<EObjectTypeQuery>                      ContinuousInteractionInclusiveObjType;             // 0x0728(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           ContinuousInteractionComponentNamesExact;          // 0x0738(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           ContinuousInteractionBoneNamesExact;               // 0x0748(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           ContinuousInteractionBoneNamesExactTemp;           // 0x0758(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SingleTargetMode;                                  // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESingleObjectType_Enum                        SingleTargetType;                                  // 0x0769(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76A[0x2];                                      // 0x076A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SingleTargetModeSkeletalMeshIndex;                 // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SingleTargetMoveSetSimSpeed;                       // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_771[0x7];                                      // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpeedInfluenceFactor;                              // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ClampMaxVelocity;                                  // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CameraFacingTraceMesh;                             // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverlapBasedInteraction;                           // 0x0789(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUserInput_Enum                               UserInputBasedInteraction;                         // 0x078A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrushScaledInverselyByTraceMeshSize;               // 0x078B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrushScaledByInteractingObjSize;                   // 0x078C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseObjBoundsInsteadOfSize;                         // 0x078D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78E[0x2];                                      // 0x078E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GlobalBrushScale;                                  // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UserInputBrushScale;                               // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PrimitiveObjBrushScale;                            // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkeletalMeshBrushScale;                            // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CameraFacing_LockY_Axis;                           // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLegacyCameraFacing;                             // 0x07B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B2[0x2];                                      // 0x07B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TraceMeshTranslucentSortPrio;                      // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TraceMeshQueryCounter;                             // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BC[0x4];                                      // 0x07BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LimitUnrealNativeEventTick;                        // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GlobalVeloTempCondition;                           // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C9[0x7];                                      // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TracePositionTemp;                                 // 0x07D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastTracePositionTemp;                             // 0x07E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SimEdgeBouncyness;                                 // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeDensityAtSimEdge;                              // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EdgeMaskWidth;                                     // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VeloDirNoiseSize;                                  // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VeloDirNoiseSpeed;                                 // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseInputMaterials;                                 // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_829[0x7];                                      // 0x0829(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DensityTxtScale;                                   // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DensityTxtOffsetX;                                 // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DensityTxtOffsetY;                                 // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrushNoise;                                        // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrushNoiseInWorldSpace;                            // 0x0850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_851[0x7];                                      // 0x0851(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BrushDensityNoiseScale;                            // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrushDensityNoiseFreq;                             // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrushVelocityNoiseScale;                           // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrushVelocityNoiseFreq;                            // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TraceMeshInitialRotation;                          // 0x0878(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableRayMarching;                                 // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_891[0x7];                                      // 0x0891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LightDirectionProvider;                            // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          LightDirectionSourceIsRotation_NOT_Pos;            // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DistanceBasedLightAttenuation;                     // 0x08A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A2[0x6];                                      // 0x08A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AttenuationPower;                                  // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PointLightMovementMultiplier;                      // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TwoSidedShading;                                   // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B9[0x7];                                      // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TwoSideBlendPow;                                   // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Facing;                                            // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OffsetLightVector;                                 // 0x08D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceManualSunPosition;                            // 0x08E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E9[0x7];                                      // 0x08E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SunLatitude;                                       // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SunLongitude;                                      // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SunHeight;                                         // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowLightDirectionVector__Yellow_;                 // 0x0908(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowNiagaraSysUpvector__Red_;                      // 0x0909(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowFacingPlane;                                   // 0x090A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrintFacing;                                       // 0x090B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90C[0x4];                                      // 0x090C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        VeloInputTile;                                     // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VeloInputOffsetSpeed;                              // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DensityTxtMult;                                    // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DensityInputNoiseAmp;                              // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DensityInputNoiseOffset;                           // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DensityInputNoiseTile;                             // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterCollection*           SetInternalParamsToMaterialParamCollection;        // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          DrawInternalRenderTargetToExternal;                // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_949[0x7];                                      // 0x0949(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERenderTargetList>                     InternalRenderTargetsToExport;                     // 0x0950(0x0010)(Edit, BlueprintVisible)
	TArray<class UTextureRenderTarget2D*>         ExternalRenderTargets;                             // 0x0960(0x0010)(Edit, BlueprintVisible)
	class UTexture*                               CollisionMask;                                     // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CollisionMaskIsNonDefault;                         // 0x0978(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_979[0x7];                                      // 0x0979(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASceneCapture2D*                        InputSceneCaptureCamera;                           // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UMediaPlayer*                           InputMediaPlayer;                                  // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMediaTexture*                          MediaTexture;                                      // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFileMediaSource*                       InputMediaSource;                                  // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        InputMediaLoopLength;                              // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomizeNoiseOffsets;                             // 0x09A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A9[0x3];                                      // 0x09A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverlapCounter;                                    // 0x09AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomizeDensityTextureOffset;                     // 0x09B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B1[0x7];                                      // 0x09B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             OverwritePresetDensityInput;                       // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             OverwritePresetVelocityInput;                      // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        BrushRnd;                                          // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SimSpeedAdjustmentLatency;                         // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpeedTemp;                                         // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StopUsingPainterCanvasWhenIdle;                    // 0x09E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E1[0x3];                                      // 0x09E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Experimental_PSolver2KernelIndexOffset;            // 0x09E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Experimental_PressureFeedback;                     // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TraceMeshIsAlsoInteractionVolume;                  // 0x09F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F1[0x7];                                      // 0x09F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TempArray0;                                        // 0x09F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray1;                                        // 0x0A08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray2;                                        // 0x0A18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray3;                                        // 0x0A28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray4;                                        // 0x0A38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray5;                                        // 0x0A48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray6;                                        // 0x0A58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray7;                                        // 0x0A68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray8;                                        // 0x0A78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray9;                                        // 0x0A88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray10;                                       // 0x0A98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray11;                                       // 0x0AA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray12;                                       // 0x0AB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray13;                                       // 0x0AC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray14;                                       // 0x0AD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray15;                                       // 0x0AE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray16;                                       // 0x0AF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray17;                                       // 0x0B08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray18;                                       // 0x0B18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray19;                                       // 0x0B28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray20;                                       // 0x0B38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UseCustomTraceSource;                              // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomTraceSourcePosition;                         // 0x0B50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           TempArray21;                                       // 0x0B68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray22;                                       // 0x0B78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray23;                                       // 0x0B88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray24;                                       // 0x0B98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray25;                                       // 0x0BA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray26;                                       // 0x0BB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray27;                                       // 0x0BC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray28;                                       // 0x0BD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray29;                                       // 0x0BE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray30;                                       // 0x0BF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray31;                                       // 0x0C08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray32;                                       // 0x0C18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray33;                                       // 0x0C28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray34;                                       // 0x0C38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray35;                                       // 0x0C48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray36;                                       // 0x0C58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray37;                                       // 0x0C68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray38;                                       // 0x0C78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TempArray39;                                       // 0x0C88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        DampenBrushBelowThisVelocity;                      // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DampenIgnoresStaticMeshes;                         // 0x0CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA1[0x7];                                      // 0x0CA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DampenBrushFactor;                                 // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrushVelocityPow;                                  // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SimAreaMotionEffectsBrushPuncture;                 // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LodLevel;                                          // 0x0CC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowAbsoluteBlackDensity;                         // 0x0CC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC5[0x3];                                      // 0x0CC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceMeshPos;                                      // 0x0CC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceMeshLastPos;                                  // 0x0CE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PressureEdgeMasking;                               // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             CoreSimMaterials;                                  // 0x0D00(0x0010)(Edit, BlueprintVisible)
	struct FVector                                TraceMeshDeltaPos;                                 // 0x0D10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NullVector;                                        // 0x0D28(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InteractionVolumeIsPresent;                        // 0x0D40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D41[0x7];                                      // 0x0D41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceMeshPosInitialLocal;                          // 0x0D48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceMeshPosInitialFractionalPart;                 // 0x0D60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceMeshPosInitialWorld;                          // 0x0D78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         QuantizerStepSize;                                 // 0x0D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D94[0x4];                                      // 0x0D94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceMeshParentPos;                                // 0x0D98(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceMeshParentLastPos;                            // 0x0DB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuantizerMode                                TraceMeshMovingInWorldSpace;                       // 0x0DC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuantizerAxisIgnore                          MovementNotQuantizedToStepsOnAxis;                 // 0x0DC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SecondaryMaterialsPresent;                         // 0x0DCA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuantizerAxisIgnore                          MovementIsLockedOnThisAxis;                        // 0x0DCB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceTraceMeshToCustomVerticalPos;                 // 0x0DCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DCD[0x3];                                      // 0x0DCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ForceTraceMeshVerticalPosition;                    // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnablePaintBufferOffsetInWorldSpace;               // 0x0DD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimplePainterMode;                                 // 0x0DD9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DDA[0x6];                                      // 0x0DDA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          InteractionVolume;                                 // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          NiagaraSystemsPresent;                             // 0x0DE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DE9[0x7];                                      // 0x0DE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              NiagaraSystemsToDrive;                             // 0x0DF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Exp_PressureFeedbackComponent;                     // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Exp_DivergenceFeedbackComponent;                   // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force8bitSimplePainterBuffers;                     // 0x0E10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force8bitOutputBuffer;                             // 0x0E11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E12[0x6];                                      // 0x0E12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    SingleTarget;                                      // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          UE5EAFLAG;                                         // 0x0E20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force2xResolutionOutputBuffer;                     // 0x0E21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceMaxSamplingFPS_ToNiagara;                     // 0x0E22(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MaterialCollectionPresent;                         // 0x0E23(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E24[0x4];                                      // 0x0E24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FVector& TraceMeshPos)> WorldSpaceOffset;             // 0x0E28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          TertiaryMaterialsPresent;                          // 0x0E38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SupressUE51TextureSmearing;                        // 0x0E39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E3A[0x6];                                      // 0x0E3A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ANinjaLive_MemoryPoolManager_C*         Memory_Pool_Manager;                               // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FluidNinjaEnabled;                                 // 0x0E48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E49[0x7];                                      // 0x0E49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     ActivationTraceChannel;                            // 0x0E50(0x0010)(Edit, BlueprintVisible)
	double                                        FadeDuration;                                      // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindDensityInfluence;                              // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindSpeedInfluence;                                // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDeformationBufferCompatibility;              // 0x0E78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E79[0x7];                                      // 0x0E79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RT_Painter;                                        // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableWindDeformation;                             // 0x0E88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E89[0x7];                                      // 0x0E89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CoreSimMaterials_Persistent;                       // 0x0E90(0x0010)(Edit, BlueprintVisible)
	bool                                          UseOverlapBasedInteraction;                        // 0x0EA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePaintBufferOffsetInWorldSpace;                  // 0x0EA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA2[0x6];                                      // 0x0EA2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RT_VeloDensity;                                    // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowWindInfluence;                                // 0x0EB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableWindDeformationCvar;                         // 0x0EB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EB2[0x6];                                      // 0x0EB2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ParsedSpeed;                                       // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DeformationBufferCapture_C*         DeformationBufferCapture;                          // 0x0EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 OutputRenderTarget;                                // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RT_DownscaledPainter;                              // 0x0ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UImprintCaptureComponent*               ImprintCapture;                                    // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        WindStrength;                                      // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_CollisionPainterOffset2;                        // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_CollisionPainterOffset3;                        // 0x0EF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_CollisionPainterOffset4;                        // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Clear();
	void ComponentRePlayEvent2();
	void ExecuteUbergraph_NinjaLiveComponent(int32 EntryPoint);
	void GetImprintCaptureComponentRecursive(class UImprintCaptureComponent** ImprintCaptureComponent);
	void LiveActivation(class FName ParamName, double FadeTimeOfBrush, double FadeTimeOfCanvas);
	void LiveDebug(class FName ParamName);
	void LiveFluidParams(double BrushSize_0);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds_0);
	void Replay();
	void Shutdown();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NinjaLiveComponent_C">();
	}
	static class UNinjaLiveComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNinjaLiveComponent_C>();
	}
};
static_assert(alignof(UNinjaLiveComponent_C) == 0x000008, "Wrong alignment on UNinjaLiveComponent_C");
static_assert(sizeof(UNinjaLiveComponent_C) == 0x000F00, "Wrong size on UNinjaLiveComponent_C");
static_assert(offsetof(UNinjaLiveComponent_C, UberGraphFrame) == 0x000128, "Member 'UNinjaLiveComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ComponentActivatedByPawnProximity) == 0x000130, "Member 'UNinjaLiveComponent_C::ComponentActivatedByPawnProximity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DisableComponent) == 0x000131, "Member 'UNinjaLiveComponent_C::DisableComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BeginPlaySupressed) == 0x000132, "Member 'UNinjaLiveComponent_C::BeginPlaySupressed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InitDone) == 0x000133, "Member 'UNinjaLiveComponent_C::InitDone' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MaterialInstacesDone) == 0x000134, "Member 'UNinjaLiveComponent_C::MaterialInstacesDone' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AutoConnectToMemoryPool_IF_Found) == 0x000135, "Member 'UNinjaLiveComponent_C::AutoConnectToMemoryPool_IF_Found' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MemPoolManagerDetected) == 0x000136, "Member 'UNinjaLiveComponent_C::MemPoolManagerDetected' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PoolManagerOverridesLocalSettings) == 0x000137, "Member 'UNinjaLiveComponent_C::PoolManagerOverridesLocalSettings' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ResolutionX) == 0x000138, "Member 'UNinjaLiveComponent_C::ResolutionX' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ResolutionY) == 0x00013C, "Member 'UNinjaLiveComponent_C::ResolutionY' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PreferredTraceChannelName) == 0x000140, "Member 'UNinjaLiveComponent_C::PreferredTraceChannelName' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceChannel) == 0x000150, "Member 'UNinjaLiveComponent_C::TraceChannel' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CollisionChannel) == 0x000151, "Member 'UNinjaLiveComponent_C::CollisionChannel' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceChannelsSet) == 0x000152, "Member 'UNinjaLiveComponent_C::TraceChannelsSet' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimPrecision) == 0x000153, "Member 'UNinjaLiveComponent_C::SimPrecision' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UsePressureSolver1__DefaultIs2_) == 0x000154, "Member 'UNinjaLiveComponent_C::UsePressureSolver1__DefaultIs2_' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PressureSolver1_MaxIterations) == 0x000158, "Member 'UNinjaLiveComponent_C::PressureSolver1_MaxIterations' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PressureSolver2_MaxIterations) == 0x00015C, "Member 'UNinjaLiveComponent_C::PressureSolver2_MaxIterations' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PressureSolver2_KernelReduction) == 0x000160, "Member 'UNinjaLiveComponent_C::PressureSolver2_KernelReduction' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MaxSamplingFPS) == 0x000168, "Member 'UNinjaLiveComponent_C::MaxSamplingFPS' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MinSamplingFPS) == 0x00016C, "Member 'UNinjaLiveComponent_C::MinSamplingFPS' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, HalfResPressureAndDivergenceBuffers) == 0x000170, "Member 'UNinjaLiveComponent_C::HalfResPressureAndDivergenceBuffers' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessages_TraceChannels) == 0x000171, "Member 'UNinjaLiveComponent_C::ShowDebugMessages_TraceChannels' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessages_MemoryManagement) == 0x000172, "Member 'UNinjaLiveComponent_C::ShowDebugMessages_MemoryManagement' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessages_CollisionAndTracing) == 0x000173, "Member 'UNinjaLiveComponent_C::ShowDebugMessages_CollisionAndTracing' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessages_LODInitial) == 0x000174, "Member 'UNinjaLiveComponent_C::ShowDebugMessages_LODInitial' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessages_LODRuntime) == 0x000175, "Member 'UNinjaLiveComponent_C::ShowDebugMessages_LODRuntime' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessages_InterfaceControl) == 0x000176, "Member 'UNinjaLiveComponent_C::ShowDebugMessages_InterfaceControl' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowDebugMessages_RenderTargetExport) == 0x000177, "Member 'UNinjaLiveComponent_C::ShowDebugMessages_RenderTargetExport' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowWarning_NumberOfBonesToTrack) == 0x000178, "Member 'UNinjaLiveComponent_C::ShowWarning_NumberOfBonesToTrack' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VisualizeCustomTraceSource) == 0x000179, "Member 'UNinjaLiveComponent_C::VisualizeCustomTraceSource' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SaveDebugMessagesToDefaultLog) == 0x00017A, "Member 'UNinjaLiveComponent_C::SaveDebugMessagesToDefaultLog' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DebugMessagesLifetime) == 0x000180, "Member 'UNinjaLiveComponent_C::DebugMessagesLifetime' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshComponent) == 0x000188, "Member 'UNinjaLiveComponent_C::TraceMeshComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SamplingFPS) == 0x000190, "Member 'UNinjaLiveComponent_C::SamplingFPS' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TickRateCustom) == 0x000198, "Member 'UNinjaLiveComponent_C::TickRateCustom' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LOD1_ReduceSimQuality) == 0x0001A0, "Member 'UNinjaLiveComponent_C::LOD1_ReduceSimQuality' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LOD2_ReduceSamplingFPS) == 0x0001A1, "Member 'UNinjaLiveComponent_C::LOD2_ReduceSamplingFPS' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LOD_FarBound) == 0x0001A8, "Member 'UNinjaLiveComponent_C::LOD_FarBound' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LOD_NearBound) == 0x0001B0, "Member 'UNinjaLiveComponent_C::LOD_NearBound' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LOD_Steps) == 0x0001B8, "Member 'UNinjaLiveComponent_C::LOD_Steps' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LOD_StepRange) == 0x0001C0, "Member 'UNinjaLiveComponent_C::LOD_StepRange' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LOD_StepsArray) == 0x0001C8, "Member 'UNinjaLiveComponent_C::LOD_StepsArray' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimPrecisionIndex) == 0x0001D8, "Member 'UNinjaLiveComponent_C::SimPrecisionIndex' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MemConsumption) == 0x0001E0, "Member 'UNinjaLiveComponent_C::MemConsumption' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MapLengthTmp) == 0x0001E8, "Member 'UNinjaLiveComponent_C::MapLengthTmp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InactiveGrayMaterial) == 0x0001F0, "Member 'UNinjaLiveComponent_C::InactiveGrayMaterial' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ComponentRePlayEvent) == 0x0001F8, "Member 'UNinjaLiveComponent_C::ComponentRePlayEvent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ComponentBroadcastMemConsumption) == 0x000208, "Member 'UNinjaLiveComponent_C::ComponentBroadcastMemConsumption' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PawnInsideActivationBounds) == 0x000218, "Member 'UNinjaLiveComponent_C::PawnInsideActivationBounds' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LoadedDataTable) == 0x000220, "Member 'UNinjaLiveComponent_C::LoadedDataTable' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LoadedDataTablePath) == 0x000228, "Member 'UNinjaLiveComponent_C::LoadedDataTablePath' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PresetMap) == 0x000238, "Member 'UNinjaLiveComponent_C::PresetMap' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ActualPreset) == 0x000288, "Member 'UNinjaLiveComponent_C::ActualPreset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DefaultPreset) == 0x000298, "Member 'UNinjaLiveComponent_C::DefaultPreset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PersistentPreset) == 0x0002A0, "Member 'UNinjaLiveComponent_C::PersistentPreset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PresetSearchPaths) == 0x0002A8, "Member 'UNinjaLiveComponent_C::PresetSearchPaths' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PresetNameFilterCriteria) == 0x0002B8, "Member 'UNinjaLiveComponent_C::PresetNameFilterCriteria' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshInvisible) == 0x0002C0, "Member 'UNinjaLiveComponent_C::TraceMeshInvisible' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OutputMaterialSelected) == 0x0002C4, "Member 'UNinjaLiveComponent_C::OutputMaterialSelected' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OutputMaterials) == 0x0002C8, "Member 'UNinjaLiveComponent_C::OutputMaterials' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ForceAutoLoadPreset) == 0x0002D8, "Member 'UNinjaLiveComponent_C::ForceAutoLoadPreset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RenderTargetsList) == 0x0002E0, "Member 'UNinjaLiveComponent_C::RenderTargetsList' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RenderTargetsMap) == 0x0002F0, "Member 'UNinjaLiveComponent_C::RenderTargetsMap' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_Advection) == 0x000340, "Member 'UNinjaLiveComponent_C::MI_Advection' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_Divergence) == 0x000348, "Member 'UNinjaLiveComponent_C::MI_Divergence' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_PressureCycle1) == 0x000350, "Member 'UNinjaLiveComponent_C::MI_PressureCycle1' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_PressureCycle2) == 0x000358, "Member 'UNinjaLiveComponent_C::MI_PressureCycle2' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloStrength) == 0x000360, "Member 'UNinjaLiveComponent_C::VeloStrength' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloOffsetX) == 0x000368, "Member 'UNinjaLiveComponent_C::VeloOffsetX' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloOffsetY) == 0x000370, "Member 'UNinjaLiveComponent_C::VeloOffsetY' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloRotate) == 0x000378, "Member 'UNinjaLiveComponent_C::VeloRotate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloAmpNoise) == 0x000380, "Member 'UNinjaLiveComponent_C::VeloAmpNoise' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloDirNoise) == 0x000388, "Member 'UNinjaLiveComponent_C::VeloDirNoise' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Speed) == 0x000390, "Member 'UNinjaLiveComponent_C::Speed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Apply1stOutMatToActorsWithTag) == 0x000398, "Member 'UNinjaLiveComponent_C::Apply1stOutMatToActorsWithTag' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Apply1stOutMatToComponentsWithTag) == 0x0003A0, "Member 'UNinjaLiveComponent_C::Apply1stOutMatToComponentsWithTag' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FeedTaggedActorNiagaraComponent) == 0x0003A8, "Member 'UNinjaLiveComponent_C::FeedTaggedActorNiagaraComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Make1stOutputAvailableFor2ndOutput) == 0x0003B0, "Member 'UNinjaLiveComponent_C::Make1stOutputAvailableFor2ndOutput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Make1stOutputAvailableForNiagara) == 0x0003B1, "Member 'UNinjaLiveComponent_C::Make1stOutputAvailableForNiagara' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MakePressureAvailableForNiagara) == 0x0003B2, "Member 'UNinjaLiveComponent_C::MakePressureAvailableForNiagara' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SecondaryOutputMaterialSelected) == 0x0003B4, "Member 'UNinjaLiveComponent_C::SecondaryOutputMaterialSelected' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SecondaryOutputMaterials) == 0x0003B8, "Member 'UNinjaLiveComponent_C::SecondaryOutputMaterials' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Apply2ndOutMatToActorsWithTag) == 0x0003C8, "Member 'UNinjaLiveComponent_C::Apply2ndOutMatToActorsWithTag' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Apply2ndOutMatToComponentsWithTag) == 0x0003D0, "Member 'UNinjaLiveComponent_C::Apply2ndOutMatToComponentsWithTag' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TertiaryOutputMaterialSelected) == 0x0003D8, "Member 'UNinjaLiveComponent_C::TertiaryOutputMaterialSelected' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TertiaryOutputMaterials) == 0x0003E0, "Member 'UNinjaLiveComponent_C::TertiaryOutputMaterials' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Apply3rdOutMatToActorsWithTag) == 0x0003F0, "Member 'UNinjaLiveComponent_C::Apply3rdOutMatToActorsWithTag' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Apply3rdOutMatToComponentsWithTag) == 0x0003F8, "Member 'UNinjaLiveComponent_C::Apply3rdOutMatToComponentsWithTag' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseRenderTargetAsInput) == 0x000400, "Member 'UNinjaLiveComponent_C::UseRenderTargetAsInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputRenderTarget) == 0x000408, "Member 'UNinjaLiveComponent_C::InputRenderTarget' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RGB_InputMaterial) == 0x000410, "Member 'UNinjaLiveComponent_C::RGB_InputMaterial' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMaterialClamp) == 0x000411, "Member 'UNinjaLiveComponent_C::InputMaterialClamp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMaterialSelected) == 0x000414, "Member 'UNinjaLiveComponent_C::InputMaterialSelected' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMaterials) == 0x000418, "Member 'UNinjaLiveComponent_C::InputMaterials' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimAreaClamp) == 0x000428, "Member 'UNinjaLiveComponent_C::SimAreaClamp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowMouseCursor) == 0x000429, "Member 'UNinjaLiveComponent_C::ShowMouseCursor' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Divergence) == 0x000430, "Member 'UNinjaLiveComponent_C::Divergence' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputFeedback) == 0x000438, "Member 'UNinjaLiveComponent_C::InputFeedback' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FlowFeedback) == 0x000440, "Member 'UNinjaLiveComponent_C::FlowFeedback' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloFromSimAreaMotion) == 0x000448, "Member 'UNinjaLiveComponent_C::VeloFromSimAreaMotion' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OffsetFromSimAreaMotion) == 0x000450, "Member 'UNinjaLiveComponent_C::OffsetFromSimAreaMotion' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloFromBrushMotion) == 0x000458, "Member 'UNinjaLiveComponent_C::VeloFromBrushMotion' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushSize) == 0x000460, "Member 'UNinjaLiveComponent_C::BrushSize' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushStrength) == 0x000468, "Member 'UNinjaLiveComponent_C::BrushStrength' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushStrengthTemp1) == 0x000470, "Member 'UNinjaLiveComponent_C::BrushStrengthTemp1' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, EraserMode) == 0x000478, "Member 'UNinjaLiveComponent_C::EraserMode' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushHardness) == 0x000480, "Member 'UNinjaLiveComponent_C::BrushHardness' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ParticleTemplate) == 0x000488, "Member 'UNinjaLiveComponent_C::ParticleTemplate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityTemplate) == 0x000498, "Member 'UNinjaLiveComponent_C::DensityTemplate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VelocityTemplate) == 0x0004A8, "Member 'UNinjaLiveComponent_C::VelocityTemplate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MetaData) == 0x0004B8, "Member 'UNinjaLiveComponent_C::MetaData' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushPuncture) == 0x0004C8, "Member 'UNinjaLiveComponent_C::BrushPuncture' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_CollisionPainterDot) == 0x0004D0, "Member 'UNinjaLiveComponent_C::MI_CollisionPainterDot' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_CollisionPainterLine) == 0x0004D8, "Member 'UNinjaLiveComponent_C::MI_CollisionPainterLine' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_CollisionPainterOffset) == 0x0004E0, "Member 'UNinjaLiveComponent_C::MI_CollisionPainterOffset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_CompositeAndGradient) == 0x0004E8, "Member 'UNinjaLiveComponent_C::MI_CompositeAndGradient' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_Output) == 0x0004F0, "Member 'UNinjaLiveComponent_C::MI_Output' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_SecondaryOutput) == 0x0004F8, "Member 'UNinjaLiveComponent_C::MI_SecondaryOutput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_TertiaryOutput) == 0x000500, "Member 'UNinjaLiveComponent_C::MI_TertiaryOutput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_Null) == 0x000508, "Member 'UNinjaLiveComponent_C::MI_Null' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NullMaterial) == 0x000510, "Member 'UNinjaLiveComponent_C::NullMaterial' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NullName) == 0x000518, "Member 'UNinjaLiveComponent_C::NullName' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NullString) == 0x000520, "Member 'UNinjaLiveComponent_C::NullString' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VelocityInput) == 0x000530, "Member 'UNinjaLiveComponent_C::VelocityInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityInput) == 0x000538, "Member 'UNinjaLiveComponent_C::DensityInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FlipRenderTargetsForMobile) == 0x000540, "Member 'UNinjaLiveComponent_C::FlipRenderTargetsForMobile' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SelfService_IF_PoolEmpty) == 0x000541, "Member 'UNinjaLiveComponent_C::SelfService_IF_PoolEmpty' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ActivationVolume) == 0x000548, "Member 'UNinjaLiveComponent_C::ActivationVolume' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AutonomousMode) == 0x000550, "Member 'UNinjaLiveComponent_C::AutonomousMode' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AbsPathForVelocityTemplate) == 0x000551, "Member 'UNinjaLiveComponent_C::AbsPathForVelocityTemplate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AbsPathForDensityTemplate) == 0x000552, "Member 'UNinjaLiveComponent_C::AbsPathForDensityTemplate' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SkeletalMesh_TempArray_Pairs) == 0x000558, "Member 'UNinjaLiveComponent_C::SkeletalMesh_TempArray_Pairs' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlappingComponents) == 0x0005A8, "Member 'UNinjaLiveComponent_C::OverlappingComponents' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionSkeletalComponent) == 0x0005B8, "Member 'UNinjaLiveComponent_C::ContinuousInteractionSkeletalComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ListOfAvailableTempArrays) == 0x0005C8, "Member 'UNinjaLiveComponent_C::ListOfAvailableTempArrays' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlappingSkeletalMesh) == 0x0005D8, "Member 'UNinjaLiveComponent_C::OverlappingSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlappingBone) == 0x0005E0, "Member 'UNinjaLiveComponent_C::OverlappingBone' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Position1_3D) == 0x0005E8, "Member 'UNinjaLiveComponent_C::Position1_3D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LastPosition1_3D) == 0x000600, "Member 'UNinjaLiveComponent_C::LastPosition1_3D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshSizeCoeff) == 0x000618, "Member 'UNinjaLiveComponent_C::TraceMeshSizeCoeff' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlappingMeshSizeCoeff) == 0x000620, "Member 'UNinjaLiveComponent_C::OverlappingMeshSizeCoeff' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlappingComponent) == 0x000628, "Member 'UNinjaLiveComponent_C::OverlappingComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TouchLookupIndex) == 0x000630, "Member 'UNinjaLiveComponent_C::TouchLookupIndex' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LastPosition3_2D) == 0x000638, "Member 'UNinjaLiveComponent_C::LastPosition3_2D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LastPosition2_2D) == 0x000648, "Member 'UNinjaLiveComponent_C::LastPosition2_2D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MousePass) == 0x000658, "Member 'UNinjaLiveComponent_C::MousePass' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Position2_2D) == 0x00065C, "Member 'UNinjaLiveComponent_C::Position2_2D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Position3_2D) == 0x000670, "Member 'UNinjaLiveComponent_C::Position3_2D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PosDataType) == 0x000680, "Member 'UNinjaLiveComponent_C::PosDataType' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowVelocityDebugCone) == 0x000684, "Member 'UNinjaLiveComponent_C::ShowVelocityDebugCone' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, IgnoreInterfaceCommands) == 0x000685, "Member 'UNinjaLiveComponent_C::IgnoreInterfaceCommands' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DisableAndNotTickBlock) == 0x000686, "Member 'UNinjaLiveComponent_C::DisableAndNotTickBlock' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputFeedbackInterface) == 0x000688, "Member 'UNinjaLiveComponent_C::InputFeedbackInterface' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushStrengthTemp2) == 0x000690, "Member 'UNinjaLiveComponent_C::BrushStrengthTemp2' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TickBlocker) == 0x000698, "Member 'UNinjaLiveComponent_C::TickBlocker' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FluidSolver1Iterations) == 0x00069C, "Member 'UNinjaLiveComponent_C::FluidSolver1Iterations' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NinjaLIVETraceExclude) == 0x0006A0, "Member 'UNinjaLiveComponent_C::NinjaLIVETraceExclude' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DeltaSeconds) == 0x0006B0, "Member 'UNinjaLiveComponent_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseUnrealNativeEventTick) == 0x0006B8, "Member 'UNinjaLiveComponent_C::UseUnrealNativeEventTick' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SingleInput) == 0x0006B9, "Member 'UNinjaLiveComponent_C::SingleInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Touch) == 0x0006BA, "Member 'UNinjaLiveComponent_C::Touch' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LOD_CheckFrequency) == 0x0006C0, "Member 'UNinjaLiveComponent_C::LOD_CheckFrequency' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PauseSimWhenNotVisible) == 0x0006C8, "Member 'UNinjaLiveComponent_C::PauseSimWhenNotVisible' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, WaitBeforePause) == 0x0006D0, "Member 'UNinjaLiveComponent_C::WaitBeforePause' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MousePressed) == 0x0006D8, "Member 'UNinjaLiveComponent_C::MousePressed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionWithOwnerActor) == 0x0006D9, "Member 'UNinjaLiveComponent_C::ContinuousInteractionWithOwnerActor' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Position1_2D) == 0x0006DC, "Member 'UNinjaLiveComponent_C::Position1_2D' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TimeSinceLastClick) == 0x0006F0, "Member 'UNinjaLiveComponent_C::TimeSinceLastClick' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Position1_3D_Static) == 0x0006F8, "Member 'UNinjaLiveComponent_C::Position1_3D_Static' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TimeSinceLastCollision) == 0x000700, "Member 'UNinjaLiveComponent_C::TimeSinceLastCollision' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TimeCounter) == 0x000708, "Member 'UNinjaLiveComponent_C::TimeCounter' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Overlap1) == 0x000710, "Member 'UNinjaLiveComponent_C::Overlap1' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ComponentShutdownEvent) == 0x000718, "Member 'UNinjaLiveComponent_C::ComponentShutdownEvent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionInclusiveObjType) == 0x000728, "Member 'UNinjaLiveComponent_C::ContinuousInteractionInclusiveObjType' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionComponentNamesExact) == 0x000738, "Member 'UNinjaLiveComponent_C::ContinuousInteractionComponentNamesExact' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionBoneNamesExact) == 0x000748, "Member 'UNinjaLiveComponent_C::ContinuousInteractionBoneNamesExact' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ContinuousInteractionBoneNamesExactTemp) == 0x000758, "Member 'UNinjaLiveComponent_C::ContinuousInteractionBoneNamesExactTemp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SingleTargetMode) == 0x000768, "Member 'UNinjaLiveComponent_C::SingleTargetMode' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SingleTargetType) == 0x000769, "Member 'UNinjaLiveComponent_C::SingleTargetType' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SingleTargetModeSkeletalMeshIndex) == 0x00076C, "Member 'UNinjaLiveComponent_C::SingleTargetModeSkeletalMeshIndex' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SingleTargetMoveSetSimSpeed) == 0x000770, "Member 'UNinjaLiveComponent_C::SingleTargetMoveSetSimSpeed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SpeedInfluenceFactor) == 0x000778, "Member 'UNinjaLiveComponent_C::SpeedInfluenceFactor' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ClampMaxVelocity) == 0x000780, "Member 'UNinjaLiveComponent_C::ClampMaxVelocity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CameraFacingTraceMesh) == 0x000788, "Member 'UNinjaLiveComponent_C::CameraFacingTraceMesh' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlapBasedInteraction) == 0x000789, "Member 'UNinjaLiveComponent_C::OverlapBasedInteraction' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UserInputBasedInteraction) == 0x00078A, "Member 'UNinjaLiveComponent_C::UserInputBasedInteraction' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushScaledInverselyByTraceMeshSize) == 0x00078B, "Member 'UNinjaLiveComponent_C::BrushScaledInverselyByTraceMeshSize' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushScaledByInteractingObjSize) == 0x00078C, "Member 'UNinjaLiveComponent_C::BrushScaledByInteractingObjSize' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseObjBoundsInsteadOfSize) == 0x00078D, "Member 'UNinjaLiveComponent_C::UseObjBoundsInsteadOfSize' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, GlobalBrushScale) == 0x000790, "Member 'UNinjaLiveComponent_C::GlobalBrushScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UserInputBrushScale) == 0x000798, "Member 'UNinjaLiveComponent_C::UserInputBrushScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PrimitiveObjBrushScale) == 0x0007A0, "Member 'UNinjaLiveComponent_C::PrimitiveObjBrushScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SkeletalMeshBrushScale) == 0x0007A8, "Member 'UNinjaLiveComponent_C::SkeletalMeshBrushScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CameraFacing_LockY_Axis) == 0x0007B0, "Member 'UNinjaLiveComponent_C::CameraFacing_LockY_Axis' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseLegacyCameraFacing) == 0x0007B1, "Member 'UNinjaLiveComponent_C::UseLegacyCameraFacing' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshTranslucentSortPrio) == 0x0007B4, "Member 'UNinjaLiveComponent_C::TraceMeshTranslucentSortPrio' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshQueryCounter) == 0x0007B8, "Member 'UNinjaLiveComponent_C::TraceMeshQueryCounter' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LimitUnrealNativeEventTick) == 0x0007C0, "Member 'UNinjaLiveComponent_C::LimitUnrealNativeEventTick' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, GlobalVeloTempCondition) == 0x0007C8, "Member 'UNinjaLiveComponent_C::GlobalVeloTempCondition' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TracePositionTemp) == 0x0007D0, "Member 'UNinjaLiveComponent_C::TracePositionTemp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LastTracePositionTemp) == 0x0007E8, "Member 'UNinjaLiveComponent_C::LastTracePositionTemp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimEdgeBouncyness) == 0x000800, "Member 'UNinjaLiveComponent_C::SimEdgeBouncyness' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FadeDensityAtSimEdge) == 0x000808, "Member 'UNinjaLiveComponent_C::FadeDensityAtSimEdge' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, EdgeMaskWidth) == 0x000810, "Member 'UNinjaLiveComponent_C::EdgeMaskWidth' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloDirNoiseSize) == 0x000818, "Member 'UNinjaLiveComponent_C::VeloDirNoiseSize' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloDirNoiseSpeed) == 0x000820, "Member 'UNinjaLiveComponent_C::VeloDirNoiseSpeed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseInputMaterials) == 0x000828, "Member 'UNinjaLiveComponent_C::UseInputMaterials' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityTxtScale) == 0x000830, "Member 'UNinjaLiveComponent_C::DensityTxtScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityTxtOffsetX) == 0x000838, "Member 'UNinjaLiveComponent_C::DensityTxtOffsetX' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityTxtOffsetY) == 0x000840, "Member 'UNinjaLiveComponent_C::DensityTxtOffsetY' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushNoise) == 0x000848, "Member 'UNinjaLiveComponent_C::BrushNoise' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushNoiseInWorldSpace) == 0x000850, "Member 'UNinjaLiveComponent_C::BrushNoiseInWorldSpace' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushDensityNoiseScale) == 0x000858, "Member 'UNinjaLiveComponent_C::BrushDensityNoiseScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushDensityNoiseFreq) == 0x000860, "Member 'UNinjaLiveComponent_C::BrushDensityNoiseFreq' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushVelocityNoiseScale) == 0x000868, "Member 'UNinjaLiveComponent_C::BrushVelocityNoiseScale' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushVelocityNoiseFreq) == 0x000870, "Member 'UNinjaLiveComponent_C::BrushVelocityNoiseFreq' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshInitialRotation) == 0x000878, "Member 'UNinjaLiveComponent_C::TraceMeshInitialRotation' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, EnableRayMarching) == 0x000890, "Member 'UNinjaLiveComponent_C::EnableRayMarching' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LightDirectionProvider) == 0x000898, "Member 'UNinjaLiveComponent_C::LightDirectionProvider' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LightDirectionSourceIsRotation_NOT_Pos) == 0x0008A0, "Member 'UNinjaLiveComponent_C::LightDirectionSourceIsRotation_NOT_Pos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DistanceBasedLightAttenuation) == 0x0008A1, "Member 'UNinjaLiveComponent_C::DistanceBasedLightAttenuation' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AttenuationPower) == 0x0008A8, "Member 'UNinjaLiveComponent_C::AttenuationPower' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PointLightMovementMultiplier) == 0x0008B0, "Member 'UNinjaLiveComponent_C::PointLightMovementMultiplier' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TwoSidedShading) == 0x0008B8, "Member 'UNinjaLiveComponent_C::TwoSidedShading' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TwoSideBlendPow) == 0x0008C0, "Member 'UNinjaLiveComponent_C::TwoSideBlendPow' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Facing) == 0x0008C8, "Member 'UNinjaLiveComponent_C::Facing' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OffsetLightVector) == 0x0008D0, "Member 'UNinjaLiveComponent_C::OffsetLightVector' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ForceManualSunPosition) == 0x0008E8, "Member 'UNinjaLiveComponent_C::ForceManualSunPosition' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SunLatitude) == 0x0008F0, "Member 'UNinjaLiveComponent_C::SunLatitude' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SunLongitude) == 0x0008F8, "Member 'UNinjaLiveComponent_C::SunLongitude' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SunHeight) == 0x000900, "Member 'UNinjaLiveComponent_C::SunHeight' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowLightDirectionVector__Yellow_) == 0x000908, "Member 'UNinjaLiveComponent_C::ShowLightDirectionVector__Yellow_' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowNiagaraSysUpvector__Red_) == 0x000909, "Member 'UNinjaLiveComponent_C::ShowNiagaraSysUpvector__Red_' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ShowFacingPlane) == 0x00090A, "Member 'UNinjaLiveComponent_C::ShowFacingPlane' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PrintFacing) == 0x00090B, "Member 'UNinjaLiveComponent_C::PrintFacing' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloInputTile) == 0x000910, "Member 'UNinjaLiveComponent_C::VeloInputTile' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, VeloInputOffsetSpeed) == 0x000918, "Member 'UNinjaLiveComponent_C::VeloInputOffsetSpeed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityTxtMult) == 0x000920, "Member 'UNinjaLiveComponent_C::DensityTxtMult' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityInputNoiseAmp) == 0x000928, "Member 'UNinjaLiveComponent_C::DensityInputNoiseAmp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityInputNoiseOffset) == 0x000930, "Member 'UNinjaLiveComponent_C::DensityInputNoiseOffset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DensityInputNoiseTile) == 0x000938, "Member 'UNinjaLiveComponent_C::DensityInputNoiseTile' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SetInternalParamsToMaterialParamCollection) == 0x000940, "Member 'UNinjaLiveComponent_C::SetInternalParamsToMaterialParamCollection' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DrawInternalRenderTargetToExternal) == 0x000948, "Member 'UNinjaLiveComponent_C::DrawInternalRenderTargetToExternal' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InternalRenderTargetsToExport) == 0x000950, "Member 'UNinjaLiveComponent_C::InternalRenderTargetsToExport' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ExternalRenderTargets) == 0x000960, "Member 'UNinjaLiveComponent_C::ExternalRenderTargets' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CollisionMask) == 0x000970, "Member 'UNinjaLiveComponent_C::CollisionMask' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CollisionMaskIsNonDefault) == 0x000978, "Member 'UNinjaLiveComponent_C::CollisionMaskIsNonDefault' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputSceneCaptureCamera) == 0x000980, "Member 'UNinjaLiveComponent_C::InputSceneCaptureCamera' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMediaPlayer) == 0x000988, "Member 'UNinjaLiveComponent_C::InputMediaPlayer' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MediaTexture) == 0x000990, "Member 'UNinjaLiveComponent_C::MediaTexture' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMediaSource) == 0x000998, "Member 'UNinjaLiveComponent_C::InputMediaSource' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InputMediaLoopLength) == 0x0009A0, "Member 'UNinjaLiveComponent_C::InputMediaLoopLength' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RandomizeNoiseOffsets) == 0x0009A8, "Member 'UNinjaLiveComponent_C::RandomizeNoiseOffsets' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverlapCounter) == 0x0009AC, "Member 'UNinjaLiveComponent_C::OverlapCounter' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RandomizeDensityTextureOffset) == 0x0009B0, "Member 'UNinjaLiveComponent_C::RandomizeDensityTextureOffset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverwritePresetDensityInput) == 0x0009B8, "Member 'UNinjaLiveComponent_C::OverwritePresetDensityInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OverwritePresetVelocityInput) == 0x0009C0, "Member 'UNinjaLiveComponent_C::OverwritePresetVelocityInput' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushRnd) == 0x0009C8, "Member 'UNinjaLiveComponent_C::BrushRnd' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimSpeedAdjustmentLatency) == 0x0009D0, "Member 'UNinjaLiveComponent_C::SimSpeedAdjustmentLatency' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SpeedTemp) == 0x0009D8, "Member 'UNinjaLiveComponent_C::SpeedTemp' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, StopUsingPainterCanvasWhenIdle) == 0x0009E0, "Member 'UNinjaLiveComponent_C::StopUsingPainterCanvasWhenIdle' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Experimental_PSolver2KernelIndexOffset) == 0x0009E4, "Member 'UNinjaLiveComponent_C::Experimental_PSolver2KernelIndexOffset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Experimental_PressureFeedback) == 0x0009E8, "Member 'UNinjaLiveComponent_C::Experimental_PressureFeedback' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshIsAlsoInteractionVolume) == 0x0009F0, "Member 'UNinjaLiveComponent_C::TraceMeshIsAlsoInteractionVolume' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray0) == 0x0009F8, "Member 'UNinjaLiveComponent_C::TempArray0' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray1) == 0x000A08, "Member 'UNinjaLiveComponent_C::TempArray1' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray2) == 0x000A18, "Member 'UNinjaLiveComponent_C::TempArray2' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray3) == 0x000A28, "Member 'UNinjaLiveComponent_C::TempArray3' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray4) == 0x000A38, "Member 'UNinjaLiveComponent_C::TempArray4' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray5) == 0x000A48, "Member 'UNinjaLiveComponent_C::TempArray5' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray6) == 0x000A58, "Member 'UNinjaLiveComponent_C::TempArray6' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray7) == 0x000A68, "Member 'UNinjaLiveComponent_C::TempArray7' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray8) == 0x000A78, "Member 'UNinjaLiveComponent_C::TempArray8' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray9) == 0x000A88, "Member 'UNinjaLiveComponent_C::TempArray9' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray10) == 0x000A98, "Member 'UNinjaLiveComponent_C::TempArray10' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray11) == 0x000AA8, "Member 'UNinjaLiveComponent_C::TempArray11' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray12) == 0x000AB8, "Member 'UNinjaLiveComponent_C::TempArray12' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray13) == 0x000AC8, "Member 'UNinjaLiveComponent_C::TempArray13' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray14) == 0x000AD8, "Member 'UNinjaLiveComponent_C::TempArray14' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray15) == 0x000AE8, "Member 'UNinjaLiveComponent_C::TempArray15' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray16) == 0x000AF8, "Member 'UNinjaLiveComponent_C::TempArray16' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray17) == 0x000B08, "Member 'UNinjaLiveComponent_C::TempArray17' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray18) == 0x000B18, "Member 'UNinjaLiveComponent_C::TempArray18' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray19) == 0x000B28, "Member 'UNinjaLiveComponent_C::TempArray19' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray20) == 0x000B38, "Member 'UNinjaLiveComponent_C::TempArray20' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseCustomTraceSource) == 0x000B48, "Member 'UNinjaLiveComponent_C::UseCustomTraceSource' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CustomTraceSourcePosition) == 0x000B50, "Member 'UNinjaLiveComponent_C::CustomTraceSourcePosition' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray21) == 0x000B68, "Member 'UNinjaLiveComponent_C::TempArray21' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray22) == 0x000B78, "Member 'UNinjaLiveComponent_C::TempArray22' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray23) == 0x000B88, "Member 'UNinjaLiveComponent_C::TempArray23' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray24) == 0x000B98, "Member 'UNinjaLiveComponent_C::TempArray24' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray25) == 0x000BA8, "Member 'UNinjaLiveComponent_C::TempArray25' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray26) == 0x000BB8, "Member 'UNinjaLiveComponent_C::TempArray26' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray27) == 0x000BC8, "Member 'UNinjaLiveComponent_C::TempArray27' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray28) == 0x000BD8, "Member 'UNinjaLiveComponent_C::TempArray28' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray29) == 0x000BE8, "Member 'UNinjaLiveComponent_C::TempArray29' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray30) == 0x000BF8, "Member 'UNinjaLiveComponent_C::TempArray30' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray31) == 0x000C08, "Member 'UNinjaLiveComponent_C::TempArray31' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray32) == 0x000C18, "Member 'UNinjaLiveComponent_C::TempArray32' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray33) == 0x000C28, "Member 'UNinjaLiveComponent_C::TempArray33' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray34) == 0x000C38, "Member 'UNinjaLiveComponent_C::TempArray34' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray35) == 0x000C48, "Member 'UNinjaLiveComponent_C::TempArray35' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray36) == 0x000C58, "Member 'UNinjaLiveComponent_C::TempArray36' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray37) == 0x000C68, "Member 'UNinjaLiveComponent_C::TempArray37' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray38) == 0x000C78, "Member 'UNinjaLiveComponent_C::TempArray38' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TempArray39) == 0x000C88, "Member 'UNinjaLiveComponent_C::TempArray39' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DampenBrushBelowThisVelocity) == 0x000C98, "Member 'UNinjaLiveComponent_C::DampenBrushBelowThisVelocity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DampenIgnoresStaticMeshes) == 0x000CA0, "Member 'UNinjaLiveComponent_C::DampenIgnoresStaticMeshes' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DampenBrushFactor) == 0x000CA8, "Member 'UNinjaLiveComponent_C::DampenBrushFactor' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, BrushVelocityPow) == 0x000CB0, "Member 'UNinjaLiveComponent_C::BrushVelocityPow' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimAreaMotionEffectsBrushPuncture) == 0x000CB8, "Member 'UNinjaLiveComponent_C::SimAreaMotionEffectsBrushPuncture' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, LodLevel) == 0x000CC0, "Member 'UNinjaLiveComponent_C::LodLevel' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AllowAbsoluteBlackDensity) == 0x000CC4, "Member 'UNinjaLiveComponent_C::AllowAbsoluteBlackDensity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshPos) == 0x000CC8, "Member 'UNinjaLiveComponent_C::TraceMeshPos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshLastPos) == 0x000CE0, "Member 'UNinjaLiveComponent_C::TraceMeshLastPos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, PressureEdgeMasking) == 0x000CF8, "Member 'UNinjaLiveComponent_C::PressureEdgeMasking' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CoreSimMaterials) == 0x000D00, "Member 'UNinjaLiveComponent_C::CoreSimMaterials' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshDeltaPos) == 0x000D10, "Member 'UNinjaLiveComponent_C::TraceMeshDeltaPos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NullVector) == 0x000D28, "Member 'UNinjaLiveComponent_C::NullVector' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InteractionVolumeIsPresent) == 0x000D40, "Member 'UNinjaLiveComponent_C::InteractionVolumeIsPresent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshPosInitialLocal) == 0x000D48, "Member 'UNinjaLiveComponent_C::TraceMeshPosInitialLocal' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshPosInitialFractionalPart) == 0x000D60, "Member 'UNinjaLiveComponent_C::TraceMeshPosInitialFractionalPart' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshPosInitialWorld) == 0x000D78, "Member 'UNinjaLiveComponent_C::TraceMeshPosInitialWorld' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, QuantizerStepSize) == 0x000D90, "Member 'UNinjaLiveComponent_C::QuantizerStepSize' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshParentPos) == 0x000D98, "Member 'UNinjaLiveComponent_C::TraceMeshParentPos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshParentLastPos) == 0x000DB0, "Member 'UNinjaLiveComponent_C::TraceMeshParentLastPos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TraceMeshMovingInWorldSpace) == 0x000DC8, "Member 'UNinjaLiveComponent_C::TraceMeshMovingInWorldSpace' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MovementNotQuantizedToStepsOnAxis) == 0x000DC9, "Member 'UNinjaLiveComponent_C::MovementNotQuantizedToStepsOnAxis' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SecondaryMaterialsPresent) == 0x000DCA, "Member 'UNinjaLiveComponent_C::SecondaryMaterialsPresent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MovementIsLockedOnThisAxis) == 0x000DCB, "Member 'UNinjaLiveComponent_C::MovementIsLockedOnThisAxis' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ForceTraceMeshToCustomVerticalPos) == 0x000DCC, "Member 'UNinjaLiveComponent_C::ForceTraceMeshToCustomVerticalPos' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ForceTraceMeshVerticalPosition) == 0x000DD0, "Member 'UNinjaLiveComponent_C::ForceTraceMeshVerticalPosition' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, EnablePaintBufferOffsetInWorldSpace) == 0x000DD8, "Member 'UNinjaLiveComponent_C::EnablePaintBufferOffsetInWorldSpace' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SimplePainterMode) == 0x000DD9, "Member 'UNinjaLiveComponent_C::SimplePainterMode' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, InteractionVolume) == 0x000DE0, "Member 'UNinjaLiveComponent_C::InteractionVolume' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NiagaraSystemsPresent) == 0x000DE8, "Member 'UNinjaLiveComponent_C::NiagaraSystemsPresent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, NiagaraSystemsToDrive) == 0x000DF0, "Member 'UNinjaLiveComponent_C::NiagaraSystemsToDrive' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Exp_PressureFeedbackComponent) == 0x000E00, "Member 'UNinjaLiveComponent_C::Exp_PressureFeedbackComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Exp_DivergenceFeedbackComponent) == 0x000E08, "Member 'UNinjaLiveComponent_C::Exp_DivergenceFeedbackComponent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Force8bitSimplePainterBuffers) == 0x000E10, "Member 'UNinjaLiveComponent_C::Force8bitSimplePainterBuffers' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Force8bitOutputBuffer) == 0x000E11, "Member 'UNinjaLiveComponent_C::Force8bitOutputBuffer' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SingleTarget) == 0x000E18, "Member 'UNinjaLiveComponent_C::SingleTarget' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UE5EAFLAG) == 0x000E20, "Member 'UNinjaLiveComponent_C::UE5EAFLAG' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Force2xResolutionOutputBuffer) == 0x000E21, "Member 'UNinjaLiveComponent_C::Force2xResolutionOutputBuffer' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ForceMaxSamplingFPS_ToNiagara) == 0x000E22, "Member 'UNinjaLiveComponent_C::ForceMaxSamplingFPS_ToNiagara' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MaterialCollectionPresent) == 0x000E23, "Member 'UNinjaLiveComponent_C::MaterialCollectionPresent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, WorldSpaceOffset) == 0x000E28, "Member 'UNinjaLiveComponent_C::WorldSpaceOffset' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, TertiaryMaterialsPresent) == 0x000E38, "Member 'UNinjaLiveComponent_C::TertiaryMaterialsPresent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, SupressUE51TextureSmearing) == 0x000E39, "Member 'UNinjaLiveComponent_C::SupressUE51TextureSmearing' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, Memory_Pool_Manager) == 0x000E40, "Member 'UNinjaLiveComponent_C::Memory_Pool_Manager' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FluidNinjaEnabled) == 0x000E48, "Member 'UNinjaLiveComponent_C::FluidNinjaEnabled' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ActivationTraceChannel) == 0x000E50, "Member 'UNinjaLiveComponent_C::ActivationTraceChannel' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, FadeDuration) == 0x000E60, "Member 'UNinjaLiveComponent_C::FadeDuration' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, WindDensityInfluence) == 0x000E68, "Member 'UNinjaLiveComponent_C::WindDensityInfluence' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, WindSpeedInfluence) == 0x000E70, "Member 'UNinjaLiveComponent_C::WindSpeedInfluence' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, EnableDeformationBufferCompatibility) == 0x000E78, "Member 'UNinjaLiveComponent_C::EnableDeformationBufferCompatibility' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RT_Painter) == 0x000E80, "Member 'UNinjaLiveComponent_C::RT_Painter' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, EnableWindDeformation) == 0x000E88, "Member 'UNinjaLiveComponent_C::EnableWindDeformation' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, CoreSimMaterials_Persistent) == 0x000E90, "Member 'UNinjaLiveComponent_C::CoreSimMaterials_Persistent' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UseOverlapBasedInteraction) == 0x000EA0, "Member 'UNinjaLiveComponent_C::UseOverlapBasedInteraction' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, UsePaintBufferOffsetInWorldSpace) == 0x000EA1, "Member 'UNinjaLiveComponent_C::UsePaintBufferOffsetInWorldSpace' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RT_VeloDensity) == 0x000EA8, "Member 'UNinjaLiveComponent_C::RT_VeloDensity' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, AllowWindInfluence) == 0x000EB0, "Member 'UNinjaLiveComponent_C::AllowWindInfluence' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, EnableWindDeformationCvar) == 0x000EB1, "Member 'UNinjaLiveComponent_C::EnableWindDeformationCvar' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ParsedSpeed) == 0x000EB8, "Member 'UNinjaLiveComponent_C::ParsedSpeed' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, DeformationBufferCapture) == 0x000EC0, "Member 'UNinjaLiveComponent_C::DeformationBufferCapture' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, OutputRenderTarget) == 0x000EC8, "Member 'UNinjaLiveComponent_C::OutputRenderTarget' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, RT_DownscaledPainter) == 0x000ED0, "Member 'UNinjaLiveComponent_C::RT_DownscaledPainter' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, ImprintCapture) == 0x000ED8, "Member 'UNinjaLiveComponent_C::ImprintCapture' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, WindStrength) == 0x000EE0, "Member 'UNinjaLiveComponent_C::WindStrength' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_CollisionPainterOffset2) == 0x000EE8, "Member 'UNinjaLiveComponent_C::MI_CollisionPainterOffset2' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_CollisionPainterOffset3) == 0x000EF0, "Member 'UNinjaLiveComponent_C::MI_CollisionPainterOffset3' has a wrong offset!");
static_assert(offsetof(UNinjaLiveComponent_C, MI_CollisionPainterOffset4) == 0x000EF8, "Member 'UNinjaLiveComponent_C::MI_CollisionPainterOffset4' has a wrong offset!");

}

