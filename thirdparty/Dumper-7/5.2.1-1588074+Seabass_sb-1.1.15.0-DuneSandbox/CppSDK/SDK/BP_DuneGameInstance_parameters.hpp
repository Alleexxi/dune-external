#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DuneGameInstance

#include "Basic.hpp"

#include "NetCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_DuneGameInstance.BP_DuneGameInstance_C.ExecuteUbergraph_BP_DuneGameInstance
// 0x0008 (0x0008 - 0x0000)
struct BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETravelFailure                                K2Node_Event_FailureType;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENetworkFailure                               K2Node_Event_FailureType_1;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsServer;                            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance) == 0x000004, "Wrong alignment on BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance");
static_assert(sizeof(BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance) == 0x000008, "Wrong size on BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance");
static_assert(offsetof(BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance, EntryPoint) == 0x000000, "Member 'BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance, K2Node_Event_FailureType) == 0x000004, "Member 'BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance::K2Node_Event_FailureType' has a wrong offset!");
static_assert(offsetof(BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance, K2Node_Event_FailureType_1) == 0x000005, "Member 'BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance::K2Node_Event_FailureType_1' has a wrong offset!");
static_assert(offsetof(BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance, K2Node_Event_bIsServer) == 0x000006, "Member 'BP_DuneGameInstance_C_ExecuteUbergraph_BP_DuneGameInstance::K2Node_Event_bIsServer' has a wrong offset!");

// Function BP_DuneGameInstance.BP_DuneGameInstance_C.HandleNetworkError
// 0x0002 (0x0002 - 0x0000)
struct BP_DuneGameInstance_C_HandleNetworkError final
{
public:
	ENetworkFailure                               FailureType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsServer;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DuneGameInstance_C_HandleNetworkError) == 0x000001, "Wrong alignment on BP_DuneGameInstance_C_HandleNetworkError");
static_assert(sizeof(BP_DuneGameInstance_C_HandleNetworkError) == 0x000002, "Wrong size on BP_DuneGameInstance_C_HandleNetworkError");
static_assert(offsetof(BP_DuneGameInstance_C_HandleNetworkError, FailureType) == 0x000000, "Member 'BP_DuneGameInstance_C_HandleNetworkError::FailureType' has a wrong offset!");
static_assert(offsetof(BP_DuneGameInstance_C_HandleNetworkError, bIsServer) == 0x000001, "Member 'BP_DuneGameInstance_C_HandleNetworkError::bIsServer' has a wrong offset!");

// Function BP_DuneGameInstance.BP_DuneGameInstance_C.HandleTravelError
// 0x0001 (0x0001 - 0x0000)
struct BP_DuneGameInstance_C_HandleTravelError final
{
public:
	ETravelFailure                                FailureType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DuneGameInstance_C_HandleTravelError) == 0x000001, "Wrong alignment on BP_DuneGameInstance_C_HandleTravelError");
static_assert(sizeof(BP_DuneGameInstance_C_HandleTravelError) == 0x000001, "Wrong size on BP_DuneGameInstance_C_HandleTravelError");
static_assert(offsetof(BP_DuneGameInstance_C_HandleTravelError, FailureType) == 0x000000, "Member 'BP_DuneGameInstance_C_HandleTravelError::FailureType' has a wrong offset!");

}

