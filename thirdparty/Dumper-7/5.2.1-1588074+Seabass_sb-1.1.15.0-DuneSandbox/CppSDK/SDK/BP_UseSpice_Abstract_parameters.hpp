#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UseSpice_Abstract

#include "Basic.hpp"

#include "DuneSandbox_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function BP_UseSpice_Abstract.BP_UseSpice_Abstract_C.BP_CanUse
// 0x0018 (0x0018 - 0x0000)
struct BP_UseSpice_Abstract_C_BP_CanUse final
{
public:
	const class AController*                      Instigator;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class AActor*                           Target;                                            // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECanUse                                       ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UseSpice_Abstract_C_BP_CanUse) == 0x000008, "Wrong alignment on BP_UseSpice_Abstract_C_BP_CanUse");
static_assert(sizeof(BP_UseSpice_Abstract_C_BP_CanUse) == 0x000018, "Wrong size on BP_UseSpice_Abstract_C_BP_CanUse");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_CanUse, Instigator) == 0x000000, "Member 'BP_UseSpice_Abstract_C_BP_CanUse::Instigator' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_CanUse, Target) == 0x000008, "Member 'BP_UseSpice_Abstract_C_BP_CanUse::Target' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_CanUse, ReturnValue) == 0x000010, "Member 'BP_UseSpice_Abstract_C_BP_CanUse::ReturnValue' has a wrong offset!");

// Function BP_UseSpice_Abstract.BP_UseSpice_Abstract_C.BP_Use
// 0x00B8 (0x00B8 - 0x0000)
struct BP_UseSpice_Abstract_C_BP_Use final
{
public:
	class AController*                            Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetSpicePerStack_SpicePerStack;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectToApply                 K2Node_MakeStruct_GameplayEffectToApply;           // 0x0030(0x0010)(NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ADunePlayerCharacter*                   K2Node_DynamicCast_AsDune_Player_Character;        // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           CallFunc_MakeEffectContext_ReturnValue;            // 0x0068(0x0018)()
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0080(0x0010)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	ESpiceAddictionSystemStatus                   CallFunc_GetSpiceAddictionSystemStatus_ReturnValue; // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpiceAddicted_ReturnValue;              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_1;  // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_UpdateSpiceConsumableSpicePerTick_NextSpicePerStack_ImplicitCast; // 0x00AC(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BP_ApplyGameplayEffectToSelf_Level_ImplicitCast; // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UseSpice_Abstract_C_BP_Use) == 0x000008, "Wrong alignment on BP_UseSpice_Abstract_C_BP_Use");
static_assert(sizeof(BP_UseSpice_Abstract_C_BP_Use) == 0x0000B8, "Wrong size on BP_UseSpice_Abstract_C_BP_Use");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, Instigator) == 0x000000, "Member 'BP_UseSpice_Abstract_C_BP_Use::Instigator' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, Target) == 0x000008, "Member 'BP_UseSpice_Abstract_C_BP_Use::Target' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, ReturnValue) == 0x000010, "Member 'BP_UseSpice_Abstract_C_BP_Use::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_GetSpicePerStack_SpicePerStack) == 0x000018, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_GetSpicePerStack_SpicePerStack' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_Round_ReturnValue) == 0x000020, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_Conv_IntToByte_ReturnValue) == 0x000028, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, K2Node_MakeStruct_GameplayEffectToApply) == 0x000030, "Member 'BP_UseSpice_Abstract_C_BP_Use::K2Node_MakeStruct_GameplayEffectToApply' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BP_UseSpice_Abstract_C_BP_Use::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000050, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, K2Node_DynamicCast_AsDune_Player_Character) == 0x000058, "Member 'BP_UseSpice_Abstract_C_BP_Use::K2Node_DynamicCast_AsDune_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_UseSpice_Abstract_C_BP_Use::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_MakeEffectContext_ReturnValue) == 0x000068, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_MakeEffectContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000080, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_GetSpiceAddictionSystemStatus_ReturnValue) == 0x000090, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_GetSpiceAddictionSystemStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'BP_UseSpice_Abstract_C_BP_Use::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_IsSpiceAddicted_ReturnValue) == 0x000098, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_IsSpiceAddicted_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_Less_IntInt_ReturnValue) == 0x000099, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_GetAbilitySystemComponent_ReturnValue_1) == 0x0000A0, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_GetAbilitySystemComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_IsValid_ReturnValue_1) == 0x0000A8, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_UpdateSpiceConsumableSpicePerTick_NextSpicePerStack_ImplicitCast) == 0x0000AC, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_UpdateSpiceConsumableSpicePerTick_NextSpicePerStack_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_UseSpice_Abstract_C_BP_Use, CallFunc_BP_ApplyGameplayEffectToSelf_Level_ImplicitCast) == 0x0000B0, "Member 'BP_UseSpice_Abstract_C_BP_Use::CallFunc_BP_ApplyGameplayEffectToSelf_Level_ImplicitCast' has a wrong offset!");

// Function BP_UseSpice_Abstract.BP_UseSpice_Abstract_C.GetSpicePerStack
// 0x0008 (0x0008 - 0x0000)
struct BP_UseSpice_Abstract_C_GetSpicePerStack final
{
public:
	double                                        SpicePerStack;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UseSpice_Abstract_C_GetSpicePerStack) == 0x000008, "Wrong alignment on BP_UseSpice_Abstract_C_GetSpicePerStack");
static_assert(sizeof(BP_UseSpice_Abstract_C_GetSpicePerStack) == 0x000008, "Wrong size on BP_UseSpice_Abstract_C_GetSpicePerStack");
static_assert(offsetof(BP_UseSpice_Abstract_C_GetSpicePerStack, SpicePerStack) == 0x000000, "Member 'BP_UseSpice_Abstract_C_GetSpicePerStack::SpicePerStack' has a wrong offset!");

}

