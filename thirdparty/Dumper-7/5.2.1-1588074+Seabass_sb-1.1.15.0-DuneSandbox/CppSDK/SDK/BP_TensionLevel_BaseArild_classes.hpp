#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TensionLevel_BaseArild

#include "Basic.hpp"

#include "BP_TensionLevel_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TensionLevel_BaseArild.BP_TensionLevel_BaseArild_C
// 0x0090 (0x0100 - 0x0070)
class UBP_TensionLevel_BaseArild_C : public UBP_TensionLevel_Base_C
{
public:
	double                                        Flyby_Time_Interval;                               // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Flyby_Amount_Activation;                           // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Melee_Hit_Count_Time_Window;                       // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Melee_Hit_Count_Amount;                            // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Damage_Amount_Time_Interval;                       // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Damage_Amount_Activation;                          // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         Match_Damage_Types;                                // 0x00A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Not_Match_Damage_Types;                            // 0x00B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Melee_Damage_Types;                                // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Projectile_Hit_Count_Time_Window;                  // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Projectile_Hit_Count_Amount;                       // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         Projectile_Damage_Types;                           // 0x00E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Enabled_on_PVE_Zone;                               // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled_on_PVP_Zone;                               // 0x00F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled_for_NPCs;                                  // 0x00F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled_for_Friendly_Players;                      // 0x00F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled_for_Enemy_Players;                         // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NPC_Aggro_Count;                                   // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool BlueprintShouldDeactivate(const struct FAudioThreatInfo& CurrentThreatInfo, const float TimeSinceActivated);
	bool BlueprintShouldActivate(class UAudioThreatLevel* PreviousThreatLevel, const struct FAudioThreatInfo& CurrentThreatInfo);
	void Activation_Logic(struct FAudioThreatInfo& Current_Threat_Info, bool* Should_Activate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TensionLevel_BaseArild_C">();
	}
	static class UBP_TensionLevel_BaseArild_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TensionLevel_BaseArild_C>();
	}
};
static_assert(alignof(UBP_TensionLevel_BaseArild_C) == 0x000008, "Wrong alignment on UBP_TensionLevel_BaseArild_C");
static_assert(sizeof(UBP_TensionLevel_BaseArild_C) == 0x000100, "Wrong size on UBP_TensionLevel_BaseArild_C");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Flyby_Time_Interval) == 0x000070, "Member 'UBP_TensionLevel_BaseArild_C::Flyby_Time_Interval' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Flyby_Amount_Activation) == 0x000078, "Member 'UBP_TensionLevel_BaseArild_C::Flyby_Amount_Activation' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Melee_Hit_Count_Time_Window) == 0x000080, "Member 'UBP_TensionLevel_BaseArild_C::Melee_Hit_Count_Time_Window' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Melee_Hit_Count_Amount) == 0x000088, "Member 'UBP_TensionLevel_BaseArild_C::Melee_Hit_Count_Amount' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Damage_Amount_Time_Interval) == 0x000090, "Member 'UBP_TensionLevel_BaseArild_C::Damage_Amount_Time_Interval' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Damage_Amount_Activation) == 0x000098, "Member 'UBP_TensionLevel_BaseArild_C::Damage_Amount_Activation' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Match_Damage_Types) == 0x0000A0, "Member 'UBP_TensionLevel_BaseArild_C::Match_Damage_Types' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Not_Match_Damage_Types) == 0x0000B0, "Member 'UBP_TensionLevel_BaseArild_C::Not_Match_Damage_Types' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Melee_Damage_Types) == 0x0000C0, "Member 'UBP_TensionLevel_BaseArild_C::Melee_Damage_Types' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Projectile_Hit_Count_Time_Window) == 0x0000D0, "Member 'UBP_TensionLevel_BaseArild_C::Projectile_Hit_Count_Time_Window' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Projectile_Hit_Count_Amount) == 0x0000D8, "Member 'UBP_TensionLevel_BaseArild_C::Projectile_Hit_Count_Amount' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Projectile_Damage_Types) == 0x0000E0, "Member 'UBP_TensionLevel_BaseArild_C::Projectile_Damage_Types' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Enabled_on_PVE_Zone) == 0x0000F0, "Member 'UBP_TensionLevel_BaseArild_C::Enabled_on_PVE_Zone' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Enabled_on_PVP_Zone) == 0x0000F1, "Member 'UBP_TensionLevel_BaseArild_C::Enabled_on_PVP_Zone' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Enabled_for_NPCs) == 0x0000F2, "Member 'UBP_TensionLevel_BaseArild_C::Enabled_for_NPCs' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Enabled_for_Friendly_Players) == 0x0000F3, "Member 'UBP_TensionLevel_BaseArild_C::Enabled_for_Friendly_Players' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, Enabled_for_Enemy_Players) == 0x0000F4, "Member 'UBP_TensionLevel_BaseArild_C::Enabled_for_Enemy_Players' has a wrong offset!");
static_assert(offsetof(UBP_TensionLevel_BaseArild_C, NPC_Aggro_Count) == 0x0000F8, "Member 'UBP_TensionLevel_BaseArild_C::NPC_Aggro_Count' has a wrong offset!");

}

