#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_NerveStrike

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GA_EquipableAbility_Base_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "PersistenceCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_NerveStrike.GA_NerveStrike_C
// 0x00C0 (0x0640 - 0x0580)
class UGA_NerveStrike_C final : public UGA_EquipableAbility_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0580(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ADuneCharacter*                         OwnerCharacter;                                    // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        HoldFinalStrikePoseSeconds;                        // 0x0590(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartTargetingDistance;                            // 0x0598(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetingConeHalfAngle;                            // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TargetObjectTypeFilter;                            // 0x05A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TargetStunEffect;                                  // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TargetStunEffectTrigger;                           // 0x05B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            TargetStunEffectHandle;                            // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         StrikeDamage;                                      // 0x05D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneDamageType>            StrikeDamageType;                                  // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         ShoveDamage;                                       // 0x05E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneDamageType>            ShoveDamageType;                                   // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EKnockbackType                                ShoveHitReact;                                     // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasValidTarget;                                    // 0x05F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsThrowStarted;                                   // 0x05FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FB[0x5];                                      // 0x05FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   MissSectionName;                                   // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EndTargetingDistance;                              // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FUniqueID                              PersistenceId;                                     // 0x0618(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CachedCooldownFull;                                // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetingDirection;                                // 0x0628(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TrySoftLockTarget();
	void TryRotateTowardsTarget(class AActor* Actor, class AActor* TargetActor_0, struct FRotator* OutRotation);
	void ThrowAndDebuff();
	void Removed_7FCDDED949F89D3D80A219B937521C85();
	void PerformStrikeSequence();
	void OnSync_7E6D786C46398E982D198D9AB9B1B172();
	void OnSync_183A95C34E92FC0D5E0195890DD3D318();
	void OnInterrupted_FCC5BA4B42F0B4CE40749A87CCBB9A88();
	void OnFinish_D33C482E497402F1576829987155728B();
	void OnFinish_3913C93844B9A448F78FDC97F4AF1021();
	void OnCompleted_FCC5BA4B42F0B4CE40749A87CCBB9A88();
	void OnCancelled_FCC5BA4B42F0B4CE40749A87CCBB9A88();
	void OnBlendOut_FCC5BA4B42F0B4CE40749A87CCBB9A88();
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbility();
	void InitMemberVariables(bool* bSuccess);
	void InitializeStaticProperties(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec);
	struct FVector GetTargetingDirection();
	void Get_Actor_Rotation_Towards(class AActor* Actor, const struct FVector& Target, struct FRotator* Rotation);
	void ExecuteUbergraph_GA_NerveStrike(int32 EntryPoint);
	void EventReceived_CCC58D0D4A59190F62D3A28231D64E5F(const struct FGameplayEventData& Payload);
	void EventReceived_43640DA34E5FB90C0C57B6A072DF7E51(const struct FGameplayEventData& Payload);
	void EventReceived_0BE1A0B845A7623E031786AA601AB872(const struct FGameplayEventData& Payload);
	void CacheTuningValues();
	void Added_9701B952478ECA293231B89DF07834C6();

	void ValidateTarget(class ADuneCharacter* Target, bool* Valid) const;
	void Get_Best_Target(const struct FVector& TargetingOrigin, const struct FVector& TargetingDirection_0, TArray<class AActor*>& Candidates, class AActor** Best) const;
	void FindTarget(class ADuneCharacter* OwnerCharacter_0, bool bStart, class AActor** TargetCharacter) const;
	void FilterTargets(TArray<class AActor*>& Targets, TArray<class AActor*>* Filtered) const;
	void DebugDrawTargetting(const struct FVector& Center, float HalfHeight, const struct FVector& Direction) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_NerveStrike_C">();
	}
	static class UGA_NerveStrike_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_NerveStrike_C>();
	}
};
static_assert(alignof(UGA_NerveStrike_C) == 0x000008, "Wrong alignment on UGA_NerveStrike_C");
static_assert(sizeof(UGA_NerveStrike_C) == 0x000640, "Wrong size on UGA_NerveStrike_C");
static_assert(offsetof(UGA_NerveStrike_C, UberGraphFrame) == 0x000580, "Member 'UGA_NerveStrike_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, OwnerCharacter) == 0x000588, "Member 'UGA_NerveStrike_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, HoldFinalStrikePoseSeconds) == 0x000590, "Member 'UGA_NerveStrike_C::HoldFinalStrikePoseSeconds' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, StartTargetingDistance) == 0x000598, "Member 'UGA_NerveStrike_C::StartTargetingDistance' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, TargetingConeHalfAngle) == 0x0005A0, "Member 'UGA_NerveStrike_C::TargetingConeHalfAngle' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, TargetObjectTypeFilter) == 0x0005A8, "Member 'UGA_NerveStrike_C::TargetObjectTypeFilter' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, TargetStunEffect) == 0x0005B0, "Member 'UGA_NerveStrike_C::TargetStunEffect' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, TargetStunEffectTrigger) == 0x0005B8, "Member 'UGA_NerveStrike_C::TargetStunEffectTrigger' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, TargetActor) == 0x0005C0, "Member 'UGA_NerveStrike_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, TargetStunEffectHandle) == 0x0005C8, "Member 'UGA_NerveStrike_C::TargetStunEffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, StrikeDamage) == 0x0005D8, "Member 'UGA_NerveStrike_C::StrikeDamage' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, StrikeDamageType) == 0x0005E0, "Member 'UGA_NerveStrike_C::StrikeDamageType' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, ShoveDamage) == 0x0005E8, "Member 'UGA_NerveStrike_C::ShoveDamage' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, ShoveDamageType) == 0x0005F0, "Member 'UGA_NerveStrike_C::ShoveDamageType' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, ShoveHitReact) == 0x0005F8, "Member 'UGA_NerveStrike_C::ShoveHitReact' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, HasValidTarget) == 0x0005F9, "Member 'UGA_NerveStrike_C::HasValidTarget' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, bIsThrowStarted) == 0x0005FA, "Member 'UGA_NerveStrike_C::bIsThrowStarted' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, Montage) == 0x000600, "Member 'UGA_NerveStrike_C::Montage' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, MissSectionName) == 0x000608, "Member 'UGA_NerveStrike_C::MissSectionName' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, EndTargetingDistance) == 0x000610, "Member 'UGA_NerveStrike_C::EndTargetingDistance' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, PersistenceId) == 0x000618, "Member 'UGA_NerveStrike_C::PersistenceId' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, CachedCooldownFull) == 0x000620, "Member 'UGA_NerveStrike_C::CachedCooldownFull' has a wrong offset!");
static_assert(offsetof(UGA_NerveStrike_C, TargetingDirection) == 0x000628, "Member 'UGA_NerveStrike_C::TargetingDirection' has a wrong offset!");

}

