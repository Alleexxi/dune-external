#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_BleedStrike

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "DreamworldPreInit_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_BleedStrike.GA_BleedStrike_C
// 0x02A0 (0x07D0 - 0x0530)
class UGA_BleedStrike_C : public UDuneGameplayAction
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAnimMontage*                           Montage_Cast_Left;                                 // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_Cast_Right;                                // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_Cast_NPC_Left;                             // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_Cast_NPC_Right;                            // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCachedMeleeWeaponData                 CachedMeleeWeaponData;                             // 0x0560(0x01B0)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	bool                                          LastAttackCameFromRightNPC;                        // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711[0x3];                                      // 0x0711(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Camera_Targeting;                                  // 0x0714(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Camera_Movement;                                   // 0x071C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_724[0x4];                                      // 0x0724(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayTagAdded*      Task_WaitSuspending;                               // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayEvent*         Task_WaitForInterruptionFromDash;                  // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         CameraModifiers_Hit;                               // 0x0738(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsNPC;                                             // 0x0748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_749[0x7];                                      // 0x0749(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeVulnerableAfterWindupCompletesToUse;           // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindupDurationDefault;                             // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         OwnerCharacter;                                    // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        WindupDuration_NPC;                                // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindupDurationToUse;                               // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeVulnerableAfterWindupCompletesDefault;         // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeVulnerableAfterWindupCompletesNPC;             // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AttackDamageMultiplier;                            // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AttackPoiseDamageMultiplier;                       // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotationLockTime_NPC;                              // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitSweepDuration;                                  // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TagToAddAfterAnimStarts;                           // 0x07A8(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TagToRemoveAfterWindup;                            // 0x07B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   AbilityStringName;                                 // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitTargetData*            TargetingTask;                                     // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_PlayMontageAndWaitWithRootMotion* AsyncTaskMontageWithRootMotionControl;      // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void SelectMontageToPlay(double ShouldPlayHeavyMeleeFromRight);
	void Select_Montage_to_Play_NPC();
	void RotateToHitActor(class AActor* HitActor);
	void PrintDebugStringToChannelWithAbilityName(const class FString& DebugString, class UClass* Channel, EDebugLevel DebugLevel);
	void OnInterrupted_F4847CD34B7BA6E8C78E308618990083();
	void OnFinish_C1C0B47743556CA0446418B142AA085C();
	void OnFinish_8D09EE894168A83BAF490A99C678C0C8();
	void OnFinish_0243103641DB2C2A8E8A3D8AFE95EF0E();
	void OnConnectHitEvent(const struct FGameplayEventData& Payload);
	void OnCompleted_F4847CD34B7BA6E8C78E308618990083();
	void OnCancelled_F4847CD34B7BA6E8C78E308618990083();
	void OnBlendOut_F4847CD34B7BA6E8C78E308618990083();
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_ActivateAbility();
	void InitializeStaticProperties(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec);
	void InitializeDefaults_NPC();
	void InitializeDefaults();
	void HandleMovement();
	void ExecuteUbergraph_GA_BleedStrike(int32 EntryPoint);
	void EventReceived_E61524BF40939B206B89ACB376B7821E(const struct FGameplayEventData& Payload);
	void CacheMeleeWeaponData();
	void Added_0D8D32CE46F57510FE4DB29F6AF58138();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_BleedStrike_C">();
	}
	static class UGA_BleedStrike_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_BleedStrike_C>();
	}
};
static_assert(alignof(UGA_BleedStrike_C) == 0x000008, "Wrong alignment on UGA_BleedStrike_C");
static_assert(sizeof(UGA_BleedStrike_C) == 0x0007D0, "Wrong size on UGA_BleedStrike_C");
static_assert(offsetof(UGA_BleedStrike_C, UberGraphFrame) == 0x000530, "Member 'UGA_BleedStrike_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, Montage_Cast_Left) == 0x000538, "Member 'UGA_BleedStrike_C::Montage_Cast_Left' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, Montage_Cast_Right) == 0x000540, "Member 'UGA_BleedStrike_C::Montage_Cast_Right' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, Montage_Cast_NPC_Left) == 0x000548, "Member 'UGA_BleedStrike_C::Montage_Cast_NPC_Left' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, Montage_Cast_NPC_Right) == 0x000550, "Member 'UGA_BleedStrike_C::Montage_Cast_NPC_Right' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, MontageToPlay) == 0x000558, "Member 'UGA_BleedStrike_C::MontageToPlay' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, CachedMeleeWeaponData) == 0x000560, "Member 'UGA_BleedStrike_C::CachedMeleeWeaponData' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, LastAttackCameFromRightNPC) == 0x000710, "Member 'UGA_BleedStrike_C::LastAttackCameFromRightNPC' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, Camera_Targeting) == 0x000714, "Member 'UGA_BleedStrike_C::Camera_Targeting' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, Camera_Movement) == 0x00071C, "Member 'UGA_BleedStrike_C::Camera_Movement' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, Task_WaitSuspending) == 0x000728, "Member 'UGA_BleedStrike_C::Task_WaitSuspending' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, Task_WaitForInterruptionFromDash) == 0x000730, "Member 'UGA_BleedStrike_C::Task_WaitForInterruptionFromDash' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, CameraModifiers_Hit) == 0x000738, "Member 'UGA_BleedStrike_C::CameraModifiers_Hit' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, IsNPC) == 0x000748, "Member 'UGA_BleedStrike_C::IsNPC' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, TimeVulnerableAfterWindupCompletesToUse) == 0x000750, "Member 'UGA_BleedStrike_C::TimeVulnerableAfterWindupCompletesToUse' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, WindupDurationDefault) == 0x000758, "Member 'UGA_BleedStrike_C::WindupDurationDefault' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, OwnerCharacter) == 0x000760, "Member 'UGA_BleedStrike_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, WindupDuration_NPC) == 0x000768, "Member 'UGA_BleedStrike_C::WindupDuration_NPC' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, WindupDurationToUse) == 0x000770, "Member 'UGA_BleedStrike_C::WindupDurationToUse' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, TimeVulnerableAfterWindupCompletesDefault) == 0x000778, "Member 'UGA_BleedStrike_C::TimeVulnerableAfterWindupCompletesDefault' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, TimeVulnerableAfterWindupCompletesNPC) == 0x000780, "Member 'UGA_BleedStrike_C::TimeVulnerableAfterWindupCompletesNPC' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, AttackDamageMultiplier) == 0x000788, "Member 'UGA_BleedStrike_C::AttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, AttackPoiseDamageMultiplier) == 0x000790, "Member 'UGA_BleedStrike_C::AttackPoiseDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, RotationLockTime_NPC) == 0x000798, "Member 'UGA_BleedStrike_C::RotationLockTime_NPC' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, HitSweepDuration) == 0x0007A0, "Member 'UGA_BleedStrike_C::HitSweepDuration' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, TagToAddAfterAnimStarts) == 0x0007A8, "Member 'UGA_BleedStrike_C::TagToAddAfterAnimStarts' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, TagToRemoveAfterWindup) == 0x0007B0, "Member 'UGA_BleedStrike_C::TagToRemoveAfterWindup' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, AbilityStringName) == 0x0007B8, "Member 'UGA_BleedStrike_C::AbilityStringName' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, TargetingTask) == 0x0007C0, "Member 'UGA_BleedStrike_C::TargetingTask' has a wrong offset!");
static_assert(offsetof(UGA_BleedStrike_C, AsyncTaskMontageWithRootMotionControl) == 0x0007C8, "Member 'UGA_BleedStrike_C::AsyncTaskMontageWithRootMotionControl' has a wrong offset!");

}

