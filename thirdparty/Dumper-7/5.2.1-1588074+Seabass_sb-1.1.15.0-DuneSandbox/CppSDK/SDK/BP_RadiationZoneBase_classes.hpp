#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RadiationZoneBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RadiationZoneBase.BP_RadiationZoneBase_C
// 0x0068 (0x0470 - 0x0408)
class ABP_RadiationZoneBase_C : public ARadiationZone
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0408(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NiagaraActor;                                      // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   VolumetricFog_Box;                                 // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   VolumetricFog_Sphere;                              // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  RadiationPostProcess_Sphere;                       // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  RadiationPostProcess_Box;                          // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PostProcessShape_Box;                              // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PostProcessShape_Sphere;                           // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VFX;                                               // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VFXBounds_Offset;                                  // 0x0450(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLowRadiation;                                    // 0x0468(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SetFogVisibility(bool bNewVisibility);
	void SetComponentVisibility();
	void SetComponentSizes();
	void ExecuteUbergraph_BP_RadiationZoneBase(int32 EntryPoint);
	void ConfigureNiagaraActors();
	void BP_OnExited(class APawn* Pawn);
	void BP_OnEntered(class APawn* Pawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RadiationZoneBase_C">();
	}
	static class ABP_RadiationZoneBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RadiationZoneBase_C>();
	}
};
static_assert(alignof(ABP_RadiationZoneBase_C) == 0x000008, "Wrong alignment on ABP_RadiationZoneBase_C");
static_assert(sizeof(ABP_RadiationZoneBase_C) == 0x000470, "Wrong size on ABP_RadiationZoneBase_C");
static_assert(offsetof(ABP_RadiationZoneBase_C, UberGraphFrame) == 0x000408, "Member 'ABP_RadiationZoneBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RadiationZoneBase_C, NiagaraActor) == 0x000410, "Member 'ABP_RadiationZoneBase_C::NiagaraActor' has a wrong offset!");
static_assert(offsetof(ABP_RadiationZoneBase_C, VolumetricFog_Box) == 0x000418, "Member 'ABP_RadiationZoneBase_C::VolumetricFog_Box' has a wrong offset!");
static_assert(offsetof(ABP_RadiationZoneBase_C, VolumetricFog_Sphere) == 0x000420, "Member 'ABP_RadiationZoneBase_C::VolumetricFog_Sphere' has a wrong offset!");
static_assert(offsetof(ABP_RadiationZoneBase_C, RadiationPostProcess_Sphere) == 0x000428, "Member 'ABP_RadiationZoneBase_C::RadiationPostProcess_Sphere' has a wrong offset!");
static_assert(offsetof(ABP_RadiationZoneBase_C, RadiationPostProcess_Box) == 0x000430, "Member 'ABP_RadiationZoneBase_C::RadiationPostProcess_Box' has a wrong offset!");
static_assert(offsetof(ABP_RadiationZoneBase_C, PostProcessShape_Box) == 0x000438, "Member 'ABP_RadiationZoneBase_C::PostProcessShape_Box' has a wrong offset!");
static_assert(offsetof(ABP_RadiationZoneBase_C, PostProcessShape_Sphere) == 0x000440, "Member 'ABP_RadiationZoneBase_C::PostProcessShape_Sphere' has a wrong offset!");
static_assert(offsetof(ABP_RadiationZoneBase_C, VFX) == 0x000448, "Member 'ABP_RadiationZoneBase_C::VFX' has a wrong offset!");
static_assert(offsetof(ABP_RadiationZoneBase_C, VFXBounds_Offset) == 0x000450, "Member 'ABP_RadiationZoneBase_C::VFXBounds_Offset' has a wrong offset!");
static_assert(offsetof(ABP_RadiationZoneBase_C, IsLowRadiation) == 0x000468, "Member 'ABP_RadiationZoneBase_C::IsLowRadiation' has a wrong offset!");

}

