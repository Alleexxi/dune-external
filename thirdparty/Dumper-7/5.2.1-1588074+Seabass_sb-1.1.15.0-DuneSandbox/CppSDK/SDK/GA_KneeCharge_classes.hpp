#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_KneeCharge

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GA_EquipableAbility_Base_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_KneeCharge.GA_KneeCharge_C
// 0x0250 (0x07D0 - 0x0580)
class UGA_KneeCharge_C : public UGA_EquipableAbility_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0580(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        CachedTraceRadius;                                 // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_Cast;                                      // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_Inrun;                                     // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_Jump;                                      // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_Attack;                                    // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToStopFlyingMontage;                           // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Camera_Targeting;                                  // 0x05B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Camera_Movement;                                   // 0x05BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C4[0x4];                                      // 0x05C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayTagAdded*      Task_WaitForAirborneToJump;                        // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitMovementModeChange*    Task_WaitForLanding;                               // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToStartLandingCheck;                           // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaunchDirectionFromAiming;                         // 0x05E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedTraceHeight;                                 // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedStrength;                                    // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CachedStrengthDuration;                            // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedPitchMin;                                    // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedPitchMax;                                    // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchDirectionAdjusted;                           // 0x0620(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitDelay*                 Task_StopFlyingMontage;                            // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_ApplyRootMotionConstantForce* Task_InrunMotion;                               // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayEvent*         Task_WaitForDash;                                  // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CachedTimeout;                                     // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InrunFinished;                                     // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AttackStarted;                                     // 0x0659(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65A[0x6];                                      // 0x065A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SlideVectorFactorOverride;                         // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            StrengthCurve;                                     // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            UpwardsBoostCurve;                                 // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           PathOffsetCurve;                                   // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasValidTarget;                                    // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ImmunityActivated;                                 // 0x0681(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargeting;                                       // 0x0682(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_683[0x5];                                      // 0x0683(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          Audio_TargetingCanceled;                           // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CachedCooldownFull;                                // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedCooldownReduced;                             // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagAdded*      Task_WaitForAirborneToCancel;                      // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            DamageEffectClass;                                 // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class AGameplayAbilityWorldReticle> Reticle_Class;                                   // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         CachedTargetingMaxRange;                           // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BC[0x4];                                      // 0x06BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             TargetCharacter;                                   // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetActorLocation;                               // 0x06C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedMoveToTargetSpeed;                           // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ActivatorName;                                     // 0x06E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UDuneDamageType>>    DamageTypes;                                       // 0x06F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<EWeaponModFrame>                       Weapon_Mod_Frames;                                 // 0x0700(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        CachedSlideVectorFactor;                           // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSlideVectorFactorOverrideActive;                 // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_VerifyClientMove*          Task_VerifyMovement;                               // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CachedImmunityDuration;                            // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_Out;                                       // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSlowedDown;                                      // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInJumpState;                                     // 0x0739(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMovementInputBlocked;                            // 0x073A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73B[0x5];                                      // 0x073B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              TelemetryActivationTime;                           // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ETelemetryAbilityPhase                        TelemetryPhase;                                    // 0x0748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETelemetryAbilityOutcome                      TelemetryOutcome;                                  // 0x0749(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74A[0x6];                                      // 0x074A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitTargetData*            Task_WaitTargetDataAttack;                         // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CachedRadiusMultiplierInrun;                       // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InrunStrength;                                     // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InrunStrengthDuration;                             // 0x0764(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InrunStartLocation;                                // 0x0768(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaximumInrunRange;                                 // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaximumJumpRange;                                  // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ServerValidationTolerance;                         // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_794[0x4];                                      // 0x0794(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneDamageType>            KneeChargeDamageType;                              // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 DamageImmunityEffectClass;                         // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         OwnerCharacter;                                    // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasCleanedUp;                                     // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_ApplyRootMotionConstantForce* Task_RootMotionConstantForce;                   // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_ApplyRootMotionMoveToForce* Task_RootMotionMoveToForce;                       // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MaxVelocityAfterJump;                              // 0x07C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Added_752E55A44947CA14ADD209A4D6031B29();
	void Added_9701B952478ECA293231B89DB6323088();
	void Added_F2E424BA4D8F42B98E3A86B97E02CB3F();
	void ApplyGameplayEffectToHitTarget(const struct FHitResult& HitResult);
	void AttemptCleanUp();
	void BindTelemetryEvents();
	void CacheForwardVectorFromTargetData(const struct FHitResult& TargetDataHitResult);
	void CacheTuningValues();
	void CalculateHitDetectionParameters(double* CapsuleRadius, double* CapsuleHalfHeight);
	struct FVector CalculateMaxRangeConditions();
	void CalculateMotionRange(const struct FVector& LaunchVelocity, double* Range);
	double CalculateMoveToTargetDuration();
	void Cancelled_377DDE3A47C5E13898CCE3AAC76AB18A(const struct FGameplayAbilityTargetDataHandle& Data);
	void Cancelled_684D211C4874A9193CF26BB9EF594A33(const struct FGameplayAbilityTargetDataHandle& Data);
	void Cancelled_CE4014CD48CC335ABFBA329962DAFEDB(const struct FGameplayAbilityTargetDataHandle& Data);
	void Cancelled_D52C98934B89DA60A2CED2B1B5FA4B1D(const struct FGameplayAbilityTargetDataHandle& Data);
	void CleanUpDelayAndEnd(double DelayLength);
	void CleanUpEndTasks();
	void EventReceived_B4CBA8614DBB83B46188EB9E8B6C626B(const struct FGameplayEventData& Payload);
	void ExecuteInrun(const struct FVector& WorldDirection);
	void ExecuteUbergraph_GA_KneeCharge(int32 EntryPoint);
	void GetBaseAimVector(const struct FHitResult& TargetingHit, struct FVector* GoalLocation);
	void HitValidation(const struct FGameplayAbilityTargetDataHandle& TargetData, bool* ValidHit);
	void InitializeStaticProperties(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec);
	bool IsWalking();
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnBlendOut_01EB6BAB45FDAE9B628549A07B37522F();
	void OnBlendOut_0579FDDB4687181A332628A1B0756343();
	void OnBlendOut_1545E7EF469AC586BBB2D3A3916FEC13();
	void OnBlendOut_3ADD473B4BA7C9EF89A2F08C70BC4576();
	void OnBlendOut_4A2375D74523933C701C2DAD79EBD90E();
	void OnCancelAbilityByTags(const class UGameplayAbility* Ability, const struct FGameplayTagContainer& WithTags, const struct FGameplayTagContainer& WithoutTags);
	void OnCancelled_01EB6BAB45FDAE9B628549A07B37522F();
	void OnCancelled_0579FDDB4687181A332628A1B0756343();
	void OnCancelled_1545E7EF469AC586BBB2D3A3916FEC13();
	void OnCancelled_3ADD473B4BA7C9EF89A2F08C70BC4576();
	void OnCancelled_4A2375D74523933C701C2DAD79EBD90E();
	void OnChange_E191E2584F62378B3AFDF0AAA13F3E11(EMovementMode NewMovementMode, uint8 CustomMoveMode);
	void OnCompleted_01EB6BAB45FDAE9B628549A07B37522F();
	void OnCompleted_0579FDDB4687181A332628A1B0756343();
	void OnCompleted_1545E7EF469AC586BBB2D3A3916FEC13();
	void OnCompleted_3ADD473B4BA7C9EF89A2F08C70BC4576();
	void OnCompleted_4A2375D74523933C701C2DAD79EBD90E();
	void OnFinish_0486978C4114674240398981E588A285();
	void OnFinish_0657858146313F604CB50AA5027C7DF6();
	void OnFinish_27907443466D1A8D31F1FC8FA4336C65();
	void OnFinish_333193004AE452E2FC6778BCDCA2D422();
	void OnFinish_65AA17F2437A22E7CD46A1B8A372C055();
	void OnFinish_B9BE0E2747D7D0B6B16B9BB5FE87FF9F();
	void OnFinish_D33C482E497402F157682998371F76C5();
	void OnInterrupted_01EB6BAB45FDAE9B628549A07B37522F();
	void OnInterrupted_0579FDDB4687181A332628A1B0756343();
	void OnInterrupted_1545E7EF469AC586BBB2D3A3916FEC13();
	void OnInterrupted_3ADD473B4BA7C9EF89A2F08C70BC4576();
	void OnInterrupted_4A2375D74523933C701C2DAD79EBD90E();
	void OnRelease_DCE3C5A542129F1C14F21FA5F4C530A9(float TimeHeld);
	void OnSync_183A95C34E92FC0D5E0195894B99D756();
	void OnSync_2B2212854AC960381ACEC19162123FDF();
	void OnSync_53B4AF774D5C6E4840E66BB4914C2474();
	void OnSync_CA9A08F24789BCD08632979C9A07BE5B();
	void OnSync_E193ED2C49A3D76A0B72499A7FE712FE();
	void OnSync_FD4654E841E95FF2D4E33E81746467F2();
	void OnTimedOut_CC2CF11A4AA1EA45549BFE89EFD17AC6();
	void OnTimedOutAndDestinationReached_CC2CF11A4AA1EA45549BFE89EFD17AC6();
	void PrepareAttack(const struct FHitResult& HitResult);
	void PrepareJump();
	void Removed_7FCDDED949F89D3D80A219B9711818CB();
	void ResetParams();
	void SetImmunityActive(bool active);
	void SetJumpStateActive(bool active);
	void SetSlideVectorOverrideActive(bool active);
	void SetSlowdownActive(bool active);
	void StartAttack(const struct FHitResult& HitResult);
	void StartInrun();
	void StartJump(const struct FVector& LaunchDirection, const struct FVector& AimingDirection);
	void StartTargeting();
	void TraceForCharacters_Attack();
	void TryEnterCastingSubstate();
	void TryExitCastingSubstate();
	void UnbindTelemetryEvents();
	void UnlockAttack();
	void ValidData_377DDE3A47C5E13898CCE3AAC76AB18A(const struct FGameplayAbilityTargetDataHandle& Data);
	void ValidData_684D211C4874A9193CF26BB9EF594A33(const struct FGameplayAbilityTargetDataHandle& Data);
	void ValidData_CE4014CD48CC335ABFBA329962DAFEDB(const struct FGameplayAbilityTargetDataHandle& Data);
	void ValidData_D52C98934B89DA60A2CED2B1B5FA4B1D(const struct FGameplayAbilityTargetDataHandle& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_KneeCharge_C">();
	}
	static class UGA_KneeCharge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_KneeCharge_C>();
	}
};
static_assert(alignof(UGA_KneeCharge_C) == 0x000008, "Wrong alignment on UGA_KneeCharge_C");
static_assert(sizeof(UGA_KneeCharge_C) == 0x0007D0, "Wrong size on UGA_KneeCharge_C");
static_assert(offsetof(UGA_KneeCharge_C, UberGraphFrame) == 0x000580, "Member 'UGA_KneeCharge_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedTraceRadius) == 0x000588, "Member 'UGA_KneeCharge_C::CachedTraceRadius' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Montage_Cast) == 0x000590, "Member 'UGA_KneeCharge_C::Montage_Cast' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Montage_Inrun) == 0x000598, "Member 'UGA_KneeCharge_C::Montage_Inrun' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Montage_Jump) == 0x0005A0, "Member 'UGA_KneeCharge_C::Montage_Jump' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Montage_Attack) == 0x0005A8, "Member 'UGA_KneeCharge_C::Montage_Attack' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, TimeToStopFlyingMontage) == 0x0005B0, "Member 'UGA_KneeCharge_C::TimeToStopFlyingMontage' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Camera_Targeting) == 0x0005B4, "Member 'UGA_KneeCharge_C::Camera_Targeting' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Camera_Movement) == 0x0005BC, "Member 'UGA_KneeCharge_C::Camera_Movement' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Task_WaitForAirborneToJump) == 0x0005C8, "Member 'UGA_KneeCharge_C::Task_WaitForAirborneToJump' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Task_WaitForLanding) == 0x0005D0, "Member 'UGA_KneeCharge_C::Task_WaitForLanding' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, TimeToStartLandingCheck) == 0x0005D8, "Member 'UGA_KneeCharge_C::TimeToStartLandingCheck' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, LaunchDirectionFromAiming) == 0x0005E0, "Member 'UGA_KneeCharge_C::LaunchDirectionFromAiming' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedTraceHeight) == 0x0005F8, "Member 'UGA_KneeCharge_C::CachedTraceHeight' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedStrength) == 0x000600, "Member 'UGA_KneeCharge_C::CachedStrength' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedStrengthDuration) == 0x000608, "Member 'UGA_KneeCharge_C::CachedStrengthDuration' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedPitchMin) == 0x000610, "Member 'UGA_KneeCharge_C::CachedPitchMin' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedPitchMax) == 0x000618, "Member 'UGA_KneeCharge_C::CachedPitchMax' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, LaunchDirectionAdjusted) == 0x000620, "Member 'UGA_KneeCharge_C::LaunchDirectionAdjusted' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Task_StopFlyingMontage) == 0x000638, "Member 'UGA_KneeCharge_C::Task_StopFlyingMontage' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Task_InrunMotion) == 0x000640, "Member 'UGA_KneeCharge_C::Task_InrunMotion' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Task_WaitForDash) == 0x000648, "Member 'UGA_KneeCharge_C::Task_WaitForDash' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedTimeout) == 0x000650, "Member 'UGA_KneeCharge_C::CachedTimeout' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, InrunFinished) == 0x000658, "Member 'UGA_KneeCharge_C::InrunFinished' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, AttackStarted) == 0x000659, "Member 'UGA_KneeCharge_C::AttackStarted' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, SlideVectorFactorOverride) == 0x000660, "Member 'UGA_KneeCharge_C::SlideVectorFactorOverride' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, StrengthCurve) == 0x000668, "Member 'UGA_KneeCharge_C::StrengthCurve' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, UpwardsBoostCurve) == 0x000670, "Member 'UGA_KneeCharge_C::UpwardsBoostCurve' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, PathOffsetCurve) == 0x000678, "Member 'UGA_KneeCharge_C::PathOffsetCurve' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, HasValidTarget) == 0x000680, "Member 'UGA_KneeCharge_C::HasValidTarget' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, ImmunityActivated) == 0x000681, "Member 'UGA_KneeCharge_C::ImmunityActivated' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, IsTargeting) == 0x000682, "Member 'UGA_KneeCharge_C::IsTargeting' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Audio_TargetingCanceled) == 0x000688, "Member 'UGA_KneeCharge_C::Audio_TargetingCanceled' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedCooldownFull) == 0x000690, "Member 'UGA_KneeCharge_C::CachedCooldownFull' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedCooldownReduced) == 0x000698, "Member 'UGA_KneeCharge_C::CachedCooldownReduced' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Task_WaitForAirborneToCancel) == 0x0006A0, "Member 'UGA_KneeCharge_C::Task_WaitForAirborneToCancel' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, DamageEffectClass) == 0x0006A8, "Member 'UGA_KneeCharge_C::DamageEffectClass' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Reticle_Class) == 0x0006B0, "Member 'UGA_KneeCharge_C::Reticle_Class' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedTargetingMaxRange) == 0x0006B8, "Member 'UGA_KneeCharge_C::CachedTargetingMaxRange' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, TargetCharacter) == 0x0006C0, "Member 'UGA_KneeCharge_C::TargetCharacter' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, TargetActorLocation) == 0x0006C8, "Member 'UGA_KneeCharge_C::TargetActorLocation' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedMoveToTargetSpeed) == 0x0006E0, "Member 'UGA_KneeCharge_C::CachedMoveToTargetSpeed' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, ActivatorName) == 0x0006E4, "Member 'UGA_KneeCharge_C::ActivatorName' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, DamageTypes) == 0x0006F0, "Member 'UGA_KneeCharge_C::DamageTypes' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Weapon_Mod_Frames) == 0x000700, "Member 'UGA_KneeCharge_C::Weapon_Mod_Frames' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedSlideVectorFactor) == 0x000710, "Member 'UGA_KneeCharge_C::CachedSlideVectorFactor' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, IsSlideVectorFactorOverrideActive) == 0x000718, "Member 'UGA_KneeCharge_C::IsSlideVectorFactorOverrideActive' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Task_VerifyMovement) == 0x000720, "Member 'UGA_KneeCharge_C::Task_VerifyMovement' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedImmunityDuration) == 0x000728, "Member 'UGA_KneeCharge_C::CachedImmunityDuration' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Montage_Out) == 0x000730, "Member 'UGA_KneeCharge_C::Montage_Out' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, IsSlowedDown) == 0x000738, "Member 'UGA_KneeCharge_C::IsSlowedDown' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, IsInJumpState) == 0x000739, "Member 'UGA_KneeCharge_C::IsInJumpState' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, IsMovementInputBlocked) == 0x00073A, "Member 'UGA_KneeCharge_C::IsMovementInputBlocked' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, TelemetryActivationTime) == 0x000740, "Member 'UGA_KneeCharge_C::TelemetryActivationTime' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, TelemetryPhase) == 0x000748, "Member 'UGA_KneeCharge_C::TelemetryPhase' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, TelemetryOutcome) == 0x000749, "Member 'UGA_KneeCharge_C::TelemetryOutcome' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Task_WaitTargetDataAttack) == 0x000750, "Member 'UGA_KneeCharge_C::Task_WaitTargetDataAttack' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, CachedRadiusMultiplierInrun) == 0x000758, "Member 'UGA_KneeCharge_C::CachedRadiusMultiplierInrun' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, InrunStrength) == 0x000760, "Member 'UGA_KneeCharge_C::InrunStrength' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, InrunStrengthDuration) == 0x000764, "Member 'UGA_KneeCharge_C::InrunStrengthDuration' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, InrunStartLocation) == 0x000768, "Member 'UGA_KneeCharge_C::InrunStartLocation' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, MaximumInrunRange) == 0x000780, "Member 'UGA_KneeCharge_C::MaximumInrunRange' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, MaximumJumpRange) == 0x000788, "Member 'UGA_KneeCharge_C::MaximumJumpRange' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, ServerValidationTolerance) == 0x000790, "Member 'UGA_KneeCharge_C::ServerValidationTolerance' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, KneeChargeDamageType) == 0x000798, "Member 'UGA_KneeCharge_C::KneeChargeDamageType' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, DamageImmunityEffectClass) == 0x0007A0, "Member 'UGA_KneeCharge_C::DamageImmunityEffectClass' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, OwnerCharacter) == 0x0007A8, "Member 'UGA_KneeCharge_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, bHasCleanedUp) == 0x0007B0, "Member 'UGA_KneeCharge_C::bHasCleanedUp' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Task_RootMotionConstantForce) == 0x0007B8, "Member 'UGA_KneeCharge_C::Task_RootMotionConstantForce' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, Task_RootMotionMoveToForce) == 0x0007C0, "Member 'UGA_KneeCharge_C::Task_RootMotionMoveToForce' has a wrong offset!");
static_assert(offsetof(UGA_KneeCharge_C, MaxVelocityAfterJump) == 0x0007C8, "Member 'UGA_KneeCharge_C::MaxVelocityAfterJump' has a wrong offset!");

}

