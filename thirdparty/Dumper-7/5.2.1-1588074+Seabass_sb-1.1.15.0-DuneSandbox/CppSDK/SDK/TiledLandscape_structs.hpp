#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TiledLandscape

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct TiledLandscape.TiledLandscapeTileWithLODs
// 0x0078 (0x0078 - 0x0000)
struct FTiledLandscapeTileWithLODs final
{
public:
	TSoftObjectPtr<class UWorld>                  Preset;                                            // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          LODs;                                              // 0x0030(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBox                                   PresetBounds;                                      // 0x0040(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTiledLandscapeTileWithLODs) == 0x000008, "Wrong alignment on FTiledLandscapeTileWithLODs");
static_assert(sizeof(FTiledLandscapeTileWithLODs) == 0x000078, "Wrong size on FTiledLandscapeTileWithLODs");
static_assert(offsetof(FTiledLandscapeTileWithLODs, Preset) == 0x000000, "Member 'FTiledLandscapeTileWithLODs::Preset' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileWithLODs, LODs) == 0x000030, "Member 'FTiledLandscapeTileWithLODs::LODs' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileWithLODs, PresetBounds) == 0x000040, "Member 'FTiledLandscapeTileWithLODs::PresetBounds' has a wrong offset!");

// ScriptStruct TiledLandscape.TiledLandscapeManagerPresetList_RollingCarpet_Row
// 0x0010 (0x0010 - 0x0000)
struct FTiledLandscapeManagerPresetList_RollingCarpet_Row final
{
public:
	TArray<struct FTiledLandscapeTileWithLODs>    Columns;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTiledLandscapeManagerPresetList_RollingCarpet_Row) == 0x000008, "Wrong alignment on FTiledLandscapeManagerPresetList_RollingCarpet_Row");
static_assert(sizeof(FTiledLandscapeManagerPresetList_RollingCarpet_Row) == 0x000010, "Wrong size on FTiledLandscapeManagerPresetList_RollingCarpet_Row");
static_assert(offsetof(FTiledLandscapeManagerPresetList_RollingCarpet_Row, Columns) == 0x000000, "Member 'FTiledLandscapeManagerPresetList_RollingCarpet_Row::Columns' has a wrong offset!");

// ScriptStruct TiledLandscape.GenerateRepeatingTilesFromSubLevelsSettings
// 0x0028 (0x0028 - 0x0000)
struct FGenerateRepeatingTilesFromSubLevelsSettings final
{
public:
	class FString                                 SubLevelsDirectory;                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlignFoliage;                                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCleanupFoliage;                                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SeaofSandDirectory;                                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenerateRepeatingTilesFromSubLevelsSettings) == 0x000008, "Wrong alignment on FGenerateRepeatingTilesFromSubLevelsSettings");
static_assert(sizeof(FGenerateRepeatingTilesFromSubLevelsSettings) == 0x000028, "Wrong size on FGenerateRepeatingTilesFromSubLevelsSettings");
static_assert(offsetof(FGenerateRepeatingTilesFromSubLevelsSettings, SubLevelsDirectory) == 0x000000, "Member 'FGenerateRepeatingTilesFromSubLevelsSettings::SubLevelsDirectory' has a wrong offset!");
static_assert(offsetof(FGenerateRepeatingTilesFromSubLevelsSettings, bAlignFoliage) == 0x000010, "Member 'FGenerateRepeatingTilesFromSubLevelsSettings::bAlignFoliage' has a wrong offset!");
static_assert(offsetof(FGenerateRepeatingTilesFromSubLevelsSettings, bCleanupFoliage) == 0x000011, "Member 'FGenerateRepeatingTilesFromSubLevelsSettings::bCleanupFoliage' has a wrong offset!");
static_assert(offsetof(FGenerateRepeatingTilesFromSubLevelsSettings, SeaofSandDirectory) == 0x000018, "Member 'FGenerateRepeatingTilesFromSubLevelsSettings::SeaofSandDirectory' has a wrong offset!");

// ScriptStruct TiledLandscape.TiledLandscapeLevelSimplificationDetails
// 0x0158 (0x0158 - 0x0000)
struct FTiledLandscapeLevelSimplificationDetails final
{
public:
	bool                                          bCreatePackagePerAsset;                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateNaniteEnabledMesh;                        // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DetailsPercentage;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialProxySettings                 StaticMeshMaterialSettings;                        // 0x0008(0x00A0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideLandscapeExportLOD;                       // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LandscapeExportLOD;                                // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialProxySettings                 LandscapeMaterialSettings;                         // 0x00B0(0x00A0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBakeFoliageToLandscape;                           // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBakeGrassToLandscape;                             // 0x0151(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTiledLandscapeLevelSimplificationDetails) == 0x000008, "Wrong alignment on FTiledLandscapeLevelSimplificationDetails");
static_assert(sizeof(FTiledLandscapeLevelSimplificationDetails) == 0x000158, "Wrong size on FTiledLandscapeLevelSimplificationDetails");
static_assert(offsetof(FTiledLandscapeLevelSimplificationDetails, bCreatePackagePerAsset) == 0x000000, "Member 'FTiledLandscapeLevelSimplificationDetails::bCreatePackagePerAsset' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeLevelSimplificationDetails, bGenerateNaniteEnabledMesh) == 0x000001, "Member 'FTiledLandscapeLevelSimplificationDetails::bGenerateNaniteEnabledMesh' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeLevelSimplificationDetails, DetailsPercentage) == 0x000004, "Member 'FTiledLandscapeLevelSimplificationDetails::DetailsPercentage' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeLevelSimplificationDetails, StaticMeshMaterialSettings) == 0x000008, "Member 'FTiledLandscapeLevelSimplificationDetails::StaticMeshMaterialSettings' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeLevelSimplificationDetails, bOverrideLandscapeExportLOD) == 0x0000A8, "Member 'FTiledLandscapeLevelSimplificationDetails::bOverrideLandscapeExportLOD' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeLevelSimplificationDetails, LandscapeExportLOD) == 0x0000AC, "Member 'FTiledLandscapeLevelSimplificationDetails::LandscapeExportLOD' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeLevelSimplificationDetails, LandscapeMaterialSettings) == 0x0000B0, "Member 'FTiledLandscapeLevelSimplificationDetails::LandscapeMaterialSettings' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeLevelSimplificationDetails, bBakeFoliageToLandscape) == 0x000150, "Member 'FTiledLandscapeLevelSimplificationDetails::bBakeFoliageToLandscape' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeLevelSimplificationDetails, bBakeGrassToLandscape) == 0x000151, "Member 'FTiledLandscapeLevelSimplificationDetails::bBakeGrassToLandscape' has a wrong offset!");

// ScriptStruct TiledLandscape.TiledLandscapeTileLODEntryDetails
// 0x0168 (0x0168 - 0x0000)
struct FTiledLandscapeTileLODEntryDetails final
{
public:
	int32                                         LODIndex;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelativeDistance;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeOnConsole;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTiledLandscapeLevelSimplificationDetails SimplificationDetails;                          // 0x0010(0x0158)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTiledLandscapeTileLODEntryDetails) == 0x000008, "Wrong alignment on FTiledLandscapeTileLODEntryDetails");
static_assert(sizeof(FTiledLandscapeTileLODEntryDetails) == 0x000168, "Wrong size on FTiledLandscapeTileLODEntryDetails");
static_assert(offsetof(FTiledLandscapeTileLODEntryDetails, LODIndex) == 0x000000, "Member 'FTiledLandscapeTileLODEntryDetails::LODIndex' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileLODEntryDetails, RelativeDistance) == 0x000004, "Member 'FTiledLandscapeTileLODEntryDetails::RelativeDistance' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileLODEntryDetails, bExcludeOnConsole) == 0x000008, "Member 'FTiledLandscapeTileLODEntryDetails::bExcludeOnConsole' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileLODEntryDetails, SimplificationDetails) == 0x000010, "Member 'FTiledLandscapeTileLODEntryDetails::SimplificationDetails' has a wrong offset!");

// ScriptStruct TiledLandscape.BiomeNeighborhood
// 0x0020 (0x0020 - 0x0000)
struct FBiomeNeighborhood final
{
public:
	TArray<int32>                                 NeighborBiomeType;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CenterBiomeType;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CenterRollingIndex;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CenterRegionIndex;                                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomeNeighborhood) == 0x000008, "Wrong alignment on FBiomeNeighborhood");
static_assert(sizeof(FBiomeNeighborhood) == 0x000020, "Wrong size on FBiomeNeighborhood");
static_assert(offsetof(FBiomeNeighborhood, NeighborBiomeType) == 0x000000, "Member 'FBiomeNeighborhood::NeighborBiomeType' has a wrong offset!");
static_assert(offsetof(FBiomeNeighborhood, CenterBiomeType) == 0x000010, "Member 'FBiomeNeighborhood::CenterBiomeType' has a wrong offset!");
static_assert(offsetof(FBiomeNeighborhood, CenterRollingIndex) == 0x000014, "Member 'FBiomeNeighborhood::CenterRollingIndex' has a wrong offset!");
static_assert(offsetof(FBiomeNeighborhood, CenterRegionIndex) == 0x000018, "Member 'FBiomeNeighborhood::CenterRegionIndex' has a wrong offset!");

// ScriptStruct TiledLandscape.TiledLandscapeManagerPresetList_RollingCarpet
// 0x0010 (0x0010 - 0x0000)
struct FTiledLandscapeManagerPresetList_RollingCarpet final
{
public:
	TArray<struct FTiledLandscapeManagerPresetList_RollingCarpet_Row> Rows;                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTiledLandscapeManagerPresetList_RollingCarpet) == 0x000008, "Wrong alignment on FTiledLandscapeManagerPresetList_RollingCarpet");
static_assert(sizeof(FTiledLandscapeManagerPresetList_RollingCarpet) == 0x000010, "Wrong size on FTiledLandscapeManagerPresetList_RollingCarpet");
static_assert(offsetof(FTiledLandscapeManagerPresetList_RollingCarpet, Rows) == 0x000000, "Member 'FTiledLandscapeManagerPresetList_RollingCarpet::Rows' has a wrong offset!");

// ScriptStruct TiledLandscape.BiomeInfo
// 0x0088 (0x0088 - 0x0000)
struct FBiomeInfo final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTiledLandscapeManagerPresetList_RollingCarpet Presets;                                   // 0x0028(0x0010)(NativeAccessSpecifierPublic)
	TMap<struct FBiomeNeighborhood, struct FTiledLandscapeTileWithLODs> TransitionTiles;             // 0x0038(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomeInfo) == 0x000008, "Wrong alignment on FBiomeInfo");
static_assert(sizeof(FBiomeInfo) == 0x000088, "Wrong size on FBiomeInfo");
static_assert(offsetof(FBiomeInfo, Color) == 0x000000, "Member 'FBiomeInfo::Color' has a wrong offset!");
static_assert(offsetof(FBiomeInfo, Index) == 0x000010, "Member 'FBiomeInfo::Index' has a wrong offset!");
static_assert(offsetof(FBiomeInfo, Order) == 0x000014, "Member 'FBiomeInfo::Order' has a wrong offset!");
static_assert(offsetof(FBiomeInfo, Name) == 0x000018, "Member 'FBiomeInfo::Name' has a wrong offset!");
static_assert(offsetof(FBiomeInfo, Presets) == 0x000028, "Member 'FBiomeInfo::Presets' has a wrong offset!");
static_assert(offsetof(FBiomeInfo, TransitionTiles) == 0x000038, "Member 'FBiomeInfo::TransitionTiles' has a wrong offset!");

// ScriptStruct TiledLandscape.BiomeRegionInfo
// 0x0028 (0x0028 - 0x0000)
struct FBiomeRegionInfo final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightZOffset;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRepeating;                                       // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnique;                                          // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomeRegionInfo) == 0x000008, "Wrong alignment on FBiomeRegionInfo");
static_assert(sizeof(FBiomeRegionInfo) == 0x000028, "Wrong size on FBiomeRegionInfo");
static_assert(offsetof(FBiomeRegionInfo, Color) == 0x000000, "Member 'FBiomeRegionInfo::Color' has a wrong offset!");
static_assert(offsetof(FBiomeRegionInfo, Name) == 0x000010, "Member 'FBiomeRegionInfo::Name' has a wrong offset!");
static_assert(offsetof(FBiomeRegionInfo, HeightZOffset) == 0x000020, "Member 'FBiomeRegionInfo::HeightZOffset' has a wrong offset!");
static_assert(offsetof(FBiomeRegionInfo, IsRepeating) == 0x000024, "Member 'FBiomeRegionInfo::IsRepeating' has a wrong offset!");
static_assert(offsetof(FBiomeRegionInfo, IsUnique) == 0x000025, "Member 'FBiomeRegionInfo::IsUnique' has a wrong offset!");

// ScriptStruct TiledLandscape.BiomeDataChanges
// 0x0002 (0x0002 - 0x0000)
struct FBiomeDataChanges final
{
public:
	bool                                          ConfigurationChanged;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SublevelsChanged;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomeDataChanges) == 0x000001, "Wrong alignment on FBiomeDataChanges");
static_assert(sizeof(FBiomeDataChanges) == 0x000002, "Wrong size on FBiomeDataChanges");
static_assert(offsetof(FBiomeDataChanges, ConfigurationChanged) == 0x000000, "Member 'FBiomeDataChanges::ConfigurationChanged' has a wrong offset!");
static_assert(offsetof(FBiomeDataChanges, SublevelsChanged) == 0x000001, "Member 'FBiomeDataChanges::SublevelsChanged' has a wrong offset!");

// ScriptStruct TiledLandscape.TiledLandscapeTileWithLODsItem
// 0x0088 (0x0088 - 0x0000)
struct FTiledLandscapeTileWithLODsItem final
{
public:
	TSoftObjectPtr<class UWorld>                  Preset;                                            // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          LODs;                                              // 0x0030(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<uint16>                                Indices;                                           // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                   PresetBounds;                                      // 0x0050(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTiledLandscapeTileWithLODsItem) == 0x000008, "Wrong alignment on FTiledLandscapeTileWithLODsItem");
static_assert(sizeof(FTiledLandscapeTileWithLODsItem) == 0x000088, "Wrong size on FTiledLandscapeTileWithLODsItem");
static_assert(offsetof(FTiledLandscapeTileWithLODsItem, Preset) == 0x000000, "Member 'FTiledLandscapeTileWithLODsItem::Preset' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileWithLODsItem, LODs) == 0x000030, "Member 'FTiledLandscapeTileWithLODsItem::LODs' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileWithLODsItem, Indices) == 0x000040, "Member 'FTiledLandscapeTileWithLODsItem::Indices' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileWithLODsItem, PresetBounds) == 0x000050, "Member 'FTiledLandscapeTileWithLODsItem::PresetBounds' has a wrong offset!");

// ScriptStruct TiledLandscape.TiledLandscapeTileOverridesContainer
// 0x0018 (0x0018 - 0x0000)
struct FTiledLandscapeTileOverridesContainer final
{
public:
	TArray<struct FTiledLandscapeTileWithLODsItem> UniqueTiles;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int8                                          ShiftOffsetX;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          ShiftOffsetY;                                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SizeX;                                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SizeY;                                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          ReplicationKey;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          MostRecentReplicationKey;                          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTiledLandscapeTileOverridesContainer) == 0x000008, "Wrong alignment on FTiledLandscapeTileOverridesContainer");
static_assert(sizeof(FTiledLandscapeTileOverridesContainer) == 0x000018, "Wrong size on FTiledLandscapeTileOverridesContainer");
static_assert(offsetof(FTiledLandscapeTileOverridesContainer, UniqueTiles) == 0x000000, "Member 'FTiledLandscapeTileOverridesContainer::UniqueTiles' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileOverridesContainer, ShiftOffsetX) == 0x000010, "Member 'FTiledLandscapeTileOverridesContainer::ShiftOffsetX' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileOverridesContainer, ShiftOffsetY) == 0x000011, "Member 'FTiledLandscapeTileOverridesContainer::ShiftOffsetY' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileOverridesContainer, SizeX) == 0x000012, "Member 'FTiledLandscapeTileOverridesContainer::SizeX' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileOverridesContainer, SizeY) == 0x000013, "Member 'FTiledLandscapeTileOverridesContainer::SizeY' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileOverridesContainer, ReplicationKey) == 0x000014, "Member 'FTiledLandscapeTileOverridesContainer::ReplicationKey' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileOverridesContainer, MostRecentReplicationKey) == 0x000015, "Member 'FTiledLandscapeTileOverridesContainer::MostRecentReplicationKey' has a wrong offset!");

// ScriptStruct TiledLandscape.TiledLandscapeBiomeDataOverride
// 0x0020 (0x0020 - 0x0000)
struct FTiledLandscapeBiomeDataOverride final
{
public:
	struct FIntPoint                              ShiftOffset;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FIntPoint                              Size;                                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FTiledLandscapeTileWithLODs>    Tiles;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTiledLandscapeBiomeDataOverride) == 0x000008, "Wrong alignment on FTiledLandscapeBiomeDataOverride");
static_assert(sizeof(FTiledLandscapeBiomeDataOverride) == 0x000020, "Wrong size on FTiledLandscapeBiomeDataOverride");
static_assert(offsetof(FTiledLandscapeBiomeDataOverride, ShiftOffset) == 0x000000, "Member 'FTiledLandscapeBiomeDataOverride::ShiftOffset' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeBiomeDataOverride, Size) == 0x000008, "Member 'FTiledLandscapeBiomeDataOverride::Size' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeBiomeDataOverride, Tiles) == 0x000010, "Member 'FTiledLandscapeBiomeDataOverride::Tiles' has a wrong offset!");

// ScriptStruct TiledLandscape.TileHoleData
// 0x0018 (0x0018 - 0x0000)
struct FTileHoleData final
{
public:
	int32                                         NumMaskedOutLandscapeComponents;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  LandscapeComponentMasks;                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileHoleData) == 0x000008, "Wrong alignment on FTileHoleData");
static_assert(sizeof(FTileHoleData) == 0x000018, "Wrong size on FTileHoleData");
static_assert(offsetof(FTileHoleData, NumMaskedOutLandscapeComponents) == 0x000000, "Member 'FTileHoleData::NumMaskedOutLandscapeComponents' has a wrong offset!");
static_assert(offsetof(FTileHoleData, LandscapeComponentMasks) == 0x000008, "Member 'FTileHoleData::LandscapeComponentMasks' has a wrong offset!");

// ScriptStruct TiledLandscape.CachedLandscape
// 0x0140 (0x0140 - 0x0000)
struct FCachedLandscape final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationInLevel;                                   // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CenterInLevel;                                     // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExtentInLevel;                                     // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              BoundingRectMin;                                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              BoundingRectMax;                                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorToLevel;                                      // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LevelToActor;                                      // 0x00D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint16>                                HeightmapData;                                     // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedLandscape) == 0x000010, "Wrong alignment on FCachedLandscape");
static_assert(sizeof(FCachedLandscape) == 0x000140, "Wrong size on FCachedLandscape");
static_assert(offsetof(FCachedLandscape, Guid) == 0x000000, "Member 'FCachedLandscape::Guid' has a wrong offset!");
static_assert(offsetof(FCachedLandscape, LocationInLevel) == 0x000010, "Member 'FCachedLandscape::LocationInLevel' has a wrong offset!");
static_assert(offsetof(FCachedLandscape, CenterInLevel) == 0x000028, "Member 'FCachedLandscape::CenterInLevel' has a wrong offset!");
static_assert(offsetof(FCachedLandscape, ExtentInLevel) == 0x000040, "Member 'FCachedLandscape::ExtentInLevel' has a wrong offset!");
static_assert(offsetof(FCachedLandscape, BoundingRectMin) == 0x000058, "Member 'FCachedLandscape::BoundingRectMin' has a wrong offset!");
static_assert(offsetof(FCachedLandscape, BoundingRectMax) == 0x000060, "Member 'FCachedLandscape::BoundingRectMax' has a wrong offset!");
static_assert(offsetof(FCachedLandscape, ActorToLevel) == 0x000070, "Member 'FCachedLandscape::ActorToLevel' has a wrong offset!");
static_assert(offsetof(FCachedLandscape, LevelToActor) == 0x0000D0, "Member 'FCachedLandscape::LevelToActor' has a wrong offset!");
static_assert(offsetof(FCachedLandscape, HeightmapData) == 0x000130, "Member 'FCachedLandscape::HeightmapData' has a wrong offset!");

// ScriptStruct TiledLandscape.CachedTerrainBlockTemplate
// 0x0020 (0x0020 - 0x0000)
struct FCachedTerrainBlockTemplate final
{
public:
	class FString                                 LevelHash;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCachedLandscape>               Landscapes;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedTerrainBlockTemplate) == 0x000008, "Wrong alignment on FCachedTerrainBlockTemplate");
static_assert(sizeof(FCachedTerrainBlockTemplate) == 0x000020, "Wrong size on FCachedTerrainBlockTemplate");
static_assert(offsetof(FCachedTerrainBlockTemplate, LevelHash) == 0x000000, "Member 'FCachedTerrainBlockTemplate::LevelHash' has a wrong offset!");
static_assert(offsetof(FCachedTerrainBlockTemplate, Landscapes) == 0x000010, "Member 'FCachedTerrainBlockTemplate::Landscapes' has a wrong offset!");

// ScriptStruct TiledLandscape.MaskingLandscapeIdentity
// 0x0070 (0x0070 - 0x0000)
struct FMaskingLandscapeIdentity final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaskingLandscapeIdentity) == 0x000010, "Wrong alignment on FMaskingLandscapeIdentity");
static_assert(sizeof(FMaskingLandscapeIdentity) == 0x000070, "Wrong size on FMaskingLandscapeIdentity");
static_assert(offsetof(FMaskingLandscapeIdentity, Guid) == 0x000000, "Member 'FMaskingLandscapeIdentity::Guid' has a wrong offset!");
static_assert(offsetof(FMaskingLandscapeIdentity, Transform) == 0x000010, "Member 'FMaskingLandscapeIdentity::Transform' has a wrong offset!");

// ScriptStruct TiledLandscape.TileHoleIdentity
// 0x0060 (0x0060 - 0x0000)
struct FTileHoleIdentity final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FMaskingLandscapeIdentity>        MaskingLandscapeSet;                               // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileHoleIdentity) == 0x000008, "Wrong alignment on FTileHoleIdentity");
static_assert(sizeof(FTileHoleIdentity) == 0x000060, "Wrong size on FTileHoleIdentity");
static_assert(offsetof(FTileHoleIdentity, Guid) == 0x000000, "Member 'FTileHoleIdentity::Guid' has a wrong offset!");
static_assert(offsetof(FTileHoleIdentity, MaskingLandscapeSet) == 0x000010, "Member 'FTileHoleIdentity::MaskingLandscapeSet' has a wrong offset!");

}

