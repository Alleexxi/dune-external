#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KneeCharge_TargetActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KneeCharge_TargetActor.BP_KneeCharge_TargetActor_C
// 0x00F0 (0x0790 - 0x06A0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_KneeCharge_TargetActor_C : public ADuneGameplayAbilityTargetActor_TraceCustom
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 DummySkeletalMesh;                                 // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPoseableMeshComponent*                 PreviewImage_04;                                   // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPoseableMeshComponent*                 PreviewImage_03;                                   // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPoseableMeshComponent*                 PreviewImage_02;                                   // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPoseableMeshComponent*                 PreviewImage_01;                                   // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RangeIndicatorMaxDistance;                         // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SceneRootOffset;                                   // 0x06E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        KneeChargePitchMin;                                // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        KneeChargePitchMax;                                // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial_01;                                // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial_02;                                // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial_03;                                // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial_04;                                // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          Audio_Cast;                                        // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          Audio_CastLoop;                                    // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material_TargetingImages;                          // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ReferenceSkeletalMesh;                             // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchDirection;                                   // 0x0748(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            UpwardsBoostCurve;                                 // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class AActor* NewTarget)> OnTargetChanged;                         // 0x0768(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        AdjustedPitchMin;                                  // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdjustedPitchMax;                                  // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateTargetingPreview();
	void ExecuteUbergraph_BP_KneeCharge_TargetActor(int32 EntryPoint);
	bool IsCharacterLocallyControlled();
	void OnCurrentTargetChanged(class AActor* NewTarget);
	void OnTargetActorInitialized();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void SetDummyActive(bool IsActive);
	void SetupImageVisuals(class USkinnedMeshComponent* ImageMesh, class UMaterialInstanceDynamic*& Mid, float PersistentOffset, float VertexOffsetMulti);
	void SetupPoseableMeshes();
	void UpdateDynamicMaterials();

	bool CustomTargetCheck(const class AActor* CheckedActor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KneeCharge_TargetActor_C">();
	}
	static class ABP_KneeCharge_TargetActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KneeCharge_TargetActor_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_KneeCharge_TargetActor_C) == 0x000010, "Wrong alignment on ABP_KneeCharge_TargetActor_C");
static_assert(sizeof(ABP_KneeCharge_TargetActor_C) == 0x000790, "Wrong size on ABP_KneeCharge_TargetActor_C");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, UberGraphFrame) == 0x0006A0, "Member 'ABP_KneeCharge_TargetActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, DummySkeletalMesh) == 0x0006A8, "Member 'ABP_KneeCharge_TargetActor_C::DummySkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, PreviewImage_04) == 0x0006B0, "Member 'ABP_KneeCharge_TargetActor_C::PreviewImage_04' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, PreviewImage_03) == 0x0006B8, "Member 'ABP_KneeCharge_TargetActor_C::PreviewImage_03' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, PreviewImage_02) == 0x0006C0, "Member 'ABP_KneeCharge_TargetActor_C::PreviewImage_02' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, PreviewImage_01) == 0x0006C8, "Member 'ABP_KneeCharge_TargetActor_C::PreviewImage_01' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, DefaultSceneRoot) == 0x0006D0, "Member 'ABP_KneeCharge_TargetActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, RangeIndicatorMaxDistance) == 0x0006D8, "Member 'ABP_KneeCharge_TargetActor_C::RangeIndicatorMaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, SceneRootOffset) == 0x0006E0, "Member 'ABP_KneeCharge_TargetActor_C::SceneRootOffset' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, KneeChargePitchMin) == 0x0006F8, "Member 'ABP_KneeCharge_TargetActor_C::KneeChargePitchMin' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, KneeChargePitchMax) == 0x000700, "Member 'ABP_KneeCharge_TargetActor_C::KneeChargePitchMax' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, DynamicMaterial_01) == 0x000708, "Member 'ABP_KneeCharge_TargetActor_C::DynamicMaterial_01' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, DynamicMaterial_02) == 0x000710, "Member 'ABP_KneeCharge_TargetActor_C::DynamicMaterial_02' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, DynamicMaterial_03) == 0x000718, "Member 'ABP_KneeCharge_TargetActor_C::DynamicMaterial_03' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, DynamicMaterial_04) == 0x000720, "Member 'ABP_KneeCharge_TargetActor_C::DynamicMaterial_04' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, Audio_Cast) == 0x000728, "Member 'ABP_KneeCharge_TargetActor_C::Audio_Cast' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, Audio_CastLoop) == 0x000730, "Member 'ABP_KneeCharge_TargetActor_C::Audio_CastLoop' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, Material_TargetingImages) == 0x000738, "Member 'ABP_KneeCharge_TargetActor_C::Material_TargetingImages' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, ReferenceSkeletalMesh) == 0x000740, "Member 'ABP_KneeCharge_TargetActor_C::ReferenceSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, LaunchDirection) == 0x000748, "Member 'ABP_KneeCharge_TargetActor_C::LaunchDirection' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, UpwardsBoostCurve) == 0x000760, "Member 'ABP_KneeCharge_TargetActor_C::UpwardsBoostCurve' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, OnTargetChanged) == 0x000768, "Member 'ABP_KneeCharge_TargetActor_C::OnTargetChanged' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, AdjustedPitchMin) == 0x000778, "Member 'ABP_KneeCharge_TargetActor_C::AdjustedPitchMin' has a wrong offset!");
static_assert(offsetof(ABP_KneeCharge_TargetActor_C, AdjustedPitchMax) == 0x000780, "Member 'ABP_KneeCharge_TargetActor_C::AdjustedPitchMax' has a wrong offset!");

}

