#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightingValidator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "F_LightComponentValidationDetails_structs.hpp"
#include "UE4Dreamworld_classes.hpp"
#include "F_LightActorValidationDetails_structs.hpp"
#include "DatasmithContent_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightingValidator.BP_LightingValidator_C
// 0x0220 (0x0290 - 0x0070)
class UBP_LightingValidator_C final : public USceneValidator
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0070(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class AActor*>                         Actors_With_Light_Components;                      // 0x0078(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         MultipleLightComponents;                           // 0x0088(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FString                                 Light_Component_Info_String;                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         ShadowCastingLightActors;                          // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         MovableLightActors;                                // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         HighAttenuationLightActors;                        // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Attenuation_Threshold;                             // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Current_Actor;                                     // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class ULightComponent*, struct FF_LightComponentValidationDetails> Light_Components;        // 0x00E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class AActor*, struct FF_LightActorValidationDetails> Naked_Light_Actors;                   // 0x0138(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class AActor*, struct FF_LightActorValidationDetails> Test_Light_Actors;                    // 0x0188(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class AActor*, struct FF_LightActorValidationDetails> Non_Lighting_Actor;                   // 0x01D8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class AActor*, struct FF_LightActorValidationDetails> Proper_Light_Actors;                  // 0x0228(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AActor*>                         Undefined_Light_Actors;                            // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UInstancedStaticMeshComponent*          Light_Components_Visualization;                    // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Append_AttenuationRadius_Info(class AActor* Actor, class UPointLightComponent* Light_Component, const class FString& String_to_append_to, class FString* Info);
	void Append_Mobility_Info(class AActor* Actor, class ULightComponent* Light_Component, const class FString& String_to_append_to, class FString* Info);
	void Append_ShadowCasting_Info(class AActor* Actor, class ULightComponent* Light_Component, const class FString& String_to_append_to, class FString* Info);
	void BP_GatherWorldData(class UWorld* World);
	void Construct_Light_Component_Details_String(const class ULightComponent*& Light_Component, int32 Light_Component_Index, const TMap<class ULightComponent*, struct FF_LightComponentValidationDetails>& Light_Component_Details, class FString* Light_Component_Details_String);
	void ExecuteUbergraph_BP_LightingValidator(int32 EntryPoint);
	void GatherWorldData(class UWorld* World);
	void GatherWorldSectionData(class UWorld* World, const struct FValidationWorldSection& WorldSection);
	bool ValidateWorld(bool bSectionsPassedValidation);
	void Visualization();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightingValidator_C">();
	}
	static class UBP_LightingValidator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_LightingValidator_C>();
	}
};
static_assert(alignof(UBP_LightingValidator_C) == 0x000008, "Wrong alignment on UBP_LightingValidator_C");
static_assert(sizeof(UBP_LightingValidator_C) == 0x000290, "Wrong size on UBP_LightingValidator_C");
static_assert(offsetof(UBP_LightingValidator_C, UberGraphFrame) == 0x000070, "Member 'UBP_LightingValidator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Actors_With_Light_Components) == 0x000078, "Member 'UBP_LightingValidator_C::Actors_With_Light_Components' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, MultipleLightComponents) == 0x000088, "Member 'UBP_LightingValidator_C::MultipleLightComponents' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Light_Component_Info_String) == 0x000098, "Member 'UBP_LightingValidator_C::Light_Component_Info_String' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, ShadowCastingLightActors) == 0x0000A8, "Member 'UBP_LightingValidator_C::ShadowCastingLightActors' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, MovableLightActors) == 0x0000B8, "Member 'UBP_LightingValidator_C::MovableLightActors' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, HighAttenuationLightActors) == 0x0000C8, "Member 'UBP_LightingValidator_C::HighAttenuationLightActors' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Attenuation_Threshold) == 0x0000D8, "Member 'UBP_LightingValidator_C::Attenuation_Threshold' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Current_Actor) == 0x0000E0, "Member 'UBP_LightingValidator_C::Current_Actor' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Light_Components) == 0x0000E8, "Member 'UBP_LightingValidator_C::Light_Components' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Naked_Light_Actors) == 0x000138, "Member 'UBP_LightingValidator_C::Naked_Light_Actors' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Test_Light_Actors) == 0x000188, "Member 'UBP_LightingValidator_C::Test_Light_Actors' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Non_Lighting_Actor) == 0x0001D8, "Member 'UBP_LightingValidator_C::Non_Lighting_Actor' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Proper_Light_Actors) == 0x000228, "Member 'UBP_LightingValidator_C::Proper_Light_Actors' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Undefined_Light_Actors) == 0x000278, "Member 'UBP_LightingValidator_C::Undefined_Light_Actors' has a wrong offset!");
static_assert(offsetof(UBP_LightingValidator_C, Light_Components_Visualization) == 0x000288, "Member 'UBP_LightingValidator_C::Light_Components_Visualization' has a wrong offset!");

}

