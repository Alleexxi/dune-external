#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_Mentat_ExploitWeakness

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GC_Mentat_ExploitWeakness.GC_Mentat_ExploitWeakness_C.ExecuteUbergraph_GC_Mentat_ExploitWeakness
// 0x0020 (0x0020 - 0x0000)
struct GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness) == 0x000008, "Wrong alignment on GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness");
static_assert(sizeof(GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness) == 0x000020, "Wrong size on GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness, EntryPoint) == 0x000000, "Member 'GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness::EntryPoint' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000010, "Member 'GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'GC_Mentat_ExploitWeakness_C_ExecuteUbergraph_GC_Mentat_ExploitWeakness::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function GC_Mentat_ExploitWeakness.GC_Mentat_ExploitWeakness_C.OnActive
// 0x00F8 (0x00F8 - 0x0000)
struct GC_Mentat_ExploitWeakness_C_OnActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneCharacter*                         K2Node_DynamicCast_AsDune_Character;               // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_Mentat_ExploitWeakness_C_OnActive) == 0x000008, "Wrong alignment on GC_Mentat_ExploitWeakness_C_OnActive");
static_assert(sizeof(GC_Mentat_ExploitWeakness_C_OnActive) == 0x0000F8, "Wrong size on GC_Mentat_ExploitWeakness_C_OnActive");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_OnActive, MyTarget) == 0x000000, "Member 'GC_Mentat_ExploitWeakness_C_OnActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_OnActive, Parameters) == 0x000008, "Member 'GC_Mentat_ExploitWeakness_C_OnActive::Parameters' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_OnActive, ReturnValue) == 0x0000E0, "Member 'GC_Mentat_ExploitWeakness_C_OnActive::ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_OnActive, K2Node_DynamicCast_AsDune_Character) == 0x0000E8, "Member 'GC_Mentat_ExploitWeakness_C_OnActive::K2Node_DynamicCast_AsDune_Character' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_OnActive, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'GC_Mentat_ExploitWeakness_C_OnActive::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GC_Mentat_ExploitWeakness.GC_Mentat_ExploitWeakness_C.OnExecute
// 0x00E8 (0x00E8 - 0x0000)
struct GC_Mentat_ExploitWeakness_C_OnExecute final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnExecute_ReturnValue;                    // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_Mentat_ExploitWeakness_C_OnExecute) == 0x000008, "Wrong alignment on GC_Mentat_ExploitWeakness_C_OnExecute");
static_assert(sizeof(GC_Mentat_ExploitWeakness_C_OnExecute) == 0x0000E8, "Wrong size on GC_Mentat_ExploitWeakness_C_OnExecute");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_OnExecute, MyTarget) == 0x000000, "Member 'GC_Mentat_ExploitWeakness_C_OnExecute::MyTarget' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_OnExecute, Parameters) == 0x000008, "Member 'GC_Mentat_ExploitWeakness_C_OnExecute::Parameters' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_OnExecute, ReturnValue) == 0x0000E0, "Member 'GC_Mentat_ExploitWeakness_C_OnExecute::ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_Mentat_ExploitWeakness_C_OnExecute, CallFunc_OnExecute_ReturnValue) == 0x0000E1, "Member 'GC_Mentat_ExploitWeakness_C_OnExecute::CallFunc_OnExecute_ReturnValue' has a wrong offset!");

}

