#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WeaponStatus

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function W_WeaponStatus.W_WeaponStatus_C.UpdateFavoriteWeaponVisibility
// 0x0006 (0x0006 - 0x0000)
struct W_WeaponStatus_C_UpdateFavoriteWeaponVisibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_UpdateFavoriteWeaponVisibility) == 0x000001, "Wrong alignment on W_WeaponStatus_C_UpdateFavoriteWeaponVisibility");
static_assert(sizeof(W_WeaponStatus_C_UpdateFavoriteWeaponVisibility) == 0x000006, "Wrong size on W_WeaponStatus_C_UpdateFavoriteWeaponVisibility");
static_assert(offsetof(W_WeaponStatus_C_UpdateFavoriteWeaponVisibility, Temp_bool_Variable) == 0x000000, "Member 'W_WeaponStatus_C_UpdateFavoriteWeaponVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_UpdateFavoriteWeaponVisibility, Temp_byte_Variable) == 0x000001, "Member 'W_WeaponStatus_C_UpdateFavoriteWeaponVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_UpdateFavoriteWeaponVisibility, Temp_byte_Variable_1) == 0x000002, "Member 'W_WeaponStatus_C_UpdateFavoriteWeaponVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_UpdateFavoriteWeaponVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'W_WeaponStatus_C_UpdateFavoriteWeaponVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_UpdateFavoriteWeaponVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'W_WeaponStatus_C_UpdateFavoriteWeaponVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_UpdateFavoriteWeaponVisibility, K2Node_Select_Default) == 0x000005, "Member 'W_WeaponStatus_C_UpdateFavoriteWeaponVisibility::K2Node_Select_Default' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.TryUpdateVisibility
// 0x0030 (0x0030 - 0x0000)
struct W_WeaponStatus_C_TryUpdateVisibility final
{
public:
	struct FGameplayTag                           NewState;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_TryUpdateVisibility) == 0x000008, "Wrong alignment on W_WeaponStatus_C_TryUpdateVisibility");
static_assert(sizeof(W_WeaponStatus_C_TryUpdateVisibility) == 0x000030, "Wrong size on W_WeaponStatus_C_TryUpdateVisibility");
static_assert(offsetof(W_WeaponStatus_C_TryUpdateVisibility, NewState) == 0x000000, "Member 'W_WeaponStatus_C_TryUpdateVisibility::NewState' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_TryUpdateVisibility, CallFunc_HasTag_ReturnValue) == 0x000008, "Member 'W_WeaponStatus_C_TryUpdateVisibility::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_TryUpdateVisibility, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'W_WeaponStatus_C_TryUpdateVisibility::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_TryUpdateVisibility, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'W_WeaponStatus_C_TryUpdateVisibility::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_TryUpdateVisibility, CallFunc_PlayAnimation_ReturnValue_1) == 0x000028, "Member 'W_WeaponStatus_C_TryUpdateVisibility::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.OnWeaponChanged
// 0x0018 (0x0018 - 0x0000)
struct W_WeaponStatus_C_OnWeaponChanged final
{
public:
	class FText                                   InFriendlyName;                                    // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_WeaponStatus_C_OnWeaponChanged) == 0x000008, "Wrong alignment on W_WeaponStatus_C_OnWeaponChanged");
static_assert(sizeof(W_WeaponStatus_C_OnWeaponChanged) == 0x000018, "Wrong size on W_WeaponStatus_C_OnWeaponChanged");
static_assert(offsetof(W_WeaponStatus_C_OnWeaponChanged, InFriendlyName) == 0x000000, "Member 'W_WeaponStatus_C_OnWeaponChanged::InFriendlyName' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.OnVehicleTurretSet
// 0x0008 (0x0008 - 0x0000)
struct W_WeaponStatus_C_OnVehicleTurretSet final
{
public:
	class ADuneVehicleTurret*                     InVehicleTurret;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_OnVehicleTurretSet) == 0x000008, "Wrong alignment on W_WeaponStatus_C_OnVehicleTurretSet");
static_assert(sizeof(W_WeaponStatus_C_OnVehicleTurretSet) == 0x000008, "Wrong size on W_WeaponStatus_C_OnVehicleTurretSet");
static_assert(offsetof(W_WeaponStatus_C_OnVehicleTurretSet, InVehicleTurret) == 0x000000, "Member 'W_WeaponStatus_C_OnVehicleTurretSet::InVehicleTurret' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.OnVehicleTurretRemoved
// 0x0008 (0x0008 - 0x0000)
struct W_WeaponStatus_C_OnVehicleTurretRemoved final
{
public:
	class ADuneVehicleTurret*                     InVehicleTurret;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_OnVehicleTurretRemoved) == 0x000008, "Wrong alignment on W_WeaponStatus_C_OnVehicleTurretRemoved");
static_assert(sizeof(W_WeaponStatus_C_OnVehicleTurretRemoved) == 0x000008, "Wrong size on W_WeaponStatus_C_OnVehicleTurretRemoved");
static_assert(offsetof(W_WeaponStatus_C_OnVehicleTurretRemoved, InVehicleTurret) == 0x000000, "Member 'W_WeaponStatus_C_OnVehicleTurretRemoved::InVehicleTurret' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.OnReserveAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct W_WeaponStatus_C_OnReserveAmmoChanged final
{
public:
	int32                                         ReserveAmmo;                                       // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_OnReserveAmmoChanged) == 0x000004, "Wrong alignment on W_WeaponStatus_C_OnReserveAmmoChanged");
static_assert(sizeof(W_WeaponStatus_C_OnReserveAmmoChanged) == 0x000004, "Wrong size on W_WeaponStatus_C_OnReserveAmmoChanged");
static_assert(offsetof(W_WeaponStatus_C_OnReserveAmmoChanged, ReserveAmmo) == 0x000000, "Member 'W_WeaponStatus_C_OnReserveAmmoChanged::ReserveAmmo' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.OnMaxAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct W_WeaponStatus_C_OnMaxAmmoChanged final
{
public:
	int32                                         InMaxAmmo;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_OnMaxAmmoChanged) == 0x000004, "Wrong alignment on W_WeaponStatus_C_OnMaxAmmoChanged");
static_assert(sizeof(W_WeaponStatus_C_OnMaxAmmoChanged) == 0x000004, "Wrong size on W_WeaponStatus_C_OnMaxAmmoChanged");
static_assert(offsetof(W_WeaponStatus_C_OnMaxAmmoChanged, InMaxAmmo) == 0x000000, "Member 'W_WeaponStatus_C_OnMaxAmmoChanged::InMaxAmmo' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.OnHotbarVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct W_WeaponStatus_C_OnHotbarVisibilityChanged final
{
public:
	bool                                          bIsHotbarVisible;                                  // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_OnHotbarVisibilityChanged) == 0x000001, "Wrong alignment on W_WeaponStatus_C_OnHotbarVisibilityChanged");
static_assert(sizeof(W_WeaponStatus_C_OnHotbarVisibilityChanged) == 0x000001, "Wrong size on W_WeaponStatus_C_OnHotbarVisibilityChanged");
static_assert(offsetof(W_WeaponStatus_C_OnHotbarVisibilityChanged, bIsHotbarVisible) == 0x000000, "Member 'W_WeaponStatus_C_OnHotbarVisibilityChanged::bIsHotbarVisible' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.OnFavoriteWeaponAdded
// 0x0030 (0x0030 - 0x0000)
struct W_WeaponStatus_C_OnFavoriteWeaponAdded final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_OnFavoriteWeaponAdded) == 0x000008, "Wrong alignment on W_WeaponStatus_C_OnFavoriteWeaponAdded");
static_assert(sizeof(W_WeaponStatus_C_OnFavoriteWeaponAdded) == 0x000030, "Wrong size on W_WeaponStatus_C_OnFavoriteWeaponAdded");
static_assert(offsetof(W_WeaponStatus_C_OnFavoriteWeaponAdded, Icon) == 0x000000, "Member 'W_WeaponStatus_C_OnFavoriteWeaponAdded::Icon' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.OnCharacterStateChanged
// 0x0010 (0x0010 - 0x0000)
struct W_WeaponStatus_C_OnCharacterStateChanged final
{
public:
	struct FGameplayTag                           PreviousCharacterState;                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           NewCharacterState;                                 // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_OnCharacterStateChanged) == 0x000004, "Wrong alignment on W_WeaponStatus_C_OnCharacterStateChanged");
static_assert(sizeof(W_WeaponStatus_C_OnCharacterStateChanged) == 0x000010, "Wrong size on W_WeaponStatus_C_OnCharacterStateChanged");
static_assert(offsetof(W_WeaponStatus_C_OnCharacterStateChanged, PreviousCharacterState) == 0x000000, "Member 'W_WeaponStatus_C_OnCharacterStateChanged::PreviousCharacterState' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_OnCharacterStateChanged, NewCharacterState) == 0x000008, "Member 'W_WeaponStatus_C_OnCharacterStateChanged::NewCharacterState' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.OnAnimationFinished
// 0x0008 (0x0008 - 0x0000)
struct W_WeaponStatus_C_OnAnimationFinished final
{
public:
	const class UWidgetAnimation*                 Animation;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_OnAnimationFinished) == 0x000008, "Wrong alignment on W_WeaponStatus_C_OnAnimationFinished");
static_assert(sizeof(W_WeaponStatus_C_OnAnimationFinished) == 0x000008, "Wrong size on W_WeaponStatus_C_OnAnimationFinished");
static_assert(offsetof(W_WeaponStatus_C_OnAnimationFinished, Animation) == 0x000000, "Member 'W_WeaponStatus_C_OnAnimationFinished::Animation' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.OnAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct W_WeaponStatus_C_OnAmmoChanged final
{
public:
	int32                                         InAmmo;                                            // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_OnAmmoChanged) == 0x000004, "Wrong alignment on W_WeaponStatus_C_OnAmmoChanged");
static_assert(sizeof(W_WeaponStatus_C_OnAmmoChanged) == 0x000004, "Wrong size on W_WeaponStatus_C_OnAmmoChanged");
static_assert(offsetof(W_WeaponStatus_C_OnAmmoChanged, InAmmo) == 0x000000, "Member 'W_WeaponStatus_C_OnAmmoChanged::InAmmo' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.Get_m_AmmoCurrent_ColorAndOpacity
// 0x0014 (0x0014 - 0x0000)
struct W_WeaponStatus_C_Get_m_AmmoCurrent_ColorAndOpacity final
{
public:
	struct FSlateColor                            ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(W_WeaponStatus_C_Get_m_AmmoCurrent_ColorAndOpacity) == 0x000004, "Wrong alignment on W_WeaponStatus_C_Get_m_AmmoCurrent_ColorAndOpacity");
static_assert(sizeof(W_WeaponStatus_C_Get_m_AmmoCurrent_ColorAndOpacity) == 0x000014, "Wrong size on W_WeaponStatus_C_Get_m_AmmoCurrent_ColorAndOpacity");
static_assert(offsetof(W_WeaponStatus_C_Get_m_AmmoCurrent_ColorAndOpacity, ReturnValue) == 0x000000, "Member 'W_WeaponStatus_C_Get_m_AmmoCurrent_ColorAndOpacity::ReturnValue' has a wrong offset!");

// Function W_WeaponStatus.W_WeaponStatus_C.ExecuteUbergraph_W_WeaponStatus
// 0x0108 (0x0108 - 0x0000)
struct W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InFriendlyName;                       // 0x0008(0x0018)(ConstParm)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_PreviousCharacterState;               // 0x0024(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_NewCharacterState;                    // 0x002C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_GameplayTag_ReturnValue;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              K2Node_Event_Icon;                                 // 0x0038(0x0030)(ConstParm, UObjectWrapper, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InAmmo;                               // 0x006C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDesignTime_ReturnValue;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InMaxAmmo;                            // 0x0074(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_3;              // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_4;              // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsHotbarVisible;                     // 0x00D8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DB[0x5];                                       // 0x00DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneVehicleTurret*                     K2Node_Event_InVehicleTurret_1;                    // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADuneVehicleTurret*                     K2Node_Event_InVehicleTurret;                      // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_ReserveAmmo;                          // 0x00F4(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidgetAnimation*                 K2Node_Event_Animation;                            // 0x0100(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus) == 0x000008, "Wrong alignment on W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus");
static_assert(sizeof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus) == 0x000108, "Wrong size on W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, EntryPoint) == 0x000000, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_InFriendlyName) == 0x000008, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_InFriendlyName' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, Temp_byte_Variable) == 0x000020, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_PreviousCharacterState) == 0x000024, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_PreviousCharacterState' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_NewCharacterState) == 0x00002C, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_NewCharacterState' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_NotEqual_GameplayTag_ReturnValue) == 0x000034, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_NotEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_Icon) == 0x000038, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_Icon' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, Temp_byte_Variable_1) == 0x000068, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_InAmmo) == 0x00006C, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_InAmmo' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_IsDesignTime_ReturnValue) == 0x000070, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_IsDesignTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_Not_PreBool_ReturnValue) == 0x000071, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_InMaxAmmo) == 0x000074, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_InMaxAmmo' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_BooleanAND_ReturnValue) == 0x000078, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000080, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000088, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000090, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000098, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, Temp_bool_Variable) == 0x0000A1, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_Greater_IntInt_ReturnValue) == 0x0000A2, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0000A3, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_PlayAnimation_ReturnValue) == 0x0000A8, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_PlayAnimation_ReturnValue_1) == 0x0000B0, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_PlayAnimation_ReturnValue_2) == 0x0000B8, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x0000C0, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x0000C4, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_PlayAnimation_ReturnValue_3) == 0x0000C8, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_PlayAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, CallFunc_PlayAnimation_ReturnValue_4) == 0x0000D0, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::CallFunc_PlayAnimation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_bIsHotbarVisible) == 0x0000D8, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_bIsHotbarVisible' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Select_Default) == 0x0000D9, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, Temp_byte_Variable_2) == 0x0000DA, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_InVehicleTurret_1) == 0x0000E0, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_InVehicleTurret_1' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_InVehicleTurret) == 0x0000E8, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_InVehicleTurret' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, Temp_byte_Variable_3) == 0x0000F0, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_ReserveAmmo) == 0x0000F4, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_ReserveAmmo' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, Temp_bool_Variable_1) == 0x0000F8, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Select_Default_1) == 0x0000F9, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus, K2Node_Event_Animation) == 0x000100, "Member 'W_WeaponStatus_C_ExecuteUbergraph_W_WeaponStatus::K2Node_Event_Animation' has a wrong offset!");

}

