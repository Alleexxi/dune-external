#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SK_CIGC_LM_Treads_CtrlRig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// RigVMMemoryStorageGeneratorClass SK_CIGC_LM_Treads_CtrlRig.RigVMMemory_Work
// 0x1750 (0x1780 - 0x0030)
class SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___CollectionLoop_Item;                  // 0x0030(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_Result;   // 0x0040(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_Rotator__IO; // 0x0060(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_OffsetTransform__IO; // 0x0080(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_CachedIndex;   // 0x00E0(0x0010)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___CollectionLoop_BlockToRun;            // 0x00F0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKeyCollection               RigVMModel___RigUnit_CollectionItems_Collection;   // 0x00F8(0x0010)(Edit, EditConst, NonTransactional, HasGetValueTypeHash)
	int32                                         RigVMModel___CollectionLoop_Index;                 // 0x0108(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___CollectionLoop_Count;                 // 0x010C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___CollectionLoop_Ratio;                 // 0x0110(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___CollectionLoop_1_Item;                // 0x0114(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_1_Result; // 0x0120(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO; // 0x0140(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO; // 0x0160(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_1_CachedIndex; // 0x01C0(0x0010)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___CollectionLoop_1_BlockToRun;          // 0x01D0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKeyCollection               RigVMModel___RigUnit_CollectionItems_1_Collection; // 0x01D8(0x0010)(Edit, EditConst, NonTransactional, HasGetValueTypeHash)
	int32                                         RigVMModel___CollectionLoop_1_Index;               // 0x01E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___CollectionLoop_1_Count;               // 0x01EC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___CollectionLoop_1_Ratio;               // 0x01F0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0xC];                                      // 0x01F4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_Result;     // 0x0200(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_4_4_Result;               // 0x0220(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Result;              // 0x0224(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_2_Result;               // 0x0228(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionToRotator_Result;       // 0x0230(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___AimBoneMath_Result;                   // 0x0250(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_5_Transform;     // 0x02B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_5_CachedIndex;   // 0x0310(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___MathVectorAdd_Result;                 // 0x0320(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_4_Transform;     // 0x0340(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_4_CachedIndex;   // 0x03A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___MathVectorAdd_A;                      // 0x03B0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_B__IO;                  // 0x03C8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__IO;              // 0x03E0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_PrimaryCachedSpace;       // 0x0428(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_SecondaryCachedSpace;     // 0x0438(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_bIsInitialized;           // 0x0448(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_458[0x8];                                      // 0x0458(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_Value;        // 0x0460(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_2_A;                    // 0x0480(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionToRotator_2_Result;     // 0x0488(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_2_Result;                 // 0x04A0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_5_1_Transform;   // 0x0500(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_5_1_CachedIndex; // 0x0560(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___MathVectorAdd_2_Result;               // 0x0570(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_588[0x8];                                      // 0x0588(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_4_1_Transform;   // 0x0590(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_4_1_CachedIndex; // 0x05F0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___MathVectorAdd_2_A;                    // 0x0600(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_B__IO;                // 0x0618(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_2_Primary__IO;            // 0x0630(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_PrimaryCachedSpace;     // 0x0678(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_SecondaryCachedSpace;   // 0x0688(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_2_bIsInitialized;         // 0x0698(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_6A8[0x8];                                      // 0x06A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_2_Value;      // 0x06B0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_2_B;                    // 0x06D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_4_4_Buffer;               // 0x06D8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_4_4_LastInsertIndex;      // 0x06E8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__IO; // 0x06F8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         RigVMModel___KalmanFloat_4_Result;                 // 0x0710(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_2_Result;            // 0x0714(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_Result;                 // 0x0718(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_A;                      // 0x071C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_B;                      // 0x0720(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_724[0x4];                                      // 0x0724(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_4_Buffer;                 // 0x0728(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_4_LastInsertIndex;        // 0x0738(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_748[0x8];                                      // 0x0748(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_4_OffsetTransform__IO; // 0x0750(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_4_CachedIndex; // 0x07B0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_Result;   // 0x07C0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_4_4_1_Result;             // 0x07E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_1_Result;            // 0x07E4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_2_1_Result;             // 0x07E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EC[0x4];                                      // 0x07EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_Result;     // 0x07F0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_808[0x8];                                      // 0x0808(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___AimBoneMath_1_Result;                 // 0x0810(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_6_Transform;     // 0x0870(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_6_CachedIndex;   // 0x08D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___MathVectorAdd_1_Result;               // 0x08E0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F8[0x8];                                      // 0x08F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_7_Transform;     // 0x0900(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_7_CachedIndex;   // 0x0960(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___MathVectorAdd_1_A;                    // 0x0970(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_1_B__IO;                // 0x0988(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_Primary__IO;            // 0x09A0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_PrimaryCachedSpace;     // 0x09E8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_SecondaryCachedSpace;   // 0x09F8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_1_bIsInitialized;         // 0x0A08(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_A18[0x8];                                      // 0x0A18(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_Value;      // 0x0A20(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_2_1_A;                  // 0x0A40(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A44[0x4];                                      // 0x0A44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionToRotator_3_Result;     // 0x0A48(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_1_1_Result;               // 0x0A60(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_6_1_Transform;   // 0x0AC0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_6_1_CachedIndex; // 0x0B20(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___MathVectorAdd_1_1_Result;             // 0x0B30(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B48[0x8];                                      // 0x0B48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_7_1_Transform;   // 0x0B50(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_7_1_CachedIndex; // 0x0BB0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___MathVectorAdd_1_1_A;                  // 0x0BC0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_1_1_B__IO;              // 0x0BD8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_1_Primary__IO;          // 0x0BF0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_1_PrimaryCachedSpace;   // 0x0C38(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_1_SecondaryCachedSpace; // 0x0C48(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_1_1_bIsInitialized;       // 0x0C58(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_C68[0x8];                                      // 0x0C68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_3_Value;      // 0x0C70(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_2_1_B;                  // 0x0C90(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C94[0x4];                                      // 0x0C94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_4_4_1_Buffer;             // 0x0C98(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_4_4_1_LastInsertIndex;    // 0x0CA8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_Rotator__IO; // 0x0CB8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         RigVMModel___KalmanFloat_4_1_Result;               // 0x0CD0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_3_Result;            // 0x0CD4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_1_Result;               // 0x0CD8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_1_A;                    // 0x0CDC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_1_B;                    // 0x0CE0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE4[0x4];                                      // 0x0CE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_4_1_Buffer;               // 0x0CE8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_4_1_LastInsertIndex;      // 0x0CF8(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_D08[0x8];                                      // 0x0D08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_5_OffsetTransform__IO; // 0x0D10(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_5_CachedIndex; // 0x0D70(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___MathFloatClamp_Result;                // 0x0D80(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_Result;                  // 0x0D84(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D88[0x8];                                      // 0x0D88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO; // 0x0D90(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex; // 0x0DF0(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___MathFloatClamp_1_Result;              // 0x0E00(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_1_Result;                // 0x0E04(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E08[0x8];                                      // 0x0E08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_1_OffsetTransform__IO; // 0x0E10(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_1_CachedIndex; // 0x0E70(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___MathFloatClamp_2_Result;              // 0x0E80(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E84[0xC];                                      // 0x0E84(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_2_OffsetTransform__IO; // 0x0E90(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_2_CachedIndex; // 0x0EF0(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___MathFloatClamp_3_Result;              // 0x0F00(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F04[0xC];                                      // 0x0F04(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_3_OffsetTransform__IO; // 0x0F10(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_3_CachedIndex; // 0x0F70(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x0F80(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x0FE0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_Primary__IO;                  // 0x0FF0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_CachedItem;                   // 0x1038(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_PrimaryCachedSpace;           // 0x1048(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_SecondaryCachedSpace;         // 0x1058(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_bIsInitialized;               // 0x1068(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_1078[0x8];                                     // 0x1078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x1080(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x10E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_Primary__IO;                // 0x10F0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_CachedItem;                 // 0x1138(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_PrimaryCachedSpace;         // 0x1148(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_SecondaryCachedSpace;       // 0x1158(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_1_bIsInitialized;             // 0x1168(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_1178[0x8];                                     // 0x1178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_Transform;     // 0x1180(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_CachedIndex;   // 0x11E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_2_Primary__IO;                // 0x11F0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_2_CachedItem;                 // 0x1238(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_2_PrimaryCachedSpace;         // 0x1248(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_2_SecondaryCachedSpace;       // 0x1258(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_2_bIsInitialized;             // 0x1268(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_1278[0x8];                                     // 0x1278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_1_Transform;   // 0x1280(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_1_CachedIndex; // 0x12E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_3_Primary__IO;                // 0x12F0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_3_CachedItem;                 // 0x1338(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_3_PrimaryCachedSpace;         // 0x1348(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_3_SecondaryCachedSpace;       // 0x1358(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_3_bIsInitialized;             // 0x1368(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_1378[0x8];                                     // 0x1378(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_Transform;     // 0x1380(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_CachedIndex;   // 0x13E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_4_Primary__IO;                // 0x13F0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_4_CachedItem;                 // 0x1438(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_4_PrimaryCachedSpace;         // 0x1448(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_4_SecondaryCachedSpace;       // 0x1458(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_4_bIsInitialized;             // 0x1468(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_1478[0x8];                                     // 0x1478(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_2_Transform;   // 0x1480(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_2_CachedIndex; // 0x14E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_1_Primary__IO;              // 0x14F0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_CachedItem;               // 0x1538(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_PrimaryCachedSpace;       // 0x1548(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_SecondaryCachedSpace;     // 0x1558(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_1_1_bIsInitialized;           // 0x1568(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_1578[0x8];                                     // 0x1578(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_1_Transform;   // 0x1580(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_1_CachedIndex; // 0x15E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_2_1_Primary__IO;              // 0x15F0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_2_1_CachedItem;               // 0x1638(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_2_1_PrimaryCachedSpace;       // 0x1648(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_2_1_SecondaryCachedSpace;     // 0x1658(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_2_1_bIsInitialized;           // 0x1668(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_1678[0x8];                                     // 0x1678(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_1_1_Transform; // 0x1680(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_1_1_CachedIndex; // 0x16E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_3_1_Primary__IO;              // 0x16F0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_3_1_CachedItem;               // 0x1738(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_3_1_PrimaryCachedSpace;       // 0x1748(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_3_1_SecondaryCachedSpace;     // 0x1758(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_3_1_bIsInitialized;           // 0x1768(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_CIGC_LM_Treads_CtrlRig.RigVMMemory_Work", true>();
	}
	static class SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work) == 0x001780, "Wrong size on SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_Item) == 0x000030, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_Item' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_Result) == 0x000040, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_Rotator__IO) == 0x000060, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_OffsetTransform__IO) == 0x000080, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_CachedIndex) == 0x0000E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_BlockToRun) == 0x0000F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_CollectionItems_Collection) == 0x0000F8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_CollectionItems_Collection' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_Index) == 0x000108, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_Index' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_Count) == 0x00010C, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_Count' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_Ratio) == 0x000110, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_Ratio' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_1_Item) == 0x000114, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_1_Item' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_Result) == 0x000120, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO) == 0x000140, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO) == 0x000160, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_CachedIndex) == 0x0001C0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_1_BlockToRun) == 0x0001D0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_1_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_CollectionItems_1_Collection) == 0x0001D8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_CollectionItems_1_Collection' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_1_Index) == 0x0001E8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_1_Index' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_1_Count) == 0x0001EC, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_1_Count' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_1_Ratio) == 0x0001F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_1_Ratio' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Result) == 0x000200, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_4_Result) == 0x000220, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_4_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_Result) == 0x000224, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_2_Result) == 0x000228, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Result) == 0x000230, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Result) == 0x000250, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_5_Transform) == 0x0002B0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_5_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_5_CachedIndex) == 0x000310, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_5_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_Result) == 0x000320, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_Transform) == 0x000340, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_CachedIndex) == 0x0003A0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_A) == 0x0003B0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_A' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_B__IO) == 0x0003C8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_B__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Primary__IO) == 0x0003E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_PrimaryCachedSpace) == 0x000428, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_SecondaryCachedSpace) == 0x000438, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_bIsInitialized) == 0x000448, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Value) == 0x000460, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Value' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_2_A) == 0x000480, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_2_A' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_Result) == 0x000488, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_Result) == 0x0004A0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_5_1_Transform) == 0x000500, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_5_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_5_1_CachedIndex) == 0x000560, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_5_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_2_Result) == 0x000570, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_1_Transform) == 0x000590, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_1_CachedIndex) == 0x0005F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_2_A) == 0x000600, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_2_A' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_2_B__IO) == 0x000618, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_2_B__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_Primary__IO) == 0x000630, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_PrimaryCachedSpace) == 0x000678, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_SecondaryCachedSpace) == 0x000688, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_bIsInitialized) == 0x000698, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_Value) == 0x0006B0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_Value' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_2_B) == 0x0006D0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_2_B' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_4_Buffer) == 0x0006D8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_4_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_4_LastInsertIndex) == 0x0006E8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_4_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Rotator__IO) == 0x0006F8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_Result) == 0x000710, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_2_Result) == 0x000714, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_Result) == 0x000718, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_A) == 0x00071C, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_A' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_B) == 0x000720, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_B' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_Buffer) == 0x000728, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_LastInsertIndex) == 0x000738, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_4_OffsetTransform__IO) == 0x000750, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_4_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_4_CachedIndex) == 0x0007B0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Result) == 0x0007C0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_4_1_Result) == 0x0007E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_4_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_1_Result) == 0x0007E4, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_2_1_Result) == 0x0007E8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Result) == 0x0007F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_Result) == 0x000810, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_Transform) == 0x000870, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_CachedIndex) == 0x0008D0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_1_Result) == 0x0008E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_7_Transform) == 0x000900, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_7_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_7_CachedIndex) == 0x000960, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_7_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_1_A) == 0x000970, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_1_A' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_1_B__IO) == 0x000988, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_1_B__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_Primary__IO) == 0x0009A0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_PrimaryCachedSpace) == 0x0009E8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_SecondaryCachedSpace) == 0x0009F8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_bIsInitialized) == 0x000A08, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Value) == 0x000A20, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_2_1_A) == 0x000A40, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_2_1_A' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_Result) == 0x000A48, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_Result) == 0x000A60, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_1_Transform) == 0x000AC0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_1_CachedIndex) == 0x000B20, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_1_1_Result) == 0x000B30, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_7_1_Transform) == 0x000B50, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_7_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_7_1_CachedIndex) == 0x000BB0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_7_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_1_1_A) == 0x000BC0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_1_1_A' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathVectorAdd_1_1_B__IO) == 0x000BD8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathVectorAdd_1_1_B__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_Primary__IO) == 0x000BF0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_PrimaryCachedSpace) == 0x000C38, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_SecondaryCachedSpace) == 0x000C48, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_bIsInitialized) == 0x000C58, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_Value) == 0x000C70, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_Value' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_2_1_B) == 0x000C90, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_2_1_B' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_4_1_Buffer) == 0x000C98, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_4_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_4_1_LastInsertIndex) == 0x000CA8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_4_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Rotator__IO) == 0x000CB8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_1_Result) == 0x000CD0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_3_Result) == 0x000CD4, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_3_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_1_Result) == 0x000CD8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_1_A) == 0x000CDC, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_1_A' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatLerp_1_B) == 0x000CE0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatLerp_1_B' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_1_Buffer) == 0x000CE8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_1_LastInsertIndex) == 0x000CF8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_5_OffsetTransform__IO) == 0x000D10, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_5_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_5_CachedIndex) == 0x000D70, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_5_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Result) == 0x000D80, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatMul_Result) == 0x000D84, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatMul_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO) == 0x000D90, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex) == 0x000DF0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_Result) == 0x000E00, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatMul_1_Result) == 0x000E04, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatMul_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_1_OffsetTransform__IO) == 0x000E10, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_1_CachedIndex) == 0x000E70, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_Result) == 0x000E80, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_2_OffsetTransform__IO) == 0x000E90, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_2_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_2_CachedIndex) == 0x000EF0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_Result) == 0x000F00, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_Result' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_3_OffsetTransform__IO) == 0x000F10, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_3_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_3_CachedIndex) == 0x000F70, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x000F80, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x000FE0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_Primary__IO) == 0x000FF0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_CachedItem) == 0x001038, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_PrimaryCachedSpace) == 0x001048, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_SecondaryCachedSpace) == 0x001058, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_bIsInitialized) == 0x001068, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_Transform) == 0x001080, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_CachedIndex) == 0x0010E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_Primary__IO) == 0x0010F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_CachedItem) == 0x001138, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_PrimaryCachedSpace) == 0x001148, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_SecondaryCachedSpace) == 0x001158, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_bIsInitialized) == 0x001168, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_Transform) == 0x001180, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_CachedIndex) == 0x0011E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_Primary__IO) == 0x0011F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_CachedItem) == 0x001238, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_PrimaryCachedSpace) == 0x001248, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_SecondaryCachedSpace) == 0x001258, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_bIsInitialized) == 0x001268, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_1_Transform) == 0x001280, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_1_CachedIndex) == 0x0012E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_Primary__IO) == 0x0012F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_CachedItem) == 0x001338, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_PrimaryCachedSpace) == 0x001348, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_SecondaryCachedSpace) == 0x001358, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_bIsInitialized) == 0x001368, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_Transform) == 0x001380, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_CachedIndex) == 0x0013E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_Primary__IO) == 0x0013F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_CachedItem) == 0x001438, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_PrimaryCachedSpace) == 0x001448, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_SecondaryCachedSpace) == 0x001458, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_bIsInitialized) == 0x001468, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_2_Transform) == 0x001480, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_2_CachedIndex) == 0x0014E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_Primary__IO) == 0x0014F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_CachedItem) == 0x001538, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_PrimaryCachedSpace) == 0x001548, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_SecondaryCachedSpace) == 0x001558, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_bIsInitialized) == 0x001568, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_1_Transform) == 0x001580, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_1_CachedIndex) == 0x0015E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_1_Primary__IO) == 0x0015F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_1_CachedItem) == 0x001638, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_1_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_1_PrimaryCachedSpace) == 0x001648, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_1_SecondaryCachedSpace) == 0x001658, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_1_bIsInitialized) == 0x001668, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_1_1_Transform) == 0x001680, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_1_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_1_1_CachedIndex) == 0x0016E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_1_Primary__IO) == 0x0016F0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_1_CachedItem) == 0x001738, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_1_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_1_PrimaryCachedSpace) == 0x001748, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_1_SecondaryCachedSpace) == 0x001758, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_1_bIsInitialized) == 0x001768, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_1_bIsInitialized' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_CIGC_LM_Treads_CtrlRig.RigVMMemory_Literal
// 0x0320 (0x0350 - 0x0030)
class SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FTransform                             RigVMModel___OffsetTransformForItem_OffsetTransform__Const; // 0x0030(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_Rotator__Const; // 0x0090(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         RigVMModel___OffsetTransformForItem_Weight__Const; // 0x00A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const; // 0x00AC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_CollectionItems_Items__Const; // 0x00B0(0x0010)(Edit, EditConst, NonTransactional)
	bool                                          RigVMModel___RigUnit_CollectionItems_bAllowDuplicates__Const; // 0x00C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_CollectionItems_1_Items__Const; // 0x00C8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_4_Item__Const; // 0x00D8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___RigUnit_GetTransform_5_Space__Const;  // 0x00E4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__Const;           // 0x00E8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_4_Item__Const;   // 0x0130(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathVectorAdd_B__Const;               // 0x0140(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Secondary__Const;         // 0x0158(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimBone_DebugSettings         RigVMModel___AimBoneMath_DebugSettings__Const;     // 0x01A0(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_2_Primary__Const;         // 0x0210(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_4_1_Item__Const; // 0x0258(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatLerp_2_T__Const;             // 0x0264(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Minimum__Const;      // 0x0268(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Maximum__Const;      // 0x026C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___KalmanFloat_4_4_BufferSize__Const;    // 0x0270(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_5_Item__Const; // 0x0274(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_7_Item__Const;   // 0x0280(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_7_1_Item__Const; // 0x028C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_Item__Const; // 0x0298(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_B__Const;                // 0x02A4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Minimum__Const;        // 0x02A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Maximum__Const;        // 0x02AC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_1_Item__Const; // 0x02B0(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_2_Item__Const; // 0x02BC(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_3_Item__Const; // 0x02C8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_Item__Const;                  // 0x02D4(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_Secondary__Const;             // 0x02E0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigElementKey                         RigVMModel___AimItem_1_Item__Const;                // 0x0328(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_2_Item__Const;                // 0x0334(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_3_Item__Const;                // 0x0340(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_CIGC_LM_Treads_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal) == 0x000350, "Wrong size on SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_OffsetTransform__Const) == 0x000030, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathQuaternionFromRotator_2_Rotator__Const) == 0x000090, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathQuaternionFromRotator_2_Rotator__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_Weight__Const) == 0x0000A8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_Weight__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const) == 0x0000AC, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_CollectionItems_Items__Const) == 0x0000B0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_CollectionItems_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_CollectionItems_bAllowDuplicates__Const) == 0x0000C0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_CollectionItems_bAllowDuplicates__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_CollectionItems_1_Items__Const) == 0x0000C8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_CollectionItems_1_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_4_Item__Const) == 0x0000D8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_4_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_5_Space__Const) == 0x0000E4, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_5_Space__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Primary__Const) == 0x0000E8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_4_Item__Const) == 0x000130, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_4_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathVectorAdd_B__Const) == 0x000140, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathVectorAdd_B__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Secondary__Const) == 0x000158, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_DebugSettings__Const) == 0x0001A0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_2_Primary__Const) == 0x000210, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_2_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_4_1_Item__Const) == 0x000258, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_4_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatLerp_2_T__Const) == 0x000264, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatLerp_2_T__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_4_Minimum__Const) == 0x000268, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_4_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_4_Maximum__Const) == 0x00026C, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_4_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_4_4_BufferSize__Const) == 0x000270, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_4_4_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_5_Item__Const) == 0x000274, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_5_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_7_Item__Const) == 0x000280, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_7_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_7_1_Item__Const) == 0x00028C, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_7_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_Item__Const) == 0x000298, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatMul_B__Const) == 0x0002A4, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatMul_B__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Minimum__Const) == 0x0002A8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Maximum__Const) == 0x0002AC, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_1_Item__Const) == 0x0002B0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_2_Item__Const) == 0x0002BC, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_3_Item__Const) == 0x0002C8, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_3_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimItem_Item__Const) == 0x0002D4, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimItem_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimItem_Secondary__Const) == 0x0002E0, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimItem_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimItem_1_Item__Const) == 0x000328, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimItem_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimItem_2_Item__Const) == 0x000334, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimItem_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimItem_3_Item__Const) == 0x000340, "Member 'SK_CIGC_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimItem_3_Item__Const' has a wrong offset!");

// ControlRigBlueprintGeneratedClass SK_CIGC_LM_Treads_CtrlRig.SK_CIGC_LM_Treads_CtrlRig_C
// 0x0030 (0x0430 - 0x0400)
class USK_CIGC_LM_Treads_CtrlRig_C final : public UControlRig
{
public:
	double                                        Offset_Front_L;                                    // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Offset_Front_R;                                    // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Offset_Rear_L;                                     // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Offset_Rear_R;                                     // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotation_L;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotation_R;                                   // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SK_CIGC_LM_Treads_CtrlRig_C">();
	}
	static class USK_CIGC_LM_Treads_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USK_CIGC_LM_Treads_CtrlRig_C>();
	}
};
static_assert(alignof(USK_CIGC_LM_Treads_CtrlRig_C) == 0x000008, "Wrong alignment on USK_CIGC_LM_Treads_CtrlRig_C");
static_assert(sizeof(USK_CIGC_LM_Treads_CtrlRig_C) == 0x000430, "Wrong size on USK_CIGC_LM_Treads_CtrlRig_C");
static_assert(offsetof(USK_CIGC_LM_Treads_CtrlRig_C, Offset_Front_L) == 0x000400, "Member 'USK_CIGC_LM_Treads_CtrlRig_C::Offset_Front_L' has a wrong offset!");
static_assert(offsetof(USK_CIGC_LM_Treads_CtrlRig_C, Offset_Front_R) == 0x000408, "Member 'USK_CIGC_LM_Treads_CtrlRig_C::Offset_Front_R' has a wrong offset!");
static_assert(offsetof(USK_CIGC_LM_Treads_CtrlRig_C, Offset_Rear_L) == 0x000410, "Member 'USK_CIGC_LM_Treads_CtrlRig_C::Offset_Rear_L' has a wrong offset!");
static_assert(offsetof(USK_CIGC_LM_Treads_CtrlRig_C, Offset_Rear_R) == 0x000418, "Member 'USK_CIGC_LM_Treads_CtrlRig_C::Offset_Rear_R' has a wrong offset!");
static_assert(offsetof(USK_CIGC_LM_Treads_CtrlRig_C, WheelRotation_L) == 0x000420, "Member 'USK_CIGC_LM_Treads_CtrlRig_C::WheelRotation_L' has a wrong offset!");
static_assert(offsetof(USK_CIGC_LM_Treads_CtrlRig_C, WheelRotation_R) == 0x000428, "Member 'USK_CIGC_LM_Treads_CtrlRig_C::WheelRotation_R' has a wrong offset!");

}

