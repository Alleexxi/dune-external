#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AltarCenser_Enter1

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "BP_AltarCenser_Enter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AltarCenser_Enter1.BP_AltarCenser_Enter1_C
// 0x0080 (0x0480 - 0x0400)
class ABP_AltarCenser_Enter1_C final : public ABP_AltarCenser_Enter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AltarCenser_Enter1_C;            // 0x0400(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      TeleportToLocation;                                // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ADunePlayerCharacter*                   InteractingCharacter;                              // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ChallengeRoomBusy;                                 // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ChallengeRoomTimer;                                // 0x0420(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ChallengeTimeoutTimer;                             // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FECommuninetMessageId                  AltarError_Busy;                                   // 0x042C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FECommuninetMessageId                  AltarError_WrongJourney;                           // 0x0434(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          AltarIntroSequence;                                // 0x0440(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 HideAndImmobilizeEffect;                           // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HideAndImmobilizeAbility;                          // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void StartChallenge();
	void Set_Cinematic_Mode(bool CinematicMode);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void PlayCommuninetMessage(class ADuneCharacter* DunePlayerCharacter, const struct FECommuninetMessageId& MessageId);
	void m_OnSequenceStopped_058EDB4448ABF1C39AA75D8BB4E91984(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceStarted_058EDB4448ABF1C39AA75D8BB4E91984(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceLoadingFailed_C0071C1344360F90986D13AA3CE2C7DE(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceLoaded_C0071C1344360F90986D13AA3CE2C7DE(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceInterrupted_058EDB4448ABF1C39AA75D8BB4E91984(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceFailed_058EDB4448ABF1C39AA75D8BB4E91984(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void FinishedCinematic(class UObject* OwningObject);
	void ExecuteUbergraph_BP_AltarCenser_Enter1(int32 EntryPoint);
	void CinematicFinished(class ADunePlayerController* PlayerController);
	void CanInteractWithAltar(class ADuneCharacter* DuneCharacter, bool* CanInteract_0);
	void BndEvt__BP_AltarCenser_Enter1_SphereSequenceLoader_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_AltarCenser_Enter1_SphereSequenceLoader_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_AltarCenser_Enter1_InteractableBase_K2Node_ComponentBoundEvent_0_NotifyOnInteract__DelegateSignature(class ADuneCharacter* DuneCharacter, const class UInteraction* Interaction);
	void BeginCinematic(class ALevelSequenceActor* LevelSequenceActor, class UObject* CallingObject, bool FreezeLevelStreaming);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AltarCenser_Enter1_C">();
	}
	static class ABP_AltarCenser_Enter1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AltarCenser_Enter1_C>();
	}
};
static_assert(alignof(ABP_AltarCenser_Enter1_C) == 0x000008, "Wrong alignment on ABP_AltarCenser_Enter1_C");
static_assert(sizeof(ABP_AltarCenser_Enter1_C) == 0x000480, "Wrong size on ABP_AltarCenser_Enter1_C");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, UberGraphFrame_BP_AltarCenser_Enter1_C) == 0x000400, "Member 'ABP_AltarCenser_Enter1_C::UberGraphFrame_BP_AltarCenser_Enter1_C' has a wrong offset!");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, TeleportToLocation) == 0x000408, "Member 'ABP_AltarCenser_Enter1_C::TeleportToLocation' has a wrong offset!");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, InteractingCharacter) == 0x000410, "Member 'ABP_AltarCenser_Enter1_C::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, ChallengeRoomBusy) == 0x000418, "Member 'ABP_AltarCenser_Enter1_C::ChallengeRoomBusy' has a wrong offset!");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, ChallengeRoomTimer) == 0x000420, "Member 'ABP_AltarCenser_Enter1_C::ChallengeRoomTimer' has a wrong offset!");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, ChallengeTimeoutTimer) == 0x000428, "Member 'ABP_AltarCenser_Enter1_C::ChallengeTimeoutTimer' has a wrong offset!");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, AltarError_Busy) == 0x00042C, "Member 'ABP_AltarCenser_Enter1_C::AltarError_Busy' has a wrong offset!");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, AltarError_WrongJourney) == 0x000434, "Member 'ABP_AltarCenser_Enter1_C::AltarError_WrongJourney' has a wrong offset!");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, AltarIntroSequence) == 0x000440, "Member 'ABP_AltarCenser_Enter1_C::AltarIntroSequence' has a wrong offset!");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, HideAndImmobilizeEffect) == 0x000470, "Member 'ABP_AltarCenser_Enter1_C::HideAndImmobilizeEffect' has a wrong offset!");
static_assert(offsetof(ABP_AltarCenser_Enter1_C, HideAndImmobilizeAbility) == 0x000478, "Member 'ABP_AltarCenser_Enter1_C::HideAndImmobilizeAbility' has a wrong offset!");

}

