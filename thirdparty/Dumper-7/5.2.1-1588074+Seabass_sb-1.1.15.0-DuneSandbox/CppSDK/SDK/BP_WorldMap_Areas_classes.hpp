#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WorldMap_Areas

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "EWorldMapAreaType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WorldMap_Areas.BP_WorldMap_Areas_C
// 0x0040 (0x0390 - 0x0350)
class ABP_WorldMap_Areas_C : public AActor
{
public:
	class USceneComponent*                        AreaPlanes;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URuntimeVirtualTexture*                 VirtualTexture;                                    // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_WorldMapAreasData_C*                AreasData;                                         // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Margin;                                            // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WorldSizeMult;                                     // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Materials;                                         // 0x0380(0x0010)(Edit, BlueprintVisible)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WorldMap_Areas_C">();
	}
	static class ABP_WorldMap_Areas_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WorldMap_Areas_C>();
	}
};
static_assert(alignof(ABP_WorldMap_Areas_C) == 0x000008, "Wrong alignment on ABP_WorldMap_Areas_C");
static_assert(sizeof(ABP_WorldMap_Areas_C) == 0x000390, "Wrong size on ABP_WorldMap_Areas_C");
static_assert(offsetof(ABP_WorldMap_Areas_C, AreaPlanes) == 0x000350, "Member 'ABP_WorldMap_Areas_C::AreaPlanes' has a wrong offset!");
static_assert(offsetof(ABP_WorldMap_Areas_C, Scene) == 0x000358, "Member 'ABP_WorldMap_Areas_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_WorldMap_Areas_C, VirtualTexture) == 0x000360, "Member 'ABP_WorldMap_Areas_C::VirtualTexture' has a wrong offset!");
static_assert(offsetof(ABP_WorldMap_Areas_C, AreasData) == 0x000368, "Member 'ABP_WorldMap_Areas_C::AreasData' has a wrong offset!");
static_assert(offsetof(ABP_WorldMap_Areas_C, Margin) == 0x000370, "Member 'ABP_WorldMap_Areas_C::Margin' has a wrong offset!");
static_assert(offsetof(ABP_WorldMap_Areas_C, WorldSizeMult) == 0x000378, "Member 'ABP_WorldMap_Areas_C::WorldSizeMult' has a wrong offset!");
static_assert(offsetof(ABP_WorldMap_Areas_C, Materials) == 0x000380, "Member 'ABP_WorldMap_Areas_C::Materials' has a wrong offset!");

}

