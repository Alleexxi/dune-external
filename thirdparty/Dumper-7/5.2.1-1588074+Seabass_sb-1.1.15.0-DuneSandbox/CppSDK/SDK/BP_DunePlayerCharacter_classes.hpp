#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DunePlayerCharacter

#include "Basic.hpp"

#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DunePlayerCharacter.BP_DunePlayerCharacter_C
// 0x01D0 (0x2E30 - 0x2C60)
class ABP_DunePlayerCharacter_C final : public ADunePlayerCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2C60(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPlayerToolIndicatorComponent*          PlayerToolIndicator;                               // 0x2C68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DuneCharacterStateInteractionComponent_C* BP_DuneCharacterStateInteractionComponent;   // 0x2C70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UP2pTradingComponent*                   P2pTrading;                                        // 0x2C78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMercunaObstacleComponent*              MercunaObstacle;                                   // 0x2C80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SpiceHandHarvestingComponent_C*     BP_SpiceHandHarvestingComponent;                   // 0x2C88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PersonalPostProcess;                               // 0x2C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CinematicHandler_Component_C*       BP_R4_CinematicHandler_Component;                  // 0x2C98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x2CA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrouching;                                       // 0x2CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumping;                                         // 0x2CA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Climbing_;                                      // 0x2CAA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wall_Thick;                                        // 0x2CAB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Climb;                                         // 0x2CAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Climb;                                      // 0x2CAD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CAE[0x2];                                     // 0x2CAE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Wall_Location;                                     // 0x2CB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Wall_Normal;                                       // 0x2CC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Wall_Hight;                                        // 0x2CE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Back_Wall_Hight;                                   // 0x2CF8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Shield;                                        // 0x2D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ShieldStencilDepth;                                // 0x2D18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1C[0x4];                                     // 0x2D1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 PlayerMeshes;                                      // 0x2D20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UMaterialInstanceDynamic*               ShieldMaterial;                                    // 0x2D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         Suspensor;                                         // 0x2D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFileMediaSource*                       MediaSource;                                       // 0x2D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SuspensorDistance;                                 // 0x2D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      SuspensorSystem;                                   // 0x2D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SuspensorShrinkStart;                              // 0x2D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NoiseEmissionRate;                                 // 0x2D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CrouchingNoiseReduction;                           // 0x2D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              NiagaraSystems;                                    // 0x2D70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Particles_Per_Volume_Unit;                         // 0x2D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Parameter_Name;                                    // 0x2D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeightedBlendables                    Post_Process_Materials;                            // 0x2D90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UStaticMeshComponent*                   GodModeVisualIndicator;                            // 0x2DA0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterCollection*           PlayerPositionMPC;                                 // 0x2DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Shield_Broken;                                     // 0x2DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Shield_Hold;                                       // 0x2DC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Shield_Hold_Over;                                  // 0x2DD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ULevelStreamingDynamic*                 CinematicLevelInstance;                            // 0x2DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SpiceDreamWindupTime;                              // 0x2DE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DEC[0x4];                                     // 0x2DEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioComponent*                      SpiceDreamWindupAudio;                             // 0x2DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   SpiceAddictionSettings;                            // 0x2DF8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FETutorialEnum                         Shielded_Enemies_Tutorial_Id;                      // 0x2E28(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void UpdatePlayerPositionMPC();
	void ToggleCinematicMode(bool Value);
	void ServerSetPlayerScale(const struct FVector& NewScale);
	void ReceiveBeginPlay();
	void Play_Crash_Site_Montage(class UAnimMontage* MontageToPlay, double PlayRate, class FName SectionName);
	void OnRemoveSpawnedMine(class AProjectileBase* Mine);
	void OnNotifyEnd_98A9562C40262B5D1F6484BCD532B686(class FName NotifyName);
	void OnNotifyBegin_98A9562C40262B5D1F6484BCD532B686(class FName NotifyName);
	void OnLoaded_E51B21B7406EBBADB3EC3F81C6098E3C(TSubclassOf<class UObject> Loaded);
	void OnInterrupted_98A9562C40262B5D1F6484BCD532B686(class FName NotifyName);
	void OnGodModeChanged();
	void OnCompleted_98A9562C40262B5D1F6484BCD532B686(class FName NotifyName);
	void OnCharacterNoticedDelegate_Event(const class ADuneNpcCharacter* ObserverNpc);
	void OnBlendOut_98A9562C40262B5D1F6484BCD532B686(class FName NotifyName);
	void MulticastSetPlayerScale(const struct FVector& NewScale);
	void InpActEvt_Proto_EventUI_K2Node_InputActionEvent_0(const struct FKey& Key);
	void ExecuteUbergraph_BP_DunePlayerCharacter(int32 EntryPoint);
	void Destroy_Shield_Box(class UProceduralMeshComponent* Shield_Box);
	void CalculateLoudness(double* Loudness);
	void BP_OnSpiceAddictionStatusChanged(const ESpiceAddictionSystemStatus SystemStatus);
	void BP_OnGameplayEffectApplied(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayEffectSpec& GameplayEffectSpec, const struct FActiveGameplayEffectHandle& ActiveGameplayEffectHandle);
	void BndEvt__BP_DunePlayerCharacter_m_DamageableActorComponent_K2Node_ComponentBoundEvent_0_HandleShieldEnergyBrokenSignature__DelegateSignature();
	void AfterWindowOpenedEvent(class UDuneWindowWidget* WindowWidget);
	void UserConstructionScript();

	float CalculateXPTierDiffMultiplier(const float EventTier, const float PlayerTier) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DunePlayerCharacter_C">();
	}
	static class ABP_DunePlayerCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DunePlayerCharacter_C>();
	}
};
static_assert(alignof(ABP_DunePlayerCharacter_C) == 0x000010, "Wrong alignment on ABP_DunePlayerCharacter_C");
static_assert(sizeof(ABP_DunePlayerCharacter_C) == 0x002E30, "Wrong size on ABP_DunePlayerCharacter_C");
static_assert(offsetof(ABP_DunePlayerCharacter_C, UberGraphFrame) == 0x002C60, "Member 'ABP_DunePlayerCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, PlayerToolIndicator) == 0x002C68, "Member 'ABP_DunePlayerCharacter_C::PlayerToolIndicator' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, BP_DuneCharacterStateInteractionComponent) == 0x002C70, "Member 'ABP_DunePlayerCharacter_C::BP_DuneCharacterStateInteractionComponent' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, P2pTrading) == 0x002C78, "Member 'ABP_DunePlayerCharacter_C::P2pTrading' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, MercunaObstacle) == 0x002C80, "Member 'ABP_DunePlayerCharacter_C::MercunaObstacle' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, BP_SpiceHandHarvestingComponent) == 0x002C88, "Member 'ABP_DunePlayerCharacter_C::BP_SpiceHandHarvestingComponent' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, PersonalPostProcess) == 0x002C90, "Member 'ABP_DunePlayerCharacter_C::PersonalPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, BP_R4_CinematicHandler_Component) == 0x002C98, "Member 'ABP_DunePlayerCharacter_C::BP_R4_CinematicHandler_Component' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Arrow1) == 0x002CA0, "Member 'ABP_DunePlayerCharacter_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, IsCrouching) == 0x002CA8, "Member 'ABP_DunePlayerCharacter_C::IsCrouching' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, IsJumping) == 0x002CA9, "Member 'ABP_DunePlayerCharacter_C::IsJumping' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Is_Climbing_) == 0x002CAA, "Member 'ABP_DunePlayerCharacter_C::Is_Climbing_' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Wall_Thick) == 0x002CAB, "Member 'ABP_DunePlayerCharacter_C::Wall_Thick' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Can_Climb) == 0x002CAC, "Member 'ABP_DunePlayerCharacter_C::Can_Climb' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Should_Climb) == 0x002CAD, "Member 'ABP_DunePlayerCharacter_C::Should_Climb' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Wall_Location) == 0x002CB0, "Member 'ABP_DunePlayerCharacter_C::Wall_Location' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Wall_Normal) == 0x002CC8, "Member 'ABP_DunePlayerCharacter_C::Wall_Normal' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Wall_Hight) == 0x002CE0, "Member 'ABP_DunePlayerCharacter_C::Wall_Hight' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Back_Wall_Hight) == 0x002CF8, "Member 'ABP_DunePlayerCharacter_C::Back_Wall_Hight' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, DMI_Shield) == 0x002D10, "Member 'ABP_DunePlayerCharacter_C::DMI_Shield' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, ShieldStencilDepth) == 0x002D18, "Member 'ABP_DunePlayerCharacter_C::ShieldStencilDepth' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, PlayerMeshes) == 0x002D20, "Member 'ABP_DunePlayerCharacter_C::PlayerMeshes' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, ShieldMaterial) == 0x002D30, "Member 'ABP_DunePlayerCharacter_C::ShieldMaterial' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Suspensor) == 0x002D38, "Member 'ABP_DunePlayerCharacter_C::Suspensor' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, MediaSource) == 0x002D40, "Member 'ABP_DunePlayerCharacter_C::MediaSource' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, SuspensorDistance) == 0x002D48, "Member 'ABP_DunePlayerCharacter_C::SuspensorDistance' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, SuspensorSystem) == 0x002D50, "Member 'ABP_DunePlayerCharacter_C::SuspensorSystem' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, SuspensorShrinkStart) == 0x002D58, "Member 'ABP_DunePlayerCharacter_C::SuspensorShrinkStart' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, NoiseEmissionRate) == 0x002D60, "Member 'ABP_DunePlayerCharacter_C::NoiseEmissionRate' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, CrouchingNoiseReduction) == 0x002D68, "Member 'ABP_DunePlayerCharacter_C::CrouchingNoiseReduction' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, NiagaraSystems) == 0x002D70, "Member 'ABP_DunePlayerCharacter_C::NiagaraSystems' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Particles_Per_Volume_Unit) == 0x002D80, "Member 'ABP_DunePlayerCharacter_C::Particles_Per_Volume_Unit' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Parameter_Name) == 0x002D88, "Member 'ABP_DunePlayerCharacter_C::Parameter_Name' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Post_Process_Materials) == 0x002D90, "Member 'ABP_DunePlayerCharacter_C::Post_Process_Materials' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, GodModeVisualIndicator) == 0x002DA0, "Member 'ABP_DunePlayerCharacter_C::GodModeVisualIndicator' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, PlayerPositionMPC) == 0x002DA8, "Member 'ABP_DunePlayerCharacter_C::PlayerPositionMPC' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Shield_Broken) == 0x002DB0, "Member 'ABP_DunePlayerCharacter_C::Shield_Broken' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Shield_Hold) == 0x002DC0, "Member 'ABP_DunePlayerCharacter_C::Shield_Hold' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Shield_Hold_Over) == 0x002DD0, "Member 'ABP_DunePlayerCharacter_C::Shield_Hold_Over' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, CinematicLevelInstance) == 0x002DE0, "Member 'ABP_DunePlayerCharacter_C::CinematicLevelInstance' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, SpiceDreamWindupTime) == 0x002DE8, "Member 'ABP_DunePlayerCharacter_C::SpiceDreamWindupTime' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, SpiceDreamWindupAudio) == 0x002DF0, "Member 'ABP_DunePlayerCharacter_C::SpiceDreamWindupAudio' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, SpiceAddictionSettings) == 0x002DF8, "Member 'ABP_DunePlayerCharacter_C::SpiceAddictionSettings' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerCharacter_C, Shielded_Enemies_Tutorial_Id) == 0x002E28, "Member 'ABP_DunePlayerCharacter_C::Shielded_Enemies_Tutorial_Id' has a wrong offset!");

}

