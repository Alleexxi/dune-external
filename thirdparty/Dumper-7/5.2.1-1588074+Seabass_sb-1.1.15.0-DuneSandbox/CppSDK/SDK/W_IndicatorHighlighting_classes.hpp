#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_IndicatorHighlighting

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_IndicatorHighlighting.W_IndicatorHighlighting_C
// 0x0068 (0x02F0 - 0x0288)
class UW_IndicatorHighlighting_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       m_NewGlow;                                         // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UDuneImage*                             GlowImg;                                           // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IconJourney;                                       // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             IMGIndicatorNew;                                   // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              Desired_Size;                                      // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Glow_;                                      // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            GlowColorDisabled;                                 // 0x02C4(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            GlowColorEnabled;                                  // 0x02D8(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Set_Disabled(bool IsDisabled_);
	void PreConstruct(bool IsDesignTime);
	void ExecuteUbergraph_W_IndicatorHighlighting(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_IndicatorHighlighting_C">();
	}
	static class UW_IndicatorHighlighting_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_IndicatorHighlighting_C>();
	}
};
static_assert(alignof(UW_IndicatorHighlighting_C) == 0x000008, "Wrong alignment on UW_IndicatorHighlighting_C");
static_assert(sizeof(UW_IndicatorHighlighting_C) == 0x0002F0, "Wrong size on UW_IndicatorHighlighting_C");
static_assert(offsetof(UW_IndicatorHighlighting_C, UberGraphFrame) == 0x000288, "Member 'UW_IndicatorHighlighting_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_IndicatorHighlighting_C, m_NewGlow) == 0x000290, "Member 'UW_IndicatorHighlighting_C::m_NewGlow' has a wrong offset!");
static_assert(offsetof(UW_IndicatorHighlighting_C, GlowImg) == 0x000298, "Member 'UW_IndicatorHighlighting_C::GlowImg' has a wrong offset!");
static_assert(offsetof(UW_IndicatorHighlighting_C, IconJourney) == 0x0002A0, "Member 'UW_IndicatorHighlighting_C::IconJourney' has a wrong offset!");
static_assert(offsetof(UW_IndicatorHighlighting_C, IMGIndicatorNew) == 0x0002A8, "Member 'UW_IndicatorHighlighting_C::IMGIndicatorNew' has a wrong offset!");
static_assert(offsetof(UW_IndicatorHighlighting_C, Desired_Size) == 0x0002B0, "Member 'UW_IndicatorHighlighting_C::Desired_Size' has a wrong offset!");
static_assert(offsetof(UW_IndicatorHighlighting_C, Should_Glow_) == 0x0002C0, "Member 'UW_IndicatorHighlighting_C::Should_Glow_' has a wrong offset!");
static_assert(offsetof(UW_IndicatorHighlighting_C, GlowColorDisabled) == 0x0002C4, "Member 'UW_IndicatorHighlighting_C::GlowColorDisabled' has a wrong offset!");
static_assert(offsetof(UW_IndicatorHighlighting_C, GlowColorEnabled) == 0x0002D8, "Member 'UW_IndicatorHighlighting_C::GlowColorEnabled' has a wrong offset!");

}

