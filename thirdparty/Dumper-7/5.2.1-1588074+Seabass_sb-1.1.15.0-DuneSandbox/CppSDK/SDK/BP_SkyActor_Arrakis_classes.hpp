#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkyActor_Arrakis

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SkyActor_Arrakis.BP_SkyActor_Arrakis_C
// 0x0118 (0x0800 - 0x06E8)
class ABP_SkyActor_Arrakis_C final : public ASkyActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_Starfield;                                      // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Nebula_1;                                          // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_FrigatesAcrossSky;                              // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Arvon_Moon_1;                                      // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Krelin_Moon_2;                                     // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Krelin_Anchor;                                     // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_Heighliner_Choam;                               // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AuroraPlane;                                       // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Auroras;                                           // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Krelin_Orbit_Yaw_80675E984724398D0C62699D940FC42F; // 0x0740(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Krelin_Orbit_Pitch_80675E984724398D0C62699D940FC42F; // 0x0744(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Krelin_Orbit__Direction_80675E984724398D0C62699D940FC42F; // 0x0748(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_749[0x7];                                      // 0x0749(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Krelin_Orbit;                                      // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Krelin_Azimuth;                                    // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SunUpCurve;                                        // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Krelin_Orbital_Period;                             // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SandstormSampleCountCurve;                         // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Sandstorm_Sample_Count_Min_Distance;               // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sandstorm_Sample_Count_Max_Distance;               // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClosestStormOutsideRenderCloudRange;               // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Facing_Storm;                                      // 0x0789(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78A[0x6];                                      // 0x078A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Volume_Cloud_Culling_Angle;                        // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_To_Storm;                                 // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeOfDay24hr;                                     // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AngularCullDistanceCurve;                          // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TempShadowTrace;                                   // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Krelin_Rotation;                                   // 0x07B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B5[0x3];                                      // 0x07B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Krelin_Orbital_Position;                           // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Starfield_Rotation;                                // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C1[0x7];                                      // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Planetary_Latitude;                                // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Planetary_Longitude;                               // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CloudShadowsOnOff;                                 // 0x07D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D9[0x7];                                      // 0x07D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Sun__Sun__Material;                                // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle;                                       // 0x07E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 Function_Name;                                     // 0x07F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void CalculateShadowsState(float* SunShadowAmount, float* MoonShadowAmount);
	void Off();
	void ExecuteUbergraph_BP_SkyActor_Arrakis(int32 EntryPoint);
	void Krelin_Orbit__FinishedFunc();
	void Krelin_Orbit__UpdateFunc();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SetParamsOnTimeChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkyActor_Arrakis_C">();
	}
	static class ABP_SkyActor_Arrakis_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SkyActor_Arrakis_C>();
	}
};
static_assert(alignof(ABP_SkyActor_Arrakis_C) == 0x000008, "Wrong alignment on ABP_SkyActor_Arrakis_C");
static_assert(sizeof(ABP_SkyActor_Arrakis_C) == 0x000800, "Wrong size on ABP_SkyActor_Arrakis_C");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, UberGraphFrame) == 0x0006E8, "Member 'ABP_SkyActor_Arrakis_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, NS_Starfield) == 0x0006F0, "Member 'ABP_SkyActor_Arrakis_C::NS_Starfield' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Nebula_1) == 0x0006F8, "Member 'ABP_SkyActor_Arrakis_C::Nebula_1' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, NS_FrigatesAcrossSky) == 0x000700, "Member 'ABP_SkyActor_Arrakis_C::NS_FrigatesAcrossSky' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Arvon_Moon_1) == 0x000708, "Member 'ABP_SkyActor_Arrakis_C::Arvon_Moon_1' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Krelin_Moon_2) == 0x000710, "Member 'ABP_SkyActor_Arrakis_C::Krelin_Moon_2' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Krelin_Anchor) == 0x000718, "Member 'ABP_SkyActor_Arrakis_C::Krelin_Anchor' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, BP_Heighliner_Choam) == 0x000720, "Member 'ABP_SkyActor_Arrakis_C::BP_Heighliner_Choam' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, AuroraPlane) == 0x000728, "Member 'ABP_SkyActor_Arrakis_C::AuroraPlane' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Auroras) == 0x000730, "Member 'ABP_SkyActor_Arrakis_C::Auroras' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, VolumetricCloud) == 0x000738, "Member 'ABP_SkyActor_Arrakis_C::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Krelin_Orbit_Yaw_80675E984724398D0C62699D940FC42F) == 0x000740, "Member 'ABP_SkyActor_Arrakis_C::Krelin_Orbit_Yaw_80675E984724398D0C62699D940FC42F' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Krelin_Orbit_Pitch_80675E984724398D0C62699D940FC42F) == 0x000744, "Member 'ABP_SkyActor_Arrakis_C::Krelin_Orbit_Pitch_80675E984724398D0C62699D940FC42F' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Krelin_Orbit__Direction_80675E984724398D0C62699D940FC42F) == 0x000748, "Member 'ABP_SkyActor_Arrakis_C::Krelin_Orbit__Direction_80675E984724398D0C62699D940FC42F' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Krelin_Orbit) == 0x000750, "Member 'ABP_SkyActor_Arrakis_C::Krelin_Orbit' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Krelin_Azimuth) == 0x000758, "Member 'ABP_SkyActor_Arrakis_C::Krelin_Azimuth' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, SunUpCurve) == 0x000760, "Member 'ABP_SkyActor_Arrakis_C::SunUpCurve' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Krelin_Orbital_Period) == 0x000768, "Member 'ABP_SkyActor_Arrakis_C::Krelin_Orbital_Period' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, SandstormSampleCountCurve) == 0x000770, "Member 'ABP_SkyActor_Arrakis_C::SandstormSampleCountCurve' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Sandstorm_Sample_Count_Min_Distance) == 0x000778, "Member 'ABP_SkyActor_Arrakis_C::Sandstorm_Sample_Count_Min_Distance' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Sandstorm_Sample_Count_Max_Distance) == 0x000780, "Member 'ABP_SkyActor_Arrakis_C::Sandstorm_Sample_Count_Max_Distance' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, ClosestStormOutsideRenderCloudRange) == 0x000788, "Member 'ABP_SkyActor_Arrakis_C::ClosestStormOutsideRenderCloudRange' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Facing_Storm) == 0x000789, "Member 'ABP_SkyActor_Arrakis_C::Facing_Storm' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Volume_Cloud_Culling_Angle) == 0x000790, "Member 'ABP_SkyActor_Arrakis_C::Volume_Cloud_Culling_Angle' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Distance_To_Storm) == 0x000798, "Member 'ABP_SkyActor_Arrakis_C::Distance_To_Storm' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, TimeOfDay24hr) == 0x0007A0, "Member 'ABP_SkyActor_Arrakis_C::TimeOfDay24hr' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, AngularCullDistanceCurve) == 0x0007A8, "Member 'ABP_SkyActor_Arrakis_C::AngularCullDistanceCurve' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, TempShadowTrace) == 0x0007B0, "Member 'ABP_SkyActor_Arrakis_C::TempShadowTrace' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Krelin_Rotation) == 0x0007B4, "Member 'ABP_SkyActor_Arrakis_C::Krelin_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Krelin_Orbital_Position) == 0x0007B8, "Member 'ABP_SkyActor_Arrakis_C::Krelin_Orbital_Position' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Starfield_Rotation) == 0x0007C0, "Member 'ABP_SkyActor_Arrakis_C::Starfield_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Planetary_Latitude) == 0x0007C8, "Member 'ABP_SkyActor_Arrakis_C::Planetary_Latitude' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Planetary_Longitude) == 0x0007D0, "Member 'ABP_SkyActor_Arrakis_C::Planetary_Longitude' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, CloudShadowsOnOff) == 0x0007D8, "Member 'ABP_SkyActor_Arrakis_C::CloudShadowsOnOff' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Sun__Sun__Material) == 0x0007E0, "Member 'ABP_SkyActor_Arrakis_C::Sun__Sun__Material' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, TimerHandle) == 0x0007E8, "Member 'ABP_SkyActor_Arrakis_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_SkyActor_Arrakis_C, Function_Name) == 0x0007F0, "Member 'ABP_SkyActor_Arrakis_C::Function_Name' has a wrong offset!");

}

