#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Vehicle_Ground

#include "Basic.hpp"

#include "DuneSandbox_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPFL_Vehicle_Ground.BPFL_Vehicle_Ground_C.LoadUtilityModulePlaceholder
// 0x0020 (0x0020 - 0x0000)
struct BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder final
{
public:
	class ADuneVehicle*                           OwnerVehicle;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EVehicleModuleType                            ModuleType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasModuleType_ReturnValue;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder) == 0x000008, "Wrong alignment on BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder");
static_assert(sizeof(BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder) == 0x000020, "Wrong size on BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder");
static_assert(offsetof(BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder, OwnerVehicle) == 0x000000, "Member 'BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder::OwnerVehicle' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder, ModuleType) == 0x000008, "Member 'BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder::ModuleType' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder, __WorldContext) == 0x000010, "Member 'BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder, CallFunc_HasModuleType_ReturnValue) == 0x000019, "Member 'BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder::CallFunc_HasModuleType_ReturnValue' has a wrong offset!");

// Function BPFL_Vehicle_Ground.BPFL_Vehicle_Ground_C.GetWheelRotation
// 0x01C8 (0x01C8 - 0x0000)
struct BPFL_Vehicle_Ground_C_GetWheelRotation final
{
public:
	struct FVehicleEffectsDriverComponent         VehicleEffectsDriverComponent;                     // 0x0000(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	double                                        SpeedMultiplier;                                   // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         WheelRotationFL;                                   // 0x00E8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelRotationFR;                                   // 0x00EC(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelRotationRL;                                   // 0x00F0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WheelRotationRR;                                   // 0x00F8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRR;                                           // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelRL;                                           // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelFR;                                           // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelFL;                                           // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVehicleModuleType                            Temp_byte_Variable;                                // 0x0114(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVehicleModuleType                            Temp_byte_Variable_1;                              // 0x0115(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Map_Find_Value;                           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Map_Find_Value_1;                         // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVehicleModuleType                            Temp_byte_Variable_2;                              // 0x0125(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVehicleModuleType                            Temp_byte_Variable_3;                              // 0x0126(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_127[0x1];                                      // 0x0127(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Map_Find_Value_2;                         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Map_Find_Value_3;                         // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeUnclamped_ReturnValue;            // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeUnclamped_ReturnValue_1;          // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeUnclamped_ReturnValue_2;          // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeUnclamped_ReturnValue_3;          // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2;   // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3;   // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_WheelRL_ImplicitCast;           // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_WheelFR_ImplicitCast;           // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_WheelFL_ImplicitCast;           // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Ground_C_GetWheelRotation) == 0x000008, "Wrong alignment on BPFL_Vehicle_Ground_C_GetWheelRotation");
static_assert(sizeof(BPFL_Vehicle_Ground_C_GetWheelRotation) == 0x0001C8, "Wrong size on BPFL_Vehicle_Ground_C_GetWheelRotation");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, VehicleEffectsDriverComponent) == 0x000000, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::VehicleEffectsDriverComponent' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, SpeedMultiplier) == 0x0000D8, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, __WorldContext) == 0x0000E0, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, WheelRotationFL) == 0x0000E8, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::WheelRotationFL' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, WheelRotationFR) == 0x0000EC, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::WheelRotationFR' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, WheelRotationRL) == 0x0000F0, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::WheelRotationRL' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, WheelRotationRR) == 0x0000F8, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::WheelRotationRR' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, WheelRR) == 0x000100, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::WheelRR' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, WheelRL) == 0x000108, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::WheelRL' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, WheelFR) == 0x00010C, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::WheelFR' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, WheelFL) == 0x000110, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::WheelFL' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, Temp_byte_Variable) == 0x000114, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, Temp_byte_Variable_1) == 0x000115, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Map_Find_Value) == 0x000118, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Map_Find_ReturnValue) == 0x00011C, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Map_Find_Value_1) == 0x000120, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Map_Find_ReturnValue_1) == 0x000124, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, Temp_byte_Variable_2) == 0x000125, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, Temp_byte_Variable_3) == 0x000126, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Map_Find_Value_2) == 0x000128, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Map_Find_ReturnValue_2) == 0x00012C, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Map_Find_Value_3) == 0x000130, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Map_Find_ReturnValue_3) == 0x000134, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000138, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_MapRangeUnclamped_ReturnValue) == 0x000140, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_MapRangeUnclamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000148, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000150, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_MapRangeUnclamped_ReturnValue_1) == 0x000158, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_MapRangeUnclamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000160, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000168, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_MapRangeUnclamped_ReturnValue_2) == 0x000170, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_MapRangeUnclamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000178, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x000180, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_MapRangeUnclamped_ReturnValue_3) == 0x000188, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_MapRangeUnclamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x000190, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000198, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x0001A0, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2) == 0x0001A8, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3) == 0x0001B0, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, K2Node_VariableSet_WheelRL_ImplicitCast) == 0x0001B8, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::K2Node_VariableSet_WheelRL_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, K2Node_VariableSet_WheelFR_ImplicitCast) == 0x0001BC, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::K2Node_VariableSet_WheelFR_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetWheelRotation, K2Node_VariableSet_WheelFL_ImplicitCast) == 0x0001C0, "Member 'BPFL_Vehicle_Ground_C_GetWheelRotation::K2Node_VariableSet_WheelFL_ImplicitCast' has a wrong offset!");

// Function BPFL_Vehicle_Ground.BPFL_Vehicle_Ground_C.GetQuicksandSinkDepth
// 0x0028 (0x0028 - 0x0000)
struct BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth final
{
public:
	class ADuneWheeledVehicle*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSinkDepth;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentSinkDepth_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_CurrentSinkDepth_ImplicitCast; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth) == 0x000008, "Wrong alignment on BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth");
static_assert(sizeof(BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth) == 0x000028, "Wrong size on BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth, Target) == 0x000000, "Member 'BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth::Target' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth, __WorldContext) == 0x000008, "Member 'BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth, CurrentSinkDepth) == 0x000010, "Member 'BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth::CurrentSinkDepth' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth, CallFunc_GetCurrentSinkDepth_ReturnValue) == 0x000018, "Member 'BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth::CallFunc_GetCurrentSinkDepth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth, K2Node_FunctionResult_CurrentSinkDepth_ImplicitCast) == 0x000020, "Member 'BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth::K2Node_FunctionResult_CurrentSinkDepth_ImplicitCast' has a wrong offset!");

// Function BPFL_Vehicle_Ground.BPFL_Vehicle_Ground_C.GetGroundVehicleVariables
// 0x0138 (0x0138 - 0x0000)
struct BPFL_Vehicle_Ground_C_GetGroundVehicleVariables final
{
public:
	TScriptInterface<class IPosseseablePawnInterface> OwnerVehicle;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVehicleEffectsDriverComponent         VehicleEffectsDriverComponent;                     // 0x0010(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Forward;                                           // 0x00F0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Steering;                                          // 0x00F8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalSpeed;                                   // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalDirection;                               // 0x0104(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPossessed;                                      // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInAir;                                          // 0x0109(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBoosting;                                       // 0x010A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10B[0x5];                                      // 0x010B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneCharacter*                         CallFunc_GetDriverCharacter_ReturnValue;           // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables) == 0x000008, "Wrong alignment on BPFL_Vehicle_Ground_C_GetGroundVehicleVariables");
static_assert(sizeof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables) == 0x000138, "Wrong size on BPFL_Vehicle_Ground_C_GetGroundVehicleVariables");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, OwnerVehicle) == 0x000000, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::OwnerVehicle' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, VehicleEffectsDriverComponent) == 0x000010, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::VehicleEffectsDriverComponent' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, __WorldContext) == 0x0000E8, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, Forward) == 0x0000F0, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::Forward' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, Steering) == 0x0000F8, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::Steering' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, HorizontalSpeed) == 0x000100, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::HorizontalSpeed' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, HorizontalDirection) == 0x000104, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::HorizontalDirection' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, bIsPossessed) == 0x000108, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::bIsPossessed' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, bIsInAir) == 0x000109, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::bIsInAir' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, bIsBoosting) == 0x00010A, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::bIsBoosting' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, CallFunc_GetDriverCharacter_ReturnValue) == 0x000110, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::CallFunc_GetDriverCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, CallFunc_IsValid_ReturnValue) == 0x000118, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, CallFunc_Not_PreBool_ReturnValue) == 0x000119, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, CallFunc_BreakVector_X) == 0x000120, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, CallFunc_BreakVector_Y) == 0x000128, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_GetGroundVehicleVariables, CallFunc_BreakVector_Z) == 0x000130, "Member 'BPFL_Vehicle_Ground_C_GetGroundVehicleVariables::CallFunc_BreakVector_Z' has a wrong offset!");

// Function BPFL_Vehicle_Ground.BPFL_Vehicle_Ground_C.ControlRigIKSolver
// 0x0138 (0x0138 - 0x0000)
struct BPFL_Vehicle_Ground_C_ControlRigIKSolver final
{
public:
	class UDuneVehicleAnimInstance*               Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        TraceDistance;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TreadSocket;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TreadOffset;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TreadAimTarget;                                    // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TreadRotationTarget;                               // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpdateAsyncGroundTrace_Location;          // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpdateAsyncGroundTrace_Normal;            // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateAsyncGroundTrace_ReturnValue;       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateAsyncGroundTrace_TraceDistance_ImplicitCast; // 0x0130(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Ground_C_ControlRigIKSolver) == 0x000008, "Wrong alignment on BPFL_Vehicle_Ground_C_ControlRigIKSolver");
static_assert(sizeof(BPFL_Vehicle_Ground_C_ControlRigIKSolver) == 0x000138, "Wrong size on BPFL_Vehicle_Ground_C_ControlRigIKSolver");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, Target) == 0x000000, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::Target' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, TraceDistance) == 0x000008, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::TraceDistance' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, TreadSocket) == 0x000010, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::TreadSocket' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, TreadOffset) == 0x000018, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::TreadOffset' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, __WorldContext) == 0x000020, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, TreadAimTarget) == 0x000028, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::TreadAimTarget' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, TreadRotationTarget) == 0x000040, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::TreadRotationTarget' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_GetOwningComponent_ReturnValue) == 0x000058, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_GetUpVector_ReturnValue) == 0x000060, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000080, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_GetSocketLocation_ReturnValue) == 0x000098, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_UpdateAsyncGroundTrace_Location) == 0x0000B0, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_UpdateAsyncGroundTrace_Location' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_UpdateAsyncGroundTrace_Normal) == 0x0000C8, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_UpdateAsyncGroundTrace_Normal' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_UpdateAsyncGroundTrace_ReturnValue) == 0x0000E0, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_UpdateAsyncGroundTrace_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E8, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000100, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000118, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Ground_C_ControlRigIKSolver, CallFunc_UpdateAsyncGroundTrace_TraceDistance_ImplicitCast) == 0x000130, "Member 'BPFL_Vehicle_Ground_C_ControlRigIKSolver::CallFunc_UpdateAsyncGroundTrace_TraceDistance_ImplicitCast' has a wrong offset!");

}

