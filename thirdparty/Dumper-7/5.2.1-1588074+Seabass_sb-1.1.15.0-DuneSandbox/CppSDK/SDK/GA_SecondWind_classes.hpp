#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_SecondWind

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_SecondWind.GA_SecondWind_C
// 0x0028 (0x0540 - 0x0518)
class UGA_SecondWind_C final : public UDuneGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0518(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAbilityTask_WaitDelay*                 End_Ability_Task;                                  // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CachedSecondWindDuration;                          // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedSecondWindDelay;                             // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitDelay*                 Delay_Ability_Task;                                // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void OnFinish_B39BFCEF4D71CD1ECF29F49374E29EEE();
	void OnFinish_01D95A744695C74FA5DB1F988D02A0A0();
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void InitializeStaticProperties(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec);
	void ExecuteUbergraph_GA_SecondWind(int32 EntryPoint);
	void Added_B2EDBC89497D6363206B0E90A706771D();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_SecondWind_C">();
	}
	static class UGA_SecondWind_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_SecondWind_C>();
	}
};
static_assert(alignof(UGA_SecondWind_C) == 0x000008, "Wrong alignment on UGA_SecondWind_C");
static_assert(sizeof(UGA_SecondWind_C) == 0x000540, "Wrong size on UGA_SecondWind_C");
static_assert(offsetof(UGA_SecondWind_C, UberGraphFrame) == 0x000518, "Member 'UGA_SecondWind_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_SecondWind_C, End_Ability_Task) == 0x000520, "Member 'UGA_SecondWind_C::End_Ability_Task' has a wrong offset!");
static_assert(offsetof(UGA_SecondWind_C, CachedSecondWindDuration) == 0x000528, "Member 'UGA_SecondWind_C::CachedSecondWindDuration' has a wrong offset!");
static_assert(offsetof(UGA_SecondWind_C, CachedSecondWindDelay) == 0x000530, "Member 'UGA_SecondWind_C::CachedSecondWindDelay' has a wrong offset!");
static_assert(offsetof(UGA_SecondWind_C, Delay_Ability_Task) == 0x000538, "Member 'UGA_SecondWind_C::Delay_Ability_Task' has a wrong offset!");

}

