#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_EmbelishmentButton

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_EmbelishmentButton.W_EmbelishmentButton_C
// 0x0180 (0x0690 - 0x0510)
class UW_EmbelishmentButton_C final : public UButtonWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0510(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDuneImage*                             Border;                                            // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ButtonLightFill;                                   // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                ButtonSize;                                        // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             Clouds;                                            // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             Fill;                                              // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RingInner;                                         // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RingOuter;                                         // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           Border_Default_Color;                              // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Border_Hovered_Color;                              // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Border_Pressed_Color;                              // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fill_Default_Color;                                // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Hovered;                                        // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_591[0x3];                                      // 0x0591(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Fill_Hovered_Color;                                // 0x0594(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fill_Pressed_Color;                                // 0x05A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEase                                         Pressed_Ease;                                      // 0x05B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEase                                         Hovered_Ease;                                      // 0x05B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B6[0x2];                                      // 0x05B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Ring_Default_Scale_Outer;                          // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Ring_Default_Scale_Inner;                          // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Ring_Hovered_Scale_Outer;                          // 0x05D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Ring_Hovered_Scale_Inner;                          // 0x05E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Ring_Pressed_Scale_Outer;                          // 0x05F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Ring_Pressed_Scale_Inner;                          // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Button_Width;                                      // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hover_Animation_Duration;                          // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pressed_Animation_Duration;                        // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTween*                                 TextColorTweenHover;                               // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Text_Default_Color;                                // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Text_Hovered_Color;                                // 0x0640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            TextStartColor;                                    // 0x0650(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           TextTargetColor;                                   // 0x0664(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_674[0x4];                                      // 0x0674(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTween*                                 TextColorTweenPressed;                             // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Text_Pressed_Color;                                // 0x0680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateTextColor(double ALPHA);
	void Setup_Pressed_Visuals(bool IsPressed);
	void PreConstruct(bool IsDesignTime);
	void OnPressedStateChanged(class UButtonWidget* Widget, bool bNewState);
	void OnHoveredStateChanged(class UButtonWidget* Widget, bool bNewState);
	void Get_Hovered_Color(struct FLinearColor* Border_Color, struct FLinearColor* Fill_Color, struct FLinearColor* Text_Color);
	void ExecuteUbergraph_W_EmbelishmentButton(int32 EntryPoint);
	void Destruct();
	void CREATEDELEGATE_PROXYFUNCTION_1(float Progress);
	void CREATEDELEGATE_PROXYFUNCTION_0(float Progress);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_EmbelishmentButton_C">();
	}
	static class UW_EmbelishmentButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_EmbelishmentButton_C>();
	}
};
static_assert(alignof(UW_EmbelishmentButton_C) == 0x000010, "Wrong alignment on UW_EmbelishmentButton_C");
static_assert(sizeof(UW_EmbelishmentButton_C) == 0x000690, "Wrong size on UW_EmbelishmentButton_C");
static_assert(offsetof(UW_EmbelishmentButton_C, UberGraphFrame) == 0x000510, "Member 'UW_EmbelishmentButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Border) == 0x000518, "Member 'UW_EmbelishmentButton_C::Border' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, ButtonLightFill) == 0x000520, "Member 'UW_EmbelishmentButton_C::ButtonLightFill' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, ButtonSize) == 0x000528, "Member 'UW_EmbelishmentButton_C::ButtonSize' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Clouds) == 0x000530, "Member 'UW_EmbelishmentButton_C::Clouds' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Fill) == 0x000538, "Member 'UW_EmbelishmentButton_C::Fill' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, RingInner) == 0x000540, "Member 'UW_EmbelishmentButton_C::RingInner' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, RingOuter) == 0x000548, "Member 'UW_EmbelishmentButton_C::RingOuter' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Border_Default_Color) == 0x000550, "Member 'UW_EmbelishmentButton_C::Border_Default_Color' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Border_Hovered_Color) == 0x000560, "Member 'UW_EmbelishmentButton_C::Border_Hovered_Color' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Border_Pressed_Color) == 0x000570, "Member 'UW_EmbelishmentButton_C::Border_Pressed_Color' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Fill_Default_Color) == 0x000580, "Member 'UW_EmbelishmentButton_C::Fill_Default_Color' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Is_Hovered) == 0x000590, "Member 'UW_EmbelishmentButton_C::Is_Hovered' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Fill_Hovered_Color) == 0x000594, "Member 'UW_EmbelishmentButton_C::Fill_Hovered_Color' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Fill_Pressed_Color) == 0x0005A4, "Member 'UW_EmbelishmentButton_C::Fill_Pressed_Color' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Pressed_Ease) == 0x0005B4, "Member 'UW_EmbelishmentButton_C::Pressed_Ease' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Hovered_Ease) == 0x0005B5, "Member 'UW_EmbelishmentButton_C::Hovered_Ease' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Ring_Default_Scale_Outer) == 0x0005B8, "Member 'UW_EmbelishmentButton_C::Ring_Default_Scale_Outer' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Ring_Default_Scale_Inner) == 0x0005C8, "Member 'UW_EmbelishmentButton_C::Ring_Default_Scale_Inner' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Ring_Hovered_Scale_Outer) == 0x0005D8, "Member 'UW_EmbelishmentButton_C::Ring_Hovered_Scale_Outer' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Ring_Hovered_Scale_Inner) == 0x0005E8, "Member 'UW_EmbelishmentButton_C::Ring_Hovered_Scale_Inner' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Ring_Pressed_Scale_Outer) == 0x0005F8, "Member 'UW_EmbelishmentButton_C::Ring_Pressed_Scale_Outer' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Ring_Pressed_Scale_Inner) == 0x000608, "Member 'UW_EmbelishmentButton_C::Ring_Pressed_Scale_Inner' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Button_Width) == 0x000618, "Member 'UW_EmbelishmentButton_C::Button_Width' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Hover_Animation_Duration) == 0x000620, "Member 'UW_EmbelishmentButton_C::Hover_Animation_Duration' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Pressed_Animation_Duration) == 0x000624, "Member 'UW_EmbelishmentButton_C::Pressed_Animation_Duration' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, TextColorTweenHover) == 0x000628, "Member 'UW_EmbelishmentButton_C::TextColorTweenHover' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Text_Default_Color) == 0x000630, "Member 'UW_EmbelishmentButton_C::Text_Default_Color' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Text_Hovered_Color) == 0x000640, "Member 'UW_EmbelishmentButton_C::Text_Hovered_Color' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, TextStartColor) == 0x000650, "Member 'UW_EmbelishmentButton_C::TextStartColor' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, TextTargetColor) == 0x000664, "Member 'UW_EmbelishmentButton_C::TextTargetColor' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, TextColorTweenPressed) == 0x000678, "Member 'UW_EmbelishmentButton_C::TextColorTweenPressed' has a wrong offset!");
static_assert(offsetof(UW_EmbelishmentButton_C, Text_Pressed_Color) == 0x000680, "Member 'UW_EmbelishmentButton_C::Text_Pressed_Color' has a wrong offset!");

}

