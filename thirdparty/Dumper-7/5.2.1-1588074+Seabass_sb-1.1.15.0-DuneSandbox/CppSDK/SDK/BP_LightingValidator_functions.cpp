#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightingValidator

#include "Basic.hpp"

#include "BP_LightingValidator_classes.hpp"
#include "BP_LightingValidator_parameters.hpp"


namespace SDK
{

// Function BP_LightingValidator.BP_LightingValidator_C.Append AttenuationRadius Info
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPointLightComponent*             Light_Component                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const class FString&                    String_to_append_to                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          Info                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LightingValidator_C::Append_AttenuationRadius_Info(class AActor* Actor, class UPointLightComponent* Light_Component, const class FString& String_to_append_to, class FString* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingValidator_C", "Append AttenuationRadius Info");

	Params::BP_LightingValidator_C_Append_AttenuationRadius_Info Parms{};

	Parms.Actor = Actor;
	Parms.Light_Component = Light_Component;
	Parms.String_to_append_to = std::move(String_to_append_to);

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);
}


// Function BP_LightingValidator.BP_LightingValidator_C.Append Mobility Info
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ULightComponent*                  Light_Component                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const class FString&                    String_to_append_to                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          Info                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LightingValidator_C::Append_Mobility_Info(class AActor* Actor, class ULightComponent* Light_Component, const class FString& String_to_append_to, class FString* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingValidator_C", "Append Mobility Info");

	Params::BP_LightingValidator_C_Append_Mobility_Info Parms{};

	Parms.Actor = Actor;
	Parms.Light_Component = Light_Component;
	Parms.String_to_append_to = std::move(String_to_append_to);

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);
}


// Function BP_LightingValidator.BP_LightingValidator_C.Append ShadowCasting Info
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ULightComponent*                  Light_Component                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const class FString&                    String_to_append_to                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          Info                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LightingValidator_C::Append_ShadowCasting_Info(class AActor* Actor, class ULightComponent* Light_Component, const class FString& String_to_append_to, class FString* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingValidator_C", "Append ShadowCasting Info");

	Params::BP_LightingValidator_C_Append_ShadowCasting_Info Parms{};

	Parms.Actor = Actor;
	Parms.Light_Component = Light_Component;
	Parms.String_to_append_to = std::move(String_to_append_to);

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);
}


// Function BP_LightingValidator.BP_LightingValidator_C.BP_GatherWorldData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_LightingValidator_C::BP_GatherWorldData(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingValidator_C", "BP_GatherWorldData");

	Params::BP_LightingValidator_C_BP_GatherWorldData Parms{};

	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingValidator.BP_LightingValidator_C.Construct Light Component Details String
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ULightComponent*&           Light_Component                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// int32                                   Light_Component_Index                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TMap<class ULightComponent*, struct FF_LightComponentValidationDetails>&Light_Component_Details                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class FString*                          Light_Component_Details_String                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LightingValidator_C::Construct_Light_Component_Details_String(const class ULightComponent*& Light_Component, int32 Light_Component_Index, const TMap<class ULightComponent*, struct FF_LightComponentValidationDetails>& Light_Component_Details, class FString* Light_Component_Details_String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingValidator_C", "Construct Light Component Details String");

	Params::BP_LightingValidator_C_Construct_Light_Component_Details_String Parms{};

	Parms.Light_Component = Light_Component;
	Parms.Light_Component_Index = Light_Component_Index;
	Parms.Light_Component_Details = std::move(Light_Component_Details);

	UObject::ProcessEvent(Func, &Parms);

	if (Light_Component_Details_String != nullptr)
		*Light_Component_Details_String = std::move(Parms.Light_Component_Details_String);
}


// Function BP_LightingValidator.BP_LightingValidator_C.ExecuteUbergraph_BP_LightingValidator
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LightingValidator_C::ExecuteUbergraph_BP_LightingValidator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingValidator_C", "ExecuteUbergraph_BP_LightingValidator");

	Params::BP_LightingValidator_C_ExecuteUbergraph_BP_LightingValidator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingValidator.BP_LightingValidator_C.GatherWorldData
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_LightingValidator_C::GatherWorldData(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingValidator_C", "GatherWorldData");

	Params::BP_LightingValidator_C_GatherWorldData Parms{};

	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingValidator.BP_LightingValidator_C.GatherWorldSectionData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FValidationWorldSection&   WorldSection                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBP_LightingValidator_C::GatherWorldSectionData(class UWorld* World, const struct FValidationWorldSection& WorldSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingValidator_C", "GatherWorldSectionData");

	Params::BP_LightingValidator_C_GatherWorldSectionData Parms{};

	Parms.World = World;
	Parms.WorldSection = std::move(WorldSection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingValidator.BP_LightingValidator_C.ValidateWorld
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSectionsPassedValidation                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_LightingValidator_C::ValidateWorld(bool bSectionsPassedValidation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingValidator_C", "ValidateWorld");

	Params::BP_LightingValidator_C_ValidateWorld Parms{};

	Parms.bSectionsPassedValidation = bSectionsPassedValidation;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_LightingValidator.BP_LightingValidator_C.Visualization
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LightingValidator_C::Visualization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingValidator_C", "Visualization");

	UObject::ProcessEvent(Func, nullptr);
}

}

