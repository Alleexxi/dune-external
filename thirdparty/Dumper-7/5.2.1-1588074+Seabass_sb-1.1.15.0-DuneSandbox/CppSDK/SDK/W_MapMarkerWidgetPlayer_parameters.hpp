#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MapMarkerWidgetPlayer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DuneSandbox_structs.hpp"


namespace SDK::Params
{

// Function W_MapMarkerWidgetPlayer.W_MapMarkerWidgetPlayer_C.ExecuteUbergraph_W_MapMarkerWidgetPlayer
// 0x0238 (0x0238 - 0x0000)
struct W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEMapMarker                            K2Node_Event_MarkerType;                           // 0x0040(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FFullscreenMapMarkerRowBase            K2Node_Event_MarkerStaticData;                     // 0x0048(0x0158)(ConstParm)
	struct FMapMarkerGuiData                      K2Node_Event_MarkerDynamicData;                    // 0x01A0(0x0098)(ConstParm)
};
static_assert(alignof(W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer) == 0x000008, "Wrong alignment on W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer");
static_assert(sizeof(W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer) == 0x000238, "Wrong size on W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer, EntryPoint) == 0x000000, "Member 'W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer, K2Node_Event_MyGeometry) == 0x000004, "Member 'W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer, K2Node_Event_MarkerType) == 0x000040, "Member 'W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer::K2Node_Event_MarkerType' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer, K2Node_Event_MarkerStaticData) == 0x000048, "Member 'W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer::K2Node_Event_MarkerStaticData' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer, K2Node_Event_MarkerDynamicData) == 0x0001A0, "Member 'W_MapMarkerWidgetPlayer_C_ExecuteUbergraph_W_MapMarkerWidgetPlayer::K2Node_Event_MarkerDynamicData' has a wrong offset!");

// Function W_MapMarkerWidgetPlayer.W_MapMarkerWidgetPlayer_C.RotateIconWithOwner
// 0x0088 (0x0088 - 0x0000)
struct W_MapMarkerWidgetPlayer_C_RotateIconWithOwner final
{
public:
	bool                                          CallFunc_GetIsOwnerAlive_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetPlayerOwner_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneCharacter*                         K2Node_DynamicCast_AsDune_Character;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDuneLocomotionAnimInstance*            CallFunc_GetBaseLocomotionAnimInstance_ReturnValue; // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast_1; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner) == 0x000008, "Wrong alignment on W_MapMarkerWidgetPlayer_C_RotateIconWithOwner");
static_assert(sizeof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner) == 0x000088, "Wrong size on W_MapMarkerWidgetPlayer_C_RotateIconWithOwner");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_GetIsOwnerAlive_ReturnValue) == 0x000000, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_GetIsOwnerAlive_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_GetPlayerOwner_ReturnValue) == 0x000008, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_GetPlayerOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000018, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_BreakRotator_Roll) == 0x000030, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_BreakRotator_Pitch) == 0x000034, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_BreakRotator_Yaw) == 0x000038, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, K2Node_DynamicCast_AsDune_Character) == 0x000040, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::K2Node_DynamicCast_AsDune_Character' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000050, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_GetBaseLocomotionAnimInstance_ReturnValue) == 0x000058, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_GetBaseLocomotionAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000060, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000068, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000070, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x000078, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_RotateIconWithOwner, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast_1) == 0x000080, "Member 'W_MapMarkerWidgetPlayer_C_RotateIconWithOwner::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast_1' has a wrong offset!");

// Function W_MapMarkerWidgetPlayer.W_MapMarkerWidgetPlayer_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_MapMarkerWidgetPlayer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapMarkerWidgetPlayer_C_Tick) == 0x000004, "Wrong alignment on W_MapMarkerWidgetPlayer_C_Tick");
static_assert(sizeof(W_MapMarkerWidgetPlayer_C_Tick) == 0x00003C, "Wrong size on W_MapMarkerWidgetPlayer_C_Tick");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_Tick, MyGeometry) == 0x000000, "Member 'W_MapMarkerWidgetPlayer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_Tick, InDeltaTime) == 0x000038, "Member 'W_MapMarkerWidgetPlayer_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_MapMarkerWidgetPlayer.W_MapMarkerWidgetPlayer_C.Update
// 0x01F8 (0x01F8 - 0x0000)
struct W_MapMarkerWidgetPlayer_C_Update final
{
public:
	struct FEMapMarker                            MarkerType;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FFullscreenMapMarkerRowBase            MarkerStaticData;                                  // 0x0008(0x0158)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FMapMarkerGuiData                      MarkerDynamicData;                                 // 0x0160(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_MapMarkerWidgetPlayer_C_Update) == 0x000008, "Wrong alignment on W_MapMarkerWidgetPlayer_C_Update");
static_assert(sizeof(W_MapMarkerWidgetPlayer_C_Update) == 0x0001F8, "Wrong size on W_MapMarkerWidgetPlayer_C_Update");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_Update, MarkerType) == 0x000000, "Member 'W_MapMarkerWidgetPlayer_C_Update::MarkerType' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_Update, MarkerStaticData) == 0x000008, "Member 'W_MapMarkerWidgetPlayer_C_Update::MarkerStaticData' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidgetPlayer_C_Update, MarkerDynamicData) == 0x000160, "Member 'W_MapMarkerWidgetPlayer_C_Update::MarkerDynamicData' has a wrong offset!");

}

