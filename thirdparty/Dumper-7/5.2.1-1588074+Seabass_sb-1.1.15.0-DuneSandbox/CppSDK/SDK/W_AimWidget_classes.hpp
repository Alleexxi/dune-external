#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_AimWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_AimWidget.W_AimWidget_C
// 0x0070 (0x05B0 - 0x0540)
class UW_AimWidget_C final : public UAimWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0540(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetSwitcher*                        SWITCH_Aim;                                        // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bCachedHolstered;                                  // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceHideCrosshair;                               // 0x0551(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_552[0x6];                                      // 0x0552(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EAllianceType, struct FLinearColor>      AllianceColors;                                    // 0x0558(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_W_AimWidget(int32 EntryPoint);
	void Construct();
	void UpdateCrosshairVisibility();
	void OnWeaponHolsterToggled(const bool bInHolstered);
	void OnTargetAllianceTypeChanged(EAllianceType Alliance);
	void OnInitialized();
	void OnCrosshairClassChanged(TSubclassOf<class UCrosshairWidget> InCrosshairClass);
	void HandleCrosshairVisibilityUpdated(bool Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_AimWidget_C">();
	}
	static class UW_AimWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_AimWidget_C>();
	}
};
static_assert(alignof(UW_AimWidget_C) == 0x000010, "Wrong alignment on UW_AimWidget_C");
static_assert(sizeof(UW_AimWidget_C) == 0x0005B0, "Wrong size on UW_AimWidget_C");
static_assert(offsetof(UW_AimWidget_C, UberGraphFrame) == 0x000540, "Member 'UW_AimWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_AimWidget_C, SWITCH_Aim) == 0x000548, "Member 'UW_AimWidget_C::SWITCH_Aim' has a wrong offset!");
static_assert(offsetof(UW_AimWidget_C, bCachedHolstered) == 0x000550, "Member 'UW_AimWidget_C::bCachedHolstered' has a wrong offset!");
static_assert(offsetof(UW_AimWidget_C, bForceHideCrosshair) == 0x000551, "Member 'UW_AimWidget_C::bForceHideCrosshair' has a wrong offset!");
static_assert(offsetof(UW_AimWidget_C, AllianceColors) == 0x000558, "Member 'UW_AimWidget_C::AllianceColors' has a wrong offset!");

}

