#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mercuna3DMovement

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "Mercuna3DMovement_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Mercuna3DMovement.Mercuna3DMovementComponent
// 0x00D0 (0x02B0 - 0x01E0)
class alignas(0x10) UMercuna3DMovementComponent final : public UPawnMovementComponent
{
public:
	uint8                                         Pad_1E0[0x20];                                     // 0x01E0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMercuna3DMovementProperties           MovementProperties;                                // 0x0200(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         bPositionCorrected : 1;                            // 0x022C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PendingImpulseToApply;                             // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Acceleration;                                      // 0x0248(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                AngularVelocity;                                   // 0x0260(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_278[0x38];                                     // 0x0278(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddImpulse(const struct FVector& Impulse);
	void SetAngularVelocity(const struct FVector& NewAngVel);
	void SetMovementProperties(const struct FMercuna3DMovementProperties& NewMovementProperties);
	void SetVelocitiesFromPhysics();
	void SetVelocity(const struct FVector& NewVelocity);

	struct FRotator GetLocalRotationRate() const;
	struct FVector GetLocalVelocity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Mercuna3DMovementComponent">();
	}
	static class UMercuna3DMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMercuna3DMovementComponent>();
	}
};
static_assert(alignof(UMercuna3DMovementComponent) == 0x000010, "Wrong alignment on UMercuna3DMovementComponent");
static_assert(sizeof(UMercuna3DMovementComponent) == 0x0002B0, "Wrong size on UMercuna3DMovementComponent");
static_assert(offsetof(UMercuna3DMovementComponent, MovementProperties) == 0x000200, "Member 'UMercuna3DMovementComponent::MovementProperties' has a wrong offset!");
static_assert(offsetof(UMercuna3DMovementComponent, PendingImpulseToApply) == 0x000230, "Member 'UMercuna3DMovementComponent::PendingImpulseToApply' has a wrong offset!");
static_assert(offsetof(UMercuna3DMovementComponent, Acceleration) == 0x000248, "Member 'UMercuna3DMovementComponent::Acceleration' has a wrong offset!");
static_assert(offsetof(UMercuna3DMovementComponent, AngularVelocity) == 0x000260, "Member 'UMercuna3DMovementComponent::AngularVelocity' has a wrong offset!");

// Class Mercuna3DMovement.Mercuna3DMovementInterface
// 0x0000 (0x0000 - 0x0000)
class IMercuna3DMovementInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Mercuna3DMovementInterface">();
	}
	static class IMercuna3DMovementInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMercuna3DMovementInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IMercuna3DMovementInterface) == 0x000001, "Wrong alignment on IMercuna3DMovementInterface");
static_assert(sizeof(IMercuna3DMovementInterface) == 0x000001, "Wrong size on IMercuna3DMovementInterface");

}

