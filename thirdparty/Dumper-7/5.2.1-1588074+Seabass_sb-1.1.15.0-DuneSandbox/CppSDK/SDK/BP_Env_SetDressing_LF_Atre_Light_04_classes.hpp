#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Env_SetDressing_LF_Atre_Light_04

#include "Basic.hpp"

#include "BP_Env_SetDressing_LightFixtures_BodyMesh_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Env_SetDressing_LF_Atre_Light_04.BP_Env_SetDressing_LF_Atre_Light_04_C
// 0x0020 (0x0630 - 0x0610)
class ABP_Env_SetDressing_LF_Atre_Light_04_C final : public ABP_Env_SetDressing_LightFixtures_BodyMesh_C
{
public:
	class UBP_AutoPlayAudioComponent_C*           BP_AutoPlayAudioComponent;                         // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumetricScattering;                              // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IndirectLightIntensity;                            // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttenuationRadius;                                 // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Env_SetDressing_LF_Atre_Light_04_C">();
	}
	static class ABP_Env_SetDressing_LF_Atre_Light_04_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Env_SetDressing_LF_Atre_Light_04_C>();
	}
};
static_assert(alignof(ABP_Env_SetDressing_LF_Atre_Light_04_C) == 0x000008, "Wrong alignment on ABP_Env_SetDressing_LF_Atre_Light_04_C");
static_assert(sizeof(ABP_Env_SetDressing_LF_Atre_Light_04_C) == 0x000630, "Wrong size on ABP_Env_SetDressing_LF_Atre_Light_04_C");
static_assert(offsetof(ABP_Env_SetDressing_LF_Atre_Light_04_C, BP_AutoPlayAudioComponent) == 0x000610, "Member 'ABP_Env_SetDressing_LF_Atre_Light_04_C::BP_AutoPlayAudioComponent' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LF_Atre_Light_04_C, SpotLight) == 0x000618, "Member 'ABP_Env_SetDressing_LF_Atre_Light_04_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LF_Atre_Light_04_C, Intensity) == 0x000620, "Member 'ABP_Env_SetDressing_LF_Atre_Light_04_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LF_Atre_Light_04_C, VolumetricScattering) == 0x000624, "Member 'ABP_Env_SetDressing_LF_Atre_Light_04_C::VolumetricScattering' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LF_Atre_Light_04_C, IndirectLightIntensity) == 0x000628, "Member 'ABP_Env_SetDressing_LF_Atre_Light_04_C::IndirectLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LF_Atre_Light_04_C, AttenuationRadius) == 0x00062C, "Member 'ABP_Env_SetDressing_LF_Atre_Light_04_C::AttenuationRadius' has a wrong offset!");

}

