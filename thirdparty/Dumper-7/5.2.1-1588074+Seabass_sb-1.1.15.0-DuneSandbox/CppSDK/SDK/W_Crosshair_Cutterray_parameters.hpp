#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Crosshair_Cutterray

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.UpdateTarget
// 0x0028 (0x0028 - 0x0000)
struct W_Crosshair_Cutterray_C_UpdateTarget final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_2;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_UpdateTarget) == 0x000008, "Wrong alignment on W_Crosshair_Cutterray_C_UpdateTarget");
static_assert(sizeof(W_Crosshair_Cutterray_C_UpdateTarget) == 0x000028, "Wrong size on W_Crosshair_Cutterray_C_UpdateTarget");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateTarget, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_Crosshair_Cutterray_C_UpdateTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateTarget, CallFunc_GetObjectClass_ReturnValue) == 0x000008, "Member 'W_Crosshair_Cutterray_C_UpdateTarget::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateTarget, CallFunc_ClassIsChildOf_ReturnValue) == 0x000010, "Member 'W_Crosshair_Cutterray_C_UpdateTarget::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateTarget, CallFunc_GetObjectClass_ReturnValue_1) == 0x000018, "Member 'W_Crosshair_Cutterray_C_UpdateTarget::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateTarget, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x000020, "Member 'W_Crosshair_Cutterray_C_UpdateTarget::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateTarget, CallFunc_ClassIsChildOf_ReturnValue_2) == 0x000021, "Member 'W_Crosshair_Cutterray_C_UpdateTarget::CallFunc_ClassIsChildOf_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateTarget, CallFunc_BooleanOR_ReturnValue) == 0x000022, "Member 'W_Crosshair_Cutterray_C_UpdateTarget::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateTarget, CallFunc_BooleanOR_ReturnValue_1) == 0x000023, "Member 'W_Crosshair_Cutterray_C_UpdateTarget::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.UpdateSpread
// 0x0004 (0x0004 - 0x0000)
struct W_Crosshair_Cutterray_C_UpdateSpread final
{
public:
	float                                         SpreadRadius;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_UpdateSpread) == 0x000004, "Wrong alignment on W_Crosshair_Cutterray_C_UpdateSpread");
static_assert(sizeof(W_Crosshair_Cutterray_C_UpdateSpread) == 0x000004, "Wrong size on W_Crosshair_Cutterray_C_UpdateSpread");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateSpread, SpreadRadius) == 0x000000, "Member 'W_Crosshair_Cutterray_C_UpdateSpread::SpreadRadius' has a wrong offset!");

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.UpdateCrosshair
// 0x0020 (0x0020 - 0x0000)
struct W_Crosshair_Cutterray_C_UpdateCrosshair final
{
public:
	bool                                          ShouldShowDIamond;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowTargetColor;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_UpdateCrosshair) == 0x000008, "Wrong alignment on W_Crosshair_Cutterray_C_UpdateCrosshair");
static_assert(sizeof(W_Crosshair_Cutterray_C_UpdateCrosshair) == 0x000020, "Wrong size on W_Crosshair_Cutterray_C_UpdateCrosshair");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateCrosshair, ShouldShowDIamond) == 0x000000, "Member 'W_Crosshair_Cutterray_C_UpdateCrosshair::ShouldShowDIamond' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateCrosshair, ShowTargetColor) == 0x000001, "Member 'W_Crosshair_Cutterray_C_UpdateCrosshair::ShowTargetColor' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateCrosshair, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'W_Crosshair_Cutterray_C_UpdateCrosshair::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateCrosshair, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'W_Crosshair_Cutterray_C_UpdateCrosshair::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_UpdateCrosshair, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'W_Crosshair_Cutterray_C_UpdateCrosshair::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.ToggleADS
// 0x0001 (0x0001 - 0x0000)
struct W_Crosshair_Cutterray_C_ToggleADS final
{
public:
	bool                                          bInADS;                                            // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_ToggleADS) == 0x000001, "Wrong alignment on W_Crosshair_Cutterray_C_ToggleADS");
static_assert(sizeof(W_Crosshair_Cutterray_C_ToggleADS) == 0x000001, "Wrong size on W_Crosshair_Cutterray_C_ToggleADS");
static_assert(offsetof(W_Crosshair_Cutterray_C_ToggleADS, bInADS) == 0x000000, "Member 'W_Crosshair_Cutterray_C_ToggleADS::bInADS' has a wrong offset!");

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.OnWeaponHolsterToggled
// 0x0001 (0x0001 - 0x0000)
struct W_Crosshair_Cutterray_C_OnWeaponHolsterToggled final
{
public:
	bool                                          bInHolstered;                                      // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_OnWeaponHolsterToggled) == 0x000001, "Wrong alignment on W_Crosshair_Cutterray_C_OnWeaponHolsterToggled");
static_assert(sizeof(W_Crosshair_Cutterray_C_OnWeaponHolsterToggled) == 0x000001, "Wrong size on W_Crosshair_Cutterray_C_OnWeaponHolsterToggled");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnWeaponHolsterToggled, bInHolstered) == 0x000000, "Member 'W_Crosshair_Cutterray_C_OnWeaponHolsterToggled::bInHolstered' has a wrong offset!");

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.OnToggleADS
// 0x0068 (0x0068 - 0x0000)
struct W_Crosshair_Cutterray_C_OnToggleADS final
{
public:
	class UWidgetAnimation*                       InLeavingAnim;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       InStartingAnim;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        StartPercent;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimation_StartAtTime_ImplicitCast;   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_OnToggleADS) == 0x000008, "Wrong alignment on W_Crosshair_Cutterray_C_OnToggleADS");
static_assert(sizeof(W_Crosshair_Cutterray_C_OnToggleADS) == 0x000068, "Wrong size on W_Crosshair_Cutterray_C_OnToggleADS");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, InLeavingAnim) == 0x000000, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::InLeavingAnim' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, InStartingAnim) == 0x000008, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::InStartingAnim' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, StartPercent) == 0x000010, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::StartPercent' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_GetEndTime_ReturnValue) == 0x000018, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_IsAnimationPlaying_ReturnValue) == 0x00001C, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000020, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000028, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_GetEndTime_ReturnValue_1) == 0x000030, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_PlayAnimation_ReturnValue) == 0x000040, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000048, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000050, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000058, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_OnToggleADS, CallFunc_PlayAnimation_StartAtTime_ImplicitCast) == 0x000060, "Member 'W_Crosshair_Cutterray_C_OnToggleADS::CallFunc_PlayAnimation_StartAtTime_ImplicitCast' has a wrong offset!");

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.GetIsCurrentTargetValid
// 0x0028 (0x0028 - 0x0000)
struct W_Crosshair_Cutterray_C_GetIsCurrentTargetValid final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_2;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid) == 0x000008, "Wrong alignment on W_Crosshair_Cutterray_C_GetIsCurrentTargetValid");
static_assert(sizeof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid) == 0x000028, "Wrong size on W_Crosshair_Cutterray_C_GetIsCurrentTargetValid");
static_assert(offsetof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid, Value) == 0x000000, "Member 'W_Crosshair_Cutterray_C_GetIsCurrentTargetValid::Value' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'W_Crosshair_Cutterray_C_GetIsCurrentTargetValid::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid, CallFunc_GetObjectClass_ReturnValue) == 0x000008, "Member 'W_Crosshair_Cutterray_C_GetIsCurrentTargetValid::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid, CallFunc_ClassIsChildOf_ReturnValue) == 0x000010, "Member 'W_Crosshair_Cutterray_C_GetIsCurrentTargetValid::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid, CallFunc_GetObjectClass_ReturnValue_1) == 0x000018, "Member 'W_Crosshair_Cutterray_C_GetIsCurrentTargetValid::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x000020, "Member 'W_Crosshair_Cutterray_C_GetIsCurrentTargetValid::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid, CallFunc_ClassIsChildOf_ReturnValue_2) == 0x000021, "Member 'W_Crosshair_Cutterray_C_GetIsCurrentTargetValid::CallFunc_ClassIsChildOf_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid, CallFunc_BooleanOR_ReturnValue) == 0x000022, "Member 'W_Crosshair_Cutterray_C_GetIsCurrentTargetValid::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_GetIsCurrentTargetValid, CallFunc_BooleanOR_ReturnValue_1) == 0x000023, "Member 'W_Crosshair_Cutterray_C_GetIsCurrentTargetValid::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.ExitAds
// 0x0018 (0x0018 - 0x0000)
struct W_Crosshair_Cutterray_C_ExitAds final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_ExitAds) == 0x000008, "Wrong alignment on W_Crosshair_Cutterray_C_ExitAds");
static_assert(sizeof(W_Crosshair_Cutterray_C_ExitAds) == 0x000018, "Wrong size on W_Crosshair_Cutterray_C_ExitAds");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExitAds, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'W_Crosshair_Cutterray_C_ExitAds::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExitAds, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'W_Crosshair_Cutterray_C_ExitAds::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExitAds, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'W_Crosshair_Cutterray_C_ExitAds::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.ExecuteUbergraph_W_Crosshair_Cutterray
// 0x00D0 (0x00D0 - 0x0000)
struct W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           K2Node_Event_CurrentAimTarget;                     // 0x0008(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_SpreadRadius;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInADS;                               // 0x0068(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_3;               // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInHolstered;                         // 0x0080(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_GetIsCurrentTargetValid_Value;            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x00A0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_IntFloat_B_ImplicitCast;         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_X_ImplicitCast;              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_B_ImplicitCast_1;       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_Y_ImplicitCast;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray) == 0x000008, "Wrong alignment on W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray");
static_assert(sizeof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray) == 0x0000D0, "Wrong size on W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, EntryPoint) == 0x000000, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, K2Node_Event_CurrentAimTarget) == 0x000008, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::K2Node_Event_CurrentAimTarget' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, K2Node_Event_SpreadRadius) == 0x000010, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::K2Node_Event_SpreadRadius' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000038, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_MakeVector2D_ReturnValue_1) == 0x000040, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_MakeVector2D_ReturnValue_2) == 0x000050, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x000060, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, K2Node_Event_bInADS) == 0x000068, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::K2Node_Event_bInADS' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_MakeVector2D_ReturnValue_3) == 0x000070, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_MakeVector2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, K2Node_Event_bInHolstered) == 0x000080, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::K2Node_Event_bInHolstered' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, K2Node_MakeArray_Array) == 0x000088, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_GetIsCurrentTargetValid_Value) == 0x000098, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_GetIsCurrentTargetValid_Value' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_K2_SetTimer_ReturnValue) == 0x0000A0, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_Not_PreBool_ReturnValue) == 0x0000A8, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_BooleanAND_ReturnValue) == 0x0000A9, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_Multiply_IntFloat_B_ImplicitCast) == 0x0000B0, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_Multiply_IntFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_MakeVector2D_X_ImplicitCast) == 0x0000B8, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_MakeVector2D_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_Multiply_IntFloat_B_ImplicitCast_1) == 0x0000C0, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_Multiply_IntFloat_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray, CallFunc_MakeVector2D_Y_ImplicitCast) == 0x0000C8, "Member 'W_Crosshair_Cutterray_C_ExecuteUbergraph_W_Crosshair_Cutterray::CallFunc_MakeVector2D_Y_ImplicitCast' has a wrong offset!");

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.EnterAds
// 0x0008 (0x0008 - 0x0000)
struct W_Crosshair_Cutterray_C_EnterAds final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_EnterAds) == 0x000008, "Wrong alignment on W_Crosshair_Cutterray_C_EnterAds");
static_assert(sizeof(W_Crosshair_Cutterray_C_EnterAds) == 0x000008, "Wrong size on W_Crosshair_Cutterray_C_EnterAds");
static_assert(offsetof(W_Crosshair_Cutterray_C_EnterAds, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'W_Crosshair_Cutterray_C_EnterAds::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function W_Crosshair_Cutterray.W_Crosshair_Cutterray_C.BP_OnCurrentAimTargetChanged
// 0x0008 (0x0008 - 0x0000)
struct W_Crosshair_Cutterray_C_BP_OnCurrentAimTargetChanged final
{
public:
	const class AActor*                           CurrentAimTarget;                                  // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_Cutterray_C_BP_OnCurrentAimTargetChanged) == 0x000008, "Wrong alignment on W_Crosshair_Cutterray_C_BP_OnCurrentAimTargetChanged");
static_assert(sizeof(W_Crosshair_Cutterray_C_BP_OnCurrentAimTargetChanged) == 0x000008, "Wrong size on W_Crosshair_Cutterray_C_BP_OnCurrentAimTargetChanged");
static_assert(offsetof(W_Crosshair_Cutterray_C_BP_OnCurrentAimTargetChanged, CurrentAimTarget) == 0x000000, "Member 'W_Crosshair_Cutterray_C_BP_OnCurrentAimTargetChanged::CurrentAimTarget' has a wrong offset!");

}

