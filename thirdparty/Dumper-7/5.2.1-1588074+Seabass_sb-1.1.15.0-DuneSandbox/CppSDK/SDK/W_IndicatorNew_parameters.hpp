#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_IndicatorNew

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_IndicatorNew.W_IndicatorNew_C.ExecuteUbergraph_W_IndicatorNew
// 0x0010 (0x0010 - 0x0000)
struct W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EIndicatorNewStyle                            K2Node_Event_IndicatorNewStyle;                    // 0x000A(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew) == 0x000004, "Wrong alignment on W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew");
static_assert(sizeof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew) == 0x000010, "Wrong size on W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, EntryPoint) == 0x000000, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, Temp_byte_Variable) == 0x000004, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, Temp_byte_Variable_1) == 0x000005, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, Temp_bool_Variable) == 0x000006, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, Temp_byte_Variable_2) == 0x000007, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, Temp_byte_Variable_3) == 0x000008, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, K2Node_Event_IsDesignTime) == 0x000009, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, K2Node_Event_IndicatorNewStyle) == 0x00000A, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::K2Node_Event_IndicatorNewStyle' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, K2Node_SwitchEnum_CmpSuccess) == 0x00000B, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, K2Node_Select_Default) == 0x00000C, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, Temp_bool_Variable_1) == 0x00000D, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew, K2Node_Select_Default_1) == 0x00000E, "Member 'W_IndicatorNew_C_ExecuteUbergraph_W_IndicatorNew::K2Node_Select_Default_1' has a wrong offset!");

// Function W_IndicatorNew.W_IndicatorNew_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_IndicatorNew_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_IndicatorNew_C_PreConstruct) == 0x000001, "Wrong alignment on W_IndicatorNew_C_PreConstruct");
static_assert(sizeof(W_IndicatorNew_C_PreConstruct) == 0x000001, "Wrong size on W_IndicatorNew_C_PreConstruct");
static_assert(offsetof(W_IndicatorNew_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_IndicatorNew_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_IndicatorNew.W_IndicatorNew_C.Set Disabled
// 0x0068 (0x0068 - 0x0000)
struct W_IndicatorNew_C_Set_Disabled final
{
public:
	bool                                          IsDisabled_;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Select_Default_2;                           // 0x003C(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0050(0x0014)()
};
static_assert(alignof(W_IndicatorNew_C_Set_Disabled) == 0x000008, "Wrong alignment on W_IndicatorNew_C_Set_Disabled");
static_assert(sizeof(W_IndicatorNew_C_Set_Disabled) == 0x000068, "Wrong size on W_IndicatorNew_C_Set_Disabled");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, IsDisabled_) == 0x000000, "Member 'W_IndicatorNew_C_Set_Disabled::IsDisabled_' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, Temp_bool_Variable) == 0x000001, "Member 'W_IndicatorNew_C_Set_Disabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, Temp_real_Variable) == 0x000004, "Member 'W_IndicatorNew_C_Set_Disabled::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, Temp_real_Variable_1) == 0x000008, "Member 'W_IndicatorNew_C_Set_Disabled::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, Temp_bool_Variable_1) == 0x00000C, "Member 'W_IndicatorNew_C_Set_Disabled::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, Temp_bool_Variable_2) == 0x00000D, "Member 'W_IndicatorNew_C_Set_Disabled::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, Temp_object_Variable) == 0x000010, "Member 'W_IndicatorNew_C_Set_Disabled::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, Temp_object_Variable_1) == 0x000018, "Member 'W_IndicatorNew_C_Set_Disabled::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, K2Node_Select_Default) == 0x000020, "Member 'W_IndicatorNew_C_Set_Disabled::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, K2Node_Select_Default_1) == 0x000028, "Member 'W_IndicatorNew_C_Set_Disabled::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, K2Node_MakeStruct_LinearColor) == 0x00002C, "Member 'W_IndicatorNew_C_Set_Disabled::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, K2Node_Select_Default_2) == 0x00003C, "Member 'W_IndicatorNew_C_Set_Disabled::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_IndicatorNew_C_Set_Disabled, K2Node_MakeStruct_SlateColor) == 0x000050, "Member 'W_IndicatorNew_C_Set_Disabled::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function W_IndicatorNew.W_IndicatorNew_C.SetIndicatorNewIcon
// 0x0001 (0x0001 - 0x0000)
struct W_IndicatorNew_C_SetIndicatorNewIcon final
{
public:
	EIndicatorNewStyle                            IndicatorNewStyle;                                 // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_IndicatorNew_C_SetIndicatorNewIcon) == 0x000001, "Wrong alignment on W_IndicatorNew_C_SetIndicatorNewIcon");
static_assert(sizeof(W_IndicatorNew_C_SetIndicatorNewIcon) == 0x000001, "Wrong size on W_IndicatorNew_C_SetIndicatorNewIcon");
static_assert(offsetof(W_IndicatorNew_C_SetIndicatorNewIcon, IndicatorNewStyle) == 0x000000, "Member 'W_IndicatorNew_C_SetIndicatorNewIcon::IndicatorNewStyle' has a wrong offset!");

}

