#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SK_COL_Chassis_CtrlRig

#include "Basic.hpp"

#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// RigVMMemoryStorageGeneratorClass SK_COL_Chassis_CtrlRig.RigVMMemory_Work
// 0x1E50 (0x1E80 - 0x0030)
class SK_COL_Chassis_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	struct FQuat                                  RigVMModel___RigVMFunction_MathQuaternionFromRotatorV2_Result; // 0x0030(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetRotation_CachedIndex;      // 0x0050(0x0010)(Edit, EditConst, NonTransactional)
	bool                                          RigVMModel___MathFloatGreater_Result;              // 0x0060(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigVMModel___MathFloatGreater_A;                   // 0x0064(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_Result;     // 0x0070(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_Result;       // 0x0090(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x00B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x0110(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_Value;        // 0x0120(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_Result;                   // 0x0140(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Result;                // 0x0144(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_Result;     // 0x0148(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_Result;                   // 0x0160(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___ToRigSpace_Location_Global;           // 0x01C0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__IO;              // 0x01D8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_PrimaryCachedSpace;       // 0x0220(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_SecondaryCachedSpace;     // 0x0230(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_bIsInitialized;           // 0x0240(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_Value;      // 0x0250(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Value;                 // 0x0270(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_Buffer;                   // 0x0278(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_LastInsertIndex;          // 0x0288(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__IO; // 0x0298(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___RigUnit_SetTransform_Value__IO;       // 0x02B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_SetTransform_Weight;          // 0x0310(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_CachedIndex;     // 0x0318(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_Result;   // 0x0330(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_2_Result;     // 0x0350(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x0370(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x03D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_2_Value;      // 0x03E0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_Result;                 // 0x0400(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_Result;              // 0x0404(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_1_Result;   // 0x0408(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_1_Result;                 // 0x0420(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___ToRigSpace_Location_1_Global;         // 0x0480(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_Primary__IO;            // 0x0498(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_PrimaryCachedSpace;     // 0x04E0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_SecondaryCachedSpace;   // 0x04F0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_1_bIsInitialized;         // 0x0500(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_1_Value;    // 0x0510(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_Value;               // 0x0530(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_534[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_Buffer;                 // 0x0538(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_LastInsertIndex;        // 0x0548(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_Rotator__IO; // 0x0558(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___RigUnit_SetTransform_1_Value__IO;     // 0x0570(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_SetTransform_1_Weight;        // 0x05D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D4[0x4];                                      // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_1_CachedIndex;   // 0x05D8(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_5E8[0x8];                                      // 0x05E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_4_Result;   // 0x05F0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_5_Result;     // 0x0610(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_4_Transform;     // 0x0630(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_4_CachedIndex;   // 0x0690(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_5_Value;      // 0x06A0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_4_Result;                 // 0x06C0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Result;              // 0x06C4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_4_Result;   // 0x06C8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_4_Result;                 // 0x06E0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___ToRigSpace_Location_4_Global;         // 0x0740(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_4_Primary__IO;            // 0x0758(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_4_PrimaryCachedSpace;     // 0x07A0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_4_SecondaryCachedSpace;   // 0x07B0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_4_bIsInitialized;         // 0x07C0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_4_Value;    // 0x07D0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Value;               // 0x07F0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F4[0x4];                                      // 0x07F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_4_Buffer;                 // 0x07F8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_4_LastInsertIndex;        // 0x0808(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_4_Rotator__IO; // 0x0818(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___RigUnit_SetTransform_4_Value__IO;     // 0x0830(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_SetTransform_4_Weight;        // 0x0890(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_894[0x4];                                      // 0x0894(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_4_CachedIndex;   // 0x0898(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_8A8[0x8];                                      // 0x08A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_5_Result;   // 0x08B0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_6_Result;     // 0x08D0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_8E8[0x8];                                      // 0x08E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_5_Transform;     // 0x08F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_5_CachedIndex;   // 0x0950(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_6_Value;      // 0x0960(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_5_Result;                 // 0x0980(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_5_Result;              // 0x0984(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_5_Result;   // 0x0988(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_5_Result;                 // 0x09A0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___ToRigSpace_Location_5_Global;         // 0x0A00(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_5_Primary__IO;            // 0x0A18(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_5_PrimaryCachedSpace;     // 0x0A60(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_5_SecondaryCachedSpace;   // 0x0A70(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_5_bIsInitialized;         // 0x0A80(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_5_Value;    // 0x0A90(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_5_Value;               // 0x0AB0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB4[0x4];                                      // 0x0AB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_5_Buffer;                 // 0x0AB8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_5_LastInsertIndex;        // 0x0AC8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_5_Rotator__IO; // 0x0AD8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___RigUnit_SetTransform_5_Value__IO;     // 0x0AF0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_SetTransform_5_Weight;        // 0x0B50(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B54[0x4];                                      // 0x0B54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_5_CachedIndex;   // 0x0B58(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_B68[0x8];                                      // 0x0B68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_6_Result;   // 0x0B70(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_7_Result;     // 0x0B90(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_BA8[0x8];                                      // 0x0BA8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_6_Transform;     // 0x0BB0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_6_CachedIndex;   // 0x0C10(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_7_Value;      // 0x0C20(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_6_Result;                 // 0x0C40(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_6_Result;              // 0x0C44(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_8_Result;     // 0x0C48(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_6_Result;                 // 0x0C60(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___ToRigSpace_Location_6_Global;         // 0x0CC0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_6_Primary__IO;            // 0x0CD8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_6_PrimaryCachedSpace;     // 0x0D20(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_6_SecondaryCachedSpace;   // 0x0D30(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_6_bIsInitialized;         // 0x0D40(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_8_Value;      // 0x0D50(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_6_Value;               // 0x0D70(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D74[0x4];                                      // 0x0D74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_6_Buffer;                 // 0x0D78(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_6_LastInsertIndex;        // 0x0D88(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_6_Rotator__IO; // 0x0D98(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___RigUnit_SetTransform_6_Value__IO;     // 0x0DB0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_SetTransform_6_Weight;        // 0x0E10(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E14[0x4];                                      // 0x0E14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_6_CachedIndex;   // 0x0E18(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_E28[0x8];                                      // 0x0E28(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_6_1_Result; // 0x0E30(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_7_1_Result;   // 0x0E50(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_E68[0x8];                                      // 0x0E68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_6_1_Transform;   // 0x0E70(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_6_1_CachedIndex; // 0x0ED0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_7_1_Value;    // 0x0EE0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_6_1_Result;               // 0x0F00(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_6_1_Result;            // 0x0F04(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_8_1_Result;   // 0x0F08(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_6_1_Result;               // 0x0F20(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___ToRigSpace_Location_6_1_Global;       // 0x0F80(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_6_1_Primary__IO;          // 0x0F98(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_6_1_PrimaryCachedSpace;   // 0x0FE0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_6_1_SecondaryCachedSpace; // 0x0FF0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_6_1_bIsInitialized;       // 0x1000(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_8_1_Value;    // 0x1010(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_6_1_Value;             // 0x1030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1034[0x4];                                     // 0x1034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_6_1_Buffer;               // 0x1038(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_6_1_LastInsertIndex;      // 0x1048(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_6_1_Rotator__IO; // 0x1058(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___RigUnit_SetTransform_6_1_Value__IO;   // 0x1070(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_SetTransform_6_1_Weight;      // 0x10D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D4[0x4];                                     // 0x10D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_6_1_CachedIndex; // 0x10D8(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_10E8[0x8];                                     // 0x10E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_6_2_Result; // 0x10F0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_7_2_Result;   // 0x1110(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_1128[0x8];                                     // 0x1128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_6_2_Transform;   // 0x1130(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_6_2_CachedIndex; // 0x1190(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_7_2_Value;    // 0x11A0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_6_2_Result;               // 0x11C0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_6_2_Result;            // 0x11C4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_8_2_Result;   // 0x11C8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_6_2_Result;               // 0x11E0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___ToRigSpace_Location_6_2_Global;       // 0x1240(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_6_2_Primary__IO;          // 0x1258(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_6_2_PrimaryCachedSpace;   // 0x12A0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_6_2_SecondaryCachedSpace; // 0x12B0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_6_2_bIsInitialized;       // 0x12C0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_8_2_Value;    // 0x12D0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_6_2_Value;             // 0x12F0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12F4[0x4];                                     // 0x12F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_6_2_Buffer;               // 0x12F8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_6_2_LastInsertIndex;      // 0x1308(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_6_2_Rotator__IO; // 0x1318(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___RigUnit_SetTransform_6_2_Value__IO;   // 0x1330(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_SetTransform_6_2_Weight;      // 0x1390(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1394[0x4];                                     // 0x1394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_6_2_CachedIndex; // 0x1398(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_13A8[0x8];                                     // 0x13A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_6_1_1_Result; // 0x13B0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_7_1_1_Result; // 0x13D0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_13E8[0x8];                                     // 0x13E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_6_1_1_Transform; // 0x13F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_6_1_1_CachedIndex; // 0x1450(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_7_1_1_Value;  // 0x1460(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_6_1_1_Result;             // 0x1480(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_6_1_1_Result;          // 0x1484(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_8_1_1_Result; // 0x1488(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_6_1_1_Result;             // 0x14A0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___ToRigSpace_Location_6_1_1_Global;     // 0x1500(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_6_1_1_Primary__IO;        // 0x1518(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_6_1_1_PrimaryCachedSpace; // 0x1560(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_6_1_1_SecondaryCachedSpace; // 0x1570(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_6_1_1_bIsInitialized;     // 0x1580(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_8_1_1_Value;  // 0x1590(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_6_1_1_Value;           // 0x15B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15B4[0x4];                                     // 0x15B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_6_1_1_Buffer;             // 0x15B8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_6_1_1_LastInsertIndex;    // 0x15C8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_6_1_1_Rotator__IO; // 0x15D8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___RigUnit_SetTransform_6_1_1_Value__IO; // 0x15F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_SetTransform_6_1_1_Weight;    // 0x1650(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1654[0x4];                                     // 0x1654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_6_1_1_CachedIndex; // 0x1658(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_1668[0x8];                                     // 0x1668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_Transform;     // 0x1670(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_CachedIndex;   // 0x16D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_Primary__IO;                  // 0x16E0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___AimItem_Weight;                       // 0x1728(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_172C[0x4];                                     // 0x172C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_CachedItem;                   // 0x1730(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_PrimaryCachedSpace;           // 0x1740(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_SecondaryCachedSpace;         // 0x1750(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_bIsInitialized;               // 0x1760(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_Transform;     // 0x1770(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_CachedIndex;   // 0x17D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_Primary__IO;                // 0x17E0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___AimItem_1_Weight;                     // 0x1828(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182C[0x4];                                     // 0x182C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_CachedItem;                 // 0x1830(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_PrimaryCachedSpace;         // 0x1840(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_SecondaryCachedSpace;       // 0x1850(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_1_bIsInitialized;             // 0x1860(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_1_Transform;   // 0x1870(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_1_CachedIndex; // 0x18D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_2_Primary__IO;                // 0x18E0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___AimItem_2_Weight;                     // 0x1928(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_192C[0x4];                                     // 0x192C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_2_CachedItem;                 // 0x1930(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_2_PrimaryCachedSpace;         // 0x1940(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_2_SecondaryCachedSpace;       // 0x1950(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_2_bIsInitialized;             // 0x1960(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_1_Transform;   // 0x1970(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_1_CachedIndex; // 0x19D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_1_Primary__IO;              // 0x19E0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___AimItem_1_1_Weight;                   // 0x1A28(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A2C[0x4];                                     // 0x1A2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_CachedItem;               // 0x1A30(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_PrimaryCachedSpace;       // 0x1A40(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_SecondaryCachedSpace;     // 0x1A50(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_1_1_bIsInitialized;           // 0x1A60(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_2_Transform;   // 0x1A70(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_2_CachedIndex; // 0x1AD0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_3_Primary__IO;                // 0x1AE0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___AimItem_3_Weight;                     // 0x1B28(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B2C[0x4];                                     // 0x1B2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_3_CachedItem;                 // 0x1B30(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_3_PrimaryCachedSpace;         // 0x1B40(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_3_SecondaryCachedSpace;       // 0x1B50(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_3_bIsInitialized;             // 0x1B60(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_2_Transform;   // 0x1B70(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_2_CachedIndex; // 0x1BD0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_2_Primary__IO;              // 0x1BE0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___AimItem_1_2_Weight;                   // 0x1C28(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C2C[0x4];                                     // 0x1C2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_2_CachedItem;               // 0x1C30(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_2_PrimaryCachedSpace;       // 0x1C40(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_2_SecondaryCachedSpace;     // 0x1C50(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_1_2_bIsInitialized;           // 0x1C60(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_3_Transform;   // 0x1C70(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_3_CachedIndex; // 0x1CD0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_4_Primary__IO;                // 0x1CE0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___AimItem_4_Weight;                     // 0x1D28(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D2C[0x4];                                     // 0x1D2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_4_CachedItem;                 // 0x1D30(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_4_PrimaryCachedSpace;         // 0x1D40(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_4_SecondaryCachedSpace;       // 0x1D50(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_4_bIsInitialized;             // 0x1D60(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_3_Transform;   // 0x1D70(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_3_CachedIndex; // 0x1DD0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_3_Primary__IO;              // 0x1DE0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___AimItem_1_3_Weight;                   // 0x1E28(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E2C[0x4];                                     // 0x1E2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_3_CachedItem;               // 0x1E30(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_3_PrimaryCachedSpace;       // 0x1E40(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_3_SecondaryCachedSpace;     // 0x1E50(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_1_3_bIsInitialized;           // 0x1E60(0x0010)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___Branch_BlockToRun;                    // 0x1E70(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_COL_Chassis_CtrlRig.RigVMMemory_Work", true>();
	}
	static class SK_COL_Chassis_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_COL_Chassis_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on SK_COL_Chassis_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work) == 0x001E80, "Wrong size on SK_COL_Chassis_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigVMFunction_MathQuaternionFromRotatorV2_Result) == 0x000030, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigVMFunction_MathQuaternionFromRotatorV2_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetRotation_CachedIndex) == 0x000050, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetRotation_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatGreater_Result) == 0x000060, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatGreater_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatGreater_A) == 0x000064, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatGreater_A' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Result) == 0x000070, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Result) == 0x000090, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x0000B0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x000110, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Value) == 0x000120, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Result) == 0x000140, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Result) == 0x000144, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Result) == 0x000148, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Result) == 0x000160, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_Global) == 0x0001C0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_Global' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Primary__IO) == 0x0001D8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_PrimaryCachedSpace) == 0x000220, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_SecondaryCachedSpace) == 0x000230, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_bIsInitialized) == 0x000240, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Value) == 0x000250, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Value) == 0x000270, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Buffer) == 0x000278, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Buffer' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_LastInsertIndex) == 0x000288, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Rotator__IO) == 0x000298, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_Value__IO) == 0x0002B0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_Weight) == 0x000310, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_CachedIndex) == 0x000318, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Result) == 0x000330, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_Result) == 0x000350, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_Transform) == 0x000370, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_CachedIndex) == 0x0003D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_Value) == 0x0003E0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_Result) == 0x000400, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_Result) == 0x000404, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_Result) == 0x000408, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_Result) == 0x000420, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_1_Global) == 0x000480, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_1_Global' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_Primary__IO) == 0x000498, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_PrimaryCachedSpace) == 0x0004E0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_SecondaryCachedSpace) == 0x0004F0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_bIsInitialized) == 0x000500, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_Value) == 0x000510, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_Value) == 0x000530, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_Buffer) == 0x000538, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_LastInsertIndex) == 0x000548, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Rotator__IO) == 0x000558, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_Value__IO) == 0x000570, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_Weight) == 0x0005D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_CachedIndex) == 0x0005D8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_4_Result) == 0x0005F0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_4_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_5_Result) == 0x000610, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_5_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_Transform) == 0x000630, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_CachedIndex) == 0x000690, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_5_Value) == 0x0006A0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_5_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_Result) == 0x0006C0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_Result) == 0x0006C4, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_4_Result) == 0x0006C8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_4_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_Result) == 0x0006E0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_4_Global) == 0x000740, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_4_Global' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_Primary__IO) == 0x000758, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_PrimaryCachedSpace) == 0x0007A0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_SecondaryCachedSpace) == 0x0007B0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_bIsInitialized) == 0x0007C0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_4_Value) == 0x0007D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_4_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_Value) == 0x0007F0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_Buffer) == 0x0007F8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_Buffer' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_4_LastInsertIndex) == 0x000808, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_4_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_4_Rotator__IO) == 0x000818, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_4_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_4_Value__IO) == 0x000830, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_4_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_4_Weight) == 0x000890, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_4_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_4_CachedIndex) == 0x000898, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_5_Result) == 0x0008B0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_5_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_6_Result) == 0x0008D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_6_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_5_Transform) == 0x0008F0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_5_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_5_CachedIndex) == 0x000950, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_5_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_6_Value) == 0x000960, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_6_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_5_Result) == 0x000980, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_5_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_5_Result) == 0x000984, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_5_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_5_Result) == 0x000988, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_5_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_5_Result) == 0x0009A0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_5_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_5_Global) == 0x000A00, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_5_Global' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_5_Primary__IO) == 0x000A18, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_5_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_5_PrimaryCachedSpace) == 0x000A60, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_5_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_5_SecondaryCachedSpace) == 0x000A70, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_5_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_5_bIsInitialized) == 0x000A80, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_5_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_5_Value) == 0x000A90, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_5_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_5_Value) == 0x000AB0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_5_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_5_Buffer) == 0x000AB8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_5_Buffer' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_5_LastInsertIndex) == 0x000AC8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_5_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_5_Rotator__IO) == 0x000AD8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_5_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_5_Value__IO) == 0x000AF0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_5_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_5_Weight) == 0x000B50, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_5_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_5_CachedIndex) == 0x000B58, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_5_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_6_Result) == 0x000B70, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_6_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_7_Result) == 0x000B90, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_7_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_Transform) == 0x000BB0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_CachedIndex) == 0x000C10, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_7_Value) == 0x000C20, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_7_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_Result) == 0x000C40, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_6_Result) == 0x000C44, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_6_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_8_Result) == 0x000C48, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_8_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_Result) == 0x000C60, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_6_Global) == 0x000CC0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_6_Global' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_Primary__IO) == 0x000CD8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_PrimaryCachedSpace) == 0x000D20, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_SecondaryCachedSpace) == 0x000D30, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_bIsInitialized) == 0x000D40, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_8_Value) == 0x000D50, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_8_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_6_Value) == 0x000D70, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_6_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_Buffer) == 0x000D78, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_Buffer' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_LastInsertIndex) == 0x000D88, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_6_Rotator__IO) == 0x000D98, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_6_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_Value__IO) == 0x000DB0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_Weight) == 0x000E10, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_CachedIndex) == 0x000E18, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_6_1_Result) == 0x000E30, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_6_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_7_1_Result) == 0x000E50, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_7_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_1_Transform) == 0x000E70, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_1_CachedIndex) == 0x000ED0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_7_1_Value) == 0x000EE0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_7_1_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_1_Result) == 0x000F00, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_6_1_Result) == 0x000F04, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_6_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_8_1_Result) == 0x000F08, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_8_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_1_Result) == 0x000F20, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_6_1_Global) == 0x000F80, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_6_1_Global' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_1_Primary__IO) == 0x000F98, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_1_PrimaryCachedSpace) == 0x000FE0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_1_SecondaryCachedSpace) == 0x000FF0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_1_bIsInitialized) == 0x001000, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_8_1_Value) == 0x001010, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_8_1_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_6_1_Value) == 0x001030, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_6_1_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_1_Buffer) == 0x001038, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_1_LastInsertIndex) == 0x001048, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_6_1_Rotator__IO) == 0x001058, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_6_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_1_Value__IO) == 0x001070, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_1_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_1_Weight) == 0x0010D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_1_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_1_CachedIndex) == 0x0010D8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_6_2_Result) == 0x0010F0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_6_2_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_7_2_Result) == 0x001110, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_7_2_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_2_Transform) == 0x001130, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_2_CachedIndex) == 0x001190, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_7_2_Value) == 0x0011A0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_7_2_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_2_Result) == 0x0011C0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_2_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_6_2_Result) == 0x0011C4, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_6_2_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_8_2_Result) == 0x0011C8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_8_2_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_2_Result) == 0x0011E0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_2_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_6_2_Global) == 0x001240, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_6_2_Global' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_2_Primary__IO) == 0x001258, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_2_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_2_PrimaryCachedSpace) == 0x0012A0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_2_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_2_SecondaryCachedSpace) == 0x0012B0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_2_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_2_bIsInitialized) == 0x0012C0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_2_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_8_2_Value) == 0x0012D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_8_2_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_6_2_Value) == 0x0012F0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_6_2_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_2_Buffer) == 0x0012F8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_2_Buffer' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_2_LastInsertIndex) == 0x001308, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_2_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_6_2_Rotator__IO) == 0x001318, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_6_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_2_Value__IO) == 0x001330, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_2_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_2_Weight) == 0x001390, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_2_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_2_CachedIndex) == 0x001398, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_6_1_1_Result) == 0x0013B0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_6_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_7_1_1_Result) == 0x0013D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_7_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_1_1_Transform) == 0x0013F0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_1_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_6_1_1_CachedIndex) == 0x001450, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_6_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_7_1_1_Value) == 0x001460, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_7_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_1_1_Result) == 0x001480, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_6_1_1_Result) == 0x001484, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_6_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_8_1_1_Result) == 0x001488, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_8_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_1_1_Result) == 0x0014A0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_6_1_1_Global) == 0x001500, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_6_1_1_Global' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_1_1_Primary__IO) == 0x001518, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_1_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_1_1_PrimaryCachedSpace) == 0x001560, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_1_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_1_1_SecondaryCachedSpace) == 0x001570, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_1_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_6_1_1_bIsInitialized) == 0x001580, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_6_1_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_8_1_1_Value) == 0x001590, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_8_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_6_1_1_Value) == 0x0015B0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_6_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_1_1_Buffer) == 0x0015B8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_1_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_6_1_1_LastInsertIndex) == 0x0015C8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_6_1_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_6_1_1_Rotator__IO) == 0x0015D8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_6_1_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_1_1_Value__IO) == 0x0015F0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_1_1_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_1_1_Weight) == 0x001650, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_1_1_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_6_1_1_CachedIndex) == 0x001658, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_6_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_Transform) == 0x001670, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_CachedIndex) == 0x0016D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_Primary__IO) == 0x0016E0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_Weight) == 0x001728, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_CachedItem) == 0x001730, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_PrimaryCachedSpace) == 0x001740, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_SecondaryCachedSpace) == 0x001750, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_bIsInitialized) == 0x001760, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_Transform) == 0x001770, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_CachedIndex) == 0x0017D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_Primary__IO) == 0x0017E0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_Weight) == 0x001828, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_CachedItem) == 0x001830, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_PrimaryCachedSpace) == 0x001840, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_SecondaryCachedSpace) == 0x001850, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_bIsInitialized) == 0x001860, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_1_Transform) == 0x001870, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_1_CachedIndex) == 0x0018D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_Primary__IO) == 0x0018E0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_Weight) == 0x001928, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_CachedItem) == 0x001930, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_PrimaryCachedSpace) == 0x001940, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_SecondaryCachedSpace) == 0x001950, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_2_bIsInitialized) == 0x001960, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_2_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_1_Transform) == 0x001970, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_1_CachedIndex) == 0x0019D0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_Primary__IO) == 0x0019E0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_Weight) == 0x001A28, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_CachedItem) == 0x001A30, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_PrimaryCachedSpace) == 0x001A40, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_SecondaryCachedSpace) == 0x001A50, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_1_bIsInitialized) == 0x001A60, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_2_Transform) == 0x001A70, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_2_CachedIndex) == 0x001AD0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_Primary__IO) == 0x001AE0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_Weight) == 0x001B28, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_CachedItem) == 0x001B30, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_PrimaryCachedSpace) == 0x001B40, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_SecondaryCachedSpace) == 0x001B50, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_3_bIsInitialized) == 0x001B60, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_3_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_2_Transform) == 0x001B70, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_2_CachedIndex) == 0x001BD0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_2_Primary__IO) == 0x001BE0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_2_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_2_Weight) == 0x001C28, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_2_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_2_CachedItem) == 0x001C30, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_2_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_2_PrimaryCachedSpace) == 0x001C40, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_2_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_2_SecondaryCachedSpace) == 0x001C50, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_2_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_2_bIsInitialized) == 0x001C60, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_2_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_3_Transform) == 0x001C70, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_3_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_3_CachedIndex) == 0x001CD0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_Primary__IO) == 0x001CE0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_Weight) == 0x001D28, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_CachedItem) == 0x001D30, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_PrimaryCachedSpace) == 0x001D40, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_SecondaryCachedSpace) == 0x001D50, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_4_bIsInitialized) == 0x001D60, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_4_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_3_Transform) == 0x001D70, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_3_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_3_CachedIndex) == 0x001DD0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_3_Primary__IO) == 0x001DE0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_3_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_3_Weight) == 0x001E28, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_3_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_3_CachedItem) == 0x001E30, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_3_CachedItem' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_3_PrimaryCachedSpace) == 0x001E40, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_3_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_3_SecondaryCachedSpace) == 0x001E50, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_3_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___AimItem_1_3_bIsInitialized) == 0x001E60, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___AimItem_1_3_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Work, RigVMModel___Branch_BlockToRun) == 0x001E70, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Work::RigVMModel___Branch_BlockToRun' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_COL_Chassis_CtrlRig.RigVMMemory_Literal
// 0x03C0 (0x03F0 - 0x0030)
class SK_COL_Chassis_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___RigUnit_SetRotation_Item__Const;      // 0x0030(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___RigUnit_SetRotation_Space__Const;     // 0x003C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_SetRotation_bInitial__Const;  // 0x003D(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigVMModel___RigUnit_SetRotation_Weight__Const;    // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_SetRotation_bPropagateToChildren__Const; // 0x0044(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigVMModel___MathFloatGreater_B__Const;            // 0x0048(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_Item__Const;     // 0x004C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_Value__Const;    // 0x0060(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__Const; // 0x00C0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__Const;           // 0x00D8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Secondary__Const;         // 0x0120(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimBone_DebugSettings         RigVMModel___AimBoneMath_DebugSettings__Const;     // 0x0170(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_Minimum__Const;        // 0x01E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___KalmanFloat_BufferSize__Const;        // 0x01E4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_1_Item__Const;   // 0x01E8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_4_Item__Const;   // 0x01F4(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_5_Item__Const;   // 0x0200(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_6_Item__Const;   // 0x020C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_218[0x8];                                      // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_6_Value__Const;  // 0x0220(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_6_Primary__Const;         // 0x0280(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_6_Secondary__Const;       // 0x02C8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_6_Minimum__Const;      // 0x0310(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_6_1_Item__Const; // 0x0314(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_6_2_Item__Const; // 0x0320(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_6_1_1_Item__Const; // 0x032C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_Item__Const;                  // 0x0338(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_Primary__Const;               // 0x0348(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_3_Item__Const;   // 0x0390(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_2_Item__Const;                // 0x039C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_3_1_Item__Const; // 0x03A8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_3_Item__Const;                // 0x03B4(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_3_2_Item__Const; // 0x03C0(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_4_Item__Const;                // 0x03CC(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_GetTransform_3_3_Item__Const; // 0x03D8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_COL_Chassis_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class SK_COL_Chassis_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_COL_Chassis_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on SK_COL_Chassis_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal) == 0x0003F0, "Wrong size on SK_COL_Chassis_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRotation_Item__Const) == 0x000030, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRotation_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRotation_Space__Const) == 0x00003C, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRotation_Space__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRotation_bInitial__Const) == 0x00003D, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRotation_bInitial__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRotation_Weight__Const) == 0x000040, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRotation_Weight__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRotation_bPropagateToChildren__Const) == 0x000044, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRotation_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatGreater_B__Const) == 0x000048, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatGreater_B__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Item__Const) == 0x00004C, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Value__Const) == 0x000060, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Value__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___MathQuaternionFromRotator_Rotator__Const) == 0x0000C0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___MathQuaternionFromRotator_Rotator__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Primary__Const) == 0x0000D8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Secondary__Const) == 0x000120, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_DebugSettings__Const) == 0x000170, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Minimum__Const) == 0x0001E0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_BufferSize__Const) == 0x0001E4, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_1_Item__Const) == 0x0001E8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_4_Item__Const) == 0x0001F4, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_4_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_5_Item__Const) == 0x000200, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_5_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_6_Item__Const) == 0x00020C, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_6_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_6_Value__Const) == 0x000220, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_6_Value__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_6_Primary__Const) == 0x000280, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_6_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_6_Secondary__Const) == 0x0002C8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_6_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_6_Minimum__Const) == 0x000310, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_6_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_6_1_Item__Const) == 0x000314, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_6_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_6_2_Item__Const) == 0x000320, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_6_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_6_1_1_Item__Const) == 0x00032C, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_6_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___AimItem_Item__Const) == 0x000338, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___AimItem_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___AimItem_Primary__Const) == 0x000348, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___AimItem_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_3_Item__Const) == 0x000390, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_3_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___AimItem_2_Item__Const) == 0x00039C, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___AimItem_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_3_1_Item__Const) == 0x0003A8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_3_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___AimItem_3_Item__Const) == 0x0003B4, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___AimItem_3_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_3_2_Item__Const) == 0x0003C0, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_3_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___AimItem_4_Item__Const) == 0x0003CC, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___AimItem_4_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Chassis_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_GetTransform_3_3_Item__Const) == 0x0003D8, "Member 'SK_COL_Chassis_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_GetTransform_3_3_Item__Const' has a wrong offset!");

// ControlRigBlueprintGeneratedClass SK_COL_Chassis_CtrlRig.SK_COL_Chassis_CtrlRig_C
// 0x00E0 (0x04E0 - 0x0400)
class USK_COL_Chassis_CtrlRig_C final : public UControlRig
{
public:
	struct FRotator                               BodyRotationOffset;                                // 0x0400(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Target_Leg_Front_L;                                // 0x0418(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Leg_Front_R;                                // 0x0430(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Leg_Rear_L;                                 // 0x0448(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Leg_Rear_R;                                 // 0x0460(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Foot_Front_L;                               // 0x0478(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Foot_Front_R;                               // 0x0490(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Foot_Rear_L;                                // 0x04A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Foot_Rear_R;                                // 0x04C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IKWeight;                                          // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SK_COL_Chassis_CtrlRig_C">();
	}
	static class USK_COL_Chassis_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USK_COL_Chassis_CtrlRig_C>();
	}
};
static_assert(alignof(USK_COL_Chassis_CtrlRig_C) == 0x000008, "Wrong alignment on USK_COL_Chassis_CtrlRig_C");
static_assert(sizeof(USK_COL_Chassis_CtrlRig_C) == 0x0004E0, "Wrong size on USK_COL_Chassis_CtrlRig_C");
static_assert(offsetof(USK_COL_Chassis_CtrlRig_C, BodyRotationOffset) == 0x000400, "Member 'USK_COL_Chassis_CtrlRig_C::BodyRotationOffset' has a wrong offset!");
static_assert(offsetof(USK_COL_Chassis_CtrlRig_C, Target_Leg_Front_L) == 0x000418, "Member 'USK_COL_Chassis_CtrlRig_C::Target_Leg_Front_L' has a wrong offset!");
static_assert(offsetof(USK_COL_Chassis_CtrlRig_C, Target_Leg_Front_R) == 0x000430, "Member 'USK_COL_Chassis_CtrlRig_C::Target_Leg_Front_R' has a wrong offset!");
static_assert(offsetof(USK_COL_Chassis_CtrlRig_C, Target_Leg_Rear_L) == 0x000448, "Member 'USK_COL_Chassis_CtrlRig_C::Target_Leg_Rear_L' has a wrong offset!");
static_assert(offsetof(USK_COL_Chassis_CtrlRig_C, Target_Leg_Rear_R) == 0x000460, "Member 'USK_COL_Chassis_CtrlRig_C::Target_Leg_Rear_R' has a wrong offset!");
static_assert(offsetof(USK_COL_Chassis_CtrlRig_C, Target_Foot_Front_L) == 0x000478, "Member 'USK_COL_Chassis_CtrlRig_C::Target_Foot_Front_L' has a wrong offset!");
static_assert(offsetof(USK_COL_Chassis_CtrlRig_C, Target_Foot_Front_R) == 0x000490, "Member 'USK_COL_Chassis_CtrlRig_C::Target_Foot_Front_R' has a wrong offset!");
static_assert(offsetof(USK_COL_Chassis_CtrlRig_C, Target_Foot_Rear_L) == 0x0004A8, "Member 'USK_COL_Chassis_CtrlRig_C::Target_Foot_Rear_L' has a wrong offset!");
static_assert(offsetof(USK_COL_Chassis_CtrlRig_C, Target_Foot_Rear_R) == 0x0004C0, "Member 'USK_COL_Chassis_CtrlRig_C::Target_Foot_Rear_R' has a wrong offset!");
static_assert(offsetof(USK_COL_Chassis_CtrlRig_C, IKWeight) == 0x0004D8, "Member 'USK_COL_Chassis_CtrlRig_C::IKWeight' has a wrong offset!");

}

