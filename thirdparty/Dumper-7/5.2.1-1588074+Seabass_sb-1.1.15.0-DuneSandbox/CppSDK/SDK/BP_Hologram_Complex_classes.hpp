#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Hologram_Complex

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Hologram_Complex.BP_Hologram_Complex_C
// 0x0120 (0x0470 - 0x0350)
class ABP_Hologram_Complex_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_ProjectiorMesh;                                 // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SMHologramMesh;                                    // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SKHologramMesh;                                    // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      HologramVFX;                                       // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTextureParameterValue>         TexPar;                                            // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Mask_R;                                            // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mask_G;                                            // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mask_B;                                            // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlitchNoise;                                       // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkeletalMesh;                                    // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                MeshObject;                                        // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         BeamAttenuation;                                   // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamGlow;                                          // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamOffset;                                        // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamWidth;                                         // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerAttenuation;                                  // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerGlow;                                         // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerOffset;                                       // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerWidth;                                        // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareGlow;                                         // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareSize;                                         // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareZOffset;                                      // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HueshiftColorCorrection;                           // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Source_Material;                                   // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        RotateSpeed;                                       // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldRotate;                                      // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxJitter;                                         // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinJitter;                                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rng;                                               // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InnerFresnelOffset;                                // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamDesaturation;                                  // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynM;                                              // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSingleAnimationPlayData               Animation_Data;                                    // 0x0450(0x0018)(Edit, BlueprintVisible, NoDestructor)
	bool                                          ApplyAnimationData;                                // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SetMaterialTexuresToInstances();
	void SetDynMaterialParameters(class UMaterialInstanceDynamic* DynMat);
	void Set_Niagara_Variables(class UNiagaraComponent* NSComp);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_Hologram_Complex(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Hologram_Complex_C">();
	}
	static class ABP_Hologram_Complex_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Hologram_Complex_C>();
	}
};
static_assert(alignof(ABP_Hologram_Complex_C) == 0x000008, "Wrong alignment on ABP_Hologram_Complex_C");
static_assert(sizeof(ABP_Hologram_Complex_C) == 0x000470, "Wrong size on ABP_Hologram_Complex_C");
static_assert(offsetof(ABP_Hologram_Complex_C, UberGraphFrame) == 0x000350, "Member 'ABP_Hologram_Complex_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, SM_ProjectiorMesh) == 0x000358, "Member 'ABP_Hologram_Complex_C::SM_ProjectiorMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, SMHologramMesh) == 0x000360, "Member 'ABP_Hologram_Complex_C::SMHologramMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, SKHologramMesh) == 0x000368, "Member 'ABP_Hologram_Complex_C::SKHologramMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, HologramVFX) == 0x000370, "Member 'ABP_Hologram_Complex_C::HologramVFX' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, PointLight) == 0x000378, "Member 'ABP_Hologram_Complex_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, DefaultSceneRoot) == 0x000380, "Member 'ABP_Hologram_Complex_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, Color) == 0x000388, "Member 'ABP_Hologram_Complex_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, TexPar) == 0x000398, "Member 'ABP_Hologram_Complex_C::TexPar' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, Mask_R) == 0x0003A8, "Member 'ABP_Hologram_Complex_C::Mask_R' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, Mask_G) == 0x0003B0, "Member 'ABP_Hologram_Complex_C::Mask_G' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, Mask_B) == 0x0003B8, "Member 'ABP_Hologram_Complex_C::Mask_B' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, GlitchNoise) == 0x0003C0, "Member 'ABP_Hologram_Complex_C::GlitchNoise' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, IsSkeletalMesh) == 0x0003C8, "Member 'ABP_Hologram_Complex_C::IsSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, MeshObject) == 0x0003D0, "Member 'ABP_Hologram_Complex_C::MeshObject' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, BeamAttenuation) == 0x0003D8, "Member 'ABP_Hologram_Complex_C::BeamAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, BeamGlow) == 0x0003DC, "Member 'ABP_Hologram_Complex_C::BeamGlow' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, BeamOffset) == 0x0003E0, "Member 'ABP_Hologram_Complex_C::BeamOffset' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, BeamWidth) == 0x0003E4, "Member 'ABP_Hologram_Complex_C::BeamWidth' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, InnerAttenuation) == 0x0003E8, "Member 'ABP_Hologram_Complex_C::InnerAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, InnerGlow) == 0x0003EC, "Member 'ABP_Hologram_Complex_C::InnerGlow' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, InnerOffset) == 0x0003F0, "Member 'ABP_Hologram_Complex_C::InnerOffset' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, InnerWidth) == 0x0003F4, "Member 'ABP_Hologram_Complex_C::InnerWidth' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, FlareGlow) == 0x0003F8, "Member 'ABP_Hologram_Complex_C::FlareGlow' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, FlareSize) == 0x0003FC, "Member 'ABP_Hologram_Complex_C::FlareSize' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, FlareZOffset) == 0x000400, "Member 'ABP_Hologram_Complex_C::FlareZOffset' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, HueshiftColorCorrection) == 0x000404, "Member 'ABP_Hologram_Complex_C::HueshiftColorCorrection' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, Source_Material) == 0x000408, "Member 'ABP_Hologram_Complex_C::Source_Material' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, RotateSpeed) == 0x000410, "Member 'ABP_Hologram_Complex_C::RotateSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, ShouldRotate) == 0x000418, "Member 'ABP_Hologram_Complex_C::ShouldRotate' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, MaxJitter) == 0x000420, "Member 'ABP_Hologram_Complex_C::MaxJitter' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, MinJitter) == 0x000428, "Member 'ABP_Hologram_Complex_C::MinJitter' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, Rng) == 0x000430, "Member 'ABP_Hologram_Complex_C::Rng' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, InnerFresnelOffset) == 0x000438, "Member 'ABP_Hologram_Complex_C::InnerFresnelOffset' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, BeamDesaturation) == 0x000440, "Member 'ABP_Hologram_Complex_C::BeamDesaturation' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, DynM) == 0x000448, "Member 'ABP_Hologram_Complex_C::DynM' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, Animation_Data) == 0x000450, "Member 'ABP_Hologram_Complex_C::Animation_Data' has a wrong offset!");
static_assert(offsetof(ABP_Hologram_Complex_C, ApplyAnimationData) == 0x000468, "Member 'ABP_Hologram_Complex_C::ApplyAnimationData' has a wrong offset!");

}

