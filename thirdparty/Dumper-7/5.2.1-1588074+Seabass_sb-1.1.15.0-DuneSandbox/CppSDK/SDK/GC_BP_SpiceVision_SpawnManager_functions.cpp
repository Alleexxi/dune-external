#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_BP_SpiceVision_SpawnManager

#include "Basic.hpp"

#include "GC_BP_SpiceVision_SpawnManager_classes.hpp"
#include "GC_BP_SpiceVision_SpawnManager_parameters.hpp"


namespace SDK
{

// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Can Spawn Actor
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSpiceVisionActorTuning>* OutputPin                                              (Parm, OutParm)
// class FString*                          Reason                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

bool AGC_BP_SpiceVision_SpawnManager_C::Can_Spawn_Actor(TArray<struct FSpiceVisionActorTuning>* OutputPin, class FString* Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Can Spawn Actor");

	Params::GC_BP_SpiceVision_SpawnManager_C_Can_Spawn_Actor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutputPin != nullptr)
		*OutputPin = std::move(Parms.OutputPin);

	if (Reason != nullptr)
		*Reason = std::move(Parms.Reason);

	return Parms.ReturnValue;
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Clear Resources
// (Private, BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::Clear_Resources()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Clear Resources");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.DestroyIntroParticles
// (BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::DestroyIntroParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "DestroyIntroParticles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.ExecuteUbergraph_GC_BP_SpiceVision_SpawnManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::ExecuteUbergraph_GC_BP_SpiceVision_SpawnManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "ExecuteUbergraph_GC_BP_SpiceVision_SpawnManager");

	Params::GC_BP_SpiceVision_SpawnManager_C_ExecuteUbergraph_GC_BP_SpiceVision_SpawnManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Get Cone Angle
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FSpiceVisionAddictionLevelData&SpiceVisionAddictionLevelData                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FSpiceVisionActorTuning&   SpiceVisionActorTuning                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double*                                 ConeAngle                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::Get_Cone_Angle(const struct FSpiceVisionAddictionLevelData& SpiceVisionAddictionLevelData, const struct FSpiceVisionActorTuning& SpiceVisionActorTuning, double* ConeAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Get Cone Angle");

	Params::GC_BP_SpiceVision_SpawnManager_C_Get_Cone_Angle Parms{};

	Parms.SpiceVisionAddictionLevelData = std::move(SpiceVisionAddictionLevelData);
	Parms.SpiceVisionActorTuning = std::move(SpiceVisionActorTuning);

	UObject::ProcessEvent(Func, &Parms);

	if (ConeAngle != nullptr)
		*ConeAngle = Parms.ConeAngle;
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Get Cone Direction
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AGC_BP_SpiceVision_SpawnManager_C::Get_Cone_Direction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Get Cone Direction");

	Params::GC_BP_SpiceVision_SpawnManager_C_Get_Cone_Direction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Get Spawn Distances
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FSpiceVisionAddictionLevelData&SpiceVisionAddictionLevelData                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FSpiceVisionActorVariations&SpiceVisionActorVariations                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double*                                 MinSpawnDistance                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 MaxSpawnDistance                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::Get_Spawn_Distances(const struct FSpiceVisionAddictionLevelData& SpiceVisionAddictionLevelData, const struct FSpiceVisionActorVariations& SpiceVisionActorVariations, double* MinSpawnDistance, double* MaxSpawnDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Get Spawn Distances");

	Params::GC_BP_SpiceVision_SpawnManager_C_Get_Spawn_Distances Parms{};

	Parms.SpiceVisionAddictionLevelData = std::move(SpiceVisionAddictionLevelData);
	Parms.SpiceVisionActorVariations = std::move(SpiceVisionActorVariations);

	UObject::ProcessEvent(Func, &Parms);

	if (MinSpawnDistance != nullptr)
		*MinSpawnDistance = Parms.MinSpawnDistance;

	if (MaxSpawnDistance != nullptr)
		*MaxSpawnDistance = Parms.MaxSpawnDistance;
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Handle on Active
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayCueParameters&    Parameters                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void AGC_BP_SpiceVision_SpawnManager_C::Handle_on_Active(const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Handle on Active");

	Params::GC_BP_SpiceVision_SpawnManager_C_Handle_on_Active Parms{};

	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.On Destroyed Sand Structure
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid&                           ActorEntryGuid                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::On_Destroyed_Sand_Structure(struct FGuid& ActorEntryGuid, class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "On Destroyed Sand Structure");

	Params::GC_BP_SpiceVision_SpawnManager_C_On_Destroyed_Sand_Structure Parms{};

	Parms.ActorEntryGuid = std::move(ActorEntryGuid);
	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);

	ActorEntryGuid = std::move(Parms.ActorEntryGuid);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.OnActive
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MyTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayCueParameters&    Parameters                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AGC_BP_SpiceVision_SpawnManager_C::OnActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "OnActive");

	Params::GC_BP_SpiceVision_SpawnManager_C_OnActive Parms{};

	Parms.MyTarget = MyTarget;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.OnExecute
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MyTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayCueParameters&    Parameters                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AGC_BP_SpiceVision_SpawnManager_C::OnExecute(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "OnExecute");

	Params::GC_BP_SpiceVision_SpawnManager_C_OnExecute Parms{};

	Parms.MyTarget = MyTarget;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.OnLoaded_016E09A14D0EE94A4C8C24865E4C8FC8
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::OnLoaded_016E09A14D0EE94A4C8C24865E4C8FC8(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "OnLoaded_016E09A14D0EE94A4C8C24865E4C8FC8");

	Params::GC_BP_SpiceVision_SpawnManager_C_OnLoaded_016E09A14D0EE94A4C8C24865E4C8FC8 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.OnLoaded_434BBEEE420830F08F169F87A64BB678
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::OnLoaded_434BBEEE420830F08F169F87A64BB678(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "OnLoaded_434BBEEE420830F08F169F87A64BB678");

	Params::GC_BP_SpiceVision_SpawnManager_C_OnLoaded_434BBEEE420830F08F169F87A64BB678 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.OnLoaded_6B2D493346F2176604A42699E9EEDCD5
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::OnLoaded_6B2D493346F2176604A42699E9EEDCD5(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "OnLoaded_6B2D493346F2176604A42699E9EEDCD5");

	Params::GC_BP_SpiceVision_SpawnManager_C_OnLoaded_6B2D493346F2176604A42699E9EEDCD5 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.OnLoaded_D9ECC3A64C89214F72C2AF9A28072754
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::OnLoaded_D9ECC3A64C89214F72C2AF9A28072754(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "OnLoaded_D9ECC3A64C89214F72C2AF9A28072754");

	Params::GC_BP_SpiceVision_SpawnManager_C_OnLoaded_D9ECC3A64C89214F72C2AF9A28072754 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.OnRemove
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MyTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayCueParameters&    Parameters                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AGC_BP_SpiceVision_SpawnManager_C::OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "OnRemove");

	Params::GC_BP_SpiceVision_SpawnManager_C_OnRemove Parms{};

	Parms.MyTarget = MyTarget;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.PlayVisionIntro
// (BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::PlayVisionIntro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "PlayVisionIntro");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.RespawnActor
// (BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::RespawnActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "RespawnActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.RespawnVFX
// (BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::RespawnVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "RespawnVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Set Timer For Actor Spawning
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SpiceVisionPlayTime_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::Set_Timer_For_Actor_Spawning(float SpiceVisionPlayTime_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Set Timer For Actor Spawning");

	Params::GC_BP_SpiceVision_SpawnManager_C_Set_Timer_For_Actor_Spawning Parms{};

	Parms.SpiceVisionPlayTime_0 = SpiceVisionPlayTime_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Should Spawn Actor
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   ShouldSpawnActor                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::Should_Spawn_Actor(bool* ShouldSpawnActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Should Spawn Actor");

	Params::GC_BP_SpiceVision_SpawnManager_C_Should_Spawn_Actor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShouldSpawnActor != nullptr)
		*ShouldSpawnActor = Parms.ShouldSpawnActor;
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Should Spawn VFX
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   ShouldSpawnActor                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::Should_Spawn_VFX(bool* ShouldSpawnActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Should Spawn VFX");

	Params::GC_BP_SpiceVision_SpawnManager_C_Should_Spawn_VFX Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShouldSpawnActor != nullptr)
		*ShouldSpawnActor = Parms.ShouldSpawnActor;
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Spawn Actor
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSpiceVisionActorTuning&   SpiceVisionActorTuning                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UClass*                           SpiceVisionActorBaseClass                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::Spawn_Actor(const struct FSpiceVisionActorTuning& SpiceVisionActorTuning, class UClass* SpiceVisionActorBaseClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Spawn Actor");

	Params::GC_BP_SpiceVision_SpawnManager_C_Spawn_Actor Parms{};

	Parms.SpiceVisionActorTuning = std::move(SpiceVisionActorTuning);
	Parms.SpiceVisionActorBaseClass = SpiceVisionActorBaseClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.SpiceVisionLoadedAssetsCore
// (Event, Protected, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::SpiceVisionLoadedAssetsCore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "SpiceVisionLoadedAssetsCore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.SpiceVisionLoadedAssetsForSingleVariation
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSpiceVisionActorTuning&   VisionVariationTuning                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   SpiceVisionPlayTime_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSubclassOf<class ASpiceVisionActorBase>SpiceVisionActorBaseClass                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::SpiceVisionLoadedAssetsForSingleVariation(const struct FSpiceVisionActorTuning& VisionVariationTuning, float SpiceVisionPlayTime_0, TSubclassOf<class ASpiceVisionActorBase> SpiceVisionActorBaseClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "SpiceVisionLoadedAssetsForSingleVariation");

	Params::GC_BP_SpiceVision_SpawnManager_C_SpiceVisionLoadedAssetsForSingleVariation Parms{};

	Parms.VisionVariationTuning = std::move(VisionVariationTuning);
	Parms.SpiceVisionPlayTime_0 = SpiceVisionPlayTime_0;
	Parms.SpiceVisionActorBaseClass = SpiceVisionActorBaseClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.SpiceVisionPreloadedAssetsVariationsSubsetForState
// (Event, Protected, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::SpiceVisionPreloadedAssetsVariationsSubsetForState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "SpiceVisionPreloadedAssetsVariationsSubsetForState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.StartActorSpawning
// (BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::StartActorSpawning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "StartActorSpawning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.StartSpiceVisionSFX
// (BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::StartSpiceVisionSFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "StartSpiceVisionSFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.StartVFXSpawning
// (BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::StartVFXSpawning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "StartVFXSpawning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Stop Spice Vision
// (Public, BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::Stop_Spice_Vision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Stop Spice Vision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Stop Vision Intro
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::Stop_Vision_Intro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Stop Vision Intro");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.StopSpiceVisionSFX
// (BlueprintCallable, BlueprintEvent)

void AGC_BP_SpiceVision_SpawnManager_C::StopSpiceVisionSFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "StopSpiceVisionSFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Try To Load Single Variation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             InPlayTimeOfSpiceVision                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::Try_To_Load_Single_Variation(const float InPlayTimeOfSpiceVision, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Try To Load Single Variation");

	Params::GC_BP_SpiceVision_SpawnManager_C_Try_To_Load_Single_Variation Parms{};

	Parms.InPlayTimeOfSpiceVision = InPlayTimeOfSpiceVision;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Update Spawned Actor Amount During Vision
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGuid&                     Guid                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::Update_Spawned_Actor_Amount_During_Vision(const struct FGuid& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Update Spawned Actor Amount During Vision");

	Params::GC_BP_SpiceVision_SpawnManager_C_Update_Spawned_Actor_Amount_During_Vision Parms{};

	Parms.Guid = std::move(Guid);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C.Update Spawned Actor Type Amount
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGuid&                     Guid                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_SpiceVision_SpawnManager_C::Update_Spawned_Actor_Type_Amount(const struct FGuid& Guid, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_SpiceVision_SpawnManager_C", "Update Spawned Actor Type Amount");

	Params::GC_BP_SpiceVision_SpawnManager_C_Update_Spawned_Actor_Type_Amount Parms{};

	Parms.Guid = std::move(Guid);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}

}

