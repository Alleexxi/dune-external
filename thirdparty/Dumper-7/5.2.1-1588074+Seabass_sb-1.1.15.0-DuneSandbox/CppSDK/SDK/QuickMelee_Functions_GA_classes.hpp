#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuickMelee_Functions_GA

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "FMeleeAttackWindowData_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass QuickMelee_Functions_GA.QuickMelee_Functions_GA_C
// 0x03A0 (0x08D0 - 0x0530)
class UQuickMelee_Functions_GA_C final : public UDuneGameplayAction
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 OwnerActor;                                        // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         OwnerCharacter;                                    // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CapsuleTraceForwardOffsetStart;                    // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CapsuleTraceForwardOffsetEnd;                      // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeaponLength;                                      // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitBoxLength;                                      // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoiseDamageData                       PoiseDamage;                                       // 0x0568(0x000C)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor)
	bool                                          ShouldUseDefaultTracePositions;                    // 0x0574(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFirstTrace;                                      // 0x0575(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSingleTargetAttack;                              // 0x0576(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               HitSweepDebugDrawType;                             // 0x0577(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x0578(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor)
	class ADunePlayerCharacter*                   OwnerPlayerCharacter;                              // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AController*                            ActorController;                                   // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimationComplete;                                 // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMeleeType                                    MeleeType;                                         // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MeleePredictionWindowOpen;                         // 0x0592(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnteredSubstateFromThisAbility;                    // 0x0593(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastAttackCameFromRight;                           // 0x0594(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_595[0x3];                                      // 0x0595(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputTriggerCounter;                               // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasValidMeleeWeaponMesh;                           // 0x059C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59D[0x3];                                      // 0x059D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           QuickMeleeMontageToPlay;                           // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   MeleeSocketNameEnd;                                // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MeleeSocketNameStart;                              // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector3f                              DefaultTraceStart;                                 // 0x05B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector3f                              DefaultTraceEnd;                                   // 0x05C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector3f                              PreviousTraceCoordinate;                           // 0x05D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          SwishAudio;                                        // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HitBoxOrientation;                                 // 0x05E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        HitBoxLengthTunableOffsetSword;                    // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitBoxLengthTunableOffsetDagger;                   // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitBoxWidth;                                       // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitBoxHeight;                                      // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastRightMeleeIndexUsed;                           // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MeleeWeaponSocketLocationHilt;                     // 0x0628(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MeleeWeaponSocketLocationBlade;                    // 0x0640(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastLeftMeleeIndexUsed;                            // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   MeleeAnimsNPC;                                     // 0x0660(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   SwordMeleeAnimsNPC;                                // 0x0670(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance)
	double                                        WeaponLengthOffset;                                // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCachedMeleeWeaponData                 CachedMeleeWeaponData;                             // 0x0688(0x01B0)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	bool                                          ReleasedInput;                                     // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeToHoldInputForSlowAttack;                      // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayEffectToApply>         AdditionalGameplayEffectsToApply;                  // 0x0848(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	double                                        BoxTracePositionOffset;                            // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitLagFramesToWait;                                // 0x0860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitLagFrameCount;                                  // 0x0864(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NpcComboAttackLimit;                               // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86C[0x4];                                      // 0x086C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask*                           PlayMontageAbilityTaskRef;                         // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           SlowMeleeMontageToPlay;                            // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 AbilityCostSetByCaller;                            // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFMeleeAttackWindowData                HitTraceWindowDataNPC;                             // 0x0888(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          QuickAttackTriggered;                              // 0x0898(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTraceDebug;                                  // 0x0899(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89A[0x6];                                      // 0x089A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputPressWithDirection* WaitForInputAbilityTaskHandle;                   // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   SlowMontages;                                      // 0x08A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   QuickMontages;                                     // 0x08B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance)
	int32                                         ComboIndex;                                        // 0x08C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ValidateMeleeIndex(int32 CurrentMeleeIndex, int32 MeleeAnimArrayLength, bool AttackingFromRight, int32* ValidatedMeleeIndex);
	void TryExitMeleeSubstate();
	void TryEnterMeleeSubstate(bool* EnteredSubstate);
	void TriggerHitLag(bool ShouldPauseMontage);
	void Trigger_Slow_Attack(bool* Successful);
	void Trigger_Quick_Attack();
	void TraceForExecutionTarget(bool* TriggeringExecutionAttack);
	void StartWindup();
	void StartMeleeAttack();
	void Select_Melee_Animation(bool* Successful);
	void PlayUnsheatheFX();
	void PlaySwooshFX();
	void PlaySheatheFX();
	void PlayQuickAttackAnimation();
	void PlayerFaceForward();
	void OnRetrigger();
	void OnRelease_0A1E35734858BE58D89986939D587DAC(float TimeHeld);
	void OnInterrupted_DC0C26354CFA0B372CCB229CAAB92E3E();
	void OnInterrupted_505ABDB64A391C07387ED0A4968CE9E1();
	void OnFinish_91D6FCCA4BF59FA3183B16BD59697B2E();
	void OnFinish_24D6AC0D4950EACE6641199F2C93D009();
	void OnFinish_174097B145498FB824A169910FD979FE();
	void OnCompleted_DC0C26354CFA0B372CCB229CAAB92E3E();
	void OnCompleted_505ABDB64A391C07387ED0A4968CE9E1();
	void OnCancelled_DC0C26354CFA0B372CCB229CAAB92E3E();
	void OnCancelled_505ABDB64A391C07387ED0A4968CE9E1();
	void OnBlendOut_DC0C26354CFA0B372CCB229CAAB92E3E();
	void OnBlendOut_505ABDB64A391C07387ED0A4968CE9E1();
	void OnAttackTriggered();
	void OnAnimationComplete();
	void OnAbilityEndedNormally();
	void OnAbilityCanceled();
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_ActivateAbility();
	void InitializeDefaultsForRetrigger();
	void InitializeDefaults(bool* Successful);
	void ExecuteUbergraph_QuickMelee_Functions_GA(int32 EntryPoint);
	void CommitToMeleeAttack(bool IsQuickAttack, bool* Successful);
	bool CommitMeleeAbilityCost(bool IsQuickAttack);
	void CallEndAbilityWithReason(const class FString& EndReason);
	void CallCancelAbilityWithReason(const class FString& CancelReason);
	void CalculateDefaultTracePositions(class AActor* OwnerActor_0);
	void CalculateCurrentTracePositions(class FName SocketNameStart, class ADuneCharacter* OwnerCharacter_0, bool IsFirstTrace_0, class FName SocketNameEnd, struct FVector3f* Start, struct FVector3f* End);
	void BP_OnAvatarSet(const struct FGameplayAbilityActorInfo& InActorInfo);
	void AccessMeleeComponentForWeaponData(bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"QuickMelee_Functions_GA_C">();
	}
	static class UQuickMelee_Functions_GA_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuickMelee_Functions_GA_C>();
	}
};
static_assert(alignof(UQuickMelee_Functions_GA_C) == 0x000008, "Wrong alignment on UQuickMelee_Functions_GA_C");
static_assert(sizeof(UQuickMelee_Functions_GA_C) == 0x0008D0, "Wrong size on UQuickMelee_Functions_GA_C");
static_assert(offsetof(UQuickMelee_Functions_GA_C, UberGraphFrame) == 0x000530, "Member 'UQuickMelee_Functions_GA_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, OwnerActor) == 0x000538, "Member 'UQuickMelee_Functions_GA_C::OwnerActor' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, OwnerCharacter) == 0x000540, "Member 'UQuickMelee_Functions_GA_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, CapsuleTraceForwardOffsetStart) == 0x000548, "Member 'UQuickMelee_Functions_GA_C::CapsuleTraceForwardOffsetStart' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, CapsuleTraceForwardOffsetEnd) == 0x000550, "Member 'UQuickMelee_Functions_GA_C::CapsuleTraceForwardOffsetEnd' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, WeaponLength) == 0x000558, "Member 'UQuickMelee_Functions_GA_C::WeaponLength' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HitBoxLength) == 0x000560, "Member 'UQuickMelee_Functions_GA_C::HitBoxLength' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, PoiseDamage) == 0x000568, "Member 'UQuickMelee_Functions_GA_C::PoiseDamage' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, ShouldUseDefaultTracePositions) == 0x000574, "Member 'UQuickMelee_Functions_GA_C::ShouldUseDefaultTracePositions' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, IsFirstTrace) == 0x000575, "Member 'UQuickMelee_Functions_GA_C::IsFirstTrace' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, IsSingleTargetAttack) == 0x000576, "Member 'UQuickMelee_Functions_GA_C::IsSingleTargetAttack' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HitSweepDebugDrawType) == 0x000577, "Member 'UQuickMelee_Functions_GA_C::HitSweepDebugDrawType' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, RandomStream) == 0x000578, "Member 'UQuickMelee_Functions_GA_C::RandomStream' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, OwnerPlayerCharacter) == 0x000580, "Member 'UQuickMelee_Functions_GA_C::OwnerPlayerCharacter' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, ActorController) == 0x000588, "Member 'UQuickMelee_Functions_GA_C::ActorController' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, AnimationComplete) == 0x000590, "Member 'UQuickMelee_Functions_GA_C::AnimationComplete' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, MeleeType) == 0x000591, "Member 'UQuickMelee_Functions_GA_C::MeleeType' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, MeleePredictionWindowOpen) == 0x000592, "Member 'UQuickMelee_Functions_GA_C::MeleePredictionWindowOpen' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, EnteredSubstateFromThisAbility) == 0x000593, "Member 'UQuickMelee_Functions_GA_C::EnteredSubstateFromThisAbility' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, LastAttackCameFromRight) == 0x000594, "Member 'UQuickMelee_Functions_GA_C::LastAttackCameFromRight' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, InputTriggerCounter) == 0x000598, "Member 'UQuickMelee_Functions_GA_C::InputTriggerCounter' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HasValidMeleeWeaponMesh) == 0x00059C, "Member 'UQuickMelee_Functions_GA_C::HasValidMeleeWeaponMesh' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, QuickMeleeMontageToPlay) == 0x0005A0, "Member 'UQuickMelee_Functions_GA_C::QuickMeleeMontageToPlay' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, MeleeSocketNameEnd) == 0x0005A8, "Member 'UQuickMelee_Functions_GA_C::MeleeSocketNameEnd' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, MeleeSocketNameStart) == 0x0005B0, "Member 'UQuickMelee_Functions_GA_C::MeleeSocketNameStart' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, DefaultTraceStart) == 0x0005B8, "Member 'UQuickMelee_Functions_GA_C::DefaultTraceStart' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, DefaultTraceEnd) == 0x0005C4, "Member 'UQuickMelee_Functions_GA_C::DefaultTraceEnd' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, PreviousTraceCoordinate) == 0x0005D0, "Member 'UQuickMelee_Functions_GA_C::PreviousTraceCoordinate' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, SwishAudio) == 0x0005E0, "Member 'UQuickMelee_Functions_GA_C::SwishAudio' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HitBoxOrientation) == 0x0005E8, "Member 'UQuickMelee_Functions_GA_C::HitBoxOrientation' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HitBoxLengthTunableOffsetSword) == 0x000600, "Member 'UQuickMelee_Functions_GA_C::HitBoxLengthTunableOffsetSword' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HitBoxLengthTunableOffsetDagger) == 0x000608, "Member 'UQuickMelee_Functions_GA_C::HitBoxLengthTunableOffsetDagger' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HitBoxWidth) == 0x000610, "Member 'UQuickMelee_Functions_GA_C::HitBoxWidth' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HitBoxHeight) == 0x000618, "Member 'UQuickMelee_Functions_GA_C::HitBoxHeight' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, LastRightMeleeIndexUsed) == 0x000620, "Member 'UQuickMelee_Functions_GA_C::LastRightMeleeIndexUsed' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, MeleeWeaponSocketLocationHilt) == 0x000628, "Member 'UQuickMelee_Functions_GA_C::MeleeWeaponSocketLocationHilt' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, MeleeWeaponSocketLocationBlade) == 0x000640, "Member 'UQuickMelee_Functions_GA_C::MeleeWeaponSocketLocationBlade' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, LastLeftMeleeIndexUsed) == 0x000658, "Member 'UQuickMelee_Functions_GA_C::LastLeftMeleeIndexUsed' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, MeleeAnimsNPC) == 0x000660, "Member 'UQuickMelee_Functions_GA_C::MeleeAnimsNPC' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, SwordMeleeAnimsNPC) == 0x000670, "Member 'UQuickMelee_Functions_GA_C::SwordMeleeAnimsNPC' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, WeaponLengthOffset) == 0x000680, "Member 'UQuickMelee_Functions_GA_C::WeaponLengthOffset' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, CachedMeleeWeaponData) == 0x000688, "Member 'UQuickMelee_Functions_GA_C::CachedMeleeWeaponData' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, ReleasedInput) == 0x000838, "Member 'UQuickMelee_Functions_GA_C::ReleasedInput' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, TimeToHoldInputForSlowAttack) == 0x000840, "Member 'UQuickMelee_Functions_GA_C::TimeToHoldInputForSlowAttack' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, AdditionalGameplayEffectsToApply) == 0x000848, "Member 'UQuickMelee_Functions_GA_C::AdditionalGameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, BoxTracePositionOffset) == 0x000858, "Member 'UQuickMelee_Functions_GA_C::BoxTracePositionOffset' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HitLagFramesToWait) == 0x000860, "Member 'UQuickMelee_Functions_GA_C::HitLagFramesToWait' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HitLagFrameCount) == 0x000864, "Member 'UQuickMelee_Functions_GA_C::HitLagFrameCount' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, NpcComboAttackLimit) == 0x000868, "Member 'UQuickMelee_Functions_GA_C::NpcComboAttackLimit' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, PlayMontageAbilityTaskRef) == 0x000870, "Member 'UQuickMelee_Functions_GA_C::PlayMontageAbilityTaskRef' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, SlowMeleeMontageToPlay) == 0x000878, "Member 'UQuickMelee_Functions_GA_C::SlowMeleeMontageToPlay' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, AbilityCostSetByCaller) == 0x000880, "Member 'UQuickMelee_Functions_GA_C::AbilityCostSetByCaller' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, HitTraceWindowDataNPC) == 0x000888, "Member 'UQuickMelee_Functions_GA_C::HitTraceWindowDataNPC' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, QuickAttackTriggered) == 0x000898, "Member 'UQuickMelee_Functions_GA_C::QuickAttackTriggered' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, EnableTraceDebug) == 0x000899, "Member 'UQuickMelee_Functions_GA_C::EnableTraceDebug' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, WaitForInputAbilityTaskHandle) == 0x0008A0, "Member 'UQuickMelee_Functions_GA_C::WaitForInputAbilityTaskHandle' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, SlowMontages) == 0x0008A8, "Member 'UQuickMelee_Functions_GA_C::SlowMontages' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, QuickMontages) == 0x0008B8, "Member 'UQuickMelee_Functions_GA_C::QuickMontages' has a wrong offset!");
static_assert(offsetof(UQuickMelee_Functions_GA_C, ComboIndex) == 0x0008C8, "Member 'UQuickMelee_Functions_GA_C::ComboIndex' has a wrong offset!");

}

