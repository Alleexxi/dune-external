#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_BP_SpiceVision_SpawnManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GC_BP_SpiceVision_SpawnManager.GC_BP_SpiceVision_SpawnManager_C
// 0x0308 (0x0720 - 0x0418)
class AGC_BP_SpiceVision_SpawnManager_C final : public ASpiceVisionGameplayCueNotifyActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0418(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SpawnTimer;                                        // 0x0428(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           VFXSpawnTimer;                                     // 0x0430(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SpawningTimerSum;                                  // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               IntroParticle;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        VFXSpawningTimerSum;                               // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         SpawnedStructures;                                 // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UNiagaraComponent*>              SpawnedIntroParticles;                             // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UNiagaraComponent*>              SpawnedMainParticles;                              // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FSpiceVisionAddictionLevelData         VisionTuning;                                      // 0x0480(0x0140)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGuid, int32>                     SpawnedActorTypeAmount;                            // 0x05C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           SpiceVisionTimer;                                  // 0x0610(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SpiceVisionPlayTime;                               // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESpiceState                                   Spice_State;                                       // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_621[0x7];                                      // 0x0621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyParticlesDelay;                             // 0x0630(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGuid, int32>                     SpawnedActorAmountDuringVision;                    // 0x0638(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDataTableRowHandle                    VisionRowHandle;                                   // 0x0688(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         SpiceAddictionLevel;                               // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              DTTuningSoftPtr;                                   // 0x06A0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Settings;                                          // 0x06D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   RowName;                                           // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSpiceVisionAddictionLevelData> TuningData;                                        // 0x0708(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsPlayingBackgroundSFX;                            // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool Can_Spawn_Actor(TArray<struct FSpiceVisionActorTuning>* OutputPin, class FString* Reason);
	void Clear_Resources();
	void DestroyIntroParticles();
	void ExecuteUbergraph_GC_BP_SpiceVision_SpawnManager(int32 EntryPoint);
	void Get_Cone_Angle(const struct FSpiceVisionAddictionLevelData& SpiceVisionAddictionLevelData, const struct FSpiceVisionActorTuning& SpiceVisionActorTuning, double* ConeAngle);
	struct FVector Get_Cone_Direction();
	void Get_Spawn_Distances(const struct FSpiceVisionAddictionLevelData& SpiceVisionAddictionLevelData, const struct FSpiceVisionActorVariations& SpiceVisionActorVariations, double* MinSpawnDistance, double* MaxSpawnDistance);
	void Handle_on_Active(const struct FGameplayCueParameters& Parameters);
	void On_Destroyed_Sand_Structure(struct FGuid& ActorEntryGuid, class AActor* DestroyedActor);
	bool OnActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	bool OnExecute(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnLoaded_016E09A14D0EE94A4C8C24865E4C8FC8(class UObject* Loaded);
	void OnLoaded_434BBEEE420830F08F169F87A64BB678(TSubclassOf<class UObject> Loaded);
	void OnLoaded_6B2D493346F2176604A42699E9EEDCD5(class UObject* Loaded);
	void OnLoaded_D9ECC3A64C89214F72C2AF9A28072754(class UObject* Loaded);
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void PlayVisionIntro();
	void RespawnActor();
	void RespawnVFX();
	void Set_Timer_For_Actor_Spawning(float SpiceVisionPlayTime_0);
	void Should_Spawn_Actor(bool* ShouldSpawnActor);
	void Should_Spawn_VFX(bool* ShouldSpawnActor);
	void Spawn_Actor(const struct FSpiceVisionActorTuning& SpiceVisionActorTuning, class UClass* SpiceVisionActorBaseClass);
	void SpiceVisionLoadedAssetsCore();
	void SpiceVisionLoadedAssetsForSingleVariation(const struct FSpiceVisionActorTuning& VisionVariationTuning, float SpiceVisionPlayTime_0, TSubclassOf<class ASpiceVisionActorBase> SpiceVisionActorBaseClass);
	void SpiceVisionPreloadedAssetsVariationsSubsetForState();
	void StartActorSpawning();
	void StartSpiceVisionSFX();
	void StartVFXSpawning();
	void Stop_Spice_Vision();
	void Stop_Vision_Intro();
	void StopSpiceVisionSFX();
	void Try_To_Load_Single_Variation(const float InPlayTimeOfSpiceVision, bool* Success);
	void Update_Spawned_Actor_Amount_During_Vision(const struct FGuid& Guid);
	void Update_Spawned_Actor_Type_Amount(const struct FGuid& Guid, int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GC_BP_SpiceVision_SpawnManager_C">();
	}
	static class AGC_BP_SpiceVision_SpawnManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGC_BP_SpiceVision_SpawnManager_C>();
	}
};
static_assert(alignof(AGC_BP_SpiceVision_SpawnManager_C) == 0x000008, "Wrong alignment on AGC_BP_SpiceVision_SpawnManager_C");
static_assert(sizeof(AGC_BP_SpiceVision_SpawnManager_C) == 0x000720, "Wrong size on AGC_BP_SpiceVision_SpawnManager_C");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, UberGraphFrame) == 0x000418, "Member 'AGC_BP_SpiceVision_SpawnManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, DefaultSceneRoot) == 0x000420, "Member 'AGC_BP_SpiceVision_SpawnManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, SpawnTimer) == 0x000428, "Member 'AGC_BP_SpiceVision_SpawnManager_C::SpawnTimer' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, VFXSpawnTimer) == 0x000430, "Member 'AGC_BP_SpiceVision_SpawnManager_C::VFXSpawnTimer' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, SpawningTimerSum) == 0x000438, "Member 'AGC_BP_SpiceVision_SpawnManager_C::SpawningTimerSum' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, IntroParticle) == 0x000440, "Member 'AGC_BP_SpiceVision_SpawnManager_C::IntroParticle' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, VFXSpawningTimerSum) == 0x000448, "Member 'AGC_BP_SpiceVision_SpawnManager_C::VFXSpawningTimerSum' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, SpawnedStructures) == 0x000450, "Member 'AGC_BP_SpiceVision_SpawnManager_C::SpawnedStructures' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, SpawnedIntroParticles) == 0x000460, "Member 'AGC_BP_SpiceVision_SpawnManager_C::SpawnedIntroParticles' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, SpawnedMainParticles) == 0x000470, "Member 'AGC_BP_SpiceVision_SpawnManager_C::SpawnedMainParticles' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, VisionTuning) == 0x000480, "Member 'AGC_BP_SpiceVision_SpawnManager_C::VisionTuning' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, SpawnedActorTypeAmount) == 0x0005C0, "Member 'AGC_BP_SpiceVision_SpawnManager_C::SpawnedActorTypeAmount' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, SpiceVisionTimer) == 0x000610, "Member 'AGC_BP_SpiceVision_SpawnManager_C::SpiceVisionTimer' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, SpiceVisionPlayTime) == 0x000618, "Member 'AGC_BP_SpiceVision_SpawnManager_C::SpiceVisionPlayTime' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, Spice_State) == 0x000620, "Member 'AGC_BP_SpiceVision_SpawnManager_C::Spice_State' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, StartTime) == 0x000628, "Member 'AGC_BP_SpiceVision_SpawnManager_C::StartTime' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, DestroyParticlesDelay) == 0x000630, "Member 'AGC_BP_SpiceVision_SpawnManager_C::DestroyParticlesDelay' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, SpawnedActorAmountDuringVision) == 0x000638, "Member 'AGC_BP_SpiceVision_SpawnManager_C::SpawnedActorAmountDuringVision' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, VisionRowHandle) == 0x000688, "Member 'AGC_BP_SpiceVision_SpawnManager_C::VisionRowHandle' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, SpiceAddictionLevel) == 0x000698, "Member 'AGC_BP_SpiceVision_SpawnManager_C::SpiceAddictionLevel' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, DTTuningSoftPtr) == 0x0006A0, "Member 'AGC_BP_SpiceVision_SpawnManager_C::DTTuningSoftPtr' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, Settings) == 0x0006D0, "Member 'AGC_BP_SpiceVision_SpawnManager_C::Settings' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, RowName) == 0x000700, "Member 'AGC_BP_SpiceVision_SpawnManager_C::RowName' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, TuningData) == 0x000708, "Member 'AGC_BP_SpiceVision_SpawnManager_C::TuningData' has a wrong offset!");
static_assert(offsetof(AGC_BP_SpiceVision_SpawnManager_C, IsPlayingBackgroundSFX) == 0x000718, "Member 'AGC_BP_SpiceVision_SpawnManager_C::IsPlayingBackgroundSFX' has a wrong offset!");

}

