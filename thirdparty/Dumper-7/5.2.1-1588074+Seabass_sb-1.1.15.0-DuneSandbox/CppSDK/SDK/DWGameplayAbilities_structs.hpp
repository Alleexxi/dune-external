#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DWGameplayAbilities

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Enum DWGameplayAbilities.EAbilityHandleState
// NumValues: 0x0004
enum class EAbilityHandleState : uint8
{
	Deferred                                 = 0,
	Succeeded                                = 1,
	Failed                                   = 2,
	EAbilityHandleState_MAX                  = 3,
};

// Enum DWGameplayAbilities.EEffectHandleState
// NumValues: 0x0004
enum class EEffectHandleState : uint8
{
	Deferred                                 = 0,
	Applied                                  = 1,
	Removed                                  = 2,
	EEffectHandleState_MAX                   = 3,
};

// ScriptStruct DWGameplayAbilities.FglGameplayAttributeData
// 0x0008 (0x0028 - 0x0020)
struct FFglGameplayAttributeData final : public FExternalGameplayAttributeData
{
public:
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFglGameplayAttributeData) == 0x000008, "Wrong alignment on FFglGameplayAttributeData");
static_assert(sizeof(FFglGameplayAttributeData) == 0x000028, "Wrong size on FFglGameplayAttributeData");

// ScriptStruct DWGameplayAbilities.AbilityHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FAbilityHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityHandle) == 0x000008, "Wrong alignment on FAbilityHandle");
static_assert(sizeof(FAbilityHandle) == 0x000010, "Wrong size on FAbilityHandle");

// ScriptStruct DWGameplayAbilities.EffectHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEffectHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEffectHandle) == 0x000008, "Wrong alignment on FEffectHandle");
static_assert(sizeof(FEffectHandle) == 0x000010, "Wrong size on FEffectHandle");

// ScriptStruct DWGameplayAbilities.AbilityTaskHandle
// 0x0008 (0x0008 - 0x0000)
struct FAbilityTaskHandle final
{
public:
	class UAbilityTask*                           AbilityTaskPtr;                                    // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityTaskHandle) == 0x000008, "Wrong alignment on FAbilityTaskHandle");
static_assert(sizeof(FAbilityTaskHandle) == 0x000008, "Wrong size on FAbilityTaskHandle");
static_assert(offsetof(FAbilityTaskHandle, AbilityTaskPtr) == 0x000000, "Member 'FAbilityTaskHandle::AbilityTaskPtr' has a wrong offset!");

// ScriptStruct DWGameplayAbilities.DWGameplayEffectContext
// 0x0028 (0x00A8 - 0x0080)
struct FDWGameplayEffectContext final : public FGameplayEffectContext
{
public:
	uint8                                         Pad_80[0x28];                                      // 0x0080(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDWGameplayEffectContext) == 0x000008, "Wrong alignment on FDWGameplayEffectContext");
static_assert(sizeof(FDWGameplayEffectContext) == 0x0000A8, "Wrong size on FDWGameplayEffectContext");

}

