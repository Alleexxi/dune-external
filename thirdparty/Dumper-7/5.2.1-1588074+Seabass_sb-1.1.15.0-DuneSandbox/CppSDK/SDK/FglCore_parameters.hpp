#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FglCore

#include "Basic.hpp"

#include "FglCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function FglCore.OwnerComponent_BlueprintAcessLibrary.FglAssignOwnerComponent
// 0x0020 (0x0020 - 0x0000)
struct OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              InEntityId;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOwnerComponent                        InComponent;                                       // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EFglBlueprintResult                           ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent) == 0x000008, "Wrong alignment on OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent");
static_assert(sizeof(OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent) == 0x000020, "Wrong size on OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent, WorldContextObject) == 0x000000, "Member 'OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent, InEntityId) == 0x000008, "Member 'OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent::InEntityId' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent, InComponent) == 0x000010, "Member 'OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent::InComponent' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent, ReturnValue) == 0x000018, "Member 'OwnerComponent_BlueprintAcessLibrary_FglAssignOwnerComponent::ReturnValue' has a wrong offset!");

// Function FglCore.OwnerComponent_BlueprintAcessLibrary.FglGetOwnerComponent
// 0x0020 (0x0020 - 0x0000)
struct OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              InEntityId;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOwnerComponent                        OutOwnerComponent;                                 // 0x0010(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EFglBlueprintResult                           ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent) == 0x000008, "Wrong alignment on OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent");
static_assert(sizeof(OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent) == 0x000020, "Wrong size on OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent, WorldContextObject) == 0x000000, "Member 'OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent, InEntityId) == 0x000008, "Member 'OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent::InEntityId' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent, OutOwnerComponent) == 0x000010, "Member 'OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent::OutOwnerComponent' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent, ReturnValue) == 0x000018, "Member 'OwnerComponent_BlueprintAcessLibrary_FglGetOwnerComponent::ReturnValue' has a wrong offset!");

// Function FglCore.OwnerComponent_BlueprintAcessLibrary.FglHasOwnerComponent
// 0x0018 (0x0018 - 0x0000)
struct OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              InEntityId;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFglBlueprintResult                           ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent) == 0x000008, "Wrong alignment on OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent");
static_assert(sizeof(OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent) == 0x000018, "Wrong size on OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent, WorldContextObject) == 0x000000, "Member 'OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent, InEntityId) == 0x000008, "Member 'OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent::InEntityId' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent, ReturnValue) == 0x000010, "Member 'OwnerComponent_BlueprintAcessLibrary_FglHasOwnerComponent::ReturnValue' has a wrong offset!");

// Function FglCore.OwnerComponent_BlueprintAcessLibrary.FglSetOwnerComponent
// 0x0020 (0x0020 - 0x0000)
struct OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              InEntityId;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOwnerComponent                        InComponent;                                       // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EFglBlueprintResult                           ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent) == 0x000008, "Wrong alignment on OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent");
static_assert(sizeof(OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent) == 0x000020, "Wrong size on OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent, WorldContextObject) == 0x000000, "Member 'OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent, InEntityId) == 0x000008, "Member 'OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent::InEntityId' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent, InComponent) == 0x000010, "Member 'OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent::InComponent' has a wrong offset!");
static_assert(offsetof(OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent, ReturnValue) == 0x000018, "Member 'OwnerComponent_BlueprintAcessLibrary_FglSetOwnerComponent::ReturnValue' has a wrong offset!");

// Function FglCore.ChildOwnerComponent_BlueprintAcessLibrary.FglAssignChildOwnerComponent
// 0x0028 (0x0028 - 0x0000)
struct ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              InEntityId;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChildOwnerComponent                   InComponent;                                       // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EFglBlueprintResult                           ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent) == 0x000008, "Wrong alignment on ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent");
static_assert(sizeof(ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent) == 0x000028, "Wrong size on ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent, WorldContextObject) == 0x000000, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent, InEntityId) == 0x000008, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent::InEntityId' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent, InComponent) == 0x000010, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent::InComponent' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent, ReturnValue) == 0x000020, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglAssignChildOwnerComponent::ReturnValue' has a wrong offset!");

// Function FglCore.ChildOwnerComponent_BlueprintAcessLibrary.FglGetChildOwnerComponent
// 0x0028 (0x0028 - 0x0000)
struct ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              InEntityId;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChildOwnerComponent                   OutChildOwnerComponent;                            // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EFglBlueprintResult                           ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent) == 0x000008, "Wrong alignment on ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent");
static_assert(sizeof(ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent) == 0x000028, "Wrong size on ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent, WorldContextObject) == 0x000000, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent, InEntityId) == 0x000008, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent::InEntityId' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent, OutChildOwnerComponent) == 0x000010, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent::OutChildOwnerComponent' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent, ReturnValue) == 0x000020, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglGetChildOwnerComponent::ReturnValue' has a wrong offset!");

// Function FglCore.ChildOwnerComponent_BlueprintAcessLibrary.FglHasChildOwnerComponent
// 0x0018 (0x0018 - 0x0000)
struct ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              InEntityId;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFglBlueprintResult                           ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent) == 0x000008, "Wrong alignment on ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent");
static_assert(sizeof(ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent) == 0x000018, "Wrong size on ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent, WorldContextObject) == 0x000000, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent, InEntityId) == 0x000008, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent::InEntityId' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent, ReturnValue) == 0x000010, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglHasChildOwnerComponent::ReturnValue' has a wrong offset!");

// Function FglCore.ChildOwnerComponent_BlueprintAcessLibrary.FglSetChildOwnerComponent
// 0x0028 (0x0028 - 0x0000)
struct ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              InEntityId;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChildOwnerComponent                   InComponent;                                       // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EFglBlueprintResult                           ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent) == 0x000008, "Wrong alignment on ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent");
static_assert(sizeof(ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent) == 0x000028, "Wrong size on ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent, WorldContextObject) == 0x000000, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent, InEntityId) == 0x000008, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent::InEntityId' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent, InComponent) == 0x000010, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent::InComponent' has a wrong offset!");
static_assert(offsetof(ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent, ReturnValue) == 0x000020, "Member 'ChildOwnerComponent_BlueprintAcessLibrary_FglSetChildOwnerComponent::ReturnValue' has a wrong offset!");

// Function FglCore.BlueprintProcessor.ProcessorFunction
// 0x0018 (0x0018 - 0x0000)
struct BlueprintProcessor_ProcessorFunction final
{
public:
	int32                                         ThreadIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeImmediateContext               Context;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintProcessor_ProcessorFunction) == 0x000008, "Wrong alignment on BlueprintProcessor_ProcessorFunction");
static_assert(sizeof(BlueprintProcessor_ProcessorFunction) == 0x000018, "Wrong size on BlueprintProcessor_ProcessorFunction");
static_assert(offsetof(BlueprintProcessor_ProcessorFunction, ThreadIndex) == 0x000000, "Member 'BlueprintProcessor_ProcessorFunction::ThreadIndex' has a wrong offset!");
static_assert(offsetof(BlueprintProcessor_ProcessorFunction, Context) == 0x000008, "Member 'BlueprintProcessor_ProcessorFunction::Context' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.CreateAndLockContext
// 0x0028 (0x0028 - 0x0000)
struct FglBlueprintAccessLibrary_CreateAndLockContext final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeAccessor>               Accessors;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRuntimeImmediateContext               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_CreateAndLockContext) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_CreateAndLockContext");
static_assert(sizeof(FglBlueprintAccessLibrary_CreateAndLockContext) == 0x000028, "Wrong size on FglBlueprintAccessLibrary_CreateAndLockContext");
static_assert(offsetof(FglBlueprintAccessLibrary_CreateAndLockContext, WorldContextObject) == 0x000000, "Member 'FglBlueprintAccessLibrary_CreateAndLockContext::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_CreateAndLockContext, Accessors) == 0x000008, "Member 'FglBlueprintAccessLibrary_CreateAndLockContext::Accessors' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_CreateAndLockContext, ReturnValue) == 0x000018, "Member 'FglBlueprintAccessLibrary_CreateAndLockContext::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.CreateEntityId
// 0x0010 (0x0010 - 0x0000)
struct FglBlueprintAccessLibrary_CreateEntityId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_CreateEntityId) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_CreateEntityId");
static_assert(sizeof(FglBlueprintAccessLibrary_CreateEntityId) == 0x000010, "Wrong size on FglBlueprintAccessLibrary_CreateEntityId");
static_assert(offsetof(FglBlueprintAccessLibrary_CreateEntityId, WorldContextObject) == 0x000000, "Member 'FglBlueprintAccessLibrary_CreateEntityId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_CreateEntityId, ReturnValue) == 0x000008, "Member 'FglBlueprintAccessLibrary_CreateEntityId::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.CreateRuntimeView
// 0x0040 (0x0040 - 0x0000)
struct FglBlueprintAccessLibrary_CreateRuntimeView final
{
public:
	struct FRuntimeImmediateContext               Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeViewFilter>             Filters;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRuntimeViewIterator                   Iterator;                                          // 0x0020(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeView                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_CreateRuntimeView) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_CreateRuntimeView");
static_assert(sizeof(FglBlueprintAccessLibrary_CreateRuntimeView) == 0x000040, "Wrong size on FglBlueprintAccessLibrary_CreateRuntimeView");
static_assert(offsetof(FglBlueprintAccessLibrary_CreateRuntimeView, Context) == 0x000000, "Member 'FglBlueprintAccessLibrary_CreateRuntimeView::Context' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_CreateRuntimeView, Filters) == 0x000010, "Member 'FglBlueprintAccessLibrary_CreateRuntimeView::Filters' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_CreateRuntimeView, Iterator) == 0x000020, "Member 'FglBlueprintAccessLibrary_CreateRuntimeView::Iterator' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_CreateRuntimeView, ReturnValue) == 0x000030, "Member 'FglBlueprintAccessLibrary_CreateRuntimeView::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.FreeRuntimeView
// 0x0010 (0x0010 - 0x0000)
struct FglBlueprintAccessLibrary_FreeRuntimeView final
{
public:
	struct FRuntimeView                           View;                                              // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_FreeRuntimeView) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_FreeRuntimeView");
static_assert(sizeof(FglBlueprintAccessLibrary_FreeRuntimeView) == 0x000010, "Wrong size on FglBlueprintAccessLibrary_FreeRuntimeView");
static_assert(offsetof(FglBlueprintAccessLibrary_FreeRuntimeView, View) == 0x000000, "Member 'FglBlueprintAccessLibrary_FreeRuntimeView::View' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.GetComponent
// 0x0028 (0x0028 - 0x0000)
struct FglBlueprintAccessLibrary_GetComponent final
{
public:
	struct FRuntimeImmediateContext               Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEntityId                              EntityId;                                          // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeAccessor                       ComponentAccessor;                                 // 0x0018(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_GetComponent) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_GetComponent");
static_assert(sizeof(FglBlueprintAccessLibrary_GetComponent) == 0x000028, "Wrong size on FglBlueprintAccessLibrary_GetComponent");
static_assert(offsetof(FglBlueprintAccessLibrary_GetComponent, Context) == 0x000000, "Member 'FglBlueprintAccessLibrary_GetComponent::Context' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_GetComponent, EntityId) == 0x000010, "Member 'FglBlueprintAccessLibrary_GetComponent::EntityId' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_GetComponent, ComponentAccessor) == 0x000018, "Member 'FglBlueprintAccessLibrary_GetComponent::ComponentAccessor' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_GetComponent, Value) == 0x000024, "Member 'FglBlueprintAccessLibrary_GetComponent::Value' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.GetEntitiesWithComponent
// 0x0060 (0x0060 - 0x0000)
struct FglBlueprintAccessLibrary_GetEntitiesWithComponent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FEntityId>                        ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_GetEntitiesWithComponent) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_GetEntitiesWithComponent");
static_assert(sizeof(FglBlueprintAccessLibrary_GetEntitiesWithComponent) == 0x000060, "Wrong size on FglBlueprintAccessLibrary_GetEntitiesWithComponent");
static_assert(offsetof(FglBlueprintAccessLibrary_GetEntitiesWithComponent, WorldContextObject) == 0x000000, "Member 'FglBlueprintAccessLibrary_GetEntitiesWithComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_GetEntitiesWithComponent, ComponentName) == 0x000008, "Member 'FglBlueprintAccessLibrary_GetEntitiesWithComponent::ComponentName' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_GetEntitiesWithComponent, ReturnValue) == 0x000010, "Member 'FglBlueprintAccessLibrary_GetEntitiesWithComponent::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.GetEntityID
// 0x0010 (0x0010 - 0x0000)
struct FglBlueprintAccessLibrary_GetEntityID final
{
public:
	const class UObject*                          InFglEntity;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_GetEntityID) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_GetEntityID");
static_assert(sizeof(FglBlueprintAccessLibrary_GetEntityID) == 0x000010, "Wrong size on FglBlueprintAccessLibrary_GetEntityID");
static_assert(offsetof(FglBlueprintAccessLibrary_GetEntityID, InFglEntity) == 0x000000, "Member 'FglBlueprintAccessLibrary_GetEntityID::InFglEntity' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_GetEntityID, ReturnValue) == 0x000008, "Member 'FglBlueprintAccessLibrary_GetEntityID::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.GetFGLSingletonId_Blueprint
// 0x0010 (0x0010 - 0x0000)
struct FglBlueprintAccessLibrary_GetFGLSingletonId_Blueprint final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_GetFGLSingletonId_Blueprint) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_GetFGLSingletonId_Blueprint");
static_assert(sizeof(FglBlueprintAccessLibrary_GetFGLSingletonId_Blueprint) == 0x000010, "Wrong size on FglBlueprintAccessLibrary_GetFGLSingletonId_Blueprint");
static_assert(offsetof(FglBlueprintAccessLibrary_GetFGLSingletonId_Blueprint, WorldContextObject) == 0x000000, "Member 'FglBlueprintAccessLibrary_GetFGLSingletonId_Blueprint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_GetFGLSingletonId_Blueprint, ReturnValue) == 0x000008, "Member 'FglBlueprintAccessLibrary_GetFGLSingletonId_Blueprint::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.GetTickGroupSchedulerFor
// 0x0018 (0x0018 - 0x0000)
struct FglBlueprintAccessLibrary_GetTickGroupSchedulerFor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickingGroup                                 TickGroup;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTickGroupScheduler*            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_GetTickGroupSchedulerFor) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_GetTickGroupSchedulerFor");
static_assert(sizeof(FglBlueprintAccessLibrary_GetTickGroupSchedulerFor) == 0x000018, "Wrong size on FglBlueprintAccessLibrary_GetTickGroupSchedulerFor");
static_assert(offsetof(FglBlueprintAccessLibrary_GetTickGroupSchedulerFor, WorldContextObject) == 0x000000, "Member 'FglBlueprintAccessLibrary_GetTickGroupSchedulerFor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_GetTickGroupSchedulerFor, TickGroup) == 0x000008, "Member 'FglBlueprintAccessLibrary_GetTickGroupSchedulerFor::TickGroup' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_GetTickGroupSchedulerFor, ReturnValue) == 0x000010, "Member 'FglBlueprintAccessLibrary_GetTickGroupSchedulerFor::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.HasComponents
// 0x0030 (0x0030 - 0x0000)
struct FglBlueprintAccessLibrary_HasComponents final
{
public:
	struct FRuntimeImmediateContext               Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEntityId                              EntityId;                                          // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeAccessor>               Accessors;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FglBlueprintAccessLibrary_HasComponents) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_HasComponents");
static_assert(sizeof(FglBlueprintAccessLibrary_HasComponents) == 0x000030, "Wrong size on FglBlueprintAccessLibrary_HasComponents");
static_assert(offsetof(FglBlueprintAccessLibrary_HasComponents, Context) == 0x000000, "Member 'FglBlueprintAccessLibrary_HasComponents::Context' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_HasComponents, EntityId) == 0x000010, "Member 'FglBlueprintAccessLibrary_HasComponents::EntityId' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_HasComponents, Accessors) == 0x000018, "Member 'FglBlueprintAccessLibrary_HasComponents::Accessors' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_HasComponents, ReturnValue) == 0x000028, "Member 'FglBlueprintAccessLibrary_HasComponents::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.IsValid
// 0x0010 (0x0010 - 0x0000)
struct FglBlueprintAccessLibrary_IsValid final
{
public:
	struct FEntityId                              InFglEntity;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FglBlueprintAccessLibrary_IsValid) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_IsValid");
static_assert(sizeof(FglBlueprintAccessLibrary_IsValid) == 0x000010, "Wrong size on FglBlueprintAccessLibrary_IsValid");
static_assert(offsetof(FglBlueprintAccessLibrary_IsValid, InFglEntity) == 0x000000, "Member 'FglBlueprintAccessLibrary_IsValid::InFglEntity' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_IsValid, ReturnValue) == 0x000008, "Member 'FglBlueprintAccessLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.SetComponent
// 0x0028 (0x0028 - 0x0000)
struct FglBlueprintAccessLibrary_SetComponent final
{
public:
	struct FRuntimeImmediateContext               Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEntityId                              EntityId;                                          // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeAccessor                       ComponentAccessor;                                 // 0x0018(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_SetComponent) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_SetComponent");
static_assert(sizeof(FglBlueprintAccessLibrary_SetComponent) == 0x000028, "Wrong size on FglBlueprintAccessLibrary_SetComponent");
static_assert(offsetof(FglBlueprintAccessLibrary_SetComponent, Context) == 0x000000, "Member 'FglBlueprintAccessLibrary_SetComponent::Context' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_SetComponent, EntityId) == 0x000010, "Member 'FglBlueprintAccessLibrary_SetComponent::EntityId' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_SetComponent, ComponentAccessor) == 0x000018, "Member 'FglBlueprintAccessLibrary_SetComponent::ComponentAccessor' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_SetComponent, Value) == 0x000024, "Member 'FglBlueprintAccessLibrary_SetComponent::Value' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.UnlockContext
// 0x0010 (0x0010 - 0x0000)
struct FglBlueprintAccessLibrary_UnlockContext final
{
public:
	struct FRuntimeImmediateContext               Context;                                           // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_UnlockContext) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_UnlockContext");
static_assert(sizeof(FglBlueprintAccessLibrary_UnlockContext) == 0x000010, "Wrong size on FglBlueprintAccessLibrary_UnlockContext");
static_assert(offsetof(FglBlueprintAccessLibrary_UnlockContext, Context) == 0x000000, "Member 'FglBlueprintAccessLibrary_UnlockContext::Context' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.ViewIteratorAdvance
// 0x0010 (0x0010 - 0x0000)
struct FglBlueprintAccessLibrary_ViewIteratorAdvance final
{
public:
	struct FRuntimeViewIterator                   Iterator;                                          // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_ViewIteratorAdvance) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_ViewIteratorAdvance");
static_assert(sizeof(FglBlueprintAccessLibrary_ViewIteratorAdvance) == 0x000010, "Wrong size on FglBlueprintAccessLibrary_ViewIteratorAdvance");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorAdvance, Iterator) == 0x000000, "Member 'FglBlueprintAccessLibrary_ViewIteratorAdvance::Iterator' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.ViewIteratorGetComponent
// 0x0018 (0x0018 - 0x0000)
struct FglBlueprintAccessLibrary_ViewIteratorGetComponent final
{
public:
	struct FRuntimeViewIterator                   Iterator;                                          // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         GetterIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_ViewIteratorGetComponent) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_ViewIteratorGetComponent");
static_assert(sizeof(FglBlueprintAccessLibrary_ViewIteratorGetComponent) == 0x000018, "Wrong size on FglBlueprintAccessLibrary_ViewIteratorGetComponent");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorGetComponent, Iterator) == 0x000000, "Member 'FglBlueprintAccessLibrary_ViewIteratorGetComponent::Iterator' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorGetComponent, GetterIndex) == 0x000010, "Member 'FglBlueprintAccessLibrary_ViewIteratorGetComponent::GetterIndex' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorGetComponent, Value) == 0x000014, "Member 'FglBlueprintAccessLibrary_ViewIteratorGetComponent::Value' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.ViewIteratorGetEntityId
// 0x0018 (0x0018 - 0x0000)
struct FglBlueprintAccessLibrary_ViewIteratorGetEntityId final
{
public:
	struct FRuntimeViewIterator                   Iterator;                                          // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEntityId                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_ViewIteratorGetEntityId) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_ViewIteratorGetEntityId");
static_assert(sizeof(FglBlueprintAccessLibrary_ViewIteratorGetEntityId) == 0x000018, "Wrong size on FglBlueprintAccessLibrary_ViewIteratorGetEntityId");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorGetEntityId, Iterator) == 0x000000, "Member 'FglBlueprintAccessLibrary_ViewIteratorGetEntityId::Iterator' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorGetEntityId, ReturnValue) == 0x000010, "Member 'FglBlueprintAccessLibrary_ViewIteratorGetEntityId::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.ViewIteratorIsValid
// 0x0018 (0x0018 - 0x0000)
struct FglBlueprintAccessLibrary_ViewIteratorIsValid final
{
public:
	struct FRuntimeViewIterator                   Iterator;                                          // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FglBlueprintAccessLibrary_ViewIteratorIsValid) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_ViewIteratorIsValid");
static_assert(sizeof(FglBlueprintAccessLibrary_ViewIteratorIsValid) == 0x000018, "Wrong size on FglBlueprintAccessLibrary_ViewIteratorIsValid");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorIsValid, Iterator) == 0x000000, "Member 'FglBlueprintAccessLibrary_ViewIteratorIsValid::Iterator' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorIsValid, ReturnValue) == 0x000010, "Member 'FglBlueprintAccessLibrary_ViewIteratorIsValid::ReturnValue' has a wrong offset!");

// Function FglCore.FglBlueprintAccessLibrary.ViewIteratorSetComponent
// 0x0018 (0x0018 - 0x0000)
struct FglBlueprintAccessLibrary_ViewIteratorSetComponent final
{
public:
	struct FRuntimeViewIterator                   Iterator;                                          // 0x0000(0x0010)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         GetterIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FglBlueprintAccessLibrary_ViewIteratorSetComponent) == 0x000008, "Wrong alignment on FglBlueprintAccessLibrary_ViewIteratorSetComponent");
static_assert(sizeof(FglBlueprintAccessLibrary_ViewIteratorSetComponent) == 0x000018, "Wrong size on FglBlueprintAccessLibrary_ViewIteratorSetComponent");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorSetComponent, Iterator) == 0x000000, "Member 'FglBlueprintAccessLibrary_ViewIteratorSetComponent::Iterator' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorSetComponent, GetterIndex) == 0x000010, "Member 'FglBlueprintAccessLibrary_ViewIteratorSetComponent::GetterIndex' has a wrong offset!");
static_assert(offsetof(FglBlueprintAccessLibrary_ViewIteratorSetComponent, Value) == 0x000014, "Member 'FglBlueprintAccessLibrary_ViewIteratorSetComponent::Value' has a wrong offset!");

}

