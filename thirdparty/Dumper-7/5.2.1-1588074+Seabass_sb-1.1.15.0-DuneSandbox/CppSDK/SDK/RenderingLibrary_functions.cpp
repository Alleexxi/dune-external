#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RenderingLibrary

#include "Basic.hpp"

#include "RenderingLibrary_classes.hpp"
#include "RenderingLibrary_parameters.hpp"


namespace SDK
{

// Function RenderingLibrary.FuncomRenderingLibrary.BatchDrawMaterialToRenderTargetMinimal
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           TextureRenderTarget                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDrawToRenderTargetMinimalContext&RenderBatchContext                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bUseRenderPass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESimpleRenderPassExecutionStage         RenderPassExecutionStage                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFuncomRenderingLibrary::BatchDrawMaterialToRenderTargetMinimal(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material, struct FDrawToRenderTargetMinimalContext& RenderBatchContext, bool bUseRenderPass, ESimpleRenderPassExecutionStage RenderPassExecutionStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncomRenderingLibrary", "BatchDrawMaterialToRenderTargetMinimal");

	Params::FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TextureRenderTarget = TextureRenderTarget;
	Parms.Material = Material;
	Parms.RenderBatchContext = std::move(RenderBatchContext);
	Parms.bUseRenderPass = bUseRenderPass;
	Parms.RenderPassExecutionStage = RenderPassExecutionStage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	RenderBatchContext = std::move(Parms.RenderBatchContext);
}


// Function RenderingLibrary.FuncomRenderingLibrary.BeginDrawMaterialBatchMinimal
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDrawToRenderTargetMinimalContext*RenderBatchContext                                     (Parm, OutParm, NativeAccessSpecifierPublic)

void UFuncomRenderingLibrary::BeginDrawMaterialBatchMinimal(class UObject* WorldContextObject, struct FDrawToRenderTargetMinimalContext* RenderBatchContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncomRenderingLibrary", "BeginDrawMaterialBatchMinimal");

	Params::FuncomRenderingLibrary_BeginDrawMaterialBatchMinimal Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RenderBatchContext != nullptr)
		*RenderBatchContext = std::move(Parms.RenderBatchContext);
}


// Function RenderingLibrary.FuncomRenderingLibrary.DrawMaterialToRenderTargetMinimal
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           TextureRenderTarget                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseRenderPass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESimpleRenderPassExecutionStage         RenderPassExecutionStage                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFuncomRenderingLibrary::DrawMaterialToRenderTargetMinimal(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material, bool bUseRenderPass, ESimpleRenderPassExecutionStage RenderPassExecutionStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncomRenderingLibrary", "DrawMaterialToRenderTargetMinimal");

	Params::FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TextureRenderTarget = TextureRenderTarget;
	Parms.Material = Material;
	Parms.bUseRenderPass = bUseRenderPass;
	Parms.RenderPassExecutionStage = RenderPassExecutionStage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RenderingLibrary.FuncomRenderingLibrary.EndDrawMaterialBatchMinimal
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDrawToRenderTargetMinimalContext&RenderBatchContext                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFuncomRenderingLibrary::EndDrawMaterialBatchMinimal(class UObject* WorldContextObject, struct FDrawToRenderTargetMinimalContext& RenderBatchContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FuncomRenderingLibrary", "EndDrawMaterialBatchMinimal");

	Params::FuncomRenderingLibrary_EndDrawMaterialBatchMinimal Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.RenderBatchContext = std::move(RenderBatchContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	RenderBatchContext = std::move(Parms.RenderBatchContext);
}

}

