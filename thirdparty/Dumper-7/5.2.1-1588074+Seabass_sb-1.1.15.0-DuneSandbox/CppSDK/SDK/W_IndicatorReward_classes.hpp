#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_IndicatorReward

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_IndicatorReward.W_IndicatorReward_C
// 0x0070 (0x0328 - 0x02B8)
class UW_IndicatorReward_C final : public UTextWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       m_NewGlow;                                         // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UDuneImage*                             GlowImg;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             IMGIndicatorNew;                                   // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             Linework;                                          // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 m_Image;                                           // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              Desired_Size;                                      // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Glow_;                                      // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Use_Linework_;                              // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FA[0x2];                                      // 0x02FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            GlowColorDisabled;                                 // 0x02FC(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            GlowColorEnabled;                                  // 0x0310(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_W_IndicatorReward(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void Set_Disabled(bool IsDisabled_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_IndicatorReward_C">();
	}
	static class UW_IndicatorReward_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_IndicatorReward_C>();
	}
};
static_assert(alignof(UW_IndicatorReward_C) == 0x000008, "Wrong alignment on UW_IndicatorReward_C");
static_assert(sizeof(UW_IndicatorReward_C) == 0x000328, "Wrong size on UW_IndicatorReward_C");
static_assert(offsetof(UW_IndicatorReward_C, UberGraphFrame) == 0x0002B8, "Member 'UW_IndicatorReward_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_IndicatorReward_C, m_NewGlow) == 0x0002C0, "Member 'UW_IndicatorReward_C::m_NewGlow' has a wrong offset!");
static_assert(offsetof(UW_IndicatorReward_C, GlowImg) == 0x0002C8, "Member 'UW_IndicatorReward_C::GlowImg' has a wrong offset!");
static_assert(offsetof(UW_IndicatorReward_C, IMGIndicatorNew) == 0x0002D0, "Member 'UW_IndicatorReward_C::IMGIndicatorNew' has a wrong offset!");
static_assert(offsetof(UW_IndicatorReward_C, Linework) == 0x0002D8, "Member 'UW_IndicatorReward_C::Linework' has a wrong offset!");
static_assert(offsetof(UW_IndicatorReward_C, m_Image) == 0x0002E0, "Member 'UW_IndicatorReward_C::m_Image' has a wrong offset!");
static_assert(offsetof(UW_IndicatorReward_C, Desired_Size) == 0x0002E8, "Member 'UW_IndicatorReward_C::Desired_Size' has a wrong offset!");
static_assert(offsetof(UW_IndicatorReward_C, Should_Glow_) == 0x0002F8, "Member 'UW_IndicatorReward_C::Should_Glow_' has a wrong offset!");
static_assert(offsetof(UW_IndicatorReward_C, Should_Use_Linework_) == 0x0002F9, "Member 'UW_IndicatorReward_C::Should_Use_Linework_' has a wrong offset!");
static_assert(offsetof(UW_IndicatorReward_C, GlowColorDisabled) == 0x0002FC, "Member 'UW_IndicatorReward_C::GlowColorDisabled' has a wrong offset!");
static_assert(offsetof(UW_IndicatorReward_C, GlowColorEnabled) == 0x000310, "Member 'UW_IndicatorReward_C::GlowColorEnabled' has a wrong offset!");

}

