#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ServiceAnnouncementEntry

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_ServiceAnnouncementEntry.W_ServiceAnnouncementEntry_C.SetCountdownVisibility
// 0x0005 (0x0005 - 0x0000)
struct W_ServiceAnnouncementEntry_C_SetCountdownVisibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasCountdown_ReturnValue;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ServiceAnnouncementEntry_C_SetCountdownVisibility) == 0x000001, "Wrong alignment on W_ServiceAnnouncementEntry_C_SetCountdownVisibility");
static_assert(sizeof(W_ServiceAnnouncementEntry_C_SetCountdownVisibility) == 0x000005, "Wrong size on W_ServiceAnnouncementEntry_C_SetCountdownVisibility");
static_assert(offsetof(W_ServiceAnnouncementEntry_C_SetCountdownVisibility, Temp_bool_Variable) == 0x000000, "Member 'W_ServiceAnnouncementEntry_C_SetCountdownVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ServiceAnnouncementEntry_C_SetCountdownVisibility, Temp_byte_Variable) == 0x000001, "Member 'W_ServiceAnnouncementEntry_C_SetCountdownVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_ServiceAnnouncementEntry_C_SetCountdownVisibility, Temp_byte_Variable_1) == 0x000002, "Member 'W_ServiceAnnouncementEntry_C_SetCountdownVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ServiceAnnouncementEntry_C_SetCountdownVisibility, CallFunc_HasCountdown_ReturnValue) == 0x000003, "Member 'W_ServiceAnnouncementEntry_C_SetCountdownVisibility::CallFunc_HasCountdown_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ServiceAnnouncementEntry_C_SetCountdownVisibility, K2Node_Select_Default) == 0x000004, "Member 'W_ServiceAnnouncementEntry_C_SetCountdownVisibility::K2Node_Select_Default' has a wrong offset!");

// Function W_ServiceAnnouncementEntry.W_ServiceAnnouncementEntry_C.SetCountdownText
// 0x0002 (0x0002 - 0x0000)
struct W_ServiceAnnouncementEntry_C_SetCountdownText final
{
public:
	bool                                          HasCountdown;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasCountdown_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ServiceAnnouncementEntry_C_SetCountdownText) == 0x000001, "Wrong alignment on W_ServiceAnnouncementEntry_C_SetCountdownText");
static_assert(sizeof(W_ServiceAnnouncementEntry_C_SetCountdownText) == 0x000002, "Wrong size on W_ServiceAnnouncementEntry_C_SetCountdownText");
static_assert(offsetof(W_ServiceAnnouncementEntry_C_SetCountdownText, HasCountdown) == 0x000000, "Member 'W_ServiceAnnouncementEntry_C_SetCountdownText::HasCountdown' has a wrong offset!");
static_assert(offsetof(W_ServiceAnnouncementEntry_C_SetCountdownText, CallFunc_HasCountdown_ReturnValue) == 0x000001, "Member 'W_ServiceAnnouncementEntry_C_SetCountdownText::CallFunc_HasCountdown_ReturnValue' has a wrong offset!");

// Function W_ServiceAnnouncementEntry.W_ServiceAnnouncementEntry_C.OnSetData
// 0x0008 (0x0008 - 0x0000)
struct W_ServiceAnnouncementEntry_C_OnSetData final
{
public:
	const class UServiceAnnouncementEntryData*    Data_0;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ServiceAnnouncementEntry_C_OnSetData) == 0x000008, "Wrong alignment on W_ServiceAnnouncementEntry_C_OnSetData");
static_assert(sizeof(W_ServiceAnnouncementEntry_C_OnSetData) == 0x000008, "Wrong size on W_ServiceAnnouncementEntry_C_OnSetData");
static_assert(offsetof(W_ServiceAnnouncementEntry_C_OnSetData, Data_0) == 0x000000, "Member 'W_ServiceAnnouncementEntry_C_OnSetData::Data_0' has a wrong offset!");

// Function W_ServiceAnnouncementEntry.W_ServiceAnnouncementEntry_C.ExecuteUbergraph_W_ServiceAnnouncementEntry
// 0x0010 (0x0010 - 0x0000)
struct W_ServiceAnnouncementEntry_C_ExecuteUbergraph_W_ServiceAnnouncementEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UServiceAnnouncementEntryData*    K2Node_Event_Data;                                 // 0x0008(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ServiceAnnouncementEntry_C_ExecuteUbergraph_W_ServiceAnnouncementEntry) == 0x000008, "Wrong alignment on W_ServiceAnnouncementEntry_C_ExecuteUbergraph_W_ServiceAnnouncementEntry");
static_assert(sizeof(W_ServiceAnnouncementEntry_C_ExecuteUbergraph_W_ServiceAnnouncementEntry) == 0x000010, "Wrong size on W_ServiceAnnouncementEntry_C_ExecuteUbergraph_W_ServiceAnnouncementEntry");
static_assert(offsetof(W_ServiceAnnouncementEntry_C_ExecuteUbergraph_W_ServiceAnnouncementEntry, EntryPoint) == 0x000000, "Member 'W_ServiceAnnouncementEntry_C_ExecuteUbergraph_W_ServiceAnnouncementEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_ServiceAnnouncementEntry_C_ExecuteUbergraph_W_ServiceAnnouncementEntry, K2Node_Event_Data) == 0x000008, "Member 'W_ServiceAnnouncementEntry_C_ExecuteUbergraph_W_ServiceAnnouncementEntry::K2Node_Event_Data' has a wrong offset!");

}

