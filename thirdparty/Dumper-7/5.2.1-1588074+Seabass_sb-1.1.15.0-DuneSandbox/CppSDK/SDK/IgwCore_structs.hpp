#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IgwCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PersistenceCore_structs.hpp"


namespace SDK
{

// Enum IgwCore.EPartitionType
// NumValues: 0x0006
enum class EPartitionType : uint8
{
	Null                                     = 0,
	Cell_Index                               = 1,
	Box2D_Array                              = 2,
	Actor_Group                              = 3,
	Dungeon                                  = 4,
	EPartitionType_MAX                       = 5,
};

// ScriptStruct IgwCore.AuthorityTransferParams
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FAuthorityTransferParams final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAuthorityTransferParams) == 0x000004, "Wrong alignment on FAuthorityTransferParams");
static_assert(sizeof(FAuthorityTransferParams) == 0x000014, "Wrong size on FAuthorityTransferParams");

// ScriptStruct IgwCore.ServerID
// 0x0010 (0x0010 - 0x0000)
struct FServerID final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FServerID) == 0x000004, "Wrong alignment on FServerID");
static_assert(sizeof(FServerID) == 0x000010, "Wrong size on FServerID");
static_assert(offsetof(FServerID, ID) == 0x000000, "Member 'FServerID::ID' has a wrong offset!");

// ScriptStruct IgwCore.ActorGlobalID
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FActorGlobalID
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorGlobalID) == 0x000008, "Wrong alignment on FActorGlobalID");
static_assert(sizeof(FActorGlobalID) == 0x000020, "Wrong size on FActorGlobalID");

// ScriptStruct IgwCore.PartitionDefinition
// 0x0068 (0x0068 - 0x0000)
struct FPartitionDefinition
{
public:
	struct FSoftObjectPath                        MapName;                                           // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0x28];                                      // 0x0020(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              DatabaseId;                                        // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         m_DimensionIndex;                                  // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_bBlocked;                                        // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_Label;                                           // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPartitionDefinition) == 0x000008, "Wrong alignment on FPartitionDefinition");
static_assert(sizeof(FPartitionDefinition) == 0x000068, "Wrong size on FPartitionDefinition");
static_assert(offsetof(FPartitionDefinition, MapName) == 0x000000, "Member 'FPartitionDefinition::MapName' has a wrong offset!");
static_assert(offsetof(FPartitionDefinition, DatabaseId) == 0x000048, "Member 'FPartitionDefinition::DatabaseId' has a wrong offset!");
static_assert(offsetof(FPartitionDefinition, m_DimensionIndex) == 0x000050, "Member 'FPartitionDefinition::m_DimensionIndex' has a wrong offset!");
static_assert(offsetof(FPartitionDefinition, m_bBlocked) == 0x000054, "Member 'FPartitionDefinition::m_bBlocked' has a wrong offset!");
static_assert(offsetof(FPartitionDefinition, m_Label) == 0x000058, "Member 'FPartitionDefinition::m_Label' has a wrong offset!");

// ScriptStruct IgwCore.ServerInfo
// 0x0090 (0x0090 - 0x0000)
struct FServerInfo final
{
public:
	struct FServerID                              ServerID;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             WorldOffset;                                       // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        MapName;                                           // 0x0020(0x0020)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredServerIndex;                                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FarmName;                                          // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FarmRegion;                                        // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  FarmSessionID;                                     // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredDimensionIndex;                             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             WorldCompositionShift;                             // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateTime;                                          // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerInfo) == 0x000008, "Wrong alignment on FServerInfo");
static_assert(sizeof(FServerInfo) == 0x000090, "Wrong size on FServerInfo");
static_assert(offsetof(FServerInfo, ServerID) == 0x000000, "Member 'FServerInfo::ServerID' has a wrong offset!");
static_assert(offsetof(FServerInfo, WorldOffset) == 0x000010, "Member 'FServerInfo::WorldOffset' has a wrong offset!");
static_assert(offsetof(FServerInfo, MapName) == 0x000020, "Member 'FServerInfo::MapName' has a wrong offset!");
static_assert(offsetof(FServerInfo, DesiredServerIndex) == 0x000040, "Member 'FServerInfo::DesiredServerIndex' has a wrong offset!");
static_assert(offsetof(FServerInfo, FarmName) == 0x000048, "Member 'FServerInfo::FarmName' has a wrong offset!");
static_assert(offsetof(FServerInfo, FarmRegion) == 0x000058, "Member 'FServerInfo::FarmRegion' has a wrong offset!");
static_assert(offsetof(FServerInfo, FarmSessionID) == 0x000068, "Member 'FServerInfo::FarmSessionID' has a wrong offset!");
static_assert(offsetof(FServerInfo, DesiredDimensionIndex) == 0x000078, "Member 'FServerInfo::DesiredDimensionIndex' has a wrong offset!");
static_assert(offsetof(FServerInfo, WorldCompositionShift) == 0x00007C, "Member 'FServerInfo::WorldCompositionShift' has a wrong offset!");
static_assert(offsetof(FServerInfo, DateTime) == 0x000088, "Member 'FServerInfo::DateTime' has a wrong offset!");

}

