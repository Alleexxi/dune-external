#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SK_COL_Body_CtrlRig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// RigVMMemoryStorageGeneratorClass SK_COL_Body_CtrlRig.RigVMMemory_Work
// 0x02C0 (0x02F0 - 0x0030)
class SK_COL_Body_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_Result;     // 0x0030(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_Result;                   // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Result;                // 0x0054(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_Result;       // 0x0058(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_Result;                   // 0x0070(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x00D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x0130(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_Global;           // 0x0140(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__IO;              // 0x0158(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_PrimaryCachedSpace;       // 0x01A0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_SecondaryCachedSpace;     // 0x01B0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_bIsInitialized;           // 0x01C0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_Value;        // 0x01D0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Value;                 // 0x01F0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_Buffer;                   // 0x01F8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_LastInsertIndex;          // 0x0208(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_Result;     // 0x0218(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_Value;      // 0x0230(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__IO; // 0x0250(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_Value__IO;       // 0x0270(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_SetTransform_Weight;          // 0x02D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_CachedIndex;     // 0x02D8(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_COL_Body_CtrlRig.RigVMMemory_Work", true>();
	}
	static class SK_COL_Body_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_COL_Body_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(SK_COL_Body_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on SK_COL_Body_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(SK_COL_Body_CtrlRig::URigVMMemory_Work) == 0x0002F0, "Wrong size on SK_COL_Body_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Result) == 0x000030, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Result) == 0x000050, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Result) == 0x000054, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Result) == 0x000058, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Result) == 0x000070, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x0000D0, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x000130, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_Global) == 0x000140, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_Global' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Primary__IO) == 0x000158, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_PrimaryCachedSpace) == 0x0001A0, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_SecondaryCachedSpace) == 0x0001B0, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_bIsInitialized) == 0x0001C0, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Value) == 0x0001D0, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Value) == 0x0001F0, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Buffer) == 0x0001F8, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Buffer' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_LastInsertIndex) == 0x000208, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Result) == 0x000218, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Value) == 0x000230, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Value' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Rotator__IO) == 0x000250, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_Value__IO) == 0x000270, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_Weight) == 0x0002D0, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_Weight' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_CachedIndex) == 0x0002D8, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_CachedIndex' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_COL_Body_CtrlRig.RigVMMemory_Literal
// 0x01A0 (0x01D0 - 0x0030)
class SK_COL_Body_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_Item__Const;     // 0x0030(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___RigUnit_SetTransform_Space__Const;    // 0x003C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_SetTransform_bInitial__Const; // 0x003D(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_Value__Const;    // 0x0040(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__Const; // 0x00A0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__Const;           // 0x00B8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Secondary__Const;         // 0x0100(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___AimBoneMath_Weight__Const;            // 0x0148(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimBone_DebugSettings         RigVMModel___AimBoneMath_DebugSettings__Const;     // 0x0150(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_Minimum__Const;        // 0x01C0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Maximum__Const;        // 0x01C4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___KalmanFloat_BufferSize__Const;        // 0x01C8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_SetTransform_bPropagateToChildren__Const; // 0x01CC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_COL_Body_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class SK_COL_Body_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_COL_Body_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(SK_COL_Body_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on SK_COL_Body_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(SK_COL_Body_CtrlRig::URigVMMemory_Literal) == 0x0001D0, "Wrong size on SK_COL_Body_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Item__Const) == 0x000030, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Space__Const) == 0x00003C, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Space__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_bInitial__Const) == 0x00003D, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_bInitial__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Value__Const) == 0x000040, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Value__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___MathQuaternionFromRotator_Rotator__Const) == 0x0000A0, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___MathQuaternionFromRotator_Rotator__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Primary__Const) == 0x0000B8, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Secondary__Const) == 0x000100, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Weight__Const) == 0x000148, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Weight__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_DebugSettings__Const) == 0x000150, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Minimum__Const) == 0x0001C0, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Maximum__Const) == 0x0001C4, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_BufferSize__Const) == 0x0001C8, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_COL_Body_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_bPropagateToChildren__Const) == 0x0001CC, "Member 'SK_COL_Body_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_bPropagateToChildren__Const' has a wrong offset!");

// ControlRigBlueprintGeneratedClass SK_COL_Body_CtrlRig.SK_COL_Body_CtrlRig_C
// 0x0020 (0x0420 - 0x0400)
class USK_COL_Body_CtrlRig_C final : public UControlRig
{
public:
	struct FVector                                LoadingRampTarget;                                 // 0x0400(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IKWeight_Ramp;                                     // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SK_COL_Body_CtrlRig_C">();
	}
	static class USK_COL_Body_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USK_COL_Body_CtrlRig_C>();
	}
};
static_assert(alignof(USK_COL_Body_CtrlRig_C) == 0x000008, "Wrong alignment on USK_COL_Body_CtrlRig_C");
static_assert(sizeof(USK_COL_Body_CtrlRig_C) == 0x000420, "Wrong size on USK_COL_Body_CtrlRig_C");
static_assert(offsetof(USK_COL_Body_CtrlRig_C, LoadingRampTarget) == 0x000400, "Member 'USK_COL_Body_CtrlRig_C::LoadingRampTarget' has a wrong offset!");
static_assert(offsetof(USK_COL_Body_CtrlRig_C, IKWeight_Ramp) == 0x000418, "Member 'USK_COL_Body_CtrlRig_C::IKWeight_Ramp' has a wrong offset!");

}

