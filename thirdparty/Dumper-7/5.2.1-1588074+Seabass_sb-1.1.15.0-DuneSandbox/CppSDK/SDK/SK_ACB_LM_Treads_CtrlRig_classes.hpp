#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SK_ACB_LM_Treads_CtrlRig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// RigVMMemoryStorageGeneratorClass SK_ACB_LM_Treads_CtrlRig.RigVMMemory_Work
// 0x1B10 (0x1B40 - 0x0030)
class SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	float                                         RigVMModel___KalmanFloat_Result;                   // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_Value;                    // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_Buffer;                   // 0x0038(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_LastInsertIndex;          // 0x0048(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___CollectionLoop_Item;                  // 0x0058(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_Result;     // 0x0070(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_Result;                  // 0x0090(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__IO; // 0x0098(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___OffsetTransformForItem_OffsetTransform__IO; // 0x00B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_CachedIndex;   // 0x0110(0x0010)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___CollectionLoop_BlockToRun;            // 0x0120(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKeyCollection               RigVMModel___RigUnit_CollectionItems_Collection;   // 0x0128(0x0010)(Edit, EditConst, NonTransactional, HasGetValueTypeHash)
	int32                                         RigVMModel___CollectionLoop_Index;                 // 0x0138(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___CollectionLoop_Count;                 // 0x013C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___CollectionLoop_Ratio;                 // 0x0140(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___CollectionLoop_1_Item;                // 0x0144(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_Result;   // 0x0150(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_1_Result;                // 0x0170(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_Rotator__IO; // 0x0178(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO; // 0x0190(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_1_CachedIndex; // 0x01F0(0x0010)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___CollectionLoop_1_BlockToRun;          // 0x0200(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKeyCollection               RigVMModel___RigUnit_CollectionItems_1_Collection; // 0x0208(0x0010)(Edit, EditConst, NonTransactional, HasGetValueTypeHash)
	int32                                         RigVMModel___CollectionLoop_1_Index;               // 0x0218(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___CollectionLoop_1_Count;               // 0x021C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___CollectionLoop_1_Ratio;               // 0x0220(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0xC];                                      // 0x0224(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_Result;   // 0x0230(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_Result;                 // 0x0250(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Result;                // 0x0254(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_Result;     // 0x0258(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_Result;                   // 0x0270(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x02D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x0330(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_Global;           // 0x0340(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__IO;              // 0x0358(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_PrimaryCachedSpace;       // 0x03A0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_SecondaryCachedSpace;     // 0x03B0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_bIsInitialized;           // 0x03C0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_Value;      // 0x03D0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Value;                 // 0x03F0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_Buffer;                 // 0x03F8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_LastInsertIndex;        // 0x0408(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_Result;       // 0x0418(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_Value;        // 0x0430(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_Rotator__IO; // 0x0450(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_Value__IO;       // 0x0470(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_CachedIndex;     // 0x04D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_1_Result; // 0x04E0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_1_Result;               // 0x0500(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_Result;              // 0x0504(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_1_Result;   // 0x0508(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_1_Result;                 // 0x0520(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x0580(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x05E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_1_Global;         // 0x05F0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_Primary__IO;            // 0x0608(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_PrimaryCachedSpace;     // 0x0650(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_SecondaryCachedSpace;   // 0x0660(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_1_bIsInitialized;         // 0x0670(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_1_Value;    // 0x0680(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_Value;               // 0x06A0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A4[0x4];                                      // 0x06A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_1_Buffer;               // 0x06A8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_1_LastInsertIndex;      // 0x06B8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_2_Result;     // 0x06C8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_2_Value;      // 0x06E0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_1_Rotator__IO; // 0x0700(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_718[0x8];                                      // 0x0718(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_1_Value__IO;     // 0x0720(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_1_CachedIndex;   // 0x0780(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_2_Result; // 0x0790(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_2_Result;               // 0x07B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_Result;              // 0x07B4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_2_Result;   // 0x07B8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_2_Result;                 // 0x07D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_Transform;     // 0x0830(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_CachedIndex;   // 0x0890(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_2_Global;         // 0x08A0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_2_Primary__IO;            // 0x08B8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_PrimaryCachedSpace;     // 0x0900(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_SecondaryCachedSpace;   // 0x0910(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_2_bIsInitialized;         // 0x0920(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_2_Value;    // 0x0930(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_Value;               // 0x0950(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_954[0x4];                                      // 0x0954(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_2_Buffer;               // 0x0958(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_2_LastInsertIndex;      // 0x0968(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_3_Result;     // 0x0978(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_3_Value;      // 0x0990(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_2_Rotator__IO; // 0x09B0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_9C8[0x8];                                      // 0x09C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_2_Value__IO;     // 0x09D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_2_CachedIndex;   // 0x0A30(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_1_1_Result; // 0x0A40(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_1_1_Result;             // 0x0A60(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_1_Result;            // 0x0A64(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_1_1_Result; // 0x0A68(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_1_1_Result;               // 0x0A80(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_1_Transform;   // 0x0AE0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_1_CachedIndex; // 0x0B40(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_1_1_Global;       // 0x0B50(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_1_Primary__IO;          // 0x0B68(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_1_PrimaryCachedSpace;   // 0x0BB0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_1_SecondaryCachedSpace; // 0x0BC0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_1_1_bIsInitialized;       // 0x0BD0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_1_1_Value;  // 0x0BE0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_1_Value;             // 0x0C00(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C04[0x4];                                      // 0x0C04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_1_1_Buffer;             // 0x0C08(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_1_1_LastInsertIndex;    // 0x0C18(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_2_1_Result;   // 0x0C28(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_2_1_Value;    // 0x0C40(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_1_1_Rotator__IO; // 0x0C60(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_C78[0x8];                                      // 0x0C78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_1_1_Value__IO;   // 0x0C80(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_1_1_CachedIndex; // 0x0CE0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_3_Result; // 0x0CF0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_3_Result;               // 0x0D10(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_Result;              // 0x0D14(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_3_Result;   // 0x0D18(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_3_Result;                 // 0x0D30(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_Transform;     // 0x0D90(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_CachedIndex;   // 0x0DF0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_3_Global;         // 0x0E00(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_3_Primary__IO;            // 0x0E18(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_3_PrimaryCachedSpace;     // 0x0E60(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_3_SecondaryCachedSpace;   // 0x0E70(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_3_bIsInitialized;         // 0x0E80(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_3_Value;    // 0x0E90(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_Value;               // 0x0EB0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EB4[0x4];                                      // 0x0EB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_3_Buffer;               // 0x0EB8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_3_LastInsertIndex;      // 0x0EC8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_4_Result;     // 0x0ED8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_4_Value;      // 0x0EF0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_3_Rotator__IO; // 0x0F10(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_F28[0x8];                                      // 0x0F28(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_3_Value__IO;     // 0x0F30(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_3_CachedIndex;   // 0x0F90(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_1_2_Result; // 0x0FA0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_1_2_Result;             // 0x0FC0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_2_Result;            // 0x0FC4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_1_2_Result; // 0x0FC8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_1_2_Result;               // 0x0FE0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_2_Transform;   // 0x1040(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_2_CachedIndex; // 0x10A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_1_2_Global;       // 0x10B0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_2_Primary__IO;          // 0x10C8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_2_PrimaryCachedSpace;   // 0x1110(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_2_SecondaryCachedSpace; // 0x1120(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_1_2_bIsInitialized;       // 0x1130(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_1_2_Value;  // 0x1140(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_2_Value;             // 0x1160(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1164[0x4];                                     // 0x1164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_1_2_Buffer;             // 0x1168(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_1_2_LastInsertIndex;    // 0x1178(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_2_2_Result;   // 0x1188(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_2_2_Value;    // 0x11A0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_1_2_Rotator__IO; // 0x11C0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_11D8[0x8];                                     // 0x11D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_1_2_Value__IO;   // 0x11E0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_1_2_CachedIndex; // 0x1240(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_4_Result; // 0x1250(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_4_Result;               // 0x1270(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Result;              // 0x1274(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_4_Result;   // 0x1278(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_4_Result;                 // 0x1290(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_4_Transform;     // 0x12F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_4_CachedIndex;   // 0x1350(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_4_Global;         // 0x1360(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_4_Primary__IO;            // 0x1378(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_4_PrimaryCachedSpace;     // 0x13C0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_4_SecondaryCachedSpace;   // 0x13D0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_4_bIsInitialized;         // 0x13E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_4_Value;    // 0x13F0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Value;               // 0x1410(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1414[0x4];                                     // 0x1414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_4_Buffer;               // 0x1418(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_4_LastInsertIndex;      // 0x1428(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_5_Result;     // 0x1438(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_5_Value;      // 0x1450(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_4_Rotator__IO; // 0x1470(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_1488[0x8];                                     // 0x1488(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_4_Value__IO;     // 0x1490(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_4_CachedIndex;   // 0x14F0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_1_3_Result; // 0x1500(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_1_3_Result;             // 0x1520(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_3_Result;            // 0x1524(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_1_3_Result; // 0x1528(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_1_3_Result;               // 0x1540(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_3_Transform;   // 0x15A0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_3_CachedIndex; // 0x1600(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_1_3_Global;       // 0x1610(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_3_Primary__IO;          // 0x1628(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_3_PrimaryCachedSpace;   // 0x1670(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_3_SecondaryCachedSpace; // 0x1680(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_1_3_bIsInitialized;       // 0x1690(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_1_3_Value;  // 0x16A0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_3_Value;             // 0x16C0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C4[0x4];                                     // 0x16C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_1_3_Buffer;             // 0x16C8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_1_3_LastInsertIndex;    // 0x16D8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_2_3_Result;   // 0x16E8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_2_3_Value;    // 0x1700(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_1_3_Rotator__IO; // 0x1720(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_1738[0x8];                                     // 0x1738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_1_3_Value__IO;   // 0x1740(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_1_3_CachedIndex; // 0x17A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Element; // 0x17B0(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17BC[0x4];                                     // 0x17BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_Result;   // 0x17C0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_Rotator__IO; // 0x17E0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_17F8[0x8];                                     // 0x17F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_OffsetTransform__IO; // 0x1800(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_2_CachedIndex; // 0x1860(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_Items__IO;          // 0x1870(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Index; // 0x1880(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Count; // 0x1884(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Ratio; // 0x1888(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun; // 0x188C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Element; // 0x1894(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_1_Result; // 0x18A0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO; // 0x18C0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_18D8[0x8];                                     // 0x18D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_1_OffsetTransform__IO; // 0x18E0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_2_1_CachedIndex; // 0x1940(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_1_Items__IO;        // 0x1950(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Index; // 0x1960(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Count; // 0x1964(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Ratio; // 0x1968(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_BlockToRun; // 0x196C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Element; // 0x1974(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_2_Result; // 0x1980(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_2_Rotator__IO; // 0x19A0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_19B8[0x8];                                     // 0x19B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_2_OffsetTransform__IO; // 0x19C0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_2_2_CachedIndex; // 0x1A20(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_2_Items__IO;        // 0x1A30(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Index; // 0x1A40(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Count; // 0x1A44(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Ratio; // 0x1A48(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_BlockToRun; // 0x1A4C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Element; // 0x1A54(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_3_Result; // 0x1A60(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_3_Rotator__IO; // 0x1A80(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_1A98[0x8];                                     // 0x1A98(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_3_OffsetTransform__IO; // 0x1AA0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_2_3_CachedIndex; // 0x1B00(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_3_Items__IO;        // 0x1B10(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Index; // 0x1B20(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Count; // 0x1B24(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Ratio; // 0x1B28(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_BlockToRun; // 0x1B2C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_ACB_LM_Treads_CtrlRig.RigVMMemory_Work", true>();
	}
	static class SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work) == 0x001B40, "Wrong size on SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Result) == 0x000030, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Value) == 0x000034, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Buffer) == 0x000038, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Buffer' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_LastInsertIndex) == 0x000048, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_Item) == 0x000058, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_Item' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Result) == 0x000070, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatMul_Result) == 0x000090, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatMul_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Rotator__IO) == 0x000098, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_OffsetTransform__IO) == 0x0000B0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_CachedIndex) == 0x000110, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_BlockToRun) == 0x000120, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_CollectionItems_Collection) == 0x000128, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_CollectionItems_Collection' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_Index) == 0x000138, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_Index' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_Count) == 0x00013C, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_Count' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_Ratio) == 0x000140, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_Ratio' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_1_Item) == 0x000144, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_1_Item' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Result) == 0x000150, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatMul_1_Result) == 0x000170, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatMul_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Rotator__IO) == 0x000178, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO) == 0x000190, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_CachedIndex) == 0x0001F0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_1_BlockToRun) == 0x000200, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_1_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_CollectionItems_1_Collection) == 0x000208, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_CollectionItems_1_Collection' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_1_Index) == 0x000218, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_1_Index' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_1_Count) == 0x00021C, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_1_Count' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___CollectionLoop_1_Ratio) == 0x000220, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___CollectionLoop_1_Ratio' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_Result) == 0x000230, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_Result) == 0x000250, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Result) == 0x000254, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Result) == 0x000258, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Result) == 0x000270, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x0002D0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x000330, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_Global) == 0x000340, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_Global' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Primary__IO) == 0x000358, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_PrimaryCachedSpace) == 0x0003A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_SecondaryCachedSpace) == 0x0003B0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_bIsInitialized) == 0x0003C0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Value) == 0x0003D0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Value) == 0x0003F0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_Buffer) == 0x0003F8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_Buffer' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_LastInsertIndex) == 0x000408, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Result) == 0x000418, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Value) == 0x000430, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_Rotator__IO) == 0x000450, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_Value__IO) == 0x000470, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_CachedIndex) == 0x0004D0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_Result) == 0x0004E0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_Result) == 0x000500, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_Result) == 0x000504, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_Result) == 0x000508, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_Result) == 0x000520, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_Transform) == 0x000580, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_CachedIndex) == 0x0005E0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_1_Global) == 0x0005F0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_1_Global' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_Primary__IO) == 0x000608, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_PrimaryCachedSpace) == 0x000650, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_SecondaryCachedSpace) == 0x000660, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_bIsInitialized) == 0x000670, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_Value) == 0x000680, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_Value) == 0x0006A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_Buffer) == 0x0006A8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_LastInsertIndex) == 0x0006B8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_Result) == 0x0006C8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_Value) == 0x0006E0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_Rotator__IO) == 0x000700, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_Value__IO) == 0x000720, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_CachedIndex) == 0x000780, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_2_Result) == 0x000790, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_2_Result) == 0x0007B0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_Result) == 0x0007B4, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_2_Result) == 0x0007B8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_Result) == 0x0007D0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_Transform) == 0x000830, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_CachedIndex) == 0x000890, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_2_Global) == 0x0008A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_2_Global' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_Primary__IO) == 0x0008B8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_PrimaryCachedSpace) == 0x000900, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_SecondaryCachedSpace) == 0x000910, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_bIsInitialized) == 0x000920, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_2_Value) == 0x000930, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_2_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_Value) == 0x000950, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_2_Buffer) == 0x000958, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_2_Buffer' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_2_LastInsertIndex) == 0x000968, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_2_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_Result) == 0x000978, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_Value) == 0x000990, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_2_Rotator__IO) == 0x0009B0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_2_Value__IO) == 0x0009D0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_2_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_2_CachedIndex) == 0x000A30, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_1_Result) == 0x000A40, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_1_Result) == 0x000A60, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_1_Result) == 0x000A64, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_1_Result) == 0x000A68, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_Result) == 0x000A80, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_1_Transform) == 0x000AE0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_1_CachedIndex) == 0x000B40, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_1_1_Global) == 0x000B50, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_1_1_Global' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_Primary__IO) == 0x000B68, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_PrimaryCachedSpace) == 0x000BB0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_SecondaryCachedSpace) == 0x000BC0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_bIsInitialized) == 0x000BD0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_1_Value) == 0x000BE0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_1_Value) == 0x000C00, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_1_Buffer) == 0x000C08, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_1_LastInsertIndex) == 0x000C18, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_1_Result) == 0x000C28, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_1_Value) == 0x000C40, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_1_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_1_Rotator__IO) == 0x000C60, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_1_Value__IO) == 0x000C80, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_1_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_1_CachedIndex) == 0x000CE0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_3_Result) == 0x000CF0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_3_Result) == 0x000D10, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_Result) == 0x000D14, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_3_Result) == 0x000D18, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_Result) == 0x000D30, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_Transform) == 0x000D90, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_Transform' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_CachedIndex) == 0x000DF0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_3_Global) == 0x000E00, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_3_Global' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_Primary__IO) == 0x000E18, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_PrimaryCachedSpace) == 0x000E60, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_SecondaryCachedSpace) == 0x000E70, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_bIsInitialized) == 0x000E80, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_3_Value) == 0x000E90, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_3_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_Value) == 0x000EB0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_3_Buffer) == 0x000EB8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_3_Buffer' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_3_LastInsertIndex) == 0x000EC8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_3_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_4_Result) == 0x000ED8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_4_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_4_Value) == 0x000EF0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_4_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_3_Rotator__IO) == 0x000F10, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_3_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_3_Value__IO) == 0x000F30, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_3_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_3_CachedIndex) == 0x000F90, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_2_Result) == 0x000FA0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_2_Result) == 0x000FC0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_2_Result) == 0x000FC4, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_2_Result) == 0x000FC8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_2_Result) == 0x000FE0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_2_Transform) == 0x001040, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_2_CachedIndex) == 0x0010A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_1_2_Global) == 0x0010B0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_1_2_Global' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_2_Primary__IO) == 0x0010C8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_2_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_2_PrimaryCachedSpace) == 0x001110, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_2_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_2_SecondaryCachedSpace) == 0x001120, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_2_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_2_bIsInitialized) == 0x001130, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_2_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_2_Value) == 0x001140, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_2_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_2_Value) == 0x001160, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_2_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_2_Buffer) == 0x001168, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_2_Buffer' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_2_LastInsertIndex) == 0x001178, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_2_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_2_Result) == 0x001188, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_2_Value) == 0x0011A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_2_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_2_Rotator__IO) == 0x0011C0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_2_Value__IO) == 0x0011E0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_2_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_2_CachedIndex) == 0x001240, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_4_Result) == 0x001250, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_4_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_4_Result) == 0x001270, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_4_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_Result) == 0x001274, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_4_Result) == 0x001278, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_4_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_Result) == 0x001290, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_Transform) == 0x0012F0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_Transform' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_CachedIndex) == 0x001350, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_4_Global) == 0x001360, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_4_Global' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_Primary__IO) == 0x001378, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_PrimaryCachedSpace) == 0x0013C0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_SecondaryCachedSpace) == 0x0013D0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_bIsInitialized) == 0x0013E0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_4_Value) == 0x0013F0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_4_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_Value) == 0x001410, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_4_Buffer) == 0x001418, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_4_Buffer' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_4_LastInsertIndex) == 0x001428, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_4_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_5_Result) == 0x001438, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_5_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_5_Value) == 0x001450, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_5_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_4_Rotator__IO) == 0x001470, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_4_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_4_Value__IO) == 0x001490, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_4_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_4_CachedIndex) == 0x0014F0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_3_Result) == 0x001500, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_3_Result) == 0x001520, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_3_Result) == 0x001524, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_3_Result) == 0x001528, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_3_Result) == 0x001540, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_3_Transform) == 0x0015A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_3_Transform' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_3_CachedIndex) == 0x001600, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_1_3_Global) == 0x001610, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_1_3_Global' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_3_Primary__IO) == 0x001628, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_3_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_3_PrimaryCachedSpace) == 0x001670, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_3_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_3_SecondaryCachedSpace) == 0x001680, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_3_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_3_bIsInitialized) == 0x001690, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_3_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_3_Value) == 0x0016A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_3_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_3_Value) == 0x0016C0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_3_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_3_Buffer) == 0x0016C8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_3_Buffer' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_1_3_LastInsertIndex) == 0x0016D8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_1_3_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_3_Result) == 0x0016E8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_3_Value) == 0x001700, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_3_Value' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_3_Rotator__IO) == 0x001720, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_3_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_3_Value__IO) == 0x001740, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_3_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_3_CachedIndex) == 0x0017A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Element) == 0x0017B0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Element' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_Result) == 0x0017C0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_Rotator__IO) == 0x0017E0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_OffsetTransform__IO) == 0x001800, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_CachedIndex) == 0x001860, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_Items__IO) == 0x001870, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Index) == 0x001880, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Index' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Count) == 0x001884, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Count' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Ratio) == 0x001888, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Ratio' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun) == 0x00188C, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Element) == 0x001894, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Element' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_Result) == 0x0018A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO) == 0x0018C0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_1_OffsetTransform__IO) == 0x0018E0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_1_CachedIndex) == 0x001940, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_1_Items__IO) == 0x001950, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_1_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Index) == 0x001960, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Index' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Count) == 0x001964, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Count' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Ratio) == 0x001968, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Ratio' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_BlockToRun) == 0x00196C, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Element) == 0x001974, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Element' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_2_Result) == 0x001980, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_2_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_2_Rotator__IO) == 0x0019A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_2_OffsetTransform__IO) == 0x0019C0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_2_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_2_CachedIndex) == 0x001A20, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_2_Items__IO) == 0x001A30, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_2_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Index) == 0x001A40, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Index' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Count) == 0x001A44, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Count' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Ratio) == 0x001A48, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Ratio' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_BlockToRun) == 0x001A4C, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Element) == 0x001A54, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Element' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_3_Result) == 0x001A60, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_3_Result' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_3_Rotator__IO) == 0x001A80, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_3_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_3_OffsetTransform__IO) == 0x001AA0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_3_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_3_CachedIndex) == 0x001B00, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_3_Items__IO) == 0x001B10, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_3_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Index) == 0x001B20, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Index' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Count) == 0x001B24, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Count' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Ratio) == 0x001B28, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_Ratio' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_BlockToRun) == 0x001B2C, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_3_BlockToRun' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_ACB_LM_Treads_CtrlRig.RigVMMemory_Literal
// 0x03E0 (0x0410 - 0x0030)
class SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	int32                                         RigVMModel___KalmanFloat_BufferSize__Const;        // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_OffsetTransform__Const; // 0x0040(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__Const; // 0x00A0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatMul_B__Const;                // 0x00B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___OffsetTransformForItem_Weight__Const; // 0x00BC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const; // 0x00C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_CollectionItems_Items__Const; // 0x00C8(0x0010)(Edit, EditConst, NonTransactional)
	bool                                          RigVMModel___RigUnit_CollectionItems_bAllowDuplicates__Const; // 0x00D8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigVMModel___MathFloatMul_1_B__Const;              // 0x00DC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_CollectionItems_1_Items__Const; // 0x00E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_Item__Const;     // 0x00F0(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___RigUnit_SetTransform_Space__Const;    // 0x00FC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_Value__Const;    // 0x0100(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__Const;           // 0x0160(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Secondary__Const;         // 0x01A8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimBone_DebugSettings         RigVMModel___AimBoneMath_DebugSettings__Const;     // 0x01F0(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_Minimum__Const;        // 0x0260(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Maximum__Const;        // 0x0264(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___KalmanFloat_2_BufferSize__Const;      // 0x0268(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_1_Item__Const;   // 0x026C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_1_Value__Const;  // 0x0280(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_Primary__Const;         // 0x02E0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_Secondary__Const;       // 0x0328(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_1_Minimum__Const;      // 0x0370(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_Maximum__Const;      // 0x0374(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___KalmanFloat_2_1_BufferSize__Const;    // 0x0378(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_2_Item__Const;   // 0x037C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_1_1_Item__Const; // 0x0388(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_3_Item__Const;   // 0x0394(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_Maximum__Const;      // 0x03A0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_1_2_Item__Const; // 0x03A4(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_4_Item__Const;   // 0x03B0(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_1_3_Item__Const; // 0x03BC(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_Items__Const;       // 0x03C8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_1_Items__Const;     // 0x03D8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_2_Items__Const;     // 0x03E8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_3_Items__Const;     // 0x03F8(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_ACB_LM_Treads_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal) == 0x000410, "Wrong size on SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_BufferSize__Const) == 0x000030, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_OffsetTransform__Const) == 0x000040, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathQuaternionFromRotator_Rotator__Const) == 0x0000A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathQuaternionFromRotator_Rotator__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatMul_B__Const) == 0x0000B8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatMul_B__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_Weight__Const) == 0x0000BC, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_Weight__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const) == 0x0000C0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_CollectionItems_Items__Const) == 0x0000C8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_CollectionItems_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_CollectionItems_bAllowDuplicates__Const) == 0x0000D8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_CollectionItems_bAllowDuplicates__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatMul_1_B__Const) == 0x0000DC, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatMul_1_B__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_CollectionItems_1_Items__Const) == 0x0000E0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_CollectionItems_1_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Item__Const) == 0x0000F0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Space__Const) == 0x0000FC, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Space__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Value__Const) == 0x000100, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Value__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Primary__Const) == 0x000160, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Secondary__Const) == 0x0001A8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_DebugSettings__Const) == 0x0001F0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Minimum__Const) == 0x000260, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Maximum__Const) == 0x000264, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_2_BufferSize__Const) == 0x000268, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_2_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_1_Item__Const) == 0x00026C, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_1_Value__Const) == 0x000280, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_1_Value__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_1_Primary__Const) == 0x0002E0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_1_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_1_Secondary__Const) == 0x000328, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_1_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_1_Minimum__Const) == 0x000370, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_1_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_1_Maximum__Const) == 0x000374, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_1_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_2_1_BufferSize__Const) == 0x000378, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_2_1_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_2_Item__Const) == 0x00037C, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_1_1_Item__Const) == 0x000388, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_3_Item__Const) == 0x000394, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_3_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_3_Maximum__Const) == 0x0003A0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_3_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_1_2_Item__Const) == 0x0003A4, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_1_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_4_Item__Const) == 0x0003B0, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_4_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_1_3_Item__Const) == 0x0003BC, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_1_3_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_Items__Const) == 0x0003C8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_1_Items__Const) == 0x0003D8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_1_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_2_Items__Const) == 0x0003E8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_2_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_3_Items__Const) == 0x0003F8, "Member 'SK_ACB_LM_Treads_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_3_Items__Const' has a wrong offset!");

// RigVMBlueprintGeneratedClass SK_ACB_LM_Treads_CtrlRig.SK_ACB_LM_Treads_CtrlRig_C
// 0x00E8 (0x04E8 - 0x0400)
class USK_ACB_LM_Treads_CtrlRig_C final : public UControlRig
{
public:
	double                                        Steering;                                          // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Front_L_Offset;                              // 0x0408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Front_R_Offset;                              // 0x0420(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Rear_L_Offset;                               // 0x0438(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Rear_R_Offset;                               // 0x0450(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Front_L_Rotation;                            // 0x0468(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Front_R_Rotation;                            // 0x0480(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Rear_L_Rotation;                             // 0x0498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Rear_R_Rotation;                             // 0x04B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotationFL;                                   // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotationFR;                                   // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotationRL;                                   // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotationRR;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SK_ACB_LM_Treads_CtrlRig_C">();
	}
	static class USK_ACB_LM_Treads_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USK_ACB_LM_Treads_CtrlRig_C>();
	}
};
static_assert(alignof(USK_ACB_LM_Treads_CtrlRig_C) == 0x000008, "Wrong alignment on USK_ACB_LM_Treads_CtrlRig_C");
static_assert(sizeof(USK_ACB_LM_Treads_CtrlRig_C) == 0x0004E8, "Wrong size on USK_ACB_LM_Treads_CtrlRig_C");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, Steering) == 0x000400, "Member 'USK_ACB_LM_Treads_CtrlRig_C::Steering' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, Tread_Front_L_Offset) == 0x000408, "Member 'USK_ACB_LM_Treads_CtrlRig_C::Tread_Front_L_Offset' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, Tread_Front_R_Offset) == 0x000420, "Member 'USK_ACB_LM_Treads_CtrlRig_C::Tread_Front_R_Offset' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, Tread_Rear_L_Offset) == 0x000438, "Member 'USK_ACB_LM_Treads_CtrlRig_C::Tread_Rear_L_Offset' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, Tread_Rear_R_Offset) == 0x000450, "Member 'USK_ACB_LM_Treads_CtrlRig_C::Tread_Rear_R_Offset' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, Tread_Front_L_Rotation) == 0x000468, "Member 'USK_ACB_LM_Treads_CtrlRig_C::Tread_Front_L_Rotation' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, Tread_Front_R_Rotation) == 0x000480, "Member 'USK_ACB_LM_Treads_CtrlRig_C::Tread_Front_R_Rotation' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, Tread_Rear_L_Rotation) == 0x000498, "Member 'USK_ACB_LM_Treads_CtrlRig_C::Tread_Rear_L_Rotation' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, Tread_Rear_R_Rotation) == 0x0004B0, "Member 'USK_ACB_LM_Treads_CtrlRig_C::Tread_Rear_R_Rotation' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, WheelRotationFL) == 0x0004C8, "Member 'USK_ACB_LM_Treads_CtrlRig_C::WheelRotationFL' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, WheelRotationFR) == 0x0004D0, "Member 'USK_ACB_LM_Treads_CtrlRig_C::WheelRotationFR' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, WheelRotationRL) == 0x0004D8, "Member 'USK_ACB_LM_Treads_CtrlRig_C::WheelRotationRL' has a wrong offset!");
static_assert(offsetof(USK_ACB_LM_Treads_CtrlRig_C, WheelRotationRR) == 0x0004E0, "Member 'USK_ACB_LM_Treads_CtrlRig_C::WheelRotationRR' has a wrong offset!");

}

