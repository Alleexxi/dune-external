#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_WindturbineTemplateAnim

#include "Basic.hpp"

#include "AB_WindturbineTemplateAnim_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_WindturbineTemplateAnim.AB_WindturbineTemplateAnim_C
// 0x01B0 (0x0500 - 0x0350)
class UAB_WindturbineTemplateAnim_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct AB_WindturbineTemplateAnim::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;   // 0x0358(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0360(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0368(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0370(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0390(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x03D8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x03F8(0x00C8)()
	class UAnimSequenceBase*                      WorkingAnimSequence;                               // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ADunePlaceableBase*                     Owner;                                             // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsWorking;                                        // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x3];                                      // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimPlayRate;                                      // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopAnim;                                          // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimerToStopDownInSec;                              // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastTick;                                          // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSlowDownSeconds;                            // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SlowDownWorkingAnimCurveFloat;                     // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AB_WindturbineTemplateAnim(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintBeginPlay();
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_WindturbineTemplateAnim_C">();
	}
	static class UAB_WindturbineTemplateAnim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_WindturbineTemplateAnim_C>();
	}
};
static_assert(alignof(UAB_WindturbineTemplateAnim_C) == 0x000010, "Wrong alignment on UAB_WindturbineTemplateAnim_C");
static_assert(sizeof(UAB_WindturbineTemplateAnim_C) == 0x000500, "Wrong size on UAB_WindturbineTemplateAnim_C");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, UberGraphFrame) == 0x000350, "Member 'UAB_WindturbineTemplateAnim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, __AnimBlueprintMutables) == 0x000358, "Member 'UAB_WindturbineTemplateAnim_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, AnimBlueprintExtension_PropertyAccess) == 0x000360, "Member 'UAB_WindturbineTemplateAnim_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, AnimBlueprintExtension_Base) == 0x000368, "Member 'UAB_WindturbineTemplateAnim_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, AnimGraphNode_Root) == 0x000370, "Member 'UAB_WindturbineTemplateAnim_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, AnimGraphNode_SequencePlayer) == 0x000390, "Member 'UAB_WindturbineTemplateAnim_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, AnimGraphNode_StateResult) == 0x0003D8, "Member 'UAB_WindturbineTemplateAnim_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, AnimGraphNode_StateMachine) == 0x0003F8, "Member 'UAB_WindturbineTemplateAnim_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, WorkingAnimSequence) == 0x0004C0, "Member 'UAB_WindturbineTemplateAnim_C::WorkingAnimSequence' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, Owner) == 0x0004C8, "Member 'UAB_WindturbineTemplateAnim_C::Owner' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, bIsWorking) == 0x0004D0, "Member 'UAB_WindturbineTemplateAnim_C::bIsWorking' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, AnimPlayRate) == 0x0004D4, "Member 'UAB_WindturbineTemplateAnim_C::AnimPlayRate' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, LoopAnim) == 0x0004D8, "Member 'UAB_WindturbineTemplateAnim_C::LoopAnim' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, TimerToStopDownInSec) == 0x0004E0, "Member 'UAB_WindturbineTemplateAnim_C::TimerToStopDownInSec' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, LastTick) == 0x0004E8, "Member 'UAB_WindturbineTemplateAnim_C::LastTick' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, CurrentSlowDownSeconds) == 0x0004F0, "Member 'UAB_WindturbineTemplateAnim_C::CurrentSlowDownSeconds' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineTemplateAnim_C, SlowDownWorkingAnimCurveFloat) == 0x0004F8, "Member 'UAB_WindturbineTemplateAnim_C::SlowDownWorkingAnimCurveFloat' has a wrong offset!");

}

