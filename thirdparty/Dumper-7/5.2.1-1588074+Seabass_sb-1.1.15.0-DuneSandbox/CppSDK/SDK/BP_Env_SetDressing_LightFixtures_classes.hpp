#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Env_SetDressing_LightFixtures

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DatasmithContent_structs.hpp"
#include "BP_Env_SetDressing_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Env_SetDressing_LightFixtures.BP_Env_SetDressing_LightFixtures_C
// 0x0278 (0x0608 - 0x0390)
class ABP_Env_SetDressing_LightFixtures_C : public ABP_Env_SetDressing_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Env_SetDressing_LightFixtures_C; // 0x0390(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_LensFlareBillboardOptimized_Component_C* BP_LensFlareBillboardOptimized_Component;     // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightFixtureSource;                                // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Is_Movable_BB;                                     // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Is_Flickering_BB;                                  // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Is_Animated_BB;                                    // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           Emissive_Source_Meshes;                            // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Light_Source_Meshes_Cast_Shadows;                  // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Light_Intensity;                                   // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_Color;                                       // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attenuation_Radius;                                // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shadow_Casting;                                    // 0x03EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Volumetric_Shadow;                            // 0x03ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EE[0x2];                                      // 0x03EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volumetric_Scattering_Intensity;                   // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Indirect_Lighting_Intensity;                       // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Specular_Scale;                                    // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Affect_Translucent_Lighting;                       // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToD_Toggle;                                        // 0x03FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FE[0x2];                                      // 0x03FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Switch_On_Time__24h_;                              // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Switch_Off_Time__24h_;                             // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flickering;                                        // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x3];                                      // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Light_Flicker_Intensity_Modifier__0_1_;            // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULightComponent*                        Main_Light_Source;                                 // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Emissive_Power;                                    // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DayNight_Timer;                                    // 0x0428(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterCollection*           MPC_GlobalMaterialValues;                          // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   TimeOfDay;                                         // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Flicker_Timer;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Flickering_Interval;                           // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Flickering_Interval;                           // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          On;                                                // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lens_Flare;                                        // 0x0459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45A[0x6];                                      // 0x045A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    Lens_Flare_Selection;                              // 0x0460(0x0010)(Edit, BlueprintVisible, NoDestructor)
	double                                        LF_to_Camera_Positioning;                          // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Billboard_Size_X;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Billboard_Size_Y;                                  // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Occlusion;                                         // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Day_Strength_Multiplier;                           // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Strength_Multiplier;                         // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Expose_Extra_Light_Parameters_to_BP;               // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDatasmithAreaLightActorType                  Light_Type;                                        // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A2[0x2];                                      // 0x04A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Source_Radius;                                     // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Source_Length;                                     // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Soft_Source_Radius;                                // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Inverse_Squared_Falloff;                       // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1[0x3];                                      // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Light_Faloff_Exponent;                             // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Inner_Cone_Angle;                                  // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Outer_Cone_Angle;                                  // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Source_Width;                                      // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Source_Height;                                     // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Barn_Door_Angle;                                   // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Barn_Door_Length;                                  // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Closeup_Fadeout_Offset;                            // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Closeup_Fadeout_Length;                            // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Flare_Texture;                                     // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Intensity;                                   // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Size;                                        // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Desaturation;                                // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Rotation_Multiplier;                         // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Flare_Tint;                                        // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MeshProximityFade___Distance;                      // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Boost___Screen_Center_Extent;                // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Boost___Screen_Edge_Extent;                  // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Boost___Screen_Center_Multiplier;            // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Boost___Screen_Edges_Multiplier;             // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Boost___Distance_for_Full_Effect;            // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Boost___Screen_Extent_Multiplier_at_Distance; // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Diffuse_Intensity;                           // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Diffuse_Radius;                              // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Flare_Diffuse_Tint;                                // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Contribution_to_Flare_Opacity;                     // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightShaft_Intensity;                              // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightShaft_Draw_Distance;                          // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightShaft_Tint;                                   // 0x0588(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lens_Reflection_Intensity;                         // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lens_Reflection_Radius;                            // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LensReflection_UVDistortionIntensity;              // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LensReflection_ChromaOffset;                       // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Ghost_Kernel_Texture;                              // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Ghost_Intensity;                                   // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ghost_Size;                                        // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ghost_Offset;                                      // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ghost_OffsetStart;                                 // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Ghost_Tint;                                        // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ghost_Screen_Colorize_Intensity;                   // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Ghost_Colorize_Gradient_Texture;                   // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULightComponent*                        Main_Light;                                        // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void Toggle_Flare_Boost_Visualizer();
	void toggle();
	void Stop_Flicker();
	void Start_Flicker();
	void Set_material_params_in_mesh_CPD(class UStaticMeshComponent* Mesh);
	void Set_Main_Light_Source(class ULightComponent* Light_Component);
	void Set_Main_Light_Attributes();
	void Set_Lens_Flare_Parameters();
	void Set_Custom_Primitive_Data(class UPrimitiveComponent* Primitive_Component);
	void ReceiveBeginPlay();
	void Flicker();
	void Fixture_Mesh_Shadow_Casting();
	void ExecuteUbergraph_BP_Env_SetDressing_LightFixtures(int32 EntryPoint);
	void Enable_Debug_Billboards();
	void DayNight_Toggling();
	void DayNight_Check();
	void Add_Emissive_Sources(TArray<class UStaticMeshComponent*>& Array_of_Emissive_Sources);

	bool IsClimbable(const class AActor* InActor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Env_SetDressing_LightFixtures_C">();
	}
	static class ABP_Env_SetDressing_LightFixtures_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Env_SetDressing_LightFixtures_C>();
	}
};
static_assert(alignof(ABP_Env_SetDressing_LightFixtures_C) == 0x000008, "Wrong alignment on ABP_Env_SetDressing_LightFixtures_C");
static_assert(sizeof(ABP_Env_SetDressing_LightFixtures_C) == 0x000608, "Wrong size on ABP_Env_SetDressing_LightFixtures_C");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, UberGraphFrame_BP_Env_SetDressing_LightFixtures_C) == 0x000390, "Member 'ABP_Env_SetDressing_LightFixtures_C::UberGraphFrame_BP_Env_SetDressing_LightFixtures_C' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, BP_LensFlareBillboardOptimized_Component) == 0x000398, "Member 'ABP_Env_SetDressing_LightFixtures_C::BP_LensFlareBillboardOptimized_Component' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, LightFixtureSource) == 0x0003A0, "Member 'ABP_Env_SetDressing_LightFixtures_C::LightFixtureSource' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Is_Movable_BB) == 0x0003A8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Is_Movable_BB' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Is_Flickering_BB) == 0x0003B0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Is_Flickering_BB' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Is_Animated_BB) == 0x0003B8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Is_Animated_BB' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Emissive_Source_Meshes) == 0x0003C0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Emissive_Source_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Light_Source_Meshes_Cast_Shadows) == 0x0003D0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Light_Source_Meshes_Cast_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Light_Intensity) == 0x0003D4, "Member 'ABP_Env_SetDressing_LightFixtures_C::Light_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Light_Color) == 0x0003D8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Light_Color' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Attenuation_Radius) == 0x0003E8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Shadow_Casting) == 0x0003EC, "Member 'ABP_Env_SetDressing_LightFixtures_C::Shadow_Casting' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Cast_Volumetric_Shadow) == 0x0003ED, "Member 'ABP_Env_SetDressing_LightFixtures_C::Cast_Volumetric_Shadow' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Volumetric_Scattering_Intensity) == 0x0003F0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Indirect_Lighting_Intensity) == 0x0003F4, "Member 'ABP_Env_SetDressing_LightFixtures_C::Indirect_Lighting_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Specular_Scale) == 0x0003F8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Specular_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Affect_Translucent_Lighting) == 0x0003FC, "Member 'ABP_Env_SetDressing_LightFixtures_C::Affect_Translucent_Lighting' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, ToD_Toggle) == 0x0003FD, "Member 'ABP_Env_SetDressing_LightFixtures_C::ToD_Toggle' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Switch_On_Time__24h_) == 0x000400, "Member 'ABP_Env_SetDressing_LightFixtures_C::Switch_On_Time__24h_' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Switch_Off_Time__24h_) == 0x000408, "Member 'ABP_Env_SetDressing_LightFixtures_C::Switch_Off_Time__24h_' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flickering) == 0x000410, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flickering' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Light_Flicker_Intensity_Modifier__0_1_) == 0x000414, "Member 'ABP_Env_SetDressing_LightFixtures_C::Light_Flicker_Intensity_Modifier__0_1_' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Main_Light_Source) == 0x000418, "Member 'ABP_Env_SetDressing_LightFixtures_C::Main_Light_Source' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Emissive_Power) == 0x000420, "Member 'ABP_Env_SetDressing_LightFixtures_C::Emissive_Power' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, DayNight_Timer) == 0x000428, "Member 'ABP_Env_SetDressing_LightFixtures_C::DayNight_Timer' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, MPC_GlobalMaterialValues) == 0x000430, "Member 'ABP_Env_SetDressing_LightFixtures_C::MPC_GlobalMaterialValues' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, TimeOfDay) == 0x000438, "Member 'ABP_Env_SetDressing_LightFixtures_C::TimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flicker_Timer) == 0x000440, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flicker_Timer' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Min_Flickering_Interval) == 0x000448, "Member 'ABP_Env_SetDressing_LightFixtures_C::Min_Flickering_Interval' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Max_Flickering_Interval) == 0x000450, "Member 'ABP_Env_SetDressing_LightFixtures_C::Max_Flickering_Interval' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, On) == 0x000458, "Member 'ABP_Env_SetDressing_LightFixtures_C::On' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Lens_Flare) == 0x000459, "Member 'ABP_Env_SetDressing_LightFixtures_C::Lens_Flare' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Lens_Flare_Selection) == 0x000460, "Member 'ABP_Env_SetDressing_LightFixtures_C::Lens_Flare_Selection' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, LF_to_Camera_Positioning) == 0x000470, "Member 'ABP_Env_SetDressing_LightFixtures_C::LF_to_Camera_Positioning' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Billboard_Size_X) == 0x000478, "Member 'ABP_Env_SetDressing_LightFixtures_C::Billboard_Size_X' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Billboard_Size_Y) == 0x000480, "Member 'ABP_Env_SetDressing_LightFixtures_C::Billboard_Size_Y' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Occlusion) == 0x000488, "Member 'ABP_Env_SetDressing_LightFixtures_C::Occlusion' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Day_Strength_Multiplier) == 0x000490, "Member 'ABP_Env_SetDressing_LightFixtures_C::Day_Strength_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Night_Strength_Multiplier) == 0x000498, "Member 'ABP_Env_SetDressing_LightFixtures_C::Night_Strength_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Expose_Extra_Light_Parameters_to_BP) == 0x0004A0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Expose_Extra_Light_Parameters_to_BP' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Light_Type) == 0x0004A1, "Member 'ABP_Env_SetDressing_LightFixtures_C::Light_Type' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Source_Radius) == 0x0004A4, "Member 'ABP_Env_SetDressing_LightFixtures_C::Source_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Source_Length) == 0x0004A8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Source_Length' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Soft_Source_Radius) == 0x0004AC, "Member 'ABP_Env_SetDressing_LightFixtures_C::Soft_Source_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Use_Inverse_Squared_Falloff) == 0x0004B0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Use_Inverse_Squared_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Light_Faloff_Exponent) == 0x0004B4, "Member 'ABP_Env_SetDressing_LightFixtures_C::Light_Faloff_Exponent' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Inner_Cone_Angle) == 0x0004B8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Inner_Cone_Angle' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Outer_Cone_Angle) == 0x0004BC, "Member 'ABP_Env_SetDressing_LightFixtures_C::Outer_Cone_Angle' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Source_Width) == 0x0004C0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Source_Width' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Source_Height) == 0x0004C4, "Member 'ABP_Env_SetDressing_LightFixtures_C::Source_Height' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Barn_Door_Angle) == 0x0004C8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Barn_Door_Angle' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Barn_Door_Length) == 0x0004CC, "Member 'ABP_Env_SetDressing_LightFixtures_C::Barn_Door_Length' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Closeup_Fadeout_Offset) == 0x0004D0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Closeup_Fadeout_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Closeup_Fadeout_Length) == 0x0004D8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Closeup_Fadeout_Length' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Texture) == 0x0004E0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Texture' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Intensity) == 0x0004E8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Size) == 0x0004F0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Size' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Desaturation) == 0x0004F8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Desaturation' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Rotation_Multiplier) == 0x000500, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Rotation_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Tint) == 0x000508, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, MeshProximityFade___Distance) == 0x000518, "Member 'ABP_Env_SetDressing_LightFixtures_C::MeshProximityFade___Distance' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Boost___Screen_Center_Extent) == 0x000520, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Boost___Screen_Center_Extent' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Boost___Screen_Edge_Extent) == 0x000528, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Boost___Screen_Edge_Extent' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Boost___Screen_Center_Multiplier) == 0x000530, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Boost___Screen_Center_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Boost___Screen_Edges_Multiplier) == 0x000538, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Boost___Screen_Edges_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Boost___Distance_for_Full_Effect) == 0x000540, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Boost___Distance_for_Full_Effect' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Boost___Screen_Extent_Multiplier_at_Distance) == 0x000548, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Boost___Screen_Extent_Multiplier_at_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Diffuse_Intensity) == 0x000550, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Diffuse_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Diffuse_Radius) == 0x000558, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Diffuse_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Flare_Diffuse_Tint) == 0x000560, "Member 'ABP_Env_SetDressing_LightFixtures_C::Flare_Diffuse_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Contribution_to_Flare_Opacity) == 0x000570, "Member 'ABP_Env_SetDressing_LightFixtures_C::Contribution_to_Flare_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, LightShaft_Intensity) == 0x000578, "Member 'ABP_Env_SetDressing_LightFixtures_C::LightShaft_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, LightShaft_Draw_Distance) == 0x000580, "Member 'ABP_Env_SetDressing_LightFixtures_C::LightShaft_Draw_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, LightShaft_Tint) == 0x000588, "Member 'ABP_Env_SetDressing_LightFixtures_C::LightShaft_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Lens_Reflection_Intensity) == 0x000598, "Member 'ABP_Env_SetDressing_LightFixtures_C::Lens_Reflection_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Lens_Reflection_Radius) == 0x0005A0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Lens_Reflection_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, LensReflection_UVDistortionIntensity) == 0x0005A8, "Member 'ABP_Env_SetDressing_LightFixtures_C::LensReflection_UVDistortionIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, LensReflection_ChromaOffset) == 0x0005B0, "Member 'ABP_Env_SetDressing_LightFixtures_C::LensReflection_ChromaOffset' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Ghost_Kernel_Texture) == 0x0005B8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Ghost_Kernel_Texture' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Ghost_Intensity) == 0x0005C0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Ghost_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Ghost_Size) == 0x0005C8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Ghost_Size' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Ghost_Offset) == 0x0005D0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Ghost_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Ghost_OffsetStart) == 0x0005D8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Ghost_OffsetStart' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Ghost_Tint) == 0x0005E0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Ghost_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Ghost_Screen_Colorize_Intensity) == 0x0005F0, "Member 'ABP_Env_SetDressing_LightFixtures_C::Ghost_Screen_Colorize_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Ghost_Colorize_Gradient_Texture) == 0x0005F8, "Member 'ABP_Env_SetDressing_LightFixtures_C::Ghost_Colorize_Gradient_Texture' has a wrong offset!");
static_assert(offsetof(ABP_Env_SetDressing_LightFixtures_C, Main_Light) == 0x000600, "Member 'ABP_Env_SetDressing_LightFixtures_C::Main_Light' has a wrong offset!");

}

