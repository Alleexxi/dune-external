#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Throw_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GA_EquipableAbility_Base_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Throw_Base.GA_Throw_Base_C
// 0x0180 (0x0700 - 0x0580)
class UGA_Throw_Base_C : public UGA_EquipableAbility_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0580(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bWaitingForThrow;                                  // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ThrowableClass;                                    // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LaunchSpeed;                                       // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ThrowMontage;                                      // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ThrowDelay;                                        // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         AvatarCharacter;                                   // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UObject*                                ReadySourceObject;                                 // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_ProjectileThrowableBase_C*          Throwable;                                         // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bThrown;                                           // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_5C9[0x3];                                      // 0x05C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachBone;                                        // 0x05CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D4[0x4];                                      // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 AttachMesh;                                        // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bEndAbilityAfterThrow;                             // 0x05E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E1[0x7];                                      // 0x05E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ThrowOffsetLocation;                               // 0x05E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWantsSprintOnEnd;                                 // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bIsThrowingFar;                                    // 0x0601(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602[0x6];                                      // 0x0602(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ThrowOffsetLocationFar;                            // 0x0608(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ThrowAngle;                                        // 0x0620(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAimOffsetBlendSpace*                   AbilityAimOffset;                                  // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseHiddenCooldown;                                // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasDonePostThrowCleanUp;                          // 0x0641(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_642[0x2];                                      // 0x0642(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoftLockFallBackForCD;                             // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           ThrowCurve;                                        // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LockedInAim_Rotation;                              // 0x0650(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Temp_bUseNewAnims;                                 // 0x0668(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bThrowLockInAddedRotationRule;                     // 0x0669(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66A[0x6];                                      // 0x066A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinPitchForHighThrowAnim;                          // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinPitchForMedThrowAnim;                           // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          Audio_OnEquip;                                     // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HiddenCooldown;                                    // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SpeedCurve;                                        // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      AimingArc;                                         // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        StartTime;                                         // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        MinimumHoldTime;                                   // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            MidThrowRestrictionsEffect;                        // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            MidThrowRestrictionsEffectHandle;                  // 0x06B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        CachedCooldownFull;                                // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedCooldownReduced;                             // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsesCooldownTuning;                                // 0x06D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D9[0x3];                                      // 0x06D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraTargeting;                                   // 0x06DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsCameraContextSet;                               // 0x06E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E5[0x3];                                      // 0x06E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        VisualDelayDuration;                               // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipCooldownCommit;                                // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F1[0x7];                                      // 0x06F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitCancel*                CancelWaitTask;                                    // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CacheTuningValues();
	void ClearFlags();
	void CommittedToRelease();
	void DetermineThrowAnimationSection();
	void DrawPredictionArc();
	void EnterThrowingSubstate(bool* bEnteredThrowing);
	void ExecuteUbergraph_GA_Throw_Base(int32 EntryPoint);
	void FallbackTimerUp();
	void GetProjectileRadius(double* ProjectileRadius);
	void HandleDelayedVisuals();
	void InitHandPoseAndGameplayCues();
	void InitializeStaticProperties(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec);
	void InputReleased(double TimeHeld);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void LockInAim();
	void LongHold_PostThrowDelay();
	void LoopStateChecks();
	void OnBlendOut_6FEC42754D7980BE1D57FEA9EFB6789D();
	void OnCancel_13F040594F793C72E611C1BAC17F1189();
	void OnCancelled_6FEC42754D7980BE1D57FEA9EFB6789D();
	void OnCompleted_6FEC42754D7980BE1D57FEA9EFB6789D();
	void OnFinish_761C9F1641A8AD4DA2953C81CA1D8CE6();
	void OnFinish_8FFAA52D4C287E495C8124B47E6E3B14();
	void OnFinish_9D202A6C4D3F1D446706678A910C5ED6();
	void OnFinish_A1A007BC4AC304BD5ECFF3991A3FC007();
	void OnFinish_B7432D6A45858E6BFD99C897E79F794C();
	void OnFinish_BEDCC84940677BDEF4BF298C4BD54336();
	void OnFinish_F1F9F499448D6229FFCAE9B4317061A7();
	void OnFinish_FAC9CC454E6B4A46F72245A6F9C166AF();
	void OnInterrupted_6FEC42754D7980BE1D57FEA9EFB6789D();
	void OnRelease_E606C44544E2C62C7C6A3A9C67F8279D(float TimeHeld);
	void OnThrowableThrown(class ABP_ProjectileThrowableBase_C* SpawnedThrowable);
	void PostThrowCleanup();
	void RemoveCameraContext();
	void Removed_CDE9D9B9439ED58263B275983C261BC7();
	void SetCameraContext();
	void SetupCastingExitCancelation();
	void SpawnThrowable(class ABP_ProjectileThrowableBase_C** Throwable_0);
	void TryCommitOnRelease(bool* bCommit);

	void GetCasterVelocityScalar(const struct FVector& InVelocity, double* OutVelocityScalar) const;
	struct FAbilityDisplayData GetDisplayData(const class UAbilitySystemComponent* InstigatorASC) const;
	void GetThrowParams(struct FVector* StartPosition, struct FVector* Velocity, TArray<class AActor*>* IgnoreActors, double* Gravity) const;
	void GetThrowRotation(class UObject* Avatar, struct FRotator* ThrowRotation) const;
	void GetThrowSpeed(double* ThrowSpeed) const;
	void IsHiddenCooldownApplied(bool* bHiddenCooldownPresent) const;
	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Throw_Base_C">();
	}
	static class UGA_Throw_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Throw_Base_C>();
	}
};
static_assert(alignof(UGA_Throw_Base_C) == 0x000008, "Wrong alignment on UGA_Throw_Base_C");
static_assert(sizeof(UGA_Throw_Base_C) == 0x000700, "Wrong size on UGA_Throw_Base_C");
static_assert(offsetof(UGA_Throw_Base_C, UberGraphFrame) == 0x000580, "Member 'UGA_Throw_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, bWaitingForThrow) == 0x000588, "Member 'UGA_Throw_Base_C::bWaitingForThrow' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, ThrowableClass) == 0x000590, "Member 'UGA_Throw_Base_C::ThrowableClass' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, LaunchSpeed) == 0x000598, "Member 'UGA_Throw_Base_C::LaunchSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, ThrowMontage) == 0x0005A0, "Member 'UGA_Throw_Base_C::ThrowMontage' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, ThrowDelay) == 0x0005A8, "Member 'UGA_Throw_Base_C::ThrowDelay' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, AvatarCharacter) == 0x0005B0, "Member 'UGA_Throw_Base_C::AvatarCharacter' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, ReadySourceObject) == 0x0005B8, "Member 'UGA_Throw_Base_C::ReadySourceObject' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, Throwable) == 0x0005C0, "Member 'UGA_Throw_Base_C::Throwable' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, bThrown) == 0x0005C8, "Member 'UGA_Throw_Base_C::bThrown' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, AttachBone) == 0x0005CC, "Member 'UGA_Throw_Base_C::AttachBone' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, AttachMesh) == 0x0005D8, "Member 'UGA_Throw_Base_C::AttachMesh' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, bEndAbilityAfterThrow) == 0x0005E0, "Member 'UGA_Throw_Base_C::bEndAbilityAfterThrow' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, ThrowOffsetLocation) == 0x0005E8, "Member 'UGA_Throw_Base_C::ThrowOffsetLocation' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, bWantsSprintOnEnd) == 0x000600, "Member 'UGA_Throw_Base_C::bWantsSprintOnEnd' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, bIsThrowingFar) == 0x000601, "Member 'UGA_Throw_Base_C::bIsThrowingFar' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, ThrowOffsetLocationFar) == 0x000608, "Member 'UGA_Throw_Base_C::ThrowOffsetLocationFar' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, ThrowAngle) == 0x000620, "Member 'UGA_Throw_Base_C::ThrowAngle' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, AbilityAimOffset) == 0x000638, "Member 'UGA_Throw_Base_C::AbilityAimOffset' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, bUseHiddenCooldown) == 0x000640, "Member 'UGA_Throw_Base_C::bUseHiddenCooldown' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, bHasDonePostThrowCleanUp) == 0x000641, "Member 'UGA_Throw_Base_C::bHasDonePostThrowCleanUp' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, SoftLockFallBackForCD) == 0x000644, "Member 'UGA_Throw_Base_C::SoftLockFallBackForCD' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, ThrowCurve) == 0x000648, "Member 'UGA_Throw_Base_C::ThrowCurve' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, LockedInAim_Rotation) == 0x000650, "Member 'UGA_Throw_Base_C::LockedInAim_Rotation' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, Temp_bUseNewAnims) == 0x000668, "Member 'UGA_Throw_Base_C::Temp_bUseNewAnims' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, bThrowLockInAddedRotationRule) == 0x000669, "Member 'UGA_Throw_Base_C::bThrowLockInAddedRotationRule' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, MinPitchForHighThrowAnim) == 0x000670, "Member 'UGA_Throw_Base_C::MinPitchForHighThrowAnim' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, MinPitchForMedThrowAnim) == 0x000678, "Member 'UGA_Throw_Base_C::MinPitchForMedThrowAnim' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, Audio_OnEquip) == 0x000680, "Member 'UGA_Throw_Base_C::Audio_OnEquip' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, HiddenCooldown) == 0x000688, "Member 'UGA_Throw_Base_C::HiddenCooldown' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, SpeedCurve) == 0x000690, "Member 'UGA_Throw_Base_C::SpeedCurve' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, AimingArc) == 0x000698, "Member 'UGA_Throw_Base_C::AimingArc' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, StartTime) == 0x0006A0, "Member 'UGA_Throw_Base_C::StartTime' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, MinimumHoldTime) == 0x0006A8, "Member 'UGA_Throw_Base_C::MinimumHoldTime' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, MidThrowRestrictionsEffect) == 0x0006B0, "Member 'UGA_Throw_Base_C::MidThrowRestrictionsEffect' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, MidThrowRestrictionsEffectHandle) == 0x0006B8, "Member 'UGA_Throw_Base_C::MidThrowRestrictionsEffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, CachedCooldownFull) == 0x0006C8, "Member 'UGA_Throw_Base_C::CachedCooldownFull' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, CachedCooldownReduced) == 0x0006D0, "Member 'UGA_Throw_Base_C::CachedCooldownReduced' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, UsesCooldownTuning) == 0x0006D8, "Member 'UGA_Throw_Base_C::UsesCooldownTuning' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, CameraTargeting) == 0x0006DC, "Member 'UGA_Throw_Base_C::CameraTargeting' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, bIsCameraContextSet) == 0x0006E4, "Member 'UGA_Throw_Base_C::bIsCameraContextSet' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, VisualDelayDuration) == 0x0006E8, "Member 'UGA_Throw_Base_C::VisualDelayDuration' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, SkipCooldownCommit) == 0x0006F0, "Member 'UGA_Throw_Base_C::SkipCooldownCommit' has a wrong offset!");
static_assert(offsetof(UGA_Throw_Base_C, CancelWaitTask) == 0x0006F8, "Member 'UGA_Throw_Base_C::CancelWaitTask' has a wrong offset!");

}

