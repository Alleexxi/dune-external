#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PointRig

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PointRig.BP_PointRig_C
// 0x0110 (0x0460 - 0x0350)
class ABP_PointRig_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        MovementRoot;                                      // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_MovementAlpha_664F9F2C4745F481FD4C2A822DA4CBB3; // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_664F9F2C4745F481FD4C2A822DA4CBB3; // 0x036C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D[0x3];                                      // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   Location_Name;                                     // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Active_Location_Name;                              // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Active_Camera_Point;                               // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             InterpolationStart;                                // 0x0390(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CameraNeutral;                                     // 0x03F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasActiveCameraPoint;                              // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterpolationEnabled;                              // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_452[0x6];                                      // 0x0452(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Previous_Camera_Point;                             // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PointRig(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Set_Active_Camera_Point(class FName Location_tag);
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PointRig_C">();
	}
	static class ABP_PointRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PointRig_C>();
	}
};
static_assert(alignof(ABP_PointRig_C) == 0x000010, "Wrong alignment on ABP_PointRig_C");
static_assert(sizeof(ABP_PointRig_C) == 0x000460, "Wrong size on ABP_PointRig_C");
static_assert(offsetof(ABP_PointRig_C, UberGraphFrame) == 0x000350, "Member 'ABP_PointRig_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, MovementRoot) == 0x000358, "Member 'ABP_PointRig_C::MovementRoot' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, DefaultSceneRoot) == 0x000360, "Member 'ABP_PointRig_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, Timeline_MovementAlpha_664F9F2C4745F481FD4C2A822DA4CBB3) == 0x000368, "Member 'ABP_PointRig_C::Timeline_MovementAlpha_664F9F2C4745F481FD4C2A822DA4CBB3' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, Timeline__Direction_664F9F2C4745F481FD4C2A822DA4CBB3) == 0x00036C, "Member 'ABP_PointRig_C::Timeline__Direction_664F9F2C4745F481FD4C2A822DA4CBB3' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, Timeline) == 0x000370, "Member 'ABP_PointRig_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, Location_Name) == 0x000378, "Member 'ABP_PointRig_C::Location_Name' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, Active_Location_Name) == 0x000380, "Member 'ABP_PointRig_C::Active_Location_Name' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, Active_Camera_Point) == 0x000388, "Member 'ABP_PointRig_C::Active_Camera_Point' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, InterpolationStart) == 0x000390, "Member 'ABP_PointRig_C::InterpolationStart' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, CameraNeutral) == 0x0003F0, "Member 'ABP_PointRig_C::CameraNeutral' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, HasActiveCameraPoint) == 0x000450, "Member 'ABP_PointRig_C::HasActiveCameraPoint' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, InterpolationEnabled) == 0x000451, "Member 'ABP_PointRig_C::InterpolationEnabled' has a wrong offset!");
static_assert(offsetof(ABP_PointRig_C, Previous_Camera_Point) == 0x000458, "Member 'ABP_PointRig_C::Previous_Camera_Point' has a wrong offset!");

}

