#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleLightComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VehicleLightComponent.BP_VehicleLightComponent_C
// 0x00D8 (0x0200 - 0x0128)
class UBP_VehicleLightComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0128(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          HeadLightsEnabled;                                 // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USpotLightComponent*>            HeadLights;                                        // 0x0138(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ADuneVehicle*                           OwningVehicle;                                     // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        FuelAmount;                                        // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFuelEmpty;                                       // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FlickerCurve;                                      // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FuelFlickerCurve;                                  // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 ModuleMeshes;                                      // 0x0170(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        CurrentLightIntensity;                             // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxLightIntensity;                                 // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightValue;                                        // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Throttle;                                          // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Light_Socket_Name;                                 // 0x01A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           Light_Socket_Back_Name;                            // 0x01B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Light_Socket_Pos;                                  // 0x01C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Light_Socket_Back_Pos;                             // 0x01D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_Light_FlareMesh_Front_C*>    BP_Light_Spawn;                                    // 0x01E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_Light_FlareMesh_Back_C*>     BP_Light_Back_Spawn;                               // 0x01F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void UpdateLights();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnOwningVehicleModuleMeshLoaded(const EVehicleModuleType& VehicleModuleType);
	void OnOwningVehicleModuleDetached(EVehicleModuleType ModuleType);
	void ExecuteUbergraph_BP_VehicleLightComponent(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VehicleLightComponent_C">();
	}
	static class UBP_VehicleLightComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_VehicleLightComponent_C>();
	}
};
static_assert(alignof(UBP_VehicleLightComponent_C) == 0x000008, "Wrong alignment on UBP_VehicleLightComponent_C");
static_assert(sizeof(UBP_VehicleLightComponent_C) == 0x000200, "Wrong size on UBP_VehicleLightComponent_C");
static_assert(offsetof(UBP_VehicleLightComponent_C, UberGraphFrame) == 0x000128, "Member 'UBP_VehicleLightComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, HeadLightsEnabled) == 0x000130, "Member 'UBP_VehicleLightComponent_C::HeadLightsEnabled' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, HeadLights) == 0x000138, "Member 'UBP_VehicleLightComponent_C::HeadLights' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, OwningVehicle) == 0x000148, "Member 'UBP_VehicleLightComponent_C::OwningVehicle' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, FuelAmount) == 0x000150, "Member 'UBP_VehicleLightComponent_C::FuelAmount' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, IsFuelEmpty) == 0x000158, "Member 'UBP_VehicleLightComponent_C::IsFuelEmpty' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, FlickerCurve) == 0x000160, "Member 'UBP_VehicleLightComponent_C::FlickerCurve' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, FuelFlickerCurve) == 0x000168, "Member 'UBP_VehicleLightComponent_C::FuelFlickerCurve' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, ModuleMeshes) == 0x000170, "Member 'UBP_VehicleLightComponent_C::ModuleMeshes' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, CurrentLightIntensity) == 0x000180, "Member 'UBP_VehicleLightComponent_C::CurrentLightIntensity' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, MaxLightIntensity) == 0x000188, "Member 'UBP_VehicleLightComponent_C::MaxLightIntensity' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, LightValue) == 0x000190, "Member 'UBP_VehicleLightComponent_C::LightValue' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, Throttle) == 0x000198, "Member 'UBP_VehicleLightComponent_C::Throttle' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, Light_Socket_Name) == 0x0001A0, "Member 'UBP_VehicleLightComponent_C::Light_Socket_Name' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, Light_Socket_Back_Name) == 0x0001B0, "Member 'UBP_VehicleLightComponent_C::Light_Socket_Back_Name' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, Light_Socket_Pos) == 0x0001C0, "Member 'UBP_VehicleLightComponent_C::Light_Socket_Pos' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, Light_Socket_Back_Pos) == 0x0001D0, "Member 'UBP_VehicleLightComponent_C::Light_Socket_Back_Pos' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, BP_Light_Spawn) == 0x0001E0, "Member 'UBP_VehicleLightComponent_C::BP_Light_Spawn' has a wrong offset!");
static_assert(offsetof(UBP_VehicleLightComponent_C, BP_Light_Back_Spawn) == 0x0001F0, "Member 'UBP_VehicleLightComponent_C::BP_Light_Back_Spawn' has a wrong offset!");

}

