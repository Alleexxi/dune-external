#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_LocomotionLayerInterface

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AB_LocomotionLayerInterface.AB_LocomotionLayerInterface_C.SuspensorLayer
// 0x0010 (0x0010 - 0x0000)
struct AB_LocomotionLayerInterface_C_SuspensorLayer final
{
public:
	struct FPoseLink                              SuspensorLayer_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_LocomotionLayerInterface_C_SuspensorLayer) == 0x000008, "Wrong alignment on AB_LocomotionLayerInterface_C_SuspensorLayer");
static_assert(sizeof(AB_LocomotionLayerInterface_C_SuspensorLayer) == 0x000010, "Wrong size on AB_LocomotionLayerInterface_C_SuspensorLayer");
static_assert(offsetof(AB_LocomotionLayerInterface_C_SuspensorLayer, SuspensorLayer_0) == 0x000000, "Member 'AB_LocomotionLayerInterface_C_SuspensorLayer::SuspensorLayer_0' has a wrong offset!");

// Function AB_LocomotionLayerInterface.AB_LocomotionLayerInterface_C.ScramblingLayer
// 0x0010 (0x0010 - 0x0000)
struct AB_LocomotionLayerInterface_C_ScramblingLayer final
{
public:
	struct FPoseLink                              ScramblingLayer_0;                                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_LocomotionLayerInterface_C_ScramblingLayer) == 0x000008, "Wrong alignment on AB_LocomotionLayerInterface_C_ScramblingLayer");
static_assert(sizeof(AB_LocomotionLayerInterface_C_ScramblingLayer) == 0x000010, "Wrong size on AB_LocomotionLayerInterface_C_ScramblingLayer");
static_assert(offsetof(AB_LocomotionLayerInterface_C_ScramblingLayer, ScramblingLayer_0) == 0x000000, "Member 'AB_LocomotionLayerInterface_C_ScramblingLayer::ScramblingLayer_0' has a wrong offset!");

// Function AB_LocomotionLayerInterface.AB_LocomotionLayerInterface_C.QuicksandLayer
// 0x0028 (0x0028 - 0x0000)
struct AB_LocomotionLayerInterface_C_QuicksandLayer final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          HasWeaponInHand;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              QuicksandLayer_0;                                  // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_LocomotionLayerInterface_C_QuicksandLayer) == 0x000008, "Wrong alignment on AB_LocomotionLayerInterface_C_QuicksandLayer");
static_assert(sizeof(AB_LocomotionLayerInterface_C_QuicksandLayer) == 0x000028, "Wrong size on AB_LocomotionLayerInterface_C_QuicksandLayer");
static_assert(offsetof(AB_LocomotionLayerInterface_C_QuicksandLayer, InPose_0) == 0x000000, "Member 'AB_LocomotionLayerInterface_C_QuicksandLayer::InPose_0' has a wrong offset!");
static_assert(offsetof(AB_LocomotionLayerInterface_C_QuicksandLayer, HasWeaponInHand) == 0x000010, "Member 'AB_LocomotionLayerInterface_C_QuicksandLayer::HasWeaponInHand' has a wrong offset!");
static_assert(offsetof(AB_LocomotionLayerInterface_C_QuicksandLayer, QuicksandLayer_0) == 0x000018, "Member 'AB_LocomotionLayerInterface_C_QuicksandLayer::QuicksandLayer_0' has a wrong offset!");

// Function AB_LocomotionLayerInterface.AB_LocomotionLayerInterface_C.DisabledLayer
// 0x0020 (0x0020 - 0x0000)
struct AB_LocomotionLayerInterface_C_DisabledLayer final
{
public:
	struct FPoseLink                              InPose_4;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              DisabledLayer_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_LocomotionLayerInterface_C_DisabledLayer) == 0x000008, "Wrong alignment on AB_LocomotionLayerInterface_C_DisabledLayer");
static_assert(sizeof(AB_LocomotionLayerInterface_C_DisabledLayer) == 0x000020, "Wrong size on AB_LocomotionLayerInterface_C_DisabledLayer");
static_assert(offsetof(AB_LocomotionLayerInterface_C_DisabledLayer, InPose_4) == 0x000000, "Member 'AB_LocomotionLayerInterface_C_DisabledLayer::InPose_4' has a wrong offset!");
static_assert(offsetof(AB_LocomotionLayerInterface_C_DisabledLayer, DisabledLayer_0) == 0x000010, "Member 'AB_LocomotionLayerInterface_C_DisabledLayer::DisabledLayer_0' has a wrong offset!");

// Function AB_LocomotionLayerInterface.AB_LocomotionLayerInterface_C.ClimbingLayer
// 0x0020 (0x0020 - 0x0000)
struct AB_LocomotionLayerInterface_C_ClimbingLayer final
{
public:
	struct FPoseLink                              InPose_1;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ClimbingLayer_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_LocomotionLayerInterface_C_ClimbingLayer) == 0x000008, "Wrong alignment on AB_LocomotionLayerInterface_C_ClimbingLayer");
static_assert(sizeof(AB_LocomotionLayerInterface_C_ClimbingLayer) == 0x000020, "Wrong size on AB_LocomotionLayerInterface_C_ClimbingLayer");
static_assert(offsetof(AB_LocomotionLayerInterface_C_ClimbingLayer, InPose_1) == 0x000000, "Member 'AB_LocomotionLayerInterface_C_ClimbingLayer::InPose_1' has a wrong offset!");
static_assert(offsetof(AB_LocomotionLayerInterface_C_ClimbingLayer, ClimbingLayer_0) == 0x000010, "Member 'AB_LocomotionLayerInterface_C_ClimbingLayer::ClimbingLayer_0' has a wrong offset!");

}

