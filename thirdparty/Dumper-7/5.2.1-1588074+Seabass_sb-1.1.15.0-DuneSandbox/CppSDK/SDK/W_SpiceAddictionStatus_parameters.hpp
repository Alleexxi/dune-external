#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_SpiceAddictionStatus

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_SpiceAddictionStatus_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_Tick) == 0x000004, "Wrong alignment on W_SpiceAddictionStatus_C_Tick");
static_assert(sizeof(W_SpiceAddictionStatus_C_Tick) == 0x00003C, "Wrong size on W_SpiceAddictionStatus_C_Tick");
static_assert(offsetof(W_SpiceAddictionStatus_C_Tick, MyGeometry) == 0x000000, "Member 'W_SpiceAddictionStatus_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_Tick, InDeltaTime) == 0x000038, "Member 'W_SpiceAddictionStatus_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.SetEffectEntriesEnabled
// 0x0050 (0x0050 - 0x0000)
struct W_SpiceAddictionStatus_C_SetEffectEntriesEnabled final
{
public:
	class UListView*                              Effect_List;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Enabled;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UUserWidget*>                    CallFunc_GetDisplayedEntryWidgets_ReturnValue;     // 0x0018(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_SpiceAddictionStatusListEntry_C*     K2Node_DynamicCast_AsW_Spice_Addiction_Status_List_Entry; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled) == 0x000008, "Wrong alignment on W_SpiceAddictionStatus_C_SetEffectEntriesEnabled");
static_assert(sizeof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled) == 0x000050, "Wrong size on W_SpiceAddictionStatus_C_SetEffectEntriesEnabled");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, Effect_List) == 0x000000, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::Effect_List' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, Is_Enabled) == 0x000008, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::Is_Enabled' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, CallFunc_GetDisplayedEntryWidgets_ReturnValue) == 0x000018, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::CallFunc_GetDisplayedEntryWidgets_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, CallFunc_Array_Get_Item) == 0x000030, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, K2Node_DynamicCast_AsW_Spice_Addiction_Status_List_Entry) == 0x000040, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::K2Node_DynamicCast_AsW_Spice_Addiction_Status_List_Entry' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_SetEffectEntriesEnabled, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'W_SpiceAddictionStatus_C_SetEffectEntriesEnabled::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.RemoveExpiredEffectEntries
// 0x0050 (0x0050 - 0x0000)
struct W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries final
{
public:
	class UListView*                              Effect_List;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        CallFunc_GetListItems_ReturnValue;                 // 0x0010(0x0010)(ConstParm, ReferenceParm)
	class UObject*                                CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpiceAddictionStatusListEntryData*     K2Node_DynamicCast_AsSpice_Addiction_Status_List_Entry_Data; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEntryValid_ReturnValue;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries) == 0x000008, "Wrong alignment on W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries");
static_assert(sizeof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries) == 0x000050, "Wrong size on W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, Effect_List) == 0x000000, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::Effect_List' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, Temp_int_Array_Index_Variable) == 0x000008, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, CallFunc_GetListItems_ReturnValue) == 0x000010, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::CallFunc_GetListItems_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, CallFunc_Array_Get_Item) == 0x000020, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, K2Node_DynamicCast_AsSpice_Addiction_Status_List_Entry_Data) == 0x000030, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::K2Node_DynamicCast_AsSpice_Addiction_Status_List_Entry_Data' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries, CallFunc_IsEntryValid_ReturnValue) == 0x000048, "Member 'W_SpiceAddictionStatus_C_RemoveExpiredEffectEntries::CallFunc_IsEntryValid_ReturnValue' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.OnTemporaryEffectApplied
// 0x0018 (0x0018 - 0x0000)
struct W_SpiceAddictionStatus_C_OnTemporaryEffectApplied final
{
public:
	struct FActiveGameplayEffectHandle            GameplayEffectHandle;                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	const class USpiceAddictionGameplayEffectUIData* UIData;                                         // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_OnTemporaryEffectApplied) == 0x000008, "Wrong alignment on W_SpiceAddictionStatus_C_OnTemporaryEffectApplied");
static_assert(sizeof(W_SpiceAddictionStatus_C_OnTemporaryEffectApplied) == 0x000018, "Wrong size on W_SpiceAddictionStatus_C_OnTemporaryEffectApplied");
static_assert(offsetof(W_SpiceAddictionStatus_C_OnTemporaryEffectApplied, GameplayEffectHandle) == 0x000000, "Member 'W_SpiceAddictionStatus_C_OnTemporaryEffectApplied::GameplayEffectHandle' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_OnTemporaryEffectApplied, UIData) == 0x000010, "Member 'W_SpiceAddictionStatus_C_OnTemporaryEffectApplied::UIData' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.OnSpiceToleranceAmountChanged
// 0x0008 (0x0008 - 0x0000)
struct W_SpiceAddictionStatus_C_OnSpiceToleranceAmountChanged final
{
public:
	float                                         CurrentSpiceAmount;                                // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpiceAmount;                                    // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_OnSpiceToleranceAmountChanged) == 0x000004, "Wrong alignment on W_SpiceAddictionStatus_C_OnSpiceToleranceAmountChanged");
static_assert(sizeof(W_SpiceAddictionStatus_C_OnSpiceToleranceAmountChanged) == 0x000008, "Wrong size on W_SpiceAddictionStatus_C_OnSpiceToleranceAmountChanged");
static_assert(offsetof(W_SpiceAddictionStatus_C_OnSpiceToleranceAmountChanged, CurrentSpiceAmount) == 0x000000, "Member 'W_SpiceAddictionStatus_C_OnSpiceToleranceAmountChanged::CurrentSpiceAmount' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_OnSpiceToleranceAmountChanged, MaxSpiceAmount) == 0x000004, "Member 'W_SpiceAddictionStatus_C_OnSpiceToleranceAmountChanged::MaxSpiceAmount' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.OnSpiceExposureLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct W_SpiceAddictionStatus_C_OnSpiceExposureLevelChanged final
{
public:
	float                                         SpiceExposureLevel;                                // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_OnSpiceExposureLevelChanged) == 0x000004, "Wrong alignment on W_SpiceAddictionStatus_C_OnSpiceExposureLevelChanged");
static_assert(sizeof(W_SpiceAddictionStatus_C_OnSpiceExposureLevelChanged) == 0x000004, "Wrong size on W_SpiceAddictionStatus_C_OnSpiceExposureLevelChanged");
static_assert(offsetof(W_SpiceAddictionStatus_C_OnSpiceExposureLevelChanged, SpiceExposureLevel) == 0x000000, "Member 'W_SpiceAddictionStatus_C_OnSpiceExposureLevelChanged::SpiceExposureLevel' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.OnSpiceAmountChanged
// 0x0008 (0x0008 - 0x0000)
struct W_SpiceAddictionStatus_C_OnSpiceAmountChanged final
{
public:
	float                                         CurrentSpiceAmount;                                // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpiceAmount;                                    // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_OnSpiceAmountChanged) == 0x000004, "Wrong alignment on W_SpiceAddictionStatus_C_OnSpiceAmountChanged");
static_assert(sizeof(W_SpiceAddictionStatus_C_OnSpiceAmountChanged) == 0x000008, "Wrong size on W_SpiceAddictionStatus_C_OnSpiceAmountChanged");
static_assert(offsetof(W_SpiceAddictionStatus_C_OnSpiceAmountChanged, CurrentSpiceAmount) == 0x000000, "Member 'W_SpiceAddictionStatus_C_OnSpiceAmountChanged::CurrentSpiceAmount' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_OnSpiceAmountChanged, MaxSpiceAmount) == 0x000004, "Member 'W_SpiceAddictionStatus_C_OnSpiceAmountChanged::MaxSpiceAmount' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.OnPermanentEffectApplied
// 0x0018 (0x0018 - 0x0000)
struct W_SpiceAddictionStatus_C_OnPermanentEffectApplied final
{
public:
	struct FActiveGameplayEffectHandle            GameplayEffectHandle;                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	const class USpiceAddictionGameplayEffectUIData* UIData;                                         // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_OnPermanentEffectApplied) == 0x000008, "Wrong alignment on W_SpiceAddictionStatus_C_OnPermanentEffectApplied");
static_assert(sizeof(W_SpiceAddictionStatus_C_OnPermanentEffectApplied) == 0x000018, "Wrong size on W_SpiceAddictionStatus_C_OnPermanentEffectApplied");
static_assert(offsetof(W_SpiceAddictionStatus_C_OnPermanentEffectApplied, GameplayEffectHandle) == 0x000000, "Member 'W_SpiceAddictionStatus_C_OnPermanentEffectApplied::GameplayEffectHandle' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_OnPermanentEffectApplied, UIData) == 0x000010, "Member 'W_SpiceAddictionStatus_C_OnPermanentEffectApplied::UIData' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.OnEffectDisplayEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct W_SpiceAddictionStatus_C_OnEffectDisplayEnabledChanged final
{
public:
	bool                                          bIsEffectDisplayEnabled;                           // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_OnEffectDisplayEnabledChanged) == 0x000001, "Wrong alignment on W_SpiceAddictionStatus_C_OnEffectDisplayEnabledChanged");
static_assert(sizeof(W_SpiceAddictionStatus_C_OnEffectDisplayEnabledChanged) == 0x000001, "Wrong size on W_SpiceAddictionStatus_C_OnEffectDisplayEnabledChanged");
static_assert(offsetof(W_SpiceAddictionStatus_C_OnEffectDisplayEnabledChanged, bIsEffectDisplayEnabled) == 0x000000, "Member 'W_SpiceAddictionStatus_C_OnEffectDisplayEnabledChanged::bIsEffectDisplayEnabled' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.IsTrackingEffect
// 0x0060 (0x0060 - 0x0000)
struct W_SpiceAddictionStatus_C_IsTrackingEffect final
{
public:
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	class UListView*                              EffectList;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsTrackingEffect;                                 // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        CallFunc_GetListItems_ReturnValue;                 // 0x0020(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USpiceAddictionStatusListEntry*         K2Node_DynamicCast_AsSpice_Addiction_Status_List_Entry; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ActiveGameplayEffectHandle_ReturnValue; // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_IsTrackingEffect) == 0x000008, "Wrong alignment on W_SpiceAddictionStatus_C_IsTrackingEffect");
static_assert(sizeof(W_SpiceAddictionStatus_C_IsTrackingEffect) == 0x000060, "Wrong size on W_SpiceAddictionStatus_C_IsTrackingEffect");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, EffectHandle) == 0x000000, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::EffectHandle' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, EffectList) == 0x000010, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::EffectList' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, bIsTrackingEffect) == 0x000018, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::bIsTrackingEffect' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, CallFunc_GetListItems_ReturnValue) == 0x000020, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::CallFunc_GetListItems_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, Temp_int_Array_Index_Variable) == 0x000030, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, CallFunc_Array_Get_Item) == 0x000038, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, K2Node_DynamicCast_AsSpice_Addiction_Status_List_Entry) == 0x000040, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::K2Node_DynamicCast_AsSpice_Addiction_Status_List_Entry' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_IsTrackingEffect, CallFunc_EqualEqual_ActiveGameplayEffectHandle_ReturnValue) == 0x000058, "Member 'W_SpiceAddictionStatus_C_IsTrackingEffect::CallFunc_EqualEqual_ActiveGameplayEffectHandle_ReturnValue' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.ExecuteUbergraph_W_SpiceAddictionStatus
// 0x0130 (0x0130 - 0x0000)
struct W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            K2Node_Event_GameplayEffectHandle_1;               // 0x0008(0x0010)(ConstParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	const class USpiceAddictionGameplayEffectUIData* K2Node_Event_UIData_1;                          // 0x0018(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            K2Node_Event_GameplayEffectHandle;                 // 0x0020(0x0010)(ConstParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	const class USpiceAddictionGameplayEffectUIData* K2Node_Event_UIData;                            // 0x0030(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsEffectDisplayEnabled;              // 0x0038(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x003C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_SpiceExposure_C*                     K2Node_DynamicCast_AsW_Spice_Exposure;             // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTrackingEffect_bIsTrackingEffect;       // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_SpiceExposureLevel;                   // 0x0084(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTrackingEffect_bIsTrackingEffect_1;     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_CurrentSpiceAmount_1;                 // 0x008C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_MaxSpiceAmount_1;                     // 0x0090(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00A4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_CurrentSpiceAmount;                   // 0x00B8(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_MaxSpiceAmount;                       // 0x00BC(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x00C0(0x0018)()
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_CreatePlayAnimationProxyObject_Result;    // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimationPlayCallbackProxy*      CallFunc_CreatePlayAnimationProxyObject_ReturnValue; // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SetSpiceExposureLevel_Value_ImplicitCast; // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast;     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToText_Value_ImplicitCast;     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus) == 0x000008, "Wrong alignment on W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus");
static_assert(sizeof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus) == 0x000130, "Wrong size on W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, EntryPoint) == 0x000000, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, Temp_bool_Variable) == 0x000004, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_GameplayEffectHandle_1) == 0x000008, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_GameplayEffectHandle_1' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_UIData_1) == 0x000018, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_UIData_1' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_GameplayEffectHandle) == 0x000020, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_GameplayEffectHandle' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_UIData) == 0x000030, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_UIData' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_bIsEffectDisplayEnabled) == 0x000038, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_bIsEffectDisplayEnabled' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_MyGeometry) == 0x00003C, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_InDeltaTime) == 0x000074, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_DynamicCast_AsW_Spice_Exposure) == 0x000078, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_DynamicCast_AsW_Spice_Exposure' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_IsTrackingEffect_bIsTrackingEffect) == 0x000081, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_IsTrackingEffect_bIsTrackingEffect' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_SpiceExposureLevel) == 0x000084, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_SpiceExposureLevel' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_IsTrackingEffect_bIsTrackingEffect_1) == 0x000088, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_IsTrackingEffect_bIsTrackingEffect_1' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_CurrentSpiceAmount_1) == 0x00008C, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_CurrentSpiceAmount_1' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_MaxSpiceAmount_1) == 0x000090, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_MaxSpiceAmount_1' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000098, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_CreateDelegate_OutputDelegate) == 0x0000A4, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_GetVisibility_ReturnValue) == 0x0000B4, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000B5, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_CurrentSpiceAmount) == 0x0000B8, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_CurrentSpiceAmount' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Event_MaxSpiceAmount) == 0x0000BC, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Event_MaxSpiceAmount' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_Conv_DoubleToText_ReturnValue) == 0x0000C0, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, Temp_byte_Variable) == 0x0000D8, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, Temp_byte_Variable_1) == 0x0000D9, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, K2Node_Select_Default) == 0x0000DA, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000DB, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x0000DC, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_IsAnimationPlaying_ReturnValue) == 0x0000E0, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000E1, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_BooleanAND_ReturnValue) == 0x0000E2, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_CreatePlayAnimationProxyObject_Result) == 0x0000E8, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_CreatePlayAnimationProxyObject_Result' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_CreatePlayAnimationProxyObject_ReturnValue) == 0x0000F0, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_CreatePlayAnimationProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_IsValid_ReturnValue) == 0x0000F8, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_SetSpiceExposureLevel_Value_ImplicitCast) == 0x000100, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_SetSpiceExposureLevel_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000108, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast) == 0x000110, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000118, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_Conv_DoubleToText_Value_ImplicitCast) == 0x000120, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_Conv_DoubleToText_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000128, "Member 'W_SpiceAddictionStatus_C_ExecuteUbergraph_W_SpiceAddictionStatus::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.AddEffectEntry
// 0x0028 (0x0028 - 0x0000)
struct W_SpiceAddictionStatus_C_AddEffectEntry final
{
public:
	class UListView*                              Effect_List;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            Gameplay_Effect_Handle;                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	class USpiceAddictionGameplayEffectUIData*    Gameplay_Effect_UI_Data;                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USpiceAddictionStatusListEntryData*     CallFunc_SpawnObject_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SpiceAddictionStatus_C_AddEffectEntry) == 0x000008, "Wrong alignment on W_SpiceAddictionStatus_C_AddEffectEntry");
static_assert(sizeof(W_SpiceAddictionStatus_C_AddEffectEntry) == 0x000028, "Wrong size on W_SpiceAddictionStatus_C_AddEffectEntry");
static_assert(offsetof(W_SpiceAddictionStatus_C_AddEffectEntry, Effect_List) == 0x000000, "Member 'W_SpiceAddictionStatus_C_AddEffectEntry::Effect_List' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_AddEffectEntry, Gameplay_Effect_Handle) == 0x000008, "Member 'W_SpiceAddictionStatus_C_AddEffectEntry::Gameplay_Effect_Handle' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_AddEffectEntry, Gameplay_Effect_UI_Data) == 0x000018, "Member 'W_SpiceAddictionStatus_C_AddEffectEntry::Gameplay_Effect_UI_Data' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_AddEffectEntry, CallFunc_SpawnObject_ReturnValue) == 0x000020, "Member 'W_SpiceAddictionStatus_C_AddEffectEntry::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");

// Function W_SpiceAddictionStatus.W_SpiceAddictionStatus_C.GetGameplayEffectsToTrack
// 0x0020 (0x0020 - 0x0000)
struct W_SpiceAddictionStatus_C_GetGameplayEffectsToTrack final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, UObjectWrapper)
	TArray<class UClass*>                         Temp_class_Variable;                               // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(W_SpiceAddictionStatus_C_GetGameplayEffectsToTrack) == 0x000008, "Wrong alignment on W_SpiceAddictionStatus_C_GetGameplayEffectsToTrack");
static_assert(sizeof(W_SpiceAddictionStatus_C_GetGameplayEffectsToTrack) == 0x000020, "Wrong size on W_SpiceAddictionStatus_C_GetGameplayEffectsToTrack");
static_assert(offsetof(W_SpiceAddictionStatus_C_GetGameplayEffectsToTrack, ReturnValue) == 0x000000, "Member 'W_SpiceAddictionStatus_C_GetGameplayEffectsToTrack::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SpiceAddictionStatus_C_GetGameplayEffectsToTrack, Temp_class_Variable) == 0x000010, "Member 'W_SpiceAddictionStatus_C_GetGameplayEffectsToTrack::Temp_class_Variable' has a wrong offset!");

}

