#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Throwable_Seeker_Assault

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Throwable_Seeker_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Throwable_Seeker_Assault.BP_Throwable_Seeker_Assault_C
// 0x0038 (0x10F0 - 0x10B8)
class ABP_Throwable_Seeker_Assault_C final : public ABP_Throwable_Seeker_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Throwable_Seeker_Assault_C;      // 0x10B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x10C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_LensFlareBillboardOptimized_Component_C* BP_LensFlareBillboardOptimized_Component;     // 0x10C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         ExplosionVFXTemplate;                              // 0x10D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          ExplosionSFX;                                      // 0x10D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AutoDetonateTime;                                  // 0x10E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10E4[0x4];                                     // 0x10E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxDamage;                                         // 0x10E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TryDetonate();
	void Multicast_Detonate();
	void Launch(const struct FVector& Velocity, const struct FTransform& Transform);
	void ExecuteUbergraph_BP_Throwable_Seeker_Assault(int32 EntryPoint);
	void CacheTuningValues();
	void BndEvt__BP_Throwable_Seeker_Assault_m_SphereCollisionComp_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Activate();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Throwable_Seeker_Assault_C">();
	}
	static class ABP_Throwable_Seeker_Assault_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Throwable_Seeker_Assault_C>();
	}
};
static_assert(alignof(ABP_Throwable_Seeker_Assault_C) == 0x000008, "Wrong alignment on ABP_Throwable_Seeker_Assault_C");
static_assert(sizeof(ABP_Throwable_Seeker_Assault_C) == 0x0010F0, "Wrong size on ABP_Throwable_Seeker_Assault_C");
static_assert(offsetof(ABP_Throwable_Seeker_Assault_C, UberGraphFrame_BP_Throwable_Seeker_Assault_C) == 0x0010B8, "Member 'ABP_Throwable_Seeker_Assault_C::UberGraphFrame_BP_Throwable_Seeker_Assault_C' has a wrong offset!");
static_assert(offsetof(ABP_Throwable_Seeker_Assault_C, PointLight) == 0x0010C0, "Member 'ABP_Throwable_Seeker_Assault_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Throwable_Seeker_Assault_C, BP_LensFlareBillboardOptimized_Component) == 0x0010C8, "Member 'ABP_Throwable_Seeker_Assault_C::BP_LensFlareBillboardOptimized_Component' has a wrong offset!");
static_assert(offsetof(ABP_Throwable_Seeker_Assault_C, ExplosionVFXTemplate) == 0x0010D0, "Member 'ABP_Throwable_Seeker_Assault_C::ExplosionVFXTemplate' has a wrong offset!");
static_assert(offsetof(ABP_Throwable_Seeker_Assault_C, ExplosionSFX) == 0x0010D8, "Member 'ABP_Throwable_Seeker_Assault_C::ExplosionSFX' has a wrong offset!");
static_assert(offsetof(ABP_Throwable_Seeker_Assault_C, AutoDetonateTime) == 0x0010E0, "Member 'ABP_Throwable_Seeker_Assault_C::AutoDetonateTime' has a wrong offset!");
static_assert(offsetof(ABP_Throwable_Seeker_Assault_C, MaxDamage) == 0x0010E8, "Member 'ABP_Throwable_Seeker_Assault_C::MaxDamage' has a wrong offset!");

}

