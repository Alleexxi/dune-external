#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_SpiceVision

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_SpiceVision.GA_SpiceVision_C
// 0x00A8 (0x05C0 - 0x0518)
class UGA_SpiceVision_C final : public USpiceVisionGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0518(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsSpiceVisionOnCooldown;                           // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521[0x3];                                      // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ActiveGameplayCue;                                 // 0x0524(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ResetSpiceVisionCooldownHandle;                    // 0x0530(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USpiceVisionTriggerRowObject*           SpiceVisionRowObject;                              // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UDataTable>              TuningDTSoftReference;                             // 0x0540(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   SpiceAddictionSettingsSoftRef;                     // 0x0570(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSubclassOf<class UCameraModifier>>    AppliedCameraModifiers;                            // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCurveFloat*                            WithdrawalVisionChance;                            // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SpiceFieldVisionChance;                            // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Added_5E8B112C40C2288D9ABCDF8F1883A669();
	void BP_OnAvatarSet(const struct FGameplayAbilityActorInfo& InActorInfo);
	void BP_OnSpiceVisionEnableChanged(const bool bIsEnabled);
	void Changed_6434B40645D24EBA0724C69966ADE08D(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue);
	void DidSpiceStateChange(double NewValue, double OldValue, class UClass* Settings, ESpiceState* NewState, bool* StateChanged, bool* DidStateIncrease);
	void DisableSpiceVisionCameraEffects();
	void ExecuteUbergraph_GA_SpiceVision(int32 EntryPoint);
	class FString Get_Complete_Function_Name(const class FString& Function_Name);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnAvatarSet();
	void OnCinematicModeChanged(bool IsEnabled);
	void OnLoaded_26ADA9D249DDD1429748E1A5D09689A7(class UObject* Loaded);
	void OnLoaded_26ADA9D249DDD1429748E1A5EAA1A90D(class UObject* Loaded);
	void OnLoaded_4B207F6B4546F43960CF33BB94F44765(class UObject* Loaded);
	void OnLoaded_6CE2488E4B7268A7033101A56DD40534(TSubclassOf<class UObject> Loaded);
	void OnLoaded_944C09DF4517B767F9F2C4AB07151EF8(TSubclassOf<class UObject> Loaded);
	void OnLoaded_944C09DF4517B767F9F2C4AB09F70CBB(TSubclassOf<class UObject> Loaded);
	void OnLoaded_944C09DF4517B767F9F2C4AB3D223E52(TSubclassOf<class UObject> Loaded);
	void OnLoaded_944C09DF4517B767F9F2C4AB64849E5A(TSubclassOf<class UObject> Loaded);
	void OnLoaded_944C09DF4517B767F9F2C4ABD01270F3(TSubclassOf<class UObject> Loaded);
	void OnLoaded_944C09DF4517B767F9F2C4ABD6A04E8D(TSubclassOf<class UObject> Loaded);
	void OnPlayerEnteredSpiceField();
	void ResetSpiceVisionCooldown();
	void Try_Trigger_Spice_Vision(ESpiceState SpiceState, int32 SpiceAddictionLevel, class UClass* Settings, class UDataTable* DataTable, struct FGameplayTag* TriggeredCueTag);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_SpiceVision_C">();
	}
	static class UGA_SpiceVision_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_SpiceVision_C>();
	}
};
static_assert(alignof(UGA_SpiceVision_C) == 0x000008, "Wrong alignment on UGA_SpiceVision_C");
static_assert(sizeof(UGA_SpiceVision_C) == 0x0005C0, "Wrong size on UGA_SpiceVision_C");
static_assert(offsetof(UGA_SpiceVision_C, UberGraphFrame) == 0x000518, "Member 'UGA_SpiceVision_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_SpiceVision_C, IsSpiceVisionOnCooldown) == 0x000520, "Member 'UGA_SpiceVision_C::IsSpiceVisionOnCooldown' has a wrong offset!");
static_assert(offsetof(UGA_SpiceVision_C, ActiveGameplayCue) == 0x000524, "Member 'UGA_SpiceVision_C::ActiveGameplayCue' has a wrong offset!");
static_assert(offsetof(UGA_SpiceVision_C, ResetSpiceVisionCooldownHandle) == 0x000530, "Member 'UGA_SpiceVision_C::ResetSpiceVisionCooldownHandle' has a wrong offset!");
static_assert(offsetof(UGA_SpiceVision_C, SpiceVisionRowObject) == 0x000538, "Member 'UGA_SpiceVision_C::SpiceVisionRowObject' has a wrong offset!");
static_assert(offsetof(UGA_SpiceVision_C, TuningDTSoftReference) == 0x000540, "Member 'UGA_SpiceVision_C::TuningDTSoftReference' has a wrong offset!");
static_assert(offsetof(UGA_SpiceVision_C, SpiceAddictionSettingsSoftRef) == 0x000570, "Member 'UGA_SpiceVision_C::SpiceAddictionSettingsSoftRef' has a wrong offset!");
static_assert(offsetof(UGA_SpiceVision_C, AppliedCameraModifiers) == 0x0005A0, "Member 'UGA_SpiceVision_C::AppliedCameraModifiers' has a wrong offset!");
static_assert(offsetof(UGA_SpiceVision_C, WithdrawalVisionChance) == 0x0005B0, "Member 'UGA_SpiceVision_C::WithdrawalVisionChance' has a wrong offset!");
static_assert(offsetof(UGA_SpiceVision_C, SpiceFieldVisionChance) == 0x0005B8, "Member 'UGA_SpiceVision_C::SpiceFieldVisionChance' has a wrong offset!");

}

