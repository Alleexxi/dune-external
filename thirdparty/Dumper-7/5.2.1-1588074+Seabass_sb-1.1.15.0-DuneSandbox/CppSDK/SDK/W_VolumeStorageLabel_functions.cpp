#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_VolumeStorageLabel

#include "Basic.hpp"

#include "W_VolumeStorageLabel_classes.hpp"
#include "W_VolumeStorageLabel_parameters.hpp"


namespace SDK
{

// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.UpdateTriangleVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UW_VolumeStorageLabel_C::UpdateTriangleVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_VolumeStorageLabel_C", "UpdateTriangleVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.SetMaxState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMax                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_VolumeStorageLabel_C::SetMaxState(bool IsMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_VolumeStorageLabel_C", "SetMaxState");

	Params::W_VolumeStorageLabel_C_SetMaxState Parms{};

	Parms.IsMax = IsMax;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.SetFlipped
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFlipped_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_VolumeStorageLabel_C::SetFlipped(bool IsFlipped_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_VolumeStorageLabel_C", "SetFlipped");

	Params::W_VolumeStorageLabel_C_SetFlipped Parms{};

	Parms.IsFlipped_0 = IsFlipped_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.SetAddTriangle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AddTriangle_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_VolumeStorageLabel_C::SetAddTriangle(bool AddTriangle_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_VolumeStorageLabel_C", "SetAddTriangle");

	Params::W_VolumeStorageLabel_C_SetAddTriangle Parms{};

	Parms.AddTriangle_0 = AddTriangle_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_VolumeStorageLabel_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_VolumeStorageLabel_C", "PreConstruct");

	Params::W_VolumeStorageLabel_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.ExecuteUbergraph_W_VolumeStorageLabel
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_VolumeStorageLabel_C::ExecuteUbergraph_W_VolumeStorageLabel(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_VolumeStorageLabel_C", "ExecuteUbergraph_W_VolumeStorageLabel");

	Params::W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

