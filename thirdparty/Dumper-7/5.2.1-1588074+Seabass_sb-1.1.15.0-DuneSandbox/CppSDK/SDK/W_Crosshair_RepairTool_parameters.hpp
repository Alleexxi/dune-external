#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Crosshair_RepairTool

#include "Basic.hpp"

#include "DuneSandbox_structs.hpp"
#include "FVehicleModuleHighlight_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.UpdateVehicleBarWidgets
// 0x0140 (0x0140 - 0x0000)
struct W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets final
{
public:
	double                                        Health;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DecayedHealth;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Malfunction;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0014(0x0014)()
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0068(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_3;                              // 0x0088(0x0018)()
	bool                                          Temp_bool_Variable_3;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_4;                              // 0x00A8(0x0018)()
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00C8(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x00E0(0x0018)()
	class FText                                   K2Node_Select_Default_2;                           // 0x00F8(0x0018)()
	class FText                                   K2Node_Select_Default_3;                           // 0x0110(0x0018)()
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRepairProgress_m_Progress_ImplicitCast; // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetProgress_Progress_ImplicitCast;        // 0x013C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets");
static_assert(sizeof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets) == 0x000140, "Wrong size on W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Health) == 0x000000, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Health' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, DecayedHealth) == 0x000008, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::DecayedHealth' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Malfunction) == 0x000010, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Malfunction' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, K2Node_MakeStruct_SlateColor) == 0x000014, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Temp_bool_Variable) == 0x000028, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Temp_text_Variable) == 0x000030, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Temp_text_Variable_1) == 0x000048, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Temp_bool_Variable_1) == 0x000060, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Temp_text_Variable_2) == 0x000068, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Temp_bool_Variable_2) == 0x000080, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Temp_text_Variable_3) == 0x000088, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Temp_bool_Variable_3) == 0x0000A0, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, Temp_text_Variable_4) == 0x0000A8, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0000C0, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0000C1, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x0000C2, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000C3, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, K2Node_Select_Default) == 0x0000C8, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, K2Node_Select_Default_1) == 0x0000E0, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, K2Node_Select_Default_2) == 0x0000F8, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, K2Node_Select_Default_3) == 0x000110, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000128, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000130, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, CallFunc_SetRepairProgress_m_Progress_ImplicitCast) == 0x000138, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::CallFunc_SetRepairProgress_m_Progress_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets, CallFunc_SetProgress_Progress_ImplicitCast) == 0x00013C, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBarWidgets::CallFunc_SetProgress_Progress_ImplicitCast' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.UpdateVehicleBar
// 0x0040 (0x0040 - 0x0000)
struct W_Crosshair_RepairTool_C_UpdateVehicleBar final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeldingTorchMode                             CallFunc_GetCurrentMode_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeldingTorchMode                             CallFunc_GetCurrentMode_ReturnValue_1;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         K2Node_DynamicCast_AsDune_Character;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeaponActorComponent*                  CallFunc_GetWeaponComponent_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHandheldBase*                          CallFunc_GetHandheldBase_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWeldingTorchBase*                      K2Node_DynamicCast_AsWelding_Torch_Base;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_UpdateVehicleBar) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_UpdateVehicleBar");
static_assert(sizeof(W_Crosshair_RepairTool_C_UpdateVehicleBar) == 0x000040, "Wrong size on W_Crosshair_RepairTool_C_UpdateVehicleBar");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, CallFunc_GetCurrentMode_ReturnValue) == 0x000001, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::CallFunc_GetCurrentMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, CallFunc_GetCurrentMode_ReturnValue_1) == 0x000003, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::CallFunc_GetCurrentMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000005, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000006, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000007, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000008, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, K2Node_DynamicCast_AsDune_Character) == 0x000010, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::K2Node_DynamicCast_AsDune_Character' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, CallFunc_GetWeaponComponent_ReturnValue) == 0x000020, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::CallFunc_GetWeaponComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, CallFunc_GetHandheldBase_ReturnValue) == 0x000028, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::CallFunc_GetHandheldBase_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, K2Node_DynamicCast_AsWelding_Torch_Base) == 0x000030, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::K2Node_DynamicCast_AsWelding_Torch_Base' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateVehicleBar, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'W_Crosshair_RepairTool_C_UpdateVehicleBar::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.UpdateRepairProgress
// 0x0030 (0x0030 - 0x0000)
struct W_Crosshair_RepairTool_C_UpdateRepairProgress final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetProgress_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRepairProgress_m_Progress_ImplicitCast; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_UpdateRepairProgress) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_UpdateRepairProgress");
static_assert(sizeof(W_Crosshair_RepairTool_C_UpdateRepairProgress) == 0x000030, "Wrong size on W_Crosshair_RepairTool_C_UpdateRepairProgress");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairProgress, DeltaTime) == 0x000000, "Member 'W_Crosshair_RepairTool_C_UpdateRepairProgress::DeltaTime' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairProgress, CallFunc_GetProgress_ReturnValue) == 0x000008, "Member 'W_Crosshair_RepairTool_C_UpdateRepairProgress::CallFunc_GetProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairProgress, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'W_Crosshair_RepairTool_C_UpdateRepairProgress::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairProgress, CallFunc_FInterpTo_ReturnValue) == 0x000010, "Member 'W_Crosshair_RepairTool_C_UpdateRepairProgress::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairProgress, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000018, "Member 'W_Crosshair_RepairTool_C_UpdateRepairProgress::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairProgress, CallFunc_FInterpTo_Current_ImplicitCast) == 0x000020, "Member 'W_Crosshair_RepairTool_C_UpdateRepairProgress::CallFunc_FInterpTo_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairProgress, CallFunc_SetRepairProgress_m_Progress_ImplicitCast) == 0x000028, "Member 'W_Crosshair_RepairTool_C_UpdateRepairProgress::CallFunc_SetRepairProgress_m_Progress_ImplicitCast' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.UpdateRepairMode
// 0x00E8 (0x00E8 - 0x0000)
struct W_Crosshair_RepairTool_C_UpdateRepairMode final
{
public:
	struct FVehicleModuleInfo                     ModuleInfo;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, NoDestructor)
	class ADuneVehicle*                           TargetVehicle;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        NormalizedCurrentHealth;                           // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCurrentAimTargetInRange_ReturnValue;    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleModuleInfo                     CallFunc_GetVehicleModuleFromComponent_ModuleInfo; // 0x0068(0x0050)(NoDestructor)
	bool                                          CallFunc_GetVehicleModuleFromComponent_ReturnValue; // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneVehicle*                           K2Node_DynamicCast_AsDune_Vehicle;                 // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWrecked_ReturnValue;                    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWrecked_ReturnValue_1;                  // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast; // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_NormalizedCurrentHealth_ImplicitCast; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateVehicleBarWidgets_DecayedHealth_ImplicitCast; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_UpdateRepairMode) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_UpdateRepairMode");
static_assert(sizeof(W_Crosshair_RepairTool_C_UpdateRepairMode) == 0x0000E8, "Wrong size on W_Crosshair_RepairTool_C_UpdateRepairMode");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, ModuleInfo) == 0x000000, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::ModuleInfo' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, TargetVehicle) == 0x000050, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::TargetVehicle' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, NormalizedCurrentHealth) == 0x000058, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::NormalizedCurrentHealth' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_IsCurrentAimTargetInRange_ReturnValue) == 0x000061, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_IsCurrentAimTargetInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000062, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_GetVehicleModuleFromComponent_ModuleInfo) == 0x000068, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_GetVehicleModuleFromComponent_ModuleInfo' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_GetVehicleModuleFromComponent_ReturnValue) == 0x0000B8, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_GetVehicleModuleFromComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_IsValid_ReturnValue_1) == 0x0000B9, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, K2Node_DynamicCast_AsDune_Vehicle) == 0x0000C0, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::K2Node_DynamicCast_AsDune_Vehicle' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_IsWrecked_ReturnValue) == 0x0000C9, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_IsWrecked_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_IsWrecked_ReturnValue_1) == 0x0000CA, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_IsWrecked_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_Not_PreBool_ReturnValue) == 0x0000CB, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast) == 0x0000D0, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, K2Node_VariableSet_NormalizedCurrentHealth_ImplicitCast) == 0x0000D8, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::K2Node_VariableSet_NormalizedCurrentHealth_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateRepairMode, CallFunc_UpdateVehicleBarWidgets_DecayedHealth_ImplicitCast) == 0x0000E0, "Member 'W_Crosshair_RepairTool_C_UpdateRepairMode::CallFunc_UpdateVehicleBarWidgets_DecayedHealth_ImplicitCast' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.UpdateCuttingMode
// 0x0290 (0x0290 - 0x0000)
struct W_Crosshair_RepairTool_C_UpdateCuttingMode final
{
public:
	struct FVehicleModuleInfo                     ModuleInfo;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, NoDestructor)
	class ADuneVehicle*                           Vehicle;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0060(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCurrentAimTargetInRange_ReturnValue;    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x0080(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADunePlayerCharacter*                   K2Node_DynamicCast_AsDune_Player_Character;        // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentCuttingProgress_ReturnValue;    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADuneCharacter*>                 CallFunc_GetSeatedCharacters_ReturnValue;          // 0x00C0(0x0010)(ReferenceParm)
	bool                                          CallFunc_CanBeWeldedByPlayer_ReturnValue;          // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x00E0(0x0018)()
	bool                                          CallFunc_ModuleCanBeDetached_bOutHasChilds;        // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ModuleCanBeDetached_bOutIsRequired;       // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_ModuleCanBeDetached_OutFailureContext;    // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_ModuleCanBeDetached_ReturnValue;          // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0118(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0130(0x0050)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0180(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0198(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x01B0(0x0050)(HasGetValueTypeHash)
	struct FVehicleModuleInfo                     CallFunc_GetVehicleModuleFromComponent_ModuleInfo; // 0x0200(0x0050)(NoDestructor)
	bool                                          CallFunc_GetVehicleModuleFromComponent_ReturnValue; // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0258(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0268(0x0018)()
	class ADuneVehicle*                           K2Node_DynamicCast_AsDune_Vehicle;                 // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_UpdateCuttingMode) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_UpdateCuttingMode");
static_assert(sizeof(W_Crosshair_RepairTool_C_UpdateCuttingMode) == 0x000290, "Wrong size on W_Crosshair_RepairTool_C_UpdateCuttingMode");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, ModuleInfo) == 0x000000, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::ModuleInfo' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, Vehicle) == 0x000050, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::Vehicle' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, Temp_bool_Variable) == 0x000058, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, Temp_text_Variable) == 0x000060, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_IsCurrentAimTargetInRange_ReturnValue) == 0x000079, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_IsCurrentAimTargetInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, Temp_text_Variable_1) == 0x000080, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, Temp_bool_Variable_1) == 0x000098, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x0000A0, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, K2Node_DynamicCast_AsDune_Player_Character) == 0x0000A8, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::K2Node_DynamicCast_AsDune_Player_Character' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_GetCurrentCuttingProgress_ReturnValue) == 0x0000B4, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_GetCurrentCuttingProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_IsValidClass_ReturnValue) == 0x0000B8, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_GetSeatedCharacters_ReturnValue) == 0x0000C0, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_GetSeatedCharacters_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_CanBeWeldedByPlayer_ReturnValue) == 0x0000D0, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_CanBeWeldedByPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_Array_Length_ReturnValue) == 0x0000D4, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_BooleanAND_ReturnValue) == 0x0000D8, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D9, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, Temp_text_Variable_2) == 0x0000E0, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_ModuleCanBeDetached_bOutHasChilds) == 0x0000F8, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_ModuleCanBeDetached_bOutHasChilds' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_ModuleCanBeDetached_bOutIsRequired) == 0x0000F9, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_ModuleCanBeDetached_bOutIsRequired' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_ModuleCanBeDetached_OutFailureContext) == 0x000100, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_ModuleCanBeDetached_OutFailureContext' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_ModuleCanBeDetached_ReturnValue) == 0x000110, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_ModuleCanBeDetached_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_Conv_StringToText_ReturnValue) == 0x000118, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, K2Node_MakeStruct_FormatArgumentData) == 0x000130, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, K2Node_Select_Default) == 0x000180, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, K2Node_Select_Default_1) == 0x000198, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, K2Node_MakeStruct_FormatArgumentData_1) == 0x0001B0, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_GetVehicleModuleFromComponent_ModuleInfo) == 0x000200, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_GetVehicleModuleFromComponent_ModuleInfo' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_GetVehicleModuleFromComponent_ReturnValue) == 0x000250, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_GetVehicleModuleFromComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, K2Node_MakeArray_Array) == 0x000258, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, CallFunc_Format_ReturnValue) == 0x000268, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, K2Node_DynamicCast_AsDune_Vehicle) == 0x000280, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::K2Node_DynamicCast_AsDune_Vehicle' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCuttingMode, K2Node_DynamicCast_bSuccess_1) == 0x000288, "Member 'W_Crosshair_RepairTool_C_UpdateCuttingMode::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.UpdateCustomizeMode
// 0x01D8 (0x01D8 - 0x0000)
struct W_Crosshair_RepairTool_C_UpdateCustomizeMode final
{
public:
	class ADuneVehicle*                           Vehicle;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneVehicle*                           K2Node_DynamicCast_AsDune_Vehicle;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleModuleInfo                     CallFunc_GetVehicleModuleFromComponent_ModuleInfo; // 0x0020(0x0050)(NoDestructor)
	bool                                          CallFunc_GetVehicleModuleFromComponent_ReturnValue; // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVehicleCustomizationType                     CallFunc_GetCurrentCustomizationCategory_ReturnValue; // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADunePlayerControllerBase*              K2Node_DynamicCast_AsDune_Player_Controller_Base;  // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPermissionSystemActorInterface> CallFunc_PlayerControllerHasPermission_PermissionActor_CastInput; // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_PlayerControllerHasPermission_ReturnValue; // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleSchematicsTableRow             CallFunc_GetVehicleSchematic_Schematic;            // 0x00A8(0x0128)()
	bool                                          CallFunc_GetVehicleSchematic_ReturnValue;          // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCurrentAimTargetInRange_ReturnValue;    // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_UpdateCustomizeMode) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_UpdateCustomizeMode");
static_assert(sizeof(W_Crosshair_RepairTool_C_UpdateCustomizeMode) == 0x0001D8, "Wrong size on W_Crosshair_RepairTool_C_UpdateCustomizeMode");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, Vehicle) == 0x000000, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::Vehicle' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, K2Node_DynamicCast_AsDune_Vehicle) == 0x000010, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::K2Node_DynamicCast_AsDune_Vehicle' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_GetVehicleModuleFromComponent_ModuleInfo) == 0x000020, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_GetVehicleModuleFromComponent_ModuleInfo' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_GetVehicleModuleFromComponent_ReturnValue) == 0x000070, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_GetVehicleModuleFromComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_GetCurrentCustomizationCategory_ReturnValue) == 0x000071, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_GetCurrentCustomizationCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000072, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_GetOwningPlayer_ReturnValue) == 0x000078, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, K2Node_DynamicCast_AsDune_Player_Controller_Base) == 0x000080, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::K2Node_DynamicCast_AsDune_Player_Controller_Base' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_PlayerControllerHasPermission_PermissionActor_CastInput) == 0x000090, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_PlayerControllerHasPermission_PermissionActor_CastInput' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_PlayerControllerHasPermission_ReturnValue) == 0x0000A0, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_PlayerControllerHasPermission_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_GetVehicleSchematic_Schematic) == 0x0000A8, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_GetVehicleSchematic_Schematic' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_GetVehicleSchematic_ReturnValue) == 0x0001D0, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_GetVehicleSchematic_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_IsValid_ReturnValue_1) == 0x0001D1, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCustomizeMode, CallFunc_IsCurrentAimTargetInRange_ReturnValue) == 0x0001D2, "Member 'W_Crosshair_RepairTool_C_UpdateCustomizeMode::CallFunc_IsCurrentAimTargetInRange_ReturnValue' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.UpdateCrosshairRepair
// 0x0018 (0x0018 - 0x0000)
struct W_Crosshair_RepairTool_C_UpdateCrosshairRepair final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invalid;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_UpdateCrosshairRepair) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_UpdateCrosshairRepair");
static_assert(sizeof(W_Crosshair_RepairTool_C_UpdateCrosshairRepair) == 0x000018, "Wrong size on W_Crosshair_RepairTool_C_UpdateCrosshairRepair");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCrosshairRepair, Valid) == 0x000000, "Member 'W_Crosshair_RepairTool_C_UpdateCrosshairRepair::Valid' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCrosshairRepair, Invalid) == 0x000001, "Member 'W_Crosshair_RepairTool_C_UpdateCrosshairRepair::Invalid' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCrosshairRepair, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'W_Crosshair_RepairTool_C_UpdateCrosshairRepair::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCrosshairRepair, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'W_Crosshair_RepairTool_C_UpdateCrosshairRepair::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.UpdateCrosshairCut
// 0x0018 (0x0018 - 0x0000)
struct W_Crosshair_RepairTool_C_UpdateCrosshairCut final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invalid;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_UpdateCrosshairCut) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_UpdateCrosshairCut");
static_assert(sizeof(W_Crosshair_RepairTool_C_UpdateCrosshairCut) == 0x000018, "Wrong size on W_Crosshair_RepairTool_C_UpdateCrosshairCut");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCrosshairCut, Valid) == 0x000000, "Member 'W_Crosshair_RepairTool_C_UpdateCrosshairCut::Valid' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCrosshairCut, Invalid) == 0x000001, "Member 'W_Crosshair_RepairTool_C_UpdateCrosshairCut::Invalid' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCrosshairCut, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'W_Crosshair_RepairTool_C_UpdateCrosshairCut::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_UpdateCrosshairCut, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'W_Crosshair_RepairTool_C_UpdateCrosshairCut::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_Crosshair_RepairTool_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_Tick) == 0x000004, "Wrong alignment on W_Crosshair_RepairTool_C_Tick");
static_assert(sizeof(W_Crosshair_RepairTool_C_Tick) == 0x00003C, "Wrong size on W_Crosshair_RepairTool_C_Tick");
static_assert(offsetof(W_Crosshair_RepairTool_C_Tick, MyGeometry) == 0x000000, "Member 'W_Crosshair_RepairTool_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_Tick, InDeltaTime) == 0x000038, "Member 'W_Crosshair_RepairTool_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.ShowErrorMessage
// 0x0030 (0x0030 - 0x0000)
struct W_Crosshair_RepairTool_C_ShowErrorMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	double                                        Time;                                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_SetTimer_Time_ImplicitCast;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_ShowErrorMessage) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_ShowErrorMessage");
static_assert(sizeof(W_Crosshair_RepairTool_C_ShowErrorMessage) == 0x000030, "Wrong size on W_Crosshair_RepairTool_C_ShowErrorMessage");
static_assert(offsetof(W_Crosshair_RepairTool_C_ShowErrorMessage, Message) == 0x000000, "Member 'W_Crosshair_RepairTool_C_ShowErrorMessage::Message' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ShowErrorMessage, Time) == 0x000018, "Member 'W_Crosshair_RepairTool_C_ShowErrorMessage::Time' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ShowErrorMessage, CallFunc_K2_SetTimer_ReturnValue) == 0x000020, "Member 'W_Crosshair_RepairTool_C_ShowErrorMessage::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ShowErrorMessage, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000028, "Member 'W_Crosshair_RepairTool_C_ShowErrorMessage::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ShowErrorMessage, CallFunc_K2_SetTimer_Time_ImplicitCast) == 0x00002C, "Member 'W_Crosshair_RepairTool_C_ShowErrorMessage::CallFunc_K2_SetTimer_Time_ImplicitCast' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.SetVehicleModuleHighlight
// 0x0258 (0x0258 - 0x0000)
struct W_Crosshair_RepairTool_C_SetVehicleModuleHighlight final
{
public:
	class ADuneVehicle*                           Vehicle;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVehicleModuleInfo                     ModuleInfo;                                        // 0x0008(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          ClearCachedHighlights;                             // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVehicleModuleType, EModuleHighlightType> DesiredHighlights;                                // 0x0060(0x0050)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVehicleModuleType, EModuleHighlightType> K2Node_MakeVariable_MakeVariableOutput;           // 0x00C8(0x0050)()
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F[0x1];                                      // 0x011F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EVehicleModuleType>                    CallFunc_Map_Keys_Keys;                            // 0x0120(0x0010)(ReferenceParm)
	EVehicleModuleType                            CallFunc_Array_Get_Item;                           // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFVehicleModuleHighlight>       CallFunc_Map_Values_Values;                        // 0x0140(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FFVehicleModuleHighlight               CallFunc_Array_Get_Item_1;                         // 0x0150(0x00E8)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast;    // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_SetVehicleModuleHighlight");
static_assert(sizeof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight) == 0x000258, "Wrong size on W_Crosshair_RepairTool_C_SetVehicleModuleHighlight");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, Vehicle) == 0x000000, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::Vehicle' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, ModuleInfo) == 0x000008, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::ModuleInfo' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, ClearCachedHighlights) == 0x000058, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::ClearCachedHighlights' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, DesiredHighlights) == 0x000060, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::DesiredHighlights' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, Temp_int_Array_Index_Variable) == 0x0000B0, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_IsValid_ReturnValue) == 0x0000B4, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, Temp_int_Loop_Counter_Variable) == 0x0000B8, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Add_IntInt_ReturnValue) == 0x0000BC, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, Temp_int_Array_Index_Variable_1) == 0x0000C0, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, K2Node_MakeVariable_MakeVariableOutput) == 0x0000C8, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::K2Node_MakeVariable_MakeVariableOutput' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000118, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000119, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00011A, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00011B, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_BooleanOR_ReturnValue) == 0x00011C, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_BooleanOR_ReturnValue_1) == 0x00011D, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Map_Contains_ReturnValue) == 0x00011E, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Map_Keys_Keys) == 0x000120, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Array_Get_Item) == 0x000130, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Array_Length_ReturnValue) == 0x000134, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Less_IntInt_ReturnValue) == 0x000138, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Map_Values_Values) == 0x000140, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Array_Get_Item_1) == 0x000150, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Array_Length_ReturnValue_1) == 0x000238, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, Temp_int_Loop_Counter_Variable_1) == 0x00023C, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Less_IntInt_ReturnValue_1) == 0x000240, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_Add_IntInt_ReturnValue_1) == 0x000244, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000248, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetVehicleModuleHighlight, CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast) == 0x000250, "Member 'W_Crosshair_RepairTool_C_SetVehicleModuleHighlight::CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.SetRepairProgress
// 0x0018 (0x0018 - 0x0000)
struct W_Crosshair_RepairTool_C_SetRepairProgress final
{
public:
	float                                         m_Progress;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetProgress_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetLinearColorValue_ReturnValue;          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_SetRepairProgress) == 0x000004, "Wrong alignment on W_Crosshair_RepairTool_C_SetRepairProgress");
static_assert(sizeof(W_Crosshair_RepairTool_C_SetRepairProgress) == 0x000018, "Wrong size on W_Crosshair_RepairTool_C_SetRepairProgress");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetRepairProgress, m_Progress) == 0x000000, "Member 'W_Crosshair_RepairTool_C_SetRepairProgress::m_Progress' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetRepairProgress, CallFunc_GetProgress_ReturnValue) == 0x000004, "Member 'W_Crosshair_RepairTool_C_SetRepairProgress::CallFunc_GetProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetRepairProgress, CallFunc_GetLinearColorValue_ReturnValue) == 0x000008, "Member 'W_Crosshair_RepairTool_C_SetRepairProgress::CallFunc_GetLinearColorValue_ReturnValue' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.SetModuleName
// 0x08B0 (0x08B0 - 0x0000)
struct W_Crosshair_RepairTool_C_SetModuleName final
{
public:
	class ADuneVehicle*                           Vehicle;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVehicleModuleInfo                     ModuleInfo;                                        // 0x0008(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FEVehicleModuleTemplateID              CallFunc_GetModuleIdFromModuleRowIndex_ReturnValue; // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FBaseVehicleModuleTableRow             CallFunc_GetVehicleModuleData_ModuleRow;           // 0x0060(0x05A0)()
	bool                                          CallFunc_GetVehicleModuleData_ReturnValue;         // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0608(0x0018)()
	struct FBaseItemTableRow                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0620(0x0288)(ContainsInstancedReference)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x08A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_SetModuleName) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_SetModuleName");
static_assert(sizeof(W_Crosshair_RepairTool_C_SetModuleName) == 0x0008B0, "Wrong size on W_Crosshair_RepairTool_C_SetModuleName");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetModuleName, Vehicle) == 0x000000, "Member 'W_Crosshair_RepairTool_C_SetModuleName::Vehicle' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetModuleName, ModuleInfo) == 0x000008, "Member 'W_Crosshair_RepairTool_C_SetModuleName::ModuleInfo' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetModuleName, CallFunc_GetModuleIdFromModuleRowIndex_ReturnValue) == 0x000058, "Member 'W_Crosshair_RepairTool_C_SetModuleName::CallFunc_GetModuleIdFromModuleRowIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetModuleName, CallFunc_GetVehicleModuleData_ModuleRow) == 0x000060, "Member 'W_Crosshair_RepairTool_C_SetModuleName::CallFunc_GetVehicleModuleData_ModuleRow' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetModuleName, CallFunc_GetVehicleModuleData_ReturnValue) == 0x000600, "Member 'W_Crosshair_RepairTool_C_SetModuleName::CallFunc_GetVehicleModuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetModuleName, CallFunc_Conv_NameToText_ReturnValue) == 0x000608, "Member 'W_Crosshair_RepairTool_C_SetModuleName::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetModuleName, CallFunc_GetDataTableRowFromName_OutRow) == 0x000620, "Member 'W_Crosshair_RepairTool_C_SetModuleName::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_SetModuleName, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0008A8, "Member 'W_Crosshair_RepairTool_C_SetModuleName::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Crosshair_RepairTool_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_PreConstruct) == 0x000001, "Wrong alignment on W_Crosshair_RepairTool_C_PreConstruct");
static_assert(sizeof(W_Crosshair_RepairTool_C_PreConstruct) == 0x000001, "Wrong size on W_Crosshair_RepairTool_C_PreConstruct");
static_assert(offsetof(W_Crosshair_RepairTool_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Crosshair_RepairTool_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.OnWeaponHolsterToggled
// 0x0001 (0x0001 - 0x0000)
struct W_Crosshair_RepairTool_C_OnWeaponHolsterToggled final
{
public:
	bool                                          bInHolstered;                                      // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_OnWeaponHolsterToggled) == 0x000001, "Wrong alignment on W_Crosshair_RepairTool_C_OnWeaponHolsterToggled");
static_assert(sizeof(W_Crosshair_RepairTool_C_OnWeaponHolsterToggled) == 0x000001, "Wrong size on W_Crosshair_RepairTool_C_OnWeaponHolsterToggled");
static_assert(offsetof(W_Crosshair_RepairTool_C_OnWeaponHolsterToggled, bInHolstered) == 0x000000, "Member 'W_Crosshair_RepairTool_C_OnWeaponHolsterToggled::bInHolstered' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.OnPendingRemoveFromParent
// 0x0001 (0x0001 - 0x0000)
struct W_Crosshair_RepairTool_C_OnPendingRemoveFromParent final
{
public:
	bool                                          InstantRemove;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_OnPendingRemoveFromParent) == 0x000001, "Wrong alignment on W_Crosshair_RepairTool_C_OnPendingRemoveFromParent");
static_assert(sizeof(W_Crosshair_RepairTool_C_OnPendingRemoveFromParent) == 0x000001, "Wrong size on W_Crosshair_RepairTool_C_OnPendingRemoveFromParent");
static_assert(offsetof(W_Crosshair_RepairTool_C_OnPendingRemoveFromParent, InstantRemove) == 0x000000, "Member 'W_Crosshair_RepairTool_C_OnPendingRemoveFromParent::InstantRemove' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.OnPawnRemoved
// 0x0008 (0x0008 - 0x0000)
struct W_Crosshair_RepairTool_C_OnPawnRemoved final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_OnPawnRemoved) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_OnPawnRemoved");
static_assert(sizeof(W_Crosshair_RepairTool_C_OnPawnRemoved) == 0x000008, "Wrong size on W_Crosshair_RepairTool_C_OnPawnRemoved");
static_assert(offsetof(W_Crosshair_RepairTool_C_OnPawnRemoved, InPawn) == 0x000000, "Member 'W_Crosshair_RepairTool_C_OnPawnRemoved::InPawn' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.IsFiring
// 0x0070 (0x0070 - 0x0000)
struct W_Crosshair_RepairTool_C_IsFiring final
{
public:
	bool                                          Firing;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDunePlayerInputSubsystem*              CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IEnhancedInputSubsystemInterface> CallFunc_QueryKeysMappedToAction_self_CastInput; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKey>                           CallFunc_QueryKeysMappedToAction_ReturnValue;      // 0x0020(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_Array_Get_Item;                           // 0x0038(0x0018)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputKeyDown_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_IsFiring) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_IsFiring");
static_assert(sizeof(W_Crosshair_RepairTool_C_IsFiring) == 0x000070, "Wrong size on W_Crosshair_RepairTool_C_IsFiring");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, Firing) == 0x000000, "Member 'W_Crosshair_RepairTool_C_IsFiring::Firing' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, Temp_int_Array_Index_Variable) == 0x000004, "Member 'W_Crosshair_RepairTool_C_IsFiring::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000008, "Member 'W_Crosshair_RepairTool_C_IsFiring::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, CallFunc_QueryKeysMappedToAction_self_CastInput) == 0x000010, "Member 'W_Crosshair_RepairTool_C_IsFiring::CallFunc_QueryKeysMappedToAction_self_CastInput' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, CallFunc_QueryKeysMappedToAction_ReturnValue) == 0x000020, "Member 'W_Crosshair_RepairTool_C_IsFiring::CallFunc_QueryKeysMappedToAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'W_Crosshair_RepairTool_C_IsFiring::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, CallFunc_Array_Get_Item) == 0x000038, "Member 'W_Crosshair_RepairTool_C_IsFiring::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'W_Crosshair_RepairTool_C_IsFiring::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'W_Crosshair_RepairTool_C_IsFiring::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'W_Crosshair_RepairTool_C_IsFiring::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'W_Crosshair_RepairTool_C_IsFiring::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, CallFunc_GetOwningPlayer_ReturnValue) == 0x000060, "Member 'W_Crosshair_RepairTool_C_IsFiring::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_IsFiring, CallFunc_IsInputKeyDown_ReturnValue) == 0x000068, "Member 'W_Crosshair_RepairTool_C_IsFiring::CallFunc_IsInputKeyDown_ReturnValue' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.HighlightModule
// 0x0408 (0x0408 - 0x0000)
struct W_Crosshair_RepairTool_C_HighlightModule final
{
public:
	EVehicleModuleType                            ModuleType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneVehicle*                           Vehicle;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Selection;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Internal;                                          // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFVehicleModuleHighlight               CurrentVehicleModuleHighlight;                     // 0x0018(0x00E8)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceConstant*              Temp_object_Variable_1;                            // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceConstant*              Temp_object_Variable_2;                            // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFVehicleModuleHighlight               CallFunc_Map_Find_Value;                           // 0x0120(0x00E8)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x0210(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x021C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleModuleMesh                     CallFunc_GetVehicleModuleMesh_ReturnValue;         // 0x0230(0x00D0)(ContainsInstancedReference)
	class UMaterialInstanceConstant*              K2Node_Select_Default;                             // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetOverlayMaterial_ReturnValue;           // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default_1;                           // 0x0318(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFVehicleModuleHighlight               K2Node_MakeStruct_FVehicleModuleHighlight;         // 0x0320(0x00E8)(ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_HighlightModule) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_HighlightModule");
static_assert(sizeof(W_Crosshair_RepairTool_C_HighlightModule) == 0x000408, "Wrong size on W_Crosshair_RepairTool_C_HighlightModule");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, ModuleType) == 0x000000, "Member 'W_Crosshair_RepairTool_C_HighlightModule::ModuleType' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, Vehicle) == 0x000008, "Member 'W_Crosshair_RepairTool_C_HighlightModule::Vehicle' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, Selection) == 0x000010, "Member 'W_Crosshair_RepairTool_C_HighlightModule::Selection' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, Internal) == 0x000011, "Member 'W_Crosshair_RepairTool_C_HighlightModule::Internal' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, CurrentVehicleModuleHighlight) == 0x000018, "Member 'W_Crosshair_RepairTool_C_HighlightModule::CurrentVehicleModuleHighlight' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, Temp_object_Variable) == 0x000100, "Member 'W_Crosshair_RepairTool_C_HighlightModule::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, Temp_bool_Variable) == 0x000108, "Member 'W_Crosshair_RepairTool_C_HighlightModule::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, Temp_object_Variable_1) == 0x000110, "Member 'W_Crosshair_RepairTool_C_HighlightModule::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, Temp_object_Variable_2) == 0x000118, "Member 'W_Crosshair_RepairTool_C_HighlightModule::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, CallFunc_Map_Find_Value) == 0x000120, "Member 'W_Crosshair_RepairTool_C_HighlightModule::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, CallFunc_Map_Find_ReturnValue) == 0x000208, "Member 'W_Crosshair_RepairTool_C_HighlightModule::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x000210, "Member 'W_Crosshair_RepairTool_C_HighlightModule::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, K2Node_DynamicCast_bSuccess) == 0x000218, "Member 'W_Crosshair_RepairTool_C_HighlightModule::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, CallFunc_SelectColor_ReturnValue) == 0x00021C, "Member 'W_Crosshair_RepairTool_C_HighlightModule::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, Temp_bool_Variable_1) == 0x00022C, "Member 'W_Crosshair_RepairTool_C_HighlightModule::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, CallFunc_GetVehicleModuleMesh_ReturnValue) == 0x000230, "Member 'W_Crosshair_RepairTool_C_HighlightModule::CallFunc_GetVehicleModuleMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, K2Node_Select_Default) == 0x000300, "Member 'W_Crosshair_RepairTool_C_HighlightModule::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, CallFunc_GetOverlayMaterial_ReturnValue) == 0x000308, "Member 'W_Crosshair_RepairTool_C_HighlightModule::CallFunc_GetOverlayMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, CallFunc_IsValid_ReturnValue) == 0x000310, "Member 'W_Crosshair_RepairTool_C_HighlightModule::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, K2Node_Select_Default_1) == 0x000318, "Member 'W_Crosshair_RepairTool_C_HighlightModule::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HighlightModule, K2Node_MakeStruct_FVehicleModuleHighlight) == 0x000320, "Member 'W_Crosshair_RepairTool_C_HighlightModule::K2Node_MakeStruct_FVehicleModuleHighlight' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.HandleRepairThreshold
// 0x0650 (0x0650 - 0x0000)
struct W_Crosshair_RepairTool_C_HandleRepairThreshold final
{
public:
	class ADuneVehicle*                           Vehicle;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVehicleModuleInfo                     ModuleInfo;                                        // 0x0008(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	double                                        RepairThreshold;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEVehicleModuleTemplateID              CallFunc_GetModuleIdFromModuleRowIndex_ReturnValue; // 0x0064(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBaseVehicleModuleTableRow             CallFunc_GetVehicleModuleData_ModuleRow;           // 0x0070(0x05A0)()
	bool                                          CallFunc_GetVehicleModuleData_ReturnValue;         // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0611(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_612[0x6];                                      // 0x0612(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0620(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFiring_Firing;                          // 0x0621(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0622(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_623[0x1];                                      // 0x0623(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetProgress_Progress_ImplicitCast;        // 0x0624(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_DurabilityAtRepairStart_ImplicitCast; // 0x0630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast;                // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_A_ImplicitCast;                // 0x0648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_HandleRepairThreshold) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_HandleRepairThreshold");
static_assert(sizeof(W_Crosshair_RepairTool_C_HandleRepairThreshold) == 0x000650, "Wrong size on W_Crosshair_RepairTool_C_HandleRepairThreshold");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, Vehicle) == 0x000000, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::Vehicle' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, ModuleInfo) == 0x000008, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::ModuleInfo' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, RepairThreshold) == 0x000058, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::RepairThreshold' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000060, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000061, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000062, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_GetModuleIdFromModuleRowIndex_ReturnValue) == 0x000064, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_GetModuleIdFromModuleRowIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x00006C, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_GetVehicleModuleData_ModuleRow) == 0x000070, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_GetVehicleModuleData_ModuleRow' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_GetVehicleModuleData_ReturnValue) == 0x000610, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_GetVehicleModuleData_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_BooleanAND_ReturnValue) == 0x000611, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_SafeDivide_ReturnValue) == 0x000618, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000620, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_IsFiring_Firing) == 0x000621, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_IsFiring_Firing' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_BooleanAND_ReturnValue_1) == 0x000622, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_SetProgress_Progress_ImplicitCast) == 0x000624, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_SetProgress_Progress_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000628, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, K2Node_VariableSet_DurabilityAtRepairStart_ImplicitCast) == 0x000630, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::K2Node_VariableSet_DurabilityAtRepairStart_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000638, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_SafeDivide_B_ImplicitCast) == 0x000640, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_SafeDivide_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_HandleRepairThreshold, CallFunc_SafeDivide_A_ImplicitCast) == 0x000648, "Member 'W_Crosshair_RepairTool_C_HandleRepairThreshold::CallFunc_SafeDivide_A_ImplicitCast' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.ExecuteUbergraph_W_Crosshair_RepairTool
// 0x0078 (0x0078 - 0x0000)
struct W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInHolstered;                         // 0x0011(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_InPawn;                               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0020(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	double                                        CallFunc_UpdateRepairProgress_DeltaTime_ImplicitCast; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool");
static_assert(sizeof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool) == 0x000078, "Wrong size on W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool");
static_assert(offsetof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool, EntryPoint) == 0x000000, "Member 'W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool, K2Node_Event_IsDesignTime) == 0x000010, "Member 'W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool, K2Node_Event_bInHolstered) == 0x000011, "Member 'W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool::K2Node_Event_bInHolstered' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool, K2Node_Event_InPawn) == 0x000018, "Member 'W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool::K2Node_Event_InPawn' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool, K2Node_Event_MyGeometry) == 0x000020, "Member 'W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool, K2Node_Event_InDeltaTime) == 0x000058, "Member 'W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool, K2Node_MakeArray_Array) == 0x000060, "Member 'W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool, CallFunc_UpdateRepairProgress_DeltaTime_ImplicitCast) == 0x000070, "Member 'W_Crosshair_RepairTool_C_ExecuteUbergraph_W_Crosshair_RepairTool::CallFunc_UpdateRepairProgress_DeltaTime_ImplicitCast' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.ClearModuleInfo
// 0x0028 (0x0028 - 0x0000)
struct W_Crosshair_RepairTool_C_ClearModuleInfo final
{
public:
	bool                                          Invalid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ErrorMsg;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          ClearHighlights;                                   // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFiring_Firing;                          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_ClearModuleInfo) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_ClearModuleInfo");
static_assert(sizeof(W_Crosshair_RepairTool_C_ClearModuleInfo) == 0x000028, "Wrong size on W_Crosshair_RepairTool_C_ClearModuleInfo");
static_assert(offsetof(W_Crosshair_RepairTool_C_ClearModuleInfo, Invalid) == 0x000000, "Member 'W_Crosshair_RepairTool_C_ClearModuleInfo::Invalid' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ClearModuleInfo, ErrorMsg) == 0x000008, "Member 'W_Crosshair_RepairTool_C_ClearModuleInfo::ErrorMsg' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ClearModuleInfo, ClearHighlights) == 0x000020, "Member 'W_Crosshair_RepairTool_C_ClearModuleInfo::ClearHighlights' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ClearModuleInfo, CallFunc_IsFiring_Firing) == 0x000021, "Member 'W_Crosshair_RepairTool_C_ClearModuleInfo::CallFunc_IsFiring_Firing' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ClearModuleInfo, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'W_Crosshair_RepairTool_C_ClearModuleInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ClearModuleInfo, CallFunc_TextIsEmpty_ReturnValue) == 0x000023, "Member 'W_Crosshair_RepairTool_C_ClearModuleInfo::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_ClearModuleInfo, CallFunc_BooleanOR_ReturnValue) == 0x000024, "Member 'W_Crosshair_RepairTool_C_ClearModuleInfo::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function W_Crosshair_RepairTool.W_Crosshair_RepairTool_C.CleanupPreviousModuleHighlight
// 0x0100 (0x0100 - 0x0000)
struct W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight final
{
public:
	struct FFVehicleModuleHighlight               ModuleHighlightInfo;                               // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight) == 0x000008, "Wrong alignment on W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight");
static_assert(sizeof(W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight) == 0x000100, "Wrong size on W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight");
static_assert(offsetof(W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight, ModuleHighlightInfo) == 0x000000, "Member 'W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight::ModuleHighlightInfo' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight, CallFunc_IsValid_ReturnValue) == 0x0000E8, "Member 'W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x0000F0, "Member 'W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight, K2Node_DynamicCast_bSuccess) == 0x0000F8, "Member 'W_Crosshair_RepairTool_C_CleanupPreviousModuleHighlight::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

