#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InfiniteGameWorlds

#include "Basic.hpp"

#include "InfiniteGameWorlds_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PersistenceCore_structs.hpp"
#include "IgwCore_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function InfiniteGameWorlds.S2sCheatManager.SetSoftBorderEnabled
// 0x0001 (0x0001 - 0x0000)
struct S2sCheatManager_SetSoftBorderEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sCheatManager_SetSoftBorderEnabled) == 0x000001, "Wrong alignment on S2sCheatManager_SetSoftBorderEnabled");
static_assert(sizeof(S2sCheatManager_SetSoftBorderEnabled) == 0x000001, "Wrong size on S2sCheatManager_SetSoftBorderEnabled");
static_assert(offsetof(S2sCheatManager_SetSoftBorderEnabled, Enabled) == 0x000000, "Member 'S2sCheatManager_SetSoftBorderEnabled::Enabled' has a wrong offset!");

// Function InfiniteGameWorlds.S2sCheatManager.SetSoftBorderMargin
// 0x0004 (0x0004 - 0x0000)
struct S2sCheatManager_SetSoftBorderMargin final
{
public:
	float                                         Margin;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sCheatManager_SetSoftBorderMargin) == 0x000004, "Wrong alignment on S2sCheatManager_SetSoftBorderMargin");
static_assert(sizeof(S2sCheatManager_SetSoftBorderMargin) == 0x000004, "Wrong size on S2sCheatManager_SetSoftBorderMargin");
static_assert(offsetof(S2sCheatManager_SetSoftBorderMargin, Margin) == 0x000000, "Member 'S2sCheatManager_SetSoftBorderMargin::Margin' has a wrong offset!");

// Function InfiniteGameWorlds.ActorDebugInfo.GetActorGlobalID
// 0x0020 (0x0020 - 0x0000)
struct ActorDebugInfo_GetActorGlobalID final
{
public:
	struct FActorGlobalID                         ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorDebugInfo_GetActorGlobalID) == 0x000008, "Wrong alignment on ActorDebugInfo_GetActorGlobalID");
static_assert(sizeof(ActorDebugInfo_GetActorGlobalID) == 0x000020, "Wrong size on ActorDebugInfo_GetActorGlobalID");
static_assert(offsetof(ActorDebugInfo_GetActorGlobalID, ReturnValue) == 0x000000, "Member 'ActorDebugInfo_GetActorGlobalID::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.ActorDebugInfo.GetLocation
// 0x0018 (0x0018 - 0x0000)
struct ActorDebugInfo_GetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorDebugInfo_GetLocation) == 0x000008, "Wrong alignment on ActorDebugInfo_GetLocation");
static_assert(sizeof(ActorDebugInfo_GetLocation) == 0x000018, "Wrong size on ActorDebugInfo_GetLocation");
static_assert(offsetof(ActorDebugInfo_GetLocation, ReturnValue) == 0x000000, "Member 'ActorDebugInfo_GetLocation::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ClientAuthorityTransferConfirmed
// 0x0030 (0x0030 - 0x0000)
struct S2sController_ClientAuthorityTransferConfirmed final
{
public:
	uint32                                        ActorNetGuid;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActorStatePacket                      StatePacket;                                       // 0x0008(0x0028)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_ClientAuthorityTransferConfirmed) == 0x000008, "Wrong alignment on S2sController_ClientAuthorityTransferConfirmed");
static_assert(sizeof(S2sController_ClientAuthorityTransferConfirmed) == 0x000030, "Wrong size on S2sController_ClientAuthorityTransferConfirmed");
static_assert(offsetof(S2sController_ClientAuthorityTransferConfirmed, ActorNetGuid) == 0x000000, "Member 'S2sController_ClientAuthorityTransferConfirmed::ActorNetGuid' has a wrong offset!");
static_assert(offsetof(S2sController_ClientAuthorityTransferConfirmed, StatePacket) == 0x000008, "Member 'S2sController_ClientAuthorityTransferConfirmed::StatePacket' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ClientEndPCAuthorityTransfer
// 0x0008 (0x0008 - 0x0000)
struct S2sController_ClientEndPCAuthorityTransfer final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_ClientEndPCAuthorityTransfer) == 0x000008, "Wrong alignment on S2sController_ClientEndPCAuthorityTransfer");
static_assert(sizeof(S2sController_ClientEndPCAuthorityTransfer) == 0x000008, "Wrong size on S2sController_ClientEndPCAuthorityTransfer");
static_assert(offsetof(S2sController_ClientEndPCAuthorityTransfer, PC) == 0x000000, "Member 'S2sController_ClientEndPCAuthorityTransfer::PC' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ClientNotifyActorsToLoad
// 0x0010 (0x0010 - 0x0000)
struct S2sController_ClientNotifyActorsToLoad final
{
public:
	TArray<struct FUniqueID>                      PersistenceIDs;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_ClientNotifyActorsToLoad) == 0x000008, "Wrong alignment on S2sController_ClientNotifyActorsToLoad");
static_assert(sizeof(S2sController_ClientNotifyActorsToLoad) == 0x000010, "Wrong size on S2sController_ClientNotifyActorsToLoad");
static_assert(offsetof(S2sController_ClientNotifyActorsToLoad, PersistenceIDs) == 0x000000, "Member 'S2sController_ClientNotifyActorsToLoad::PersistenceIDs' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ClientOnAuthorityTransferRejected
// 0x0008 (0x0008 - 0x0000)
struct S2sController_ClientOnAuthorityTransferRejected final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_ClientOnAuthorityTransferRejected) == 0x000008, "Wrong alignment on S2sController_ClientOnAuthorityTransferRejected");
static_assert(sizeof(S2sController_ClientOnAuthorityTransferRejected) == 0x000008, "Wrong size on S2sController_ClientOnAuthorityTransferRejected");
static_assert(offsetof(S2sController_ClientOnAuthorityTransferRejected, PC) == 0x000000, "Member 'S2sController_ClientOnAuthorityTransferRejected::PC' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ClientOnProxyAuthorityTransferStart
// 0x0020 (0x0020 - 0x0000)
struct S2sController_ClientOnProxyAuthorityTransferStart final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAuthorityTransferParams               TransferParams;                                    // 0x0008(0x0014)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S2sController_ClientOnProxyAuthorityTransferStart) == 0x000008, "Wrong alignment on S2sController_ClientOnProxyAuthorityTransferStart");
static_assert(sizeof(S2sController_ClientOnProxyAuthorityTransferStart) == 0x000020, "Wrong size on S2sController_ClientOnProxyAuthorityTransferStart");
static_assert(offsetof(S2sController_ClientOnProxyAuthorityTransferStart, Actor) == 0x000000, "Member 'S2sController_ClientOnProxyAuthorityTransferStart::Actor' has a wrong offset!");
static_assert(offsetof(S2sController_ClientOnProxyAuthorityTransferStart, TransferParams) == 0x000008, "Member 'S2sController_ClientOnProxyAuthorityTransferStart::TransferParams' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ClientReplicateIgwObject
// 0x0010 (0x0010 - 0x0000)
struct S2sController_ClientReplicateIgwObject final
{
public:
	class FName                                   ObjectName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UIgwObject>                 Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_ClientReplicateIgwObject) == 0x000008, "Wrong alignment on S2sController_ClientReplicateIgwObject");
static_assert(sizeof(S2sController_ClientReplicateIgwObject) == 0x000010, "Wrong size on S2sController_ClientReplicateIgwObject");
static_assert(offsetof(S2sController_ClientReplicateIgwObject, ObjectName) == 0x000000, "Member 'S2sController_ClientReplicateIgwObject::ObjectName' has a wrong offset!");
static_assert(offsetof(S2sController_ClientReplicateIgwObject, Class_0) == 0x000008, "Member 'S2sController_ClientReplicateIgwObject::Class_0' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ClientSetControllerPawn
// 0x0040 (0x0040 - 0x0000)
struct S2sController_ClientSetControllerPawn final
{
public:
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_ClientSetControllerPawn) == 0x000008, "Wrong alignment on S2sController_ClientSetControllerPawn");
static_assert(sizeof(S2sController_ClientSetControllerPawn) == 0x000040, "Wrong size on S2sController_ClientSetControllerPawn");
static_assert(offsetof(S2sController_ClientSetControllerPawn, UniqueNetId) == 0x000000, "Member 'S2sController_ClientSetControllerPawn::UniqueNetId' has a wrong offset!");
static_assert(offsetof(S2sController_ClientSetControllerPawn, Pawn) == 0x000038, "Member 'S2sController_ClientSetControllerPawn::Pawn' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ClientStartPCAuthorityTransfer
// 0x0010 (0x0010 - 0x0000)
struct S2sController_ClientStartPCAuthorityTransfer final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpectator;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S2sController_ClientStartPCAuthorityTransfer) == 0x000008, "Wrong alignment on S2sController_ClientStartPCAuthorityTransfer");
static_assert(sizeof(S2sController_ClientStartPCAuthorityTransfer) == 0x000010, "Wrong size on S2sController_ClientStartPCAuthorityTransfer");
static_assert(offsetof(S2sController_ClientStartPCAuthorityTransfer, PC) == 0x000000, "Member 'S2sController_ClientStartPCAuthorityTransfer::PC' has a wrong offset!");
static_assert(offsetof(S2sController_ClientStartPCAuthorityTransfer, bSpectator) == 0x000008, "Member 'S2sController_ClientStartPCAuthorityTransfer::bSpectator' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.CloseS2S
// 0x0018 (0x0018 - 0x0000)
struct S2sController_CloseS2S final
{
public:
	class FString                                 Connection;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Direction;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S2sController_CloseS2S) == 0x000008, "Wrong alignment on S2sController_CloseS2S");
static_assert(sizeof(S2sController_CloseS2S) == 0x000018, "Wrong size on S2sController_CloseS2S");
static_assert(offsetof(S2sController_CloseS2S, Connection) == 0x000000, "Member 'S2sController_CloseS2S::Connection' has a wrong offset!");
static_assert(offsetof(S2sController_CloseS2S, Direction) == 0x000010, "Member 'S2sController_CloseS2S::Direction' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.OnRep_MapName
// 0x0020 (0x0020 - 0x0000)
struct S2sController_OnRep_MapName final
{
public:
	struct FSoftObjectPath                        OldMapName;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_OnRep_MapName) == 0x000008, "Wrong alignment on S2sController_OnRep_MapName");
static_assert(sizeof(S2sController_OnRep_MapName) == 0x000020, "Wrong size on S2sController_OnRep_MapName");
static_assert(offsetof(S2sController_OnRep_MapName, OldMapName) == 0x000000, "Member 'S2sController_OnRep_MapName::OldMapName' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.OnRep_UniqueNetIdMap
// 0x0058 (0x0058 - 0x0000)
struct S2sController_OnRep_UniqueNetIdMap final
{
public:
	struct FUniqueNetIdGUIDs                      OldFUniqueNetIdGUIDs;                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_OnRep_UniqueNetIdMap) == 0x000008, "Wrong alignment on S2sController_OnRep_UniqueNetIdMap");
static_assert(sizeof(S2sController_OnRep_UniqueNetIdMap) == 0x000058, "Wrong size on S2sController_OnRep_UniqueNetIdMap");
static_assert(offsetof(S2sController_OnRep_UniqueNetIdMap, OldFUniqueNetIdGUIDs) == 0x000000, "Member 'S2sController_OnRep_UniqueNetIdMap::OldFUniqueNetIdGUIDs' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.PerfCapture
// 0x0004 (0x0004 - 0x0000)
struct S2sController_PerfCapture final
{
public:
	int32                                         NumSeconds;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_PerfCapture) == 0x000004, "Wrong alignment on S2sController_PerfCapture");
static_assert(sizeof(S2sController_PerfCapture) == 0x000004, "Wrong size on S2sController_PerfCapture");
static_assert(offsetof(S2sController_PerfCapture, NumSeconds) == 0x000000, "Member 'S2sController_PerfCapture::NumSeconds' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ServerFailAuthorityTransfer
// 0x0010 (0x0010 - 0x0000)
struct S2sController_ServerFailAuthorityTransfer final
{
public:
	TArray<uint32>                                ActorNetGuids;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_ServerFailAuthorityTransfer) == 0x000008, "Wrong alignment on S2sController_ServerFailAuthorityTransfer");
static_assert(sizeof(S2sController_ServerFailAuthorityTransfer) == 0x000010, "Wrong size on S2sController_ServerFailAuthorityTransfer");
static_assert(offsetof(S2sController_ServerFailAuthorityTransfer, ActorNetGuids) == 0x000000, "Member 'S2sController_ServerFailAuthorityTransfer::ActorNetGuids' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ServerGrabActorAuthority
// 0x0008 (0x0008 - 0x0000)
struct S2sController_ServerGrabActorAuthority final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_ServerGrabActorAuthority) == 0x000008, "Wrong alignment on S2sController_ServerGrabActorAuthority");
static_assert(sizeof(S2sController_ServerGrabActorAuthority) == 0x000008, "Wrong size on S2sController_ServerGrabActorAuthority");
static_assert(offsetof(S2sController_ServerGrabActorAuthority, Actor) == 0x000000, "Member 'S2sController_ServerGrabActorAuthority::Actor' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ServerInitiateTeleportTo
// 0x0040 (0x0040 - 0x0000)
struct S2sController_ServerInitiateTeleportTo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DestRotation;                                      // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsATest;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoCheck;                                          // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S2sController_ServerInitiateTeleportTo) == 0x000008, "Wrong alignment on S2sController_ServerInitiateTeleportTo");
static_assert(sizeof(S2sController_ServerInitiateTeleportTo) == 0x000040, "Wrong size on S2sController_ServerInitiateTeleportTo");
static_assert(offsetof(S2sController_ServerInitiateTeleportTo, Actor) == 0x000000, "Member 'S2sController_ServerInitiateTeleportTo::Actor' has a wrong offset!");
static_assert(offsetof(S2sController_ServerInitiateTeleportTo, DestLocation) == 0x000008, "Member 'S2sController_ServerInitiateTeleportTo::DestLocation' has a wrong offset!");
static_assert(offsetof(S2sController_ServerInitiateTeleportTo, DestRotation) == 0x000020, "Member 'S2sController_ServerInitiateTeleportTo::DestRotation' has a wrong offset!");
static_assert(offsetof(S2sController_ServerInitiateTeleportTo, bIsATest) == 0x000038, "Member 'S2sController_ServerInitiateTeleportTo::bIsATest' has a wrong offset!");
static_assert(offsetof(S2sController_ServerInitiateTeleportTo, bNoCheck) == 0x000039, "Member 'S2sController_ServerInitiateTeleportTo::bNoCheck' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ServerRequestPlayerAuthorityTransfer
// 0x0018 (0x0018 - 0x0000)
struct S2sController_ServerRequestPlayerAuthorityTransfer final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerController*>              RelevantPlayers;                                   // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_ServerRequestPlayerAuthorityTransfer) == 0x000008, "Wrong alignment on S2sController_ServerRequestPlayerAuthorityTransfer");
static_assert(sizeof(S2sController_ServerRequestPlayerAuthorityTransfer) == 0x000018, "Wrong size on S2sController_ServerRequestPlayerAuthorityTransfer");
static_assert(offsetof(S2sController_ServerRequestPlayerAuthorityTransfer, PC) == 0x000000, "Member 'S2sController_ServerRequestPlayerAuthorityTransfer::PC' has a wrong offset!");
static_assert(offsetof(S2sController_ServerRequestPlayerAuthorityTransfer, RelevantPlayers) == 0x000008, "Member 'S2sController_ServerRequestPlayerAuthorityTransfer::RelevantPlayers' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ServerSetControllerActive
// 0x0010 (0x0010 - 0x0000)
struct S2sController_ServerSetControllerActive final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpectator;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S2sController_ServerSetControllerActive) == 0x000008, "Wrong alignment on S2sController_ServerSetControllerActive");
static_assert(sizeof(S2sController_ServerSetControllerActive) == 0x000010, "Wrong size on S2sController_ServerSetControllerActive");
static_assert(offsetof(S2sController_ServerSetControllerActive, PC) == 0x000000, "Member 'S2sController_ServerSetControllerActive::PC' has a wrong offset!");
static_assert(offsetof(S2sController_ServerSetControllerActive, bActive) == 0x000008, "Member 'S2sController_ServerSetControllerActive::bActive' has a wrong offset!");
static_assert(offsetof(S2sController_ServerSetControllerActive, bSpectator) == 0x000009, "Member 'S2sController_ServerSetControllerActive::bSpectator' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ServerStartAuthorityTransfer
// 0x0020 (0x0020 - 0x0000)
struct S2sController_ServerStartAuthorityTransfer final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAuthorityTransferParams               TransferParams;                                    // 0x0008(0x0014)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S2sController_ServerStartAuthorityTransfer) == 0x000008, "Wrong alignment on S2sController_ServerStartAuthorityTransfer");
static_assert(sizeof(S2sController_ServerStartAuthorityTransfer) == 0x000020, "Wrong size on S2sController_ServerStartAuthorityTransfer");
static_assert(offsetof(S2sController_ServerStartAuthorityTransfer, Actor) == 0x000000, "Member 'S2sController_ServerStartAuthorityTransfer::Actor' has a wrong offset!");
static_assert(offsetof(S2sController_ServerStartAuthorityTransfer, TransferParams) == 0x000008, "Member 'S2sController_ServerStartAuthorityTransfer::TransferParams' has a wrong offset!");

// Function InfiniteGameWorlds.S2sController.ServerExecRPC
// 0x0010 (0x0010 - 0x0000)
struct S2sController_ServerExecRPC final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S2sController_ServerExecRPC) == 0x000008, "Wrong alignment on S2sController_ServerExecRPC");
static_assert(sizeof(S2sController_ServerExecRPC) == 0x000010, "Wrong size on S2sController_ServerExecRPC");
static_assert(offsetof(S2sController_ServerExecRPC, Msg) == 0x000000, "Member 'S2sController_ServerExecRPC::Msg' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugComponent.OnRep_Actors
// 0x0180 (0x0180 - 0x0000)
struct IgwDebugComponent_OnRep_Actors final
{
public:
	struct FActorDebugMap                         OldActors;                                         // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugComponent_OnRep_Actors) == 0x000010, "Wrong alignment on IgwDebugComponent_OnRep_Actors");
static_assert(sizeof(IgwDebugComponent_OnRep_Actors) == 0x000180, "Wrong size on IgwDebugComponent_OnRep_Actors");
static_assert(offsetof(IgwDebugComponent_OnRep_Actors, OldActors) == 0x000000, "Member 'IgwDebugComponent_OnRep_Actors::OldActors' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugWidget.GetPawnOrSpectator
// 0x0010 (0x0010 - 0x0000)
struct IgwDebugWidget_GetPawnOrSpectator final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugWidget_GetPawnOrSpectator) == 0x000008, "Wrong alignment on IgwDebugWidget_GetPawnOrSpectator");
static_assert(sizeof(IgwDebugWidget_GetPawnOrSpectator) == 0x000010, "Wrong size on IgwDebugWidget_GetPawnOrSpectator");
static_assert(offsetof(IgwDebugWidget_GetPawnOrSpectator, PC) == 0x000000, "Member 'IgwDebugWidget_GetPawnOrSpectator::PC' has a wrong offset!");
static_assert(offsetof(IgwDebugWidget_GetPawnOrSpectator, ReturnValue) == 0x000008, "Member 'IgwDebugWidget_GetPawnOrSpectator::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugWidget.GetMapComboVisibility
// 0x0001 (0x0001 - 0x0000)
struct IgwDebugWidget_GetMapComboVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugWidget_GetMapComboVisibility) == 0x000001, "Wrong alignment on IgwDebugWidget_GetMapComboVisibility");
static_assert(sizeof(IgwDebugWidget_GetMapComboVisibility) == 0x000001, "Wrong size on IgwDebugWidget_GetMapComboVisibility");
static_assert(offsetof(IgwDebugWidget_GetMapComboVisibility, ReturnValue) == 0x000000, "Member 'IgwDebugWidget_GetMapComboVisibility::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugWidget.OnMapChanged
// 0x0018 (0x0018 - 0x0000)
struct IgwDebugWidget_OnMapChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugWidget_OnMapChanged) == 0x000008, "Wrong alignment on IgwDebugWidget_OnMapChanged");
static_assert(sizeof(IgwDebugWidget_OnMapChanged) == 0x000018, "Wrong size on IgwDebugWidget_OnMapChanged");
static_assert(offsetof(IgwDebugWidget_OnMapChanged, SelectedItem) == 0x000000, "Member 'IgwDebugWidget_OnMapChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(IgwDebugWidget_OnMapChanged, SelectionType) == 0x000010, "Member 'IgwDebugWidget_OnMapChanged::SelectionType' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerGridView.HasServerData
// 0x0001 (0x0001 - 0x0000)
struct IgwServerGridView_HasServerData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerGridView_HasServerData) == 0x000001, "Wrong alignment on IgwServerGridView_HasServerData");
static_assert(sizeof(IgwServerGridView_HasServerData) == 0x000001, "Wrong size on IgwServerGridView_HasServerData");
static_assert(offsetof(IgwServerGridView_HasServerData, ReturnValue) == 0x000000, "Member 'IgwServerGridView_HasServerData::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerGridView.MouseToWorld
// 0x00C0 (0x00C0 - 0x0000)
struct IgwServerGridView_MouseToWorld final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerGridView_MouseToWorld) == 0x000008, "Wrong alignment on IgwServerGridView_MouseToWorld");
static_assert(sizeof(IgwServerGridView_MouseToWorld) == 0x0000C0, "Wrong size on IgwServerGridView_MouseToWorld");
static_assert(offsetof(IgwServerGridView_MouseToWorld, Geometry) == 0x000000, "Member 'IgwServerGridView_MouseToWorld::Geometry' has a wrong offset!");
static_assert(offsetof(IgwServerGridView_MouseToWorld, PointerEvent) == 0x000038, "Member 'IgwServerGridView_MouseToWorld::PointerEvent' has a wrong offset!");
static_assert(offsetof(IgwServerGridView_MouseToWorld, ReturnValue) == 0x0000B0, "Member 'IgwServerGridView_MouseToWorld::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerGridView.PositionToWorld
// 0x0058 (0x0058 - 0x0000)
struct IgwServerGridView_PositionToWorld final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              position;                                          // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerGridView_PositionToWorld) == 0x000008, "Wrong alignment on IgwServerGridView_PositionToWorld");
static_assert(sizeof(IgwServerGridView_PositionToWorld) == 0x000058, "Wrong size on IgwServerGridView_PositionToWorld");
static_assert(offsetof(IgwServerGridView_PositionToWorld, Geometry) == 0x000000, "Member 'IgwServerGridView_PositionToWorld::Geometry' has a wrong offset!");
static_assert(offsetof(IgwServerGridView_PositionToWorld, position) == 0x000038, "Member 'IgwServerGridView_PositionToWorld::position' has a wrong offset!");
static_assert(offsetof(IgwServerGridView_PositionToWorld, ReturnValue) == 0x000048, "Member 'IgwServerGridView_PositionToWorld::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerGridView.ScrollGrid
// 0x0010 (0x0010 - 0x0000)
struct IgwServerGridView_ScrollGrid final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerGridView_ScrollGrid) == 0x000008, "Wrong alignment on IgwServerGridView_ScrollGrid");
static_assert(sizeof(IgwServerGridView_ScrollGrid) == 0x000010, "Wrong size on IgwServerGridView_ScrollGrid");
static_assert(offsetof(IgwServerGridView_ScrollGrid, Offset) == 0x000000, "Member 'IgwServerGridView_ScrollGrid::Offset' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerGridView.WorldToLocal
// 0x0028 (0x0028 - 0x0000)
struct IgwServerGridView_WorldToLocal final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerGridView_WorldToLocal) == 0x000008, "Wrong alignment on IgwServerGridView_WorldToLocal");
static_assert(sizeof(IgwServerGridView_WorldToLocal) == 0x000028, "Wrong size on IgwServerGridView_WorldToLocal");
static_assert(offsetof(IgwServerGridView_WorldToLocal, WorldLocation) == 0x000000, "Member 'IgwServerGridView_WorldToLocal::WorldLocation' has a wrong offset!");
static_assert(offsetof(IgwServerGridView_WorldToLocal, ReturnValue) == 0x000018, "Member 'IgwServerGridView_WorldToLocal::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerGridView.ZoomIn
// 0x0004 (0x0004 - 0x0000)
struct IgwServerGridView_ZoomIn final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerGridView_ZoomIn) == 0x000004, "Wrong alignment on IgwServerGridView_ZoomIn");
static_assert(sizeof(IgwServerGridView_ZoomIn) == 0x000004, "Wrong size on IgwServerGridView_ZoomIn");
static_assert(offsetof(IgwServerGridView_ZoomIn, Amount) == 0x000000, "Member 'IgwServerGridView_ZoomIn::Amount' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerGridView.ZoomOut
// 0x0004 (0x0004 - 0x0000)
struct IgwServerGridView_ZoomOut final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerGridView_ZoomOut) == 0x000004, "Wrong alignment on IgwServerGridView_ZoomOut");
static_assert(sizeof(IgwServerGridView_ZoomOut) == 0x000004, "Wrong size on IgwServerGridView_ZoomOut");
static_assert(offsetof(IgwServerGridView_ZoomOut, Amount) == 0x000000, "Member 'IgwServerGridView_ZoomOut::Amount' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerGridView.DrawPawns
// 0x0030 (0x0030 - 0x0000)
struct IgwServerGridView_DrawPawns final
{
public:
	struct FPaintContext                          Context;                                           // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerGridView_DrawPawns) == 0x000008, "Wrong alignment on IgwServerGridView_DrawPawns");
static_assert(sizeof(IgwServerGridView_DrawPawns) == 0x000030, "Wrong size on IgwServerGridView_DrawPawns");
static_assert(offsetof(IgwServerGridView_DrawPawns, Context) == 0x000000, "Member 'IgwServerGridView_DrawPawns::Context' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerGridView.GetCurrentMap
// 0x0020 (0x0020 - 0x0000)
struct IgwServerGridView_GetCurrentMap final
{
public:
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerGridView_GetCurrentMap) == 0x000008, "Wrong alignment on IgwServerGridView_GetCurrentMap");
static_assert(sizeof(IgwServerGridView_GetCurrentMap) == 0x000020, "Wrong size on IgwServerGridView_GetCurrentMap");
static_assert(offsetof(IgwServerGridView_GetCurrentMap, ReturnValue) == 0x000000, "Member 'IgwServerGridView_GetCurrentMap::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerGridView.GetZoomLevel
// 0x0004 (0x0004 - 0x0000)
struct IgwServerGridView_GetZoomLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerGridView_GetZoomLevel) == 0x000004, "Wrong alignment on IgwServerGridView_GetZoomLevel");
static_assert(sizeof(IgwServerGridView_GetZoomLevel) == 0x000004, "Wrong size on IgwServerGridView_GetZoomLevel");
static_assert(offsetof(IgwServerGridView_GetZoomLevel, ReturnValue) == 0x000000, "Member 'IgwServerGridView_GetZoomLevel::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerItem.ChangeTextFontSize
// 0x0010 (0x0010 - 0x0000)
struct IgwServerItem_ChangeTextFontSize final
{
public:
	class UTextBlock*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseSize;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwServerItem_ChangeTextFontSize) == 0x000008, "Wrong alignment on IgwServerItem_ChangeTextFontSize");
static_assert(sizeof(IgwServerItem_ChangeTextFontSize) == 0x000010, "Wrong size on IgwServerItem_ChangeTextFontSize");
static_assert(offsetof(IgwServerItem_ChangeTextFontSize, Widget) == 0x000000, "Member 'IgwServerItem_ChangeTextFontSize::Widget' has a wrong offset!");
static_assert(offsetof(IgwServerItem_ChangeTextFontSize, BaseSize) == 0x000008, "Member 'IgwServerItem_ChangeTextFontSize::BaseSize' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerItem.SetSize
// 0x0010 (0x0010 - 0x0000)
struct IgwServerItem_SetSize final
{
public:
	struct FVector2D                              NewSize;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerItem_SetSize) == 0x000008, "Wrong alignment on IgwServerItem_SetSize");
static_assert(sizeof(IgwServerItem_SetSize) == 0x000010, "Wrong size on IgwServerItem_SetSize");
static_assert(offsetof(IgwServerItem_SetSize, NewSize) == 0x000000, "Member 'IgwServerItem_SetSize::NewSize' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerItem.GetServerIdentifier
// 0x0018 (0x0018 - 0x0000)
struct IgwServerItem_GetServerIdentifier final
{
public:
	class FText                                   OutServerIdentifier;                               // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerItem_GetServerIdentifier) == 0x000008, "Wrong alignment on IgwServerItem_GetServerIdentifier");
static_assert(sizeof(IgwServerItem_GetServerIdentifier) == 0x000018, "Wrong size on IgwServerItem_GetServerIdentifier");
static_assert(offsetof(IgwServerItem_GetServerIdentifier, OutServerIdentifier) == 0x000000, "Member 'IgwServerItem_GetServerIdentifier::OutServerIdentifier' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerItem.GetServerIdText
// 0x0020 (0x0020 - 0x0000)
struct IgwServerItem_GetServerIdText final
{
public:
	class FText                                   OutServerId;                                       // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwServerItem_GetServerIdText) == 0x000008, "Wrong alignment on IgwServerItem_GetServerIdText");
static_assert(sizeof(IgwServerItem_GetServerIdText) == 0x000020, "Wrong size on IgwServerItem_GetServerIdText");
static_assert(offsetof(IgwServerItem_GetServerIdText, OutServerId) == 0x000000, "Member 'IgwServerItem_GetServerIdText::OutServerId' has a wrong offset!");
static_assert(offsetof(IgwServerItem_GetServerIdText, MaxLength) == 0x000018, "Member 'IgwServerItem_GetServerIdText::MaxLength' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerItem.GetZoomLevel
// 0x0004 (0x0004 - 0x0000)
struct IgwServerItem_GetZoomLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerItem_GetZoomLevel) == 0x000004, "Wrong alignment on IgwServerItem_GetZoomLevel");
static_assert(sizeof(IgwServerItem_GetZoomLevel) == 0x000004, "Wrong size on IgwServerItem_GetZoomLevel");
static_assert(offsetof(IgwServerItem_GetZoomLevel, ReturnValue) == 0x000000, "Member 'IgwServerItem_GetZoomLevel::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.CheckArtificialBorder
// 0x0028 (0x0028 - 0x0000)
struct IgwDebugFunctionLibrary_CheckArtificialBorder final
{
public:
	struct FVector                                GlobalLocation;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellSize;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_CheckArtificialBorder) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_CheckArtificialBorder");
static_assert(sizeof(IgwDebugFunctionLibrary_CheckArtificialBorder) == 0x000028, "Wrong size on IgwDebugFunctionLibrary_CheckArtificialBorder");
static_assert(offsetof(IgwDebugFunctionLibrary_CheckArtificialBorder, GlobalLocation) == 0x000000, "Member 'IgwDebugFunctionLibrary_CheckArtificialBorder::GlobalLocation' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_CheckArtificialBorder, Radius) == 0x000018, "Member 'IgwDebugFunctionLibrary_CheckArtificialBorder::Radius' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_CheckArtificialBorder, CellSize) == 0x00001C, "Member 'IgwDebugFunctionLibrary_CheckArtificialBorder::CellSize' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_CheckArtificialBorder, ReturnValue) == 0x000020, "Member 'IgwDebugFunctionLibrary_CheckArtificialBorder::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetActiveWorldBoundaries
// 0x0050 (0x0050 - 0x0000)
struct IgwDebugFunctionLibrary_GetActiveWorldBoundaries final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MapName;                                           // 0x0008(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetActiveWorldBoundaries) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetActiveWorldBoundaries");
static_assert(sizeof(IgwDebugFunctionLibrary_GetActiveWorldBoundaries) == 0x000050, "Wrong size on IgwDebugFunctionLibrary_GetActiveWorldBoundaries");
static_assert(offsetof(IgwDebugFunctionLibrary_GetActiveWorldBoundaries, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetActiveWorldBoundaries::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetActiveWorldBoundaries, MapName) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetActiveWorldBoundaries::MapName' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetActiveWorldBoundaries, ReturnValue) == 0x000028, "Member 'IgwDebugFunctionLibrary_GetActiveWorldBoundaries::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetConnectedServers
// 0x0078 (0x0078 - 0x0000)
struct IgwDebugFunctionLibrary_GetConnectedServers final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainServerIndex;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              MainPartitionId;                                   // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MainServerAddress;                                 // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FServerID>                        CurrentServers;                                    // 0x0028(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetConnectedServers) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetConnectedServers");
static_assert(sizeof(IgwDebugFunctionLibrary_GetConnectedServers) == 0x000078, "Wrong size on IgwDebugFunctionLibrary_GetConnectedServers");
static_assert(offsetof(IgwDebugFunctionLibrary_GetConnectedServers, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetConnectedServers::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetConnectedServers, MainServerIndex) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetConnectedServers::MainServerIndex' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetConnectedServers, MainPartitionId) == 0x000010, "Member 'IgwDebugFunctionLibrary_GetConnectedServers::MainPartitionId' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetConnectedServers, MainServerAddress) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetConnectedServers::MainServerAddress' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetConnectedServers, CurrentServers) == 0x000028, "Member 'IgwDebugFunctionLibrary_GetConnectedServers::CurrentServers' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetDimensionIndex
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetDimensionIndex final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetDimensionIndex) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetDimensionIndex");
static_assert(sizeof(IgwDebugFunctionLibrary_GetDimensionIndex) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetDimensionIndex");
static_assert(offsetof(IgwDebugFunctionLibrary_GetDimensionIndex, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetDimensionIndex::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetDimensionIndex, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetDimensionIndex::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetDimensionIndex, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetDimensionIndex::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetFarmActorInfo
// 0x0030 (0x0030 - 0x0000)
struct IgwDebugFunctionLibrary_GetFarmActorInfo final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActorGlobalID                         GID;                                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorDebugInfo*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetFarmActorInfo) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetFarmActorInfo");
static_assert(sizeof(IgwDebugFunctionLibrary_GetFarmActorInfo) == 0x000030, "Wrong size on IgwDebugFunctionLibrary_GetFarmActorInfo");
static_assert(offsetof(IgwDebugFunctionLibrary_GetFarmActorInfo, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetFarmActorInfo::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetFarmActorInfo, GID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetFarmActorInfo::GID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetFarmActorInfo, ReturnValue) == 0x000028, "Member 'IgwDebugFunctionLibrary_GetFarmActorInfo::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetFarmActorList
// 0x0018 (0x0018 - 0x0000)
struct IgwDebugFunctionLibrary_GetFarmActorList final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActorGlobalID>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetFarmActorList) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetFarmActorList");
static_assert(sizeof(IgwDebugFunctionLibrary_GetFarmActorList) == 0x000018, "Wrong size on IgwDebugFunctionLibrary_GetFarmActorList");
static_assert(offsetof(IgwDebugFunctionLibrary_GetFarmActorList, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetFarmActorList::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetFarmActorList, ReturnValue) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetFarmActorList::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetFarmMaps
// 0x0018 (0x0018 - 0x0000)
struct IgwDebugFunctionLibrary_GetFarmMaps final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetFarmMaps) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetFarmMaps");
static_assert(sizeof(IgwDebugFunctionLibrary_GetFarmMaps) == 0x000018, "Wrong size on IgwDebugFunctionLibrary_GetFarmMaps");
static_assert(offsetof(IgwDebugFunctionLibrary_GetFarmMaps, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetFarmMaps::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetFarmMaps, ReturnValue) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetFarmMaps::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetFarmNumActors
// 0x0010 (0x0010 - 0x0000)
struct IgwDebugFunctionLibrary_GetFarmNumActors final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetFarmNumActors) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetFarmNumActors");
static_assert(sizeof(IgwDebugFunctionLibrary_GetFarmNumActors) == 0x000010, "Wrong size on IgwDebugFunctionLibrary_GetFarmNumActors");
static_assert(offsetof(IgwDebugFunctionLibrary_GetFarmNumActors, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetFarmNumActors::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetFarmNumActors, ReturnValue) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetFarmNumActors::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetHumanReadableServerTraffic
// 0x0038 (0x0038 - 0x0000)
struct IgwDebugFunctionLibrary_GetHumanReadableServerTraffic final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InBytesStr;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutBytesStr;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetHumanReadableServerTraffic) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetHumanReadableServerTraffic");
static_assert(sizeof(IgwDebugFunctionLibrary_GetHumanReadableServerTraffic) == 0x000038, "Wrong size on IgwDebugFunctionLibrary_GetHumanReadableServerTraffic");
static_assert(offsetof(IgwDebugFunctionLibrary_GetHumanReadableServerTraffic, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetHumanReadableServerTraffic::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetHumanReadableServerTraffic, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetHumanReadableServerTraffic::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetHumanReadableServerTraffic, InBytesStr) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetHumanReadableServerTraffic::InBytesStr' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetHumanReadableServerTraffic, OutBytesStr) == 0x000028, "Member 'IgwDebugFunctionLibrary_GetHumanReadableServerTraffic::OutBytesStr' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetIGWDebugLevel
// 0x0010 (0x0010 - 0x0000)
struct IgwDebugFunctionLibrary_GetIGWDebugLevel final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIGWDebugLevel                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetIGWDebugLevel) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetIGWDebugLevel");
static_assert(sizeof(IgwDebugFunctionLibrary_GetIGWDebugLevel) == 0x000010, "Wrong size on IgwDebugFunctionLibrary_GetIGWDebugLevel");
static_assert(offsetof(IgwDebugFunctionLibrary_GetIGWDebugLevel, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetIGWDebugLevel::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetIGWDebugLevel, ReturnValue) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetIGWDebugLevel::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetNumConnectedServers
// 0x0010 (0x0010 - 0x0000)
struct IgwDebugFunctionLibrary_GetNumConnectedServers final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetNumConnectedServers) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetNumConnectedServers");
static_assert(sizeof(IgwDebugFunctionLibrary_GetNumConnectedServers) == 0x000010, "Wrong size on IgwDebugFunctionLibrary_GetNumConnectedServers");
static_assert(offsetof(IgwDebugFunctionLibrary_GetNumConnectedServers, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetNumConnectedServers::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetNumConnectedServers, ReturnValue) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetNumConnectedServers::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetNumStandByServers
// 0x0010 (0x0010 - 0x0000)
struct IgwDebugFunctionLibrary_GetNumStandByServers final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetNumStandByServers) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetNumStandByServers");
static_assert(sizeof(IgwDebugFunctionLibrary_GetNumStandByServers) == 0x000010, "Wrong size on IgwDebugFunctionLibrary_GetNumStandByServers");
static_assert(offsetof(IgwDebugFunctionLibrary_GetNumStandByServers, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetNumStandByServers::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetNumStandByServers, ReturnValue) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetNumStandByServers::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetPlayersConnectedToServer
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetPlayersConnectedToServer final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetPlayersConnectedToServer) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetPlayersConnectedToServer");
static_assert(sizeof(IgwDebugFunctionLibrary_GetPlayersConnectedToServer) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetPlayersConnectedToServer");
static_assert(offsetof(IgwDebugFunctionLibrary_GetPlayersConnectedToServer, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetPlayersConnectedToServer::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetPlayersConnectedToServer, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetPlayersConnectedToServer::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetPlayersConnectedToServer, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetPlayersConnectedToServer::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetPlayersInServer
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetPlayersInServer final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetPlayersInServer) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetPlayersInServer");
static_assert(sizeof(IgwDebugFunctionLibrary_GetPlayersInServer) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetPlayersInServer");
static_assert(offsetof(IgwDebugFunctionLibrary_GetPlayersInServer, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetPlayersInServer::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetPlayersInServer, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetPlayersInServer::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetPlayersInServer, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetPlayersInServer::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetS2SReplicatedActors
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetS2SReplicatedActors final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetS2SReplicatedActors) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetS2SReplicatedActors");
static_assert(sizeof(IgwDebugFunctionLibrary_GetS2SReplicatedActors) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetS2SReplicatedActors");
static_assert(offsetof(IgwDebugFunctionLibrary_GetS2SReplicatedActors, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetS2SReplicatedActors::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetS2SReplicatedActors, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetS2SReplicatedActors::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetS2SReplicatedActors, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetS2SReplicatedActors::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetS2SState
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetS2SState final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOut;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIn;                                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetS2SState) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetS2SState");
static_assert(sizeof(IgwDebugFunctionLibrary_GetS2SState) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetS2SState");
static_assert(offsetof(IgwDebugFunctionLibrary_GetS2SState, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetS2SState::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetS2SState, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetS2SState::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetS2SState, NumOut) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetS2SState::NumOut' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetS2SState, NumIn) == 0x00001C, "Member 'IgwDebugFunctionLibrary_GetS2SState::NumIn' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetServerBoundaries
// 0x0040 (0x0040 - 0x0000)
struct IgwDebugFunctionLibrary_GetServerBoundaries final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetServerBoundaries) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetServerBoundaries");
static_assert(sizeof(IgwDebugFunctionLibrary_GetServerBoundaries) == 0x000040, "Wrong size on IgwDebugFunctionLibrary_GetServerBoundaries");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerBoundaries, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetServerBoundaries::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerBoundaries, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetServerBoundaries::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerBoundaries, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetServerBoundaries::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetServerCPU
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetServerCPU final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetServerCPU) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetServerCPU");
static_assert(sizeof(IgwDebugFunctionLibrary_GetServerCPU) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetServerCPU");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerCPU, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetServerCPU::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerCPU, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetServerCPU::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerCPU, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetServerCPU::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetServerFps
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetServerFps final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetServerFps) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetServerFps");
static_assert(sizeof(IgwDebugFunctionLibrary_GetServerFps) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetServerFps");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerFps, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetServerFps::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerFps, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetServerFps::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerFps, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetServerFps::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetServerIDs
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetServerIDs final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeStandBy;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FServerID>                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetServerIDs) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetServerIDs");
static_assert(sizeof(IgwDebugFunctionLibrary_GetServerIDs) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetServerIDs");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerIDs, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetServerIDs::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerIDs, bIncludeStandBy) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetServerIDs::bIncludeStandBy' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerIDs, ReturnValue) == 0x000010, "Member 'IgwDebugFunctionLibrary_GetServerIDs::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetServerIndex
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetServerIndex final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetServerIndex) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetServerIndex");
static_assert(sizeof(IgwDebugFunctionLibrary_GetServerIndex) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetServerIndex");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerIndex, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetServerIndex::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerIndex, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetServerIndex::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerIndex, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetServerIndex::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetServerLevels
// 0x0028 (0x0028 - 0x0000)
struct IgwDebugFunctionLibrary_GetServerLevels final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetServerLevels) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetServerLevels");
static_assert(sizeof(IgwDebugFunctionLibrary_GetServerLevels) == 0x000028, "Wrong size on IgwDebugFunctionLibrary_GetServerLevels");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerLevels, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetServerLevels::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerLevels, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetServerLevels::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerLevels, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetServerLevels::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetServerMainAddress
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetServerMainAddress final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressWithPort;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetServerMainAddress) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetServerMainAddress");
static_assert(sizeof(IgwDebugFunctionLibrary_GetServerMainAddress) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetServerMainAddress");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerMainAddress, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetServerMainAddress::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerMainAddress, AddressWithPort) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetServerMainAddress::AddressWithPort' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerMainAddress, ReturnValue) == 0x000010, "Member 'IgwDebugFunctionLibrary_GetServerMainAddress::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetServerPartitionDefinition
// 0x0080 (0x0080 - 0x0000)
struct IgwDebugFunctionLibrary_GetServerPartitionDefinition final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartitionDefinition                   ReturnValue;                                       // 0x0018(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetServerPartitionDefinition) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetServerPartitionDefinition");
static_assert(sizeof(IgwDebugFunctionLibrary_GetServerPartitionDefinition) == 0x000080, "Wrong size on IgwDebugFunctionLibrary_GetServerPartitionDefinition");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerPartitionDefinition, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetServerPartitionDefinition::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerPartitionDefinition, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetServerPartitionDefinition::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerPartitionDefinition, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetServerPartitionDefinition::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetServerTraffic
// 0x0020 (0x0020 - 0x0000)
struct IgwDebugFunctionLibrary_GetServerTraffic final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InBytes;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutBytes;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetServerTraffic) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetServerTraffic");
static_assert(sizeof(IgwDebugFunctionLibrary_GetServerTraffic) == 0x000020, "Wrong size on IgwDebugFunctionLibrary_GetServerTraffic");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerTraffic, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetServerTraffic::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerTraffic, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetServerTraffic::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerTraffic, InBytes) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetServerTraffic::InBytes' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerTraffic, OutBytes) == 0x00001C, "Member 'IgwDebugFunctionLibrary_GetServerTraffic::OutBytes' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetServerWorldOffset
// 0x0028 (0x0028 - 0x0000)
struct IgwDebugFunctionLibrary_GetServerWorldOffset final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwDebugFunctionLibrary_GetServerWorldOffset) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetServerWorldOffset");
static_assert(sizeof(IgwDebugFunctionLibrary_GetServerWorldOffset) == 0x000028, "Wrong size on IgwDebugFunctionLibrary_GetServerWorldOffset");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerWorldOffset, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetServerWorldOffset::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerWorldOffset, ServerID) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetServerWorldOffset::ServerID' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetServerWorldOffset, ReturnValue) == 0x000018, "Member 'IgwDebugFunctionLibrary_GetServerWorldOffset::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetWorldBoundaries
// 0x0050 (0x0050 - 0x0000)
struct IgwDebugFunctionLibrary_GetWorldBoundaries final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MapName;                                           // 0x0008(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox2D                                 ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetWorldBoundaries) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetWorldBoundaries");
static_assert(sizeof(IgwDebugFunctionLibrary_GetWorldBoundaries) == 0x000050, "Wrong size on IgwDebugFunctionLibrary_GetWorldBoundaries");
static_assert(offsetof(IgwDebugFunctionLibrary_GetWorldBoundaries, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetWorldBoundaries::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetWorldBoundaries, MapName) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetWorldBoundaries::MapName' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetWorldBoundaries, ReturnValue) == 0x000028, "Member 'IgwDebugFunctionLibrary_GetWorldBoundaries::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwDebugFunctionLibrary.GetWorldSize
// 0x0038 (0x0038 - 0x0000)
struct IgwDebugFunctionLibrary_GetWorldSize final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MapName;                                           // 0x0008(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwDebugFunctionLibrary_GetWorldSize) == 0x000008, "Wrong alignment on IgwDebugFunctionLibrary_GetWorldSize");
static_assert(sizeof(IgwDebugFunctionLibrary_GetWorldSize) == 0x000038, "Wrong size on IgwDebugFunctionLibrary_GetWorldSize");
static_assert(offsetof(IgwDebugFunctionLibrary_GetWorldSize, WorldContext) == 0x000000, "Member 'IgwDebugFunctionLibrary_GetWorldSize::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetWorldSize, MapName) == 0x000008, "Member 'IgwDebugFunctionLibrary_GetWorldSize::MapName' has a wrong offset!");
static_assert(offsetof(IgwDebugFunctionLibrary_GetWorldSize, ReturnValue) == 0x000028, "Member 'IgwDebugFunctionLibrary_GetWorldSize::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.Conv_PartitionDefinitionToInt64
// 0x0070 (0x0070 - 0x0000)
struct IgwFunctionLibrary_Conv_PartitionDefinitionToInt64 final
{
public:
	struct FPartitionDefinition                   Value;                                             // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_Conv_PartitionDefinitionToInt64) == 0x000008, "Wrong alignment on IgwFunctionLibrary_Conv_PartitionDefinitionToInt64");
static_assert(sizeof(IgwFunctionLibrary_Conv_PartitionDefinitionToInt64) == 0x000070, "Wrong size on IgwFunctionLibrary_Conv_PartitionDefinitionToInt64");
static_assert(offsetof(IgwFunctionLibrary_Conv_PartitionDefinitionToInt64, Value) == 0x000000, "Member 'IgwFunctionLibrary_Conv_PartitionDefinitionToInt64::Value' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_Conv_PartitionDefinitionToInt64, ReturnValue) == 0x000068, "Member 'IgwFunctionLibrary_Conv_PartitionDefinitionToInt64::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.Conv_PartitionDefinitionToString
// 0x0078 (0x0078 - 0x0000)
struct IgwFunctionLibrary_Conv_PartitionDefinitionToString final
{
public:
	struct FPartitionDefinition                   Value;                                             // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_Conv_PartitionDefinitionToString) == 0x000008, "Wrong alignment on IgwFunctionLibrary_Conv_PartitionDefinitionToString");
static_assert(sizeof(IgwFunctionLibrary_Conv_PartitionDefinitionToString) == 0x000078, "Wrong size on IgwFunctionLibrary_Conv_PartitionDefinitionToString");
static_assert(offsetof(IgwFunctionLibrary_Conv_PartitionDefinitionToString, Value) == 0x000000, "Member 'IgwFunctionLibrary_Conv_PartitionDefinitionToString::Value' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_Conv_PartitionDefinitionToString, ReturnValue) == 0x000068, "Member 'IgwFunctionLibrary_Conv_PartitionDefinitionToString::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetActorComponentFromIgwActorComponentPointer
// 0x0010 (0x0010 - 0x0000)
struct IgwFunctionLibrary_GetActorComponentFromIgwActorComponentPointer final
{
public:
	struct FIgwActorComponentPointer              Ptr;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_GetActorComponentFromIgwActorComponentPointer) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetActorComponentFromIgwActorComponentPointer");
static_assert(sizeof(IgwFunctionLibrary_GetActorComponentFromIgwActorComponentPointer) == 0x000010, "Wrong size on IgwFunctionLibrary_GetActorComponentFromIgwActorComponentPointer");
static_assert(offsetof(IgwFunctionLibrary_GetActorComponentFromIgwActorComponentPointer, Ptr) == 0x000000, "Member 'IgwFunctionLibrary_GetActorComponentFromIgwActorComponentPointer::Ptr' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetActorComponentFromIgwActorComponentPointer, ReturnValue) == 0x000008, "Member 'IgwFunctionLibrary_GetActorComponentFromIgwActorComponentPointer::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetActorFromIgwActorPointer
// 0x0010 (0x0010 - 0x0000)
struct IgwFunctionLibrary_GetActorFromIgwActorPointer final
{
public:
	struct FIgwActorPointer                       Ptr;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_GetActorFromIgwActorPointer) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetActorFromIgwActorPointer");
static_assert(sizeof(IgwFunctionLibrary_GetActorFromIgwActorPointer) == 0x000010, "Wrong size on IgwFunctionLibrary_GetActorFromIgwActorPointer");
static_assert(offsetof(IgwFunctionLibrary_GetActorFromIgwActorPointer, Ptr) == 0x000000, "Member 'IgwFunctionLibrary_GetActorFromIgwActorPointer::Ptr' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetActorFromIgwActorPointer, ReturnValue) == 0x000008, "Member 'IgwFunctionLibrary_GetActorFromIgwActorPointer::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetActorServerID
// 0x0020 (0x0020 - 0x0000)
struct IgwFunctionLibrary_GetActorServerID final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_GetActorServerID) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetActorServerID");
static_assert(sizeof(IgwFunctionLibrary_GetActorServerID) == 0x000020, "Wrong size on IgwFunctionLibrary_GetActorServerID");
static_assert(offsetof(IgwFunctionLibrary_GetActorServerID, WorldContext) == 0x000000, "Member 'IgwFunctionLibrary_GetActorServerID::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetActorServerID, Actor) == 0x000008, "Member 'IgwFunctionLibrary_GetActorServerID::Actor' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetActorServerID, ReturnValue) == 0x000010, "Member 'IgwFunctionLibrary_GetActorServerID::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetActorServerIndex
// 0x0018 (0x0018 - 0x0000)
struct IgwFunctionLibrary_GetActorServerIndex final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwFunctionLibrary_GetActorServerIndex) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetActorServerIndex");
static_assert(sizeof(IgwFunctionLibrary_GetActorServerIndex) == 0x000018, "Wrong size on IgwFunctionLibrary_GetActorServerIndex");
static_assert(offsetof(IgwFunctionLibrary_GetActorServerIndex, WorldContext) == 0x000000, "Member 'IgwFunctionLibrary_GetActorServerIndex::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetActorServerIndex, Actor) == 0x000008, "Member 'IgwFunctionLibrary_GetActorServerIndex::Actor' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetActorServerIndex, ReturnValue) == 0x000010, "Member 'IgwFunctionLibrary_GetActorServerIndex::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetC2SState
// 0x0030 (0x0030 - 0x0000)
struct IgwFunctionLibrary_GetC2SState final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLatency;                                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutLastError;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_GetC2SState) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetC2SState");
static_assert(sizeof(IgwFunctionLibrary_GetC2SState) == 0x000030, "Wrong size on IgwFunctionLibrary_GetC2SState");
static_assert(offsetof(IgwFunctionLibrary_GetC2SState, WorldContext) == 0x000000, "Member 'IgwFunctionLibrary_GetC2SState::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetC2SState, ServerID) == 0x000008, "Member 'IgwFunctionLibrary_GetC2SState::ServerID' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetC2SState, OutLatency) == 0x000018, "Member 'IgwFunctionLibrary_GetC2SState::OutLatency' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetC2SState, OutLastError) == 0x000020, "Member 'IgwFunctionLibrary_GetC2SState::OutLastError' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetClientControllerForActor
// 0x0010 (0x0010 - 0x0000)
struct IgwFunctionLibrary_GetClientControllerForActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AS2sController*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_GetClientControllerForActor) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetClientControllerForActor");
static_assert(sizeof(IgwFunctionLibrary_GetClientControllerForActor) == 0x000010, "Wrong size on IgwFunctionLibrary_GetClientControllerForActor");
static_assert(offsetof(IgwFunctionLibrary_GetClientControllerForActor, Actor) == 0x000000, "Member 'IgwFunctionLibrary_GetClientControllerForActor::Actor' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetClientControllerForActor, ReturnValue) == 0x000008, "Member 'IgwFunctionLibrary_GetClientControllerForActor::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetCurrentServerID
// 0x0018 (0x0018 - 0x0000)
struct IgwFunctionLibrary_GetCurrentServerID final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_GetCurrentServerID) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetCurrentServerID");
static_assert(sizeof(IgwFunctionLibrary_GetCurrentServerID) == 0x000018, "Wrong size on IgwFunctionLibrary_GetCurrentServerID");
static_assert(offsetof(IgwFunctionLibrary_GetCurrentServerID, WorldContext) == 0x000000, "Member 'IgwFunctionLibrary_GetCurrentServerID::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetCurrentServerID, ReturnValue) == 0x000008, "Member 'IgwFunctionLibrary_GetCurrentServerID::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetPlayerAbsoluteLocation
// 0x0018 (0x0018 - 0x0000)
struct IgwFunctionLibrary_GetPlayerAbsoluteLocation final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_GetPlayerAbsoluteLocation) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetPlayerAbsoluteLocation");
static_assert(sizeof(IgwFunctionLibrary_GetPlayerAbsoluteLocation) == 0x000018, "Wrong size on IgwFunctionLibrary_GetPlayerAbsoluteLocation");
static_assert(offsetof(IgwFunctionLibrary_GetPlayerAbsoluteLocation, WorldContext) == 0x000000, "Member 'IgwFunctionLibrary_GetPlayerAbsoluteLocation::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetPlayerAbsoluteLocation, ReturnValue) == 0x000008, "Member 'IgwFunctionLibrary_GetPlayerAbsoluteLocation::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetServerColor
// 0x0030 (0x0030 - 0x0000)
struct IgwFunctionLibrary_GetServerColor final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ServerID;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ReturnValue;                                       // 0x0018(0x0014)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwFunctionLibrary_GetServerColor) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetServerColor");
static_assert(sizeof(IgwFunctionLibrary_GetServerColor) == 0x000030, "Wrong size on IgwFunctionLibrary_GetServerColor");
static_assert(offsetof(IgwFunctionLibrary_GetServerColor, WorldContext) == 0x000000, "Member 'IgwFunctionLibrary_GetServerColor::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetServerColor, ServerID) == 0x000008, "Member 'IgwFunctionLibrary_GetServerColor::ServerID' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetServerColor, ReturnValue) == 0x000018, "Member 'IgwFunctionLibrary_GetServerColor::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetServerID
// 0x0018 (0x0018 - 0x0000)
struct IgwFunctionLibrary_GetServerID final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerID                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_GetServerID) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetServerID");
static_assert(sizeof(IgwFunctionLibrary_GetServerID) == 0x000018, "Wrong size on IgwFunctionLibrary_GetServerID");
static_assert(offsetof(IgwFunctionLibrary_GetServerID, WorldContext) == 0x000000, "Member 'IgwFunctionLibrary_GetServerID::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetServerID, ReturnValue) == 0x000008, "Member 'IgwFunctionLibrary_GetServerID::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.GetServerIDFromLocation
// 0x0038 (0x0038 - 0x0000)
struct IgwFunctionLibrary_GetServerIDFromLocation final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsOwnServer;                                   // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FServerID                              ReturnValue;                                       // 0x0024(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwFunctionLibrary_GetServerIDFromLocation) == 0x000008, "Wrong alignment on IgwFunctionLibrary_GetServerIDFromLocation");
static_assert(sizeof(IgwFunctionLibrary_GetServerIDFromLocation) == 0x000038, "Wrong size on IgwFunctionLibrary_GetServerIDFromLocation");
static_assert(offsetof(IgwFunctionLibrary_GetServerIDFromLocation, WorldContext) == 0x000000, "Member 'IgwFunctionLibrary_GetServerIDFromLocation::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetServerIDFromLocation, LocalLocation) == 0x000008, "Member 'IgwFunctionLibrary_GetServerIDFromLocation::LocalLocation' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetServerIDFromLocation, bOutIsOwnServer) == 0x000020, "Member 'IgwFunctionLibrary_GetServerIDFromLocation::bOutIsOwnServer' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_GetServerIDFromLocation, ReturnValue) == 0x000024, "Member 'IgwFunctionLibrary_GetServerIDFromLocation::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.IsActorWithinServerBoundaries
// 0x0010 (0x0010 - 0x0000)
struct IgwFunctionLibrary_IsActorWithinServerBoundaries final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwFunctionLibrary_IsActorWithinServerBoundaries) == 0x000008, "Wrong alignment on IgwFunctionLibrary_IsActorWithinServerBoundaries");
static_assert(sizeof(IgwFunctionLibrary_IsActorWithinServerBoundaries) == 0x000010, "Wrong size on IgwFunctionLibrary_IsActorWithinServerBoundaries");
static_assert(offsetof(IgwFunctionLibrary_IsActorWithinServerBoundaries, Actor) == 0x000000, "Member 'IgwFunctionLibrary_IsActorWithinServerBoundaries::Actor' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_IsActorWithinServerBoundaries, ReturnValue) == 0x000008, "Member 'IgwFunctionLibrary_IsActorWithinServerBoundaries::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.IsLocationWithinServerBoundaries
// 0x0028 (0x0028 - 0x0000)
struct IgwFunctionLibrary_IsLocationWithinServerBoundaries final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IgwFunctionLibrary_IsLocationWithinServerBoundaries) == 0x000008, "Wrong alignment on IgwFunctionLibrary_IsLocationWithinServerBoundaries");
static_assert(sizeof(IgwFunctionLibrary_IsLocationWithinServerBoundaries) == 0x000028, "Wrong size on IgwFunctionLibrary_IsLocationWithinServerBoundaries");
static_assert(offsetof(IgwFunctionLibrary_IsLocationWithinServerBoundaries, WorldContext) == 0x000000, "Member 'IgwFunctionLibrary_IsLocationWithinServerBoundaries::WorldContext' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_IsLocationWithinServerBoundaries, LocalLocation) == 0x000008, "Member 'IgwFunctionLibrary_IsLocationWithinServerBoundaries::LocalLocation' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_IsLocationWithinServerBoundaries, ReturnValue) == 0x000020, "Member 'IgwFunctionLibrary_IsLocationWithinServerBoundaries::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.MakeActorGlobalID
// 0x0028 (0x0028 - 0x0000)
struct IgwFunctionLibrary_MakeActorGlobalID final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActorGlobalID                         ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_MakeActorGlobalID) == 0x000008, "Wrong alignment on IgwFunctionLibrary_MakeActorGlobalID");
static_assert(sizeof(IgwFunctionLibrary_MakeActorGlobalID) == 0x000028, "Wrong size on IgwFunctionLibrary_MakeActorGlobalID");
static_assert(offsetof(IgwFunctionLibrary_MakeActorGlobalID, Actor) == 0x000000, "Member 'IgwFunctionLibrary_MakeActorGlobalID::Actor' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_MakeActorGlobalID, ReturnValue) == 0x000008, "Member 'IgwFunctionLibrary_MakeActorGlobalID::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.MakeIgwActorComponentPointer
// 0x0010 (0x0010 - 0x0000)
struct IgwFunctionLibrary_MakeIgwActorComponentPointer final
{
public:
	class UActorComponent*                        Ptr;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIgwActorComponentPointer              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_MakeIgwActorComponentPointer) == 0x000008, "Wrong alignment on IgwFunctionLibrary_MakeIgwActorComponentPointer");
static_assert(sizeof(IgwFunctionLibrary_MakeIgwActorComponentPointer) == 0x000010, "Wrong size on IgwFunctionLibrary_MakeIgwActorComponentPointer");
static_assert(offsetof(IgwFunctionLibrary_MakeIgwActorComponentPointer, Ptr) == 0x000000, "Member 'IgwFunctionLibrary_MakeIgwActorComponentPointer::Ptr' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_MakeIgwActorComponentPointer, ReturnValue) == 0x000008, "Member 'IgwFunctionLibrary_MakeIgwActorComponentPointer::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwFunctionLibrary.MakeIgwActorPointer
// 0x0010 (0x0010 - 0x0000)
struct IgwFunctionLibrary_MakeIgwActorPointer final
{
public:
	class AActor*                                 Ptr;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIgwActorPointer                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwFunctionLibrary_MakeIgwActorPointer) == 0x000008, "Wrong alignment on IgwFunctionLibrary_MakeIgwActorPointer");
static_assert(sizeof(IgwFunctionLibrary_MakeIgwActorPointer) == 0x000010, "Wrong size on IgwFunctionLibrary_MakeIgwActorPointer");
static_assert(offsetof(IgwFunctionLibrary_MakeIgwActorPointer, Ptr) == 0x000000, "Member 'IgwFunctionLibrary_MakeIgwActorPointer::Ptr' has a wrong offset!");
static_assert(offsetof(IgwFunctionLibrary_MakeIgwActorPointer, ReturnValue) == 0x000008, "Member 'IgwFunctionLibrary_MakeIgwActorPointer::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwObject.ClientFlushAuthorityTransfer
// 0x0028 (0x0028 - 0x0000)
struct IgwObject_ClientFlushAuthorityTransfer final
{
public:
	struct FActorStatePacket                      StatePacket;                                       // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwObject_ClientFlushAuthorityTransfer) == 0x000008, "Wrong alignment on IgwObject_ClientFlushAuthorityTransfer");
static_assert(sizeof(IgwObject_ClientFlushAuthorityTransfer) == 0x000028, "Wrong size on IgwObject_ClientFlushAuthorityTransfer");
static_assert(offsetof(IgwObject_ClientFlushAuthorityTransfer, StatePacket) == 0x000000, "Member 'IgwObject_ClientFlushAuthorityTransfer::StatePacket' has a wrong offset!");

// Function InfiniteGameWorlds.IgwObject.MulticastTransferringTo
// 0x0010 (0x0010 - 0x0000)
struct IgwObject_MulticastTransferringTo final
{
public:
	struct FServerID                              ServerID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwObject_MulticastTransferringTo) == 0x000004, "Wrong alignment on IgwObject_MulticastTransferringTo");
static_assert(sizeof(IgwObject_MulticastTransferringTo) == 0x000010, "Wrong size on IgwObject_MulticastTransferringTo");
static_assert(offsetof(IgwObject_MulticastTransferringTo, ServerID) == 0x000000, "Member 'IgwObject_MulticastTransferringTo::ServerID' has a wrong offset!");

// Function InfiniteGameWorlds.IgwObject.ServerAddServer
// 0x0010 (0x0010 - 0x0000)
struct IgwObject_ServerAddServer final
{
public:
	struct FServerID                              ServerID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwObject_ServerAddServer) == 0x000004, "Wrong alignment on IgwObject_ServerAddServer");
static_assert(sizeof(IgwObject_ServerAddServer) == 0x000010, "Wrong size on IgwObject_ServerAddServer");
static_assert(offsetof(IgwObject_ServerAddServer, ServerID) == 0x000000, "Member 'IgwObject_ServerAddServer::ServerID' has a wrong offset!");

// Function InfiniteGameWorlds.IgwObject.ServerRemoveServer
// 0x0010 (0x0010 - 0x0000)
struct IgwObject_ServerRemoveServer final
{
public:
	struct FServerID                              ServerID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwObject_ServerRemoveServer) == 0x000004, "Wrong alignment on IgwObject_ServerRemoveServer");
static_assert(sizeof(IgwObject_ServerRemoveServer) == 0x000010, "Wrong size on IgwObject_ServerRemoveServer");
static_assert(offsetof(IgwObject_ServerRemoveServer, ServerID) == 0x000000, "Member 'IgwObject_ServerRemoveServer::ServerID' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerConnectionComponent.GetServers
// 0x0010 (0x0010 - 0x0000)
struct IgwServerConnectionComponent_GetServers final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerConnectionComponent_GetServers) == 0x000008, "Wrong alignment on IgwServerConnectionComponent_GetServers");
static_assert(sizeof(IgwServerConnectionComponent_GetServers) == 0x000010, "Wrong size on IgwServerConnectionComponent_GetServers");
static_assert(offsetof(IgwServerConnectionComponent_GetServers, ReturnValue) == 0x000000, "Member 'IgwServerConnectionComponent_GetServers::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerConnectionComponent.GetWorldOffset
// 0x0018 (0x0018 - 0x0000)
struct IgwServerConnectionComponent_GetWorldOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerConnectionComponent_GetWorldOffset) == 0x000008, "Wrong alignment on IgwServerConnectionComponent_GetWorldOffset");
static_assert(sizeof(IgwServerConnectionComponent_GetWorldOffset) == 0x000018, "Wrong size on IgwServerConnectionComponent_GetWorldOffset");
static_assert(offsetof(IgwServerConnectionComponent_GetWorldOffset, ReturnValue) == 0x000000, "Member 'IgwServerConnectionComponent_GetWorldOffset::ReturnValue' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerConnectionComponent.OnRep_CurrentWorldOffset
// 0x0018 (0x0018 - 0x0000)
struct IgwServerConnectionComponent_OnRep_CurrentWorldOffset final
{
public:
	struct FVector                                OldOffset;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerConnectionComponent_OnRep_CurrentWorldOffset) == 0x000008, "Wrong alignment on IgwServerConnectionComponent_OnRep_CurrentWorldOffset");
static_assert(sizeof(IgwServerConnectionComponent_OnRep_CurrentWorldOffset) == 0x000018, "Wrong size on IgwServerConnectionComponent_OnRep_CurrentWorldOffset");
static_assert(offsetof(IgwServerConnectionComponent_OnRep_CurrentWorldOffset, OldOffset) == 0x000000, "Member 'IgwServerConnectionComponent_OnRep_CurrentWorldOffset::OldOffset' has a wrong offset!");

// Function InfiniteGameWorlds.IgwServerConnectionComponent.ServerSetDebugLevel
// 0x0004 (0x0004 - 0x0000)
struct IgwServerConnectionComponent_ServerSetDebugLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IgwServerConnectionComponent_ServerSetDebugLevel) == 0x000004, "Wrong alignment on IgwServerConnectionComponent_ServerSetDebugLevel");
static_assert(sizeof(IgwServerConnectionComponent_ServerSetDebugLevel) == 0x000004, "Wrong size on IgwServerConnectionComponent_ServerSetDebugLevel");
static_assert(offsetof(IgwServerConnectionComponent_ServerSetDebugLevel, Level) == 0x000000, "Member 'IgwServerConnectionComponent_ServerSetDebugLevel::Level' has a wrong offset!");

// Function InfiniteGameWorlds.ServerDebugInfo.OnRep_ServerDebugData
// 0x00A0 (0x00A0 - 0x0000)
struct ServerDebugInfo_OnRep_ServerDebugData final
{
public:
	struct FServerDebugData                       OldData;                                           // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerDebugInfo_OnRep_ServerDebugData) == 0x000008, "Wrong alignment on ServerDebugInfo_OnRep_ServerDebugData");
static_assert(sizeof(ServerDebugInfo_OnRep_ServerDebugData) == 0x0000A0, "Wrong size on ServerDebugInfo_OnRep_ServerDebugData");
static_assert(offsetof(ServerDebugInfo_OnRep_ServerDebugData, OldData) == 0x000000, "Member 'ServerDebugInfo_OnRep_ServerDebugData::OldData' has a wrong offset!");

}

