#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mercuna3DMovement

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct Mercuna3DMovement.Mercuna3DMovementAccelerations
// 0x000C (0x000C - 0x0000)
struct FMercuna3DMovementAccelerations final
{
public:
	float                                         Forward;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Backward;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sideways;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMercuna3DMovementAccelerations) == 0x000004, "Wrong alignment on FMercuna3DMovementAccelerations");
static_assert(sizeof(FMercuna3DMovementAccelerations) == 0x00000C, "Wrong size on FMercuna3DMovementAccelerations");
static_assert(offsetof(FMercuna3DMovementAccelerations, Forward) == 0x000000, "Member 'FMercuna3DMovementAccelerations::Forward' has a wrong offset!");
static_assert(offsetof(FMercuna3DMovementAccelerations, Backward) == 0x000004, "Member 'FMercuna3DMovementAccelerations::Backward' has a wrong offset!");
static_assert(offsetof(FMercuna3DMovementAccelerations, Sideways) == 0x000008, "Member 'FMercuna3DMovementAccelerations::Sideways' has a wrong offset!");

// ScriptStruct Mercuna3DMovement.Mercuna3DMovementWorldAccelerations
// 0x0008 (0x0008 - 0x0000)
struct FMercuna3DMovementWorldAccelerations final
{
public:
	float                                         Upward;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Downward;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMercuna3DMovementWorldAccelerations) == 0x000004, "Wrong alignment on FMercuna3DMovementWorldAccelerations");
static_assert(sizeof(FMercuna3DMovementWorldAccelerations) == 0x000008, "Wrong size on FMercuna3DMovementWorldAccelerations");
static_assert(offsetof(FMercuna3DMovementWorldAccelerations, Upward) == 0x000000, "Member 'FMercuna3DMovementWorldAccelerations::Upward' has a wrong offset!");
static_assert(offsetof(FMercuna3DMovementWorldAccelerations, Downward) == 0x000004, "Member 'FMercuna3DMovementWorldAccelerations::Downward' has a wrong offset!");

// ScriptStruct Mercuna3DMovement.Mercuna3DMovementProperties
// 0x002C (0x002C - 0x0000)
struct FMercuna3DMovementProperties final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMercuna3DMovementAccelerations        MaxAccelerations;                                  // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxPitchRate;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYawRate;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRollRate;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngAccel;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWorldAccelerationLimits;                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMercuna3DMovementWorldAccelerations   WorldAccelerationLimits;                           // 0x0024(0x0008)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMercuna3DMovementProperties) == 0x000004, "Wrong alignment on FMercuna3DMovementProperties");
static_assert(sizeof(FMercuna3DMovementProperties) == 0x00002C, "Wrong size on FMercuna3DMovementProperties");
static_assert(offsetof(FMercuna3DMovementProperties, MaxSpeed) == 0x000000, "Member 'FMercuna3DMovementProperties::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FMercuna3DMovementProperties, MaxAccelerations) == 0x000004, "Member 'FMercuna3DMovementProperties::MaxAccelerations' has a wrong offset!");
static_assert(offsetof(FMercuna3DMovementProperties, MaxPitchRate) == 0x000010, "Member 'FMercuna3DMovementProperties::MaxPitchRate' has a wrong offset!");
static_assert(offsetof(FMercuna3DMovementProperties, MaxYawRate) == 0x000014, "Member 'FMercuna3DMovementProperties::MaxYawRate' has a wrong offset!");
static_assert(offsetof(FMercuna3DMovementProperties, MaxRollRate) == 0x000018, "Member 'FMercuna3DMovementProperties::MaxRollRate' has a wrong offset!");
static_assert(offsetof(FMercuna3DMovementProperties, MaxAngAccel) == 0x00001C, "Member 'FMercuna3DMovementProperties::MaxAngAccel' has a wrong offset!");
static_assert(offsetof(FMercuna3DMovementProperties, bEnableWorldAccelerationLimits) == 0x000020, "Member 'FMercuna3DMovementProperties::bEnableWorldAccelerationLimits' has a wrong offset!");
static_assert(offsetof(FMercuna3DMovementProperties, WorldAccelerationLimits) == 0x000024, "Member 'FMercuna3DMovementProperties::WorldAccelerationLimits' has a wrong offset!");

}

