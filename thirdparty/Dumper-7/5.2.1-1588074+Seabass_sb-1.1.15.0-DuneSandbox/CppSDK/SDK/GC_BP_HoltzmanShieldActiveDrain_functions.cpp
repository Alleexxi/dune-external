#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_BP_HoltzmanShieldActiveDrain

#include "Basic.hpp"

#include "GC_BP_HoltzmanShieldActiveDrain_classes.hpp"
#include "GC_BP_HoltzmanShieldActiveDrain_parameters.hpp"


namespace SDK
{

// Function GC_BP_HoltzmanShieldActiveDrain.GC_BP_HoltzmanShieldActiveDrain_C.ExecuteUbergraph_GC_BP_HoltzmanShieldActiveDrain
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_HoltzmanShieldActiveDrain_C::ExecuteUbergraph_GC_BP_HoltzmanShieldActiveDrain(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_HoltzmanShieldActiveDrain_C", "ExecuteUbergraph_GC_BP_HoltzmanShieldActiveDrain");

	Params::GC_BP_HoltzmanShieldActiveDrain_C_ExecuteUbergraph_GC_BP_HoltzmanShieldActiveDrain Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_BP_HoltzmanShieldActiveDrain.GC_BP_HoltzmanShieldActiveDrain_C.Get State Change Reason from Gameplay Tags
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTagContainer&     GameplayTags                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EShieldStateChangeReason*               ChangeReason                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_BP_HoltzmanShieldActiveDrain_C::Get_State_Change_Reason_from_Gameplay_Tags(const struct FGameplayTagContainer& GameplayTags, EShieldStateChangeReason* ChangeReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_HoltzmanShieldActiveDrain_C", "Get State Change Reason from Gameplay Tags");

	Params::GC_BP_HoltzmanShieldActiveDrain_C_Get_State_Change_Reason_from_Gameplay_Tags Parms{};

	Parms.GameplayTags = std::move(GameplayTags);

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeReason != nullptr)
		*ChangeReason = Parms.ChangeReason;
}


// Function GC_BP_HoltzmanShieldActiveDrain.GC_BP_HoltzmanShieldActiveDrain_C.K2_OnReset
// (Event, Public, BlueprintEvent)

void AGC_BP_HoltzmanShieldActiveDrain_C::K2_OnReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_HoltzmanShieldActiveDrain_C", "K2_OnReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_BP_HoltzmanShieldActiveDrain.GC_BP_HoltzmanShieldActiveDrain_C.OnExecute
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MyTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayCueParameters&    Parameters                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AGC_BP_HoltzmanShieldActiveDrain_C::OnExecute(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_HoltzmanShieldActiveDrain_C", "OnExecute");

	Params::GC_BP_HoltzmanShieldActiveDrain_C_OnExecute Parms{};

	Parms.MyTarget = MyTarget;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GC_BP_HoltzmanShieldActiveDrain.GC_BP_HoltzmanShieldActiveDrain_C.OnRemove
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MyTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayCueParameters&    Parameters                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AGC_BP_HoltzmanShieldActiveDrain_C::OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_HoltzmanShieldActiveDrain_C", "OnRemove");

	Params::GC_BP_HoltzmanShieldActiveDrain_C_OnRemove Parms{};

	Parms.MyTarget = MyTarget;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GC_BP_HoltzmanShieldActiveDrain.GC_BP_HoltzmanShieldActiveDrain_C.WhileActive
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MyTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayCueParameters&    Parameters                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AGC_BP_HoltzmanShieldActiveDrain_C::WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_BP_HoltzmanShieldActiveDrain_C", "WhileActive");

	Params::GC_BP_HoltzmanShieldActiveDrain_C_WhileActive Parms{};

	Parms.MyTarget = MyTarget;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

