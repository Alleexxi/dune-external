#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ResourceNode_MinigameBase

#include "Basic.hpp"

#include "F_FractureLineGameplayGroup_structs.hpp"
#include "Engine_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C
// 0x0030 (0x0698 - 0x0668)
class ABP_ResourceNode_MinigameBase_C : public AResourceNode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0668(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FF_FractureLineGameplayGroup>   FractureLineGameplayGroups;                        // 0x0670(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIsBeingScanned;                                   // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ScanAnimStartPos;                                  // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScanAnimEndPos;                                    // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateScannableComponentsCustomDepth();
	void ReceiveBeginPlay();
	void IsParentDestroyed(const struct FF_FractureLineGameplayGroup& Group, bool* IsDestroyed);
	void GetFractureLineGroupFromGroupId(class FName Group_Id, struct FF_FractureLineGameplayGroup* Fracture_Line_Group);
	void GetComponentsToReactToScan(TArray<class USceneComponent*>* SceneComponents);
	void ExecuteUbergraph_BP_ResourceNode_MinigameBase(int32 EntryPoint);
	void BPOnNodeScanned();
	void BPOnFractureLineSegmentActivated(const int32 SegmentIndex);
	void BPGetGroupToScan(const class AActor* InScanningActor, class FName* OutGroupId);
	void BPGetActiveFractureLines(TArray<uint8>* OutFractureLineIndices);

	void BPCalculateImpactForceFeedback(const bool bIsHittingFractureLine, float* OutLeftLargeMotorIntensity, float* OutLeftSmallMotorIntensity, float* OutRightLargeMotorIntensity, float* OutRightSmallMotorIntensity) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ResourceNode_MinigameBase_C">();
	}
	static class ABP_ResourceNode_MinigameBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ResourceNode_MinigameBase_C>();
	}
};
static_assert(alignof(ABP_ResourceNode_MinigameBase_C) == 0x000008, "Wrong alignment on ABP_ResourceNode_MinigameBase_C");
static_assert(sizeof(ABP_ResourceNode_MinigameBase_C) == 0x000698, "Wrong size on ABP_ResourceNode_MinigameBase_C");
static_assert(offsetof(ABP_ResourceNode_MinigameBase_C, UberGraphFrame) == 0x000668, "Member 'ABP_ResourceNode_MinigameBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ResourceNode_MinigameBase_C, FractureLineGameplayGroups) == 0x000670, "Member 'ABP_ResourceNode_MinigameBase_C::FractureLineGameplayGroups' has a wrong offset!");
static_assert(offsetof(ABP_ResourceNode_MinigameBase_C, bIsBeingScanned) == 0x000680, "Member 'ABP_ResourceNode_MinigameBase_C::bIsBeingScanned' has a wrong offset!");
static_assert(offsetof(ABP_ResourceNode_MinigameBase_C, ScanAnimStartPos) == 0x000688, "Member 'ABP_ResourceNode_MinigameBase_C::ScanAnimStartPos' has a wrong offset!");
static_assert(offsetof(ABP_ResourceNode_MinigameBase_C, ScanAnimEndPos) == 0x000690, "Member 'ABP_ResourceNode_MinigameBase_C::ScanAnimEndPos' has a wrong offset!");

}

