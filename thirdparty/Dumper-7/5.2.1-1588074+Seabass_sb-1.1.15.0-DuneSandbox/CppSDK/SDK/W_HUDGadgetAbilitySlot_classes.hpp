#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_HUDGadgetAbilitySlot

#include "Basic.hpp"

#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_HUDGadgetAbilitySlot.W_HUDGadgetAbilitySlot_C
// 0x01F0 (0x0720 - 0x0530)
class UW_HUDGadgetAbilitySlot_C final : public UGadgetOrAbilitySlotHUDWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimateDiamondFillColor;                           // 0x0538(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimateIconColor;                                  // 0x0540(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimateDiamondOutlineColor;                        // 0x0548(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SpiceBuffed;                                       // 0x0550(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AbilityFeedbackOnAttemptDisabled;                  // 0x0558(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AbilityFeedbackOnAttempt;                          // 0x0560(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AbilityWithTimer;                                  // 0x0568(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AbilityFailedCost;                                 // 0x0570(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AbilityCanceled;                                   // 0x0578(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UDuneImage*                             AttemptDiamond;                                    // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             BlockedIcon;                                       // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CenterGlow;                                        // 0x0590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 EdgeHighlight;                                     // 0x0598(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             Flame;                                             // 0x05A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               SpiceBuffedvisuals;                                // 0x05A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        EmptySlotOpacity;                                  // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityState                                 PrevAbilityState;                                  // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B9[0x3];                                      // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Default_Color;                                     // 0x05BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Buffed_Color;                                      // 0x05CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Buffed_In_Use_Background;                          // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Default_In_Use_Background;                         // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DiamondOutlineInterpolator;                        // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Diamond_Outline_Target_Top_Color;                  // 0x05F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Diamond_Outline_Start_Top_Color;                   // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Diamond_Outline_Target_Bottom_Color;               // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Diamond_Outline_Start_Bottom_Color;                // 0x0628(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Buffed_Outline_Color;                              // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Default_Outline_Color;                             // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IconInterpolator;                                  // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Icon_Target_Color;                                 // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Icon_Start_Color;                                  // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool Reactivatable, class FText Reactivation_Text)> OnReactivationStateChanged; // 0x0680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UInputActionWidget*                     InputAction;                                       // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Cached_Is_Buffed;                                  // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELabelPosition                                Cached_Label_Position;                             // 0x0699(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cached_Show_Text;                                  // 0x069A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69B[0x5];                                      // 0x069B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Cached_Reactivation_Text;                          // 0x06A0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           Diamond_Fill_Target_Top_Color;                     // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Diamond_Fill_Start_Top_Color;                      // 0x06C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Diamond_Fill_Target_Bottom_Color;                  // 0x06D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Diamond_Fill_Start_Bottom_Color;                   // 0x06E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DiamondFillInterpolator;                           // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Initial_Fill_Top_Color;                            // 0x0700(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Initial_Fill_Bottom_Color;                         // 0x0710(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateInputHint(bool Show_Label, const class FText& Label_Text);
	void Setup_Spice_Buff_Visuals(bool Is_Buffed);
	void SetIconInterpolator(double New_Value);
	void SetDiamondOutlineInterpolator(double New_Value);
	void SetDiamondFillInterpolator(double New_Value);
	void PreConstruct(bool IsDesignTime);
	void OnReactivationTextChanged(const bool bShowText, const class FText& Text);
	void OnFillChanged(const bool bIsFilled);
	void OnAbilityCanceled();
	struct FLinearColor GetIconColor();
	void GetFillColors(struct FLinearColor* Fill_Color_Top, struct FLinearColor* Fill_Color_Bottom);
	struct FLinearColor GetFillColor(struct FLinearColor* ReturnValue2);
	void ExecuteUbergraph_W_HUDGadgetAbilitySlot(int32 EntryPoint);
	void Construct();
	void Animate_Outline_Color(const struct FLinearColor& Target_Top_Color, const struct FLinearColor& Target_Bottom_Color);
	void Animate_Icon_Color(const struct FLinearColor& Target_Color);
	void Animate_Fill_Color(const struct FLinearColor& Target_Top_Color, const struct FLinearColor& Target_Bottom_Color);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_HUDGadgetAbilitySlot_C">();
	}
	static class UW_HUDGadgetAbilitySlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_HUDGadgetAbilitySlot_C>();
	}
};
static_assert(alignof(UW_HUDGadgetAbilitySlot_C) == 0x000010, "Wrong alignment on UW_HUDGadgetAbilitySlot_C");
static_assert(sizeof(UW_HUDGadgetAbilitySlot_C) == 0x000720, "Wrong size on UW_HUDGadgetAbilitySlot_C");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, UberGraphFrame) == 0x000530, "Member 'UW_HUDGadgetAbilitySlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, AnimateDiamondFillColor) == 0x000538, "Member 'UW_HUDGadgetAbilitySlot_C::AnimateDiamondFillColor' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, AnimateIconColor) == 0x000540, "Member 'UW_HUDGadgetAbilitySlot_C::AnimateIconColor' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, AnimateDiamondOutlineColor) == 0x000548, "Member 'UW_HUDGadgetAbilitySlot_C::AnimateDiamondOutlineColor' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, SpiceBuffed) == 0x000550, "Member 'UW_HUDGadgetAbilitySlot_C::SpiceBuffed' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, AbilityFeedbackOnAttemptDisabled) == 0x000558, "Member 'UW_HUDGadgetAbilitySlot_C::AbilityFeedbackOnAttemptDisabled' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, AbilityFeedbackOnAttempt) == 0x000560, "Member 'UW_HUDGadgetAbilitySlot_C::AbilityFeedbackOnAttempt' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, AbilityWithTimer) == 0x000568, "Member 'UW_HUDGadgetAbilitySlot_C::AbilityWithTimer' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, AbilityFailedCost) == 0x000570, "Member 'UW_HUDGadgetAbilitySlot_C::AbilityFailedCost' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, AbilityCanceled) == 0x000578, "Member 'UW_HUDGadgetAbilitySlot_C::AbilityCanceled' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, AttemptDiamond) == 0x000580, "Member 'UW_HUDGadgetAbilitySlot_C::AttemptDiamond' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, BlockedIcon) == 0x000588, "Member 'UW_HUDGadgetAbilitySlot_C::BlockedIcon' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, CenterGlow) == 0x000590, "Member 'UW_HUDGadgetAbilitySlot_C::CenterGlow' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, EdgeHighlight) == 0x000598, "Member 'UW_HUDGadgetAbilitySlot_C::EdgeHighlight' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Flame) == 0x0005A0, "Member 'UW_HUDGadgetAbilitySlot_C::Flame' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, SpiceBuffedvisuals) == 0x0005A8, "Member 'UW_HUDGadgetAbilitySlot_C::SpiceBuffedvisuals' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, EmptySlotOpacity) == 0x0005B0, "Member 'UW_HUDGadgetAbilitySlot_C::EmptySlotOpacity' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, PrevAbilityState) == 0x0005B8, "Member 'UW_HUDGadgetAbilitySlot_C::PrevAbilityState' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Default_Color) == 0x0005BC, "Member 'UW_HUDGadgetAbilitySlot_C::Default_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Buffed_Color) == 0x0005CC, "Member 'UW_HUDGadgetAbilitySlot_C::Buffed_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Buffed_In_Use_Background) == 0x0005E0, "Member 'UW_HUDGadgetAbilitySlot_C::Buffed_In_Use_Background' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Default_In_Use_Background) == 0x0005E8, "Member 'UW_HUDGadgetAbilitySlot_C::Default_In_Use_Background' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, DiamondOutlineInterpolator) == 0x0005F0, "Member 'UW_HUDGadgetAbilitySlot_C::DiamondOutlineInterpolator' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Diamond_Outline_Target_Top_Color) == 0x0005F8, "Member 'UW_HUDGadgetAbilitySlot_C::Diamond_Outline_Target_Top_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Diamond_Outline_Start_Top_Color) == 0x000608, "Member 'UW_HUDGadgetAbilitySlot_C::Diamond_Outline_Start_Top_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Diamond_Outline_Target_Bottom_Color) == 0x000618, "Member 'UW_HUDGadgetAbilitySlot_C::Diamond_Outline_Target_Bottom_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Diamond_Outline_Start_Bottom_Color) == 0x000628, "Member 'UW_HUDGadgetAbilitySlot_C::Diamond_Outline_Start_Bottom_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Buffed_Outline_Color) == 0x000638, "Member 'UW_HUDGadgetAbilitySlot_C::Buffed_Outline_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Default_Outline_Color) == 0x000648, "Member 'UW_HUDGadgetAbilitySlot_C::Default_Outline_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, IconInterpolator) == 0x000658, "Member 'UW_HUDGadgetAbilitySlot_C::IconInterpolator' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Icon_Target_Color) == 0x000660, "Member 'UW_HUDGadgetAbilitySlot_C::Icon_Target_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Icon_Start_Color) == 0x000670, "Member 'UW_HUDGadgetAbilitySlot_C::Icon_Start_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, OnReactivationStateChanged) == 0x000680, "Member 'UW_HUDGadgetAbilitySlot_C::OnReactivationStateChanged' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, InputAction) == 0x000690, "Member 'UW_HUDGadgetAbilitySlot_C::InputAction' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Cached_Is_Buffed) == 0x000698, "Member 'UW_HUDGadgetAbilitySlot_C::Cached_Is_Buffed' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Cached_Label_Position) == 0x000699, "Member 'UW_HUDGadgetAbilitySlot_C::Cached_Label_Position' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Cached_Show_Text) == 0x00069A, "Member 'UW_HUDGadgetAbilitySlot_C::Cached_Show_Text' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Cached_Reactivation_Text) == 0x0006A0, "Member 'UW_HUDGadgetAbilitySlot_C::Cached_Reactivation_Text' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Diamond_Fill_Target_Top_Color) == 0x0006B8, "Member 'UW_HUDGadgetAbilitySlot_C::Diamond_Fill_Target_Top_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Diamond_Fill_Start_Top_Color) == 0x0006C8, "Member 'UW_HUDGadgetAbilitySlot_C::Diamond_Fill_Start_Top_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Diamond_Fill_Target_Bottom_Color) == 0x0006D8, "Member 'UW_HUDGadgetAbilitySlot_C::Diamond_Fill_Target_Bottom_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Diamond_Fill_Start_Bottom_Color) == 0x0006E8, "Member 'UW_HUDGadgetAbilitySlot_C::Diamond_Fill_Start_Bottom_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, DiamondFillInterpolator) == 0x0006F8, "Member 'UW_HUDGadgetAbilitySlot_C::DiamondFillInterpolator' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Initial_Fill_Top_Color) == 0x000700, "Member 'UW_HUDGadgetAbilitySlot_C::Initial_Fill_Top_Color' has a wrong offset!");
static_assert(offsetof(UW_HUDGadgetAbilitySlot_C, Initial_Fill_Bottom_Color) == 0x000710, "Member 'UW_HUDGadgetAbilitySlot_C::Initial_Fill_Bottom_Color' has a wrong offset!");

}

