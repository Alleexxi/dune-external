#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AtmopshericSpotlightCone_WithoutLens

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AtmopshericSpotlightCone_WithoutLens.BP_AtmopshericSpotlightCone_WithoutLens_C
// 0x0098 (0x03E8 - 0x0350)
class ABP_AtmopshericSpotlightCone_WithoutLens_C final : public AActor
{
public:
	class UStaticMeshComponent*                   Spotlight_Cone_Mesh;                               // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_LightConeSpotlight_Component_C*     BP_LightConeSpotlight_Component;                   // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Ref_DynamicMaterial;                               // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightIntensity;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttenuationRadius;                                 // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OuterConeAngle;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Ref_DynamicMaterial_Spotlight;                     // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         InnerConeAngle;                                    // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     SpotlightMaterial;                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Atmospheric_Intensity;                             // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Atmospheric_Source_Intensity;                      // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TurnOffLightConeDuringDay_;                        // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LengthOfTransition;                                // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TransitionRandomizer;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HourShift;                                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinimumDayIntensity;                               // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AtmopshericSpotlightCone_WithoutLens_C">();
	}
	static class ABP_AtmopshericSpotlightCone_WithoutLens_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AtmopshericSpotlightCone_WithoutLens_C>();
	}
};
static_assert(alignof(ABP_AtmopshericSpotlightCone_WithoutLens_C) == 0x000008, "Wrong alignment on ABP_AtmopshericSpotlightCone_WithoutLens_C");
static_assert(sizeof(ABP_AtmopshericSpotlightCone_WithoutLens_C) == 0x0003E8, "Wrong size on ABP_AtmopshericSpotlightCone_WithoutLens_C");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, Spotlight_Cone_Mesh) == 0x000350, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::Spotlight_Cone_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, SpotLight) == 0x000358, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, BP_LightConeSpotlight_Component) == 0x000360, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::BP_LightConeSpotlight_Component' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, Scene) == 0x000368, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, Ref_DynamicMaterial) == 0x000370, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::Ref_DynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, LightColor) == 0x000378, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, LightIntensity) == 0x000388, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, AttenuationRadius) == 0x000390, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, OuterConeAngle) == 0x000398, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, Ref_DynamicMaterial_Spotlight) == 0x0003A0, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::Ref_DynamicMaterial_Spotlight' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, InnerConeAngle) == 0x0003A8, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, SpotlightMaterial) == 0x0003B0, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::SpotlightMaterial' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, Atmospheric_Intensity) == 0x0003B8, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::Atmospheric_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, Atmospheric_Source_Intensity) == 0x0003BC, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::Atmospheric_Source_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, TurnOffLightConeDuringDay_) == 0x0003C0, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::TurnOffLightConeDuringDay_' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, LengthOfTransition) == 0x0003C8, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::LengthOfTransition' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, TransitionRandomizer) == 0x0003D0, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::TransitionRandomizer' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, HourShift) == 0x0003D8, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::HourShift' has a wrong offset!");
static_assert(offsetof(ABP_AtmopshericSpotlightCone_WithoutLens_C, MinimumDayIntensity) == 0x0003E0, "Member 'ABP_AtmopshericSpotlightCone_WithoutLens_C::MinimumDayIntensity' has a wrong offset!");

}

