#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LandscapeDisplacement

#include "Basic.hpp"

#include "LandscapeDisplacement_classes.hpp"
#include "LandscapeDisplacement_parameters.hpp"


namespace SDK
{

// Function LandscapeDisplacement.LandscapeDisplacementVolume.GetLayerTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   layerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform*                      InTransform                                            (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALandscapeDisplacementVolume::GetLayerTransform(int32 layerIndex, struct FTransform* InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "GetLayerTransform");

	Params::LandscapeDisplacementVolume_GetLayerTransform Parms{};

	Parms.layerIndex = layerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InTransform != nullptr)
		*InTransform = std::move(Parms.InTransform);

	return Parms.ReturnValue;
}


// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetDisplacementAlpha
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DisplacementAlpha                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALandscapeDisplacementVolume::SetDisplacementAlpha(float DisplacementAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "SetDisplacementAlpha");

	Params::LandscapeDisplacementVolume_SetDisplacementAlpha Parms{};

	Parms.DisplacementAlpha = DisplacementAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetDynamicDisplacementState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   layerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDisplacementState&        State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALandscapeDisplacementVolume::SetDynamicDisplacementState(int32 layerIndex, const struct FDisplacementState& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "SetDynamicDisplacementState");

	Params::LandscapeDisplacementVolume_SetDynamicDisplacementState Parms{};

	Parms.layerIndex = layerIndex;
	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetDynamicDisplacementStatePoints
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   layerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDisplacementState&        State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FDisplacementPointData&    pointData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALandscapeDisplacementVolume::SetDynamicDisplacementStatePoints(int32 layerIndex, const struct FDisplacementState& State, const struct FDisplacementPointData& pointData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "SetDynamicDisplacementStatePoints");

	Params::LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints Parms{};

	Parms.layerIndex = layerIndex;
	Parms.State = std::move(State);
	Parms.pointData = std::move(pointData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetFlipbookDisplacementState
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   layerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDisplacementState&        State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector4f&                 FlipBookRenderState                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 SpriteOffset                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALandscapeDisplacementVolume::SetFlipbookDisplacementState(int32 layerIndex, const struct FDisplacementState& State, const struct FVector4f& FlipBookRenderState, const struct FVector2D& SpriteOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "SetFlipbookDisplacementState");

	Params::LandscapeDisplacementVolume_SetFlipbookDisplacementState Parms{};

	Parms.layerIndex = layerIndex;
	Parms.State = std::move(State);
	Parms.FlipBookRenderState = std::move(FlipBookRenderState);
	Parms.SpriteOffset = std::move(SpriteOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetLayerDisplacementAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   layerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAlpha                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALandscapeDisplacementVolume::SetLayerDisplacementAlpha(int32 layerIndex, float InAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "SetLayerDisplacementAlpha");

	Params::LandscapeDisplacementVolume_SetLayerDisplacementAlpha Parms{};

	Parms.layerIndex = layerIndex;
	Parms.InAlpha = InAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetLayerDisplacementState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   layerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDisplacementState&        State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALandscapeDisplacementVolume::SetLayerDisplacementState(int32 layerIndex, const struct FDisplacementState& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "SetLayerDisplacementState");

	Params::LandscapeDisplacementVolume_SetLayerDisplacementState Parms{};

	Parms.layerIndex = layerIndex;
	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetLayerTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   layerIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                InTransform                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALandscapeDisplacementVolume::SetLayerTransform(int32 layerIndex, const struct FTransform& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "SetLayerTransform");

	Params::LandscapeDisplacementVolume_SetLayerTransform Parms{};

	Parms.layerIndex = layerIndex;
	Parms.InTransform = std::move(InTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandscapeDisplacement.LandscapeDisplacementVolume.StartShifting
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ALandscapeDisplacementVolume::StartShifting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "StartShifting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LandscapeDisplacement.LandscapeDisplacementVolume.GetDisplacementAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ALandscapeDisplacementVolume::GetDisplacementAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "GetDisplacementAlpha");

	Params::LandscapeDisplacementVolume_GetDisplacementAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LandscapeDisplacement.LandscapeDisplacementVolume.IsTicking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ALandscapeDisplacementVolume::IsTicking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LandscapeDisplacementVolume", "IsTicking");

	Params::LandscapeDisplacementVolume_IsTicking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

