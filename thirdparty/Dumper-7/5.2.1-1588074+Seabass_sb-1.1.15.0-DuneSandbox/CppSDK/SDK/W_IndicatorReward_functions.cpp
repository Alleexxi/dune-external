#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_IndicatorReward

#include "Basic.hpp"

#include "W_IndicatorReward_classes.hpp"
#include "W_IndicatorReward_parameters.hpp"


namespace SDK
{

// Function W_IndicatorReward.W_IndicatorReward_C.ExecuteUbergraph_W_IndicatorReward
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_IndicatorReward_C::ExecuteUbergraph_W_IndicatorReward(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_IndicatorReward_C", "ExecuteUbergraph_W_IndicatorReward");

	Params::W_IndicatorReward_C_ExecuteUbergraph_W_IndicatorReward Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_IndicatorReward.W_IndicatorReward_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_IndicatorReward_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_IndicatorReward_C", "PreConstruct");

	Params::W_IndicatorReward_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_IndicatorReward.W_IndicatorReward_C.Set Disabled
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDisabled_                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_IndicatorReward_C::Set_Disabled(bool IsDisabled_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_IndicatorReward_C", "Set Disabled");

	Params::W_IndicatorReward_C_Set_Disabled Parms{};

	Parms.IsDisabled_ = IsDisabled_;

	UObject::ProcessEvent(Func, &Parms);
}

}

