#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeVirtualTextureGrid

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "RuntimeVirtualTextureGrid_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class RuntimeVirtualTextureGrid.RuntimeVirtualTextureGridAwareInterface
// 0x0000 (0x0000 - 0x0000)
class IRuntimeVirtualTextureGridAwareInterface final
{
public:
	TArray<class UMaterialInstanceDynamic*> GetExtraMIDsToInjectRVTs();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RuntimeVirtualTextureGridAwareInterface">();
	}
	static class IRuntimeVirtualTextureGridAwareInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRuntimeVirtualTextureGridAwareInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IRuntimeVirtualTextureGridAwareInterface) == 0x000001, "Wrong alignment on IRuntimeVirtualTextureGridAwareInterface");
static_assert(sizeof(IRuntimeVirtualTextureGridAwareInterface) == 0x000001, "Wrong size on IRuntimeVirtualTextureGridAwareInterface");

// Class RuntimeVirtualTextureGrid.RuntimeVirtualTextureGrid
// 0x02F0 (0x0640 - 0x0350)
class ARuntimeVirtualTextureGrid final : public AActor
{
public:
	class ALevelBounds*                           TargetBounds;                                      // 0x0350(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class URuntimeVirtualTexture*>         RVTTemplates;                                      // 0x0358(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           ActorsToInjectRVTs;                                // 0x0368(0x0050)(Edit, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           ActorsToInjectRVTsUsingCamPos;                     // 0x03B8(0x0050)(Edit, NativeAccessSpecifierPrivate)
	float                                         LandscapeTileSize;                                 // 0x0408(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TileStreamingDistance;                             // 0x040C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              CellExtraExtent;                                   // 0x0410(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOffsetGridByHalfLandscapeSize;                    // 0x0420(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARuntimeVirtualTextureVolume*>   DisabledRVTVolumes;                                // 0x0428(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TSet<class ULevelStreaming*>                  StreamingLevelSetFromWorldComposition;             // 0x0438(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TSet<class ULevelStreaming*>                  StreamingLevelSetFromWorld;                        // 0x0488(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<struct FIntPoint, struct FRVTGridCellData> CellMap;                                         // 0x04D8(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class URuntimeVirtualTexture*, int32>    RVTToTemplateIndexMap;                             // 0x0528(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FRVTGridRVTGroup>               FreeRVTGroups;                                     // 0x0578(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           SpawnedActorsToBeInjected;                         // 0x0588(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5D8[0x68];                                     // 0x05D8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RuntimeVirtualTextureGrid">();
	}
	static class ARuntimeVirtualTextureGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARuntimeVirtualTextureGrid>();
	}
};
static_assert(alignof(ARuntimeVirtualTextureGrid) == 0x000008, "Wrong alignment on ARuntimeVirtualTextureGrid");
static_assert(sizeof(ARuntimeVirtualTextureGrid) == 0x000640, "Wrong size on ARuntimeVirtualTextureGrid");
static_assert(offsetof(ARuntimeVirtualTextureGrid, TargetBounds) == 0x000350, "Member 'ARuntimeVirtualTextureGrid::TargetBounds' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, RVTTemplates) == 0x000358, "Member 'ARuntimeVirtualTextureGrid::RVTTemplates' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, ActorsToInjectRVTs) == 0x000368, "Member 'ARuntimeVirtualTextureGrid::ActorsToInjectRVTs' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, ActorsToInjectRVTsUsingCamPos) == 0x0003B8, "Member 'ARuntimeVirtualTextureGrid::ActorsToInjectRVTsUsingCamPos' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, LandscapeTileSize) == 0x000408, "Member 'ARuntimeVirtualTextureGrid::LandscapeTileSize' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, TileStreamingDistance) == 0x00040C, "Member 'ARuntimeVirtualTextureGrid::TileStreamingDistance' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, CellExtraExtent) == 0x000410, "Member 'ARuntimeVirtualTextureGrid::CellExtraExtent' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, bOffsetGridByHalfLandscapeSize) == 0x000420, "Member 'ARuntimeVirtualTextureGrid::bOffsetGridByHalfLandscapeSize' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, DisabledRVTVolumes) == 0x000428, "Member 'ARuntimeVirtualTextureGrid::DisabledRVTVolumes' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, StreamingLevelSetFromWorldComposition) == 0x000438, "Member 'ARuntimeVirtualTextureGrid::StreamingLevelSetFromWorldComposition' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, StreamingLevelSetFromWorld) == 0x000488, "Member 'ARuntimeVirtualTextureGrid::StreamingLevelSetFromWorld' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, CellMap) == 0x0004D8, "Member 'ARuntimeVirtualTextureGrid::CellMap' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, RVTToTemplateIndexMap) == 0x000528, "Member 'ARuntimeVirtualTextureGrid::RVTToTemplateIndexMap' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, FreeRVTGroups) == 0x000578, "Member 'ARuntimeVirtualTextureGrid::FreeRVTGroups' has a wrong offset!");
static_assert(offsetof(ARuntimeVirtualTextureGrid, SpawnedActorsToBeInjected) == 0x000588, "Member 'ARuntimeVirtualTextureGrid::SpawnedActorsToBeInjected' has a wrong offset!");

}

