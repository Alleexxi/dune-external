#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_NerveStrike_Target

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GA_NerveStrike_Target.GA_NerveStrike_Target_C.K2_ActivateAbilityFromEvent
// 0x00B0 (0x00B0 - 0x0000)
struct GA_NerveStrike_Target_C_K2_ActivateAbilityFromEvent final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_NerveStrike_Target_C_K2_ActivateAbilityFromEvent) == 0x000008, "Wrong alignment on GA_NerveStrike_Target_C_K2_ActivateAbilityFromEvent");
static_assert(sizeof(GA_NerveStrike_Target_C_K2_ActivateAbilityFromEvent) == 0x0000B0, "Wrong size on GA_NerveStrike_Target_C_K2_ActivateAbilityFromEvent");
static_assert(offsetof(GA_NerveStrike_Target_C_K2_ActivateAbilityFromEvent, EventData) == 0x000000, "Member 'GA_NerveStrike_Target_C_K2_ActivateAbilityFromEvent::EventData' has a wrong offset!");

// Function GA_NerveStrike_Target.GA_NerveStrike_Target_C.ExecuteUbergraph_GA_NerveStrike_Target
// 0x0140 (0x0140 - 0x0000)
struct GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_Event_EventData;                            // 0x0008(0x00B0)(ConstParm)
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target) == 0x000008, "Wrong alignment on GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target");
static_assert(sizeof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target) == 0x000140, "Wrong size on GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, EntryPoint) == 0x000000, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, K2Node_Event_EventData) == 0x000008, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::K2Node_Event_EventData' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x0000B8, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C0, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, CallFunc_IsValid_ReturnValue) == 0x0000D8, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000E0, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000F8, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, CallFunc_BreakRotator_Roll) == 0x000110, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, CallFunc_BreakRotator_Pitch) == 0x000114, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, CallFunc_BreakRotator_Yaw) == 0x000118, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, CallFunc_MakeRotator_ReturnValue) == 0x000120, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000138, "Member 'GA_NerveStrike_Target_C_ExecuteUbergraph_GA_NerveStrike_Target::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

}

