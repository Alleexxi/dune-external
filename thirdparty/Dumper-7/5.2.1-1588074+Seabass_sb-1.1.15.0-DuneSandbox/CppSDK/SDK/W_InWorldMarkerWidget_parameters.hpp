#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_InWorldMarkerWidget

#include "Basic.hpp"

#include "DuneSandbox_structs.hpp"


namespace SDK::Params
{

// Function W_InWorldMarkerWidget.W_InWorldMarkerWidget_C.ExecuteUbergraph_W_InWorldMarkerWidget
// 0x0170 (0x0170 - 0x0000)
struct W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_MetersToPlayer;                       // 0x0004(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsClosestMarker;                     // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEMapMarker                            K2Node_Event_MarkerType;                           // 0x000C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFullscreenMapMarkerRowBase            K2Node_Event_MarkerStaticData;                     // 0x0018(0x0158)(ConstParm)
};
static_assert(alignof(W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget) == 0x000008, "Wrong alignment on W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget");
static_assert(sizeof(W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget) == 0x000170, "Wrong size on W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget");
static_assert(offsetof(W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget, EntryPoint) == 0x000000, "Member 'W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget, K2Node_Event_MetersToPlayer) == 0x000004, "Member 'W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget::K2Node_Event_MetersToPlayer' has a wrong offset!");
static_assert(offsetof(W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget, K2Node_Event_bIsClosestMarker) == 0x000008, "Member 'W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget::K2Node_Event_bIsClosestMarker' has a wrong offset!");
static_assert(offsetof(W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget, K2Node_Event_MarkerType) == 0x00000C, "Member 'W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget::K2Node_Event_MarkerType' has a wrong offset!");
static_assert(offsetof(W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget, K2Node_Event_MarkerStaticData) == 0x000018, "Member 'W_InWorldMarkerWidget_C_ExecuteUbergraph_W_InWorldMarkerWidget::K2Node_Event_MarkerStaticData' has a wrong offset!");

// Function W_InWorldMarkerWidget.W_InWorldMarkerWidget_C.SetPlayerDistance
// 0x0008 (0x0008 - 0x0000)
struct W_InWorldMarkerWidget_C_SetPlayerDistance final
{
public:
	float                                         MetersToPlayer;                                    // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsClosestMarker;                                  // 0x0004(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_InWorldMarkerWidget_C_SetPlayerDistance) == 0x000004, "Wrong alignment on W_InWorldMarkerWidget_C_SetPlayerDistance");
static_assert(sizeof(W_InWorldMarkerWidget_C_SetPlayerDistance) == 0x000008, "Wrong size on W_InWorldMarkerWidget_C_SetPlayerDistance");
static_assert(offsetof(W_InWorldMarkerWidget_C_SetPlayerDistance, MetersToPlayer) == 0x000000, "Member 'W_InWorldMarkerWidget_C_SetPlayerDistance::MetersToPlayer' has a wrong offset!");
static_assert(offsetof(W_InWorldMarkerWidget_C_SetPlayerDistance, bIsClosestMarker) == 0x000004, "Member 'W_InWorldMarkerWidget_C_SetPlayerDistance::bIsClosestMarker' has a wrong offset!");

// Function W_InWorldMarkerWidget.W_InWorldMarkerWidget_C.UpdateWidget
// 0x0160 (0x0160 - 0x0000)
struct W_InWorldMarkerWidget_C_UpdateWidget final
{
public:
	struct FEMapMarker                            MarkerType;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FFullscreenMapMarkerRowBase            MarkerStaticData;                                  // 0x0008(0x0158)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_InWorldMarkerWidget_C_UpdateWidget) == 0x000008, "Wrong alignment on W_InWorldMarkerWidget_C_UpdateWidget");
static_assert(sizeof(W_InWorldMarkerWidget_C_UpdateWidget) == 0x000160, "Wrong size on W_InWorldMarkerWidget_C_UpdateWidget");
static_assert(offsetof(W_InWorldMarkerWidget_C_UpdateWidget, MarkerType) == 0x000000, "Member 'W_InWorldMarkerWidget_C_UpdateWidget::MarkerType' has a wrong offset!");
static_assert(offsetof(W_InWorldMarkerWidget_C_UpdateWidget, MarkerStaticData) == 0x000008, "Member 'W_InWorldMarkerWidget_C_UpdateWidget::MarkerStaticData' has a wrong offset!");

}

