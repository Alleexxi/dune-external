#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_BuildingHighlight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function W_BuildingHighlight.W_BuildingHighlight_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_BuildingHighlight_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_BuildingHighlight_C_PreConstruct) == 0x000001, "Wrong alignment on W_BuildingHighlight_C_PreConstruct");
static_assert(sizeof(W_BuildingHighlight_C_PreConstruct) == 0x000001, "Wrong size on W_BuildingHighlight_C_PreConstruct");
static_assert(offsetof(W_BuildingHighlight_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_BuildingHighlight_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_BuildingHighlight.W_BuildingHighlight_C.ExecuteUbergraph_W_BuildingHighlight
// 0x0060 (0x0060 - 0x0000)
struct W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bVisible;                             // 0x0040(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight) == 0x000008, "Wrong alignment on W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight");
static_assert(sizeof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight) == 0x000060, "Wrong size on W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight");
static_assert(offsetof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight, EntryPoint) == 0x000000, "Member 'W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight, Temp_bool_Variable) == 0x000004, "Member 'W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight, Temp_struct_Variable) == 0x000008, "Member 'W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight, Temp_struct_Variable_1) == 0x000018, "Member 'W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight, K2Node_Event_IsDesignTime) == 0x000028, "Member 'W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight, K2Node_Event_bVisible) == 0x000040, "Member 'W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight::K2Node_Event_bVisible' has a wrong offset!");
static_assert(offsetof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight, K2Node_Select_Default) == 0x000044, "Member 'W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight, CallFunc_PlayAnimation_ReturnValue) == 0x000058, "Member 'W_BuildingHighlight_C_ExecuteUbergraph_W_BuildingHighlight::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function W_BuildingHighlight.W_BuildingHighlight_C.BP_OnTutorialBuildIndicator
// 0x0001 (0x0001 - 0x0000)
struct W_BuildingHighlight_C_BP_OnTutorialBuildIndicator final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_BuildingHighlight_C_BP_OnTutorialBuildIndicator) == 0x000001, "Wrong alignment on W_BuildingHighlight_C_BP_OnTutorialBuildIndicator");
static_assert(sizeof(W_BuildingHighlight_C_BP_OnTutorialBuildIndicator) == 0x000001, "Wrong size on W_BuildingHighlight_C_BP_OnTutorialBuildIndicator");
static_assert(offsetof(W_BuildingHighlight_C_BP_OnTutorialBuildIndicator, bVisible) == 0x000000, "Member 'W_BuildingHighlight_C_BP_OnTutorialBuildIndicator::bVisible' has a wrong offset!");

}

