#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_WindturbineDirectional

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_WindturbineDirectional.AB_WindturbineDirectional_C
// 0x0100 (0x0450 - 0x0350)
class UAB_WindturbineDirectional_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0358(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0360(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0368(0x0020)()
	struct FAnimNode_LinkedAnimGraph              AnimGraphNode_LinkedAnimGraph;                     // 0x0388(0x00B8)()
	class UAnimSequenceBase*                      __CustomProperty_WorkingAnimSequence_0E8B8DF24D2681C3FE376A873C135C36; // 0x0440(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AAnimatedItemCraftingStation*           Owner;                                             // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AB_WindturbineDirectional(int32 EntryPoint);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_WindturbineDirectional_C">();
	}
	static class UAB_WindturbineDirectional_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_WindturbineDirectional_C>();
	}
};
static_assert(alignof(UAB_WindturbineDirectional_C) == 0x000010, "Wrong alignment on UAB_WindturbineDirectional_C");
static_assert(sizeof(UAB_WindturbineDirectional_C) == 0x000450, "Wrong size on UAB_WindturbineDirectional_C");
static_assert(offsetof(UAB_WindturbineDirectional_C, UberGraphFrame) == 0x000350, "Member 'UAB_WindturbineDirectional_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineDirectional_C, AnimBlueprintExtension_PropertyAccess) == 0x000358, "Member 'UAB_WindturbineDirectional_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineDirectional_C, AnimBlueprintExtension_Base) == 0x000360, "Member 'UAB_WindturbineDirectional_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineDirectional_C, AnimGraphNode_Root) == 0x000368, "Member 'UAB_WindturbineDirectional_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineDirectional_C, AnimGraphNode_LinkedAnimGraph) == 0x000388, "Member 'UAB_WindturbineDirectional_C::AnimGraphNode_LinkedAnimGraph' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineDirectional_C, __CustomProperty_WorkingAnimSequence_0E8B8DF24D2681C3FE376A873C135C36) == 0x000440, "Member 'UAB_WindturbineDirectional_C::__CustomProperty_WorkingAnimSequence_0E8B8DF24D2681C3FE376A873C135C36' has a wrong offset!");
static_assert(offsetof(UAB_WindturbineDirectional_C, Owner) == 0x000448, "Member 'UAB_WindturbineDirectional_C::Owner' has a wrong offset!");

}

