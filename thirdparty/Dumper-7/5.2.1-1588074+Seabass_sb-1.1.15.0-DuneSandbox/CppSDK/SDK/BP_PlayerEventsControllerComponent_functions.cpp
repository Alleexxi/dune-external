#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerEventsControllerComponent

#include "Basic.hpp"

#include "BP_PlayerEventsControllerComponent_classes.hpp"
#include "BP_PlayerEventsControllerComponent_parameters.hpp"


namespace SDK
{

// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.TryTriggerNearestPvEDescriptor
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerEventsControllerComponent_C::TryTriggerNearestPvEDescriptor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "TryTriggerNearestPvEDescriptor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.SetPvEComposition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    NewComposition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_PlayerEventsControllerComponent_C::SetPvEComposition(const class FString& NewComposition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "SetPvEComposition");

	Params::BP_PlayerEventsControllerComponent_C_SetPvEComposition Parms{};

	Parms.NewComposition = std::move(NewComposition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ServerSetPvEComposition
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    NewComposition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_PlayerEventsControllerComponent_C::ServerSetPvEComposition(const class FString& NewComposition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ServerSetPvEComposition");

	Params::BP_PlayerEventsControllerComponent_C_ServerSetPvEComposition Parms{};

	Parms.NewComposition = std::move(NewComposition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ServerRequestPvEDebugInfo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_PlayerEventsControllerComponent_C::ServerRequestPvEDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ServerRequestPvEDebugInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ServerGetPvECompositionLocation
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_PlayerEventsControllerComponent_C::ServerGetPvECompositionLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ServerGetPvECompositionLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ServerGetPOIs
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerEventsControllerComponent_C::ServerGetPOIs(class UObject* Instigator, class FName Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ServerGetPOIs");

	Params::BP_PlayerEventsControllerComponent_C_ServerGetPOIs Parms{};

	Parms.Instigator = Instigator;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ServerAddItemsCheat
// (Net, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FGameItemInfo>&     ItemsToAdd                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_PlayerEventsControllerComponent_C::ServerAddItemsCheat(const TArray<struct FGameItemInfo>& ItemsToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ServerAddItemsCheat");

	Params::BP_PlayerEventsControllerComponent_C_ServerAddItemsCheat Parms{};

	Parms.ItemsToAdd = std::move(ItemsToAdd);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.RequestPvEDebugInfo
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerEventsControllerComponent_C::RequestPvEDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "RequestPvEDebugInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.RequestPvECompositionLocation
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerEventsControllerComponent_C::RequestPvECompositionLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "RequestPvECompositionLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ReportEventMsg
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Msg                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_PlayerEventsControllerComponent_C::ReportEventMsg(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ReportEventMsg");

	Params::BP_PlayerEventsControllerComponent_C_ReportEventMsg Parms{};

	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ReceivePOIs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FFPlayerEventsPOI>& POIs                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_PlayerEventsControllerComponent_C::ReceivePOIs(const TArray<struct FFPlayerEventsPOI>& POIs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ReceivePOIs");

	Params::BP_PlayerEventsControllerComponent_C_ReceivePOIs Parms{};

	Parms.POIs = std::move(POIs);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.OnOpen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Admin_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerEventsControllerComponent_C::OnOpen(bool Admin_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "OnOpen");

	Params::BP_PlayerEventsControllerComponent_C_OnOpen Parms{};

	Parms.Admin_ = Admin_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.GetPvEDescriptor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ToActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor**                          PvEContentDescriptor                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerEventsControllerComponent_C::GetPvEDescriptor(class AActor* ToActor, class AActor** PvEContentDescriptor, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "GetPvEDescriptor");

	Params::BP_PlayerEventsControllerComponent_C_GetPvEDescriptor Parms{};

	Parms.ToActor = ToActor;

	UObject::ProcessEvent(Func, &Parms);

	if (PvEContentDescriptor != nullptr)
		*PvEContentDescriptor = Parms.PvEContentDescriptor;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.GetPOIs
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerEventsControllerComponent_C::GetPOIs(class UObject* Instigator, class FName Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "GetPOIs");

	Params::BP_PlayerEventsControllerComponent_C_GetPOIs Parms{};

	Parms.Instigator = Instigator;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ExecuteUbergraph_BP_PlayerEventsControllerComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerEventsControllerComponent_C::ExecuteUbergraph_BP_PlayerEventsControllerComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ExecuteUbergraph_BP_PlayerEventsControllerComponent");

	Params::BP_PlayerEventsControllerComponent_C_ExecuteUbergraph_BP_PlayerEventsControllerComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ClientReceivePvEDescriptorLocation
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerEventsControllerComponent_C::ClientReceivePvEDescriptorLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ClientReceivePvEDescriptorLocation");

	Params::BP_PlayerEventsControllerComponent_C_ClientReceivePvEDescriptorLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ClientReceivePvE
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FF_BP_PvEDebugInfo&        DebugInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_PlayerEventsControllerComponent_C::ClientReceivePvE(const struct FF_BP_PvEDebugInfo& DebugInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ClientReceivePvE");

	Params::BP_PlayerEventsControllerComponent_C_ClientReceivePvE Parms{};

	Parms.DebugInfo = std::move(DebugInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.ClientReceivePOIs
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FFPlayerEventsPOI>& POIs                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_PlayerEventsControllerComponent_C::ClientReceivePOIs(const TArray<struct FFPlayerEventsPOI>& POIs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "ClientReceivePOIs");

	Params::BP_PlayerEventsControllerComponent_C_ClientReceivePOIs Parms{};

	Parms.POIs = std::move(POIs);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C.AddItemsCheat
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FGameItemInfo>&     ItemsToAdd                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_PlayerEventsControllerComponent_C::AddItemsCheat(const TArray<struct FGameItemInfo>& ItemsToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerEventsControllerComponent_C", "AddItemsCheat");

	Params::BP_PlayerEventsControllerComponent_C_AddItemsCheat Parms{};

	Parms.ItemsToAdd = std::move(ItemsToAdd);

	UObject::ProcessEvent(Func, &Parms);
}

}

