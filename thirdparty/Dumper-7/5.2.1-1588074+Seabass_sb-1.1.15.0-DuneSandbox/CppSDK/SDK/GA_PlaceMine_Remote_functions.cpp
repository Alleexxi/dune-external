#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_PlaceMine_Remote

#include "Basic.hpp"

#include "GA_PlaceMine_Remote_classes.hpp"
#include "GA_PlaceMine_Remote_parameters.hpp"


namespace SDK
{

// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.ClientSetMine
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Mine_Remote_Base_C*           AuthMine                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_PlaceMine_Remote_C::ClientSetMine(class ABP_Mine_Remote_Base_C* AuthMine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "ClientSetMine");

	Params::GA_PlaceMine_Remote_C_ClientSetMine Parms{};

	Parms.AuthMine = AuthMine;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.ExecuteUbergraph_GA_PlaceMine_Remote
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_PlaceMine_Remote_C::ExecuteUbergraph_GA_PlaceMine_Remote(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "ExecuteUbergraph_GA_PlaceMine_Remote");

	Params::GA_PlaceMine_Remote_C_ExecuteUbergraph_GA_PlaceMine_Remote Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.FindMineForClient
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   FoundMine                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_PlaceMine_Remote_C::FindMineForClient(bool* FoundMine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "FindMineForClient");

	Params::GA_PlaceMine_Remote_C_FindMineForClient Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FoundMine != nullptr)
		*FoundMine = Parms.FoundMine;
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.HandleDelayedVisuals
// (BlueprintCallable, BlueprintEvent)

void UGA_PlaceMine_Remote_C::HandleDelayedVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "HandleDelayedVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.IsCasterSuspending
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bIsSuspending                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_PlaceMine_Remote_C::IsCasterSuspending(bool* bIsSuspending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "IsCasterSuspending");

	Params::GA_PlaceMine_Remote_C_IsCasterSuspending Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsSuspending != nullptr)
		*bIsSuspending = Parms.bIsSuspending;
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_PlaceMine_Remote_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_PlaceMine_Remote_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "K2_OnEndAbility");

	Params::GA_PlaceMine_Remote_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.MineDetonated
// (BlueprintCallable, BlueprintEvent)

void UGA_PlaceMine_Remote_C::MineDetonated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "MineDetonated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.OnBlendOut_8EE21BBD48F942E1D2A340B9A8750E5B
// (BlueprintCallable, BlueprintEvent)

void UGA_PlaceMine_Remote_C::OnBlendOut_8EE21BBD48F942E1D2A340B9A8750E5B()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "OnBlendOut_8EE21BBD48F942E1D2A340B9A8750E5B");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.OnCancelled_8EE21BBD48F942E1D2A340B9A8750E5B
// (BlueprintCallable, BlueprintEvent)

void UGA_PlaceMine_Remote_C::OnCancelled_8EE21BBD48F942E1D2A340B9A8750E5B()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "OnCancelled_8EE21BBD48F942E1D2A340B9A8750E5B");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.OnCompleted_8EE21BBD48F942E1D2A340B9A8750E5B
// (BlueprintCallable, BlueprintEvent)

void UGA_PlaceMine_Remote_C::OnCompleted_8EE21BBD48F942E1D2A340B9A8750E5B()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "OnCompleted_8EE21BBD48F942E1D2A340B9A8750E5B");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.OnFinish_0B125AAD408DD1C78E79A59E0C523D84
// (BlueprintCallable, BlueprintEvent)

void UGA_PlaceMine_Remote_C::OnFinish_0B125AAD408DD1C78E79A59E0C523D84()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "OnFinish_0B125AAD408DD1C78E79A59E0C523D84");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.OnFinish_B4395F124BFFE5D68A3CBC94A3C376C7
// (BlueprintCallable, BlueprintEvent)

void UGA_PlaceMine_Remote_C::OnFinish_B4395F124BFFE5D68A3CBC94A3C376C7()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "OnFinish_B4395F124BFFE5D68A3CBC94A3C376C7");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.OnFinish_E89D34F641B3F6D30388EB9948BD33D6
// (BlueprintCallable, BlueprintEvent)

void UGA_PlaceMine_Remote_C::OnFinish_E89D34F641B3F6D30388EB9948BD33D6()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "OnFinish_E89D34F641B3F6D30388EB9948BD33D6");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.OnInterrupted_8EE21BBD48F942E1D2A340B9A8750E5B
// (BlueprintCallable, BlueprintEvent)

void UGA_PlaceMine_Remote_C::OnInterrupted_8EE21BBD48F942E1D2A340B9A8750E5B()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "OnInterrupted_8EE21BBD48F942E1D2A340B9A8750E5B");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.OnStop
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UGA_PlaceMine_Remote_C::OnStop(const struct FHitResult& ImpactResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "OnStop");

	Params::GA_PlaceMine_Remote_C_OnStop Parms{};

	Parms.ImpactResult = std::move(ImpactResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.OnThrowableDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_PlaceMine_Remote_C::OnThrowableDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "OnThrowableDestroyed");

	Params::GA_PlaceMine_Remote_C_OnThrowableDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.SetupMinePostLocationDetermined
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Mine_Remote_Base_C*           Remote_Mine                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Optional_Attach_Actor                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_PlaceMine_Remote_C::SetupMinePostLocationDetermined(class ABP_Mine_Remote_Base_C* Remote_Mine, class AActor* Optional_Attach_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "SetupMinePostLocationDetermined");

	Params::GA_PlaceMine_Remote_C_SetupMinePostLocationDetermined Parms{};

	Parms.Remote_Mine = Remote_Mine;
	Parms.Optional_Attach_Actor = Optional_Attach_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.SpawnAndDeploy
// (BlueprintCallable, BlueprintEvent)

void UGA_PlaceMine_Remote_C::SpawnAndDeploy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "SpawnAndDeploy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.TestSpawnAttachPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// struct FTransform*                      SpawnTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor**                          AttachActor                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_PlaceMine_Remote_C::TestSpawnAttachPoint(const struct FHitResult& HitResult, struct FTransform* SpawnTransform, class AActor** AttachActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "TestSpawnAttachPoint");

	Params::GA_PlaceMine_Remote_C_TestSpawnAttachPoint Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnTransform != nullptr)
		*SpawnTransform = std::move(Parms.SpawnTransform);

	if (AttachActor != nullptr)
		*AttachActor = Parms.AttachActor;
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.TryCommitOnRelease
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bCommit                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_PlaceMine_Remote_C::TryCommitOnRelease(bool* bCommit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "TryCommitOnRelease");

	Params::GA_PlaceMine_Remote_C_TryCommitOnRelease Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCommit != nullptr)
		*bCommit = Parms.bCommit;
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.AllowAbilitySwapUnequip
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const class UAbilitySystemComponent*    QueryASC                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UGA_PlaceMine_Remote_C::AllowAbilitySwapUnequip(const class UAbilitySystemComponent* QueryASC) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "AllowAbilitySwapUnequip");

	Params::GA_PlaceMine_Remote_C_AllowAbilitySwapUnequip Parms{};

	Parms.QueryASC = QueryASC;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.GetDisplayData
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const class UAbilitySystemComponent*    InstigatorASC                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FAbilityDisplayData              ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FAbilityDisplayData UGA_PlaceMine_Remote_C::GetDisplayData(const class UAbilitySystemComponent* InstigatorASC) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "GetDisplayData");

	Params::GA_PlaceMine_Remote_C_GetDisplayData Parms{};

	Parms.InstigatorASC = InstigatorASC;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_PlaceMine_Remote.GA_PlaceMine_Remote_C.K2_CanActivateAbility
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const struct FGameplayAbilityActorInfo& ActorInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// const struct FGameplayAbilitySpecHandle&Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer*           RelevantTags                                           (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UGA_PlaceMine_Remote_C::K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_PlaceMine_Remote_C", "K2_CanActivateAbility");

	Params::GA_PlaceMine_Remote_C_K2_CanActivateAbility Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.Handle = std::move(Handle);

	UObject::ProcessEvent(Func, &Parms);

	if (RelevantTags != nullptr)
		*RelevantTags = std::move(Parms.RelevantTags);

	return Parms.ReturnValue;
}

}

