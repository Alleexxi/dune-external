#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DbnoRevive_Ability

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DbnoRevive_Ability.DbnoRevive_Ability_C
// 0x0028 (0x0558 - 0x0530)
class UDbnoRevive_Ability_C final : public UDuneGameplayAction
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         ItemAmount;                                        // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneCharacter*                         Insitigator_As_Dune_Character;                     // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        HealAmount;                                        // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         Target_As_Dune_Character;                          // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void K2_CommitExecute();
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void ExecuteUbergraph_DbnoRevive_Ability(int32 EntryPoint);

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;
	void HasRequiredItems(class ADuneCharacter* Character, bool* HasItems) const;
	void GetHydrationSettings(double* RevivalHydrationRequirement, double* RevivalHydrationPenalty) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DbnoRevive_Ability_C">();
	}
	static class UDbnoRevive_Ability_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbnoRevive_Ability_C>();
	}
};
static_assert(alignof(UDbnoRevive_Ability_C) == 0x000008, "Wrong alignment on UDbnoRevive_Ability_C");
static_assert(sizeof(UDbnoRevive_Ability_C) == 0x000558, "Wrong size on UDbnoRevive_Ability_C");
static_assert(offsetof(UDbnoRevive_Ability_C, UberGraphFrame) == 0x000530, "Member 'UDbnoRevive_Ability_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDbnoRevive_Ability_C, ItemAmount) == 0x000538, "Member 'UDbnoRevive_Ability_C::ItemAmount' has a wrong offset!");
static_assert(offsetof(UDbnoRevive_Ability_C, Insitigator_As_Dune_Character) == 0x000540, "Member 'UDbnoRevive_Ability_C::Insitigator_As_Dune_Character' has a wrong offset!");
static_assert(offsetof(UDbnoRevive_Ability_C, HealAmount) == 0x000548, "Member 'UDbnoRevive_Ability_C::HealAmount' has a wrong offset!");
static_assert(offsetof(UDbnoRevive_Ability_C, Target_As_Dune_Character) == 0x000550, "Member 'UDbnoRevive_Ability_C::Target_As_Dune_Character' has a wrong offset!");

}

