#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ProjectileThrowableBase

#include "Basic.hpp"

#include "BP_ProjectileThrowableBase_classes.hpp"
#include "BP_ProjectileThrowableBase_parameters.hpp"


namespace SDK
{

// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.Apply Real Cooldown GE Internal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ProjectileThrowableBase_C::Apply_Real_Cooldown_GE_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "Apply Real Cooldown GE Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.ApplyRealCooldownGE
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_ProjectileThrowableBase_C::ApplyRealCooldownGE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "ApplyRealCooldownGE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.CacheTuningValues
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ProjectileThrowableBase_C::CacheTuningValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "CacheTuningValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.ClientDrawServerPos
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ProjectileThrowableBase_C::ClientDrawServerPos(const struct FVector& position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "ClientDrawServerPos");

	Params::BP_ProjectileThrowableBase_C_ClientDrawServerPos Parms{};

	Parms.position = std::move(position);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.Event EnterSuspensorFieldReduction
// (BlueprintCallable, BlueprintEvent)

void ABP_ProjectileThrowableBase_C::Event_EnterSuspensorFieldReduction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "Event EnterSuspensorFieldReduction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.Event EnterSuspensorFieldStabilization
// (BlueprintCallable, BlueprintEvent)

void ABP_ProjectileThrowableBase_C::Event_EnterSuspensorFieldStabilization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "Event EnterSuspensorFieldStabilization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.EventEnterSuspensorFieldAmplification
// (BlueprintCallable, BlueprintEvent)

void ABP_ProjectileThrowableBase_C::EventEnterSuspensorFieldAmplification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "EventEnterSuspensorFieldAmplification");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.EventExitSuspensorField
// (BlueprintCallable, BlueprintEvent)

void ABP_ProjectileThrowableBase_C::EventExitSuspensorField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "EventExitSuspensorField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.ExecuteUbergraph_BP_ProjectileThrowableBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ProjectileThrowableBase_C::ExecuteUbergraph_BP_ProjectileThrowableBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "ExecuteUbergraph_BP_ProjectileThrowableBase");

	Params::BP_ProjectileThrowableBase_C_ExecuteUbergraph_BP_ProjectileThrowableBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.Launch
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Velocity                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTransform&                Transform                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ProjectileThrowableBase_C::Launch(const struct FVector& Velocity, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "Launch");

	Params::BP_ProjectileThrowableBase_C_Launch Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.MulticastLaunch
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTransform&                Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ProjectileThrowableBase_C::MulticastLaunch(const struct FVector& Velocity, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "MulticastLaunch");

	Params::BP_ProjectileThrowableBase_C_MulticastLaunch Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.MulticastProjectileStopped
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ProjectileThrowableBase_C::MulticastProjectileStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "MulticastProjectileStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.OnProjectileBounced
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// const struct FVector&                   ImpactVelocity                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ProjectileThrowableBase_C::OnProjectileBounced(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "OnProjectileBounced");

	Params::BP_ProjectileThrowableBase_C_OnProjectileBounced Parms{};

	Parms.ImpactResult = std::move(ImpactResult);
	Parms.ImpactVelocity = std::move(ImpactVelocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.OnProjectileStopped
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_ProjectileThrowableBase_C::OnProjectileStopped(const struct FHitResult& ImpactResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "OnProjectileStopped");

	Params::BP_ProjectileThrowableBase_C_OnProjectileStopped Parms{};

	Parms.ImpactResult = std::move(ImpactResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_ProjectileThrowableBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_ProjectileThrowableBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.GetProjectileRadius
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_ProjectileThrowableBase_C::GetProjectileRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "GetProjectileRadius");

	Params::BP_ProjectileThrowableBase_C_GetProjectileRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C.IsValidLandingSpot
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_ProjectileThrowableBase_C::IsValidLandingSpot(const struct FHitResult& Hit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ProjectileThrowableBase_C", "IsValidLandingSpot");

	Params::BP_ProjectileThrowableBase_C_IsValidLandingSpot Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

