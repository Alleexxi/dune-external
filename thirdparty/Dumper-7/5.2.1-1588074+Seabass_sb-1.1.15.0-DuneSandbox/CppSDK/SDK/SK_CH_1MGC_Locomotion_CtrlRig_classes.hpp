#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SK_CH_1MGC_Locomotion_CtrlRig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// RigVMMemoryStorageGeneratorClass SK_CH_1MGC_Locomotion_CtrlRig.RigVMMemory_Work
// 0x19B0 (0x19E0 - 0x0030)
class SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Element; // 0x0030(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_Result;     // 0x0040(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_Result;                   // 0x0060(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_Result;                  // 0x0064(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_A;                       // 0x0068(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_Buffer;                   // 0x0070(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_LastInsertIndex;          // 0x0080(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__IO; // 0x0090(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_OffsetTransform__IO; // 0x00B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_CachedIndex;   // 0x0110(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_4_Items__IO;        // 0x0120(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Index; // 0x0130(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Count; // 0x0134(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Ratio; // 0x0138(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun; // 0x013C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_Result;   // 0x0150(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_Result;                 // 0x0170(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Result;                // 0x0174(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_Result;     // 0x0178(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_Result;                   // 0x0190(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x01F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x0250(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_Global;           // 0x0260(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__IO;              // 0x0278(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_PrimaryCachedSpace;       // 0x02C0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_SecondaryCachedSpace;     // 0x02D0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_bIsInitialized;           // 0x02E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_Value;      // 0x02F0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Value;                 // 0x0310(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_Buffer;                 // 0x0318(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_LastInsertIndex;        // 0x0328(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_Result;       // 0x0338(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_Value;        // 0x0350(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_Rotator__IO; // 0x0370(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SetTransform_Value__IO;               // 0x0390(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_CachedIndex;             // 0x03F0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_1_Result; // 0x0400(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_1_Result;               // 0x0420(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_Result;              // 0x0424(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_1_Result;   // 0x0428(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_1_Result;                 // 0x0440(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x04A0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x0500(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_1_Global;         // 0x0510(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_Primary__IO;            // 0x0528(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_PrimaryCachedSpace;     // 0x0570(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_SecondaryCachedSpace;   // 0x0580(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_1_bIsInitialized;         // 0x0590(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_1_Value;    // 0x05A0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_Value;               // 0x05C0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C4[0x4];                                      // 0x05C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_1_Buffer;               // 0x05C8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_1_LastInsertIndex;      // 0x05D8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_2_Result;     // 0x05E8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_2_Value;      // 0x0600(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_1_Rotator__IO; // 0x0620(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_638[0x8];                                      // 0x0638(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SetTransform_1_Value__IO;             // 0x0640(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_1_CachedIndex;           // 0x06A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_2_Result; // 0x06B0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_2_Result;               // 0x06D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_Result;              // 0x06D4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_2_Result;   // 0x06D8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_2_Result;                 // 0x06F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_Transform;     // 0x0750(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_CachedIndex;   // 0x07B0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_2_Global;         // 0x07C0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_2_Primary__IO;            // 0x07D8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_PrimaryCachedSpace;     // 0x0820(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_SecondaryCachedSpace;   // 0x0830(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_2_bIsInitialized;         // 0x0840(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_2_Value;    // 0x0850(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_Value;               // 0x0870(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_874[0x4];                                      // 0x0874(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_2_Buffer;               // 0x0878(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_2_LastInsertIndex;      // 0x0888(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_3_Result;     // 0x0898(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_3_Value;      // 0x08B0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_2_Rotator__IO; // 0x08D0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_8E8[0x8];                                      // 0x08E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SetTransform_2_Value__IO;             // 0x08F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_2_CachedIndex;           // 0x0950(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_3_Result; // 0x0960(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_3_Result;               // 0x0980(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_Result;              // 0x0984(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_3_Result;   // 0x0988(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_3_Result;                 // 0x09A0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_Transform;     // 0x0A00(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_CachedIndex;   // 0x0A60(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_3_Global;         // 0x0A70(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_3_Primary__IO;            // 0x0A88(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_3_PrimaryCachedSpace;     // 0x0AD0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_3_SecondaryCachedSpace;   // 0x0AE0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_3_bIsInitialized;         // 0x0AF0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_3_Value;    // 0x0B00(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_Value;               // 0x0B20(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B24[0x4];                                      // 0x0B24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_3_Buffer;               // 0x0B28(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_3_LastInsertIndex;      // 0x0B38(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_4_Result;     // 0x0B48(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_4_Value;      // 0x0B60(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_3_Rotator__IO; // 0x0B80(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_B98[0x8];                                      // 0x0B98(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SetTransform_3_Value__IO;             // 0x0BA0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_3_CachedIndex;           // 0x0C00(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_4_Result; // 0x0C10(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_4_Result;               // 0x0C30(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Result;              // 0x0C34(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_4_Result;   // 0x0C38(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_4_Result;                 // 0x0C50(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_4_Transform;     // 0x0CB0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_4_CachedIndex;   // 0x0D10(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_4_Global;         // 0x0D20(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_4_Primary__IO;            // 0x0D38(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_4_PrimaryCachedSpace;     // 0x0D80(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_4_SecondaryCachedSpace;   // 0x0D90(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_4_bIsInitialized;         // 0x0DA0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_4_Value;    // 0x0DB0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Value;               // 0x0DD0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD4[0x4];                                      // 0x0DD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_4_Buffer;               // 0x0DD8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_4_LastInsertIndex;      // 0x0DE8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_5_Result;     // 0x0DF8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_5_Value;      // 0x0E10(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_4_Rotator__IO; // 0x0E30(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_E48[0x8];                                      // 0x0E48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SetTransform_4_Value__IO;             // 0x0E50(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_4_CachedIndex;           // 0x0EB0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_1_1_Result; // 0x0EC0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_1_1_Result;             // 0x0EE0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_1_Result;            // 0x0EE4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_1_1_Result; // 0x0EE8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_1_1_Result;               // 0x0F00(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_1_Transform;   // 0x0F60(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_1_CachedIndex; // 0x0FC0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_1_1_Global;       // 0x0FD0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_1_Primary__IO;          // 0x0FE8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_1_PrimaryCachedSpace;   // 0x1030(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_1_SecondaryCachedSpace; // 0x1040(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_1_1_bIsInitialized;       // 0x1050(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_1_1_Value;  // 0x1060(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_1_Value;             // 0x1080(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1084[0x4];                                     // 0x1084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_1_1_Buffer;             // 0x1088(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_1_1_LastInsertIndex;    // 0x1098(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_2_1_Result;   // 0x10A8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_2_1_Value;    // 0x10C0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_1_1_Rotator__IO; // 0x10E0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_10F8[0x8];                                     // 0x10F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SetTransform_1_1_Value__IO;           // 0x1100(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_1_1_CachedIndex;         // 0x1160(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_2_1_Result; // 0x1170(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_2_1_Result;             // 0x1190(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_1_Result;            // 0x1194(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_2_1_Result; // 0x1198(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_2_1_Result;               // 0x11B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_1_Transform;   // 0x1210(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_1_CachedIndex; // 0x1270(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_2_1_Global;       // 0x1280(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_2_1_Primary__IO;          // 0x1298(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_1_PrimaryCachedSpace;   // 0x12E0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_1_SecondaryCachedSpace; // 0x12F0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_2_1_bIsInitialized;       // 0x1300(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_2_1_Value;  // 0x1310(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_1_Value;             // 0x1330(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1334[0x4];                                     // 0x1334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_2_1_Buffer;             // 0x1338(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_2_1_LastInsertIndex;    // 0x1348(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_3_1_Result;   // 0x1358(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_3_1_Value;    // 0x1370(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_2_1_Rotator__IO; // 0x1390(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	double                                        RigVMModel___Add_Result;                           // 0x13A8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Add_A;                                // 0x13B0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Clamp_Result;                         // 0x13B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_Result;                      // 0x13BC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFilter_Result;                  // 0x13C0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFilter_Value;                   // 0x13C4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TArray<float>>                         RigVMModel___KalmanFilter_Buffer;                  // 0x13C8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFilter_LastInsertIndex;         // 0x13D8(0x0010)(Edit, EditConst, NonTransactional)
	double                                        RigVMModel___Add_B;                                // 0x13E8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___SetTransform_2_1_Value__IO;           // 0x13F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_2_1_CachedIndex;         // 0x1450(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_3_1_Result; // 0x1460(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_3_1_Result;             // 0x1480(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_1_Result;            // 0x1484(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_3_1_Result; // 0x1488(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_3_1_Result;               // 0x14A0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_1_Transform;   // 0x1500(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_1_CachedIndex; // 0x1560(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_3_1_Global;       // 0x1570(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_3_1_Primary__IO;          // 0x1588(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_3_1_PrimaryCachedSpace;   // 0x15D0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_3_1_SecondaryCachedSpace; // 0x15E0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_3_1_bIsInitialized;       // 0x15F0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_3_1_Value;  // 0x1600(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_1_Value;             // 0x1620(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1624[0x4];                                     // 0x1624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_3_1_Buffer;             // 0x1628(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_3_1_LastInsertIndex;    // 0x1638(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_4_1_Result;   // 0x1648(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_4_1_Value;    // 0x1660(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_3_1_Rotator__IO; // 0x1680(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	double                                        RigVMModel___Add_1_Result;                         // 0x1698(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Add_1_A;                              // 0x16A0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Clamp_1_Result;                       // 0x16A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_1_Result;                    // 0x16AC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Add_1_B;                              // 0x16B0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16B8[0x8];                                     // 0x16B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SetTransform_3_1_Value__IO;           // 0x16C0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_3_1_CachedIndex;         // 0x1720(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___ArrayIterator_Element;                // 0x1730(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_173C[0x4];                                     // 0x173C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_Result;   // 0x1740(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_Rotator__IO; // 0x1760(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_1778[0x8];                                     // 0x1778(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO; // 0x1780(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_1_CachedIndex; // 0x17E0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_Items__IO;          // 0x17F0(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___ArrayIterator_Index;                  // 0x1800(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___ArrayIterator_Count;                  // 0x1804(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___ArrayIterator_Ratio;                  // 0x1808(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___ArrayIterator_BlockToRun;             // 0x180C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___ArrayIterator_2_Element;              // 0x1814(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_1_Result; // 0x1820(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO; // 0x1840(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_1858[0x8];                                     // 0x1858(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_1_1_OffsetTransform__IO; // 0x1860(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_1_1_CachedIndex; // 0x18C0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_1_Items__IO;        // 0x18D0(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___ArrayIterator_2_Index;                // 0x18E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___ArrayIterator_2_Count;                // 0x18E4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___ArrayIterator_2_Ratio;                // 0x18E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___ArrayIterator_2_BlockToRun;           // 0x18EC(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___ArrayIterator_3_Element;              // 0x18F4(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_2_Result; // 0x1900(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_2_Rotator__IO; // 0x1920(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_1938[0x8];                                     // 0x1938(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_1_2_OffsetTransform__IO; // 0x1940(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_1_2_CachedIndex; // 0x19A0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_2_Items__IO;        // 0x19B0(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___ArrayIterator_3_Index;                // 0x19C0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___ArrayIterator_3_Count;                // 0x19C4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___ArrayIterator_3_Ratio;                // 0x19C8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___ArrayIterator_3_BlockToRun;           // 0x19CC(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_CH_1MGC_Locomotion_CtrlRig.RigVMMemory_Work", true>();
	}
	static class SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work) == 0x0019E0, "Wrong size on SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Element) == 0x000030, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Element' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Result) == 0x000040, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Result) == 0x000060, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatMul_Result) == 0x000064, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatMul_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatMul_A) == 0x000068, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatMul_A' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Buffer) == 0x000070, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_LastInsertIndex) == 0x000080, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Rotator__IO) == 0x000090, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_OffsetTransform__IO) == 0x0000B0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_CachedIndex) == 0x000110, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_4_Items__IO) == 0x000120, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_4_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Index) == 0x000130, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Index' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Count) == 0x000134, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Count' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Ratio) == 0x000138, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Ratio' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun) == 0x00013C, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Result) == 0x000150, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_Result) == 0x000170, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Result) == 0x000174, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Result) == 0x000178, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Result) == 0x000190, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x0001F0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x000250, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_Global) == 0x000260, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_Global' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Primary__IO) == 0x000278, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_PrimaryCachedSpace) == 0x0002C0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_SecondaryCachedSpace) == 0x0002D0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_bIsInitialized) == 0x0002E0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Value) == 0x0002F0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Value) == 0x000310, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_Buffer) == 0x000318, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_LastInsertIndex) == 0x000328, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Result) == 0x000338, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Value) == 0x000350, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Rotator__IO) == 0x000370, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_Value__IO) == 0x000390, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_CachedIndex) == 0x0003F0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_1_Result) == 0x000400, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_1_Result) == 0x000420, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_Result) == 0x000424, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_Result) == 0x000428, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_Result) == 0x000440, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_Transform) == 0x0004A0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_CachedIndex) == 0x000500, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_1_Global) == 0x000510, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_1_Global' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_Primary__IO) == 0x000528, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_PrimaryCachedSpace) == 0x000570, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_SecondaryCachedSpace) == 0x000580, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_bIsInitialized) == 0x000590, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_Value) == 0x0005A0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_Value) == 0x0005C0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_1_Buffer) == 0x0005C8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_1_LastInsertIndex) == 0x0005D8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_Result) == 0x0005E8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_Value) == 0x000600, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_1_Rotator__IO) == 0x000620, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_1_Value__IO) == 0x000640, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_1_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_1_CachedIndex) == 0x0006A0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_2_Result) == 0x0006B0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_2_Result) == 0x0006D0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_Result) == 0x0006D4, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_2_Result) == 0x0006D8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_Result) == 0x0006F0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_Transform) == 0x000750, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_CachedIndex) == 0x0007B0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_2_Global) == 0x0007C0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_2_Global' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_Primary__IO) == 0x0007D8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_PrimaryCachedSpace) == 0x000820, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_SecondaryCachedSpace) == 0x000830, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_bIsInitialized) == 0x000840, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_2_Value) == 0x000850, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_2_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_Value) == 0x000870, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_2_Buffer) == 0x000878, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_2_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_2_LastInsertIndex) == 0x000888, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_2_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_Result) == 0x000898, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_Value) == 0x0008B0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_2_Rotator__IO) == 0x0008D0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_2_Value__IO) == 0x0008F0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_2_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_2_CachedIndex) == 0x000950, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_3_Result) == 0x000960, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_3_Result) == 0x000980, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_Result) == 0x000984, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_3_Result) == 0x000988, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_Result) == 0x0009A0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_Transform) == 0x000A00, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_Transform' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_CachedIndex) == 0x000A60, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_3_Global) == 0x000A70, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_3_Global' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_Primary__IO) == 0x000A88, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_PrimaryCachedSpace) == 0x000AD0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_SecondaryCachedSpace) == 0x000AE0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_bIsInitialized) == 0x000AF0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_3_Value) == 0x000B00, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_3_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_Value) == 0x000B20, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_3_Buffer) == 0x000B28, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_3_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_3_LastInsertIndex) == 0x000B38, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_3_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_4_Result) == 0x000B48, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_4_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_4_Value) == 0x000B60, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_4_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_3_Rotator__IO) == 0x000B80, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_3_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_3_Value__IO) == 0x000BA0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_3_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_3_CachedIndex) == 0x000C00, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_4_Result) == 0x000C10, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_4_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_4_Result) == 0x000C30, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_4_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_Result) == 0x000C34, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_4_Result) == 0x000C38, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_4_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_Result) == 0x000C50, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_Transform) == 0x000CB0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_Transform' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_CachedIndex) == 0x000D10, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_4_Global) == 0x000D20, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_4_Global' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_Primary__IO) == 0x000D38, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_PrimaryCachedSpace) == 0x000D80, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_SecondaryCachedSpace) == 0x000D90, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_bIsInitialized) == 0x000DA0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_4_Value) == 0x000DB0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_4_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_Value) == 0x000DD0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_4_Buffer) == 0x000DD8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_4_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_4_LastInsertIndex) == 0x000DE8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_4_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_5_Result) == 0x000DF8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_5_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_5_Value) == 0x000E10, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_5_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_4_Rotator__IO) == 0x000E30, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_4_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_4_Value__IO) == 0x000E50, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_4_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_4_CachedIndex) == 0x000EB0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_1_1_Result) == 0x000EC0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_1_1_Result) == 0x000EE0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_1_Result) == 0x000EE4, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_1_Result) == 0x000EE8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_Result) == 0x000F00, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_1_Transform) == 0x000F60, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_1_CachedIndex) == 0x000FC0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_1_1_Global) == 0x000FD0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_1_1_Global' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_Primary__IO) == 0x000FE8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_PrimaryCachedSpace) == 0x001030, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_SecondaryCachedSpace) == 0x001040, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_1_bIsInitialized) == 0x001050, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_1_Value) == 0x001060, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_1_Value) == 0x001080, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_1_1_Buffer) == 0x001088, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_1_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_1_1_LastInsertIndex) == 0x001098, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_1_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_1_Result) == 0x0010A8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_1_Value) == 0x0010C0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_1_1_Rotator__IO) == 0x0010E0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_1_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_1_1_Value__IO) == 0x001100, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_1_1_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_1_1_CachedIndex) == 0x001160, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_2_1_Result) == 0x001170, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_2_1_Result) == 0x001190, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_1_Result) == 0x001194, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_2_1_Result) == 0x001198, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_1_Result) == 0x0011B0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_1_Transform) == 0x001210, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_1_CachedIndex) == 0x001270, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_2_1_Global) == 0x001280, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_2_1_Global' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_1_Primary__IO) == 0x001298, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_1_PrimaryCachedSpace) == 0x0012E0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_1_SecondaryCachedSpace) == 0x0012F0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_1_bIsInitialized) == 0x001300, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_2_1_Value) == 0x001310, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_2_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_1_Value) == 0x001330, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_2_1_Buffer) == 0x001338, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_2_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_2_1_LastInsertIndex) == 0x001348, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_2_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_1_Result) == 0x001358, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_1_Value) == 0x001370, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_2_1_Rotator__IO) == 0x001390, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_2_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_Result) == 0x0013A8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_A) == 0x0013B0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_A' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Clamp_Result) == 0x0013B8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Clamp_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_Result) == 0x0013BC, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFilter_Result) == 0x0013C0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFilter_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFilter_Value) == 0x0013C4, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFilter_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFilter_Buffer) == 0x0013C8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFilter_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFilter_LastInsertIndex) == 0x0013D8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFilter_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_B) == 0x0013E8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_B' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_2_1_Value__IO) == 0x0013F0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_2_1_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_2_1_CachedIndex) == 0x001450, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_3_1_Result) == 0x001460, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_3_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_3_1_Result) == 0x001480, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_3_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_1_Result) == 0x001484, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_3_1_Result) == 0x001488, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_3_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_1_Result) == 0x0014A0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_1_Transform) == 0x001500, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_1_CachedIndex) == 0x001560, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_3_1_Global) == 0x001570, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_3_1_Global' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_1_Primary__IO) == 0x001588, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_1_PrimaryCachedSpace) == 0x0015D0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_1_SecondaryCachedSpace) == 0x0015E0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_1_bIsInitialized) == 0x0015F0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_3_1_Value) == 0x001600, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_3_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_1_Value) == 0x001620, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_3_1_Buffer) == 0x001628, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_3_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_3_1_LastInsertIndex) == 0x001638, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_3_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_4_1_Result) == 0x001648, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_4_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_4_1_Value) == 0x001660, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_4_1_Value' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_3_1_Rotator__IO) == 0x001680, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_3_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_1_Result) == 0x001698, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_1_A) == 0x0016A0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_1_A' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Clamp_1_Result) == 0x0016A8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Clamp_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_1_Result) == 0x0016AC, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_1_B) == 0x0016B0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_1_B' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_3_1_Value__IO) == 0x0016C0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_3_1_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_3_1_CachedIndex) == 0x001720, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_3_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_Element) == 0x001730, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_Element' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_Result) == 0x001740, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_Rotator__IO) == 0x001760, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO) == 0x001780, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_CachedIndex) == 0x0017E0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_Items__IO) == 0x0017F0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_Index) == 0x001800, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_Index' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_Count) == 0x001804, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_Count' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_Ratio) == 0x001808, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_Ratio' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_BlockToRun) == 0x00180C, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_2_Element) == 0x001814, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_2_Element' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_Result) == 0x001820, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO) == 0x001840, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_1_OffsetTransform__IO) == 0x001860, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_1_CachedIndex) == 0x0018C0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_1_Items__IO) == 0x0018D0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_1_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_2_Index) == 0x0018E0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_2_Index' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_2_Count) == 0x0018E4, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_2_Count' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_2_Ratio) == 0x0018E8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_2_Ratio' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_2_BlockToRun) == 0x0018EC, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_2_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_3_Element) == 0x0018F4, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_3_Element' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_2_Result) == 0x001900, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_2_Result' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_2_Rotator__IO) == 0x001920, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_2_OffsetTransform__IO) == 0x001940, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_2_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_2_CachedIndex) == 0x0019A0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_2_Items__IO) == 0x0019B0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_2_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_3_Index) == 0x0019C0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_3_Index' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_3_Count) == 0x0019C4, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_3_Count' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_3_Ratio) == 0x0019C8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_3_Ratio' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ArrayIterator_3_BlockToRun) == 0x0019CC, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ArrayIterator_3_BlockToRun' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_CH_1MGC_Locomotion_CtrlRig.RigVMMemory_Literal
// 0x0340 (0x0370 - 0x0030)
class SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FTransform                             RigVMModel___OffsetTransformForItem_OffsetTransform__Const; // 0x0030(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__Const; // 0x0090(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatMul_B__Const;                // 0x00A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___KalmanFloat_BufferSize__Const;        // 0x00AC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___OffsetTransformForItem_Weight__Const; // 0x00B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const; // 0x00B4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_4_Items__Const;     // 0x00B8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___SetTransform_Item__Const;             // 0x00C8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___SetTransform_Space__Const;            // 0x00D4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___SetTransform_bInitial__Const;         // 0x00D5(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__Const;           // 0x00D8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Secondary__Const;         // 0x0120(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimBone_DebugSettings         RigVMModel___AimBoneMath_DebugSettings__Const;     // 0x0170(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_Minimum__Const;        // 0x01E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Maximum__Const;        // 0x01E4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___KalmanFloat_1_BufferSize__Const;      // 0x01E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SetTransform_1_Item__Const;           // 0x01EC(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SetTransform_2_Item__Const;           // 0x01F8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_2_Primary__Const;         // 0x0208(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_2_Minimum__Const;      // 0x0250(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_Maximum__Const;      // 0x0254(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SetTransform_3_Item__Const;           // 0x0258(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SetTransform_4_Item__Const;           // 0x0264(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_4_Primary__Const;         // 0x0270(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_4_Secondary__Const;       // 0x02B8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_4_Minimum__Const;      // 0x0300(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Maximum__Const;      // 0x0304(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SetTransform_1_1_Item__Const;         // 0x0308(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SetTransform_2_1_Item__Const;         // 0x0314(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Clamp_Maximum__Const;                 // 0x0320(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SetTransform_3_1_Item__Const;         // 0x0324(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_1_B__Const;                  // 0x0330(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_Items__Const;       // 0x0338(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_1_Items__Const;     // 0x0348(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_2_Items__Const;     // 0x0358(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_CH_1MGC_Locomotion_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal) == 0x000370, "Wrong size on SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_OffsetTransform__Const) == 0x000030, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathQuaternionFromRotator_Rotator__Const) == 0x000090, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathQuaternionFromRotator_Rotator__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatMul_B__Const) == 0x0000A8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatMul_B__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_BufferSize__Const) == 0x0000AC, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_Weight__Const) == 0x0000B0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_Weight__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const) == 0x0000B4, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_4_Items__Const) == 0x0000B8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_4_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_Item__Const) == 0x0000C8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_Space__Const) == 0x0000D4, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_Space__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_bInitial__Const) == 0x0000D5, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_bInitial__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Primary__Const) == 0x0000D8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Secondary__Const) == 0x000120, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_DebugSettings__Const) == 0x000170, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Minimum__Const) == 0x0001E0, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Maximum__Const) == 0x0001E4, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_1_BufferSize__Const) == 0x0001E8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_1_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_1_Item__Const) == 0x0001EC, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_2_Item__Const) == 0x0001F8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_2_Primary__Const) == 0x000208, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_2_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_2_Minimum__Const) == 0x000250, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_2_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_2_Maximum__Const) == 0x000254, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_2_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_3_Item__Const) == 0x000258, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_3_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_4_Item__Const) == 0x000264, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_4_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_4_Primary__Const) == 0x000270, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_4_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_4_Secondary__Const) == 0x0002B8, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_4_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_4_Minimum__Const) == 0x000300, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_4_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_4_Maximum__Const) == 0x000304, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_4_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_1_1_Item__Const) == 0x000308, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_2_1_Item__Const) == 0x000314, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_2_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___Clamp_Maximum__Const) == 0x000320, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___Clamp_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_3_1_Item__Const) == 0x000324, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_3_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___Multiply_1_B__Const) == 0x000330, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___Multiply_1_B__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_Items__Const) == 0x000338, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_1_Items__Const) == 0x000348, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_1_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_2_Items__Const) == 0x000358, "Member 'SK_CH_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_2_Items__Const' has a wrong offset!");

// ControlRigBlueprintGeneratedClass SK_CH_1MGC_Locomotion_CtrlRig.SK_CH_1MGC_Locomotion_CtrlRig_C
// 0x00E0 (0x04E0 - 0x0400)
class USK_CH_1MGC_Locomotion_CtrlRig_C final : public UControlRig
{
public:
	double                                        Steering;                                          // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IK_Target_FL;                                      // 0x0408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IK_Target_FR;                                      // 0x0420(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IK_Target_RL;                                      // 0x0438(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IK_Target_RR;                                      // 0x0450(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FL_Rotation;                                       // 0x0468(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FR_Rotation;                                       // 0x0480(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RL_Rotation;                                       // 0x0498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RR_Rotation;                                       // 0x04B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotation_FL;                                  // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotation_FR;                                  // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotation_Rear;                                // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SK_CH_1MGC_Locomotion_CtrlRig_C">();
	}
	static class USK_CH_1MGC_Locomotion_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USK_CH_1MGC_Locomotion_CtrlRig_C>();
	}
};
static_assert(alignof(USK_CH_1MGC_Locomotion_CtrlRig_C) == 0x000008, "Wrong alignment on USK_CH_1MGC_Locomotion_CtrlRig_C");
static_assert(sizeof(USK_CH_1MGC_Locomotion_CtrlRig_C) == 0x0004E0, "Wrong size on USK_CH_1MGC_Locomotion_CtrlRig_C");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, Steering) == 0x000400, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::Steering' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, IK_Target_FL) == 0x000408, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::IK_Target_FL' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, IK_Target_FR) == 0x000420, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::IK_Target_FR' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, IK_Target_RL) == 0x000438, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::IK_Target_RL' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, IK_Target_RR) == 0x000450, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::IK_Target_RR' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, FL_Rotation) == 0x000468, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::FL_Rotation' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, FR_Rotation) == 0x000480, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::FR_Rotation' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, RL_Rotation) == 0x000498, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::RL_Rotation' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, RR_Rotation) == 0x0004B0, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::RR_Rotation' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, WheelRotation_FL) == 0x0004C8, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::WheelRotation_FL' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, WheelRotation_FR) == 0x0004D0, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::WheelRotation_FR' has a wrong offset!");
static_assert(offsetof(USK_CH_1MGC_Locomotion_CtrlRig_C, WheelRotation_Rear) == 0x0004D8, "Member 'USK_CH_1MGC_Locomotion_CtrlRig_C::WheelRotation_Rear' has a wrong offset!");

}

