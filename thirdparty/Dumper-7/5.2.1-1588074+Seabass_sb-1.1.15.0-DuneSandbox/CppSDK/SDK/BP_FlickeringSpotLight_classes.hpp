#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlickeringSpotLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FlickeringSpotLight.BP_FlickeringSpotLight_C
// 0x0108 (0x0458 - 0x0350)
class ABP_FlickeringSpotLight_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_VFX_Env_Ecolab_LightTorch_01;                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_LightConeSpotlight_Component_C*     BP_LightConeSpotlight_Component;                   // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Spotlight_Cone_Mesh;                               // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Static_Mesh;                                       // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Ref_DynamicMaterial;                               // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          LightFlickeringON_;                                // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxLightIntensity;                                 // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinLightIntensity;                                 // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxEmissiveIntensity;                              // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlickeringDelayMax;                                // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinEmissiveIntensity;                              // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlickeringDelayMin;                                // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EmissiveMaterialIndex;                             // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EmissiveColorParameterName;                        // 0x03D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EmissiveIntensityParameterName;                    // 0x03DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          AD_FlickerOff;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          AD_FlickerOn;                                      // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        OuterConeAngle;                                    // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Ref_DynamicMaterial_Spotlight;                     // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AttenuationRadius;                                 // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x040C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerConeAngle;                                    // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Atmospheric_Intensity;                             // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Atmospheric_Source_Intensity;                      // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     SpotlightMaterial;                                 // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          TurnOffLightConeDuringDay_;                        // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LengthOfTransition;                                // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TransitionRandomizer;                              // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HourShift;                                         // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinimumDayIntensity;                               // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_FlickeringSpotLight(int32 EntryPoint);
	void Enable_Flicker();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FlickeringSpotLight_C">();
	}
	static class ABP_FlickeringSpotLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FlickeringSpotLight_C>();
	}
};
static_assert(alignof(ABP_FlickeringSpotLight_C) == 0x000008, "Wrong alignment on ABP_FlickeringSpotLight_C");
static_assert(sizeof(ABP_FlickeringSpotLight_C) == 0x000458, "Wrong size on ABP_FlickeringSpotLight_C");
static_assert(offsetof(ABP_FlickeringSpotLight_C, UberGraphFrame) == 0x000350, "Member 'ABP_FlickeringSpotLight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, NS_VFX_Env_Ecolab_LightTorch_01) == 0x000358, "Member 'ABP_FlickeringSpotLight_C::NS_VFX_Env_Ecolab_LightTorch_01' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, BP_LightConeSpotlight_Component) == 0x000360, "Member 'ABP_FlickeringSpotLight_C::BP_LightConeSpotlight_Component' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, Spotlight_Cone_Mesh) == 0x000368, "Member 'ABP_FlickeringSpotLight_C::Spotlight_Cone_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, SpotLight) == 0x000370, "Member 'ABP_FlickeringSpotLight_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, TextRender) == 0x000378, "Member 'ABP_FlickeringSpotLight_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, Static_Mesh) == 0x000380, "Member 'ABP_FlickeringSpotLight_C::Static_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, Scene) == 0x000388, "Member 'ABP_FlickeringSpotLight_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, Ref_DynamicMaterial) == 0x000390, "Member 'ABP_FlickeringSpotLight_C::Ref_DynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, LightFlickeringON_) == 0x000398, "Member 'ABP_FlickeringSpotLight_C::LightFlickeringON_' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, MaxLightIntensity) == 0x0003A0, "Member 'ABP_FlickeringSpotLight_C::MaxLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, MinLightIntensity) == 0x0003A8, "Member 'ABP_FlickeringSpotLight_C::MinLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, MaxEmissiveIntensity) == 0x0003B0, "Member 'ABP_FlickeringSpotLight_C::MaxEmissiveIntensity' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, FlickeringDelayMax) == 0x0003B8, "Member 'ABP_FlickeringSpotLight_C::FlickeringDelayMax' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, MinEmissiveIntensity) == 0x0003C0, "Member 'ABP_FlickeringSpotLight_C::MinEmissiveIntensity' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, FlickeringDelayMin) == 0x0003C8, "Member 'ABP_FlickeringSpotLight_C::FlickeringDelayMin' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, EmissiveMaterialIndex) == 0x0003D0, "Member 'ABP_FlickeringSpotLight_C::EmissiveMaterialIndex' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, EmissiveColorParameterName) == 0x0003D4, "Member 'ABP_FlickeringSpotLight_C::EmissiveColorParameterName' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, EmissiveIntensityParameterName) == 0x0003DC, "Member 'ABP_FlickeringSpotLight_C::EmissiveIntensityParameterName' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, AD_FlickerOff) == 0x0003E8, "Member 'ABP_FlickeringSpotLight_C::AD_FlickerOff' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, AD_FlickerOn) == 0x0003F0, "Member 'ABP_FlickeringSpotLight_C::AD_FlickerOn' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, OuterConeAngle) == 0x0003F8, "Member 'ABP_FlickeringSpotLight_C::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, Ref_DynamicMaterial_Spotlight) == 0x000400, "Member 'ABP_FlickeringSpotLight_C::Ref_DynamicMaterial_Spotlight' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, AttenuationRadius) == 0x000408, "Member 'ABP_FlickeringSpotLight_C::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, LightColor) == 0x00040C, "Member 'ABP_FlickeringSpotLight_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, InnerConeAngle) == 0x00041C, "Member 'ABP_FlickeringSpotLight_C::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, Atmospheric_Intensity) == 0x000420, "Member 'ABP_FlickeringSpotLight_C::Atmospheric_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, Atmospheric_Source_Intensity) == 0x000424, "Member 'ABP_FlickeringSpotLight_C::Atmospheric_Source_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, SpotlightMaterial) == 0x000428, "Member 'ABP_FlickeringSpotLight_C::SpotlightMaterial' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, TurnOffLightConeDuringDay_) == 0x000430, "Member 'ABP_FlickeringSpotLight_C::TurnOffLightConeDuringDay_' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, LengthOfTransition) == 0x000438, "Member 'ABP_FlickeringSpotLight_C::LengthOfTransition' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, TransitionRandomizer) == 0x000440, "Member 'ABP_FlickeringSpotLight_C::TransitionRandomizer' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, HourShift) == 0x000448, "Member 'ABP_FlickeringSpotLight_C::HourShift' has a wrong offset!");
static_assert(offsetof(ABP_FlickeringSpotLight_C, MinimumDayIntensity) == 0x000450, "Member 'ABP_FlickeringSpotLight_C::MinimumDayIntensity' has a wrong offset!");

}

