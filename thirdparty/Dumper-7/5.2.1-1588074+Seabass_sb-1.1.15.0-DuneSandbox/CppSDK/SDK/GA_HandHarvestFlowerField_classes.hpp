#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_HandHarvestFlowerField

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_HandHarvestFlowerField.GA_HandHarvestFlowerField_C
// 0x0088 (0x05B8 - 0x0530)
class UGA_HandHarvestFlowerField_C final : public UDuneGameplayAction
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTag                           CancelAbilityTag;                                  // 0x0538(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CompleteAbilityTag;                                // 0x0540(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage_HandHarvest;                               // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        InteractRange;                                     // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HandWaterThresholdGain;                            // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HarvestTimerHandle;                                // 0x0560(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         HarvestInstigator;                                 // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UHarvestableInstancedMeshComponent*     HarvestTarget;                                     // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FETutorialEnum                         DewHandHarvestTutorial;                            // 0x0578(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HarvestRate;                                       // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_584[0x4];                                      // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetAmount;                                      // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HydrationPerTick;                                  // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AbilityDuration;                                   // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldUnholster;                                   // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MontageSection_Satisfied;                          // 0x05A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MontageSection_End;                                // 0x05AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void StopHarvesting();
	void StartHandHarvesting(class ADuneCharacter* Instigator, class UHarvestableInstancedMeshComponent* Target);
	void ShowDewHandHarvestTutorial(class ADunePlayerCharacter* Character);
	void ShouldTryUnholsterCallback();
	void SetGainThreshold(class ADunePlayerCharacter* Character);
	void RemoveInputContext(class APlayerController* Controller);
	void OnInterrupted_E36A9CD04DCB6E7F79F65C879414DBEF();
	void OnCompleted_E36A9CD04DCB6E7F79F65C879414DBEF();
	void OnCancelled_E36A9CD04DCB6E7F79F65C879414DBEF();
	void OnBlendOut_E36A9CD04DCB6E7F79F65C879414DBEF();
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_CommitExecute();
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_ActivateAbility();
	void InterruptHarvestingEvent();
	void HarvestEvent();
	void ExecuteUbergraph_GA_HandHarvestFlowerField(int32 EntryPoint);
	void EventReceived_E03B6B6F488C09B0FACF6FA3B4C97C5D(const struct FGameplayEventData& Payload);
	void EventReceived_07FF8ECC4C37C33FC874A2A60E457685(const struct FGameplayEventData& Payload);
	void AddInputContext(class APlayerController* Controller);

	void ValidateTargetCharacter(class ADuneCharacter* Character, bool* Valid) const;
	void ValidateTarget(class UHarvestableInstancedMeshComponent* Source, bool* Valid) const;
	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;
	void FindTarget(class ADuneCharacter* Instigator, class UHarvestableInstancedMeshComponent** Target) const;
	void FilterTargets(TArray<class AActor*>& Candidates, TArray<class UHarvestableInstancedMeshComponent*>* Targets) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_HandHarvestFlowerField_C">();
	}
	static class UGA_HandHarvestFlowerField_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_HandHarvestFlowerField_C>();
	}
};
static_assert(alignof(UGA_HandHarvestFlowerField_C) == 0x000008, "Wrong alignment on UGA_HandHarvestFlowerField_C");
static_assert(sizeof(UGA_HandHarvestFlowerField_C) == 0x0005B8, "Wrong size on UGA_HandHarvestFlowerField_C");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, UberGraphFrame) == 0x000530, "Member 'UGA_HandHarvestFlowerField_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, CancelAbilityTag) == 0x000538, "Member 'UGA_HandHarvestFlowerField_C::CancelAbilityTag' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, CompleteAbilityTag) == 0x000540, "Member 'UGA_HandHarvestFlowerField_C::CompleteAbilityTag' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, Montage_HandHarvest) == 0x000548, "Member 'UGA_HandHarvestFlowerField_C::Montage_HandHarvest' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, InteractRange) == 0x000550, "Member 'UGA_HandHarvestFlowerField_C::InteractRange' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, HandWaterThresholdGain) == 0x000558, "Member 'UGA_HandHarvestFlowerField_C::HandWaterThresholdGain' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, HarvestTimerHandle) == 0x000560, "Member 'UGA_HandHarvestFlowerField_C::HarvestTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, HarvestInstigator) == 0x000568, "Member 'UGA_HandHarvestFlowerField_C::HarvestInstigator' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, HarvestTarget) == 0x000570, "Member 'UGA_HandHarvestFlowerField_C::HarvestTarget' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, DewHandHarvestTutorial) == 0x000578, "Member 'UGA_HandHarvestFlowerField_C::DewHandHarvestTutorial' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, HarvestRate) == 0x000580, "Member 'UGA_HandHarvestFlowerField_C::HarvestRate' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, TargetAmount) == 0x000588, "Member 'UGA_HandHarvestFlowerField_C::TargetAmount' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, HydrationPerTick) == 0x000590, "Member 'UGA_HandHarvestFlowerField_C::HydrationPerTick' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, AbilityDuration) == 0x000598, "Member 'UGA_HandHarvestFlowerField_C::AbilityDuration' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, ShouldUnholster) == 0x0005A0, "Member 'UGA_HandHarvestFlowerField_C::ShouldUnholster' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, MontageSection_Satisfied) == 0x0005A4, "Member 'UGA_HandHarvestFlowerField_C::MontageSection_Satisfied' has a wrong offset!");
static_assert(offsetof(UGA_HandHarvestFlowerField_C, MontageSection_End) == 0x0005AC, "Member 'UGA_HandHarvestFlowerField_C::MontageSection_End' has a wrong offset!");

}

