#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Vehicle_Flying

#include "Basic.hpp"

#include "BPFL_Vehicle_Flying_classes.hpp"
#include "BPFL_Vehicle_Flying_parameters.hpp"


namespace SDK
{

// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.UpdateFlightMode
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EOrnithopterFlightMode                  NewFlightMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EOrnithopterFlightMode                  CurrentFlightMode                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EOrnithopterFlightMode*                 FlightMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bIsOSC                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Flying_C::UpdateFlightMode(EOrnithopterFlightMode NewFlightMode, EOrnithopterFlightMode CurrentFlightMode, class UObject* __WorldContext, EOrnithopterFlightMode* FlightMode, bool* bIsOSC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Flying_C", "UpdateFlightMode");

	Params::BPFL_Vehicle_Flying_C_UpdateFlightMode Parms{};

	Parms.NewFlightMode = NewFlightMode;
	Parms.CurrentFlightMode = CurrentFlightMode;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (FlightMode != nullptr)
		*FlightMode = Parms.FlightMode;

	if (bIsOSC != nullptr)
		*bIsOSC = Parms.bIsOSC;
}


// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.SetWingCollision
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADuneVehicle*                     Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOSC                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Flying_C::SetWingCollision(class ADuneVehicle* Target, bool IsOSC, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Flying_C", "SetWingCollision");

	Params::BPFL_Vehicle_Flying_C_SetWingCollision Parms{};

	Parms.Target = Target;
	Parms.IsOSC = IsOSC;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.GetQuicksandSinkDepth
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ADuneOrnithopter*                 Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 CurrentSinkDepth                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Flying_C::GetQuicksandSinkDepth(class ADuneOrnithopter* Target, class UObject* __WorldContext, double* CurrentSinkDepth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Flying_C", "GetQuicksandSinkDepth");

	Params::BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CurrentSinkDepth != nullptr)
		*CurrentSinkDepth = Parms.CurrentSinkDepth;
}


// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.ControlRigIKSolver
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDuneVehicleAnimInstance*         Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class FName                       FootBone                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const float                             IKTraceDistance                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LegOffset                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         LegTarget                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         FootTarget                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Flying_C::ControlRigIKSolver(class UDuneVehicleAnimInstance* Target, const class FName FootBone, const float IKTraceDistance, double LegOffset, class UObject* __WorldContext, struct FVector* LegTarget, struct FVector* FootTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Flying_C", "ControlRigIKSolver");

	Params::BPFL_Vehicle_Flying_C_ControlRigIKSolver Parms{};

	Parms.Target = Target;
	Parms.FootBone = FootBone;
	Parms.IKTraceDistance = IKTraceDistance;
	Parms.LegOffset = LegOffset;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (LegTarget != nullptr)
		*LegTarget = std::move(Parms.LegTarget);

	if (FootTarget != nullptr)
		*FootTarget = std::move(Parms.FootTarget);
}


// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.CalculateWingVariables
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FOrnithopterEffectsDriverComponent&OrnithopterEffectsDriverComponent                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// float                                   ForwardAxis                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StrafeAxis                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   UpAxis                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Yaw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EOrnithopterFlightMode                  CurrentFlightMode                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOSC                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  OscillationAmmount                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFloatSpringState&               ForwardSpringState                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FFloatSpringState&               StrafeSpringState                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FFloatSpringState&               UpSpringState                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 ForwardValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  StrafeValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  UpValue                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 PitchValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 YawValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  BoostValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Out_Of_Power                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  OscillationAmountValue                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Flying_C::CalculateWingVariables(const struct FOrnithopterEffectsDriverComponent& OrnithopterEffectsDriverComponent, float ForwardAxis, float StrafeAxis, float UpAxis, double Pitch, double Yaw, EOrnithopterFlightMode CurrentFlightMode, bool IsOSC, double OscillationAmmount, float DeltaTime, struct FFloatSpringState& ForwardSpringState, struct FFloatSpringState& StrafeSpringState, struct FFloatSpringState& UpSpringState, class UObject* __WorldContext, double* ForwardValue, float* StrafeValue, float* UpValue, double* PitchValue, double* YawValue, float* BoostValue, bool* Out_Of_Power, float* OscillationAmountValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Flying_C", "CalculateWingVariables");

	Params::BPFL_Vehicle_Flying_C_CalculateWingVariables Parms{};

	Parms.OrnithopterEffectsDriverComponent = std::move(OrnithopterEffectsDriverComponent);
	Parms.ForwardAxis = ForwardAxis;
	Parms.StrafeAxis = StrafeAxis;
	Parms.UpAxis = UpAxis;
	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.CurrentFlightMode = CurrentFlightMode;
	Parms.IsOSC = IsOSC;
	Parms.OscillationAmmount = OscillationAmmount;
	Parms.DeltaTime = DeltaTime;
	Parms.ForwardSpringState = std::move(ForwardSpringState);
	Parms.StrafeSpringState = std::move(StrafeSpringState);
	Parms.UpSpringState = std::move(UpSpringState);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ForwardSpringState = std::move(Parms.ForwardSpringState);
	StrafeSpringState = std::move(Parms.StrafeSpringState);
	UpSpringState = std::move(Parms.UpSpringState);

	if (ForwardValue != nullptr)
		*ForwardValue = Parms.ForwardValue;

	if (StrafeValue != nullptr)
		*StrafeValue = Parms.StrafeValue;

	if (UpValue != nullptr)
		*UpValue = Parms.UpValue;

	if (PitchValue != nullptr)
		*PitchValue = Parms.PitchValue;

	if (YawValue != nullptr)
		*YawValue = Parms.YawValue;

	if (BoostValue != nullptr)
		*BoostValue = Parms.BoostValue;

	if (Out_Of_Power != nullptr)
		*Out_Of_Power = Parms.Out_Of_Power;

	if (OscillationAmountValue != nullptr)
		*OscillationAmountValue = Parms.OscillationAmountValue;
}


// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.CalculateWingOSC
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  WingAngleFlying                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  OscillationAmount                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  OSCVariance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FlipFlop                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 OscillationAngle                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 WingOSCVariance                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   OSCFlipFlop                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Flying_C::CalculateWingOSC(double WingAngleFlying, double OscillationAmount, double DeltaTime, double OSCVariance, bool FlipFlop, class UObject* __WorldContext, double* OscillationAngle, double* WingOSCVariance, bool* OSCFlipFlop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Flying_C", "CalculateWingOSC");

	Params::BPFL_Vehicle_Flying_C_CalculateWingOSC Parms{};

	Parms.WingAngleFlying = WingAngleFlying;
	Parms.OscillationAmount = OscillationAmount;
	Parms.DeltaTime = DeltaTime;
	Parms.OSCVariance = OSCVariance;
	Parms.FlipFlop = FlipFlop;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OscillationAngle != nullptr)
		*OscillationAngle = Parms.OscillationAngle;

	if (WingOSCVariance != nullptr)
		*WingOSCVariance = Parms.WingOSCVariance;

	if (OSCFlipFlop != nullptr)
		*OSCFlipFlop = Parms.OSCFlipFlop;
}


// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.CalculateScannerAimOffsets
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADuneVehicle*                     OwnerVehicle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FOrnithopterEffectsDriverComponent&OrnithopterEffectsDriverComponent                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// double                                  Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PitchMin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PitchMax                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Yaw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  YawMin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  YawMax                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 PitchValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 YawValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Flying_C::CalculateScannerAimOffsets(class ADuneVehicle* OwnerVehicle, const struct FOrnithopterEffectsDriverComponent& OrnithopterEffectsDriverComponent, double Pitch, double PitchMin, double PitchMax, double Yaw, double YawMin, double YawMax, double DeltaTime, class UObject* __WorldContext, double* PitchValue, double* YawValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Flying_C", "CalculateScannerAimOffsets");

	Params::BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets Parms{};

	Parms.OwnerVehicle = OwnerVehicle;
	Parms.OrnithopterEffectsDriverComponent = std::move(OrnithopterEffectsDriverComponent);
	Parms.Pitch = Pitch;
	Parms.PitchMin = PitchMin;
	Parms.PitchMax = PitchMax;
	Parms.Yaw = Yaw;
	Parms.YawMin = YawMin;
	Parms.YawMax = YawMax;
	Parms.DeltaTime = DeltaTime;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PitchValue != nullptr)
		*PitchValue = Parms.PitchValue;

	if (YawValue != nullptr)
		*YawValue = Parms.YawValue;
}


// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.CalculateLoadingRamp
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FOrnithopterEffectsDriverComponent&OrnithopterEffectsDriverComponent                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class FName                             LoadingRampIKSocket                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  IKTraceDistance                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   bOpenRampValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         TargetLoadingRampValue                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 IKWeightRampValue                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Flying_C::CalculateLoadingRamp(const struct FOrnithopterEffectsDriverComponent& OrnithopterEffectsDriverComponent, class FName LoadingRampIKSocket, double IKTraceDistance, double DeltaTime, class UAnimInstance* Target, class UObject* __WorldContext, bool* bOpenRampValue, struct FVector* TargetLoadingRampValue, double* IKWeightRampValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Flying_C", "CalculateLoadingRamp");

	Params::BPFL_Vehicle_Flying_C_CalculateLoadingRamp Parms{};

	Parms.OrnithopterEffectsDriverComponent = std::move(OrnithopterEffectsDriverComponent);
	Parms.LoadingRampIKSocket = LoadingRampIKSocket;
	Parms.IKTraceDistance = IKTraceDistance;
	Parms.DeltaTime = DeltaTime;
	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (bOpenRampValue != nullptr)
		*bOpenRampValue = Parms.bOpenRampValue;

	if (TargetLoadingRampValue != nullptr)
		*TargetLoadingRampValue = std::move(Parms.TargetLoadingRampValue);

	if (IKWeightRampValue != nullptr)
		*IKWeightRampValue = Parms.IKWeightRampValue;
}


// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.CalculateChassisVariables
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FOrnithopterEffectsDriverComponent&OrnithopterEffectsDriverComponent                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// double                                  IKWeightGears                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DistanceToGroundToLowerGear                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  BodyRotationOffset                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EOrnithopterFlightMode*                 Flight_ModeValue                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 IKWeightGearsValue                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        BodyRotationOffsetValue                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   bIsDashing                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Flying_C::CalculateChassisVariables(const struct FOrnithopterEffectsDriverComponent& OrnithopterEffectsDriverComponent, double IKWeightGears, double DistanceToGroundToLowerGear, const struct FRotator& BodyRotationOffset, double DeltaTime, class UAnimInstance* Target, class UObject* __WorldContext, EOrnithopterFlightMode* Flight_ModeValue, double* IKWeightGearsValue, struct FRotator* BodyRotationOffsetValue, bool* bIsDashing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Flying_C", "CalculateChassisVariables");

	Params::BPFL_Vehicle_Flying_C_CalculateChassisVariables Parms{};

	Parms.OrnithopterEffectsDriverComponent = std::move(OrnithopterEffectsDriverComponent);
	Parms.IKWeightGears = IKWeightGears;
	Parms.DistanceToGroundToLowerGear = DistanceToGroundToLowerGear;
	Parms.BodyRotationOffset = std::move(BodyRotationOffset);
	Parms.DeltaTime = DeltaTime;
	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Flight_ModeValue != nullptr)
		*Flight_ModeValue = Parms.Flight_ModeValue;

	if (IKWeightGearsValue != nullptr)
		*IKWeightGearsValue = Parms.IKWeightGearsValue;

	if (BodyRotationOffsetValue != nullptr)
		*BodyRotationOffsetValue = std::move(Parms.BodyRotationOffsetValue);

	if (bIsDashing != nullptr)
		*bIsDashing = Parms.bIsDashing;
}

}

