#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapLayer_Survival_1

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapLayer_Survival_1.BP_MapLayer_Survival_1_C
// 0x00B0 (0x0408 - 0x0358)
class ABP_MapLayer_Survival_1_C final : public ACartographyMapLayerActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0358(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   MapMeshes;                                         // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    RectLight;                                         // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Sun;                                               // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   MapAreas;                                          // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FogLayer04;                                        // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FogLayer06;                                        // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FogLayer05;                                        // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FogLayer03;                                        // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FogLayer02;                                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FogLayer01;                                        // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URuntimeVirtualTextureComponent*        MapBordersProjection;                              // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   MapBorders;                                        // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SurveyLocation;                                    // 0x03D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer;                                             // 0x03F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      SmokeVFX;                                          // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bMapOpen;                                          // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewSurveySinceLastMapOpen;                        // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MapLayer_Survival_1(int32 EntryPoint);

	void OnSurveyStarted(const struct FVector& MapWorldSurveyLocation) const;
	void OnSurveyCompleted() const;
	void OnFullscreenMapOpenClose(const bool Open) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapLayer_Survival_1_C">();
	}
	static class ABP_MapLayer_Survival_1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MapLayer_Survival_1_C>();
	}
};
static_assert(alignof(ABP_MapLayer_Survival_1_C) == 0x000008, "Wrong alignment on ABP_MapLayer_Survival_1_C");
static_assert(sizeof(ABP_MapLayer_Survival_1_C) == 0x000408, "Wrong size on ABP_MapLayer_Survival_1_C");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, UberGraphFrame) == 0x000358, "Member 'ABP_MapLayer_Survival_1_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, MapMeshes) == 0x000360, "Member 'ABP_MapLayer_Survival_1_C::MapMeshes' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, RectLight) == 0x000368, "Member 'ABP_MapLayer_Survival_1_C::RectLight' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, SkyAtmosphere) == 0x000370, "Member 'ABP_MapLayer_Survival_1_C::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, SkyLight) == 0x000378, "Member 'ABP_MapLayer_Survival_1_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, Sun) == 0x000380, "Member 'ABP_MapLayer_Survival_1_C::Sun' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, MapAreas) == 0x000388, "Member 'ABP_MapLayer_Survival_1_C::MapAreas' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, FogLayer04) == 0x000390, "Member 'ABP_MapLayer_Survival_1_C::FogLayer04' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, FogLayer06) == 0x000398, "Member 'ABP_MapLayer_Survival_1_C::FogLayer06' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, FogLayer05) == 0x0003A0, "Member 'ABP_MapLayer_Survival_1_C::FogLayer05' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, FogLayer03) == 0x0003A8, "Member 'ABP_MapLayer_Survival_1_C::FogLayer03' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, FogLayer02) == 0x0003B0, "Member 'ABP_MapLayer_Survival_1_C::FogLayer02' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, FogLayer01) == 0x0003B8, "Member 'ABP_MapLayer_Survival_1_C::FogLayer01' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, Box) == 0x0003C0, "Member 'ABP_MapLayer_Survival_1_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, MapBordersProjection) == 0x0003C8, "Member 'ABP_MapLayer_Survival_1_C::MapBordersProjection' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, MapBorders) == 0x0003D0, "Member 'ABP_MapLayer_Survival_1_C::MapBorders' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, SurveyLocation) == 0x0003D8, "Member 'ABP_MapLayer_Survival_1_C::SurveyLocation' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, Timer) == 0x0003F0, "Member 'ABP_MapLayer_Survival_1_C::Timer' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, SmokeVFX) == 0x0003F8, "Member 'ABP_MapLayer_Survival_1_C::SmokeVFX' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, bMapOpen) == 0x000400, "Member 'ABP_MapLayer_Survival_1_C::bMapOpen' has a wrong offset!");
static_assert(offsetof(ABP_MapLayer_Survival_1_C, bNewSurveySinceLastMapOpen) == 0x000401, "Member 'ABP_MapLayer_Survival_1_C::bNewSurveySinceLastMapOpen' has a wrong offset!");

}

