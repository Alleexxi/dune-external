#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CountdownTimerFeedbackWidget

#include "Basic.hpp"

#include "W_CountdownTimerFeedbackWidget_classes.hpp"
#include "W_CountdownTimerFeedbackWidget_parameters.hpp"


namespace SDK
{

// Function W_CountdownTimerFeedbackWidget.W_CountdownTimerFeedbackWidget_C.ExecuteUbergraph_W_CountdownTimerFeedbackWidget
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CountdownTimerFeedbackWidget_C::ExecuteUbergraph_W_CountdownTimerFeedbackWidget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CountdownTimerFeedbackWidget_C", "ExecuteUbergraph_W_CountdownTimerFeedbackWidget");

	Params::W_CountdownTimerFeedbackWidget_C_ExecuteUbergraph_W_CountdownTimerFeedbackWidget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CountdownTimerFeedbackWidget.W_CountdownTimerFeedbackWidget_C.BP_UpdateRemainingTimeText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      RemainingTimeText                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_CountdownTimerFeedbackWidget_C::BP_UpdateRemainingTimeText(const class FText& RemainingTimeText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CountdownTimerFeedbackWidget_C", "BP_UpdateRemainingTimeText");

	Params::W_CountdownTimerFeedbackWidget_C_BP_UpdateRemainingTimeText Parms{};

	Parms.RemainingTimeText = std::move(RemainingTimeText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CountdownTimerFeedbackWidget.W_CountdownTimerFeedbackWidget_C.BP_SetupFeedbackInfoOnTimerStarted
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      FeedbackText                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FText&                      RemainingTimeText                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FLinearColor&              BackgroundColor                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const bool                              bDisplayRemainingTime                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CountdownTimerFeedbackWidget_C::BP_SetupFeedbackInfoOnTimerStarted(const class FText& FeedbackText, const class FText& RemainingTimeText, const struct FLinearColor& BackgroundColor, const bool bDisplayRemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CountdownTimerFeedbackWidget_C", "BP_SetupFeedbackInfoOnTimerStarted");

	Params::W_CountdownTimerFeedbackWidget_C_BP_SetupFeedbackInfoOnTimerStarted Parms{};

	Parms.FeedbackText = std::move(FeedbackText);
	Parms.RemainingTimeText = std::move(RemainingTimeText);
	Parms.BackgroundColor = std::move(BackgroundColor);
	Parms.bDisplayRemainingTime = bDisplayRemainingTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

