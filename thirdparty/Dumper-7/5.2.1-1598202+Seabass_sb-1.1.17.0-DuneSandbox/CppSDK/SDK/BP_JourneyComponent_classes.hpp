#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JourneyComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DWGameplayAbilities_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_JourneyComponent.BP_JourneyComponent_C
// 0x02C8 (0x0500 - 0x0238)
class UBP_JourneyComponent_C final : public UDunePlayerJourneyComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         CachedKnowledgePoints;                             // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActiveChallengeRoom;                               // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DT_JourneyRewards;                                 // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipLessonCheck;                                   // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnemiesKilled;                                     // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WallsBuilt;                                        // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FoundationsBuilt;                                  // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoofsBuilt;                                        // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpiceExposure_Last;                                // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Exposure_Addiction_Threshold;                      // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CheckSpiceExposureTimer;                           // 0x0270(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSpiceExposure;                              // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInSpiceExposureEvent;                            // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpiceExposureFXTarget;                             // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpiceExposureFXCurrent;                            // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpiceExposureEventDuration;                        // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_SpiceExposure_C*                     SpiceExposureWidget;                               // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        FXFadeSpeed;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSpiceExposureThresholdLevel;                // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlaySpiceDream;                              // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreamingDynamic*                 CinematicLevelInstance;                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SpiceExpsureEventDurationThresholdTrigger;         // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpiceDreamTransitionTime;                          // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           SpiceDreamAnimationState;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   InputContextName;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TutorialName;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEffectHandle                          HeatProtection;                                    // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DEBUG_IgnoreLevelCheck;                            // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneWheeledVehicle*                    As_Dune_Wheeled_Vehicle;                           // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckForVehicle_Handle;                            // 0x0300(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckForShelter_Handle;                            // 0x0308(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UFcAudioEvent>           SpiceExposureEventStartAudio;                      // 0x0310(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UFcAudioEvent>           SpiceExposureEventEndAudio;                        // 0x0340(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UFcAudioEvent*>                  LoadedAudioEvents;                                 // 0x0370(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, DuplicateTransient, AdvancedDisplay)
	class UNiagaraComponent*                      SpiceMotesFX;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   SpiceBuildupInputContextName;                      // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpiceDreamCinematicEnded;                          // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpiceAddictedButNotReady;                          // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChallengeRoomSucceeded;                            // 0x0392(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_393[0x5];                                      // 0x0393(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ObtainSandbikeModulesTimer_handle;                 // 0x0398(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ZantaraVOComplete;                                 // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Pre_Dream_Spice_Exposure_FXTarget;                 // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          OutroSequence;                                     // 0x03A8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          DoOnce_MnemonicComponent;                          // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoOnce_LessonState;                                // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DA[0x6];                                      // 0x03DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADunePlayerController*                  DunePlayerControllerRef;                           // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FJourneySpiceDreamData                 CurrentSpiceDreamData;                             // 0x03E8(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentSpiceDreamIndex;                            // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpiceDreamCheckNpcRadius;                          // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpiceDreamCheckEcolabRadius;                       // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0xC];                                      // 0x0464(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpiceDreamTransformOrigin;                         // 0x0470(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsJourneyARevealed;                               // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsJourneyBRevealed;                               // 0x04D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D2[0x6];                                      // 0x04D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RelocateJourneyFullPath;                           // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Journey1_0;                                        // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	EJourneyState                                 EJourneyStateEnum;                                 // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ZantaraSpiceVOComplete();
	void TriggerChallengeRoomCompletion(const int32 ChallengeRoomNumber);
	void StartSpiceExposureTracker();
	void SpiceMotesCleanup();
	void SpiceExposureThresholdEvents(int32 Selection);
	void SpiceDreamBuildUpEffects();
	void ShowExposureBar(float SecondsBeforeFadeIn);
	void SetCharacterAnimationState();
	void ServerSpiceDreamFinished();
	void ResetSpiceDreamBuildUpEffectsCloseUiDoOnce();
	void RemoveProtection();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void PutPlayerInSpiceVisionBuildupState();
	void PlaySpiceExposureEvent();
	void PlaySpiceDreamExposureEventonClient();
	void PlayCommuninetMessage(const struct FECommuninetMessageId& MessageId);
	void Play_Spice_Vision(int32 SpiceDreamIndex);
	void OnVisionCinematicPlay();
	void OnUnblockMovement();
	void OnNotifyEnd_1BD6B6764DD9865E56C414ACACEC780A(class FName NotifyName);
	void OnNotifyBegin_1BD6B6764DD9865E56C414ACACEC780A(class FName NotifyName);
	void OnLoaded_C6D7A72640B35AA4F3568E88D3281254(class UObject* Loaded);
	void OnLoaded_A9F9CEFC41CD857BDE5EF187B24F7D5E(class UObject* Loaded);
	void OnJourneyStateInitialized();
	void OnInterrupted_1BD6B6764DD9865E56C414ACACEC780A(class FName NotifyName);
	void OnCompleted_1BD6B6764DD9865E56C414ACACEC780A(class FName NotifyName);
	void OnClient_SetTrackedJourney();
	void OnBlendOut_1BD6B6764DD9865E56C414ACACEC780A(class FName NotifyName);
	void On_Vision_Level_Loaded();
	void On_Vision_Cinematic_Ends();
	void MC_SetCharacterAnimationState();
	void m_OnSequenceStopped_509F5E7848212D7E5ACA3FA381C5B158(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceStarted_509F5E7848212D7E5ACA3FA381C5B158(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceLoadingFailed_FCE732244631E79F59162D847DC082E8(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceLoaded_FCE732244631E79F59162D847DC082E8(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceInterrupted_509F5E7848212D7E5ACA3FA381C5B158(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceFailed_509F5E7848212D7E5ACA3FA381C5B158(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void HideExposureBar(float SecondsBeforeFadeOut);
	void HandleAudio(double Duration);
	class UW_SpiceExposure_C* GetSpiceExposureWidget();
	void GetMnemonicRecallComponent(class UMnemonicRecallActorComponent** MnemonicRecallActorComponent);
	void GetDunePlayerCharacter(class ADunePlayerCharacter** DunePlayerCharacter);
	void GetCommuninetComponent(class UCommuninetComponent** CommuninetComponent);
	void ExecuteUbergraph_BP_JourneyComponent(int32 EntryPoint);
	void EventTIck_SpiceExposureGraph();
	void CompleteAchievement();
	void CloseUiMenus();
	void CheckSpiceExposure();
	void CheckForVehicle(bool* VehicleFound_);
	bool CheckExposureThreshold(double PercentThreshold);
	bool CanPlaySpiceVision();
	void BP_TriggerSpiceDream(const int32 SpiceDreamIndex);
	void BP_OnPossessedNewPlayerCharacter(class ADunePlayerCharacter* DunePlayerCharacter);
	void BP_OnPlayerReturningFromLimboRoom(const bool bGiftWasAccepted);
	void BP_ForceStartSpiceDream(const int32 SpiceDreamIndex);
	void BindChallengeRoomCompletion();
	void AddProtection();
	void Add_SpiceMotes();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_JourneyComponent_C">();
	}
	static class UBP_JourneyComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_JourneyComponent_C>();
	}
};
static_assert(alignof(UBP_JourneyComponent_C) == 0x000010, "Wrong alignment on UBP_JourneyComponent_C");
static_assert(sizeof(UBP_JourneyComponent_C) == 0x000500, "Wrong size on UBP_JourneyComponent_C");
static_assert(offsetof(UBP_JourneyComponent_C, UberGraphFrame) == 0x000238, "Member 'UBP_JourneyComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, CachedKnowledgePoints) == 0x000240, "Member 'UBP_JourneyComponent_C::CachedKnowledgePoints' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, ActiveChallengeRoom) == 0x000244, "Member 'UBP_JourneyComponent_C::ActiveChallengeRoom' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, DT_JourneyRewards) == 0x000248, "Member 'UBP_JourneyComponent_C::DT_JourneyRewards' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SkipLessonCheck) == 0x000250, "Member 'UBP_JourneyComponent_C::SkipLessonCheck' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, EnemiesKilled) == 0x000254, "Member 'UBP_JourneyComponent_C::EnemiesKilled' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, WallsBuilt) == 0x000258, "Member 'UBP_JourneyComponent_C::WallsBuilt' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, FoundationsBuilt) == 0x00025C, "Member 'UBP_JourneyComponent_C::FoundationsBuilt' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, RoofsBuilt) == 0x000260, "Member 'UBP_JourneyComponent_C::RoofsBuilt' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceExposure_Last) == 0x000264, "Member 'UBP_JourneyComponent_C::SpiceExposure_Last' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, Exposure_Addiction_Threshold) == 0x000268, "Member 'UBP_JourneyComponent_C::Exposure_Addiction_Threshold' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, CheckSpiceExposureTimer) == 0x000270, "Member 'UBP_JourneyComponent_C::CheckSpiceExposureTimer' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, CurrentSpiceExposure) == 0x000278, "Member 'UBP_JourneyComponent_C::CurrentSpiceExposure' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, IsInSpiceExposureEvent) == 0x00027C, "Member 'UBP_JourneyComponent_C::IsInSpiceExposureEvent' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceExposureFXTarget) == 0x000280, "Member 'UBP_JourneyComponent_C::SpiceExposureFXTarget' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceExposureFXCurrent) == 0x000288, "Member 'UBP_JourneyComponent_C::SpiceExposureFXCurrent' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceExposureEventDuration) == 0x000290, "Member 'UBP_JourneyComponent_C::SpiceExposureEventDuration' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceExposureWidget) == 0x000298, "Member 'UBP_JourneyComponent_C::SpiceExposureWidget' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, FXFadeSpeed) == 0x0002A0, "Member 'UBP_JourneyComponent_C::FXFadeSpeed' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, CurrentSpiceExposureThresholdLevel) == 0x0002A8, "Member 'UBP_JourneyComponent_C::CurrentSpiceExposureThresholdLevel' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, ShouldPlaySpiceDream) == 0x0002AC, "Member 'UBP_JourneyComponent_C::ShouldPlaySpiceDream' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, CinematicLevelInstance) == 0x0002B0, "Member 'UBP_JourneyComponent_C::CinematicLevelInstance' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceExpsureEventDurationThresholdTrigger) == 0x0002B8, "Member 'UBP_JourneyComponent_C::SpiceExpsureEventDurationThresholdTrigger' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceDreamTransitionTime) == 0x0002C0, "Member 'UBP_JourneyComponent_C::SpiceDreamTransitionTime' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceDreamAnimationState) == 0x0002C8, "Member 'UBP_JourneyComponent_C::SpiceDreamAnimationState' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, InputContextName) == 0x0002D0, "Member 'UBP_JourneyComponent_C::InputContextName' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, TutorialName) == 0x0002D8, "Member 'UBP_JourneyComponent_C::TutorialName' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, HeatProtection) == 0x0002E0, "Member 'UBP_JourneyComponent_C::HeatProtection' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, DEBUG_IgnoreLevelCheck) == 0x0002F0, "Member 'UBP_JourneyComponent_C::DEBUG_IgnoreLevelCheck' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, As_Dune_Wheeled_Vehicle) == 0x0002F8, "Member 'UBP_JourneyComponent_C::As_Dune_Wheeled_Vehicle' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, CheckForVehicle_Handle) == 0x000300, "Member 'UBP_JourneyComponent_C::CheckForVehicle_Handle' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, CheckForShelter_Handle) == 0x000308, "Member 'UBP_JourneyComponent_C::CheckForShelter_Handle' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceExposureEventStartAudio) == 0x000310, "Member 'UBP_JourneyComponent_C::SpiceExposureEventStartAudio' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceExposureEventEndAudio) == 0x000340, "Member 'UBP_JourneyComponent_C::SpiceExposureEventEndAudio' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, LoadedAudioEvents) == 0x000370, "Member 'UBP_JourneyComponent_C::LoadedAudioEvents' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceMotesFX) == 0x000380, "Member 'UBP_JourneyComponent_C::SpiceMotesFX' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceBuildupInputContextName) == 0x000388, "Member 'UBP_JourneyComponent_C::SpiceBuildupInputContextName' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceDreamCinematicEnded) == 0x000390, "Member 'UBP_JourneyComponent_C::SpiceDreamCinematicEnded' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceAddictedButNotReady) == 0x000391, "Member 'UBP_JourneyComponent_C::SpiceAddictedButNotReady' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, ChallengeRoomSucceeded) == 0x000392, "Member 'UBP_JourneyComponent_C::ChallengeRoomSucceeded' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, ObtainSandbikeModulesTimer_handle) == 0x000398, "Member 'UBP_JourneyComponent_C::ObtainSandbikeModulesTimer_handle' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, ZantaraVOComplete) == 0x0003A0, "Member 'UBP_JourneyComponent_C::ZantaraVOComplete' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, Pre_Dream_Spice_Exposure_FXTarget) == 0x0003A4, "Member 'UBP_JourneyComponent_C::Pre_Dream_Spice_Exposure_FXTarget' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, OutroSequence) == 0x0003A8, "Member 'UBP_JourneyComponent_C::OutroSequence' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, DoOnce_MnemonicComponent) == 0x0003D8, "Member 'UBP_JourneyComponent_C::DoOnce_MnemonicComponent' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, DoOnce_LessonState) == 0x0003D9, "Member 'UBP_JourneyComponent_C::DoOnce_LessonState' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, DunePlayerControllerRef) == 0x0003E0, "Member 'UBP_JourneyComponent_C::DunePlayerControllerRef' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, CurrentSpiceDreamData) == 0x0003E8, "Member 'UBP_JourneyComponent_C::CurrentSpiceDreamData' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, CurrentSpiceDreamIndex) == 0x000458, "Member 'UBP_JourneyComponent_C::CurrentSpiceDreamIndex' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceDreamCheckNpcRadius) == 0x00045C, "Member 'UBP_JourneyComponent_C::SpiceDreamCheckNpcRadius' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceDreamCheckEcolabRadius) == 0x000460, "Member 'UBP_JourneyComponent_C::SpiceDreamCheckEcolabRadius' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, SpiceDreamTransformOrigin) == 0x000470, "Member 'UBP_JourneyComponent_C::SpiceDreamTransformOrigin' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, bIsJourneyARevealed) == 0x0004D0, "Member 'UBP_JourneyComponent_C::bIsJourneyARevealed' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, bIsJourneyBRevealed) == 0x0004D1, "Member 'UBP_JourneyComponent_C::bIsJourneyBRevealed' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, RelocateJourneyFullPath) == 0x0004D8, "Member 'UBP_JourneyComponent_C::RelocateJourneyFullPath' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, Journey1_0) == 0x0004E8, "Member 'UBP_JourneyComponent_C::Journey1_0' has a wrong offset!");
static_assert(offsetof(UBP_JourneyComponent_C, EJourneyStateEnum) == 0x0004F8, "Member 'UBP_JourneyComponent_C::EJourneyStateEnum' has a wrong offset!");

}

