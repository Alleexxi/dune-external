#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Vehicle_Flying

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "DuneSandbox_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C
// 0x0000 (0x0030 - 0x0030)
class UBPFL_Vehicle_Flying_C final : public UBlueprintFunctionLibrary
{
public:
	static void CalculateChassisVariables(const struct FOrnithopterEffectsDriverComponent& OrnithopterEffectsDriverComponent, double IKWeightGears, double DistanceToGroundToLowerGear, const struct FRotator& BodyRotationOffset, double DeltaTime, class UAnimInstance* Target, class UObject* __WorldContext, EOrnithopterFlightMode* Flight_ModeValue, double* IKWeightGearsValue, struct FRotator* BodyRotationOffsetValue, bool* bIsDashing);
	static void CalculateLoadingRamp(const struct FOrnithopterEffectsDriverComponent& OrnithopterEffectsDriverComponent, class FName LoadingRampIKSocket, double IKTraceDistance, double DeltaTime, class UAnimInstance* Target, class UObject* __WorldContext, bool* bOpenRampValue, struct FVector* TargetLoadingRampValue, double* IKWeightRampValue);
	static void CalculateScannerAimOffsets(class ADuneVehicle* OwnerVehicle, const struct FOrnithopterEffectsDriverComponent& OrnithopterEffectsDriverComponent, double Pitch, double PitchMin, double PitchMax, double Yaw, double YawMin, double YawMax, double DeltaTime, class UObject* __WorldContext, double* PitchValue, double* YawValue);
	static void CalculateWingOSC(double WingAngleFlying, double OscillationAmount, double DeltaTime, double OSCVariance, bool FlipFlop, class UObject* __WorldContext, double* OscillationAngle, double* WingOSCVariance, bool* OSCFlipFlop);
	static void CalculateWingVariables(const struct FOrnithopterEffectsDriverComponent& OrnithopterEffectsDriverComponent, float ForwardAxis, float StrafeAxis, float UpAxis, double Pitch, double Yaw, EOrnithopterFlightMode CurrentFlightMode, bool IsOSC, double OscillationAmmount, float DeltaTime, struct FFloatSpringState& ForwardSpringState, struct FFloatSpringState& StrafeSpringState, struct FFloatSpringState& UpSpringState, class UObject* __WorldContext, double* ForwardValue, float* StrafeValue, float* UpValue, double* PitchValue, double* YawValue, float* BoostValue, bool* Out_Of_Power, float* OscillationAmountValue);
	static void ControlRigIKSolver(class UDuneVehicleAnimInstance* Target, const class FName FootBone, const float IKTraceDistance, double LegOffset, class UObject* __WorldContext, struct FVector* LegTarget, struct FVector* FootTarget);
	static void GetQuicksandSinkDepth(class ADuneOrnithopter* Target, class UObject* __WorldContext, double* CurrentSinkDepth);
	static void SetWingCollision(class ADuneVehicle* Target, bool IsOSC, class UObject* __WorldContext);
	static void UpdateFlightMode(EOrnithopterFlightMode NewFlightMode, EOrnithopterFlightMode CurrentFlightMode, class UObject* __WorldContext, EOrnithopterFlightMode* FlightMode, bool* bIsOSC);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_Vehicle_Flying_C">();
	}
	static class UBPFL_Vehicle_Flying_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_Vehicle_Flying_C>();
	}
};
static_assert(alignof(UBPFL_Vehicle_Flying_C) == 0x000008, "Wrong alignment on UBPFL_Vehicle_Flying_C");
static_assert(sizeof(UBPFL_Vehicle_Flying_C) == 0x000030, "Wrong size on UBPFL_Vehicle_Flying_C");

}

