#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_COL_Wings

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ControlRig_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_COL_Wings.AB_COL_Wings_C
// 0x0C90 (0x12A0 - 0x0610)
class UAB_COL_Wings_C final : public UDuneOrnithopterAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0610(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0618(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0620(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0628(0x0020)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x0648(0x0470)()
	uint8                                         Pad_AB8[0x8];                                      // 0x0AB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x0AC0(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0B20(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0B80(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0BE0(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0C40(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0CA0(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0D00(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0D60(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0DC0(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0E20(0x0060)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0E80(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0EC8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0EE8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0F30(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0F50(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0F98(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0FB8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1000(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1020(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1068(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1088(0x00C8)()
	bool                                          __CustomProperty_Dash_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Boost_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Dodge_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Dive_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Malfunction_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Vulture_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_DragonFly_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Standby_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1157(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Landed_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_Invalid_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_115A[0x6];                                     // 0x115A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        __CustomProperty_OscillationAngle_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_Yaw_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_Pitch_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_UP_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_STRAFE_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_FWD_665B7CE6424DB3C0A08C6BA9EA13D344; // 0x1188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Time_X;                                      // 0x1190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOrnithopterFlightMode                        Flight_Mode;                                       // 0x1194(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsOSC;                                            // 0x1195(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1196[0x2];                                     // 0x1196(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ForwardAxis;                                       // 0x1198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StrafeAxis;                                        // 0x11A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UpAxis;                                            // 0x11A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch;                                             // 0x11B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw;                                               // 0x11B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          B_Out_Of_Power;                                    // 0x11C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C1[0x7];                                     // 0x11C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BoostAmount;                                       // 0x11C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OscillationAmount;                                 // 0x11D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WingAngleFlying;                                   // 0x11D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OscillationAngle;                                  // 0x11E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDashing;                                          // 0x11E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E9[0x7];                                     // 0x11E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              VFXWingBlurSystems;                                // 0x11F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class FName>                           WingBlurBoneNames;                                 // 0x1200(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UNiagaraComponent*>              VFXWingTipsSystems;                                // 0x1210(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class FName>                           WingTipsBoneNames;                                 // 0x1220(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UNiagaraComponent*                      VFXGroundDust_00;                                  // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        VFXGroundBlastMaxDistance;                         // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      VFXGroundDust_01;                                  // 0x1240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        DustTimer;                                         // 0x1248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              ActiveSurfaceType;                                 // 0x1250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1251[0x3];                                     // 0x1251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EmitterSelection;                                  // 0x1254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         SurfaceVFX;                                        // 0x1258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFloatSpringState                      Forward_Spring_State;                              // 0x1260(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FFloatSpringState                      Strafe_Spring_State;                               // 0x126C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FFloatSpringState                      Up_Spring_State;                                   // 0x1278(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_1284[0x4];                                     // 0x1284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WingOscillationVariance;                           // 0x1288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OscillationFlipFlop;                               // 0x1290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void AnimNotify_StartOSC();
	void AnimNotify_StopOSC();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void CheckPhysMatBelow();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_ControlRig_665B7CE6424DB3C0A08C6BA9EA13D344();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_TransitionResult_0BB2E97445A333F9636D089570476CB6();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_TransitionResult_0E3D6A6B4BE2AD9E4681C697E7535A5F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_TransitionResult_2F9EE81B4FE145D0F01A9EA73BA50D58();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_TransitionResult_50020F2444F7A066C61429B152D2F88F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_TransitionResult_6A74B3F1400B4FAA583A8C816065710E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_TransitionResult_74C2B5D94B42BADA676126AACB2741D4();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_TransitionResult_79830FBC492CC228AD05B58CBEBC1517();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_TransitionResult_DA3868F54DDFF80E5F80559C7BC8943E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_TransitionResult_DBD6EB3542D2FFF61D665B9BC44451EA();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_COL_Wings_AnimGraphNode_TransitionResult_F333A1AA4952C635558FDFAE0A514C7F();
	void ExecuteUbergraph_AB_COL_Wings(int32 EntryPoint);
	void InitWingVFX();
	void OnFlightModeChanged(const EOrnithopterFlightMode NewFlightMode);
	void OnVehicleModuleBroken(const EVehicleModuleType ModuleType);
	void SetDash();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_COL_Wings_C">();
	}
	static class UAB_COL_Wings_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_COL_Wings_C>();
	}
};
static_assert(alignof(UAB_COL_Wings_C) == 0x000010, "Wrong alignment on UAB_COL_Wings_C");
static_assert(sizeof(UAB_COL_Wings_C) == 0x0012A0, "Wrong size on UAB_COL_Wings_C");
static_assert(offsetof(UAB_COL_Wings_C, UberGraphFrame) == 0x000610, "Member 'UAB_COL_Wings_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimBlueprintExtension_PropertyAccess) == 0x000618, "Member 'UAB_COL_Wings_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimBlueprintExtension_Base) == 0x000620, "Member 'UAB_COL_Wings_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_Root) == 0x000628, "Member 'UAB_COL_Wings_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_ControlRig) == 0x000648, "Member 'UAB_COL_Wings_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_TransitionResult_9) == 0x000AC0, "Member 'UAB_COL_Wings_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_TransitionResult_8) == 0x000B20, "Member 'UAB_COL_Wings_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_TransitionResult_7) == 0x000B80, "Member 'UAB_COL_Wings_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_TransitionResult_6) == 0x000BE0, "Member 'UAB_COL_Wings_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_TransitionResult_5) == 0x000C40, "Member 'UAB_COL_Wings_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_TransitionResult_4) == 0x000CA0, "Member 'UAB_COL_Wings_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_TransitionResult_3) == 0x000D00, "Member 'UAB_COL_Wings_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_TransitionResult_2) == 0x000D60, "Member 'UAB_COL_Wings_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_TransitionResult_1) == 0x000DC0, "Member 'UAB_COL_Wings_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_TransitionResult) == 0x000E20, "Member 'UAB_COL_Wings_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_SequencePlayer_4) == 0x000E80, "Member 'UAB_COL_Wings_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_StateResult_4) == 0x000EC8, "Member 'UAB_COL_Wings_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_SequencePlayer_3) == 0x000EE8, "Member 'UAB_COL_Wings_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_StateResult_3) == 0x000F30, "Member 'UAB_COL_Wings_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_SequencePlayer_2) == 0x000F50, "Member 'UAB_COL_Wings_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_StateResult_2) == 0x000F98, "Member 'UAB_COL_Wings_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_SequencePlayer_1) == 0x000FB8, "Member 'UAB_COL_Wings_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_StateResult_1) == 0x001000, "Member 'UAB_COL_Wings_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_SequencePlayer) == 0x001020, "Member 'UAB_COL_Wings_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_StateResult) == 0x001068, "Member 'UAB_COL_Wings_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, AnimGraphNode_StateMachine) == 0x001088, "Member 'UAB_COL_Wings_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Dash_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001150, "Member 'UAB_COL_Wings_C::__CustomProperty_Dash_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Boost_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001151, "Member 'UAB_COL_Wings_C::__CustomProperty_Boost_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Dodge_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001152, "Member 'UAB_COL_Wings_C::__CustomProperty_Dodge_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Dive_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001153, "Member 'UAB_COL_Wings_C::__CustomProperty_Dive_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Malfunction_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001154, "Member 'UAB_COL_Wings_C::__CustomProperty_Malfunction_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Vulture_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001155, "Member 'UAB_COL_Wings_C::__CustomProperty_Vulture_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_DragonFly_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001156, "Member 'UAB_COL_Wings_C::__CustomProperty_DragonFly_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Standby_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001157, "Member 'UAB_COL_Wings_C::__CustomProperty_Standby_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Landed_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001158, "Member 'UAB_COL_Wings_C::__CustomProperty_Landed_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Invalid_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001159, "Member 'UAB_COL_Wings_C::__CustomProperty_Invalid_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_OscillationAngle_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001160, "Member 'UAB_COL_Wings_C::__CustomProperty_OscillationAngle_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Yaw_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001168, "Member 'UAB_COL_Wings_C::__CustomProperty_Yaw_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_Pitch_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001170, "Member 'UAB_COL_Wings_C::__CustomProperty_Pitch_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_UP_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001178, "Member 'UAB_COL_Wings_C::__CustomProperty_UP_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_STRAFE_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001180, "Member 'UAB_COL_Wings_C::__CustomProperty_STRAFE_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, __CustomProperty_FWD_665B7CE6424DB3C0A08C6BA9EA13D344) == 0x001188, "Member 'UAB_COL_Wings_C::__CustomProperty_FWD_665B7CE6424DB3C0A08C6BA9EA13D344' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, Delta_Time_X) == 0x001190, "Member 'UAB_COL_Wings_C::Delta_Time_X' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, Flight_Mode) == 0x001194, "Member 'UAB_COL_Wings_C::Flight_Mode' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, bIsOSC) == 0x001195, "Member 'UAB_COL_Wings_C::bIsOSC' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, ForwardAxis) == 0x001198, "Member 'UAB_COL_Wings_C::ForwardAxis' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, StrafeAxis) == 0x0011A0, "Member 'UAB_COL_Wings_C::StrafeAxis' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, UpAxis) == 0x0011A8, "Member 'UAB_COL_Wings_C::UpAxis' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, Pitch) == 0x0011B0, "Member 'UAB_COL_Wings_C::Pitch' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, Yaw) == 0x0011B8, "Member 'UAB_COL_Wings_C::Yaw' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, B_Out_Of_Power) == 0x0011C0, "Member 'UAB_COL_Wings_C::B_Out_Of_Power' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, BoostAmount) == 0x0011C8, "Member 'UAB_COL_Wings_C::BoostAmount' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, OscillationAmount) == 0x0011D0, "Member 'UAB_COL_Wings_C::OscillationAmount' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, WingAngleFlying) == 0x0011D8, "Member 'UAB_COL_Wings_C::WingAngleFlying' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, OscillationAngle) == 0x0011E0, "Member 'UAB_COL_Wings_C::OscillationAngle' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, bDashing) == 0x0011E8, "Member 'UAB_COL_Wings_C::bDashing' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, VFXWingBlurSystems) == 0x0011F0, "Member 'UAB_COL_Wings_C::VFXWingBlurSystems' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, WingBlurBoneNames) == 0x001200, "Member 'UAB_COL_Wings_C::WingBlurBoneNames' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, VFXWingTipsSystems) == 0x001210, "Member 'UAB_COL_Wings_C::VFXWingTipsSystems' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, WingTipsBoneNames) == 0x001220, "Member 'UAB_COL_Wings_C::WingTipsBoneNames' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, VFXGroundDust_00) == 0x001230, "Member 'UAB_COL_Wings_C::VFXGroundDust_00' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, VFXGroundBlastMaxDistance) == 0x001238, "Member 'UAB_COL_Wings_C::VFXGroundBlastMaxDistance' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, VFXGroundDust_01) == 0x001240, "Member 'UAB_COL_Wings_C::VFXGroundDust_01' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, DustTimer) == 0x001248, "Member 'UAB_COL_Wings_C::DustTimer' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, ActiveSurfaceType) == 0x001250, "Member 'UAB_COL_Wings_C::ActiveSurfaceType' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, EmitterSelection) == 0x001254, "Member 'UAB_COL_Wings_C::EmitterSelection' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, SurfaceVFX) == 0x001258, "Member 'UAB_COL_Wings_C::SurfaceVFX' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, Forward_Spring_State) == 0x001260, "Member 'UAB_COL_Wings_C::Forward_Spring_State' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, Strafe_Spring_State) == 0x00126C, "Member 'UAB_COL_Wings_C::Strafe_Spring_State' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, Up_Spring_State) == 0x001278, "Member 'UAB_COL_Wings_C::Up_Spring_State' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, WingOscillationVariance) == 0x001288, "Member 'UAB_COL_Wings_C::WingOscillationVariance' has a wrong offset!");
static_assert(offsetof(UAB_COL_Wings_C, OscillationFlipFlop) == 0x001290, "Member 'UAB_COL_Wings_C::OscillationFlipFlop' has a wrong offset!");

}

