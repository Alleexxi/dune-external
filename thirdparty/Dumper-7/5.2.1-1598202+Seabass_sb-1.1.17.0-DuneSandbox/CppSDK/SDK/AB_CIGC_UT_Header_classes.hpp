#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_CIGC_UT_Header

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_CIGC_UT_Header.AB_CIGC_UT_Header_C
// 0x0940 (0x0E60 - 0x0520)
class UAB_CIGC_UT_Header_C final : public UWheeledVehicleAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0520(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0528(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0530(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0538(0x0020)()
	uint8                                         Pad_558[0x8];                                      // 0x0558(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0560(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x05C0(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0620(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0680(0x0060)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x06E0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0728(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0748(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0790(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x07B0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x07F8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0818(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0860(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0880(0x00C8)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x0948(0x0470)()
	struct FVector                                __CustomProperty_HeaderOffset_R_4CF03BD6455955B7420B7E81314537EE; // 0x0DB8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_HeaderOffset_L_4CF03BD6455955B7420B7E81314537EE; // 0x0DD0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsHarvesting;                                     // 0x0DE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DE9[0x7];                                      // 0x0DE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IKTraceDistance;                                   // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IKWeighting;                                       // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableIK;                                         // 0x0E00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E01[0x7];                                      // 0x0E01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HeaderOffset_L;                                    // 0x0E08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeaderOffset_R;                                    // 0x0E20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      VFXVacuum;                                         // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Delta_Time_X;                                      // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsGrounded;                                       // 0x0E48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E49[0x7];                                      // 0x0E49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BoneArray;                                         // 0x0E50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void AnimNotify_IK_Disable();
	void AnimNotify_IK_Enable();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_CIGC_UT_Header_AnimGraphNode_TransitionResult_E597427644BD44AE1B82ED8E3DDA3238();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_CIGC_UT_Header_AnimGraphNode_TransitionResult_EBEFBEC244FAD07CEA46328D1E7C8E7A();
	void ExecuteUbergraph_AB_CIGC_UT_Header(int32 EntryPoint);
	void IKSolver(class FName SocketName, struct FVector* Offset, bool* bIsGrounded_0);
	void OnVehicleModuleBroken(const EVehicleModuleType ModuleType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_CIGC_UT_Header_C">();
	}
	static class UAB_CIGC_UT_Header_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_CIGC_UT_Header_C>();
	}
};
static_assert(alignof(UAB_CIGC_UT_Header_C) == 0x000010, "Wrong alignment on UAB_CIGC_UT_Header_C");
static_assert(sizeof(UAB_CIGC_UT_Header_C) == 0x000E60, "Wrong size on UAB_CIGC_UT_Header_C");
static_assert(offsetof(UAB_CIGC_UT_Header_C, UberGraphFrame) == 0x000520, "Member 'UAB_CIGC_UT_Header_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimBlueprintExtension_PropertyAccess) == 0x000528, "Member 'UAB_CIGC_UT_Header_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimBlueprintExtension_Base) == 0x000530, "Member 'UAB_CIGC_UT_Header_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_Root) == 0x000538, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_TransitionResult_3) == 0x000560, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_TransitionResult_2) == 0x0005C0, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_TransitionResult_1) == 0x000620, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_TransitionResult) == 0x000680, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_SequencePlayer_3) == 0x0006E0, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_StateResult_3) == 0x000728, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_SequencePlayer_2) == 0x000748, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_StateResult_2) == 0x000790, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_SequencePlayer_1) == 0x0007B0, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_StateResult_1) == 0x0007F8, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_SequencePlayer) == 0x000818, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_StateResult) == 0x000860, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_StateMachine) == 0x000880, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, AnimGraphNode_ControlRig) == 0x000948, "Member 'UAB_CIGC_UT_Header_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, __CustomProperty_HeaderOffset_R_4CF03BD6455955B7420B7E81314537EE) == 0x000DB8, "Member 'UAB_CIGC_UT_Header_C::__CustomProperty_HeaderOffset_R_4CF03BD6455955B7420B7E81314537EE' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, __CustomProperty_HeaderOffset_L_4CF03BD6455955B7420B7E81314537EE) == 0x000DD0, "Member 'UAB_CIGC_UT_Header_C::__CustomProperty_HeaderOffset_L_4CF03BD6455955B7420B7E81314537EE' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, bIsHarvesting) == 0x000DE8, "Member 'UAB_CIGC_UT_Header_C::bIsHarvesting' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, IKTraceDistance) == 0x000DF0, "Member 'UAB_CIGC_UT_Header_C::IKTraceDistance' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, IKWeighting) == 0x000DF8, "Member 'UAB_CIGC_UT_Header_C::IKWeighting' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, bEnableIK) == 0x000E00, "Member 'UAB_CIGC_UT_Header_C::bEnableIK' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, HeaderOffset_L) == 0x000E08, "Member 'UAB_CIGC_UT_Header_C::HeaderOffset_L' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, HeaderOffset_R) == 0x000E20, "Member 'UAB_CIGC_UT_Header_C::HeaderOffset_R' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, VFXVacuum) == 0x000E38, "Member 'UAB_CIGC_UT_Header_C::VFXVacuum' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, Delta_Time_X) == 0x000E40, "Member 'UAB_CIGC_UT_Header_C::Delta_Time_X' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, bIsGrounded) == 0x000E48, "Member 'UAB_CIGC_UT_Header_C::bIsGrounded' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Header_C, BoneArray) == 0x000E50, "Member 'UAB_CIGC_UT_Header_C::BoneArray' has a wrong offset!");

}

