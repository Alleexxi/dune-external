#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SuspensorFieldEmitter_Base

#include "Basic.hpp"

#include "BP_SuspensorFieldEmitter_Base_classes.hpp"
#include "BP_SuspensorFieldEmitter_Base_parameters.hpp"


namespace SDK
{

// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.Added_CEE6B79E4C314FA1CCE9D7AA3D262CB5
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::Added_CEE6B79E4C314FA1CCE9D7AA3D262CB5()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "Added_CEE6B79E4C314FA1CCE9D7AA3D262CB5");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.AddInteractionWaveVFX
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Overlapping_Actor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::AddInteractionWaveVFX(class AActor* Overlapping_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "AddInteractionWaveVFX");

	Params::BP_SuspensorFieldEmitter_Base_C_AddInteractionWaveVFX Parms{};

	Parms.Overlapping_Actor = Overlapping_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.AddSuspensorScreenVFX
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Overlapping_Actor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::AddSuspensorScreenVFX(class AActor* Overlapping_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "AddSuspensorScreenVFX");

	Params::BP_SuspensorFieldEmitter_Base_C_AddSuspensorScreenVFX Parms{};

	Parms.Overlapping_Actor = Overlapping_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.AlreadySuspended
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::AlreadySuspended(class AActor* Actor, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "AlreadySuspended");

	Params::BP_SuspensorFieldEmitter_Base_C_AlreadySuspended Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.ApplyForce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::ApplyForce(class AActor* InActor, double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "ApplyForce");

	Params::BP_SuspensorFieldEmitter_Base_C_ApplyForce Parms{};

	Parms.InActor = InActor;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.BndEvt__BP_Gren_Suspensor_Field_Proto_DamageableActor_K2Node_ComponentBoundEvent_1_HandleDeathOrDefeatOnServerSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInstigatorInfo&           InstigatorInfo                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// const bool                              bIsDeath                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSubclassOf<class UDuneDamageType>      DeathDefeatCausingDamageType                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::BndEvt__BP_Gren_Suspensor_Field_Proto_DamageableActor_K2Node_ComponentBoundEvent_1_HandleDeathOrDefeatOnServerSignature__DelegateSignature(const struct FInstigatorInfo& InstigatorInfo, const bool bIsDeath, TSubclassOf<class UDuneDamageType> DeathDefeatCausingDamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "BndEvt__BP_Gren_Suspensor_Field_Proto_DamageableActor_K2Node_ComponentBoundEvent_1_HandleDeathOrDefeatOnServerSignature__DelegateSignature");

	Params::BP_SuspensorFieldEmitter_Base_C_BndEvt__BP_Gren_Suspensor_Field_Proto_DamageableActor_K2Node_ComponentBoundEvent_1_HandleDeathOrDefeatOnServerSignature__DelegateSignature Parms{};

	Parms.InstigatorInfo = std::move(InstigatorInfo);
	Parms.bIsDeath = bIsDeath;
	Parms.DeathDefeatCausingDamageType = DeathDefeatCausingDamageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.CanDestroyEmitter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::CanDestroyEmitter(class AActor* Actor, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "CanDestroyEmitter");

	Params::BP_SuspensorFieldEmitter_Base_C_CanDestroyEmitter Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.CanSuspendActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::CanSuspendActor(class AActor* Actor, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "CanSuspendActor");

	Params::BP_SuspensorFieldEmitter_Base_C_CanSuspendActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.DisableField
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::DisableField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "DisableField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.EnableField
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::EnableField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "EnableField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.ExecuteUbergraph_BP_SuspensorFieldEmitter_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::ExecuteUbergraph_BP_SuspensorFieldEmitter_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "ExecuteUbergraph_BP_SuspensorFieldEmitter_Base");

	Params::BP_SuspensorFieldEmitter_Base_C_ExecuteUbergraph_BP_SuspensorFieldEmitter_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.GetForceFromLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 Force                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::GetForceFromLocation(class AActor* Actor, double* Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "GetForceFromLocation");

	Params::BP_SuspensorFieldEmitter_Base_C_GetForceFromLocation Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Force != nullptr)
		*Force = Parms.Force;
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.GetHeightForce
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Primitive                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_SuspensorFieldEmitter_Base_C::GetHeightForce(class USceneComponent* Primitive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "GetHeightForce");

	Params::BP_SuspensorFieldEmitter_Base_C_GetHeightForce Parms{};

	Parms.Primitive = Primitive;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.GetOverlappingEmitters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_SuspensorFieldEmitter_Base_C*>*OutFields                                              (Parm, OutParm)

void ABP_SuspensorFieldEmitter_Base_C::GetOverlappingEmitters(TArray<class ABP_SuspensorFieldEmitter_Base_C*>* OutFields)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "GetOverlappingEmitters");

	Params::BP_SuspensorFieldEmitter_Base_C_GetOverlappingEmitters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutFields != nullptr)
		*OutFields = std::move(Parms.OutFields);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.GetTraceForce
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_SuspensorFieldEmitter_Base_C::GetTraceForce(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "GetTraceForce");

	Params::BP_SuspensorFieldEmitter_Base_C_GetTraceForce Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.IsSuspendingActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::IsSuspendingActor(class AActor* Actor, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "IsSuspendingActor");

	Params::BP_SuspensorFieldEmitter_Base_C_IsSuspendingActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.Launch
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::Launch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "Launch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.OnSuspendingStoppedForActor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_SuspensorFieldEmitter_Base_C* Emitter                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::OnSuspendingStoppedForActor(class ABP_SuspensorFieldEmitter_Base_C* Emitter, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "OnSuspendingStoppedForActor");

	Params::BP_SuspensorFieldEmitter_Base_C_OnSuspendingStoppedForActor Parms{};

	Parms.Emitter = Emitter;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "ReceiveActorBeginOverlap");

	Params::BP_SuspensorFieldEmitter_Base_C_ReceiveActorBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.ReceiveActorEndOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "ReceiveActorEndOverlap");

	Params::BP_SuspensorFieldEmitter_Base_C_ReceiveActorEndOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "ReceiveEndPlay");

	Params::BP_SuspensorFieldEmitter_Base_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.ReceiveLifespan
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  LifeSpan                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::ReceiveLifespan(double LifeSpan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "ReceiveLifespan");

	Params::BP_SuspensorFieldEmitter_Base_C_ReceiveLifespan Parms{};

	Parms.LifeSpan = LifeSpan;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "ReceiveTick");

	Params::BP_SuspensorFieldEmitter_Base_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.RemoveSuspensorScreenVFX
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Overlapping_Actor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::RemoveSuspensorScreenVFX(class AActor* Overlapping_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "RemoveSuspensorScreenVFX");

	Params::BP_SuspensorFieldEmitter_Base_C_RemoveSuspensorScreenVFX Parms{};

	Parms.Overlapping_Actor = Overlapping_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.SetSuspensorScreenParamsVFX
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::SetSuspensorScreenParamsVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "SetSuspensorScreenParamsVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.SFX_FieldDisabled
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::SFX_FieldDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "SFX_FieldDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.SFX_FieldEnabled
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::SFX_FieldEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "SFX_FieldEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.SFX_Launch
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::SFX_Launch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "SFX_Launch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.SFX_OnActivate
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::SFX_OnActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "SFX_OnActivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.ShouldAffectCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActorToCheck                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   bShouldApply                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::ShouldAffectCharacter(class AActor* InActorToCheck, bool* bShouldApply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "ShouldAffectCharacter");

	Params::BP_SuspensorFieldEmitter_Base_C_ShouldAffectCharacter Parms{};

	Parms.InActorToCheck = InActorToCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldApply != nullptr)
		*bShouldApply = Parms.bShouldApply;
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.StartSuspending
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::StartSuspending(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "StartSuspending");

	Params::BP_SuspensorFieldEmitter_Base_C_StartSuspending Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.StopSuspending
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::StopSuspending(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "StopSuspending");

	Params::BP_SuspensorFieldEmitter_Base_C_StopSuspending Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.Timeline_Launch__FinishedFunc
// (BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::Timeline_Launch__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "Timeline_Launch__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.Timeline_Launch__UpdateFunc
// (BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::Timeline_Launch__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "Timeline_Launch__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.TryLerpPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                InHitResult                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_SuspensorFieldEmitter_Base_C::TryLerpPosition(const struct FHitResult& InHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "TryLerpPosition");

	Params::BP_SuspensorFieldEmitter_Base_C_TryLerpPosition Parms{};

	Parms.InHitResult = std::move(InHitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.VFX_DisableField
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::VFX_DisableField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "VFX_DisableField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.VFX_SpawnBubble
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::VFX_SpawnBubble()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "VFX_SpawnBubble");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.VFX_StartGather
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::VFX_StartGather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "VFX_StartGather");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.VFX_SuspensorFieldMaterial
// (BlueprintCallable, BlueprintEvent)

void ABP_SuspensorFieldEmitter_Base_C::VFX_SuspensorFieldMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "VFX_SuspensorFieldMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SuspensorFieldEmitter_Base.BP_SuspensorFieldEmitter_Base_C.Wait for Existing Suspension to Stop
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Continue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SuspensorFieldEmitter_Base_C::Wait_for_Existing_Suspension_to_Stop(class AActor* Actor, bool* Continue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SuspensorFieldEmitter_Base_C", "Wait for Existing Suspension to Stop");

	Params::BP_SuspensorFieldEmitter_Base_C_Wait_for_Existing_Suspension_to_Stop Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Continue != nullptr)
		*Continue = Parms.Continue;
}

}

