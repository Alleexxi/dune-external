#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SandStorm

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SandStorm.BP_SandStorm_C
// 0x0240 (0x08D8 - 0x0698)
class ABP_SandStorm_C final : public ASandStormBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0698(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      SandstormSplineParticle;                           // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       DistanceCheckSpline;                               // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      SandstormBoundaryParticle;                         // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       SandstormBoundarySpline;                           // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningManager_Component_C*  BP_StormLightningManager_Component;                // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent27;                      // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent26;                      // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent25;                      // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent24;                      // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent23;                      // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent22;                      // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent21;                      // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent20;                      // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent19;                      // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent18;                      // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent17;                      // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent16;                      // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent15;                      // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent14;                      // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent13;                      // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent12;                      // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent11;                      // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent10;                      // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent09;                      // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent08;                      // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent07;                      // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent06;                      // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent05;                      // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent04;                      // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent03;                      // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent02;                      // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StormLightningComponent_C*          BP_StormLightningComponent01;                      // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DepthMesh;                                         // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   VolumetricCloudMesh;                               // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Lightning;                                         // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ScaledComponents;                                  // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           StormColor;                                        // 0x07C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayerDistanceToSpline;                            // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                PlayerLocation;                                    // 0x07D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerClosestPointToSpline;                        // 0x07F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            StormBuildupCurve;                                 // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<class UObject*, bool>                    PlayerInZone;                                      // 0x0810(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMulticastInlineDelegate<void(double StormAlpha)> UpdateStormAlphaBuildup;                       // 0x0860(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        RespawnDelay;                                      // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTimerHandle>                   Timers;                                            // 0x0878(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HideLightningComponents;                           // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_889[0x7];                                      // 0x0889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DecayAlpha;                                        // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            StormDecayCurve;                                   // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          StartAudioEvent;                                   // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          EndAudioEvent;                                     // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCanvasRenderTarget2D*                  Sand_Color_RenderTexture;                          // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviewLightningInEditor;                          // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B9[0x7];                                      // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LightingStartThreshold;                            // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_UiMap_Sandstorm_C*                  BP_Ui_Map_Sandstorm;                               // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableUIMapSandstorm;                              // 0x08D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DoPlaySound(class UFcAudioEvent* Event);
	void ExecuteUbergraph_BP_SandStorm(int32 EntryPoint);
	void NewFunction();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void SetRTPCValues();
	void Update_Niagra_Parameter_Collection();
	void UpdateSoundRtpcs();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SandStorm_C">();
	}
	static class ABP_SandStorm_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SandStorm_C>();
	}
};
static_assert(alignof(ABP_SandStorm_C) == 0x000008, "Wrong alignment on ABP_SandStorm_C");
static_assert(sizeof(ABP_SandStorm_C) == 0x0008D8, "Wrong size on ABP_SandStorm_C");
static_assert(offsetof(ABP_SandStorm_C, UberGraphFrame) == 0x000698, "Member 'ABP_SandStorm_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, SandstormSplineParticle) == 0x0006A0, "Member 'ABP_SandStorm_C::SandstormSplineParticle' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, DistanceCheckSpline) == 0x0006A8, "Member 'ABP_SandStorm_C::DistanceCheckSpline' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, SandstormBoundaryParticle) == 0x0006B0, "Member 'ABP_SandStorm_C::SandstormBoundaryParticle' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, SandstormBoundarySpline) == 0x0006B8, "Member 'ABP_SandStorm_C::SandstormBoundarySpline' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningManager_Component) == 0x0006C0, "Member 'ABP_SandStorm_C::BP_StormLightningManager_Component' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent27) == 0x0006C8, "Member 'ABP_SandStorm_C::BP_StormLightningComponent27' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent26) == 0x0006D0, "Member 'ABP_SandStorm_C::BP_StormLightningComponent26' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent25) == 0x0006D8, "Member 'ABP_SandStorm_C::BP_StormLightningComponent25' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent24) == 0x0006E0, "Member 'ABP_SandStorm_C::BP_StormLightningComponent24' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent23) == 0x0006E8, "Member 'ABP_SandStorm_C::BP_StormLightningComponent23' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent22) == 0x0006F0, "Member 'ABP_SandStorm_C::BP_StormLightningComponent22' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent21) == 0x0006F8, "Member 'ABP_SandStorm_C::BP_StormLightningComponent21' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent20) == 0x000700, "Member 'ABP_SandStorm_C::BP_StormLightningComponent20' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent19) == 0x000708, "Member 'ABP_SandStorm_C::BP_StormLightningComponent19' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent18) == 0x000710, "Member 'ABP_SandStorm_C::BP_StormLightningComponent18' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent17) == 0x000718, "Member 'ABP_SandStorm_C::BP_StormLightningComponent17' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent16) == 0x000720, "Member 'ABP_SandStorm_C::BP_StormLightningComponent16' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent15) == 0x000728, "Member 'ABP_SandStorm_C::BP_StormLightningComponent15' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent14) == 0x000730, "Member 'ABP_SandStorm_C::BP_StormLightningComponent14' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent13) == 0x000738, "Member 'ABP_SandStorm_C::BP_StormLightningComponent13' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent12) == 0x000740, "Member 'ABP_SandStorm_C::BP_StormLightningComponent12' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent11) == 0x000748, "Member 'ABP_SandStorm_C::BP_StormLightningComponent11' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent10) == 0x000750, "Member 'ABP_SandStorm_C::BP_StormLightningComponent10' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent09) == 0x000758, "Member 'ABP_SandStorm_C::BP_StormLightningComponent09' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent08) == 0x000760, "Member 'ABP_SandStorm_C::BP_StormLightningComponent08' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent07) == 0x000768, "Member 'ABP_SandStorm_C::BP_StormLightningComponent07' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent06) == 0x000770, "Member 'ABP_SandStorm_C::BP_StormLightningComponent06' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent05) == 0x000778, "Member 'ABP_SandStorm_C::BP_StormLightningComponent05' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent04) == 0x000780, "Member 'ABP_SandStorm_C::BP_StormLightningComponent04' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent03) == 0x000788, "Member 'ABP_SandStorm_C::BP_StormLightningComponent03' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent02) == 0x000790, "Member 'ABP_SandStorm_C::BP_StormLightningComponent02' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_StormLightningComponent01) == 0x000798, "Member 'ABP_SandStorm_C::BP_StormLightningComponent01' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, DepthMesh) == 0x0007A0, "Member 'ABP_SandStorm_C::DepthMesh' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, VolumetricCloudMesh) == 0x0007A8, "Member 'ABP_SandStorm_C::VolumetricCloudMesh' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, Lightning) == 0x0007B0, "Member 'ABP_SandStorm_C::Lightning' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, ScaledComponents) == 0x0007B8, "Member 'ABP_SandStorm_C::ScaledComponents' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, StormColor) == 0x0007C0, "Member 'ABP_SandStorm_C::StormColor' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, PlayerDistanceToSpline) == 0x0007D0, "Member 'ABP_SandStorm_C::PlayerDistanceToSpline' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, PlayerLocation) == 0x0007D8, "Member 'ABP_SandStorm_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, PlayerClosestPointToSpline) == 0x0007F0, "Member 'ABP_SandStorm_C::PlayerClosestPointToSpline' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, StormBuildupCurve) == 0x000808, "Member 'ABP_SandStorm_C::StormBuildupCurve' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, PlayerInZone) == 0x000810, "Member 'ABP_SandStorm_C::PlayerInZone' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, UpdateStormAlphaBuildup) == 0x000860, "Member 'ABP_SandStorm_C::UpdateStormAlphaBuildup' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, RespawnDelay) == 0x000870, "Member 'ABP_SandStorm_C::RespawnDelay' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, Timers) == 0x000878, "Member 'ABP_SandStorm_C::Timers' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, HideLightningComponents) == 0x000888, "Member 'ABP_SandStorm_C::HideLightningComponents' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, DecayAlpha) == 0x000890, "Member 'ABP_SandStorm_C::DecayAlpha' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, StormDecayCurve) == 0x000898, "Member 'ABP_SandStorm_C::StormDecayCurve' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, StartAudioEvent) == 0x0008A0, "Member 'ABP_SandStorm_C::StartAudioEvent' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, EndAudioEvent) == 0x0008A8, "Member 'ABP_SandStorm_C::EndAudioEvent' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, Sand_Color_RenderTexture) == 0x0008B0, "Member 'ABP_SandStorm_C::Sand_Color_RenderTexture' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, PreviewLightningInEditor) == 0x0008B8, "Member 'ABP_SandStorm_C::PreviewLightningInEditor' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, LightingStartThreshold) == 0x0008C0, "Member 'ABP_SandStorm_C::LightingStartThreshold' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, BP_Ui_Map_Sandstorm) == 0x0008C8, "Member 'ABP_SandStorm_C::BP_Ui_Map_Sandstorm' has a wrong offset!");
static_assert(offsetof(ABP_SandStorm_C, EnableUIMapSandstorm) == 0x0008D0, "Member 'ABP_SandStorm_C::EnableUIMapSandstorm' has a wrong offset!");

}

