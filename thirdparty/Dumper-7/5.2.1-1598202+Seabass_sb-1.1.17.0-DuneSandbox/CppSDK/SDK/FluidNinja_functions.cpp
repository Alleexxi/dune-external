#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FluidNinja

#include "Basic.hpp"

#include "FluidNinja_classes.hpp"
#include "FluidNinja_parameters.hpp"


namespace SDK
{

// Function FluidNinja.FluidNinjaBlueprintLibrary.FluidNinjaClearBuffers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFluidNinjaBlueprintLibrary::FluidNinjaClearBuffers(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluidNinjaBlueprintLibrary", "FluidNinjaClearBuffers");

	Params::FluidNinjaBlueprintLibrary_FluidNinjaClearBuffers Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FluidNinja.FluidNinjaBlueprintLibrary.FluidNinjaClearSimulationAreaRadiusOverride
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFluidNinjaBlueprintLibrary::FluidNinjaClearSimulationAreaRadiusOverride(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluidNinjaBlueprintLibrary", "FluidNinjaClearSimulationAreaRadiusOverride");

	Params::FluidNinjaBlueprintLibrary_FluidNinjaClearSimulationAreaRadiusOverride Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FluidNinja.FluidNinjaBlueprintLibrary.FluidNinjaOverrideSimulationAreaRadius
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RadiusX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RadiusY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFluidNinjaBlueprintLibrary::FluidNinjaOverrideSimulationAreaRadius(class UObject* WorldContextObject, float RadiusX, float RadiusY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluidNinjaBlueprintLibrary", "FluidNinjaOverrideSimulationAreaRadius");

	Params::FluidNinjaBlueprintLibrary_FluidNinjaOverrideSimulationAreaRadius Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.RadiusX = RadiusX;
	Parms.RadiusY = RadiusY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FluidNinja.FluidNinjaBlueprintLibrary.FluidNinjaTrackActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFluidNinjaBlueprintLibrary::FluidNinjaTrackActor(class UObject* WorldContextObject, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FluidNinjaBlueprintLibrary", "FluidNinjaTrackActor");

	Params::FluidNinjaBlueprintLibrary_FluidNinjaTrackActor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FluidNinja.FluidNinjaLandscapeComponent.Clear
// (Final, Native, Public, BlueprintCallable)

void UFluidNinjaLandscapeComponent::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidNinjaLandscapeComponent", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FluidNinja.FluidNinjaLandscapeComponent.GetNinjaLiveActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UFluidNinjaLandscapeComponent::GetNinjaLiveActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidNinjaLandscapeComponent", "GetNinjaLiveActor");

	Params::FluidNinjaLandscapeComponent_GetNinjaLiveActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FluidNinja.FluidNinjaLandscapeComponent.TrackActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFluidNinjaLandscapeComponent::TrackActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluidNinjaLandscapeComponent", "TrackActor");

	Params::FluidNinjaLandscapeComponent_TrackActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

