#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_DBNO_Status

#include "Basic.hpp"

#include "W_DBNO_Status_classes.hpp"
#include "W_DBNO_Status_parameters.hpp"


namespace SDK
{

// Function W_DBNO_Status.W_DBNO_Status_C.UpdateSelfReviveBarVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UW_DBNO_Status_C::UpdateSelfReviveBarVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "UpdateSelfReviveBarVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_DBNO_Status.W_DBNO_Status_C.UpdateKeyStates
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_DBNO_Status_C::UpdateKeyStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "UpdateKeyStates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_DBNO_Status.W_DBNO_Status_C.SetReviveBarFillPercentage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percentage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_DBNO_Status_C::SetReviveBarFillPercentage(double Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "SetReviveBarFillPercentage");

	Params::W_DBNO_Status_C_SetReviveBarFillPercentage Parms{};

	Parms.Percentage = Percentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_DBNO_Status.W_DBNO_Status_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_DBNO_Status_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "PreConstruct");

	Params::W_DBNO_Status_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_DBNO_Status.W_DBNO_Status_C.OnSurrenderToDesert
// (Event, Protected, BlueprintEvent)

void UW_DBNO_Status_C::OnSurrenderToDesert()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "OnSurrenderToDesert");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_DBNO_Status.W_DBNO_Status_C.OnSelfReviveTriggered
// (Event, Protected, BlueprintEvent)

void UW_DBNO_Status_C::OnSelfReviveTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "OnSelfReviveTriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_DBNO_Status.W_DBNO_Status_C.OnSelfRevivePercentageChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const float                             Percentage                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_DBNO_Status_C::OnSelfRevivePercentageChanged(const float Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "OnSelfRevivePercentageChanged");

	Params::W_DBNO_Status_C_OnSelfRevivePercentageChanged Parms{};

	Parms.Percentage = Percentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_DBNO_Status.W_DBNO_Status_C.OnSelfReviveInterrupted
// (Event, Protected, BlueprintEvent)

void UW_DBNO_Status_C::OnSelfReviveInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "OnSelfReviveInterrupted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_DBNO_Status.W_DBNO_Status_C.OnDownedStateTimerPercentageChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const float                             Percentage                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_DBNO_Status_C::OnDownedStateTimerPercentageChanged(const float Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "OnDownedStateTimerPercentageChanged");

	Params::W_DBNO_Status_C_OnDownedStateTimerPercentageChanged Parms{};

	Parms.Percentage = Percentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_DBNO_Status.W_DBNO_Status_C.OnDownedStateHealthPercentageChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const float                             Percentage                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_DBNO_Status_C::OnDownedStateHealthPercentageChanged(const float Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "OnDownedStateHealthPercentageChanged");

	Params::W_DBNO_Status_C_OnDownedStateHealthPercentageChanged Parms{};

	Parms.Percentage = Percentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_DBNO_Status.W_DBNO_Status_C.OnCharacterStateChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              PreviousCharacterState                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              NewCharacterState                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UW_DBNO_Status_C::OnCharacterStateChanged(const struct FGameplayTag& PreviousCharacterState, const struct FGameplayTag& NewCharacterState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "OnCharacterStateChanged");

	Params::W_DBNO_Status_C_OnCharacterStateChanged Parms{};

	Parms.PreviousCharacterState = std::move(PreviousCharacterState);
	Parms.NewCharacterState = std::move(NewCharacterState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_DBNO_Status.W_DBNO_Status_C.OnCanPayReviveCostChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bCanPayReviveCost                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_DBNO_Status_C::OnCanPayReviveCostChanged(const bool bCanPayReviveCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "OnCanPayReviveCostChanged");

	Params::W_DBNO_Status_C_OnCanPayReviveCostChanged Parms{};

	Parms.bCanPayReviveCost = bCanPayReviveCost;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_DBNO_Status.W_DBNO_Status_C.ExecuteUbergraph_W_DBNO_Status
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_DBNO_Status_C::ExecuteUbergraph_W_DBNO_Status(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_DBNO_Status_C", "ExecuteUbergraph_W_DBNO_Status");

	Params::W_DBNO_Status_C_ExecuteUbergraph_W_DBNO_Status Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

