#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FcAudio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum FcAudio.EAudioAkPlayingIdRemoveComponentTags
// NumValues: 0x0004
enum class EAudioAkPlayingIdRemoveComponentTags : uint8
{
	Resolved                                 = 1,
	CantResolve                              = 2,
	GlobalAudioObject                        = 4,
	EAudioAkPlayingIdRemoveComponentTags_MAX = 5,
};

// Enum FcAudio.EAudioAmbientActorComponentTags
// NumValues: 0x0005
enum class EAudioAmbientActorComponentTags : uint8
{
	PendingInitialization                    = 1,
	ScheduledDestroy                         = 2,
	ContinuousUpdateEnabled                  = 4,
	ManualUpdate                             = 8,
	EAudioAmbientActorComponentTags_MAX      = 9,
};

// Enum FcAudio.EAudioAmbientActorStaticMeshComponentTags
// NumValues: 0x0004
enum class EAudioAmbientActorStaticMeshComponentTags : uint8
{
	PendingInitialization                    = 1,
	ScheduledDestroy                         = 2,
	HasPendingPassedRules                    = 4,
	EAudioAmbientActorStaticMeshComponentTags_MAX = 5,
};

// Enum FcAudio.EAudioAmbientActorMeshInstanceComponentTags
// NumValues: 0x0003
enum class EAudioAmbientActorMeshInstanceComponentTags : uint8
{
	PendingInitialization                    = 1,
	ScheduledDestroy                         = 2,
	EAudioAmbientActorMeshInstanceComponentTags_MAX = 3,
};

// Enum FcAudio.EAudioConcurrencyRuleComponentTags
// NumValues: 0x0004
enum class EAudioConcurrencyRuleComponentTags : uint8
{
	ScopeGlobal                              = 1,
	ScopeAudioObject                         = 2,
	ScheduledRemove                          = 4,
	EAudioConcurrencyRuleComponentTags_MAX   = 5,
};

// Enum FcAudio.EAudioObjectAudibleRangeComponentTags
// NumValues: 0x0009
enum class EAudioObjectAudibleRangeComponentTags : uint16
{
	PendingInit                              = 2,
	WithinListenerRange                      = 4,
	WithinListenerRangeChanged               = 8,
	NeedsRangeUpdate                         = 16,
	ForceApply                               = 32,
	Applying                                 = 64,
	NoAction                                 = 128,
	RestoringFglSnapshot                     = 256,
	EAudioObjectAudibleRangeComponentTags_MAX = 257,
};

// Enum FcAudio.EAudioObjectFollowComponentTags
// NumValues: 0x0002
enum class EAudioObjectFollowComponentTags : uint8
{
	Unresolved                               = 2,
	EAudioObjectFollowComponentTags_MAX      = 3,
};

// Enum FcAudio.EAudioObjectReverbComponentTags
// NumValues: 0x0004
enum class EAudioObjectReverbComponentTags : uint8
{
	PendingApply                             = 1,
	CameraSource                             = 2,
	Inactive                                 = 4,
	EAudioObjectReverbComponentTags_MAX      = 5,
};

// Enum FcAudio.FAudioRequestComponentTags
// NumValues: 0x0004
enum class EFAudioRequestComponentTags : uint8
{
	Global                                   = 1,
	Resolved                                 = 2,
	CantResolve                              = 4,
	FAudioRequestComponentTags_MAX           = 5,
};

// Enum FcAudio.EAudioSystemSingletonComponentTags
// NumValues: 0x0002
enum class EAudioSystemSingletonComponentTags : uint8
{
	NeedsListenersUpdate                     = 1,
	EAudioSystemSingletonComponentTags_MAX   = 2,
};

// Enum FcAudio.EAudioTriggeredEmitterComponentTags
// NumValues: 0x0002
enum class EAudioTriggeredEmitterComponentTags : uint8
{
	TriggeredValueChanged                    = 1,
	EAudioTriggeredEmitterComponentTags_MAX  = 2,
};

// Enum FcAudio.EAudioConcurrencyRuleType
// NumValues: 0x0005
enum class EAudioConcurrencyRuleType : uint8
{
	None                                     = 0,
	ClosestOnly                              = 1,
	NewestOnly                               = 2,
	OldestOnly                               = 3,
	MAX                                      = 4,
};

// Enum FcAudio.EAudioConcurrencyRuleFailAction
// NumValues: 0x0003
enum class EAudioConcurrencyRuleFailAction : uint8
{
	Mute                                     = 0,
	Stop                                     = 1,
	MAX                                      = 2,
};

// Enum FcAudio.EAudioConcurrencyRuleScope
// NumValues: 0x0003
enum class EAudioConcurrencyRuleScope : uint8
{
	Global                                   = 0,
	AudioObject                              = 1,
	MAX                                      = 2,
};

// Enum FcAudio.EFcAudioOcclusionHighQualitySetting
// NumValues: 0x0004
enum class EFcAudioOcclusionHighQualitySetting : uint8
{
	Auto                                     = 0,
	AlwaysYes                                = 1,
	AlwaysNo                                 = 2,
	MAX                                      = 3,
};

// Enum FcAudio.FAudioAkGameObjectComponentTags
// NumValues: 0x0011
enum class EFAudioAkGameObjectComponentTags : uint16
{
	Initialized                              = 1,
	PendingCheckAutodestroy                  = 2,
	IsActive                                 = 4,
	PotentiallyActive                        = 8,
	DestroyScheduled                         = 16,
	RestoringFromSnapshot                    = 32,
	IsDefaultListener                        = 64,
	IsDefaultListenerDirty                   = 128,
	IsInsideAudioVolume                      = 256,
	NeedsListenersUpdate                     = 512,
	UsingRoomType                            = 1024,
	AudioVolumeProceduralReverbDisabled      = 2048,
	HighestPrioVolumeChanged                 = 4096,
	NeedsPositionUpdate                      = 8192,
	IsTransientObject                        = 16384,
	AutoDestroyOnWorldSwitch                 = 32768,
	FAudioAkGameObjectComponentTags_MAX      = 32769,
};

// Enum FcAudio.ESplineAreaComponentTags
// NumValues: 0x0003
enum class ESplineAreaComponentTags : uint8
{
	Disabled                                 = 1,
	ActorRemoved                             = 2,
	ESplineAreaComponentTags_MAX             = 3,
};

// ScriptStruct FcAudio.AudioAkPlayingIdRemoveComponent
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FAudioAkPlayingIdRemoveComponent final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioAkPlayingIdRemoveComponent) == 0x000008, "Wrong alignment on FAudioAkPlayingIdRemoveComponent");
static_assert(sizeof(FAudioAkPlayingIdRemoveComponent) == 0x000018, "Wrong size on FAudioAkPlayingIdRemoveComponent");

// ScriptStruct FcAudio.AudioAmbientActorComponent
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FAudioAmbientActorComponent final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioAmbientActorComponent) == 0x000008, "Wrong alignment on FAudioAmbientActorComponent");
static_assert(sizeof(FAudioAmbientActorComponent) == 0x000058, "Wrong size on FAudioAmbientActorComponent");

// ScriptStruct FcAudio.AudioAmbientActorStaticMeshComponent
// 0x0098 (0x0098 - 0x0000)
struct alignas(0x08) FAudioAmbientActorStaticMeshComponent final
{
public:
	uint8                                         Pad_0[0x98];                                       // 0x0000(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioAmbientActorStaticMeshComponent) == 0x000008, "Wrong alignment on FAudioAmbientActorStaticMeshComponent");
static_assert(sizeof(FAudioAmbientActorStaticMeshComponent) == 0x000098, "Wrong size on FAudioAmbientActorStaticMeshComponent");

// ScriptStruct FcAudio.AudioAmbientActorMeshInstanceComponent
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FAudioAmbientActorMeshInstanceComponent final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioAmbientActorMeshInstanceComponent) == 0x000010, "Wrong alignment on FAudioAmbientActorMeshInstanceComponent");
static_assert(sizeof(FAudioAmbientActorMeshInstanceComponent) == 0x000090, "Wrong size on FAudioAmbientActorMeshInstanceComponent");

// ScriptStruct FcAudio.AudioConcurrencyRuleComponent
// 0x0001 (0x0001 - 0x0000)
struct FAudioConcurrencyRuleComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioConcurrencyRuleComponent) == 0x000001, "Wrong alignment on FAudioConcurrencyRuleComponent");
static_assert(sizeof(FAudioConcurrencyRuleComponent) == 0x000001, "Wrong size on FAudioConcurrencyRuleComponent");

// ScriptStruct FcAudio.AudioEnvironmentSingletonComponent
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FAudioEnvironmentSingletonComponent final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioEnvironmentSingletonComponent) == 0x000008, "Wrong alignment on FAudioEnvironmentSingletonComponent");
static_assert(sizeof(FAudioEnvironmentSingletonComponent) == 0x000030, "Wrong size on FAudioEnvironmentSingletonComponent");

// ScriptStruct FcAudio.AudioEventSubtitlesComponent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAudioEventSubtitlesComponent final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioEventSubtitlesComponent) == 0x000008, "Wrong alignment on FAudioEventSubtitlesComponent");
static_assert(sizeof(FAudioEventSubtitlesComponent) == 0x000028, "Wrong size on FAudioEventSubtitlesComponent");

// ScriptStruct FcAudio.AudioObjectAudibleRangeComponent
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FAudioObjectAudibleRangeComponent final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioObjectAudibleRangeComponent) == 0x000008, "Wrong alignment on FAudioObjectAudibleRangeComponent");
static_assert(sizeof(FAudioObjectAudibleRangeComponent) == 0x000040, "Wrong size on FAudioObjectAudibleRangeComponent");

// ScriptStruct FcAudio.AudioObjectAudibleRangeCallbacksComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FAudioObjectAudibleRangeCallbacksComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioObjectAudibleRangeCallbacksComponent) == 0x000008, "Wrong alignment on FAudioObjectAudibleRangeCallbacksComponent");
static_assert(sizeof(FAudioObjectAudibleRangeCallbacksComponent) == 0x000010, "Wrong size on FAudioObjectAudibleRangeCallbacksComponent");

// ScriptStruct FcAudio.AudioObjectFollowComponent
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FAudioObjectFollowComponent final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioObjectFollowComponent) == 0x000010, "Wrong alignment on FAudioObjectFollowComponent");
static_assert(sizeof(FAudioObjectFollowComponent) == 0x000090, "Wrong size on FAudioObjectFollowComponent");

// ScriptStruct FcAudio.AudioObjectOcclusionComponent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAudioObjectOcclusionComponent final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioObjectOcclusionComponent) == 0x000008, "Wrong alignment on FAudioObjectOcclusionComponent");
static_assert(sizeof(FAudioObjectOcclusionComponent) == 0x000028, "Wrong size on FAudioObjectOcclusionComponent");

// ScriptStruct FcAudio.AudioObjectReverbComponent
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FAudioObjectReverbComponent final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioObjectReverbComponent) == 0x000008, "Wrong alignment on FAudioObjectReverbComponent");
static_assert(sizeof(FAudioObjectReverbComponent) == 0x0000A0, "Wrong size on FAudioObjectReverbComponent");

// ScriptStruct FcAudio.AudioRequestComponent
// 0x03A0 (0x03A0 - 0x0000)
struct alignas(0x10) FAudioRequestComponent final
{
public:
	uint8                                         Pad_0[0x3A0];                                      // 0x0000(0x03A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioRequestComponent) == 0x000010, "Wrong alignment on FAudioRequestComponent");
static_assert(sizeof(FAudioRequestComponent) == 0x0003A0, "Wrong size on FAudioRequestComponent");

// ScriptStruct FcAudio.AudioSceneVolumeComponent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FAudioSceneVolumeComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioSceneVolumeComponent) == 0x000004, "Wrong alignment on FAudioSceneVolumeComponent");
static_assert(sizeof(FAudioSceneVolumeComponent) == 0x000008, "Wrong size on FAudioSceneVolumeComponent");

// ScriptStruct FcAudio.AudioSortedRequestsSingletonComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FAudioSortedRequestsSingletonComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioSortedRequestsSingletonComponent) == 0x000008, "Wrong alignment on FAudioSortedRequestsSingletonComponent");
static_assert(sizeof(FAudioSortedRequestsSingletonComponent) == 0x000010, "Wrong size on FAudioSortedRequestsSingletonComponent");

// ScriptStruct FcAudio.AudioSystemSingletonComponent
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FAudioSystemSingletonComponent final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioSystemSingletonComponent) == 0x000008, "Wrong alignment on FAudioSystemSingletonComponent");
static_assert(sizeof(FAudioSystemSingletonComponent) == 0x000040, "Wrong size on FAudioSystemSingletonComponent");

// ScriptStruct FcAudio.AudioTriggeredEmitterComponent
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FAudioTriggeredEmitterComponent final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioTriggeredEmitterComponent) == 0x000004, "Wrong alignment on FAudioTriggeredEmitterComponent");
static_assert(sizeof(FAudioTriggeredEmitterComponent) == 0x000004, "Wrong size on FAudioTriggeredEmitterComponent");

// ScriptStruct FcAudio.EAudioEventConcurrencyConfig
// 0x0006 (0x0006 - 0x0000)
struct FEAudioEventConcurrencyConfig final
{
public:
	EAudioConcurrencyRuleType                     RuleType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioConcurrencyRuleScope                    RuleScope;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RuleLimit;                                         // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioConcurrencyRuleFailAction               RuleFailAction;                                    // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        FailActionStopTransitionDuration;                  // 0x0004(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEAudioEventConcurrencyConfig) == 0x000002, "Wrong alignment on FEAudioEventConcurrencyConfig");
static_assert(sizeof(FEAudioEventConcurrencyConfig) == 0x000006, "Wrong size on FEAudioEventConcurrencyConfig");
static_assert(offsetof(FEAudioEventConcurrencyConfig, RuleType) == 0x000000, "Member 'FEAudioEventConcurrencyConfig::RuleType' has a wrong offset!");
static_assert(offsetof(FEAudioEventConcurrencyConfig, RuleScope) == 0x000001, "Member 'FEAudioEventConcurrencyConfig::RuleScope' has a wrong offset!");
static_assert(offsetof(FEAudioEventConcurrencyConfig, RuleLimit) == 0x000002, "Member 'FEAudioEventConcurrencyConfig::RuleLimit' has a wrong offset!");
static_assert(offsetof(FEAudioEventConcurrencyConfig, RuleFailAction) == 0x000003, "Member 'FEAudioEventConcurrencyConfig::RuleFailAction' has a wrong offset!");
static_assert(offsetof(FEAudioEventConcurrencyConfig, FailActionStopTransitionDuration) == 0x000004, "Member 'FEAudioEventConcurrencyConfig::FailActionStopTransitionDuration' has a wrong offset!");

// ScriptStruct FcAudio.FcAudioObjectSettings
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFcAudioObjectSettings final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_ReverbAmount;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOcclusionEnabled;                               // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_OcclusionRadius;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFcAudioOcclusionHighQualitySetting           m_HighQualityOcclusion;                            // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseRoomType;                                    // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFcAudioObjectSettings) == 0x000008, "Wrong alignment on FFcAudioObjectSettings");
static_assert(sizeof(FFcAudioObjectSettings) == 0x000018, "Wrong size on FFcAudioObjectSettings");
static_assert(offsetof(FFcAudioObjectSettings, m_ReverbAmount) == 0x000008, "Member 'FFcAudioObjectSettings::m_ReverbAmount' has a wrong offset!");
static_assert(offsetof(FFcAudioObjectSettings, m_bOcclusionEnabled) == 0x00000C, "Member 'FFcAudioObjectSettings::m_bOcclusionEnabled' has a wrong offset!");
static_assert(offsetof(FFcAudioObjectSettings, m_OcclusionRadius) == 0x000010, "Member 'FFcAudioObjectSettings::m_OcclusionRadius' has a wrong offset!");
static_assert(offsetof(FFcAudioObjectSettings, m_HighQualityOcclusion) == 0x000014, "Member 'FFcAudioObjectSettings::m_HighQualityOcclusion' has a wrong offset!");
static_assert(offsetof(FFcAudioObjectSettings, m_bUseRoomType) == 0x000015, "Member 'FFcAudioObjectSettings::m_bUseRoomType' has a wrong offset!");

// ScriptStruct FcAudio.FcAudioReverbDistanceBus
// 0x0028 (0x0028 - 0x0000)
struct FFcAudioReverbDistanceBus final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAuxBus*                              WwiseAuxBus;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendAmount;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveMapOverride;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFcAudioReverbDistanceBus) == 0x000008, "Wrong alignment on FFcAudioReverbDistanceBus");
static_assert(sizeof(FFcAudioReverbDistanceBus) == 0x000028, "Wrong size on FFcAudioReverbDistanceBus");
static_assert(offsetof(FFcAudioReverbDistanceBus, Enabled) == 0x000000, "Member 'FFcAudioReverbDistanceBus::Enabled' has a wrong offset!");
static_assert(offsetof(FFcAudioReverbDistanceBus, Distance) == 0x000004, "Member 'FFcAudioReverbDistanceBus::Distance' has a wrong offset!");
static_assert(offsetof(FFcAudioReverbDistanceBus, WwiseAuxBus) == 0x000008, "Member 'FFcAudioReverbDistanceBus::WwiseAuxBus' has a wrong offset!");
static_assert(offsetof(FFcAudioReverbDistanceBus, SendAmount) == 0x000010, "Member 'FFcAudioReverbDistanceBus::SendAmount' has a wrong offset!");
static_assert(offsetof(FFcAudioReverbDistanceBus, CurveMapOverride) == 0x000018, "Member 'FFcAudioReverbDistanceBus::CurveMapOverride' has a wrong offset!");

// ScriptStruct FcAudio.SoundEmitterComponent
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FSoundEmitterComponent final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundEmitterComponent) == 0x000008, "Wrong alignment on FSoundEmitterComponent");
static_assert(sizeof(FSoundEmitterComponent) == 0x000048, "Wrong size on FSoundEmitterComponent");

// ScriptStruct FcAudio.SpatialAudioVolumeComponent
// 0x0001 (0x0001 - 0x0000)
struct FSpatialAudioVolumeComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpatialAudioVolumeComponent) == 0x000001, "Wrong alignment on FSpatialAudioVolumeComponent");
static_assert(sizeof(FSpatialAudioVolumeComponent) == 0x000001, "Wrong size on FSpatialAudioVolumeComponent");

// ScriptStruct FcAudio.FcAudioSplineAudioEvents
// 0x0020 (0x0020 - 0x0000)
struct FFcAudioSplineAudioEvents final
{
public:
	TArray<class UFcAudioEvent*>                  m_EnterEvents;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFcAudioEvent*>                  m_LeaveEvents;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFcAudioSplineAudioEvents) == 0x000008, "Wrong alignment on FFcAudioSplineAudioEvents");
static_assert(sizeof(FFcAudioSplineAudioEvents) == 0x000020, "Wrong size on FFcAudioSplineAudioEvents");
static_assert(offsetof(FFcAudioSplineAudioEvents, m_EnterEvents) == 0x000000, "Member 'FFcAudioSplineAudioEvents::m_EnterEvents' has a wrong offset!");
static_assert(offsetof(FFcAudioSplineAudioEvents, m_LeaveEvents) == 0x000010, "Member 'FFcAudioSplineAudioEvents::m_LeaveEvents' has a wrong offset!");

// ScriptStruct FcAudio.FcAudioAmbientRuleMatchMeshProperties
// 0x00A0 (0x00A0 - 0x0000)
struct FFcAudioAmbientRuleMatchMeshProperties final
{
public:
	TSoftObjectPtr<class UStaticMesh>             MeshMatch;                                         // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameMatch;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalTransform;                                    // 0x0040(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFcAudioAmbientRuleMatchMeshProperties) == 0x000010, "Wrong alignment on FFcAudioAmbientRuleMatchMeshProperties");
static_assert(sizeof(FFcAudioAmbientRuleMatchMeshProperties) == 0x0000A0, "Wrong size on FFcAudioAmbientRuleMatchMeshProperties");
static_assert(offsetof(FFcAudioAmbientRuleMatchMeshProperties, MeshMatch) == 0x000000, "Member 'FFcAudioAmbientRuleMatchMeshProperties::MeshMatch' has a wrong offset!");
static_assert(offsetof(FFcAudioAmbientRuleMatchMeshProperties, NameMatch) == 0x000030, "Member 'FFcAudioAmbientRuleMatchMeshProperties::NameMatch' has a wrong offset!");
static_assert(offsetof(FFcAudioAmbientRuleMatchMeshProperties, LocalTransform) == 0x000040, "Member 'FFcAudioAmbientRuleMatchMeshProperties::LocalTransform' has a wrong offset!");

// ScriptStruct FcAudio.AudioAkGameObjectComponent
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FAudioAkGameObjectComponent final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioAkGameObjectComponent) == 0x000008, "Wrong alignment on FAudioAkGameObjectComponent");
static_assert(sizeof(FAudioAkGameObjectComponent) == 0x000078, "Wrong size on FAudioAkGameObjectComponent");

// ScriptStruct FcAudio.SplineAreaComponent
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FSplineAreaComponent final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSplineAreaComponent) == 0x000008, "Wrong alignment on FSplineAreaComponent");
static_assert(sizeof(FSplineAreaComponent) == 0x000038, "Wrong size on FSplineAreaComponent");

// ScriptStruct FcAudio.FcAudioEventEvalTemplate
// 0x0008 (0x0028 - 0x0020)
struct FFcAudioEventEvalTemplate final : public FMovieSceneEvalTemplate
{
public:
	class UFcAudioEventSection*                   m_AudioSection;                                    // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFcAudioEventEvalTemplate) == 0x000008, "Wrong alignment on FFcAudioEventEvalTemplate");
static_assert(sizeof(FFcAudioEventEvalTemplate) == 0x000028, "Wrong size on FFcAudioEventEvalTemplate");
static_assert(offsetof(FFcAudioEventEvalTemplate, m_AudioSection) == 0x000020, "Member 'FFcAudioEventEvalTemplate::m_AudioSection' has a wrong offset!");

// ScriptStruct FcAudio.FcAudioObjectTrackImplementation
// 0x0000 (0x0010 - 0x0010)
struct FFcAudioObjectTrackImplementation final : public FMovieSceneTrackImplementation
{
};
static_assert(alignof(FFcAudioObjectTrackImplementation) == 0x000008, "Wrong alignment on FFcAudioObjectTrackImplementation");
static_assert(sizeof(FFcAudioObjectTrackImplementation) == 0x000010, "Wrong size on FFcAudioObjectTrackImplementation");

// ScriptStruct FcAudio.FcAudioRtpcEvalTemplate
// 0x0008 (0x0028 - 0x0020)
struct FFcAudioRtpcEvalTemplate final : public FMovieSceneEvalTemplate
{
public:
	class UFcAudioRtpcSection*                    m_Section;                                         // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFcAudioRtpcEvalTemplate) == 0x000008, "Wrong alignment on FFcAudioRtpcEvalTemplate");
static_assert(sizeof(FFcAudioRtpcEvalTemplate) == 0x000028, "Wrong size on FFcAudioRtpcEvalTemplate");
static_assert(offsetof(FFcAudioRtpcEvalTemplate, m_Section) == 0x000020, "Member 'FFcAudioRtpcEvalTemplate::m_Section' has a wrong offset!");

// ScriptStruct FcAudio.FcAudioRtpcSectionCurveData
// 0x0118 (0x0118 - 0x0000)
struct FFcAudioRtpcSectionCurveData final
{
public:
	uint32                                        RtpcId;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                Curve;                                             // 0x0008(0x0110)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFcAudioRtpcSectionCurveData) == 0x000008, "Wrong alignment on FFcAudioRtpcSectionCurveData");
static_assert(sizeof(FFcAudioRtpcSectionCurveData) == 0x000118, "Wrong size on FFcAudioRtpcSectionCurveData");
static_assert(offsetof(FFcAudioRtpcSectionCurveData, RtpcId) == 0x000000, "Member 'FFcAudioRtpcSectionCurveData::RtpcId' has a wrong offset!");
static_assert(offsetof(FFcAudioRtpcSectionCurveData, Curve) == 0x000008, "Member 'FFcAudioRtpcSectionCurveData::Curve' has a wrong offset!");

// ScriptStruct FcAudio.AudioOcclusionParams
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FAudioOcclusionParams final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFcAudioOcclusionHighQualitySetting           HighQuality;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x27];                                       // 0x0009(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioOcclusionParams) == 0x000008, "Wrong alignment on FAudioOcclusionParams");
static_assert(sizeof(FAudioOcclusionParams) == 0x000030, "Wrong size on FAudioOcclusionParams");
static_assert(offsetof(FAudioOcclusionParams, bEnabled) == 0x000000, "Member 'FAudioOcclusionParams::bEnabled' has a wrong offset!");
static_assert(offsetof(FAudioOcclusionParams, Radius) == 0x000004, "Member 'FAudioOcclusionParams::Radius' has a wrong offset!");
static_assert(offsetof(FAudioOcclusionParams, HighQuality) == 0x000008, "Member 'FAudioOcclusionParams::HighQuality' has a wrong offset!");

// ScriptStruct FcAudio.AudioReverbParams
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAudioReverbParams final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x24];                                       // 0x0004(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioReverbParams) == 0x000008, "Wrong alignment on FAudioReverbParams");
static_assert(sizeof(FAudioReverbParams) == 0x000028, "Wrong size on FAudioReverbParams");
static_assert(offsetof(FAudioReverbParams, Amount) == 0x000000, "Member 'FAudioReverbParams::Amount' has a wrong offset!");

// ScriptStruct FcAudio.AudioRequest
// 0x0380 (0x0380 - 0x0000)
struct alignas(0x10) FAudioRequest final
{
public:
	uint8                                         Pad_0[0x380];                                      // 0x0000(0x0380)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioRequest) == 0x000010, "Wrong alignment on FAudioRequest");
static_assert(sizeof(FAudioRequest) == 0x000380, "Wrong size on FAudioRequest");

// ScriptStruct FcAudio.FcAudioSettingsEventCreateOverrideFolderInfo
// 0x0018 (0x0018 - 0x0000)
struct FFcAudioSettingsEventCreateOverrideFolderInfo final
{
public:
	bool                                          bUsePrefix;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         DirectoryPath;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFcAudioSettingsEventCreateOverrideFolderInfo) == 0x000008, "Wrong alignment on FFcAudioSettingsEventCreateOverrideFolderInfo");
static_assert(sizeof(FFcAudioSettingsEventCreateOverrideFolderInfo) == 0x000018, "Wrong size on FFcAudioSettingsEventCreateOverrideFolderInfo");
static_assert(offsetof(FFcAudioSettingsEventCreateOverrideFolderInfo, bUsePrefix) == 0x000000, "Member 'FFcAudioSettingsEventCreateOverrideFolderInfo::bUsePrefix' has a wrong offset!");
static_assert(offsetof(FFcAudioSettingsEventCreateOverrideFolderInfo, DirectoryPath) == 0x000008, "Member 'FFcAudioSettingsEventCreateOverrideFolderInfo::DirectoryPath' has a wrong offset!");

}

