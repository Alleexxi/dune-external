#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_ACB_LM_Treads

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "ControlRig_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_ACB_LM_Treads.AB_ACB_LM_Treads_C
// 0x0720 (0x0C40 - 0x0520)
class UAB_ACB_LM_Treads_C final : public UWheeledVehicleAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0520(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0528(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0530(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0538(0x0020)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x0558(0x0470)()
	double                                        __CustomProperty_WheelRotationRR_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x09C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_WheelRotationRL_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x09D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_WheelRotationFR_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x09D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_WheelRotationFL_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x09E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Tread_Rear_R_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x09E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Tread_Rear_L_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x0A00(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Tread_Front_R_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x0A18(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Tread_Front_L_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x0A30(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Tread_Rear_R_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x0A48(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Tread_Rear_L_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x0A60(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Tread_Front_R_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x0A78(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Tread_Front_L_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x0A90(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_Steering_D1FAEC994A4A57813EEDC5B5BBA4B0E2; // 0x0AA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADuneWheeledVehicle*                    DuneWheeledVehicle;                                // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Steering;                                          // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Front_L_Offset;                              // 0x0AC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Front_R_Offset;                              // 0x0AD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Rear_L_Offset;                               // 0x0AF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Rear_R_Offset;                               // 0x0B08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Front_L_Rotation;                            // 0x0B20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Front_R_Rotation;                            // 0x0B38(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Rear_L_Rotation;                             // 0x0B50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tread_Rear_R_Rotation;                             // 0x0B68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IKTraceDistance;                                   // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HorizontalSpeed;                                   // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HorizontalDirection;                               // 0x0B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelRotationFL;                                   // 0x0B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelRotationFR;                                   // 0x0B9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelRotationRL;                                   // 0x0BA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA4[0x4];                                      // 0x0BA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WheelRotationRR;                                   // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Time_X;                                      // 0x0BB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB4[0x4];                                      // 0x0BB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      VFXVehicleTrailSystem_00;                          // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      VFXVehicleTrailSystem_01;                          // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Driver;                                        // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              ActiveSurfaceType;                                 // 0x0BC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BCA[0x6];                                      // 0x0BCA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         SurfaceVFX;                                        // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DustTimer;                                         // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EmitterSelection;                                  // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE4[0x4];                                      // 0x0BE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicalSurface, class UNiagaraSystem*> Surface_VFX_Map;                                   // 0x0BE8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void CheckPhysMatBelow();
	void ExecuteUbergraph_AB_ACB_LM_Treads(int32 EntryPoint);
	void OnAllWheelsGroundedChanged(const bool bAllWheelsGrounded);
	void OnModuleMeshDestroyed_Event(EVehicleModuleType ModuleType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_ACB_LM_Treads_C">();
	}
	static class UAB_ACB_LM_Treads_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_ACB_LM_Treads_C>();
	}
};
static_assert(alignof(UAB_ACB_LM_Treads_C) == 0x000010, "Wrong alignment on UAB_ACB_LM_Treads_C");
static_assert(sizeof(UAB_ACB_LM_Treads_C) == 0x000C40, "Wrong size on UAB_ACB_LM_Treads_C");
static_assert(offsetof(UAB_ACB_LM_Treads_C, UberGraphFrame) == 0x000520, "Member 'UAB_ACB_LM_Treads_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, AnimBlueprintExtension_PropertyAccess) == 0x000528, "Member 'UAB_ACB_LM_Treads_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, AnimBlueprintExtension_Base) == 0x000530, "Member 'UAB_ACB_LM_Treads_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, AnimGraphNode_Root) == 0x000538, "Member 'UAB_ACB_LM_Treads_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, AnimGraphNode_ControlRig) == 0x000558, "Member 'UAB_ACB_LM_Treads_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_WheelRotationRR_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x0009C8, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_WheelRotationRR_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_WheelRotationRL_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x0009D0, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_WheelRotationRL_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_WheelRotationFR_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x0009D8, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_WheelRotationFR_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_WheelRotationFL_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x0009E0, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_WheelRotationFL_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_Tread_Rear_R_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x0009E8, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_Tread_Rear_R_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_Tread_Rear_L_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x000A00, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_Tread_Rear_L_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_Tread_Front_R_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x000A18, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_Tread_Front_R_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_Tread_Front_L_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x000A30, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_Tread_Front_L_Rotation_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_Tread_Rear_R_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x000A48, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_Tread_Rear_R_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_Tread_Rear_L_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x000A60, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_Tread_Rear_L_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_Tread_Front_R_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x000A78, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_Tread_Front_R_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_Tread_Front_L_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x000A90, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_Tread_Front_L_Offset_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, __CustomProperty_Steering_D1FAEC994A4A57813EEDC5B5BBA4B0E2) == 0x000AA8, "Member 'UAB_ACB_LM_Treads_C::__CustomProperty_Steering_D1FAEC994A4A57813EEDC5B5BBA4B0E2' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, DuneWheeledVehicle) == 0x000AB0, "Member 'UAB_ACB_LM_Treads_C::DuneWheeledVehicle' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Steering) == 0x000AB8, "Member 'UAB_ACB_LM_Treads_C::Steering' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Tread_Front_L_Offset) == 0x000AC0, "Member 'UAB_ACB_LM_Treads_C::Tread_Front_L_Offset' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Tread_Front_R_Offset) == 0x000AD8, "Member 'UAB_ACB_LM_Treads_C::Tread_Front_R_Offset' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Tread_Rear_L_Offset) == 0x000AF0, "Member 'UAB_ACB_LM_Treads_C::Tread_Rear_L_Offset' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Tread_Rear_R_Offset) == 0x000B08, "Member 'UAB_ACB_LM_Treads_C::Tread_Rear_R_Offset' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Tread_Front_L_Rotation) == 0x000B20, "Member 'UAB_ACB_LM_Treads_C::Tread_Front_L_Rotation' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Tread_Front_R_Rotation) == 0x000B38, "Member 'UAB_ACB_LM_Treads_C::Tread_Front_R_Rotation' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Tread_Rear_L_Rotation) == 0x000B50, "Member 'UAB_ACB_LM_Treads_C::Tread_Rear_L_Rotation' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Tread_Rear_R_Rotation) == 0x000B68, "Member 'UAB_ACB_LM_Treads_C::Tread_Rear_R_Rotation' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, IKTraceDistance) == 0x000B80, "Member 'UAB_ACB_LM_Treads_C::IKTraceDistance' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, HorizontalSpeed) == 0x000B88, "Member 'UAB_ACB_LM_Treads_C::HorizontalSpeed' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, HorizontalDirection) == 0x000B90, "Member 'UAB_ACB_LM_Treads_C::HorizontalDirection' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, WheelRotationFL) == 0x000B98, "Member 'UAB_ACB_LM_Treads_C::WheelRotationFL' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, WheelRotationFR) == 0x000B9C, "Member 'UAB_ACB_LM_Treads_C::WheelRotationFR' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, WheelRotationRL) == 0x000BA0, "Member 'UAB_ACB_LM_Treads_C::WheelRotationRL' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, WheelRotationRR) == 0x000BA8, "Member 'UAB_ACB_LM_Treads_C::WheelRotationRR' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Delta_Time_X) == 0x000BB0, "Member 'UAB_ACB_LM_Treads_C::Delta_Time_X' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, VFXVehicleTrailSystem_00) == 0x000BB8, "Member 'UAB_ACB_LM_Treads_C::VFXVehicleTrailSystem_00' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, VFXVehicleTrailSystem_01) == 0x000BC0, "Member 'UAB_ACB_LM_Treads_C::VFXVehicleTrailSystem_01' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Has_Driver) == 0x000BC8, "Member 'UAB_ACB_LM_Treads_C::Has_Driver' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, ActiveSurfaceType) == 0x000BC9, "Member 'UAB_ACB_LM_Treads_C::ActiveSurfaceType' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, SurfaceVFX) == 0x000BD0, "Member 'UAB_ACB_LM_Treads_C::SurfaceVFX' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, DustTimer) == 0x000BD8, "Member 'UAB_ACB_LM_Treads_C::DustTimer' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, EmitterSelection) == 0x000BE0, "Member 'UAB_ACB_LM_Treads_C::EmitterSelection' has a wrong offset!");
static_assert(offsetof(UAB_ACB_LM_Treads_C, Surface_VFX_Map) == 0x000BE8, "Member 'UAB_ACB_LM_Treads_C::Surface_VFX_Map' has a wrong offset!");

}

