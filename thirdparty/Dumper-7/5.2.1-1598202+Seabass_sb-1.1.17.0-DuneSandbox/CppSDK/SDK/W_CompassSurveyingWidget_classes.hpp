#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CompassSurveyingWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_CompassSurveyingWidget.W_CompassSurveyingWidget_C
// 0x01B0 (0x0700 - 0x0550)
class UW_CompassSurveyingWidget_C final : public USurveyProgressFeedbackWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0550(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       HideBanner;                                        // 0x0558(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Pulse;                                             // 0x0560(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Warning;                                           // 0x0568(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Failed;                                            // 0x0570(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Completed;                                         // 0x0578(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SurveyTimer;                                       // 0x0580(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonTextBlock*                       AdditionalInfo;                                    // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             DiamondBoofL;                                      // 0x0590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             DiamondBoofR;                                      // 0x0598(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             DiamondCompleted;                                  // 0x05A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             DiamondCompleted_2;                                // 0x05A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             DiamondFailed;                                     // 0x05B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             DiamondGlow;                                       // 0x05B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                DistanceBorder;                                    // 0x05C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             DistanceLineLeft;                                  // 0x05C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             DistanceLineRight;                                 // 0x05D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             IconCompleted;                                     // 0x05D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             IconFailed;                                        // 0x05E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 m_LeftStateBorder;                                 // 0x05E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 m_RightStateBorder;                                // 0x05F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                MainGlow;                                          // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               SubBanner;                                         // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                SubGlow;                                           // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_Seconds;                                      // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_0;                                     // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   BannerBaseColors;                                  // 0x0620(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimespan                              TickTimeStartTime;                                 // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Screen_Is_Clear;                                   // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_639[0x3];                                      // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BannerColorIndex;                                  // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Banner_Start_Scale;                       // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Banner_Target_Scale;                      // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Banner_Scale_Timer;                       // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Distance_Banner_Updating;                          // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_659[0x7];                                      // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSurveyProgressRowBase                 Cached_Survey_Progress_Row;                        // 0x0660(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FLinearColor>                   Banner_Base_Colors;                                // 0x06F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void UpdateWidgetWithSurveyRow(const struct FSurveyProgressRowBase& InStateRow);
	void UpdateSurveyTimeText(float InTime);
	void UpdateDistanceBars();
	void Trigger_Banner_Update();
	void SwitchWidget(class UWidget* NewTargetWidget);
	void SequenceEvent__ENTRYPOINTW_CompassSurveyingWidget();
	void PlayHideBannerAnimation();
	void NotifyProximityChange(const float ProximityInMetres, const struct FLinearColor& NewColor);
	void ExecuteUbergraph_W_CompassSurveyingWidget(int32 EntryPoint);
	void Event_Show_Banner_State(class UWidgetAnimation* InAnimation, int32 InBannerColor);
	void Event_Set_Banner_Color(const struct FLinearColor& Banner_Colour);
	void CounterPulse();
	void BP_OnSurveyStarted();
	void BP_OnSurveyResetToNotSurveying();
	void BP_OnSurveyCompleted();
	void BP_OnSurveyCancelled();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_CompassSurveyingWidget_C">();
	}
	static class UW_CompassSurveyingWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_CompassSurveyingWidget_C>();
	}
};
static_assert(alignof(UW_CompassSurveyingWidget_C) == 0x000010, "Wrong alignment on UW_CompassSurveyingWidget_C");
static_assert(sizeof(UW_CompassSurveyingWidget_C) == 0x000700, "Wrong size on UW_CompassSurveyingWidget_C");
static_assert(offsetof(UW_CompassSurveyingWidget_C, UberGraphFrame) == 0x000550, "Member 'UW_CompassSurveyingWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, HideBanner) == 0x000558, "Member 'UW_CompassSurveyingWidget_C::HideBanner' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Pulse) == 0x000560, "Member 'UW_CompassSurveyingWidget_C::Pulse' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Warning) == 0x000568, "Member 'UW_CompassSurveyingWidget_C::Warning' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Failed) == 0x000570, "Member 'UW_CompassSurveyingWidget_C::Failed' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Completed) == 0x000578, "Member 'UW_CompassSurveyingWidget_C::Completed' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, SurveyTimer) == 0x000580, "Member 'UW_CompassSurveyingWidget_C::SurveyTimer' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, AdditionalInfo) == 0x000588, "Member 'UW_CompassSurveyingWidget_C::AdditionalInfo' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, DiamondBoofL) == 0x000590, "Member 'UW_CompassSurveyingWidget_C::DiamondBoofL' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, DiamondBoofR) == 0x000598, "Member 'UW_CompassSurveyingWidget_C::DiamondBoofR' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, DiamondCompleted) == 0x0005A0, "Member 'UW_CompassSurveyingWidget_C::DiamondCompleted' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, DiamondCompleted_2) == 0x0005A8, "Member 'UW_CompassSurveyingWidget_C::DiamondCompleted_2' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, DiamondFailed) == 0x0005B0, "Member 'UW_CompassSurveyingWidget_C::DiamondFailed' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, DiamondGlow) == 0x0005B8, "Member 'UW_CompassSurveyingWidget_C::DiamondGlow' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, DistanceBorder) == 0x0005C0, "Member 'UW_CompassSurveyingWidget_C::DistanceBorder' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, DistanceLineLeft) == 0x0005C8, "Member 'UW_CompassSurveyingWidget_C::DistanceLineLeft' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, DistanceLineRight) == 0x0005D0, "Member 'UW_CompassSurveyingWidget_C::DistanceLineRight' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, IconCompleted) == 0x0005D8, "Member 'UW_CompassSurveyingWidget_C::IconCompleted' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, IconFailed) == 0x0005E0, "Member 'UW_CompassSurveyingWidget_C::IconFailed' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, m_LeftStateBorder) == 0x0005E8, "Member 'UW_CompassSurveyingWidget_C::m_LeftStateBorder' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, m_RightStateBorder) == 0x0005F0, "Member 'UW_CompassSurveyingWidget_C::m_RightStateBorder' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, MainGlow) == 0x0005F8, "Member 'UW_CompassSurveyingWidget_C::MainGlow' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, SubBanner) == 0x000600, "Member 'UW_CompassSurveyingWidget_C::SubBanner' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, SubGlow) == 0x000608, "Member 'UW_CompassSurveyingWidget_C::SubGlow' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Text_Seconds) == 0x000610, "Member 'UW_CompassSurveyingWidget_C::Text_Seconds' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, VerticalBox_0) == 0x000618, "Member 'UW_CompassSurveyingWidget_C::VerticalBox_0' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, BannerBaseColors) == 0x000620, "Member 'UW_CompassSurveyingWidget_C::BannerBaseColors' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, TickTimeStartTime) == 0x000630, "Member 'UW_CompassSurveyingWidget_C::TickTimeStartTime' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Screen_Is_Clear) == 0x000638, "Member 'UW_CompassSurveyingWidget_C::Screen_Is_Clear' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, BannerColorIndex) == 0x00063C, "Member 'UW_CompassSurveyingWidget_C::BannerColorIndex' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Distance_Banner_Start_Scale) == 0x000640, "Member 'UW_CompassSurveyingWidget_C::Distance_Banner_Start_Scale' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Distance_Banner_Target_Scale) == 0x000648, "Member 'UW_CompassSurveyingWidget_C::Distance_Banner_Target_Scale' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Distance_Banner_Scale_Timer) == 0x000650, "Member 'UW_CompassSurveyingWidget_C::Distance_Banner_Scale_Timer' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Distance_Banner_Updating) == 0x000658, "Member 'UW_CompassSurveyingWidget_C::Distance_Banner_Updating' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Cached_Survey_Progress_Row) == 0x000660, "Member 'UW_CompassSurveyingWidget_C::Cached_Survey_Progress_Row' has a wrong offset!");
static_assert(offsetof(UW_CompassSurveyingWidget_C, Banner_Base_Colors) == 0x0006F0, "Member 'UW_CompassSurveyingWidget_C::Banner_Base_Colors' has a wrong offset!");

}

