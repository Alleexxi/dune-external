#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OrnithopterBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_OrnithopterBase.BP_OrnithopterBase_C
// 0x0060 (0x2130 - 0x20D0)
class ABP_OrnithopterBase_C : public ADuneOrnithopter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x20D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   DeformationEffect;                                 // 0x20D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_VehicleLightComponent_C*            BP_VehicleLightComponent;                          // 0x20E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DunePlayerIFF_WidgetComponent_C*    IFFMarker;                                         // 0x20E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_FrontR;                                  // 0x20F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UScannableComponent*                    Scannable;                                         // 0x20F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_FrontL;                                  // 0x2100(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDriverSeatComponent*                   PilotSeat;                                         // 0x2108(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x2110(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Shield_Broken;                                     // 0x2120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BndEvt__BP_TankBase_m_DamageableActorComponent_K2Node_ComponentBoundEvent_0_HandleShieldEnergyBrokenSignature__DelegateSignature();
	void DestroyShieldBox(class UProceduralMeshComponent* ShieldBox);
	void ExecuteUbergraph_BP_OrnithopterBase(int32 EntryPoint);
	void OnMeshLoaded(const EVehicleModuleType& VehicleModuleType);
	void OnRep_Color();
	void ReceiveBeginPlay();
	void RefreshColor();
	void SetVehicleFaction(EVehicleBrand Faction);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_OrnithopterBase_C">();
	}
	static class ABP_OrnithopterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_OrnithopterBase_C>();
	}
};
static_assert(alignof(ABP_OrnithopterBase_C) == 0x000010, "Wrong alignment on ABP_OrnithopterBase_C");
static_assert(sizeof(ABP_OrnithopterBase_C) == 0x002130, "Wrong size on ABP_OrnithopterBase_C");
static_assert(offsetof(ABP_OrnithopterBase_C, UberGraphFrame) == 0x0020D0, "Member 'ABP_OrnithopterBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_OrnithopterBase_C, DeformationEffect) == 0x0020D8, "Member 'ABP_OrnithopterBase_C::DeformationEffect' has a wrong offset!");
static_assert(offsetof(ABP_OrnithopterBase_C, BP_VehicleLightComponent) == 0x0020E0, "Member 'ABP_OrnithopterBase_C::BP_VehicleLightComponent' has a wrong offset!");
static_assert(offsetof(ABP_OrnithopterBase_C, IFFMarker) == 0x0020E8, "Member 'ABP_OrnithopterBase_C::IFFMarker' has a wrong offset!");
static_assert(offsetof(ABP_OrnithopterBase_C, SpotLight_FrontR) == 0x0020F0, "Member 'ABP_OrnithopterBase_C::SpotLight_FrontR' has a wrong offset!");
static_assert(offsetof(ABP_OrnithopterBase_C, Scannable) == 0x0020F8, "Member 'ABP_OrnithopterBase_C::Scannable' has a wrong offset!");
static_assert(offsetof(ABP_OrnithopterBase_C, SpotLight_FrontL) == 0x002100, "Member 'ABP_OrnithopterBase_C::SpotLight_FrontL' has a wrong offset!");
static_assert(offsetof(ABP_OrnithopterBase_C, PilotSeat) == 0x002108, "Member 'ABP_OrnithopterBase_C::PilotSeat' has a wrong offset!");
static_assert(offsetof(ABP_OrnithopterBase_C, Color) == 0x002110, "Member 'ABP_OrnithopterBase_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_OrnithopterBase_C, Shield_Broken) == 0x002120, "Member 'ABP_OrnithopterBase_C::Shield_Broken' has a wrong offset!");

}

