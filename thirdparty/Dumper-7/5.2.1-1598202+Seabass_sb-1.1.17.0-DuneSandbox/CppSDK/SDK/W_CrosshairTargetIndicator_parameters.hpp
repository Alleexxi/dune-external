#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CrosshairTargetIndicator

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function W_CrosshairTargetIndicator.W_CrosshairTargetIndicator_C.ExecuteUbergraph_W_CrosshairTargetIndicator
// 0x0008 (0x0008 - 0x0000)
struct W_CrosshairTargetIndicator_C_ExecuteUbergraph_W_CrosshairTargetIndicator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CrosshairTargetIndicator_C_ExecuteUbergraph_W_CrosshairTargetIndicator) == 0x000004, "Wrong alignment on W_CrosshairTargetIndicator_C_ExecuteUbergraph_W_CrosshairTargetIndicator");
static_assert(sizeof(W_CrosshairTargetIndicator_C_ExecuteUbergraph_W_CrosshairTargetIndicator) == 0x000008, "Wrong size on W_CrosshairTargetIndicator_C_ExecuteUbergraph_W_CrosshairTargetIndicator");
static_assert(offsetof(W_CrosshairTargetIndicator_C_ExecuteUbergraph_W_CrosshairTargetIndicator, EntryPoint) == 0x000000, "Member 'W_CrosshairTargetIndicator_C_ExecuteUbergraph_W_CrosshairTargetIndicator::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_ExecuteUbergraph_W_CrosshairTargetIndicator, K2Node_Event_IsDesignTime) == 0x000004, "Member 'W_CrosshairTargetIndicator_C_ExecuteUbergraph_W_CrosshairTargetIndicator::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function W_CrosshairTargetIndicator.W_CrosshairTargetIndicator_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_CrosshairTargetIndicator_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CrosshairTargetIndicator_C_PreConstruct) == 0x000001, "Wrong alignment on W_CrosshairTargetIndicator_C_PreConstruct");
static_assert(sizeof(W_CrosshairTargetIndicator_C_PreConstruct) == 0x000001, "Wrong size on W_CrosshairTargetIndicator_C_PreConstruct");
static_assert(offsetof(W_CrosshairTargetIndicator_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_CrosshairTargetIndicator_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_CrosshairTargetIndicator.W_CrosshairTargetIndicator_C.UpdatePartPositionAndRotation
// 0x0070 (0x0070 - 0x0000)
struct W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation final
{
public:
	double                                        AngleOffset;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Part;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        LocalAngle;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegSin_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegCos_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation) == 0x000008, "Wrong alignment on W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation");
static_assert(sizeof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation) == 0x000070, "Wrong size on W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, AngleOffset) == 0x000000, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::AngleOffset' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, Part) == 0x000008, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::Part' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, LocalAngle) == 0x000010, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::LocalAngle' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, CallFunc_SelectFloat_ReturnValue) == 0x000018, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000020, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, CallFunc_DegSin_ReturnValue) == 0x000028, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::CallFunc_DegSin_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, CallFunc_DegCos_ReturnValue) == 0x000040, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, CallFunc_MakeVector2D_ReturnValue_1) == 0x000048, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000058, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000068, "Member 'W_CrosshairTargetIndicator_C_UpdatePartPositionAndRotation::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

}

