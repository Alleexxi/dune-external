#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MediaPlate

#include "Basic.hpp"

#include "MediaAssets_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class MediaPlate.MediaPlate
// 0x0010 (0x0360 - 0x0350)
class AMediaPlate final : public AActor
{
public:
	class UMediaPlateComponent*                   MediaPlateComponent;                               // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaPlate">();
	}
	static class AMediaPlate* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMediaPlate>();
	}
};
static_assert(alignof(AMediaPlate) == 0x000008, "Wrong alignment on AMediaPlate");
static_assert(sizeof(AMediaPlate) == 0x000360, "Wrong size on AMediaPlate");
static_assert(offsetof(AMediaPlate, MediaPlateComponent) == 0x000350, "Member 'AMediaPlate::MediaPlateComponent' has a wrong offset!");
static_assert(offsetof(AMediaPlate, StaticMeshComponent) == 0x000358, "Member 'AMediaPlate::StaticMeshComponent' has a wrong offset!");

// Class MediaPlate.MediaPlateAssetUserData
// 0x0040 (0x0070 - 0x0030)
class UMediaPlateAssetUserData final : public UAssetUserData
{
public:
	uint8                                         Pad_30[0x40];                                      // 0x0030(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaPlateAssetUserData">();
	}
	static class UMediaPlateAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaPlateAssetUserData>();
	}
};
static_assert(alignof(UMediaPlateAssetUserData) == 0x000008, "Wrong alignment on UMediaPlateAssetUserData");
static_assert(sizeof(UMediaPlateAssetUserData) == 0x000070, "Wrong size on UMediaPlateAssetUserData");

// Class MediaPlate.MediaPlateComponent
// 0x00C8 (0x01F0 - 0x0128)
class UMediaPlateComponent final : public UActorComponent
{
public:
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPlayOnOpen;                                       // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0131(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAudio;                                      // 0x0132(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_133[0x1];                                      // 0x0133(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSoundComponent*                   SoundComponent;                                    // 0x0138(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0140(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           Letterboxes;                                       // 0x0148(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMediaPlaylist*                         MediaPlaylist;                                     // 0x0158(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaylistIndex;                                     // 0x0160(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMediaSourceCacheSettings              CacheSettings;                                     // 0x0164(0x0008)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bIsMediaPlatePlaying;                              // 0x016C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16D[0x7];                                      // 0x016D(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPlayOnlyWhenVisible;                              // 0x0174(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bLoop;                                             // 0x0175(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMediaTextureVisibleMipsTiles                 VisibleMipsTilesCalculations;                      // 0x0176(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_177[0x1];                                      // 0x0177(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MipMapBias;                                        // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsAspectRatioAuto;                                // 0x017C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableMipMapUpscaling;                            // 0x017D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17E[0x2];                                      // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MipLevelToUpscale;                                 // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LetterboxAspectRatio;                              // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MeshRange;                                         // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMediaTexture*>                  MediaTextures;                                     // 0x01A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UMediaPlayer*                           MediaPlayer;                                       // 0x01B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x38];                                     // 0x01B8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Close();
	float GetLetterboxAspectRatio();
	bool GetLoop();
	class UMediaPlayer* GetMediaPlayer();
	class UMediaTexture* GetMediaTexture(int32 Index_0);
	void OnMediaEnd();
	void OnMediaOpened(const class FString& DeviceUrl);
	void Open();
	void Pause();
	void Play();
	bool Rewind();
	bool Seek(const struct FTimespan& Time);
	void SetIsAspectRatioAuto(bool bInIsAspectRatioAuto);
	void SetLetterboxAspectRatio(float AspectRatio);
	void SetLoop(bool bInLoop);
	void SetMeshRange(const struct FVector2D& InMeshRange);
	void SetPlayOnlyWhenVisible(bool bInPlayOnlyWhenVisible);

	bool GetIsAspectRatioAuto() const;
	struct FVector2D GetMeshRange() const;
	bool IsMediaPlatePlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaPlateComponent">();
	}
	static class UMediaPlateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaPlateComponent>();
	}
};
static_assert(alignof(UMediaPlateComponent) == 0x000008, "Wrong alignment on UMediaPlateComponent");
static_assert(sizeof(UMediaPlateComponent) == 0x0001F0, "Wrong size on UMediaPlateComponent");
static_assert(offsetof(UMediaPlateComponent, bPlayOnOpen) == 0x000130, "Member 'UMediaPlateComponent::bPlayOnOpen' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, bAutoPlay) == 0x000131, "Member 'UMediaPlateComponent::bAutoPlay' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, bEnableAudio) == 0x000132, "Member 'UMediaPlateComponent::bEnableAudio' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, StartTime) == 0x000134, "Member 'UMediaPlateComponent::StartTime' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, SoundComponent) == 0x000138, "Member 'UMediaPlateComponent::SoundComponent' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, StaticMeshComponent) == 0x000140, "Member 'UMediaPlateComponent::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, Letterboxes) == 0x000148, "Member 'UMediaPlateComponent::Letterboxes' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, MediaPlaylist) == 0x000158, "Member 'UMediaPlateComponent::MediaPlaylist' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, PlaylistIndex) == 0x000160, "Member 'UMediaPlateComponent::PlaylistIndex' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, CacheSettings) == 0x000164, "Member 'UMediaPlateComponent::CacheSettings' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, bIsMediaPlatePlaying) == 0x00016C, "Member 'UMediaPlateComponent::bIsMediaPlatePlaying' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, bPlayOnlyWhenVisible) == 0x000174, "Member 'UMediaPlateComponent::bPlayOnlyWhenVisible' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, bLoop) == 0x000175, "Member 'UMediaPlateComponent::bLoop' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, VisibleMipsTilesCalculations) == 0x000176, "Member 'UMediaPlateComponent::VisibleMipsTilesCalculations' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, MipMapBias) == 0x000178, "Member 'UMediaPlateComponent::MipMapBias' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, bIsAspectRatioAuto) == 0x00017C, "Member 'UMediaPlateComponent::bIsAspectRatioAuto' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, bEnableMipMapUpscaling) == 0x00017D, "Member 'UMediaPlateComponent::bEnableMipMapUpscaling' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, MipLevelToUpscale) == 0x000180, "Member 'UMediaPlateComponent::MipLevelToUpscale' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, LetterboxAspectRatio) == 0x000184, "Member 'UMediaPlateComponent::LetterboxAspectRatio' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, MeshRange) == 0x000190, "Member 'UMediaPlateComponent::MeshRange' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, MediaTextures) == 0x0001A0, "Member 'UMediaPlateComponent::MediaTextures' has a wrong offset!");
static_assert(offsetof(UMediaPlateComponent, MediaPlayer) == 0x0001B0, "Member 'UMediaPlateComponent::MediaPlayer' has a wrong offset!");

}

