#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DWGameplayAbilities

#include "Basic.hpp"

#include "DWGameplayAbilities_classes.hpp"
#include "DWGameplayAbilities_parameters.hpp"


namespace SDK
{

// Function DWGameplayAbilities.DWAbilitySystemComponent.ClientAcknowledgeKey
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// const int16                             AcknowledgementKey                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDWAbilitySystemComponent::ClientAcknowledgeKey(const int16 AcknowledgementKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DWAbilitySystemComponent", "ClientAcknowledgeKey");

	Params::DWAbilitySystemComponent_ClientAcknowledgeKey Parms{};

	Parms.AcknowledgementKey = AcknowledgementKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DWGameplayAbilities.DWAbilitySystemComponent.ServerApplyGameplayEffectSpecToSelf
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// const struct FGameplayEffectSpec&       GameplayEffect                                         (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FPredictionKey&            PredictionKey                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDWAbilitySystemComponent::ServerApplyGameplayEffectSpecToSelf(const struct FGameplayEffectSpec& GameplayEffect, const struct FPredictionKey& PredictionKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DWAbilitySystemComponent", "ServerApplyGameplayEffectSpecToSelf");

	Params::DWAbilitySystemComponent_ServerApplyGameplayEffectSpecToSelf Parms{};

	Parms.GameplayEffect = std::move(GameplayEffect);
	Parms.PredictionKey = std::move(PredictionKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.ActivateAbilityByClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UDWGameplayAbility>   Ability                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IAbilitySystemInterface>Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAbilityHandle                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAbilityHandle UDWGameplayAbilityFunctionLibrary::ActivateAbilityByClass(TSubclassOf<class UDWGameplayAbility> Ability, TScriptInterface<class IAbilitySystemInterface> Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DWGameplayAbilityFunctionLibrary", "ActivateAbilityByClass");

	Params::DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass Parms{};

	Parms.Ability = Ability;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.ApplyEffectByClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UDWGameplayEffect>    GameplayEffectClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IAbilitySystemInterface>Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEffectHandle                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEffectHandle UDWGameplayAbilityFunctionLibrary::ApplyEffectByClass(TSubclassOf<class UDWGameplayEffect> GameplayEffectClass, TScriptInterface<class IAbilitySystemInterface> Target, const float Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DWGameplayAbilityFunctionLibrary", "ApplyEffectByClass");

	Params::DWGameplayAbilityFunctionLibrary_ApplyEffectByClass Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;
	Parms.Target = Target;
	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.GetAbilityState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAbilityHandle&            Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EAbilityHandleState                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAbilityHandleState UDWGameplayAbilityFunctionLibrary::GetAbilityState(const struct FAbilityHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DWGameplayAbilityFunctionLibrary", "GetAbilityState");

	Params::DWGameplayAbilityFunctionLibrary_GetAbilityState Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.GetActiveGameplayHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FEffectHandle&             Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FActiveGameplayEffectHandle UDWGameplayAbilityFunctionLibrary::GetActiveGameplayHandle(const struct FEffectHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DWGameplayAbilityFunctionLibrary", "GetActiveGameplayHandle");

	Params::DWGameplayAbilityFunctionLibrary_GetActiveGameplayHandle Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.GetEffectState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FEffectHandle&             Handle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EEffectHandleState                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEffectHandleState UDWGameplayAbilityFunctionLibrary::GetEffectState(const struct FEffectHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DWGameplayAbilityFunctionLibrary", "GetEffectState");

	Params::DWGameplayAbilityFunctionLibrary_GetEffectState Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.RemoveEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FEffectHandle&             EffectHandle                                           (Parm, NativeAccessSpecifierPublic)
// TScriptInterface<class IAbilitySystemInterface>Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             StacksToRemove                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDWGameplayAbilityFunctionLibrary::RemoveEffect(const struct FEffectHandle& EffectHandle, TScriptInterface<class IAbilitySystemInterface> Target, const int32 StacksToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DWGameplayAbilityFunctionLibrary", "RemoveEffect");

	Params::DWGameplayAbilityFunctionLibrary_RemoveEffect Parms{};

	Parms.EffectHandle = std::move(EffectHandle);
	Parms.Target = Target;
	Parms.StacksToRemove = StacksToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DWGameplayAbilities.DWGameplayAbility.EndTask
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAbilityTaskHandle&        Handle                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDWGameplayAbility::EndTask(const struct FAbilityTaskHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DWGameplayAbility", "EndTask");

	Params::DWGameplayAbility_EndTask Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DWGameplayAbilities.DWGameplayAbility.InitializeStaticProperties
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityActorInfo& ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayAbilitySpec&      Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDWGameplayAbility::InitializeStaticProperties(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DWGameplayAbility", "InitializeStaticProperties");

	Params::DWGameplayAbility_InitializeStaticProperties Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DWGameplayAbilities.DWGameplayAbility.SetupPostAuthorityTransfer
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityActorInfo& ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGameplayAbilitySpec&      Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDWGameplayAbility::SetupPostAuthorityTransfer(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DWGameplayAbility", "SetupPostAuthorityTransfer");

	Params::DWGameplayAbility_SetupPostAuthorityTransfer Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.Spec = std::move(Spec);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DWGameplayAbilities.DWGameplayAbility.GetContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FRuntimeImmediateContext   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FRuntimeImmediateContext UDWGameplayAbility::GetContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DWGameplayAbility", "GetContext");

	Params::DWGameplayAbility_GetContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DWGameplayAbilities.DWGameplayEffect.GetDurationMagnitudeForLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             InLevel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutMagnitude                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDWGameplayEffect::GetDurationMagnitudeForLevel(const float InLevel, float* OutMagnitude) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DWGameplayEffect", "GetDurationMagnitudeForLevel");

	Params::DWGameplayEffect_GetDurationMagnitudeForLevel Parms{};

	Parms.InLevel = InLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMagnitude != nullptr)
		*OutMagnitude = Parms.OutMagnitude;

	return Parms.ReturnValue;
}


// Function DWGameplayAbilities.DWGameplayEffect.GetModifierMagnitudeForLevelAndAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayAttribute&        InAttribute                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InLevel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutMagnitude                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDWGameplayEffect::GetModifierMagnitudeForLevelAndAttribute(const struct FGameplayAttribute& InAttribute, const float InLevel, float* OutMagnitude) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DWGameplayEffect", "GetModifierMagnitudeForLevelAndAttribute");

	Params::DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute Parms{};

	Parms.InAttribute = std::move(InAttribute);
	Parms.InLevel = InLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMagnitude != nullptr)
		*OutMagnitude = Parms.OutMagnitude;

	return Parms.ReturnValue;
}


// Function DWGameplayAbilities.DWGameplayEffect.GetModifierMagnitudesForLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<float>*                          OutVals                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   InLevel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDWGameplayEffect::GetModifierMagnitudesForLevel(TArray<float>* OutVals, float InLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DWGameplayEffect", "GetModifierMagnitudesForLevel");

	Params::DWGameplayEffect_GetModifierMagnitudesForLevel Parms{};

	Parms.InLevel = InLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVals != nullptr)
		*OutVals = std::move(Parms.OutVals);
}

}

