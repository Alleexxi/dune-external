#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LandscapeDisplacement

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum LandscapeDisplacement.EDisplacementBlendMode
// NumValues: 0x0003
enum class EDisplacementBlendMode : uint8
{
	EDisplacementBlendMode_Additive          = 1,
	EDisplacementBlendMode_Replace           = 2,
	EDisplacementBlendMode_MAX               = 3,
};

// Enum LandscapeDisplacement.EDisplacementExtraLayerCount
// NumValues: 0x0003
enum class EDisplacementExtraLayerCount : uint8
{
	EDisplacementExtraLayerCount_None        = 0,
	EDisplacementExtraLayerCount_One         = 1,
	EDisplacementExtraLayerCount_MAX         = 2,
};

// Enum LandscapeDisplacement.EDynamicDisplacementVertexFormat
// NumValues: 0x0003
enum class EDynamicDisplacementVertexFormat : uint8
{
	EDynamicDisplacementVertexFormat_Std     = 0,
	EDynamicDisplacementVertexFormat_Inline  = 1,
	EDynamicDisplacementVertexFormat_MAX     = 2,
};

// Enum LandscapeDisplacement.EDynamicDisplacementDrawMode
// NumValues: 0x0004
enum class EDynamicDisplacementDrawMode : uint8
{
	EDynamicDisplacementDrawMode_None        = 0,
	EDynamicDisplacementDrawMode_Quad        = 1,
	EDynamicDisplacementDrawMode_TriStrip    = 2,
	EDynamicDisplacementDrawMode_MAX         = 3,
};

// Enum LandscapeDisplacement.EDynamicDisplacementTextureFormat
// NumValues: 0x0003
enum class EDynamicDisplacementTextureFormat : uint8
{
	EDynamicDisplacementTextureFormat_Unpacked_F32 = 0,
	EDynamicDisplacementTextureFormat_Unpacked_U16 = 1,
	EDynamicDisplacementTextureFormat_Unpacked_MAX = 2,
};

// Enum LandscapeDisplacement.ELandscapeDisplacementMode
// NumValues: 0x0004
enum class ELandscapeDisplacementMode : uint8
{
	DM_Add                                   = 0,
	DM_Subtract                              = 1,
	DM_Invalid                               = 2,
	DM_MAX                                   = 3,
};

// Enum LandscapeDisplacement.ELandscapeDisplacementType
// NumValues: 0x0003
enum class ELandscapeDisplacementType : uint8
{
	DT_Static                                = 0,
	DT_Dynamic                               = 1,
	DT_MAX                                   = 2,
};

// Enum LandscapeDisplacement.ELandscapeDisplacementInstigatorType
// NumValues: 0x0004
enum class ELandscapeDisplacementInstigatorType : uint8
{
	DIT_RoamingWorm                          = 0,
	DIT_GiantWorm                            = 1,
	DIT_Default                              = 2,
	DIT_MAX                                  = 3,
};

// ScriptStruct LandscapeDisplacement.DisplacementState
// 0x00A8 (0x00A8 - 0x0000)
struct FDisplacementState final
{
public:
	struct FVector                                m_Location;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               m_Rotation;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_Scale;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DisplacementAlpha;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DisplacementMap1Alpha;                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DisplacementMap2Alpha;                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 m_CallingActor;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeDisplacementMap*              m_DisplacementMap1;                                // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeDisplacementMap*              m_DisplacementMap2;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DisplacementLerpFactor;                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULandscapeDisplacementMap*              m_ExternalDisplacementLayer;                       // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_UseNiagara;                                      // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          m_VelocitySystemSoftRef;                           // 0x0070(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_EditorTick;                                      // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDisplacementState) == 0x000008, "Wrong alignment on FDisplacementState");
static_assert(sizeof(FDisplacementState) == 0x0000A8, "Wrong size on FDisplacementState");
static_assert(offsetof(FDisplacementState, m_Location) == 0x000000, "Member 'FDisplacementState::m_Location' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_Rotation) == 0x000018, "Member 'FDisplacementState::m_Rotation' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_Scale) == 0x000030, "Member 'FDisplacementState::m_Scale' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_DisplacementAlpha) == 0x000034, "Member 'FDisplacementState::m_DisplacementAlpha' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_DisplacementMap1Alpha) == 0x000038, "Member 'FDisplacementState::m_DisplacementMap1Alpha' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_DisplacementMap2Alpha) == 0x00003C, "Member 'FDisplacementState::m_DisplacementMap2Alpha' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_CallingActor) == 0x000040, "Member 'FDisplacementState::m_CallingActor' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_DisplacementMap1) == 0x000048, "Member 'FDisplacementState::m_DisplacementMap1' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_DisplacementMap2) == 0x000050, "Member 'FDisplacementState::m_DisplacementMap2' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_DisplacementLerpFactor) == 0x000058, "Member 'FDisplacementState::m_DisplacementLerpFactor' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_ExternalDisplacementLayer) == 0x000060, "Member 'FDisplacementState::m_ExternalDisplacementLayer' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_UseNiagara) == 0x000068, "Member 'FDisplacementState::m_UseNiagara' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_VelocitySystemSoftRef) == 0x000070, "Member 'FDisplacementState::m_VelocitySystemSoftRef' has a wrong offset!");
static_assert(offsetof(FDisplacementState, m_EditorTick) == 0x0000A0, "Member 'FDisplacementState::m_EditorTick' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.DisplacementPointData
// 0x0030 (0x0030 - 0x0000)
struct FDisplacementPointData final
{
public:
	TArray<struct FVector>                        m_Positions;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      m_DisplacementValues;                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 m_DistanceToTheGround;                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisplacementPointData) == 0x000008, "Wrong alignment on FDisplacementPointData");
static_assert(sizeof(FDisplacementPointData) == 0x000030, "Wrong size on FDisplacementPointData");
static_assert(offsetof(FDisplacementPointData, m_Positions) == 0x000000, "Member 'FDisplacementPointData::m_Positions' has a wrong offset!");
static_assert(offsetof(FDisplacementPointData, m_DisplacementValues) == 0x000010, "Member 'FDisplacementPointData::m_DisplacementValues' has a wrong offset!");
static_assert(offsetof(FDisplacementPointData, m_DistanceToTheGround) == 0x000020, "Member 'FDisplacementPointData::m_DistanceToTheGround' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.DisplacementLayerDesc
// 0x0090 (0x0090 - 0x0000)
struct FDisplacementLayerDesc final
{
public:
	EDisplacementBlendMode                        m_LayerBlendMode;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULandscapeDisplacementMap*              m_DisplacementMap1;                                // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeDisplacementMap*              m_DisplacementMap2;                                // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DisplacementBlendFactor;                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DisplacementAlpha;                               // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DisplacementMap1Alpha;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DisplacementMap2Alpha;                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeDisplacementMap*              m_ExternalDisplacementLayer;                       // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             m_LayerTransform;                                  // 0x0030(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisplacementLayerDesc) == 0x000010, "Wrong alignment on FDisplacementLayerDesc");
static_assert(sizeof(FDisplacementLayerDesc) == 0x000090, "Wrong size on FDisplacementLayerDesc");
static_assert(offsetof(FDisplacementLayerDesc, m_LayerBlendMode) == 0x000000, "Member 'FDisplacementLayerDesc::m_LayerBlendMode' has a wrong offset!");
static_assert(offsetof(FDisplacementLayerDesc, m_DisplacementMap1) == 0x000008, "Member 'FDisplacementLayerDesc::m_DisplacementMap1' has a wrong offset!");
static_assert(offsetof(FDisplacementLayerDesc, m_DisplacementMap2) == 0x000010, "Member 'FDisplacementLayerDesc::m_DisplacementMap2' has a wrong offset!");
static_assert(offsetof(FDisplacementLayerDesc, m_DisplacementBlendFactor) == 0x000018, "Member 'FDisplacementLayerDesc::m_DisplacementBlendFactor' has a wrong offset!");
static_assert(offsetof(FDisplacementLayerDesc, m_DisplacementAlpha) == 0x00001C, "Member 'FDisplacementLayerDesc::m_DisplacementAlpha' has a wrong offset!");
static_assert(offsetof(FDisplacementLayerDesc, m_DisplacementMap1Alpha) == 0x000020, "Member 'FDisplacementLayerDesc::m_DisplacementMap1Alpha' has a wrong offset!");
static_assert(offsetof(FDisplacementLayerDesc, m_DisplacementMap2Alpha) == 0x000024, "Member 'FDisplacementLayerDesc::m_DisplacementMap2Alpha' has a wrong offset!");
static_assert(offsetof(FDisplacementLayerDesc, m_ExternalDisplacementLayer) == 0x000028, "Member 'FDisplacementLayerDesc::m_ExternalDisplacementLayer' has a wrong offset!");
static_assert(offsetof(FDisplacementLayerDesc, m_LayerTransform) == 0x000030, "Member 'FDisplacementLayerDesc::m_LayerTransform' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.DisplacementComponent
// 0x0060 (0x0060 - 0x0000)
struct FDisplacementComponent final
{
public:
	TArray<class ULandscapeComponent*>            m_ActiveLandscapeComponents;                       // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTexture2D*                             m_pOriginalHeightmap;                              // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             m_pDisplacedHeightmap;                             // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x40];                                      // 0x0020(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDisplacementComponent) == 0x000008, "Wrong alignment on FDisplacementComponent");
static_assert(sizeof(FDisplacementComponent) == 0x000060, "Wrong size on FDisplacementComponent");
static_assert(offsetof(FDisplacementComponent, m_ActiveLandscapeComponents) == 0x000000, "Member 'FDisplacementComponent::m_ActiveLandscapeComponents' has a wrong offset!");
static_assert(offsetof(FDisplacementComponent, m_pOriginalHeightmap) == 0x000010, "Member 'FDisplacementComponent::m_pOriginalHeightmap' has a wrong offset!");
static_assert(offsetof(FDisplacementComponent, m_pDisplacedHeightmap) == 0x000018, "Member 'FDisplacementComponent::m_pDisplacedHeightmap' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.ParallelCreateDisplacementTexturesTask
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FParallelCreateDisplacementTexturesTask final
{
public:
	TWeakObjectPtr<class ALandscapeDisplacementVolume> OwnerPtr;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParallelCreateDisplacementTexturesTask) == 0x000008, "Wrong alignment on FParallelCreateDisplacementTexturesTask");
static_assert(sizeof(FParallelCreateDisplacementTexturesTask) == 0x000020, "Wrong size on FParallelCreateDisplacementTexturesTask");
static_assert(offsetof(FParallelCreateDisplacementTexturesTask, OwnerPtr) == 0x000000, "Member 'FParallelCreateDisplacementTexturesTask::OwnerPtr' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.ParallelFillDisplacementTexturesTask
// 0x000C (0x000C - 0x0000)
struct FParallelFillDisplacementTexturesTask final
{
public:
	TWeakObjectPtr<class ALandscapeDisplacementVolume> OwnerPtr;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParallelFillDisplacementTexturesTask) == 0x000004, "Wrong alignment on FParallelFillDisplacementTexturesTask");
static_assert(sizeof(FParallelFillDisplacementTexturesTask) == 0x00000C, "Wrong size on FParallelFillDisplacementTexturesTask");
static_assert(offsetof(FParallelFillDisplacementTexturesTask, OwnerPtr) == 0x000000, "Member 'FParallelFillDisplacementTexturesTask::OwnerPtr' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.ParallelExtractCollisionTask
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FParallelExtractCollisionTask final
{
public:
	TWeakObjectPtr<class ALandscapeDisplacementVolume> OwnerPtr;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParallelExtractCollisionTask) == 0x000008, "Wrong alignment on FParallelExtractCollisionTask");
static_assert(sizeof(FParallelExtractCollisionTask) == 0x000030, "Wrong size on FParallelExtractCollisionTask");
static_assert(offsetof(FParallelExtractCollisionTask, OwnerPtr) == 0x000000, "Member 'FParallelExtractCollisionTask::OwnerPtr' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.ParallelExtractDMapCollisionTask
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FParallelExtractDMapCollisionTask final
{
public:
	TWeakObjectPtr<class ALandscapeDisplacementVolume> OwnerPtr;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParallelExtractDMapCollisionTask) == 0x000008, "Wrong alignment on FParallelExtractDMapCollisionTask");
static_assert(sizeof(FParallelExtractDMapCollisionTask) == 0x000018, "Wrong size on FParallelExtractDMapCollisionTask");
static_assert(offsetof(FParallelExtractDMapCollisionTask, OwnerPtr) == 0x000000, "Member 'FParallelExtractDMapCollisionTask::OwnerPtr' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.CompleteCollisionExtractionTask
// 0x0008 (0x0008 - 0x0000)
struct FCompleteCollisionExtractionTask final
{
public:
	TWeakObjectPtr<class ALandscapeDisplacementVolume> OwnerPtr;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCompleteCollisionExtractionTask) == 0x000004, "Wrong alignment on FCompleteCollisionExtractionTask");
static_assert(sizeof(FCompleteCollisionExtractionTask) == 0x000008, "Wrong size on FCompleteCollisionExtractionTask");
static_assert(offsetof(FCompleteCollisionExtractionTask, OwnerPtr) == 0x000000, "Member 'FCompleteCollisionExtractionTask::OwnerPtr' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.ParallelDisplaceCollisionTask
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FParallelDisplaceCollisionTask final
{
public:
	TWeakObjectPtr<class ALandscapeDisplacementVolume> OwnerPtr;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParallelDisplaceCollisionTask) == 0x000008, "Wrong alignment on FParallelDisplaceCollisionTask");
static_assert(sizeof(FParallelDisplaceCollisionTask) == 0x000028, "Wrong size on FParallelDisplaceCollisionTask");
static_assert(offsetof(FParallelDisplaceCollisionTask, OwnerPtr) == 0x000000, "Member 'FParallelDisplaceCollisionTask::OwnerPtr' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.ParallelUpdatePhyisicsTask
// 0x0020 (0x0020 - 0x0000)
struct FParallelUpdatePhyisicsTask final
{
public:
	TWeakObjectPtr<class ALandscapeDisplacementVolume> OwnerPtr;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ULandscapeHeightfieldCollisionComponent*> ParamList;                                // 0x0008(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParallelUpdatePhyisicsTask) == 0x000008, "Wrong alignment on FParallelUpdatePhyisicsTask");
static_assert(sizeof(FParallelUpdatePhyisicsTask) == 0x000020, "Wrong size on FParallelUpdatePhyisicsTask");
static_assert(offsetof(FParallelUpdatePhyisicsTask, OwnerPtr) == 0x000000, "Member 'FParallelUpdatePhyisicsTask::OwnerPtr' has a wrong offset!");
static_assert(offsetof(FParallelUpdatePhyisicsTask, ParamList) == 0x000008, "Member 'FParallelUpdatePhyisicsTask::ParamList' has a wrong offset!");

// ScriptStruct LandscapeDisplacement.ParallelDisplacementRasterizerTask
// 0x0008 (0x0008 - 0x0000)
struct FParallelDisplacementRasterizerTask final
{
public:
	class ULandscapeDisplacementTaskParams*       LandscapeDisplacementTaskParams;                   // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FParallelDisplacementRasterizerTask) == 0x000008, "Wrong alignment on FParallelDisplacementRasterizerTask");
static_assert(sizeof(FParallelDisplacementRasterizerTask) == 0x000008, "Wrong size on FParallelDisplacementRasterizerTask");
static_assert(offsetof(FParallelDisplacementRasterizerTask, LandscapeDisplacementTaskParams) == 0x000000, "Member 'FParallelDisplacementRasterizerTask::LandscapeDisplacementTaskParams' has a wrong offset!");

}

