#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FglCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum FglCore.EFilterMode
// NumValues: 0x0006
enum class EFilterMode : uint8
{
	NoFiltering                              = 0,
	Equal                                    = 1,
	Any                                      = 2,
	All                                      = 3,
	None                                     = 4,
	EFilterMode_MAX                          = 5,
};

// Enum FglCore.EFglTickGroup
// NumValues: 0x0011
enum class EFglTickGroup : uint8
{
	BeginPrePhysics                          = 0,
	PrePhysics                               = 1,
	EndPrePhysics                            = 2,
	BeginDuringPhysics                       = 3,
	DuringPhysics                            = 4,
	EndDuringPhysics                         = 5,
	BeginPostPhysics                         = 6,
	PostPhysics                              = 7,
	EndPostPhysics                           = 8,
	BeginPostUpdateWork                      = 9,
	PostUpdateWork                           = 10,
	EndPostUpdateWork                        = 11,
	BeginLastDemotable                       = 12,
	LastDemotable                            = 13,
	EndLastDemotable                         = 14,
	EFglTickGroupMAX                         = 15,
	EFglTickGroup_MAX                        = 16,
};

// Enum FglCore.EFglAccessorType
// NumValues: 0x0004
enum class EFglAccessorType : uint8
{
	Read                                     = 0,
	Write                                    = 1,
	ThreadedWrite                            = 2,
	EFglAccessorType_MAX                     = 3,
};

// Enum FglCore.EFglViewFilterType
// NumValues: 0x0004
enum class EFglViewFilterType : uint8
{
	Get                                      = 0,
	Include                                  = 1,
	Exclude                                  = 2,
	EFglViewFilterType_MAX                   = 3,
};

// Enum FglCore.EFglSchedulerType
// NumValues: 0x0008
enum class EFglSchedulerType : uint8
{
	None                                     = 0,
	Game                                     = 1,
	Menu                                     = 2,
	CharacterCreation                        = 4,
	Overmap                                  = 8,
	GameAndMenu                              = 3,
	All                                      = 15,
	EFglSchedulerType_MAX                    = 16,
};

// Enum FglCore.EFglBlueprintResult
// NumValues: 0x0003
enum class EFglBlueprintResult : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	EFglBlueprintResult_MAX                  = 2,
};

// ScriptStruct FglCore.RuntimeViewFilter
// 0x0010 (0x0010 - 0x0000)
struct FRuntimeViewFilter final
{
public:
	class FName                                   TargetComponentName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFglViewFilterType                            FilterType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFilterMode                                   TagFilterMode;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TagFilterValue;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeViewFilter) == 0x000004, "Wrong alignment on FRuntimeViewFilter");
static_assert(sizeof(FRuntimeViewFilter) == 0x000010, "Wrong size on FRuntimeViewFilter");
static_assert(offsetof(FRuntimeViewFilter, TargetComponentName) == 0x000000, "Member 'FRuntimeViewFilter::TargetComponentName' has a wrong offset!");
static_assert(offsetof(FRuntimeViewFilter, FilterType) == 0x000008, "Member 'FRuntimeViewFilter::FilterType' has a wrong offset!");
static_assert(offsetof(FRuntimeViewFilter, TagFilterMode) == 0x000009, "Member 'FRuntimeViewFilter::TagFilterMode' has a wrong offset!");
static_assert(offsetof(FRuntimeViewFilter, TagFilterValue) == 0x00000C, "Member 'FRuntimeViewFilter::TagFilterValue' has a wrong offset!");

// ScriptStruct FglCore.Replicator
// 0x0130 (0x0130 - 0x0000)
struct alignas(0x08) FReplicator final
{
public:
	uint8                                         Pad_0[0x130];                                      // 0x0000(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicator) == 0x000008, "Wrong alignment on FReplicator");
static_assert(sizeof(FReplicator) == 0x000130, "Wrong size on FReplicator");

// ScriptStruct FglCore.OwnerComponent
// 0x0008 (0x0008 - 0x0000)
struct FOwnerComponent final
{
public:
	class AActor*                                 m_OwnerEntity;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOwnerComponent) == 0x000008, "Wrong alignment on FOwnerComponent");
static_assert(sizeof(FOwnerComponent) == 0x000008, "Wrong size on FOwnerComponent");
static_assert(offsetof(FOwnerComponent, m_OwnerEntity) == 0x000000, "Member 'FOwnerComponent::m_OwnerEntity' has a wrong offset!");

// ScriptStruct FglCore.ChildOwnerComponent
// 0x0010 (0x0010 - 0x0000)
struct FChildOwnerComponent final
{
public:
	class UObject*                                m_OwnerEntity;                                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              m_ParentEntityId;                                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChildOwnerComponent) == 0x000008, "Wrong alignment on FChildOwnerComponent");
static_assert(sizeof(FChildOwnerComponent) == 0x000010, "Wrong size on FChildOwnerComponent");
static_assert(offsetof(FChildOwnerComponent, m_OwnerEntity) == 0x000000, "Member 'FChildOwnerComponent::m_OwnerEntity' has a wrong offset!");
static_assert(offsetof(FChildOwnerComponent, m_ParentEntityId) == 0x000008, "Member 'FChildOwnerComponent::m_ParentEntityId' has a wrong offset!");

// ScriptStruct FglCore.OnDemandDataTableRow
// 0x000C (0x000C - 0x0000)
struct FOnDemandDataTableRow final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnDemandDataTableRow) == 0x000004, "Wrong alignment on FOnDemandDataTableRow");
static_assert(sizeof(FOnDemandDataTableRow) == 0x00000C, "Wrong size on FOnDemandDataTableRow");
static_assert(offsetof(FOnDemandDataTableRow, RowName) == 0x000000, "Member 'FOnDemandDataTableRow::RowName' has a wrong offset!");

// ScriptStruct FglCore.SoftDataTableRow
// 0x0038 (0x0038 - 0x0000)
struct FSoftDataTableRow final
{
public:
	TSoftObjectPtr<class UDataTable>              DataTable;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoftDataTableRow) == 0x000008, "Wrong alignment on FSoftDataTableRow");
static_assert(sizeof(FSoftDataTableRow) == 0x000038, "Wrong size on FSoftDataTableRow");
static_assert(offsetof(FSoftDataTableRow, DataTable) == 0x000000, "Member 'FSoftDataTableRow::DataTable' has a wrong offset!");
static_assert(offsetof(FSoftDataTableRow, RowName) == 0x000030, "Member 'FSoftDataTableRow::RowName' has a wrong offset!");

// ScriptStruct FglCore.FglBlueprintContext
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFglBlueprintContext final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFglBlueprintContext) == 0x000008, "Wrong alignment on FFglBlueprintContext");
static_assert(sizeof(FFglBlueprintContext) == 0x000010, "Wrong size on FFglBlueprintContext");

// ScriptStruct FglCore.FglProcessorReference
// 0x0008 (0x0008 - 0x0000)
struct FFglProcessorReference final
{
public:
	class FName                                   TargetName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFglProcessorReference) == 0x000004, "Wrong alignment on FFglProcessorReference");
static_assert(sizeof(FFglProcessorReference) == 0x000008, "Wrong size on FFglProcessorReference");
static_assert(offsetof(FFglProcessorReference, TargetName) == 0x000000, "Member 'FFglProcessorReference::TargetName' has a wrong offset!");

// ScriptStruct FglCore.RuntimeAccessor
// 0x000C (0x000C - 0x0000)
struct FRuntimeAccessor final
{
public:
	class FName                                   TargetComponentName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFglAccessorType                              AccessorType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRuntimeAccessor) == 0x000004, "Wrong alignment on FRuntimeAccessor");
static_assert(sizeof(FRuntimeAccessor) == 0x00000C, "Wrong size on FRuntimeAccessor");
static_assert(offsetof(FRuntimeAccessor, TargetComponentName) == 0x000000, "Member 'FRuntimeAccessor::TargetComponentName' has a wrong offset!");
static_assert(offsetof(FRuntimeAccessor, AccessorType) == 0x000008, "Member 'FRuntimeAccessor::AccessorType' has a wrong offset!");

// ScriptStruct FglCore.RuntimeContextDescriptor
// 0x0010 (0x0010 - 0x0000)
struct FRuntimeContextDescriptor final
{
public:
	TArray<struct FRuntimeAccessor>               m_Accessors;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeContextDescriptor) == 0x000008, "Wrong alignment on FRuntimeContextDescriptor");
static_assert(sizeof(FRuntimeContextDescriptor) == 0x000010, "Wrong size on FRuntimeContextDescriptor");
static_assert(offsetof(FRuntimeContextDescriptor, m_Accessors) == 0x000000, "Member 'FRuntimeContextDescriptor::m_Accessors' has a wrong offset!");

// ScriptStruct FglCore.RuntimeImmediateContext
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRuntimeImmediateContext final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRuntimeImmediateContext) == 0x000008, "Wrong alignment on FRuntimeImmediateContext");
static_assert(sizeof(FRuntimeImmediateContext) == 0x000010, "Wrong size on FRuntimeImmediateContext");

// ScriptStruct FglCore.RuntimeView
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRuntimeView final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRuntimeView) == 0x000008, "Wrong alignment on FRuntimeView");
static_assert(sizeof(FRuntimeView) == 0x000010, "Wrong size on FRuntimeView");

// ScriptStruct FglCore.RuntimeViewIterator
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRuntimeViewIterator final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRuntimeViewIterator) == 0x000008, "Wrong alignment on FRuntimeViewIterator");
static_assert(sizeof(FRuntimeViewIterator) == 0x000010, "Wrong size on FRuntimeViewIterator");

// ScriptStruct FglCore.ActorDestructionEntry
// 0x0010 (0x0010 - 0x0000)
struct FActorDestructionEntry final
{
public:
	class AActor*                                 m_Actor;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorDestructionEntry) == 0x000008, "Wrong alignment on FActorDestructionEntry");
static_assert(sizeof(FActorDestructionEntry) == 0x000010, "Wrong size on FActorDestructionEntry");
static_assert(offsetof(FActorDestructionEntry, m_Actor) == 0x000000, "Member 'FActorDestructionEntry::m_Actor' has a wrong offset!");

// ScriptStruct FglCore.FglDemoStruct
// 0x0010 (0x0010 - 0x0000)
struct FFglDemoStruct final
{
public:
	int32                                         m_Blub;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         m_CurrentSubstateFlags;                            // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFglDemoStruct) == 0x000008, "Wrong alignment on FFglDemoStruct");
static_assert(sizeof(FFglDemoStruct) == 0x000010, "Wrong size on FFglDemoStruct");
static_assert(offsetof(FFglDemoStruct, m_Blub) == 0x000000, "Member 'FFglDemoStruct::m_Blub' has a wrong offset!");
static_assert(offsetof(FFglDemoStruct, m_CurrentSubstateFlags) == 0x000008, "Member 'FFglDemoStruct::m_CurrentSubstateFlags' has a wrong offset!");

}

