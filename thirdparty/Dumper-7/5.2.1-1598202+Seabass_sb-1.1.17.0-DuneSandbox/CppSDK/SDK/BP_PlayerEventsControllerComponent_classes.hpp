#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerEventsControllerComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerEventsControllerComponent.BP_PlayerEventsControllerComponent_C
// 0x0040 (0x0168 - 0x0128)
class UBP_PlayerEventsControllerComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0128(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUserWidget*                            Widget;                                            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   PvEContentDescriptorClass;                         // 0x0138(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)

public:
	void TryTriggerNearestPvEDescriptor();
	void SetPvEComposition(const class FString& NewComposition);
	void ServerSetPvEComposition(const class FString& NewComposition);
	void ServerRequestPvEDebugInfo();
	void ServerGetPvECompositionLocation();
	void ServerGetPOIs(class UObject* Instigator, class FName Type);
	void ServerAddItemsCheat(const TArray<struct FGameItemInfo>& ItemsToAdd);
	void RequestPvEDebugInfo();
	void RequestPvECompositionLocation();
	void ReportEventMsg(const class FString& Msg);
	void ReceivePOIs(const TArray<struct FFPlayerEventsPOI>& POIs);
	void OnOpen(bool Admin_);
	void GetPvEDescriptor(class AActor* ToActor, class AActor** PvEContentDescriptor, bool* IsValid);
	void GetPOIs(class UObject* Instigator, class FName Type);
	void ExecuteUbergraph_BP_PlayerEventsControllerComponent(int32 EntryPoint);
	void ClientReceivePvEDescriptorLocation(const struct FVector& Location);
	void ClientReceivePvE(const struct FF_BP_PvEDebugInfo& DebugInfo);
	void ClientReceivePOIs(const TArray<struct FFPlayerEventsPOI>& POIs);
	void AddItemsCheat(const TArray<struct FGameItemInfo>& ItemsToAdd);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerEventsControllerComponent_C">();
	}
	static class UBP_PlayerEventsControllerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerEventsControllerComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerEventsControllerComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerEventsControllerComponent_C");
static_assert(sizeof(UBP_PlayerEventsControllerComponent_C) == 0x000168, "Wrong size on UBP_PlayerEventsControllerComponent_C");
static_assert(offsetof(UBP_PlayerEventsControllerComponent_C, UberGraphFrame) == 0x000128, "Member 'UBP_PlayerEventsControllerComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEventsControllerComponent_C, Widget) == 0x000130, "Member 'UBP_PlayerEventsControllerComponent_C::Widget' has a wrong offset!");
static_assert(offsetof(UBP_PlayerEventsControllerComponent_C, PvEContentDescriptorClass) == 0x000138, "Member 'UBP_PlayerEventsControllerComponent_C::PvEContentDescriptorClass' has a wrong offset!");

}

