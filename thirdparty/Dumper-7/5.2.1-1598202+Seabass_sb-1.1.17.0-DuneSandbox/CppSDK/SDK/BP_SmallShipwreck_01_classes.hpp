#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SmallShipwreck_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FSmallShipwreckReplicatedProps_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "DWGameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SmallShipwreck_01.BP_SmallShipwreck_01_C
// 0x0408 (0x0770 - 0x0368)
class ABP_SmallShipwreck_01_C final : public AEncounterDependentActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0368(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        LootLocationCenter_Scene03;                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LootLocationCenter_Scene02;                        // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LootLocationCenter_Scene01;                        // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LootLocationParent_Scene;                          // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ShipwreckPivot;                                    // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BodyMesh;                                          // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFcAudioComponent*                      FcAudio;                                           // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Text;                                              // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TrailStartLocation;                                // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ShipwreckMove_Timeline_MovementCurve_CCB143C74CA06B35F9D4ADAB8DF040BE; // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ShipwreckMove_Timeline__Direction_CCB143C74CA06B35F9D4ADAB8DF040BE; // 0x03C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C5[0x3];                                      // 0x03C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ShipwreckMove_Timeline;                            // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ShipwreckSlide_Timeline_RotationLerp_76E8389843A15C7F392B8A93AF05BEEC; // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShipwreckSlide_Timeline_SlideLerp_76E8389843A15C7F392B8A93AF05BEEC; // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ShipwreckSlide_Timeline__Direction_76E8389843A15C7F392B8A93AF05BEEC; // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ShipwreckSlide_Timeline;                           // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShipWreckLandingOffset;                            // 0x03E8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      TrailParticle;                                     // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CrashProgress;                                     // 0x0408(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrashing;                                        // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CrashProgressUpdateFreq;                           // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CrashProgress_TH;                                  // 0x0420(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           MovementCurve;                                     // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SlidePositionCurve;                                // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MovementSpeedCurve;                                // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OldRelativeLoc;                                    // 0x0440(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewRelativeLoc;                                    // 0x0458(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShipWreckSpawnOffset;                              // 0x0470(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLootSpawnerComponent                  Loot_Spawner_Component;                            // 0x0488(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFillableSpawnSettings                 Fillable_Spawn_Settings;                           // 0x0528(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         LootContainerAmount;                               // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LootspawnArea;                                     // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          SFX_OnSpawn;                                       // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          SFX_WhileCrashing;                                 // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          SFX_OnCrash;                                       // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          SFX_WhileCrashed;                                  // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BreakawayMaxRadius;                                // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	TArray<struct FVector>                        BreakawayLandingOffsets;                           // 0x0578(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                BreakawayTimings;                                  // 0x0588(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBP_ShipwreckBreakablePartComponent_C*> BreakawayComponents;                        // 0x0598(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         MinBreakoutTime;                                   // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxBreakoutTime;                                   // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinBreakawayScatterRadius;                         // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxBreakawayScatterRadius;                         // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShipwreckSlideOffset;                              // 0x05B8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SlideOnCrash;                                      // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      SmokeStackEmitter;                                 // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SlideDistance;                                     // 0x05E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinSlideRange;                                     // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSlideRange;                                     // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          SFX_WhileCrashingStop;                             // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UBP_DA_SmallWreckData_C>> ShipwreckVariations;                       // 0x0600(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FEffectHandle                          FireDamageHandle;                                  // 0x0610(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CuttableLootAmount;                                // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATemporaryLootSpawner*>          SpawnedLootSpawners;                               // 0x0628(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AResourceNodePlaceableSpawner*>  SpawnedCuttables;                                  // 0x0638(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         SpawnedFireActors;                                 // 0x0648(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FPoiseDamageData                       BasePoiseDamage;                                   // 0x0658(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FPoiseDamageData                       MinimumPoiseDamage;                                // 0x0664(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          bSpawnCuttablesOnSockets;                          // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_671[0x7];                                      // 0x0671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           SpawnedBodyParts;                                  // 0x0678(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           SpawnedSandMounds;                                 // 0x0688(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UNiagaraComponent*>              SpawnedSmokeStacks;                                // 0x0698(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FFSmallShipwreckReplicatedProps        ReplicatedState;                                   // 0x06A8(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SlideProgress;                                     // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableDebugDraw;                                  // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHaveSetRandomStream;                              // 0x06C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHaveSetFinalPosition;                             // 0x06C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasTriggeredAfterCrashFX;                         // 0x06C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C4[0x4];                                      // 0x06C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AddedShipAngleWhileCrashing;                       // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LandingRotation;                                   // 0x06D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        ImpactRotationSpeedMultiplier;                     // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExplosionHeightTreshold;                           // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_DA_SmallWreckData_C*                ShipVariationDataAsset;                            // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           SpawnedTempMeshesForMineables;                     // 0x0700(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          bHaveAppliedShipVariation;                         // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711[0x7];                                      // 0x0711(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TickingCrashProgress;                              // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CrashProgressReplicationTimer;                     // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WormAttractDelay;                                  // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EThreatBlobType                               Threat_Blob_Type;                                  // 0x072C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72D[0x3];                                      // 0x072D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Threat_Blob_Value;                                 // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_734[0x4];                                      // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          SFX_SkyExplosions;                                 // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableDebugLanding;                               // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_741[0x7];                                      // 0x0741(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebugStartLandingProgress;                         // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinMineableSocketHeight;                           // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ApproximateCrashAngle;                             // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereCollider;                                    // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LocalStaticMeshComp;                               // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Cuttable_to_Socket(class FName InSocketName);
	void Add_Lootcontainer_to_Socket(class FName InSocketName);
	void AddFireZoneToSocket(class FName SocketName);
	void ApplyDamageOnServer();
	void ApplyShipVariation(int32 VariationIndex);
	void AttractWorm();
	void BP_OnSandwormCleanup(const struct FHitResult& HitResult, const struct FInstigatorInfo& InInstigator, TSubclassOf<class UDuneDamageType> DamageType);
	void CalcSlideDistance(double MinDistane, double MaxDistance, double* SlideDistance_0);
	void CleanupFires();
	void CleanupLoot();
	void CrashProgressTick();
	void DamageTick();
	void DestroyTempMeshes();
	void EnableCollisions();
	void ExecuteUbergraph_BP_SmallShipwreck_01(int32 EntryPoint);
	void FindAverageLocationAndNormal(const struct FVector& StartLocation, int32 TraceAmount, const struct FVector& ConeDirection, double MaxAvgHeightDif, struct FVector* AverageLocation, struct FVector* AverageNormal, bool* Valid);
	void FindCollisionPointVFX(bool* Blocking_Hit, struct FVector* Impact, struct FRotator* Rotation);
	void FindLandingLocation(const struct FVector& CheckLocation, struct FVector* LocalLandingOffset);
	void FindRandLocationInRadius(const struct FVector& CenterLoc, int32 Stream_InitialSeed, float Min, float Max, struct FHitResult* OutHit);
	void FindSlideEndLocation(const struct FVector& StartLocation, struct FVector* EndLocation);
	void FX___DuringSlide(double Velocity);
	void FX_AfterCrash();
	void FX_OnCrash();
	void FX_OnSlideEnded();
	void FX_OnVisible();
	void Get_Random_Point_In_Radius(double Radius, struct FVector* Point);
	struct FVector GetLocationAlongCurve(class UCurveVector* Curve, float InTime);
	void GetRandomBreakpoint(double* Time);
	void GetRandomShipVariation(int32* ShipVar);
	void Handle_Variation_and_Mesh_Loaded();
	void Hitt_Call_Back(const TSet<class AActor*>& HitActors);
	void InitializeBreakawayArrays(TArray<class USceneComponent*>& Array);
	void InitializeCrashParameters();
	void LoadExtraMesh(int32 Index_0);
	void LoadMineable(int32 Index_0);
	void MulticastDestroyTempMeshes();
	void On_Slide_Ended();
	void OnLoaded_0735E7E94A578E40F242EEB4174F34D4(class UObject* Loaded);
	void OnLoaded_5FA132584DA282E10B914F97A1DD3210(class UObject* Loaded);
	void OnLoaded_6F1E45E44811A1BE323B6688BB831692(class UObject* Loaded);
	void OnLoaded_7E31BD5A4329F7CFCDA5E59902555ABB(class UObject* Loaded);
	void OnLoaded_DCD94DAE4432766CB0A73EA88F67F023(class UObject* Loaded);
	void OnRep_CrashProgress();
	void OnRep_ReplicatedState();
	void OnShipWreckLanded();
	void PlaceShipComponents();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void SetFinalPositionAndRotation();
	void ShipVariationTester();
	void ShipwreckMove_Timeline__FinishedFunc();
	void ShipwreckMove_Timeline__PreCrashVFX__EventFunc();
	void ShipwreckMove_Timeline__SkyExplosion__EventFunc();
	void ShipwreckMove_Timeline__StartFindingCollisionPointVFX__EventFunc();
	void ShipwreckMove_Timeline__ToggleRender__EventFunc();
	void ShipwreckMove_Timeline__UpdateFunc();
	void ShipwreckSlide_Timeline__FinishedFunc();
	void ShipwreckSlide_Timeline__UpdateFunc();
	void Spawn_Loot();
	void SpawnFireZones();
	void StartCountDownToAttractWorm();
	void Try_Spawn_Sandmounds();
	void UnhideIfHidden();
	void UpdateCrashProgressTick(double ReplicationFrequency, bool* bIsFinished);
	void UpdateSocketTransformsVFX();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SmallShipwreck_01_C">();
	}
	static class ABP_SmallShipwreck_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SmallShipwreck_01_C>();
	}
};
static_assert(alignof(ABP_SmallShipwreck_01_C) == 0x000008, "Wrong alignment on ABP_SmallShipwreck_01_C");
static_assert(sizeof(ABP_SmallShipwreck_01_C) == 0x000770, "Wrong size on ABP_SmallShipwreck_01_C");
static_assert(offsetof(ABP_SmallShipwreck_01_C, UberGraphFrame) == 0x000368, "Member 'ABP_SmallShipwreck_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, LootLocationCenter_Scene03) == 0x000370, "Member 'ABP_SmallShipwreck_01_C::LootLocationCenter_Scene03' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, LootLocationCenter_Scene02) == 0x000378, "Member 'ABP_SmallShipwreck_01_C::LootLocationCenter_Scene02' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, LootLocationCenter_Scene01) == 0x000380, "Member 'ABP_SmallShipwreck_01_C::LootLocationCenter_Scene01' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, LootLocationParent_Scene) == 0x000388, "Member 'ABP_SmallShipwreck_01_C::LootLocationParent_Scene' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, Root) == 0x000390, "Member 'ABP_SmallShipwreck_01_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipwreckPivot) == 0x000398, "Member 'ABP_SmallShipwreck_01_C::ShipwreckPivot' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, BodyMesh) == 0x0003A0, "Member 'ABP_SmallShipwreck_01_C::BodyMesh' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, FcAudio) == 0x0003A8, "Member 'ABP_SmallShipwreck_01_C::FcAudio' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, Text) == 0x0003B0, "Member 'ABP_SmallShipwreck_01_C::Text' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, TrailStartLocation) == 0x0003B8, "Member 'ABP_SmallShipwreck_01_C::TrailStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipwreckMove_Timeline_MovementCurve_CCB143C74CA06B35F9D4ADAB8DF040BE) == 0x0003C0, "Member 'ABP_SmallShipwreck_01_C::ShipwreckMove_Timeline_MovementCurve_CCB143C74CA06B35F9D4ADAB8DF040BE' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipwreckMove_Timeline__Direction_CCB143C74CA06B35F9D4ADAB8DF040BE) == 0x0003C4, "Member 'ABP_SmallShipwreck_01_C::ShipwreckMove_Timeline__Direction_CCB143C74CA06B35F9D4ADAB8DF040BE' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipwreckMove_Timeline) == 0x0003C8, "Member 'ABP_SmallShipwreck_01_C::ShipwreckMove_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipwreckSlide_Timeline_RotationLerp_76E8389843A15C7F392B8A93AF05BEEC) == 0x0003D0, "Member 'ABP_SmallShipwreck_01_C::ShipwreckSlide_Timeline_RotationLerp_76E8389843A15C7F392B8A93AF05BEEC' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipwreckSlide_Timeline_SlideLerp_76E8389843A15C7F392B8A93AF05BEEC) == 0x0003D4, "Member 'ABP_SmallShipwreck_01_C::ShipwreckSlide_Timeline_SlideLerp_76E8389843A15C7F392B8A93AF05BEEC' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipwreckSlide_Timeline__Direction_76E8389843A15C7F392B8A93AF05BEEC) == 0x0003D8, "Member 'ABP_SmallShipwreck_01_C::ShipwreckSlide_Timeline__Direction_76E8389843A15C7F392B8A93AF05BEEC' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipwreckSlide_Timeline) == 0x0003E0, "Member 'ABP_SmallShipwreck_01_C::ShipwreckSlide_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipWreckLandingOffset) == 0x0003E8, "Member 'ABP_SmallShipwreck_01_C::ShipWreckLandingOffset' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, TrailParticle) == 0x000400, "Member 'ABP_SmallShipwreck_01_C::TrailParticle' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, CrashProgress) == 0x000408, "Member 'ABP_SmallShipwreck_01_C::CrashProgress' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, IsCrashing) == 0x000410, "Member 'ABP_SmallShipwreck_01_C::IsCrashing' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, CrashProgressUpdateFreq) == 0x000418, "Member 'ABP_SmallShipwreck_01_C::CrashProgressUpdateFreq' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, CrashProgress_TH) == 0x000420, "Member 'ABP_SmallShipwreck_01_C::CrashProgress_TH' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, MovementCurve) == 0x000428, "Member 'ABP_SmallShipwreck_01_C::MovementCurve' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SlidePositionCurve) == 0x000430, "Member 'ABP_SmallShipwreck_01_C::SlidePositionCurve' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, MovementSpeedCurve) == 0x000438, "Member 'ABP_SmallShipwreck_01_C::MovementSpeedCurve' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, OldRelativeLoc) == 0x000440, "Member 'ABP_SmallShipwreck_01_C::OldRelativeLoc' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, NewRelativeLoc) == 0x000458, "Member 'ABP_SmallShipwreck_01_C::NewRelativeLoc' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipWreckSpawnOffset) == 0x000470, "Member 'ABP_SmallShipwreck_01_C::ShipWreckSpawnOffset' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, Loot_Spawner_Component) == 0x000488, "Member 'ABP_SmallShipwreck_01_C::Loot_Spawner_Component' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, Fillable_Spawn_Settings) == 0x000528, "Member 'ABP_SmallShipwreck_01_C::Fillable_Spawn_Settings' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, LootContainerAmount) == 0x000534, "Member 'ABP_SmallShipwreck_01_C::LootContainerAmount' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, LootspawnArea) == 0x000538, "Member 'ABP_SmallShipwreck_01_C::LootspawnArea' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SFX_OnSpawn) == 0x000548, "Member 'ABP_SmallShipwreck_01_C::SFX_OnSpawn' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SFX_WhileCrashing) == 0x000550, "Member 'ABP_SmallShipwreck_01_C::SFX_WhileCrashing' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SFX_OnCrash) == 0x000558, "Member 'ABP_SmallShipwreck_01_C::SFX_OnCrash' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SFX_WhileCrashed) == 0x000560, "Member 'ABP_SmallShipwreck_01_C::SFX_WhileCrashed' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, BreakawayMaxRadius) == 0x000568, "Member 'ABP_SmallShipwreck_01_C::BreakawayMaxRadius' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, RandomStream) == 0x000570, "Member 'ABP_SmallShipwreck_01_C::RandomStream' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, BreakawayLandingOffsets) == 0x000578, "Member 'ABP_SmallShipwreck_01_C::BreakawayLandingOffsets' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, BreakawayTimings) == 0x000588, "Member 'ABP_SmallShipwreck_01_C::BreakawayTimings' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, BreakawayComponents) == 0x000598, "Member 'ABP_SmallShipwreck_01_C::BreakawayComponents' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, MinBreakoutTime) == 0x0005A8, "Member 'ABP_SmallShipwreck_01_C::MinBreakoutTime' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, MaxBreakoutTime) == 0x0005AC, "Member 'ABP_SmallShipwreck_01_C::MaxBreakoutTime' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, MinBreakawayScatterRadius) == 0x0005B0, "Member 'ABP_SmallShipwreck_01_C::MinBreakawayScatterRadius' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, MaxBreakawayScatterRadius) == 0x0005B4, "Member 'ABP_SmallShipwreck_01_C::MaxBreakawayScatterRadius' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipwreckSlideOffset) == 0x0005B8, "Member 'ABP_SmallShipwreck_01_C::ShipwreckSlideOffset' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SlideOnCrash) == 0x0005D0, "Member 'ABP_SmallShipwreck_01_C::SlideOnCrash' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SmokeStackEmitter) == 0x0005D8, "Member 'ABP_SmallShipwreck_01_C::SmokeStackEmitter' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SlideDistance) == 0x0005E0, "Member 'ABP_SmallShipwreck_01_C::SlideDistance' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, MinSlideRange) == 0x0005E8, "Member 'ABP_SmallShipwreck_01_C::MinSlideRange' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, MaxSlideRange) == 0x0005F0, "Member 'ABP_SmallShipwreck_01_C::MaxSlideRange' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SFX_WhileCrashingStop) == 0x0005F8, "Member 'ABP_SmallShipwreck_01_C::SFX_WhileCrashingStop' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipwreckVariations) == 0x000600, "Member 'ABP_SmallShipwreck_01_C::ShipwreckVariations' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, FireDamageHandle) == 0x000610, "Member 'ABP_SmallShipwreck_01_C::FireDamageHandle' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, CuttableLootAmount) == 0x000620, "Member 'ABP_SmallShipwreck_01_C::CuttableLootAmount' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SpawnedLootSpawners) == 0x000628, "Member 'ABP_SmallShipwreck_01_C::SpawnedLootSpawners' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SpawnedCuttables) == 0x000638, "Member 'ABP_SmallShipwreck_01_C::SpawnedCuttables' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SpawnedFireActors) == 0x000648, "Member 'ABP_SmallShipwreck_01_C::SpawnedFireActors' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, BasePoiseDamage) == 0x000658, "Member 'ABP_SmallShipwreck_01_C::BasePoiseDamage' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, MinimumPoiseDamage) == 0x000664, "Member 'ABP_SmallShipwreck_01_C::MinimumPoiseDamage' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, bSpawnCuttablesOnSockets) == 0x000670, "Member 'ABP_SmallShipwreck_01_C::bSpawnCuttablesOnSockets' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SpawnedBodyParts) == 0x000678, "Member 'ABP_SmallShipwreck_01_C::SpawnedBodyParts' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SpawnedSandMounds) == 0x000688, "Member 'ABP_SmallShipwreck_01_C::SpawnedSandMounds' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SpawnedSmokeStacks) == 0x000698, "Member 'ABP_SmallShipwreck_01_C::SpawnedSmokeStacks' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ReplicatedState) == 0x0006A8, "Member 'ABP_SmallShipwreck_01_C::ReplicatedState' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SlideProgress) == 0x0006B8, "Member 'ABP_SmallShipwreck_01_C::SlideProgress' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, bEnableDebugDraw) == 0x0006C0, "Member 'ABP_SmallShipwreck_01_C::bEnableDebugDraw' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, bHaveSetRandomStream) == 0x0006C1, "Member 'ABP_SmallShipwreck_01_C::bHaveSetRandomStream' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, bHaveSetFinalPosition) == 0x0006C2, "Member 'ABP_SmallShipwreck_01_C::bHaveSetFinalPosition' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, bHasTriggeredAfterCrashFX) == 0x0006C3, "Member 'ABP_SmallShipwreck_01_C::bHasTriggeredAfterCrashFX' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, AddedShipAngleWhileCrashing) == 0x0006C8, "Member 'ABP_SmallShipwreck_01_C::AddedShipAngleWhileCrashing' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, LandingRotation) == 0x0006D0, "Member 'ABP_SmallShipwreck_01_C::LandingRotation' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ImpactRotationSpeedMultiplier) == 0x0006E8, "Member 'ABP_SmallShipwreck_01_C::ImpactRotationSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ExplosionHeightTreshold) == 0x0006F0, "Member 'ABP_SmallShipwreck_01_C::ExplosionHeightTreshold' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ShipVariationDataAsset) == 0x0006F8, "Member 'ABP_SmallShipwreck_01_C::ShipVariationDataAsset' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SpawnedTempMeshesForMineables) == 0x000700, "Member 'ABP_SmallShipwreck_01_C::SpawnedTempMeshesForMineables' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, bHaveAppliedShipVariation) == 0x000710, "Member 'ABP_SmallShipwreck_01_C::bHaveAppliedShipVariation' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, TickingCrashProgress) == 0x000718, "Member 'ABP_SmallShipwreck_01_C::TickingCrashProgress' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, CrashProgressReplicationTimer) == 0x000720, "Member 'ABP_SmallShipwreck_01_C::CrashProgressReplicationTimer' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, WormAttractDelay) == 0x000728, "Member 'ABP_SmallShipwreck_01_C::WormAttractDelay' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, Threat_Blob_Type) == 0x00072C, "Member 'ABP_SmallShipwreck_01_C::Threat_Blob_Type' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, Threat_Blob_Value) == 0x000730, "Member 'ABP_SmallShipwreck_01_C::Threat_Blob_Value' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SFX_SkyExplosions) == 0x000738, "Member 'ABP_SmallShipwreck_01_C::SFX_SkyExplosions' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, bEnableDebugLanding) == 0x000740, "Member 'ABP_SmallShipwreck_01_C::bEnableDebugLanding' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, DebugStartLandingProgress) == 0x000748, "Member 'ABP_SmallShipwreck_01_C::DebugStartLandingProgress' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, MinMineableSocketHeight) == 0x000750, "Member 'ABP_SmallShipwreck_01_C::MinMineableSocketHeight' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, ApproximateCrashAngle) == 0x000758, "Member 'ABP_SmallShipwreck_01_C::ApproximateCrashAngle' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, SphereCollider) == 0x000760, "Member 'ABP_SmallShipwreck_01_C::SphereCollider' has a wrong offset!");
static_assert(offsetof(ABP_SmallShipwreck_01_C, LocalStaticMeshComp) == 0x000768, "Member 'ABP_SmallShipwreck_01_C::LocalStaticMeshComp' has a wrong offset!");

}

