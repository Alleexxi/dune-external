#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DamageVisualizationComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FDVSModuleData_structs.hpp"
#include "FDVSHitMarkerCache_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DamageVisualizationComponent.BP_DamageVisualizationComponent_C
// 0x0110 (0x0E10 - 0x0D00)
class UBP_DamageVisualizationComponent_C final : public UDamageVisualizationComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D00(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialInstanceDynamic*               MID_TextureDilation;                               // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class UMeshComponent*, struct FFDVSModuleData> Meshes;                                      // 0x0D10(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UMaterialInstanceDynamic*               MID_DirectHitMask;                                 // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OwningActor;                                       // 0x0D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0D70(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInitialized;                                    // 0x0D88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D89[0x7];                                      // 0x0D89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFDVSHitMarkerCache>            HitMarkerCache;                                    // 0x0D90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UMeshComponent*, struct FFDVSHitMarkerCache> HitMarkerCache2;                         // 0x0DA0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FTimerHandle                           TimerHandle;                                       // 0x0DF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseDrawImmediate;                                 // 0x0DF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DF9[0x3];                                      // 0x0DF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RenderTargetResolution;                            // 0x0DFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_SingleHitMarker;                               // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateMask(const struct FFDVSModuleData& FDVSModuleData, const struct FDamageVisualizationHitMarker& HitMarker, class UMeshComponent* CollisionMeshComponent);
	void UpdateFromCache();
	void TryInitModuleData(class UMeshComponent* CollisionMeshComponent, bool* bIsInitialized_0, bool* bNeedsUnwrap);
	void ShowAllMeshComponents();
	void Setup(class AActor* Actor);
	void ResetMaterials();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnUpdateHitMarker(class UMeshComponent* MeshComponent, const struct FDamageVisualizationHitMarker& HitMarker);
	void OnModuleHit(class UMeshComponent* Mesh, const struct FDamageVisualizationHitMarker& HitMarker);
	void OnHitMarkerAdded(const struct FHitResult& HitResult, const struct FDamageVisualizationHitMarker& HitMarker);
	void Init();
	void HideAllMeshComponentsExcept(class UMeshComponent* MeshComponent);
	void ExecuteUbergraph_BP_DamageVisualizationComponent(int32 EntryPoint);
	void DrawSingle(const struct FFDVSModuleData& FDVSModuleData, const struct FDamageVisualizationHitMarker& HitMarker, bool bNeedsUnwrap, class UMeshComponent* CollisionMeshComponent);
	void DrawImmediate(const struct FFDVSModuleData& FDVSModuleData, const struct FDamageVisualizationHitMarker& HitMarker);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DamageVisualizationComponent_C">();
	}
	static class UBP_DamageVisualizationComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DamageVisualizationComponent_C>();
	}
};
static_assert(alignof(UBP_DamageVisualizationComponent_C) == 0x000010, "Wrong alignment on UBP_DamageVisualizationComponent_C");
static_assert(sizeof(UBP_DamageVisualizationComponent_C) == 0x000E10, "Wrong size on UBP_DamageVisualizationComponent_C");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, UberGraphFrame) == 0x000D00, "Member 'UBP_DamageVisualizationComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, MID_TextureDilation) == 0x000D08, "Member 'UBP_DamageVisualizationComponent_C::MID_TextureDilation' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, Meshes) == 0x000D10, "Member 'UBP_DamageVisualizationComponent_C::Meshes' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, MID_DirectHitMask) == 0x000D60, "Member 'UBP_DamageVisualizationComponent_C::MID_DirectHitMask' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, OwningActor) == 0x000D68, "Member 'UBP_DamageVisualizationComponent_C::OwningActor' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, HitLocation) == 0x000D70, "Member 'UBP_DamageVisualizationComponent_C::HitLocation' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, bIsInitialized) == 0x000D88, "Member 'UBP_DamageVisualizationComponent_C::bIsInitialized' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, HitMarkerCache) == 0x000D90, "Member 'UBP_DamageVisualizationComponent_C::HitMarkerCache' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, HitMarkerCache2) == 0x000DA0, "Member 'UBP_DamageVisualizationComponent_C::HitMarkerCache2' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, TimerHandle) == 0x000DF0, "Member 'UBP_DamageVisualizationComponent_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, bUseDrawImmediate) == 0x000DF8, "Member 'UBP_DamageVisualizationComponent_C::bUseDrawImmediate' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, RenderTargetResolution) == 0x000DFC, "Member 'UBP_DamageVisualizationComponent_C::RenderTargetResolution' has a wrong offset!");
static_assert(offsetof(UBP_DamageVisualizationComponent_C, MID_SingleHitMarker) == 0x000E00, "Member 'UBP_DamageVisualizationComponent_C::MID_SingleHitMarker' has a wrong offset!");

}

