#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DunePlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DunePlayerController.BP_DunePlayerController_C
// 0x0040 (0x1510 - 0x14D0)
class ABP_DunePlayerController_C final : public ADunePlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x14D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_JourneyComponent_C*                 BP_JourneyComponent;                               // 0x14D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_MentatWidgetManagerComponent_C*     BP_MentatWidgetManagerComponent;                   // 0x14E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerEventsControllerComponent_C*  BP_PlayerEventsControllerComponent;                // 0x14E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         TeamID;                                            // 0x14F0(0x0001)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceDrone;                                        // 0x14F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14F2[0x6];                                     // 0x14F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Visible)>  OnCrosshairVisibilityUpdated;                      // 0x14F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void TogglePhotoMode();
	void SetCrosshairVisibility(bool bIsVisible);
	void ServerTogglePhotoMode(const struct FTransform& SpawnTransform, bool Drone_);
	void ServerReturnToNormalPawn();
	void ServerKillNPC(class ADuneNpcCharacter* Target, bool SphereKill_);
	void PauseClientTravel(const class FString& URL, ETravelType TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void OnLoaded_948536C04C02D748FA88DFB447EC4AB7(TSubclassOf<class UObject> Loaded);
	void m_OnSequenceStopped_800AD50341EF500BA3A4D4965B9432F8(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceStarted_800AD50341EF500BA3A4D4965B9432F8(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceInterrupted_800AD50341EF500BA3A4D4965B9432F8(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void m_OnSequenceFailed_800AD50341EF500BA3A4D4965B9432F8(class UPlayerCinematicComponent* PlayerCinematicComponent);
	void InpActEvt_TurntableCameraTest_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_IA_KillNPC_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void GetFocusedNPC(class ADuneNpcCharacter** NPC);
	void ExecuteUbergraph_BP_DunePlayerController(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DunePlayerController_C">();
	}
	static class ABP_DunePlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DunePlayerController_C>();
	}
};
static_assert(alignof(ABP_DunePlayerController_C) == 0x000010, "Wrong alignment on ABP_DunePlayerController_C");
static_assert(sizeof(ABP_DunePlayerController_C) == 0x001510, "Wrong size on ABP_DunePlayerController_C");
static_assert(offsetof(ABP_DunePlayerController_C, UberGraphFrame) == 0x0014D0, "Member 'ABP_DunePlayerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerController_C, BP_JourneyComponent) == 0x0014D8, "Member 'ABP_DunePlayerController_C::BP_JourneyComponent' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerController_C, BP_MentatWidgetManagerComponent) == 0x0014E0, "Member 'ABP_DunePlayerController_C::BP_MentatWidgetManagerComponent' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerController_C, BP_PlayerEventsControllerComponent) == 0x0014E8, "Member 'ABP_DunePlayerController_C::BP_PlayerEventsControllerComponent' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerController_C, TeamID) == 0x0014F0, "Member 'ABP_DunePlayerController_C::TeamID' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerController_C, ForceDrone) == 0x0014F1, "Member 'ABP_DunePlayerController_C::ForceDrone' has a wrong offset!");
static_assert(offsetof(ABP_DunePlayerController_C, OnCrosshairVisibilityUpdated) == 0x0014F8, "Member 'ABP_DunePlayerController_C::OnCrosshairVisibilityUpdated' has a wrong offset!");

}

