#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CompassMarkerWidget

#include "Basic.hpp"

#include "DuneSandbox_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function W_CompassMarkerWidget.W_CompassMarkerWidget_C.Update
// 0x0168 (0x0168 - 0x0000)
struct W_CompassMarkerWidget_C_Update final
{
public:
	ECompassMarkerClass                           MarkerClass;                                       // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEMapMarker                            MarkerType;                                        // 0x0004(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFullscreenMapMarkerRowBase            MarkerStaticData;                                  // 0x0010(0x0158)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_CompassMarkerWidget_C_Update) == 0x000008, "Wrong alignment on W_CompassMarkerWidget_C_Update");
static_assert(sizeof(W_CompassMarkerWidget_C_Update) == 0x000168, "Wrong size on W_CompassMarkerWidget_C_Update");
static_assert(offsetof(W_CompassMarkerWidget_C_Update, MarkerClass) == 0x000000, "Member 'W_CompassMarkerWidget_C_Update::MarkerClass' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_Update, MarkerType) == 0x000004, "Member 'W_CompassMarkerWidget_C_Update::MarkerType' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_Update, MarkerStaticData) == 0x000010, "Member 'W_CompassMarkerWidget_C_Update::MarkerStaticData' has a wrong offset!");

// Function W_CompassMarkerWidget.W_CompassMarkerWidget_C.SetPlayerDistance
// 0x0008 (0x0008 - 0x0000)
struct W_CompassMarkerWidget_C_SetPlayerDistance final
{
public:
	float                                         MetersToPlayer;                                    // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenterDeviation;                                   // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CompassMarkerWidget_C_SetPlayerDistance) == 0x000004, "Wrong alignment on W_CompassMarkerWidget_C_SetPlayerDistance");
static_assert(sizeof(W_CompassMarkerWidget_C_SetPlayerDistance) == 0x000008, "Wrong size on W_CompassMarkerWidget_C_SetPlayerDistance");
static_assert(offsetof(W_CompassMarkerWidget_C_SetPlayerDistance, MetersToPlayer) == 0x000000, "Member 'W_CompassMarkerWidget_C_SetPlayerDistance::MetersToPlayer' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_SetPlayerDistance, CenterDeviation) == 0x000004, "Member 'W_CompassMarkerWidget_C_SetPlayerDistance::CenterDeviation' has a wrong offset!");

// Function W_CompassMarkerWidget.W_CompassMarkerWidget_C.SetMarkerHeight
// 0x0001 (0x0001 - 0x0000)
struct W_CompassMarkerWidget_C_SetMarkerHeight final
{
public:
	ECompassMarkerHeight                          MarkerHeight;                                      // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CompassMarkerWidget_C_SetMarkerHeight) == 0x000001, "Wrong alignment on W_CompassMarkerWidget_C_SetMarkerHeight");
static_assert(sizeof(W_CompassMarkerWidget_C_SetMarkerHeight) == 0x000001, "Wrong size on W_CompassMarkerWidget_C_SetMarkerHeight");
static_assert(offsetof(W_CompassMarkerWidget_C_SetMarkerHeight, MarkerHeight) == 0x000000, "Member 'W_CompassMarkerWidget_C_SetMarkerHeight::MarkerHeight' has a wrong offset!");

// Function W_CompassMarkerWidget.W_CompassMarkerWidget_C.SetIconFlashing
// 0x0018 (0x0018 - 0x0000)
struct W_CompassMarkerWidget_C_SetIconFlashing final
{
public:
	bool                                          EnableFlashing;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CompassMarkerWidget_C_SetIconFlashing) == 0x000008, "Wrong alignment on W_CompassMarkerWidget_C_SetIconFlashing");
static_assert(sizeof(W_CompassMarkerWidget_C_SetIconFlashing) == 0x000018, "Wrong size on W_CompassMarkerWidget_C_SetIconFlashing");
static_assert(offsetof(W_CompassMarkerWidget_C_SetIconFlashing, EnableFlashing) == 0x000000, "Member 'W_CompassMarkerWidget_C_SetIconFlashing::EnableFlashing' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_SetIconFlashing, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'W_CompassMarkerWidget_C_SetIconFlashing::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_SetIconFlashing, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000010, "Member 'W_CompassMarkerWidget_C_SetIconFlashing::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_SetIconFlashing, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'W_CompassMarkerWidget_C_SetIconFlashing::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_SetIconFlashing, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'W_CompassMarkerWidget_C_SetIconFlashing::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function W_CompassMarkerWidget.W_CompassMarkerWidget_C.ExecuteUbergraph_W_CompassMarkerWidget
// 0x0228 (0x0228 - 0x0000)
struct W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECompassMarkerHeight                          K2Node_Event_MarkerHeight;                         // 0x0007(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_MetersToPlayer;                       // 0x000C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CenterDeviation;                      // 0x0010(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Round64_ReturnValue;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECompassMarkerClass                           K2Node_Event_MarkerClass;                          // 0x0020(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEMapMarker                            K2Node_Event_MarkerType;                           // 0x0024(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFullscreenMapMarkerRowBase            K2Node_Event_MarkerStaticData;                     // 0x0030(0x0158)(ConstParm)
	class FText                                   CallFunc_Conv_Int64ToText_ReturnValue;             // 0x0188(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x01A0(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01F0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0200(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Round64_A_ImplicitCast;                   // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget) == 0x000008, "Wrong alignment on W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget");
static_assert(sizeof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget) == 0x000228, "Wrong size on W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, EntryPoint) == 0x000000, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, Temp_byte_Variable) == 0x000004, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, Temp_byte_Variable_1) == 0x000005, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, Temp_bool_Variable) == 0x000006, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, K2Node_Event_MarkerHeight) == 0x000007, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::K2Node_Event_MarkerHeight' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, K2Node_Event_MetersToPlayer) == 0x00000C, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::K2Node_Event_MetersToPlayer' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, K2Node_Event_CenterDeviation) == 0x000010, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::K2Node_Event_CenterDeviation' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, CallFunc_GetFloatValue_ReturnValue) == 0x000014, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, CallFunc_Round64_ReturnValue) == 0x000018, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::CallFunc_Round64_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, K2Node_Event_MarkerClass) == 0x000020, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::K2Node_Event_MarkerClass' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, K2Node_Event_MarkerType) == 0x000024, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::K2Node_Event_MarkerType' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, K2Node_Event_MarkerStaticData) == 0x000030, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::K2Node_Event_MarkerStaticData' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, CallFunc_Conv_Int64ToText_ReturnValue) == 0x000188, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::CallFunc_Conv_Int64ToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, K2Node_MakeStruct_FormatArgumentData) == 0x0001A0, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, K2Node_MakeArray_Array) == 0x0001F0, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, CallFunc_Format_ReturnValue) == 0x000200, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, K2Node_Select_Default) == 0x000218, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget, CallFunc_Round64_A_ImplicitCast) == 0x000220, "Member 'W_CompassMarkerWidget_C_ExecuteUbergraph_W_CompassMarkerWidget::CallFunc_Round64_A_ImplicitCast' has a wrong offset!");

}

