#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CollisionVolume

#include "Basic.hpp"

#include "EPhysicsMaterials_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DuneSandbox_structs.hpp"
#include "ECollisionProfiles_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CollisionVolume.BP_CollisionVolume_C
// 0x0080 (0x03D0 - 0x0350)
class ABP_CollisionVolume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   BottomCap;                                         // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TopCap;                                            // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CollisionVisualization;                            // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EZoneShape                                    Shape;                                             // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionProfiles                            Collision_Profile_Override;                        // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicsMaterials                             PhysicalMaterial;                                  // 0x039A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CollisionEnabled;                                  // 0x039B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CollisionResponse;                                 // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Climbable;                                         // 0x039D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collision_Visualization_In_PIE;                    // 0x039E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39F[0x1];                                      // 0x039F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ABP_CollisionVolume_C* Destroyed)> OnProxyCollisionDestroyed; // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class AStaticMeshActor*>               AffectedActors;                                    // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class FName>                           ActorsProfiles;                                    // 0x03C0(0x0010)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BP_CollisionVolume(int32 EntryPoint);
	void PostUserConstructionScript();
	void Set_Collision_Profile_();
	void Set_Physical_Material();
	void UserConstructionScript();

	bool IsClimbable(const class AActor* InActor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CollisionVolume_C">();
	}
	static class ABP_CollisionVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CollisionVolume_C>();
	}
};
static_assert(alignof(ABP_CollisionVolume_C) == 0x000008, "Wrong alignment on ABP_CollisionVolume_C");
static_assert(sizeof(ABP_CollisionVolume_C) == 0x0003D0, "Wrong size on ABP_CollisionVolume_C");
static_assert(offsetof(ABP_CollisionVolume_C, UberGraphFrame) == 0x000350, "Member 'ABP_CollisionVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, BottomCap) == 0x000358, "Member 'ABP_CollisionVolume_C::BottomCap' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, TopCap) == 0x000360, "Member 'ABP_CollisionVolume_C::TopCap' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, Root) == 0x000368, "Member 'ABP_CollisionVolume_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, TextRender) == 0x000370, "Member 'ABP_CollisionVolume_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, Capsule) == 0x000378, "Member 'ABP_CollisionVolume_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, Sphere) == 0x000380, "Member 'ABP_CollisionVolume_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, Box) == 0x000388, "Member 'ABP_CollisionVolume_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, CollisionVisualization) == 0x000390, "Member 'ABP_CollisionVolume_C::CollisionVisualization' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, Shape) == 0x000398, "Member 'ABP_CollisionVolume_C::Shape' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, Collision_Profile_Override) == 0x000399, "Member 'ABP_CollisionVolume_C::Collision_Profile_Override' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, PhysicalMaterial) == 0x00039A, "Member 'ABP_CollisionVolume_C::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, CollisionEnabled) == 0x00039B, "Member 'ABP_CollisionVolume_C::CollisionEnabled' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, CollisionResponse) == 0x00039C, "Member 'ABP_CollisionVolume_C::CollisionResponse' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, Climbable) == 0x00039D, "Member 'ABP_CollisionVolume_C::Climbable' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, Collision_Visualization_In_PIE) == 0x00039E, "Member 'ABP_CollisionVolume_C::Collision_Visualization_In_PIE' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, OnProxyCollisionDestroyed) == 0x0003A0, "Member 'ABP_CollisionVolume_C::OnProxyCollisionDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, AffectedActors) == 0x0003B0, "Member 'ABP_CollisionVolume_C::AffectedActors' has a wrong offset!");
static_assert(offsetof(ABP_CollisionVolume_C, ActorsProfiles) == 0x0003C0, "Member 'ABP_CollisionVolume_C::ActorsProfiles' has a wrong offset!");

}

