#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DeformationBufferCapture

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DeformationBufferCapture.BP_DeformationBufferCapture_C
// 0x0038 (0x03A0 - 0x0368)
class ABP_DeformationBufferCapture_C final : public ASceneCapture2D
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0368(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   BufferPreviewPlane;                                // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        CaptureBufferSize;                                 // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoveOffset;                                        // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FluidNinjaCompatibility;                           // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANinjaLive_C*                           NinjaLiveActor;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Clear();
	void ExecuteUbergraph_BP_DeformationBufferCapture(int32 EntryPoint);
	void InitCapture();
	void MoveCapture();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RegisterDeformationComponent(class UPrimitiveComponent* DeformationSystem);
	void SetMPCValues();
	void UnregisterDeformationComponent(class UNiagaraComponent* PSystem);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DeformationBufferCapture_C">();
	}
	static class ABP_DeformationBufferCapture_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DeformationBufferCapture_C>();
	}
};
static_assert(alignof(ABP_DeformationBufferCapture_C) == 0x000008, "Wrong alignment on ABP_DeformationBufferCapture_C");
static_assert(sizeof(ABP_DeformationBufferCapture_C) == 0x0003A0, "Wrong size on ABP_DeformationBufferCapture_C");
static_assert(offsetof(ABP_DeformationBufferCapture_C, UberGraphFrame) == 0x000368, "Member 'ABP_DeformationBufferCapture_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DeformationBufferCapture_C, BufferPreviewPlane) == 0x000370, "Member 'ABP_DeformationBufferCapture_C::BufferPreviewPlane' has a wrong offset!");
static_assert(offsetof(ABP_DeformationBufferCapture_C, CaptureBufferSize) == 0x000378, "Member 'ABP_DeformationBufferCapture_C::CaptureBufferSize' has a wrong offset!");
static_assert(offsetof(ABP_DeformationBufferCapture_C, MoveOffset) == 0x000380, "Member 'ABP_DeformationBufferCapture_C::MoveOffset' has a wrong offset!");
static_assert(offsetof(ABP_DeformationBufferCapture_C, FluidNinjaCompatibility) == 0x000390, "Member 'ABP_DeformationBufferCapture_C::FluidNinjaCompatibility' has a wrong offset!");
static_assert(offsetof(ABP_DeformationBufferCapture_C, NinjaLiveActor) == 0x000398, "Member 'ABP_DeformationBufferCapture_C::NinjaLiveActor' has a wrong offset!");

}

