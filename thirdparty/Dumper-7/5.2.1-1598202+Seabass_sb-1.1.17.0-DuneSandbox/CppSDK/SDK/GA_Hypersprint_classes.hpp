#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Hypersprint

#include "Basic.hpp"

#include "GA_EquipableAbility_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "DuneSandbox_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Hypersprint.GA_Hypersprint_C
// 0x01D0 (0x0750 - 0x0580)
class UGA_Hypersprint_C final : public UGA_EquipableAbility_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0580(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ADuneCharacter*                         AvatarCharacter;                                   // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          Audio_OnSlide;                                     // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bToggleMode;                                       // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_599[0x7];                                      // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DamageThreshold;                                   // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            Channel_GE_Handle;                                 // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TSet<TSubclassOf<class UDuneDamageType>>      Damage_Types;                                      // 0x05B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FHypersprintStats                      Hypersprint_Stats;                                 // 0x0608(0x00C0)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	double                                        CacheTurnRadius;                                   // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CacheSlideLockoutTotalTime;                        // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CacheSpeed;                                        // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CacheSlideStartVelocityScalar;                     // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CacheJumpMultiplier;                               // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CacheStaminaStartCost;                             // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GamepadUsesHoldInput;                              // 0x06F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KeyboardUsesHoldInput;                             // 0x06F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FA[0x2];                                      // 0x06FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraContext_Hypersprint;                         // 0x06FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAirborne;                                       // 0x0704(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_705[0x3];                                      // 0x0705(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitDelay*                 WaitTask;                                          // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AirborneCancelTime;                                // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMoveInputIgnored;                                 // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitCancel*                CancelInputTask;                                   // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StartHoldMontage;                                  // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SuccessfullyStartedHypersprinting;                 // 0x0730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_731[0x7];                                      // 0x0731(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HypersprintFullCooldown;                           // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HypersprintReducedCooldown;                        // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           HypersprintCurvesMontage;                          // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CacheTuningValues();
	void CheckForAirborneCancellation();
	void ClearFlags();
	void EventReceived_932A79E44CFBA7B96B5F9A9C5F4DDAE5(const struct FGameplayEventData& Payload);
	void EventReceived_C0ED3B824DBF1314CCE3168BBDCE77E2(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_GA_Hypersprint(int32 EntryPoint);
	void InitializeStaticProperties(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnBlendOut_6EC20A104C77A093A6CA0F9EF437F120();
	void OnBlendOut_927DE5FA4246C6E0CB6F0F9CD3ECC7CC();
	void OnCancel_502161394068556BC391B998CA8B7862();
	void OnCancelled_6EC20A104C77A093A6CA0F9EF437F120();
	void OnCancelled_927DE5FA4246C6E0CB6F0F9CD3ECC7CC();
	void OnChange_2A2AC3A04ABE5D60846E2BBCEAA8AA98(EMovementMode NewMovementMode, uint8 CustomMoveMode);
	void OnChange_A6080A124E255DECB95E4BB49D5DF7D5(EMovementMode NewMovementMode, uint8 CustomMoveMode);
	void OnCompleted_6EC20A104C77A093A6CA0F9EF437F120();
	void OnCompleted_927DE5FA4246C6E0CB6F0F9CD3ECC7CC();
	void OnFinish_31347E414E78F9F30E92F5A306876134();
	void OnFinish_9AD37D7448345CF44F3F2B944D6634B7();
	void OnInterrupted_6EC20A104C77A093A6CA0F9EF437F120();
	void OnInterrupted_927DE5FA4246C6E0CB6F0F9CD3ECC7CC();
	void OnPress_4951229B426E75DD71DCC5BAF96D81D4(float TimeWaited);
	void OnRelease_DC5A9E6D4CC011D8C52B5F8796D538E5(float TimeHeld);
	void OnThresholdMet_B785C3F348F3474E93AEB9855AAFE8C0();
	void ResumeMovementInput();
	void SetupCancelations();
	void SetupInput();
	void SetupSlideEvent();
	void SlideNotify();
	void StopMovementInput();

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Hypersprint_C">();
	}
	static class UGA_Hypersprint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Hypersprint_C>();
	}
};
static_assert(alignof(UGA_Hypersprint_C) == 0x000008, "Wrong alignment on UGA_Hypersprint_C");
static_assert(sizeof(UGA_Hypersprint_C) == 0x000750, "Wrong size on UGA_Hypersprint_C");
static_assert(offsetof(UGA_Hypersprint_C, UberGraphFrame) == 0x000580, "Member 'UGA_Hypersprint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, AvatarCharacter) == 0x000588, "Member 'UGA_Hypersprint_C::AvatarCharacter' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, Audio_OnSlide) == 0x000590, "Member 'UGA_Hypersprint_C::Audio_OnSlide' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, bToggleMode) == 0x000598, "Member 'UGA_Hypersprint_C::bToggleMode' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, DamageThreshold) == 0x0005A0, "Member 'UGA_Hypersprint_C::DamageThreshold' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, Channel_GE_Handle) == 0x0005A8, "Member 'UGA_Hypersprint_C::Channel_GE_Handle' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, Damage_Types) == 0x0005B8, "Member 'UGA_Hypersprint_C::Damage_Types' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, Hypersprint_Stats) == 0x000608, "Member 'UGA_Hypersprint_C::Hypersprint_Stats' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, CacheTurnRadius) == 0x0006C8, "Member 'UGA_Hypersprint_C::CacheTurnRadius' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, CacheSlideLockoutTotalTime) == 0x0006D0, "Member 'UGA_Hypersprint_C::CacheSlideLockoutTotalTime' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, CacheSpeed) == 0x0006D8, "Member 'UGA_Hypersprint_C::CacheSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, CacheSlideStartVelocityScalar) == 0x0006E0, "Member 'UGA_Hypersprint_C::CacheSlideStartVelocityScalar' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, CacheJumpMultiplier) == 0x0006E8, "Member 'UGA_Hypersprint_C::CacheJumpMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, CacheStaminaStartCost) == 0x0006F0, "Member 'UGA_Hypersprint_C::CacheStaminaStartCost' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, GamepadUsesHoldInput) == 0x0006F8, "Member 'UGA_Hypersprint_C::GamepadUsesHoldInput' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, KeyboardUsesHoldInput) == 0x0006F9, "Member 'UGA_Hypersprint_C::KeyboardUsesHoldInput' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, CameraContext_Hypersprint) == 0x0006FC, "Member 'UGA_Hypersprint_C::CameraContext_Hypersprint' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, bIsAirborne) == 0x000704, "Member 'UGA_Hypersprint_C::bIsAirborne' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, WaitTask) == 0x000708, "Member 'UGA_Hypersprint_C::WaitTask' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, AirborneCancelTime) == 0x000710, "Member 'UGA_Hypersprint_C::AirborneCancelTime' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, bMoveInputIgnored) == 0x000718, "Member 'UGA_Hypersprint_C::bMoveInputIgnored' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, CancelInputTask) == 0x000720, "Member 'UGA_Hypersprint_C::CancelInputTask' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, StartHoldMontage) == 0x000728, "Member 'UGA_Hypersprint_C::StartHoldMontage' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, SuccessfullyStartedHypersprinting) == 0x000730, "Member 'UGA_Hypersprint_C::SuccessfullyStartedHypersprinting' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, HypersprintFullCooldown) == 0x000738, "Member 'UGA_Hypersprint_C::HypersprintFullCooldown' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, HypersprintReducedCooldown) == 0x000740, "Member 'UGA_Hypersprint_C::HypersprintReducedCooldown' has a wrong offset!");
static_assert(offsetof(UGA_Hypersprint_C, HypersprintCurvesMontage) == 0x000748, "Member 'UGA_Hypersprint_C::HypersprintCurvesMontage' has a wrong offset!");

}

