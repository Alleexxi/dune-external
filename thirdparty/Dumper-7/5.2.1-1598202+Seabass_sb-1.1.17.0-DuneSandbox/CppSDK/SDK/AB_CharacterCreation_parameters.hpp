#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_CharacterCreation

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AB_CharacterCreation.AB_CharacterCreation_C.SetIsCloseUpCamera
// 0x0004 (0x0004 - 0x0000)
struct AB_CharacterCreation_C_SetIsCloseUpCamera final
{
public:
	ECharacterCreationCameraFocus                 CallFunc_GetCurrentFocusTarget_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_CharacterCreation_C_SetIsCloseUpCamera) == 0x000001, "Wrong alignment on AB_CharacterCreation_C_SetIsCloseUpCamera");
static_assert(sizeof(AB_CharacterCreation_C_SetIsCloseUpCamera) == 0x000004, "Wrong size on AB_CharacterCreation_C_SetIsCloseUpCamera");
static_assert(offsetof(AB_CharacterCreation_C_SetIsCloseUpCamera, CallFunc_GetCurrentFocusTarget_ReturnValue) == 0x000000, "Member 'AB_CharacterCreation_C_SetIsCloseUpCamera::CallFunc_GetCurrentFocusTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_SetIsCloseUpCamera, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'AB_CharacterCreation_C_SetIsCloseUpCamera::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_SetIsCloseUpCamera, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'AB_CharacterCreation_C_SetIsCloseUpCamera::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_SetIsCloseUpCamera, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'AB_CharacterCreation_C_SetIsCloseUpCamera::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.SetCharToCameraDistance
// 0x0038 (0x0038 - 0x0000)
struct AB_CharacterCreation_C_SetCharToCameraDistance final
{
public:
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_CharacterCreation_C_SetCharToCameraDistance) == 0x000008, "Wrong alignment on AB_CharacterCreation_C_SetCharToCameraDistance");
static_assert(sizeof(AB_CharacterCreation_C_SetCharToCameraDistance) == 0x000038, "Wrong size on AB_CharacterCreation_C_SetCharToCameraDistance");
static_assert(offsetof(AB_CharacterCreation_C_SetCharToCameraDistance, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000000, "Member 'AB_CharacterCreation_C_SetCharToCameraDistance::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_SetCharToCameraDistance, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000018, "Member 'AB_CharacterCreation_C_SetCharToCameraDistance::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_SetCharToCameraDistance, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000030, "Member 'AB_CharacterCreation_C_SetCharToCameraDistance::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.SetBoneChain
// 0x0010 (0x0010 - 0x0000)
struct AB_CharacterCreation_C_SetBoneChain final
{
public:
	struct FModifyBoneChain                       BoneChain;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(AB_CharacterCreation_C_SetBoneChain) == 0x000008, "Wrong alignment on AB_CharacterCreation_C_SetBoneChain");
static_assert(sizeof(AB_CharacterCreation_C_SetBoneChain) == 0x000010, "Wrong size on AB_CharacterCreation_C_SetBoneChain");
static_assert(offsetof(AB_CharacterCreation_C_SetBoneChain, BoneChain) == 0x000000, "Member 'AB_CharacterCreation_C_SetBoneChain::BoneChain' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.SetBodyType
// 0x0002 (0x0002 - 0x0000)
struct AB_CharacterCreation_C_SetBodyType final
{
public:
	EDuneCharacterGender                          CallFunc_GetGender_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_CharacterCreation_C_SetBodyType) == 0x000001, "Wrong alignment on AB_CharacterCreation_C_SetBodyType");
static_assert(sizeof(AB_CharacterCreation_C_SetBodyType) == 0x000002, "Wrong size on AB_CharacterCreation_C_SetBodyType");
static_assert(offsetof(AB_CharacterCreation_C_SetBodyType, CallFunc_GetGender_ReturnValue) == 0x000000, "Member 'AB_CharacterCreation_C_SetBodyType::CallFunc_GetGender_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_SetBodyType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'AB_CharacterCreation_C_SetBodyType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.SetBlendAnims
// 0x0008 (0x0008 - 0x0000)
struct AB_CharacterCreation_C_SetBlendAnims final
{
public:
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_CharacterCreation_C_SetBlendAnims) == 0x000008, "Wrong alignment on AB_CharacterCreation_C_SetBlendAnims");
static_assert(sizeof(AB_CharacterCreation_C_SetBlendAnims) == 0x000008, "Wrong size on AB_CharacterCreation_C_SetBlendAnims");
static_assert(offsetof(AB_CharacterCreation_C_SetBlendAnims, CallFunc_MapRangeClamped_ReturnValue) == 0x000000, "Member 'AB_CharacterCreation_C_SetBlendAnims::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.Locomotion
// 0x0010 (0x0010 - 0x0000)
struct AB_CharacterCreation_C_Locomotion final
{
public:
	struct FPoseLink                              Locomotion_0;                                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_CharacterCreation_C_Locomotion) == 0x000008, "Wrong alignment on AB_CharacterCreation_C_Locomotion");
static_assert(sizeof(AB_CharacterCreation_C_Locomotion) == 0x000010, "Wrong size on AB_CharacterCreation_C_Locomotion");
static_assert(offsetof(AB_CharacterCreation_C_Locomotion, Locomotion_0) == 0x000000, "Member 'AB_CharacterCreation_C_Locomotion::Locomotion_0' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.ICharAnim_ModifyCameraForBone
// 0x0010 (0x0010 - 0x0000)
struct AB_CharacterCreation_C_ICharAnim_ModifyCameraForBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BoneUpdatedScale;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_CharacterCreation_C_ICharAnim_ModifyCameraForBone) == 0x000008, "Wrong alignment on AB_CharacterCreation_C_ICharAnim_ModifyCameraForBone");
static_assert(sizeof(AB_CharacterCreation_C_ICharAnim_ModifyCameraForBone) == 0x000010, "Wrong size on AB_CharacterCreation_C_ICharAnim_ModifyCameraForBone");
static_assert(offsetof(AB_CharacterCreation_C_ICharAnim_ModifyCameraForBone, BoneName) == 0x000000, "Member 'AB_CharacterCreation_C_ICharAnim_ModifyCameraForBone::BoneName' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ICharAnim_ModifyCameraForBone, BoneUpdatedScale) == 0x000008, "Member 'AB_CharacterCreation_C_ICharAnim_ModifyCameraForBone::BoneUpdatedScale' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.ICharAnim_CameraUpdated
// 0x0001 (0x0001 - 0x0000)
struct AB_CharacterCreation_C_ICharAnim_CameraUpdated final
{
public:
	ECharacterCreationCameraFocus                 CurrentCameraFocus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_CharacterCreation_C_ICharAnim_CameraUpdated) == 0x000001, "Wrong alignment on AB_CharacterCreation_C_ICharAnim_CameraUpdated");
static_assert(sizeof(AB_CharacterCreation_C_ICharAnim_CameraUpdated) == 0x000001, "Wrong size on AB_CharacterCreation_C_ICharAnim_CameraUpdated");
static_assert(offsetof(AB_CharacterCreation_C_ICharAnim_CameraUpdated, CurrentCameraFocus) == 0x000000, "Member 'AB_CharacterCreation_C_ICharAnim_CameraUpdated::CurrentCameraFocus' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.GetBoneChain
// 0x0010 (0x0010 - 0x0000)
struct AB_CharacterCreation_C_GetBoneChain final
{
public:
	struct FModifyBoneChain                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(AB_CharacterCreation_C_GetBoneChain) == 0x000008, "Wrong alignment on AB_CharacterCreation_C_GetBoneChain");
static_assert(sizeof(AB_CharacterCreation_C_GetBoneChain) == 0x000010, "Wrong size on AB_CharacterCreation_C_GetBoneChain");
static_assert(offsetof(AB_CharacterCreation_C_GetBoneChain, ReturnValue) == 0x000000, "Member 'AB_CharacterCreation_C_GetBoneChain::ReturnValue' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.ExecuteUbergraph_AB_CharacterCreation
// 0x0190 (0x0190 - 0x0000)
struct AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneTransformData                     CallFunc_Array_Get_Item;                           // 0x0010(0x0090)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_1;                              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_2;                              // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_3;                              // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDuneCharacterGender                          Temp_byte_Variable;                                // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacterCreationCharacter*        K2Node_DynamicCast_AsDune_Character_Creation_Character; // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_BoneName;                             // 0x0144(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_BoneUpdatedScale;                     // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModifyBoneChain                       K2Node_Event_BoneChain;                            // 0x0160(0x0010)(ConstParm)
	ECharacterCreationCameraFocus                 K2Node_Event_CurrentCameraFocus;                   // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_173[0x5];                                      // 0x0173(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CC_CharAnim_C>    K2Node_DynamicCast_AsBPI_CC_Char_Anim;             // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation) == 0x000010, "Wrong alignment on AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation");
static_assert(sizeof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation) == 0x000190, "Wrong size on AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, EntryPoint) == 0x000000, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::EntryPoint' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_Array_Get_Item) == 0x000010, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000A0, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_BreakTransform_Location) == 0x0000A8, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_BreakTransform_Rotation) == 0x0000C0, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_BreakTransform_Scale) == 0x0000D8, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_BreakVector_X) == 0x0000F0, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_BreakVector_Y) == 0x0000F8, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_BreakVector_Z) == 0x000100, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000108, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, Temp_real_Variable) == 0x00010C, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_Not_PreBool_ReturnValue) == 0x000110, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, Temp_real_Variable_1) == 0x000114, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, Temp_real_Variable_2) == 0x000118, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, Temp_real_Variable_3) == 0x00011C, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, Temp_byte_Variable) == 0x000120, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_Event_DeltaTimeX) == 0x000124, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_Select_Default) == 0x000128, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000130, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_DynamicCast_AsDune_Character_Creation_Character) == 0x000138, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_DynamicCast_AsDune_Character_Creation_Character' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_DynamicCast_bSuccess) == 0x000140, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_Event_BoneName) == 0x000144, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_Event_BoneName' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_Event_BoneUpdatedScale) == 0x000150, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_Event_BoneUpdatedScale' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_IsValid_ReturnValue) == 0x000158, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_Event_BoneChain) == 0x000160, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_Event_BoneChain' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_Event_CurrentCameraFocus) == 0x000170, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_Event_CurrentCameraFocus' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_SwitchEnum_CmpSuccess) == 0x000171, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000172, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_DynamicCast_AsBPI_CC_Char_Anim) == 0x000178, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_DynamicCast_AsBPI_CC_Char_Anim' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation, K2Node_DynamicCast_bSuccess_1) == 0x000188, "Member 'AB_CharacterCreation_C_ExecuteUbergraph_AB_CharacterCreation::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.Combat
// 0x0020 (0x0020 - 0x0000)
struct AB_CharacterCreation_C_Combat final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Combat_0;                                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_CharacterCreation_C_Combat) == 0x000008, "Wrong alignment on AB_CharacterCreation_C_Combat");
static_assert(sizeof(AB_CharacterCreation_C_Combat) == 0x000020, "Wrong size on AB_CharacterCreation_C_Combat");
static_assert(offsetof(AB_CharacterCreation_C_Combat, InPose) == 0x000000, "Member 'AB_CharacterCreation_C_Combat::InPose' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_Combat, Combat_0) == 0x000010, "Member 'AB_CharacterCreation_C_Combat::Combat_0' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.Cloth_kawaii
// 0x0028 (0x0028 - 0x0000)
struct AB_CharacterCreation_C_Cloth_kawaii final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          HasWeaponInHand;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              Cloth_kawaii_0;                                    // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_CharacterCreation_C_Cloth_kawaii) == 0x000008, "Wrong alignment on AB_CharacterCreation_C_Cloth_kawaii");
static_assert(sizeof(AB_CharacterCreation_C_Cloth_kawaii) == 0x000028, "Wrong size on AB_CharacterCreation_C_Cloth_kawaii");
static_assert(offsetof(AB_CharacterCreation_C_Cloth_kawaii, InPose) == 0x000000, "Member 'AB_CharacterCreation_C_Cloth_kawaii::InPose' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_Cloth_kawaii, HasWeaponInHand) == 0x000010, "Member 'AB_CharacterCreation_C_Cloth_kawaii::HasWeaponInHand' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_Cloth_kawaii, Cloth_kawaii_0) == 0x000018, "Member 'AB_CharacterCreation_C_Cloth_kawaii::Cloth_kawaii_0' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct AB_CharacterCreation_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_CharacterCreation_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on AB_CharacterCreation_C_BlueprintUpdateAnimation");
static_assert(sizeof(AB_CharacterCreation_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on AB_CharacterCreation_C_BlueprintUpdateAnimation");
static_assert(offsetof(AB_CharacterCreation_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'AB_CharacterCreation_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct AB_CharacterCreation_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_CharacterCreation_C_AnimGraph) == 0x000008, "Wrong alignment on AB_CharacterCreation_C_AnimGraph");
static_assert(sizeof(AB_CharacterCreation_C_AnimGraph) == 0x000010, "Wrong size on AB_CharacterCreation_C_AnimGraph");
static_assert(offsetof(AB_CharacterCreation_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'AB_CharacterCreation_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function AB_CharacterCreation.AB_CharacterCreation_C.Ability
// 0x0030 (0x0030 - 0x0000)
struct AB_CharacterCreation_C_Ability final
{
public:
	struct FPoseLink                              In_Pose;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              InPoseWithMontage;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Ability_0;                                         // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_CharacterCreation_C_Ability) == 0x000008, "Wrong alignment on AB_CharacterCreation_C_Ability");
static_assert(sizeof(AB_CharacterCreation_C_Ability) == 0x000030, "Wrong size on AB_CharacterCreation_C_Ability");
static_assert(offsetof(AB_CharacterCreation_C_Ability, In_Pose) == 0x000000, "Member 'AB_CharacterCreation_C_Ability::In_Pose' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_Ability, InPoseWithMontage) == 0x000010, "Member 'AB_CharacterCreation_C_Ability::InPoseWithMontage' has a wrong offset!");
static_assert(offsetof(AB_CharacterCreation_C_Ability, Ability_0) == 0x000020, "Member 'AB_CharacterCreation_C_Ability::Ability_0' has a wrong offset!");

}

