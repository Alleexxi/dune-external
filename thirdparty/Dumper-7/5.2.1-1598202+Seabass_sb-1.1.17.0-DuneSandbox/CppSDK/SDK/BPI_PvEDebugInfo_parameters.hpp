#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PvEDebugInfo

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "F_BP_PvEDebugInfo_structs.hpp"


namespace SDK::Params
{

// Function BPI_PvEDebugInfo.BPI_PvEDebugInfo_C.TryTriggerRooms
// 0x0010 (0x0010 - 0x0000)
struct BPI_PvEDebugInfo_C_TryTriggerRooms final
{
public:
	class ADunePlayerCharacter*                   Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          TargetInstigator;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PvEDebugInfo_C_TryTriggerRooms) == 0x000008, "Wrong alignment on BPI_PvEDebugInfo_C_TryTriggerRooms");
static_assert(sizeof(BPI_PvEDebugInfo_C_TryTriggerRooms) == 0x000010, "Wrong size on BPI_PvEDebugInfo_C_TryTriggerRooms");
static_assert(offsetof(BPI_PvEDebugInfo_C_TryTriggerRooms, Instigator) == 0x000000, "Member 'BPI_PvEDebugInfo_C_TryTriggerRooms::Instigator' has a wrong offset!");
static_assert(offsetof(BPI_PvEDebugInfo_C_TryTriggerRooms, TargetInstigator) == 0x000008, "Member 'BPI_PvEDebugInfo_C_TryTriggerRooms::TargetInstigator' has a wrong offset!");

// Function BPI_PvEDebugInfo.BPI_PvEDebugInfo_C.SetNPCComposition
// 0x0018 (0x0018 - 0x0000)
struct BPI_PvEDebugInfo_C_SetNPCComposition final
{
public:
	class ADunePlayerController*                  RequestingPlayer;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 NewComposition;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PvEDebugInfo_C_SetNPCComposition) == 0x000008, "Wrong alignment on BPI_PvEDebugInfo_C_SetNPCComposition");
static_assert(sizeof(BPI_PvEDebugInfo_C_SetNPCComposition) == 0x000018, "Wrong size on BPI_PvEDebugInfo_C_SetNPCComposition");
static_assert(offsetof(BPI_PvEDebugInfo_C_SetNPCComposition, RequestingPlayer) == 0x000000, "Member 'BPI_PvEDebugInfo_C_SetNPCComposition::RequestingPlayer' has a wrong offset!");
static_assert(offsetof(BPI_PvEDebugInfo_C_SetNPCComposition, NewComposition) == 0x000008, "Member 'BPI_PvEDebugInfo_C_SetNPCComposition::NewComposition' has a wrong offset!");

// Function BPI_PvEDebugInfo.BPI_PvEDebugInfo_C.ReceivePvEDescriptorLocation
// 0x0018 (0x0018 - 0x0000)
struct BPI_PvEDebugInfo_C_ReceivePvEDescriptorLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PvEDebugInfo_C_ReceivePvEDescriptorLocation) == 0x000008, "Wrong alignment on BPI_PvEDebugInfo_C_ReceivePvEDescriptorLocation");
static_assert(sizeof(BPI_PvEDebugInfo_C_ReceivePvEDescriptorLocation) == 0x000018, "Wrong size on BPI_PvEDebugInfo_C_ReceivePvEDescriptorLocation");
static_assert(offsetof(BPI_PvEDebugInfo_C_ReceivePvEDescriptorLocation, Location) == 0x000000, "Member 'BPI_PvEDebugInfo_C_ReceivePvEDescriptorLocation::Location' has a wrong offset!");

// Function BPI_PvEDebugInfo.BPI_PvEDebugInfo_C.ReceiveDebugInfo
// 0x0038 (0x0038 - 0x0000)
struct BPI_PvEDebugInfo_C_ReceiveDebugInfo final
{
public:
	struct FF_BP_PvEDebugInfo                     DebugInfo;                                         // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PvEDebugInfo_C_ReceiveDebugInfo) == 0x000008, "Wrong alignment on BPI_PvEDebugInfo_C_ReceiveDebugInfo");
static_assert(sizeof(BPI_PvEDebugInfo_C_ReceiveDebugInfo) == 0x000038, "Wrong size on BPI_PvEDebugInfo_C_ReceiveDebugInfo");
static_assert(offsetof(BPI_PvEDebugInfo_C_ReceiveDebugInfo, DebugInfo) == 0x000000, "Member 'BPI_PvEDebugInfo_C_ReceiveDebugInfo::DebugInfo' has a wrong offset!");

// Function BPI_PvEDebugInfo.BPI_PvEDebugInfo_C.IsOverridden
// 0x0018 (0x0018 - 0x0000)
struct BPI_PvEDebugInfo_C_IsOverridden final
{
public:
	bool                                          IsOverridden_0;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupCompName;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PvEDebugInfo_C_IsOverridden) == 0x000008, "Wrong alignment on BPI_PvEDebugInfo_C_IsOverridden");
static_assert(sizeof(BPI_PvEDebugInfo_C_IsOverridden) == 0x000018, "Wrong size on BPI_PvEDebugInfo_C_IsOverridden");
static_assert(offsetof(BPI_PvEDebugInfo_C_IsOverridden, IsOverridden_0) == 0x000000, "Member 'BPI_PvEDebugInfo_C_IsOverridden::IsOverridden_0' has a wrong offset!");
static_assert(offsetof(BPI_PvEDebugInfo_C_IsOverridden, GroupCompName) == 0x000008, "Member 'BPI_PvEDebugInfo_C_IsOverridden::GroupCompName' has a wrong offset!");

}

