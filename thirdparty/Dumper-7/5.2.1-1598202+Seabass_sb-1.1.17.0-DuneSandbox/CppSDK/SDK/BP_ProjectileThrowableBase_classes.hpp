#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ProjectileThrowableBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ProjectileThrowableBase.BP_ProjectileThrowableBase_C
// 0x0070 (0x1098 - 0x1028)
class ABP_ProjectileThrowableBase_C : public AProjectileBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x1030(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHazardAreaComponent*                   HazardArea_Comp;                                   // 0x1038(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        LandingAngleThreshold;                             // 0x1040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedGravityDefault;                              // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GravityReduction;                                  // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GravityStabilization;                              // 0x1058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GravityAmplification;                              // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWithinSuspensorField;                            // 0x1068(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1069[0x7];                                     // 0x1069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CooldownGE;                                        // 0x1070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        CachedCooldownFull;                                // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Uses_CT_Tuning;                                    // 0x1080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1081[0x7];                                     // 0x1081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TuningKeyName;                                     // 0x1088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void Apply_Real_Cooldown_GE_Internal();
	void ApplyRealCooldownGE();
	void CacheTuningValues();
	void ClientDrawServerPos(const struct FVector& position);
	void Event_EnterSuspensorFieldReduction();
	void Event_EnterSuspensorFieldStabilization();
	void EventEnterSuspensorFieldAmplification();
	void EventExitSuspensorField();
	void ExecuteUbergraph_BP_ProjectileThrowableBase(int32 EntryPoint);
	void Launch(const struct FVector& Velocity, const struct FTransform& Transform);
	void MulticastLaunch(const struct FVector& Velocity, const struct FTransform& Transform);
	void MulticastProjectileStopped();
	void OnProjectileBounced(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void OnProjectileStopped(const struct FHitResult& ImpactResult);
	void ReceiveBeginPlay();
	void UserConstructionScript();

	float GetProjectileRadius() const;
	bool IsValidLandingSpot(const struct FHitResult& Hit) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ProjectileThrowableBase_C">();
	}
	static class ABP_ProjectileThrowableBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ProjectileThrowableBase_C>();
	}
};
static_assert(alignof(ABP_ProjectileThrowableBase_C) == 0x000008, "Wrong alignment on ABP_ProjectileThrowableBase_C");
static_assert(sizeof(ABP_ProjectileThrowableBase_C) == 0x001098, "Wrong size on ABP_ProjectileThrowableBase_C");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, UberGraphFrame) == 0x001028, "Member 'ABP_ProjectileThrowableBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, RotatingMovement) == 0x001030, "Member 'ABP_ProjectileThrowableBase_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, HazardArea_Comp) == 0x001038, "Member 'ABP_ProjectileThrowableBase_C::HazardArea_Comp' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, LandingAngleThreshold) == 0x001040, "Member 'ABP_ProjectileThrowableBase_C::LandingAngleThreshold' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, CachedGravityDefault) == 0x001048, "Member 'ABP_ProjectileThrowableBase_C::CachedGravityDefault' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, GravityReduction) == 0x001050, "Member 'ABP_ProjectileThrowableBase_C::GravityReduction' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, GravityStabilization) == 0x001058, "Member 'ABP_ProjectileThrowableBase_C::GravityStabilization' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, GravityAmplification) == 0x001060, "Member 'ABP_ProjectileThrowableBase_C::GravityAmplification' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, IsWithinSuspensorField) == 0x001068, "Member 'ABP_ProjectileThrowableBase_C::IsWithinSuspensorField' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, CooldownGE) == 0x001070, "Member 'ABP_ProjectileThrowableBase_C::CooldownGE' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, CachedCooldownFull) == 0x001078, "Member 'ABP_ProjectileThrowableBase_C::CachedCooldownFull' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, Uses_CT_Tuning) == 0x001080, "Member 'ABP_ProjectileThrowableBase_C::Uses_CT_Tuning' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileThrowableBase_C, TuningKeyName) == 0x001088, "Member 'ABP_ProjectileThrowableBase_C::TuningKeyName' has a wrong offset!");

}

