#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Vehicle_Ground

#include "Basic.hpp"

#include "BPFL_Vehicle_Ground_classes.hpp"
#include "BPFL_Vehicle_Ground_parameters.hpp"


namespace SDK
{

// Function BPFL_Vehicle_Ground.BPFL_Vehicle_Ground_C.LoadUtilityModulePlaceholder
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADuneVehicle*                     OwnerVehicle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EVehicleModuleType                      ModuleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Ground_C::LoadUtilityModulePlaceholder(class ADuneVehicle* OwnerVehicle, EVehicleModuleType ModuleType, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Ground_C", "LoadUtilityModulePlaceholder");

	Params::BPFL_Vehicle_Ground_C_LoadUtilityModulePlaceholder Parms{};

	Parms.OwnerVehicle = OwnerVehicle;
	Parms.ModuleType = ModuleType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_Vehicle_Ground.BPFL_Vehicle_Ground_C.GetWheelRotation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVehicleEffectsDriverComponent&VehicleEffectsDriverComponent                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  SpeedMultiplier                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float*                                  WheelRotationFL                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  WheelRotationFR                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  WheelRotationRL                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 WheelRotationRR                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Ground_C::GetWheelRotation(const struct FVehicleEffectsDriverComponent& VehicleEffectsDriverComponent, double SpeedMultiplier, class UObject* __WorldContext, float* WheelRotationFL, float* WheelRotationFR, float* WheelRotationRL, double* WheelRotationRR)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Ground_C", "GetWheelRotation");

	Params::BPFL_Vehicle_Ground_C_GetWheelRotation Parms{};

	Parms.VehicleEffectsDriverComponent = std::move(VehicleEffectsDriverComponent);
	Parms.SpeedMultiplier = SpeedMultiplier;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (WheelRotationFL != nullptr)
		*WheelRotationFL = Parms.WheelRotationFL;

	if (WheelRotationFR != nullptr)
		*WheelRotationFR = Parms.WheelRotationFR;

	if (WheelRotationRL != nullptr)
		*WheelRotationRL = Parms.WheelRotationRL;

	if (WheelRotationRR != nullptr)
		*WheelRotationRR = Parms.WheelRotationRR;
}


// Function BPFL_Vehicle_Ground.BPFL_Vehicle_Ground_C.GetQuicksandSinkDepth
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ADuneWheeledVehicle*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 CurrentSinkDepth                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Ground_C::GetQuicksandSinkDepth(class ADuneWheeledVehicle* Target, class UObject* __WorldContext, double* CurrentSinkDepth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Ground_C", "GetQuicksandSinkDepth");

	Params::BPFL_Vehicle_Ground_C_GetQuicksandSinkDepth Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CurrentSinkDepth != nullptr)
		*CurrentSinkDepth = Parms.CurrentSinkDepth;
}


// Function BPFL_Vehicle_Ground.BPFL_Vehicle_Ground_C.GetGroundVehicleVariables
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IPosseseablePawnInterface>OwnerVehicle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVehicleEffectsDriverComponent&VehicleEffectsDriverComponent                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 Forward                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Steering                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  HorizontalSpeed                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  HorizontalDirection                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bIsPossessed                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bIsInAir                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bIsBoosting                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Ground_C::GetGroundVehicleVariables(TScriptInterface<class IPosseseablePawnInterface> OwnerVehicle, const struct FVehicleEffectsDriverComponent& VehicleEffectsDriverComponent, class UObject* __WorldContext, double* Forward, double* Steering, float* HorizontalSpeed, float* HorizontalDirection, bool* bIsPossessed, bool* bIsInAir, bool* bIsBoosting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Ground_C", "GetGroundVehicleVariables");

	Params::BPFL_Vehicle_Ground_C_GetGroundVehicleVariables Parms{};

	Parms.OwnerVehicle = OwnerVehicle;
	Parms.VehicleEffectsDriverComponent = std::move(VehicleEffectsDriverComponent);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Forward != nullptr)
		*Forward = Parms.Forward;

	if (Steering != nullptr)
		*Steering = Parms.Steering;

	if (HorizontalSpeed != nullptr)
		*HorizontalSpeed = Parms.HorizontalSpeed;

	if (HorizontalDirection != nullptr)
		*HorizontalDirection = Parms.HorizontalDirection;

	if (bIsPossessed != nullptr)
		*bIsPossessed = Parms.bIsPossessed;

	if (bIsInAir != nullptr)
		*bIsInAir = Parms.bIsInAir;

	if (bIsBoosting != nullptr)
		*bIsBoosting = Parms.bIsBoosting;
}


// Function BPFL_Vehicle_Ground.BPFL_Vehicle_Ground_C.ControlRigIKSolver
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDuneVehicleAnimInstance*         Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  TraceDistance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TreadSocket                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TreadOffset                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         TreadAimTarget                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         TreadRotationTarget                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_Vehicle_Ground_C::ControlRigIKSolver(class UDuneVehicleAnimInstance* Target, double TraceDistance, class FName TreadSocket, double TreadOffset, class UObject* __WorldContext, struct FVector* TreadAimTarget, struct FVector* TreadRotationTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_Vehicle_Ground_C", "ControlRigIKSolver");

	Params::BPFL_Vehicle_Ground_C_ControlRigIKSolver Parms{};

	Parms.Target = Target;
	Parms.TraceDistance = TraceDistance;
	Parms.TreadSocket = TreadSocket;
	Parms.TreadOffset = TreadOffset;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (TreadAimTarget != nullptr)
		*TreadAimTarget = std::move(Parms.TreadAimTarget);

	if (TreadRotationTarget != nullptr)
		*TreadRotationTarget = std::move(Parms.TreadRotationTarget);
}

}

