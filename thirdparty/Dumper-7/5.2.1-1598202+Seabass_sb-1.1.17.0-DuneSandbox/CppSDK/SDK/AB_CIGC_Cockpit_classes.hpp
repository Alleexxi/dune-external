#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_CIGC_Cockpit

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_CIGC_Cockpit.AB_CIGC_Cockpit_C
// 0x05E0 (0x0B00 - 0x0520)
class UAB_CIGC_Cockpit_C final : public UWheeledVehicleAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0520(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0528(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0530(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0538(0x0020)()
	uint8                                         Pad_558[0x8];                                      // 0x0558(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0560(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x05C0(0x0060)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0620(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0668(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0688(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x06D0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x06F0(0x00C8)()
	uint8                                         Pad_7B8[0x8];                                      // 0x07B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x07C0(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0820(0x0060)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0880(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x08C8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x08E8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0930(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0950(0x00C8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0A18(0x00E0)()
	bool                                          bDoor_L_Open;                                      // 0x0AF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDoor_R_Open;                                      // 0x0AF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_AB_CIGC_Cockpit(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_CIGC_Cockpit_C">();
	}
	static class UAB_CIGC_Cockpit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_CIGC_Cockpit_C>();
	}
};
static_assert(alignof(UAB_CIGC_Cockpit_C) == 0x000010, "Wrong alignment on UAB_CIGC_Cockpit_C");
static_assert(sizeof(UAB_CIGC_Cockpit_C) == 0x000B00, "Wrong size on UAB_CIGC_Cockpit_C");
static_assert(offsetof(UAB_CIGC_Cockpit_C, UberGraphFrame) == 0x000520, "Member 'UAB_CIGC_Cockpit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimBlueprintExtension_PropertyAccess) == 0x000528, "Member 'UAB_CIGC_Cockpit_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimBlueprintExtension_Base) == 0x000530, "Member 'UAB_CIGC_Cockpit_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_Root) == 0x000538, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_TransitionResult_3) == 0x000560, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_TransitionResult_2) == 0x0005C0, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_SequencePlayer_3) == 0x000620, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_StateResult_3) == 0x000668, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_SequencePlayer_2) == 0x000688, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_StateResult_2) == 0x0006D0, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_StateMachine_1) == 0x0006F0, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_TransitionResult_1) == 0x0007C0, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_TransitionResult) == 0x000820, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_SequencePlayer_1) == 0x000880, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_StateResult_1) == 0x0008C8, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_SequencePlayer) == 0x0008E8, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_StateResult) == 0x000930, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_StateMachine) == 0x000950, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, AnimGraphNode_LayeredBoneBlend) == 0x000A18, "Member 'UAB_CIGC_Cockpit_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, bDoor_L_Open) == 0x000AF8, "Member 'UAB_CIGC_Cockpit_C::bDoor_L_Open' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_Cockpit_C, bDoor_R_Open) == 0x000AF9, "Member 'UAB_CIGC_Cockpit_C::bDoor_R_Open' has a wrong offset!");

}

