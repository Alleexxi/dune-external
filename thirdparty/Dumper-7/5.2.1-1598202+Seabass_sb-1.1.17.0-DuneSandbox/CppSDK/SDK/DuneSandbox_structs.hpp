#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DuneSandbox

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UE4Dreamworld_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AIModule_structs.hpp"
#include "NetCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "TiledLandscape_structs.hpp"
#include "PersistenceCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "MovieScene_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CustomizableObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "FcAudio_structs.hpp"
#include "CinematicCamera_structs.hpp"
#include "DLSSBlueprint_structs.hpp"
#include "XeSSBlueprint_structs.hpp"
#include "StreamlineReflexBlueprint_structs.hpp"
#include "Slate_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum DuneSandbox.ELodLevel
// NumValues: 0x0006
enum class ELodLevel : uint8
{
	LOD_0                                    = 0,
	LOD_1                                    = 1,
	LOD_2                                    = 2,
	LOD_3                                    = 3,
	LOD_Max                                  = 4,
	LOD_Uninitialized                        = 5,
};

// Enum DuneSandbox.EControlStatus
// NumValues: 0x0005
enum class EControlStatus : uint8
{
	Uninitialized                            = 0,
	NoControl                                = 1,
	NPCControl                               = 2,
	PlayerControl                            = 3,
	EControlStatus_MAX                       = 4,
};

// Enum DuneSandbox.EDespawnConditionFlags
// NumValues: 0x0005
enum class EDespawnConditionFlags : uint8
{
	None                                     = 0,
	QuickResetEvent                          = 1,
	QuickResetLOD                            = 2,
	VictoryEvent                             = 4,
	EDespawnConditionFlags_MAX               = 5,
};

// Enum DuneSandbox.EModularAiBehaviorState
// NumValues: 0x0004
enum class EModularAiBehaviorState : uint8
{
	Active                                   = 0,
	Inactive                                 = 1,
	InUse                                    = 2,
	EModularAiBehaviorState_MAX              = 3,
};

// Enum DuneSandbox.ETargetingType
// NumValues: 0x0004
enum class ETargetingType : uint8
{
	OnlyEnemies                              = 0,
	OnlyAllies                               = 1,
	BothEnemiesAndAllies                     = 2,
	ETargetingType_MAX                       = 3,
};

// Enum DuneSandbox.EHUDUnlockLevel
// NumValues: 0x000C
enum class EHUDUnlockLevel : uint8
{
	None                                     = 0,
	Hydration                                = 1,
	Health                                   = 2,
	Stamina                                  = 4,
	CommuninetCompassGoldenPathAndPower      = 8,
	Journey                                  = 16,
	PlayerMenu                               = 32,
	SpiceDream                               = 64,
	EverythingElse                           = 128,
	Full                                     = 255,
	FullExceptSpiceDream                     = 191,
	EHUDUnlockLevel_MAX                      = 256,
};

// Enum DuneSandbox.EHUDMode
// NumValues: 0x0017
enum class EHUDMode : uint8
{
	Default                                  = 0,
	Status                                   = 1,
	Overlayed                                = 2,
	MentatVision                             = 3,
	Idle                                     = 4,
	Inactive                                 = 5,
	Scope                                    = 6,
	Binocular                                = 7,
	ChallengeRoomCinematic                   = 8,
	MARKETING_AbilityHUD                     = 16,
	MARKETING_MentatHUD                      = 17,
	MARKETING_Journey                        = 18,
	MARKETING_Compass                        = 19,
	MARKETING_PickupNotifications            = 20,
	MARKETING_HUDInputHints                  = 21,
	MARKETING_WeaponStatus                   = 22,
	MARKETING_Hotbar                         = 23,
	MARKETING_StatusEffects                  = 24,
	MARKETING_ErrorNotifications             = 25,
	MARKETING_SurvivalBarsGroup              = 26,
	MARKETING_InteractionHints               = 27,
	Count                                    = 28,
	EHUDMode_MAX                             = 29,
};

// Enum DuneSandbox.EPlayerMenuScreen
// NumValues: 0x0010
enum class EPlayerMenuScreen : uint8
{
	None                                     = 0,
	Map                                      = 1,
	Inventory                                = 2,
	Crafting                                 = 3,
	Communinet                               = 4,
	Social                                   = 5,
	Journey                                  = 6,
	Exchange                                 = 7,
	Contracts                                = 8,
	TechTree                                 = 9,
	SkillTree                                = 10,
	Permissions                              = 11,
	Guilds                                   = 12,
	Customization                            = 13,
	Landsraad                                = 14,
	EPlayerMenuScreen_MAX                    = 15,
};

// Enum DuneSandbox.EMetaDialogButtonId
// NumValues: 0x0006
enum class EMetaDialogButtonId : uint8
{
	ConfirmButton                            = 0,
	ExtraButton1                             = 1,
	CancelButton                             = 2,
	Count                                    = 3,
	NoButton                                 = 4,
	EMetaDialogButtonId_MAX                  = 5,
};

// Enum DuneSandbox.EHUDModeTrigger
// NumValues: 0x0015
enum class EHUDModeTrigger : uint8
{
	NONE                                     = 0,
	HealthChanged                            = 1,
	ShieldChanged                            = 2,
	StaminaChanged                           = 3,
	PowerChanged                             = 4,
	StateChanged                             = 5,
	PrimaryHandheldAction                    = 6,
	SecondaryHandheldAction                  = 7,
	AbilityUseAttempt                        = 8,
	WeaponHotkeyPressed                      = 9,
	CycleLoadout                             = 10,
	PickedUpAnything                         = 11,
	RadialWheelClosed                        = 12,
	ReturnFromStatusUI                       = 13,
	ToastNotification                        = 14,
	ErrorMessageNotification                 = 15,
	ServiceMessageNotification               = 16,
	TutorialActivated                        = 17,
	LogOffTimer                              = 18,
	InteractiveNotification                  = 19,
	EHUDModeTrigger_MAX                      = 20,
};

// Enum DuneSandbox.EWindowWidgets
// NumValues: 0x004B
enum class EWindowWidgets : uint8
{
	None                                     = 0,
	AccessCodeEntry                          = 1,
	AccessInfoMenu                           = 2,
	AdminTeleportMap                         = 3,
	AdminPanel                               = 4,
	AlignmentDebug                           = 5,
	BattlegroupSelectMenu                    = 6,
	MoviePlayer                              = 7,
	SkipCinematics                           = 8,
	BuySellQuantityDialog                    = 9,
	CCMetaDialog                             = 10,
	CharacterCreation                        = 11,
	CharacterSelectMenu                      = 12,
	ClaimRewardsWindow                       = 13,
	TextChatWindow                           = 14,
	CommuninetMenuChannelWidget              = 15,
	CommuninetMenuRadioStationWidget         = 16,
	CommuninetMenuTextMessage                = 17,
	CommuninetMenuTuningCellWidget           = 18,
	CommuninetOverlayTextMessage             = 19,
	CommuninetSubMenu                        = 20,
	ContractDeliveryBoxWindow                = 21,
	ContractHandInTargetWindow               = 22,
	ContractTakeRewardWindow                 = 23,
	ContractsBoardWindow                     = 24,
	CursorPopUp                              = 25,
	DeathWindow                              = 26,
	Debug_KeypadActions                      = 27,
	Debug_WorldInspector                     = 28,
	Dialogue                                 = 29,
	DirectionalScanWidget                    = 30,
	DuneExchangeTerminalWindow               = 31,
	EmoteRadialMenu                          = 32,
	EscapeMenu                               = 33,
	GammaConfigurationMenu                   = 34,
	NPCDebug                                 = 35,
	InGameMenu                               = 36,
	InspectMenu                              = 37,
	InstantRequest                           = 38,
	InteractionFeedback                      = 39,
	InteractionHintWindow                    = 40,
	Landsraad                                = 41,
	LandsraadDebugUI                         = 42,
	LandsraadDeliveryWindow                  = 43,
	LandsraadDialog                          = 44,
	LongRangeScanInViewWidget                = 45,
	LongRangeScanner                         = 46,
	LootContainer                            = 47,
	MainMenu                                 = 48,
	MetaDialog                               = 49,
	WeaponMod                                = 50,
	P2pTradeMessage                          = 51,
	P2pTrading                               = 52,
	PlaceableWindowMenu                      = 53,
	PlayerMenu                               = 54,
	PopupWidget                              = 55,
	PvEDebugInfo                             = 56,
	RadialMenu                               = 57,
	RadialScanWidget                         = 58,
	ServerMenu                               = 59,
	Settings                                 = 60,
	SkillsMenuRespec                         = 61,
	SocialPlayerMenu                         = 62,
	SolarisTransfer                          = 63,
	SpawnBeaconMapMarker                     = 64,
	TechTreeDialog                           = 65,
	TutorialVideos                           = 66,
	VehicleInventory                         = 67,
	VehicleManagement                        = 68,
	VehicleLog                               = 69,
	VendingMachine                           = 70,
	Banned                                   = 71,
	Credits                                  = 72,
	JoinRequestQueue                         = 73,
	EWindowWidgets_MAX                       = 74,
};

// Enum DuneSandbox.EWindowLayerStacks
// NumValues: 0x0006
enum class EWindowLayerStacks : uint8
{
	None                                     = 0,
	Debug                                    = 1,
	Menu                                     = 2,
	System                                   = 3,
	Count                                    = 4,
	EWindowLayerStacks_MAX                   = 5,
};

// Enum DuneSandbox.EFailedTravelUserFacingReason
// NumValues: 0x000A
enum class EFailedTravelUserFacingReason : uint8
{
	GenericError                             = 0,
	PassengerNotAllowed                      = 1,
	HarnessedVehicleNotAllowed               = 2,
	InvalidPasswordOrToken                   = 3,
	AlreadyAVisitorInThisDimension           = 4,
	NoReturnInfoFoundInDatabase              = 5,
	VisitingFromMapWithVisitingDisabled      = 6,
	TargetMapWithVisitingDisabled            = 7,
	SameDimensionAsTargetPlayer              = 8,
	EFailedTravelUserFacingReason_MAX        = 9,
};

// Enum DuneSandbox.EGUIControlMode
// NumValues: 0x0003
enum class EGUIControlMode : uint8
{
	Mouse                                    = 0,
	Gamepad                                  = 1,
	EGUIControlMode_MAX                      = 2,
};

// Enum DuneSandbox.EPlayerSpawnResult
// NumValues: 0x000C
enum class EPlayerSpawnResult : uint8
{
	Success                                  = 0,
	InvalidLocation                          = 1,
	IncorrectMap                             = 2,
	IncorrectDimension                       = 3,
	Disallowed                               = 4,
	NoPermission                             = 5,
	Error                                    = 6,
	PvpCooldown                              = 7,
	FailedToTravel                           = 8,
	CannotReachServer                        = 9,
	TimedOut                                 = 10,
	EPlayerSpawnResult_MAX                   = 11,
};

// Enum DuneSandbox.EInputComponent
// NumValues: 0x0005
enum class EInputComponent : uint8
{
	None                                     = 0,
	P2pTradeRequest                          = 1,
	InstantRequest                           = 2,
	COUNT                                    = 3,
	EInputComponent_MAX                      = 4,
};

// Enum DuneSandbox.ECheatMode
// NumValues: 0x000C
enum class ECheatMode : uint8
{
	God                                      = 0,
	DemiGod                                  = 1,
	DisableDehydration                       = 2,
	DisableStamina                           = 3,
	DisablePower                             = 4,
	InfiniteAmmo                             = 5,
	InfiniteAmmoWithReloading                = 6,
	InvisibleToNpc                           = 7,
	DisableSpiceAddiction                    = 8,
	InfiniteDurability                       = 9,
	NoAbilityCost                            = 10,
	Max                                      = 11,
};

// Enum DuneSandbox.ENPCCombatAttribute
// NumValues: 0x0007
enum class ENPCCombatAttribute : uint8
{
	SightRadius                              = 0,
	LoseSightRadius                          = 1,
	PeripheralVisionAngleDegrees             = 2,
	VerticalVisionAngle                      = 3,
	HearingRange                             = 4,
	Count                                    = 5,
	ENPCCombatAttribute_MAX                  = 6,
};

// Enum DuneSandbox.ENPCCombatData
// NumValues: 0x0008
enum class ENPCCombatData : uint8
{
	Aggressiveness                           = 0,
	Mobility                                 = 1,
	Health                                   = 2,
	TargetThresholds                         = 3,
	PreferredDistanceToTargetMin             = 4,
	PreferredDistanceToTargetMax             = 5,
	Count                                    = 6,
	ENPCCombatData_MAX                       = 7,
};

// Enum DuneSandbox.EVehicleModuleType
// NumValues: 0x001B
enum class EVehicleModuleType : uint8
{
	Uninitialized                            = 0,
	Chassis                                  = 1,
	BodyHull                                 = 2,
	CockpitHull                              = 3,
	Locomotion                               = 4,
	Generator                                = 5,
	Perk                                     = 6,
	UtilitySlot1                             = 7,
	UtilitySlot2                             = 8,
	Engine                                   = 9,
	Locomotion2                              = 10,
	Locomotion3                              = 11,
	Locomotion4                              = 12,
	Locomotion5                              = 13,
	Locomotion6                              = 14,
	Locomotion7                              = 15,
	Locomotion8                              = 16,
	Locomotion9                              = 17,
	Locomotion10                             = 18,
	BodyHull2                                = 19,
	BodyHull3                                = 20,
	BodyHull4                                = 21,
	BodyHull5                                = 22,
	UtilitySlot3                             = 23,
	UtilitySlot4                             = 24,
	UtilitySlot5                             = 25,
	EVehicleModuleType_MAX                   = 26,
};

// Enum DuneSandbox.ECoriolisHappenedWhileOffline
// NumValues: 0x0004
enum class ECoriolisHappenedWhileOffline : uint8
{
	Unknown                                  = 0,
	Happened                                 = 1,
	NotHappened                              = 2,
	ECoriolisHappenedWhileOffline_MAX        = 3,
};

// Enum DuneSandbox.EKnockbackType
// NumValues: 0x0009
enum class EKnockbackType : uint8
{
	NONE                                     = 0,
	Light                                    = 1,
	Stumble                                  = 2,
	Stagger                                  = 3,
	Launch                                   = 4,
	Stabbed                                  = 5,
	Slashed                                  = 6,
	BlockBounce                              = 7,
	EKnockbackType_MAX                       = 8,
};

// Enum DuneSandbox.EKnockbackHitRotation
// NumValues: 0x0003
enum class EKnockbackHitRotation : uint8
{
	Clockwise                                = 0,
	CounterClockwise                         = 1,
	EKnockbackHitRotation_MAX                = 2,
};

// Enum DuneSandbox.EVehicleModel
// NumValues: 0x000C
enum class EVehicleModel : uint8
{
	Uninitialized                            = 0,
	Sandbike                                 = 1,
	Sandcrawler                              = 2,
	LightOrnithopter                         = 3,
	HeavyOrnithopter                         = 4,
	Carryall                                 = 5,
	Tank                                     = 6,
	Seeker                                   = 7,
	MediumOrnithopter                        = 8,
	TransportOrnithopter                     = 9,
	Buggy                                    = 10,
	EVehicleModel_MAX                        = 11,
};

// Enum DuneSandbox.EOrnithopterFlightMode
// NumValues: 0x0009
enum class EOrnithopterFlightMode : uint8
{
	Invalid                                  = 0,
	Landed                                   = 1,
	StandBy                                  = 2,
	DragonFly                                = 3,
	Vulture                                  = 4,
	Malfunction                              = 5,
	Dive                                     = 6,
	Dodge                                    = 7,
	EOrnithopterFlightMode_MAX               = 8,
};

// Enum DuneSandbox.EVehicleBrand
// NumValues: 0x0007
enum class EVehicleBrand : uint8
{
	Uninitialized                            = 0,
	Atreides                                 = 1,
	Harkonnen                                = 2,
	Smugglers                                = 3,
	Imperium                                 = 4,
	CHOAM                                    = 5,
	EVehicleBrand_MAX                        = 6,
};

// Enum DuneSandbox.EVehicleClass
// NumValues: 0x0003
enum class EVehicleClass : uint8
{
	GroundVehicle                            = 0,
	FlyingVehicle                            = 1,
	EVehicleClass_MAX                        = 2,
};

// Enum DuneSandbox.EVehicleModuleClass
// NumValues: 0x000A
enum class EVehicleModuleClass : uint8
{
	None                                     = 0,
	Chassis                                  = 1,
	Body                                     = 2,
	Cockpit                                  = 3,
	Generator                                = 4,
	Engine                                   = 5,
	Locomotion                               = 6,
	Utility                                  = 7,
	Perk                                     = 8,
	EVehicleModuleClass_MAX                  = 9,
};

// Enum DuneSandbox.EVehicleShelterState
// NumValues: 0x0004
enum class EVehicleShelterState : uint8
{
	Unsheltered                              = 0,
	Sheltered                                = 1,
	ShelteredAndInBase                       = 2,
	EVehicleShelterState_MAX                 = 3,
};

// Enum DuneSandbox.EShieldStateChangeReason
// NumValues: 0x000D
enum class EShieldStateChangeReason : uint8
{
	LOD                                      = 0,
	BeginPlay                                = 1,
	ManualToggle                             = 2,
	AutoToggle                               = 3,
	ADS                                      = 4,
	Shooting                                 = 5,
	EnableToggle                             = 6,
	PowerDepleted                            = 7,
	PowerRecharged                           = 8,
	ItemBroken                               = 9,
	AbilityEnd                               = 10,
	InitialSetup                             = 11,
	EShieldStateChangeReason_MAX             = 12,
};

// Enum DuneSandbox.EVehicleAttachModuleFailureReason
// NumValues: 0x0006
enum class EVehicleAttachModuleFailureReason : uint8
{
	None                                     = 0,
	GroupTagMismatch                         = 1,
	MissingParent                            = 2,
	MissingRequiredSlot                      = 3,
	MissingRequiredModule                    = 4,
	EVehicleAttachModuleFailureReason_MAX    = 5,
};

// Enum DuneSandbox.EInventoryItemAddReason
// NumValues: 0x0030
enum class EInventoryItemAddReason : uint8
{
	NA                                       = 0,
	Cheat                                    = 1,
	PickedUp                                 = 2,
	DialogueGiveItem                         = 3,
	DialogueRemoveItem                       = 4,
	ItemItemsGiver                           = 5,
	PainboxDialogueAnswers                   = 6,
	Sinkchart                                = 7,
	ResourceYield                            = 8,
	ResourceJackpot                          = 9,
	Gather                                   = 10,
	Loot                                     = 11,
	Drop                                     = 12,
	Craft                                    = 13,
	Refine                                   = 14,
	Repair                                   = 15,
	ConsumeFuel                              = 16,
	Build                                    = 17,
	Store                                    = 18,
	Consume                                  = 19,
	Trade                                    = 20,
	Exchange                                 = 21,
	Transfer                                 = 22,
	Equip                                    = 23,
	StackMerge                               = 24,
	StackSplit                               = 25,
	ReloadingWeapon                          = 26,
	AddDefault                               = 27,
	NpcDroppedLoot                           = 28,
	Death                                    = 29,
	Contract                                 = 30,
	Landsraad                                = 31,
	SchematicRecipe                          = 32,
	Taxation                                 = 33,
	Vehicle                                  = 34,
	Shortcut                                 = 35,
	Spawn                                    = 36,
	Test                                     = 37,
	TechTreeUnlock                           = 38,
	Recycle                                  = 39,
	SkillTreeUnlock                          = 40,
	JourneyReward                            = 41,
	MoveFuelToGenerator                      = 42,
	AutoScript                               = 43,
	Claim                                    = 44,
	Deposit                                  = 45,
	Withdraw                                 = 46,
	EInventoryItemAddReason_MAX              = 47,
};

// Enum DuneSandbox.EPermissionLevel
// NumValues: 0x0009
enum class EPermissionLevel : uint8
{
	NoAccess                                 = 0,
	Owner                                    = 1,
	CoOwner                                  = 2,
	Associate                                = 3,
	Guild                                    = 4,
	Public                                   = 5,
	ActorNotRegisteredInSystem               = 100,
	Dynamic                                  = 101,
	EPermissionLevel_MAX                     = 102,
};

// Enum DuneSandbox.EVehicleKeepAwakeReason
// NumValues: 0x0009
enum class EVehicleKeepAwakeReason : uint8
{
	None                                     = 0,
	Driver                                   = 1,
	Harness                                  = 2,
	InAir                                    = 4,
	Blueprint                                = 8,
	Passenger                                = 16,
	InLDV                                    = 32,
	InQuicksand                              = 64,
	EVehicleKeepAwakeReason_MAX              = 65,
};

// Enum DuneSandbox.EVehicleAbandonedDurabilityDecay
// NumValues: 0x0004
enum class EVehicleAbandonedDurabilityDecay : uint8
{
	None                                     = 0,
	Default                                  = 1,
	TravelVolume                             = 2,
	EVehicleAbandonedDurabilityDecay_MAX     = 3,
};

// Enum DuneSandbox.EVehicleInputFlag
// NumValues: 0x000C
enum class EVehicleInputFlag : uint16
{
	None                                     = 0,
	XAxis                                    = 1,
	YAxis                                    = 2,
	ZAxis                                    = 4,
	Vulture                                  = 8,
	Brake                                    = 16,
	ControlVectorXAxis                       = 32,
	ControlVectorYAxis                       = 64,
	ControlVectorZAxis                       = 128,
	Boost                                    = 256,
	AllAxes                                  = 231,
	EVehicleInputFlag_MAX                    = 257,
};

// Enum DuneSandbox.ESpiceVisionActorType
// NumValues: 0x0004
enum class ESpiceVisionActorType : uint8
{
	SingleCharacter                          = 0,
	StaticMeshActor                          = 1,
	CustomScriptedActor                      = 2,
	ESpiceVisionActorType_MAX                = 3,
};

// Enum DuneSandbox.EHealthStateTransition
// NumValues: 0x0007
enum class EHealthStateTransition : uint8
{
	None                                     = 0,
	WaitEnterDownButNotOut                   = 1,
	DownButNotOutEntered                     = 2,
	DownButNotOutCompleted                   = 3,
	Died                                     = 4,
	Restored                                 = 5,
	EHealthStateTransition_MAX               = 6,
};

// Enum DuneSandbox.EBurrowDartState
// NumValues: 0x0004
enum class EBurrowDartState : uint8
{
	Burrow                                   = 0,
	Penetrate                                = 1,
	Drop                                     = 2,
	EBurrowDartState_MAX                     = 3,
};

// Enum DuneSandbox.EDamageImmunityHitPredictionType
// NumValues: 0x0003
enum class EDamageImmunityHitPredictionType : uint8
{
	Melee                                    = 0,
	HitscanBullet                            = 1,
	EDamageImmunityHitPredictionType_MAX     = 2,
};

// Enum DuneSandbox.EPlayerInviteState
// NumValues: 0x0006
enum class EPlayerInviteState : uint8
{
	Unknown                                  = 0,
	Accepted                                 = 1,
	PendingInbound                           = 2,
	PendingOutbound                          = 3,
	Blocked                                  = 4,
	EPlayerInviteState_MAX                   = 5,
};

// Enum DuneSandbox.EPlayerPresenceState
// NumValues: 0x0004
enum class EPlayerPresenceState : uint8
{
	Unknown                                  = 0,
	Online                                   = 1,
	Offline                                  = 2,
	EPlayerPresenceState_MAX                 = 3,
};

// Enum DuneSandbox.ECharacterCreationCameraFocus
// NumValues: 0x0007
enum class ECharacterCreationCameraFocus : uint8
{
	None                                     = 0,
	Head                                     = 1,
	Body                                     = 2,
	Eyes                                     = 3,
	UpperBody                                = 4,
	LowerBody                                = 5,
	ECharacterCreationCameraFocus_MAX        = 6,
};

// Enum DuneSandbox.ECombatLocomotionState
// NumValues: 0x0004
enum class ECombatLocomotionState : uint8
{
	Calm                                     = 0,
	Ready                                    = 1,
	Aim                                      = 2,
	ECombatLocomotionState_MAX               = 3,
};

// Enum DuneSandbox.EDuneAiAttackResult
// NumValues: 0x0003
enum class EDuneAiAttackResult : uint8
{
	Failed                                   = 0,
	Finished                                 = 1,
	EDuneAiAttackResult_MAX                  = 2,
};

// Enum DuneSandbox.EScrollBoxEdge
// NumValues: 0x0005
enum class EScrollBoxEdge : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	Left                                     = 2,
	Right                                    = 3,
	EScrollBoxEdge_MAX                       = 4,
};

// Enum DuneSandbox.EDunePrivileges
// NumValues: 0x0003
enum class EDunePrivileges : uint8
{
	User                                     = 0,
	Admin                                    = 255,
	EDunePrivileges_MAX                      = 256,
};

// Enum DuneSandbox.ESandwormAttackDifficultyGroup
// NumValues: 0x0005
enum class ESandwormAttackDifficultyGroup : uint8
{
	Easy                                     = 0,
	Medium                                   = 1,
	Hard                                     = 2,
	Death                                    = 3,
	ESandwormAttackDifficultyGroup_MAX       = 4,
};

// Enum DuneSandbox.ESandwormAnimationType
// NumValues: 0x0006
enum class ESandwormAnimationType : uint8
{
	None                                     = 0,
	HorizontalAttack                         = 1,
	VerticalAttack                           = 2,
	Breach                                   = 3,
	Idle                                     = 4,
	ESandwormAnimationType_MAX               = 5,
};

// Enum DuneSandbox.ESandwormSteeringMode
// NumValues: 0x0003
enum class ESandwormSteeringMode : uint8
{
	Roam                                     = 0,
	Attack                                   = 1,
	ESandwormSteeringMode_MAX                = 2,
};

// Enum DuneSandbox.EMarkerDiscoveryLevel
// NumValues: 0x0005
enum class EMarkerDiscoveryLevel : uint8
{
	None                                     = 0,
	Bearing                                  = 1,
	Mysterious                               = 2,
	Discovered                               = 3,
	EMarkerDiscoveryLevel_MAX                = 4,
};

// Enum DuneSandbox.EWeaponModType
// NumValues: 0x0007
enum class EWeaponModType : uint8
{
	Frame                                    = 0,
	Barrel                                   = 1,
	Perk                                     = 2,
	Scope                                    = 3,
	Ammo                                     = 4,
	COUNT                                    = 5,
	EWeaponModType_MAX                       = 6,
};

// Enum DuneSandbox.EFriendRequestResponse
// NumValues: 0x0008
enum class EFriendRequestResponse : uint8
{
	FriendRequestSent                        = 0,
	FriendRequestAlreadySent                 = 1,
	FriendAdded                              = 2,
	PlayerNotFound                           = 3,
	PlayerIsAlreadyFriend                    = 4,
	PlayerBlocked                            = 5,
	InvalidNumberOfCharacters                = 6,
	EFriendRequestResponse_MAX               = 7,
};

// Enum DuneSandbox.EPartyRemoveReason
// NumValues: 0x0003
enum class EPartyRemoveReason : uint8
{
	Leave                                    = 0,
	Kicked                                   = 1,
	EPartyRemoveReason_MAX                   = 2,
};

// Enum DuneSandbox.EInviteRemoveReason
// NumValues: 0x0005
enum class EInviteRemoveReason : uint8
{
	Silent                                   = 0,
	PartyFull                                = 1,
	PartyNoLongerExists                      = 2,
	InviteNoLongerExists                     = 3,
	EInviteRemoveReason_MAX                  = 4,
};

// Enum DuneSandbox.EGridItemDragContext
// NumValues: 0x0006
enum class EGridItemDragContext : uint8
{
	None                                     = 0,
	Started                                  = 1,
	StartedDraggedView                       = 2,
	Cancelled                                = 3,
	Dropped                                  = 4,
	EGridItemDragContext_MAX                 = 5,
};

// Enum DuneSandbox.ETextChatChannelType
// NumValues: 0x000B
enum class ETextChatChannelType : uint8
{
	None                                     = 0,
	Debug                                    = 1,
	Feed                                     = 2,
	Proximity                                = 3,
	Party                                    = 4,
	Guild                                    = 5,
	Map                                      = 6,
	Whispers                                 = 7,
	Error                                    = 8,
	Reply                                    = 9,
	ETextChatChannelType_MAX                 = 10,
};

// Enum DuneSandbox.ETextChatStateType
// NumValues: 0x0003
enum class ETextChatStateType : uint8
{
	Typing                                   = 0,
	Visible                                  = 1,
	ETextChatStateType_MAX                   = 2,
};

// Enum DuneSandbox.ELocalizedMessageFormatArgType
// NumValues: 0x0003
enum class ELocalizedMessageFormatArgType : uint8
{
	Native                                   = 0,
	Localized                                = 1,
	ELocalizedMessageFormatArgType_MAX       = 2,
};

// Enum DuneSandbox.EHUDVisibilityState
// NumValues: 0x0004
enum class EHUDVisibilityState : uint8
{
	All                                      = 0,
	VehicleOnly                              = 1,
	Disabled                                 = 2,
	EHUDVisibilityState_MAX                  = 3,
};

// Enum DuneSandbox.EMetaDialogAnimMode
// NumValues: 0x0006
enum class EMetaDialogAnimMode : uint8
{
	None                                     = 0,
	MetaDialogOpen                           = 1,
	ConfirmButtonPressed                     = 2,
	ExtraButtonPressed                       = 3,
	CancelButtonPressed                      = 4,
	EMetaDialogAnimMode_MAX                  = 5,
};

// Enum DuneSandbox.EMetaDialogWidth
// NumValues: 0x0005
enum class EMetaDialogWidth : uint8
{
	Slim                                     = 0,
	Normal                                   = 1,
	Wide                                     = 2,
	Override                                 = 3,
	EMetaDialogWidth_MAX                     = 4,
};

// Enum DuneSandbox.EAnimWeaponType
// NumValues: 0x0009
enum class EAnimWeaponType : uint8
{
	None                                     = 0,
	Rifle                                    = 1,
	Pistol                                   = 2,
	OneHanded                                = 3,
	Under                                    = 4,
	Melee                                    = 5,
	Melee_Sword                              = 6,
	TwoHandHead                              = 7,
	EAnimWeaponType_MAX                      = 8,
};

// Enum DuneSandbox.EAnimLoadPriority
// NumValues: 0x0006
enum class EAnimLoadPriority : uint8
{
	Ignore                                   = 0,
	Preload                                  = 2,
	High                                     = 4,
	Medium                                   = 8,
	Low                                      = 16,
	EAnimLoadPriority_MAX                    = 17,
};

// Enum DuneSandbox.EHitReactLocation
// NumValues: 0x0007
enum class EHitReactLocation : uint8
{
	Head                                     = 0,
	Torso                                    = 1,
	LeftArm                                  = 2,
	RightArm                                 = 3,
	LeftLeg                                  = 4,
	RightLeg                                 = 5,
	EHitReactLocation_MAX                    = 6,
};

// Enum DuneSandbox.EHitReactDirection
// NumValues: 0x0009
enum class EHitReactDirection : uint8
{
	FrontLeft                                = 0,
	FrontRight                               = 1,
	BackLeft                                 = 2,
	BackRight                                = 3,
	Front                                    = 4,
	Right                                    = 5,
	Back                                     = 6,
	Left                                     = 7,
	EHitReactDirection_MAX                   = 8,
};

// Enum DuneSandbox.ESignificanceLevel
// NumValues: 0x0004
enum class ESignificanceLevel : uint8
{
	High                                     = 0,
	Medium                                   = 1,
	Low                                      = 2,
	ESignificanceLevel_MAX                   = 3,
};

// Enum DuneSandbox.ELocomotionAnimState
// NumValues: 0x0007
enum class ELocomotionAnimState : uint8
{
	BaseLocomotion                           = 0,
	Dodge                                    = 1,
	Climbing                                 = 2,
	Disabled                                 = 3,
	HyperSprinting                           = 4,
	Quicksand                                = 5,
	ELocomotionAnimState_MAX                 = 6,
};

// Enum DuneSandbox.EDirectionalMovement
// NumValues: 0x000A
enum class EDirectionalMovement : uint8
{
	DirectionalMovement_F                    = 0,
	DirectionalMovement_B                    = 1,
	DirectionalMovement_L                    = 2,
	DirectionalMovement_R                    = 3,
	DirectionalMovement_FL                   = 4,
	DirectionalMovement_FR                   = 5,
	DirectionalMovement_BL                   = 6,
	DirectionalMovement_BR                   = 7,
	Count                                    = 8,
	EDirectionalMovement_MAX                 = 9,
};

// Enum DuneSandbox.EAnimMode
// NumValues: 0x0009
enum class EAnimMode : uint8
{
	Default                                  = 0,
	Storm                                    = 1,
	Thirsty                                  = 2,
	Bleeding                                 = 3,
	Poisoned                                 = 4,
	Burning                                  = 5,
	CharacterCreationIdle                    = 6,
	Count                                    = 7,
	EAnimMode_MAX                            = 8,
};

// Enum DuneSandbox.EAnimModeTableType
// NumValues: 0x0009
enum class EAnimModeTableType : uint8
{
	NoWeapon                                 = 0,
	Rifle                                    = 1,
	OneHanded                                = 2,
	Underslung                               = 3,
	Pistol                                   = 4,
	Melee                                    = 5,
	TwoHandHead                              = 6,
	Count                                    = 7,
	EAnimModeTableType_MAX                   = 8,
};

// Enum DuneSandbox.EFlsDataCacheLoadingState
// NumValues: 0x0006
enum class EFlsDataCacheLoadingState : uint8
{
	Preloading                               = 0,
	Loading                                  = 1,
	LoadingFailed                            = 2,
	Loaded                                   = 3,
	Disabled                                 = 4,
	EFlsDataCacheLoadingState_MAX            = 5,
};

// Enum DuneSandbox.EHeaderSortOrderType
// NumValues: 0x0003
enum class EHeaderSortOrderType : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
	EHeaderSortOrderType_MAX                 = 2,
};

// Enum DuneSandbox.EWidgetState
// NumValues: 0x0004
enum class EWidgetState : uint8
{
	Normal                                   = 0,
	Toggled                                  = 1,
	Disabled                                 = 2,
	EWidgetState_MAX                         = 3,
};

// Enum DuneSandbox.EClickMethod
// NumValues: 0x0004
enum class EClickMethod : uint8
{
	DownAndUp                                = 0,
	Down                                     = 1,
	Up                                       = 2,
	EClickMethod_MAX                         = 3,
};

// Enum DuneSandbox.EItemDurabilityChangeSource
// NumValues: 0x0007
enum class EItemDurabilityChangeSource : uint8
{
	None                                     = 0,
	Use                                      = 1,
	Defeat                                   = 2,
	Damage                                   = 3,
	ContinuousDeterioration                  = 4,
	Cheat                                    = 5,
	EItemDurabilityChangeSource_MAX          = 6,
};

// Enum DuneSandbox.EInventoryType
// NumValues: 0x001A
enum class EInventoryType : uint8
{
	Backpack                                 = 0,
	Equipment                                = 1,
	PlaceableInventory                       = 3,
	DedicatedStorageInventory                = 4,
	CraftingIngredientsInventory             = 12,
	Spellbook                                = 14,
	RadialMenuShortcuts                      = 15,
	GadgetAbilityShortcuts                   = 16,
	VehicleAbilities                         = 17,
	VehicleAbilityShortcuts                  = 18,
	VehicleAmmunition                        = 19,
	P2pTradingInventory                      = 20,
	LootContainer                            = 21,
	PlayerDroppedLoot                        = 22,
	PersonalLootContainer                    = 23,
	WeaponModsInventory                      = 24,
	InfluenceInventory                       = 25,
	TrainingModules                          = 26,
	EmoteRadialMenuShortcuts                 = 27,
	NpcLootInventory                         = 28,
	ContractsInventory                       = 29,
	PlayerBank                               = 30,
	TransactionalInventory                   = 31,
	DeliveryInvenotry                        = 32,
	Invalid                                  = 255,
	EInventoryType_MAX                       = 256,
};

// Enum DuneSandbox.ECraftingProcessState
// NumValues: 0x0005
enum class ECraftingProcessState : uint8
{
	Idle                                     = 0,
	Working                                  = 1,
	Paused                                   = 2,
	AutomaticallyPaused                      = 3,
	ECraftingProcessState_MAX                = 4,
};

// Enum DuneSandbox.EResultOfVolumeUpdate
// NumValues: 0x0004
enum class EResultOfVolumeUpdate : uint8
{
	NoChange                                 = 0,
	MaxVolumeReached                         = 1,
	NoLongerAtMaxVolume                      = 2,
	EResultOfVolumeUpdate_MAX                = 3,
};

// Enum DuneSandbox.ELandsraadDialogType
// NumValues: 0x0006
enum class ELandsraadDialogType : uint8
{
	DecreeInfo                               = 0,
	DecreeVote                               = 1,
	DecreeIssued                             = 2,
	LandsraadWon                             = 3,
	AlignGuild                               = 4,
	ELandsraadDialogType_MAX                 = 5,
};

// Enum DuneSandbox.EJourneyNodeReplicationReason
// NumValues: 0x0004
enum class EJourneyNodeReplicationReason : uint8
{
	Change                                   = 0,
	Load                                     = 1,
	Transition                               = 2,
	EJourneyNodeReplicationReason_MAX        = 3,
};

// Enum DuneSandbox.ECharacterWeaponStateType
// NumValues: 0x0006
enum class ECharacterWeaponStateType : uint8
{
	None                                     = 0,
	EnterADS                                 = 1,
	ExitADS                                  = 2,
	HolsteredWeapon                          = 3,
	UnholsteredWeapon                        = 4,
	ECharacterWeaponStateType_MAX            = 5,
};

// Enum DuneSandbox.EAttributeChangedType
// NumValues: 0x0004
enum class EAttributeChangedType : uint8
{
	ExactMatch                               = 0,
	LessThan                                 = 1,
	GreaterThan                              = 2,
	EAttributeChangedType_MAX                = 3,
};

// Enum DuneSandbox.EMapMarkerProximityCheckType
// NumValues: 0x0003
enum class EMapMarkerProximityCheckType : uint8
{
	Distance                                 = 0,
	Angle                                    = 1,
	EMapMarkerProximityCheckType_MAX         = 2,
};

// Enum DuneSandbox.ETravelRequestInviteStatus
// NumValues: 0x0005
enum class ETravelRequestInviteStatus : uint8
{
	None                                     = 0,
	Pending                                  = 1,
	Rejected                                 = 2,
	Accepted                                 = 3,
	ETravelRequestInviteStatus_MAX           = 4,
};

// Enum DuneSandbox.EAIWaveWarningAudio
// NumValues: 0x0005
enum class EAIWaveWarningAudio : uint8
{
	NoAudio                                  = 0,
	StandardWave                             = 1,
	BossWave                                 = 2,
	EndCelebration                           = 3,
	EAIWaveWarningAudio_MAX                  = 4,
};

// Enum DuneSandbox.EAbilityIndex
// NumValues: 0x0011
enum class EAbilityIndex : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	Melee                                    = 3,
	MeleeComboSystem                         = 4,
	Defend                                   = 5,
	Suspensor                                = 6,
	Crouch                                   = 7,
	Sprint                                   = 8,
	SprintAttack                             = 9,
	Dodge                                    = 10,
	Emote                                    = 11,
	ToggleShield                             = 12,
	ToggleLight                              = 13,
	None                                     = 14,
	COUNT                                    = 15,
	EAbilityIndex_MAX                        = 16,
};

// Enum DuneSandbox.EActorLightingChannelOption
// NumValues: 0x0004
enum class EActorLightingChannelOption : uint8
{
	Unchanged                                = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	EActorLightingChannelOption_MAX          = 3,
};

// Enum DuneSandbox.EPermissionWidgetState
// NumValues: 0x0006
enum class EPermissionWidgetState : uint8
{
	Fallback                                 = 0,
	NoAccess                                 = 1,
	Owner                                    = 2,
	CoOwner                                  = 3,
	Associate                                = 4,
	EPermissionWidgetState_MAX               = 5,
};

// Enum DuneSandbox.EActorServerTrackingInterest
// NumValues: 0x0004
enum class EActorServerTrackingInterest : uint8
{
	None                                     = 0,
	Lifetime                                 = 1,
	Location                                 = 3,
	EActorServerTrackingInterest_MAX         = 4,
};

// Enum DuneSandbox.EAimAssistRotationType
// NumValues: 0x0005
enum class EAimAssistRotationType : uint8
{
	Always                                   = 0,
	WhileSelfMoving                          = 1,
	WhileSelfAndTargetMoving                 = 2,
	WhileSelfOrTargetMoving                  = 3,
	EAimAssistRotationType_MAX               = 4,
};

// Enum DuneSandbox.ECardinalDirection
// NumValues: 0x0009
enum class ECardinalDirection : uint8
{
	NORTH_WEST                               = 0,
	NORTH                                    = 1,
	NORTH_EAST                               = 2,
	EAST                                     = 3,
	SOUTH_EAST                               = 4,
	SOUTH                                    = 5,
	SOUTH_WEST                               = 6,
	WEST                                     = 7,
	ECardinalDirection_MAX                   = 8,
};

// Enum DuneSandbox.EHitReactionType
// NumValues: 0x0007
enum class EHitReactionType : uint8
{
	NONE                                     = 0,
	Flinch                                   = 1,
	LightStagger                             = 2,
	MediumStagger                            = 3,
	HeavyStagger                             = 4,
	Knockdown                                = 5,
	EHitReactionType_MAX                     = 6,
};

// Enum DuneSandbox.EKnockbackHitDirection
// NumValues: 0x0005
enum class EKnockbackHitDirection : uint8
{
	Back                                     = 0,
	Forward                                  = 1,
	Left                                     = 2,
	Right                                    = 3,
	EKnockbackHitDirection_MAX               = 4,
};

// Enum DuneSandbox.ELoadedAnimMontage
// NumValues: 0x0004
enum class ELoadedAnimMontage : uint8
{
	None                                     = 0,
	SuspensorGrenadeThrow                    = 1,
	SuffocationGrenadeThrow                  = 2,
	ELoadedAnimMontage_MAX                   = 3,
};

// Enum DuneSandbox.EAnimInstanceType
// NumValues: 0x0009
enum class EAnimInstanceType : uint8
{
	Climbing                                 = 0,
	Combat                                   = 1,
	Disabled                                 = 2,
	Locomotion                               = 3,
	Quicksand                                = 4,
	Suspensor                                = 5,
	Ability                                  = 6,
	Count                                    = 7,
	EAnimInstanceType_MAX                    = 8,
};

// Enum DuneSandbox.EWeaponHolsterPosition
// NumValues: 0x0005
enum class EWeaponHolsterPosition : uint8
{
	Back                                     = 0,
	RightHip                                 = 1,
	LeftHip                                  = 2,
	Hidden                                   = 3,
	EWeaponHolsterPosition_MAX               = 4,
};

// Enum DuneSandbox.ECharacterAnimationArchetype
// NumValues: 0x0003
enum class ECharacterAnimationArchetype : uint8
{
	Default                                  = 0,
	Ghola                                    = 1,
	ECharacterAnimationArchetype_MAX         = 2,
};

// Enum DuneSandbox.EAudioSwitchStateGroup_Character
// NumValues: 0x0005
enum class EAudioSwitchStateGroup_Character : uint8
{
	Movement_Type                            = 0,
	Character_Gender                         = 1,
	Character_Faction                        = 2,
	Character_Type                           = 3,
	EAudioSwitchStateGroup_MAX               = 4,
};

// Enum DuneSandbox.EAudioSwitchState_CharacterGender
// NumValues: 0x0004
enum class EAudioSwitchState_CharacterGender : uint8
{
	Male                                     = 0,
	Female                                   = 1,
	Neutral                                  = 2,
	EAudioSwitchState_MAX                    = 3,
};

// Enum DuneSandbox.EAudioTotemPlaceablesInfoComponentTags
// NumValues: 0x0002
enum class EAudioTotemPlaceablesInfoComponentTags : uint8
{
	NeedsUpdate                              = 1,
	EAudioTotemPlaceablesInfoComponentTags_MAX = 2,
};

// Enum DuneSandbox.EBasePowerStateChange
// NumValues: 0x0003
enum class EBasePowerStateChange : uint8
{
	On                                       = 0,
	Off                                      = 1,
	EBasePowerStateChange_MAX                = 2,
};

// Enum DuneSandbox.EConnectionQueueState
// NumValues: 0x0006
enum class EConnectionQueueState : uint8
{
	BeforeQueue                              = 0,
	InQueue                                  = 1,
	Travelling                               = 2,
	PasswordInvalid                          = 3,
	PasswordRequired                         = 4,
	EConnectionQueueState_MAX                = 5,
};

// Enum DuneSandbox.ESyncLoadTarget
// NumValues: 0x0004
enum class ESyncLoadTarget : uint8
{
	Client                                   = 0,
	Server                                   = 1,
	ClientAndServer                          = 2,
	ESyncLoadTarget_MAX                      = 3,
};

// Enum DuneSandbox.EBuildableBuildAndFillHoldTimeType
// NumValues: 0x0006
enum class EBuildableBuildAndFillHoldTimeType : uint8
{
	Short                                    = 0,
	Medium                                   = 1,
	Long                                     = 2,
	VeryLong                                 = 3,
	Custom                                   = 4,
	EBuildableBuildAndFillHoldTimeType_MAX   = 5,
};

// Enum DuneSandbox.ESocketConfiguration
// NumValues: 0x000E
enum class ESocketConfiguration : uint8
{
	Normal                                   = 0,
	Rotated180                               = 1,
	Rotated90                                = 2,
	Rotated270                               = 3,
	Rotated120                               = 4,
	Rotated240                               = 5,
	Rotated30                                = 6,
	Rotated60                                = 7,
	Rotated150                               = 8,
	Rotated210                               = 9,
	Rotated300                               = 10,
	Rotated330                               = 11,
	SocketConfiguration_MAX                  = 12,
	ESocketConfiguration_MAX                 = 13,
};

// Enum DuneSandbox.EBuildableSpawnFlags
// NumValues: 0x0003
enum class EBuildableSpawnFlags : uint8
{
	None                                     = 0,
	NewlyPlaced                              = 2,
	EBuildableSpawnFlags_MAX                 = 3,
};

// Enum DuneSandbox.EPlaceableAudioGroup
// NumValues: 0x0005
enum class EPlaceableAudioGroup : uint8
{
	None                                     = 0,
	PowerGenerator                           = 1,
	Fabricator                               = 2,
	OreRefinery                              = 3,
	MAX                                      = 4,
};

// Enum DuneSandbox.EBuildableBrushCornersShape
// NumValues: 0x0005
enum class EBuildableBrushCornersShape : uint8
{
	Square                                   = 0,
	TriangleEquilateral                      = 1,
	TriangleIsosceles                        = 2,
	TriangleIsoscelesInverted                = 3,
	EBuildableBrushCornersShape_MAX          = 4,
};

// Enum DuneSandbox.EBrushPlacementSnapRotationType
// NumValues: 0x0004
enum class EBrushPlacementSnapRotationType : uint8
{
	SnapAll                                  = 0,
	SnapHalf                                 = 1,
	SnapOne                                  = 2,
	EBrushPlacementSnapRotationType_MAX      = 3,
};

// Enum DuneSandbox.EBuildingActionAudioType
// NumValues: 0x0016
enum class EBuildingActionAudioType : uint8
{
	Build                                    = 0,
	BuildFailed                              = 1,
	Repair                                   = 2,
	RepairFailed                             = 3,
	Remove                                   = 4,
	RemoveFailed                             = 5,
	Pickup                                   = 6,
	PickupFailed                             = 7,
	MovePickup                               = 8,
	MovePickupFailed                         = 9,
	MovePlace                                = 10,
	MovePlaceFailed                          = 11,
	HologramBuild                            = 12,
	HologramBuildFailed                      = 13,
	HologramFillCompleted                    = 14,
	HologramFillCompletedFailed              = 15,
	HologramRemove                           = 16,
	HologramRemoveFailed                     = 17,
	HologramFillOnGoing                      = 18,
	HologramFillOnStop                       = 19,
	PiecePicker                              = 20,
	MAX                                      = 21,
};

// Enum DuneSandbox.EBuildingSystemActionResult
// NumValues: 0x002E
enum class EBuildingSystemActionResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Success_Update                           = 2,
	Fail                                     = 100,
	Fail_Stability                           = 101,
	Fail_Stability_NoData                    = 102,
	Fail_Overlaps                            = 103,
	Fail_LandClaim                           = 104,
	Fail_LoadingBuildingData                 = 105,
	Fail_InsideCollision                     = 106,
	Fail_DisallowedBuildLimit                = 107,
	Fail_NoSocketData                        = 108,
	Fail_IncorrectSocketType                 = 109,
	Fail_OverlapPlayer                       = 110,
	Fail_OverlapQuicksand                    = 111,
	Fail_OverlapTotem                        = 112,
	Fail_NoTotem                             = 113,
	Fail_NoPermissions                       = 114,
	Fail_NotConnectedToNonHologram           = 115,
	Fail_MissingMaterials                    = 116,
	Fail_DifferentTotem                      = 117,
	Fail_ItemDamaged                         = 118,
	Fail_NearServerBorder                    = 119,
	Fail_NoAccessToBuildable                 = 120,
	Fail_Datatable                           = 121,
	Fail_NotTheOwner                         = 122,
	Fail_CantMoveOrPickup                    = 123,
	Fail_Landscape                           = 124,
	Fail_FullyInsideTerrain                  = 125,
	Fail_ReachedBuildableStructureLimit      = 126,
	Fail_ReachedBuildableStructureComposedLimit = 127,
	Fail_OverMaxAllowedDistance              = 128,
	Fail_IncorrectSurfaceOrientation         = 129,
	Fail_InvalidDataOrObject                 = 130,
	Fail_HashMatch                           = 131,
	Fail_NoValidPotentialGhosts              = 132,
	Fail_NoBuildableFound                    = 133,
	Fail_FullHealth                          = 134,
	Fail_NotAffectedByBuildingTool           = 135,
	Fail_NotHologram                         = 136,
	Fail_MoveNotPlaceable                    = 137,
	Fail_CantBeHologram                      = 138,
	Fail_AssetNotPreloaded                   = 139,
	Fail_CantLoadOwnedActors                 = 140,
	Fail_NotElegibleToRemove                 = 141,
	EBuildingSystemActionResult_MAX          = 142,
};

// Enum DuneSandbox.ECharacterCreationModifiableBodyPartType
// NumValues: 0x000C
enum class ECharacterCreationModifiableBodyPartType : uint8
{
	None                                     = 0,
	Height                                   = 1,
	WaistWidth                               = 2,
	WaistDepth                               = 3,
	HipWidth                                 = 4,
	HipDepth                                 = 5,
	ArmThickness                             = 6,
	LegThickness                             = 7,
	NeckThickness                            = 8,
	NeckLength                               = 9,
	Count                                    = 10,
	ECharacterCreationModifiableBodyPartType_MAX = 11,
};

// Enum DuneSandbox.ECCSMutableOptionCount
// NumValues: 0x0007
enum class ECCSMutableOptionCount : uint8
{
	None                                     = 0,
	Three                                    = 3,
	Five                                     = 5,
	Seven                                    = 7,
	Nine                                     = 9,
	Eleven                                   = 11,
	ECCSMutableOptionCount_MAX               = 12,
};

// Enum DuneSandbox.EChallengeRoomAudioEvent
// NumValues: 0x0008
enum class EChallengeRoomAudioEvent : uint8
{
	None                                     = 0,
	Stillsuit_SunOpen                        = 1,
	Stillsuit_SunClose                       = 2,
	Stillsuit_SunPlayerDetectedLoop          = 3,
	Stillsuit_SunGazeLoop                    = 4,
	Stillsuit_SunRedGazeLoop                 = 5,
	Stillsuit_SunRotateLoop                  = 6,
	EChallengeRoomAudioEvent_MAX             = 7,
};

// Enum DuneSandbox.ECCScreenContentType
// NumValues: 0x000B
enum class ECCScreenContentType : uint8
{
	None                                     = 0,
	Subcategory                              = 1,
	SingleMutableParameter                   = 2,
	BodyPartModificationsSlider              = 3,
	BodyPartModificationsOption              = 4,
	Randomizer                               = 5,
	AppearancePresets                        = 6,
	VoicePresets                             = 7,
	Grid                                     = 8,
	MutableParameterOptionScale              = 9,
	ECCScreenContentType_MAX                 = 10,
};

// Enum DuneSandbox.ECCVisibilityState
// NumValues: 0x0004
enum class ECCVisibilityState : uint8
{
	Hidden                                   = 0,
	Unlocked                                 = 1,
	Locked                                   = 2,
	ECCVisibilityState_MAX                   = 3,
};

// Enum DuneSandbox.ECCScreenRandomizerType
// NumValues: 0x0003
enum class ECCScreenRandomizerType : uint8
{
	RandomizeEverything                      = 0,
	RandomizeCurrentCategory                 = 1,
	ECCScreenRandomizerType_MAX              = 2,
};

// Enum DuneSandbox.ETelemetryParameter
// NumValues: 0x000B
enum class ETelemetryParameter : uint8
{
	None                                     = 0,
	ToggleAttire                             = 1,
	CategoryTimer                            = 2,
	CharacterNameTimer                       = 3,
	ZoomTimerBody                            = 4,
	ZoomTimerUpperBody                       = 5,
	ZoomTimerHead                            = 6,
	ZoomTimerEyes                            = 7,
	BattlegroupId                            = 8,
	VoiceType                                = 9,
	ETelemetryParameter_MAX                  = 10,
};

// Enum DuneSandbox.EDuneGender
// NumValues: 0x0004
enum class EDuneGender : uint8
{
	Male                                     = 0,
	Female                                   = 1,
	Neutral                                  = 2,
	EDuneGender_MAX                          = 3,
};

// Enum DuneSandbox.ECustomMovementType
// NumValues: 0x000B
enum class ECustomMovementType : uint8
{
	Dashing                                  = 0,
	Disabled                                 = 1,
	Climbing                                 = 2,
	WaitingForLoading                        = 3,
	Driving                                  = 4,
	Crawling                                 = 5,
	Hypersprinting                           = 6,
	HypersprintSliding                       = 7,
	SlidingOut                               = 8,
	WallLatch                                = 9,
	ECustomMovementType_MAX                  = 10,
};

// Enum DuneSandbox.EClimbTransitionType
// NumValues: 0x0005
enum class EClimbTransitionType : uint8
{
	Ground                                   = 0,
	Wall                                     = 1,
	Ceiling                                  = 2,
	Ledge                                    = 3,
	EClimbTransitionType_MAX                 = 4,
};

// Enum DuneSandbox.ECommuninetMessageTarget
// NumValues: 0x0005
enum class ECommuninetMessageTarget : uint8
{
	TextChat                                 = 0,
	InstantRequest                           = 1,
	Notification                             = 2,
	MetaDialogWithInstantRequestFallback     = 3,
	ECommuninetMessageTarget_MAX             = 4,
};

// Enum DuneSandbox.EContractConditionType
// NumValues: 0x000E
enum class EContractConditionType : uint8
{
	Invalid                                  = 0,
	KillNumber                               = 1,
	ClearArea                                = 2,
	DeliverItemById                          = 3,
	ReceiveItemById                          = 4,
	Interact                                 = 5,
	GoToLocation                             = 6,
	ScanObject                               = 7,
	UseAbility                               = 8,
	PlayerHasFlags                           = 9,
	HandInContract                           = 10,
	ContactIssuer                            = 11,
	Exsanguination                           = 12,
	EContractConditionType_MAX               = 13,
};

// Enum DuneSandbox.EContractLocationAnchorName
// NumValues: 0x000C
enum class EContractLocationAnchorName : uint8
{
	None                                     = 0,
	Anchor_01                                = 1,
	Anchor_02                                = 2,
	Anchor_03                                = 3,
	Anchor_04                                = 4,
	Anchor_05                                = 5,
	Anchor_06                                = 6,
	Anchor_07                                = 7,
	Anchor_08                                = 8,
	Anchor_09                                = 9,
	Anchor_10                                = 10,
	EContractLocationAnchorName_MAX          = 11,
};

// Enum DuneSandbox.EContractConditionGroupId
// NumValues: 0x0016
enum class EContractConditionGroupId : uint8
{
	None                                     = 0,
	Group_01                                 = 1,
	Group_02                                 = 2,
	Group_03                                 = 3,
	Group_04                                 = 4,
	Group_05                                 = 5,
	Group_06                                 = 6,
	Group_07                                 = 7,
	Group_08                                 = 8,
	Group_09                                 = 9,
	Group_10                                 = 10,
	Group_Add_01                             = 11,
	Group_Add_02                             = 12,
	Group_Add_03                             = 13,
	Group_Add_04                             = 14,
	Group_Add_05                             = 15,
	Group_Add_06                             = 16,
	Group_Add_07                             = 17,
	Group_Add_08                             = 18,
	Group_Add_09                             = 19,
	Group_Add_10                             = 20,
	EContractConditionGroupId_MAX            = 21,
};

// Enum DuneSandbox.EContractConditionKillType
// NumValues: 0x0006
enum class EContractConditionKillType : uint8
{
	None                                     = 0,
	FinishingBlow                            = 1,
	Damage                                   = 2,
	BeingInParty                             = 3,
	BeingInVehicle                           = 4,
	EContractConditionKillType_MAX           = 5,
};

// Enum DuneSandbox.EContractStatus
// NumValues: 0x0006
enum class EContractStatus : uint8
{
	Unknown                                  = 0,
	Unavailable                              = 1,
	Available                                = 2,
	Active                                   = 3,
	Completed                                = 4,
	EContractStatus_MAX                      = 5,
};

// Enum DuneSandbox.EContractStatusReason
// NumValues: 0x000A
enum class EContractStatusReason : uint8
{
	None                                     = 0,
	Unknown                                  = 1,
	Failed                                   = 2,
	Completed                                = 3,
	ContractsLimit                           = 4,
	AlreadyIssued                            = 5,
	ReadyToDeliverItem                       = 6,
	ReadyToHandIn                            = 7,
	ReadyToContactIssuer                     = 8,
	EContractStatusReason_MAX                = 9,
};

// Enum DuneSandbox.EContractNotificationType
// NumValues: 0x000B
enum class EContractNotificationType : uint8
{
	Invalid                                  = 0,
	ContractAccepted                         = 1,
	ContractPickedUp                         = 2,
	ContractCompleted                        = 3,
	ContractTimedOut                         = 4,
	ContractCancelled                        = 5,
	ContractFailed                           = 6,
	ConditionCompleted                       = 7,
	ConditionInteracted                      = 8,
	ConditionFailed                          = 9,
	EContractNotificationType_MAX            = 10,
};

// Enum DuneSandbox.EContractSpawnPriority
// NumValues: 0x0005
enum class EContractSpawnPriority : uint8
{
	Low                                      = 0,
	Normal                                   = 1,
	High                                     = 2,
	Required                                 = 3,
	EContractSpawnPriority_MAX               = 4,
};

// Enum DuneSandbox.EContractSuppressNotificationFlags
// NumValues: 0x0004
enum class EContractSuppressNotificationFlags : uint8
{
	None                                     = 0,
	SuppressAccepted                         = 1,
	SuppressCompleted                        = 2,
	EContractSuppressNotificationFlags_MAX   = 3,
};

// Enum DuneSandbox.EItemPreviewState
// NumValues: 0x0004
enum class EItemPreviewState : uint8
{
	NoPreview                                = 0,
	PreviewEmpty                             = 1,
	PreviewWithContent                       = 2,
	EItemPreviewState_MAX                    = 3,
};

// Enum DuneSandbox.ECourierMessageType
// NumValues: 0x0006
enum class ECourierMessageType : uint8
{
	Invalid                                  = 0,
	TextChat                                 = 1,
	TextChatEdited                           = 2,
	TextChatVetoed                           = 3,
	CourierNotification                      = 4,
	ECourierMessageType_MAX                  = 5,
};

// Enum DuneSandbox.ECourierMessageRoutingType
// NumValues: 0x0005
enum class ECourierMessageRoutingType : uint8
{
	Invalid                                  = 0,
	Player                                   = 1,
	Broadcast                                = 2,
	Direct                                   = 3,
	ECourierMessageRoutingType_MAX           = 4,
};

// Enum DuneSandbox.ECraftingResult
// NumValues: 0x0008
enum class ECraftingResult : uint8
{
	Success                                  = 0,
	Error_MissingResources                   = 1,
	Error_FullInventory                      = 2,
	Error_FullSlots                          = 3,
	Error_MissingPower                       = 4,
	Error_MissingRecipeCharges               = 5,
	Error_InvalidState                       = 6,
	ECraftingResult_MAX                      = 7,
};

// Enum DuneSandbox.ECustomizationMaterialInstanceCategory
// NumValues: 0x0007
enum class ECustomizationMaterialInstanceCategory : uint8
{
	None                                     = 0,
	Head                                     = 1,
	Torso                                    = 2,
	Legs                                     = 3,
	Gloves                                   = 4,
	Boots                                    = 5,
	ECustomizationMaterialInstanceCategory_MAX = 6,
};

// Enum DuneSandbox.EDamageSourceFlags
// NumValues: 0x0007
enum class EDamageSourceFlags : uint8
{
	NONE                                     = 0,
	Weapon                                   = 1,
	Ranged                                   = 2,
	Melee                                    = 4,
	Beam                                     = 8,
	DamageOnTick                             = 16,
	EDamageSourceFlags_MAX                   = 17,
};

// Enum DuneSandbox.EDialogueEventExecutionMode
// NumValues: 0x0004
enum class EDialogueEventExecutionMode : uint8
{
	Client                                   = 0,
	Server                                   = 1,
	ClientAndServer                          = 2,
	EDialogueEventExecutionMode_MAX          = 3,
};

// Enum DuneSandbox.EDialogueWidgetTypes
// NumValues: 0x0006
enum class EDialogueWidgetTypes : uint8
{
	None                                     = 0,
	Pbe                                      = 1,
	Contract                                 = 2,
	Item                                     = 3,
	Bank                                     = 4,
	MAX                                      = 5,
};

// Enum DuneSandbox.EDistributeItemResultActionType
// NumValues: 0x0003
enum class EDistributeItemResultActionType : uint8
{
	NewItem                                  = 0,
	ExistingitemStack                        = 1,
	EDistributeItemResultActionType_MAX      = 2,
};

// Enum DuneSandbox.EDistributionRuleObservedLayer
// NumValues: 0x0003
enum class EDistributionRuleObservedLayer : uint8
{
	Own                                      = 0,
	All                                      = 1,
	EDistributionRuleObservedLayer_MAX       = 2,
};

// Enum DuneSandbox.EDoorState
// NumValues: 0x0004
enum class EDoorState : uint8
{
	Opened                                   = 0,
	ClosedByPlayer                           = 1,
	ClosedAutomatically                      = 2,
	EDoorState_MAX                           = 3,
};

// Enum DuneSandbox.EActorState
// NumValues: 0x0005
enum class EActorState : uint8
{
	Default                                  = 0,
	Travel                                   = 1,
	VehicleBackup                            = 2,
	AbortedAuthorityTransfer                 = 3,
	EActorState_MAX                          = 4,
};

// Enum DuneSandbox.EAIAttackTier
// NumValues: 0x0005
enum class EAIAttackTier : uint8
{
	Tier0                                    = 0,
	Tier1                                    = 1,
	Tier2                                    = 2,
	Tier3                                    = 3,
	EAIAttackTier_MAX                        = 4,
};

// Enum DuneSandbox.EDuneAiMovementSpeed
// NumValues: 0x0008
enum class EDuneAiMovementSpeed : uint8
{
	Invalid                                  = 0,
	Auto                                     = 1,
	Random                                   = 2,
	Walking                                  = 3,
	Strafing                                 = 4,
	Running                                  = 5,
	Sprinting                                = 6,
	EDuneAiMovementSpeed_MAX                 = 7,
};

// Enum DuneSandbox.EHateLevel
// NumValues: 0x0004
enum class EHateLevel : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	EHateLevel_MAX                           = 3,
};

// Enum DuneSandbox.EHateDuration
// NumValues: 0x0005
enum class EHateDuration : uint8
{
	Short                                    = 0,
	Medium                                   = 1,
	Long                                     = 2,
	VeryLong                                 = 3,
	EHateDuration_MAX                        = 4,
};

// Enum DuneSandbox.ENPCHomeDistance
// NumValues: 0x0005
enum class ENPCHomeDistance : uint8
{
	Home                                     = 0,
	Close                                    = 1,
	Medium                                   = 2,
	Far                                      = 3,
	ENPCHomeDistance_MAX                     = 4,
};

// Enum DuneSandbox.ENPCCombatMode
// NumValues: 0x0004
enum class ENPCCombatMode : uint8
{
	OutOfCombat                              = 0,
	OpenSpace                                = 1,
	CoverSpace                               = 2,
	ENPCCombatMode_MAX                       = 3,
};

// Enum DuneSandbox.EDuneSpringArmModifierOperator
// NumValues: 0x0004
enum class EDuneSpringArmModifierOperator : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	Mul                                      = 2,
	EDuneSpringArmModifierOperator_MAX       = 3,
};

// Enum DuneSandbox.EDuneCameraContextState
// NumValues: 0x0004
enum class EDuneCameraContextState : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Vehicle                                  = 2,
	EDuneCameraContextState_MAX              = 3,
};

// Enum DuneSandbox.EDuneCameraContexMode
// NumValues: 0x0005
enum class EDuneCameraContexMode : uint8
{
	Default                                  = 0,
	WantsOwnPriority                         = 1,
	WantsOwnPriorityBlocking                 = 2,
	SkipCameraContextModifier                = 3,
	EDuneCameraContexMode_MAX                = 4,
};

// Enum DuneSandbox.EDuneMoveIgnoreMaskFlags
// NumValues: 0x0005
enum class EDuneMoveIgnoreMaskFlags : uint8
{
	None                                     = 0,
	Player                                   = 2,
	NPC                                      = 4,
	Vehicle                                  = 8,
	EDuneMoveIgnoreMaskFlags_MAX             = 9,
};

// Enum DuneSandbox.EDuneSkeletalMeshFilterMaskFlags
// NumValues: 0x0003
enum class EDuneSkeletalMeshFilterMaskFlags : uint8
{
	None                                     = 0,
	CharacterMesh                            = 2,
	EDuneSkeletalMeshFilterMaskFlags_MAX     = 3,
};

// Enum DuneSandbox.EUIDamageVisuals
// NumValues: 0x0008
enum class EUIDamageVisuals : uint8
{
	None                                     = 0,
	EdgeEffect                               = 1,
	Directional                              = 2,
	BluntDirectional                         = 4,
	FallDamage                               = 8,
	AllDirectionals                          = 6,
	AllBluntDamages                          = 12,
	EUIDamageVisuals_MAX                     = 13,
};

// Enum DuneSandbox.ECharacterCreationDataFlowBehaviour
// NumValues: 0x0006
enum class ECharacterCreationDataFlowBehaviour : uint8
{
	Default                                  = 0,
	UseDefaultCharacterInPBE                 = 3,
	UseDefaultCharacterInNPE                 = 4,
	UseDefaultCharacterInServer              = 1,
	RemoveCharacterAndStartMainMenu          = 2,
	ECharacterCreationDataFlowBehaviour_MAX  = 5,
};

// Enum DuneSandbox.EDEOrderType
// NumValues: 0x0004
enum class EDEOrderType : uint8
{
	ListedOrder                              = 0,
	ActiveOwnerOrder                         = 1,
	CompletedOwnerOrder                      = 2,
	EDEOrderType_MAX                         = 3,
};

// Enum DuneSandbox.EDEOrderCompletionType
// NumValues: 0x0007
enum class EDEOrderCompletionType : uint8
{
	None                                     = 0,
	Storage                                  = 1,
	Expired                                  = 2,
	Canceled                                 = 3,
	Sold                                     = 4,
	Purchased                                = 5,
	EDEOrderCompletionType_MAX               = 6,
};

// Enum DuneSandbox.EDEOrderSortColumn
// NumValues: 0x0006
enum class EDEOrderSortColumn : uint8
{
	Name                                     = 0,
	Status                                   = 1,
	Quantity                                 = 2,
	Price                                    = 3,
	Expiration                               = 4,
	EDEOrderSortColumn_MAX                   = 5,
};

// Enum DuneSandbox.EDEOrderSortDirection
// NumValues: 0x0003
enum class EDEOrderSortDirection : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
	EDEOrderSortDirection_MAX                = 2,
};

// Enum DuneSandbox.EExtendedHitType
// NumValues: 0x0005
enum class EExtendedHitType : uint8
{
	RandomLocation                           = 0,
	RandomLocationNoHead                     = 1,
	ManualHitLocation                        = 2,
	FromHitResult                            = 3,
	EExtendedHitType_MAX                     = 4,
};

// Enum DuneSandbox.EStorageQuickDepositResult
// NumValues: 0x0004
enum class EStorageQuickDepositResult : uint8
{
	Success                                  = 0,
	PartialSuccess                           = 1,
	NoItemsToDeposit                         = 2,
	EStorageQuickDepositResult_MAX           = 3,
};

// Enum DuneSandbox.EDuneListViewItemType
// NumValues: 0x0003
enum class EDuneListViewItemType : uint8
{
	Entry                                    = 0,
	Header                                   = 1,
	EDuneListViewItemType_MAX                = 2,
};

// Enum DuneSandbox.EConnectionDirection
// NumValues: 0x0006
enum class EConnectionDirection : uint8
{
	Left                                     = 0,
	UpLeft                                   = 1,
	Up                                       = 2,
	UpRight                                  = 3,
	Right                                    = 4,
	EConnectionDirection_MAX                 = 5,
};

// Enum DuneSandbox.EDuneVoiceSetAction
// NumValues: 0x001D
enum class EDuneVoiceSetAction : uint8
{
	None                                     = 0,
	BarkAttack                               = 1,
	BarkCivilianGreet                        = 2,
	BarkDeath                                = 3,
	BarkFlank                                = 4,
	BarkFound                                = 5,
	BarkGrenadeThrow                         = 6,
	BarkHelp                                 = 7,
	BarkHurtDart                             = 8,
	BarkHurtMedium                           = 9,
	BarkHurtSmall                            = 10,
	BarkHurtLarge                            = 11,
	BarkLost                                 = 12,
	BarkMelee                                = 13,
	BarkMeleeShield                          = 14,
	BarkReload                               = 15,
	BarkSearch                               = 16,
	BarkSoldierGreet                         = 17,
	BarkShieldOff                            = 18,
	BarkShieldOn                             = 19,
	BarkSpot1                                = 20,
	BarkSpot2                                = 21,
	BarkSpot3                                = 22,
	BarkSupport                              = 23,
	BarkTaunt                                = 24,
	BarkThrow                                = 25,
	BarkVictory                              = 26,
	BarkWhizz                                = 27,
	Max                                      = 28,
};

// Enum DuneSandbox.EEntityCategory
// NumValues: 0x0006
enum class EEntityCategory : uint8
{
	AI                                       = 0,
	Spawner                                  = 1,
	Testing                                  = 2,
	Default                                  = 3,
	Count                                    = 4,
	EEntityCategory_MAX                      = 5,
};

// Enum DuneSandbox.EEquipmentSlot
// NumValues: 0x000C
enum class EEquipmentSlot : uint8
{
	Head                                     = 0,
	Torso                                    = 1,
	Legs                                     = 2,
	Gloves                                   = 3,
	Boots                                    = 4,
	Visor                                    = 5,
	Light                                    = 6,
	Suspensor                                = 7,
	PowerPack                                = 8,
	Shield                                   = 9,
	SlotCount                                = 10,
	EEquipmentSlot_MAX                       = 11,
};

// Enum DuneSandbox.EFatalDamageResponse
// NumValues: 0x0004
enum class EFatalDamageResponse : uint8
{
	None                                     = 0,
	Kill                                     = 1,
	DBNO                                     = 2,
	EFatalDamageResponse_MAX                 = 3,
};

// Enum DuneSandbox.EDamageKillType
// NumValues: 0x0003
enum class EDamageKillType : uint8
{
	Death                                    = 0,
	Defeat                                   = 1,
	EDamageKillType_MAX                      = 2,
};

// Enum DuneSandbox.EFeatureRedirectInputBehaviour
// NumValues: 0x0003
enum class EFeatureRedirectInputBehaviour : uint8
{
	None                                     = 0,
	OpenPlayerMenu                           = 1,
	EFeatureRedirectInputBehaviour_MAX       = 2,
};

// Enum DuneSandbox.EFriendsNotificationType
// NumValues: 0x0009
enum class EFriendsNotificationType : uint8
{
	NONE                                     = 0,
	Error                                    = 1,
	FriendInviteSent                         = 2,
	PlayerNotFound                           = 3,
	FriendRequested                          = 4,
	FriendInviteAccepted                     = 5,
	FriendInviteDeclined                     = 6,
	FriendInviteConfirmed                    = 7,
	EFriendsNotificationType_MAX             = 8,
};

// Enum DuneSandbox.EGameItemGiverOptions
// NumValues: 0x0004
enum class EGameItemGiverOptions : uint8
{
	None                                     = 0,
	DestroysOwnerOnUse                       = 1,
	DestroyOwnerOnUseDelayed                 = 2,
	EGameItemGiverOptions_MAX                = 3,
};

// Enum DuneSandbox.EGenericActorSpawnSnapType
// NumValues: 0x0006
enum class EGenericActorSpawnSnapType : uint8
{
	None                                     = 0,
	ToSurface                                = 1,
	ToSurfaceNormal                          = 2,
	ToLowestSurfaceInArea                    = 3,
	ToTopmostSurfaceInArea                   = 4,
	EGenericActorSpawnSnapType_MAX           = 5,
};

// Enum DuneSandbox.EGraphicsQuality
// NumValues: 0x0009
enum class EGraphicsQuality : uint8
{
	Invalid                                  = 127,
	LaptopLow                                = 18446744073709551615,
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Ultra                                    = 3,
	Custom                                   = 4,
	Auto                                     = 5,
	EGraphicsQuality_MAX                     = 128,
};

// Enum DuneSandbox.EGlobalIlluminationMethod
// NumValues: 0x0003
enum class EGlobalIlluminationMethod : uint8
{
	SmartGI                                  = 0,
	Lumen                                    = 1,
	EGlobalIlluminationMethod_MAX            = 2,
};

// Enum DuneSandbox.EAntiAliasingAndUpscalingMethod
// NumValues: 0x0009
enum class EAntiAliasingAndUpscalingMethod : uint8
{
	Off                                      = 0,
	FXAA                                     = 1,
	TAA                                      = 2,
	MSAA                                     = 3,
	TSR                                      = 4,
	FSR3                                     = 5,
	DLSS                                     = 6,
	XESS                                     = 7,
	EAntiAliasingAndUpscalingMethod_MAX      = 8,
};

// Enum DuneSandbox.EFrameGenerationMethod
// NumValues: 0x0007
enum class EFrameGenerationMethod : uint8
{
	Off                                      = 0,
	FSR3                                     = 1,
	XEFG                                     = 2,
	DLSSG                                    = 3,
	DLSSG3X                                  = 4,
	DLSSG4X                                  = 5,
	EFrameGenerationMethod_MAX               = 6,
};

// Enum DuneSandbox.EGraphicSetting
// NumValues: 0x001A
enum class EGraphicSetting : uint8
{
	GlobalQuality                            = 0,
	ViewDistanceQuality                      = 1,
	PostProcessingQuality                    = 2,
	GeneralShadowsQuality                    = 3,
	EffectsQuality                           = 4,
	TextureQuality                           = 5,
	FoliageQuality                           = 6,
	HairQuality                              = 7,
	AntiAliasingQuality                      = 8,
	FrameGenerationMethod                    = 9,
	TemporalUpscalerMethod                   = 10,
	DLSSUpscalerQuality                      = 11,
	FSR3UpscalerQuality                      = 12,
	XESSUpscalerQuality                      = 13,
	ScreenPercentage                         = 14,
	NvidiaReflex                             = 15,
	GIReflectionsQuality                     = 16,
	GIQuality                                = 17,
	GIMethod                                 = 18,
	VSM                                      = 19,
	CustomPercentage                         = 20,
	LaptopLow                                = 21,
	LimitProcessCpuUsage                     = 22,
	WindowMode                               = 23,
	Resolution                               = 24,
	EGraphicSetting_MAX                      = 25,
};

// Enum DuneSandbox.EGridSlotDragFeedbackType
// NumValues: 0x0006
enum class EGridSlotDragFeedbackType : uint8
{
	None                                     = 0,
	ValidDrop                                = 1,
	InvalidDrop                              = 2,
	Dropped                                  = 3,
	DragLeave                                = 4,
	EGridSlotDragFeedbackType_MAX            = 5,
};

// Enum DuneSandbox.EGuildActionInviteResult
// NumValues: 0x000A
enum class EGuildActionInviteResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	Fail_ReachedMemberLimit                  = 101,
	Fail_AlreadyInGuild                      = 102,
	Fail_AlreadyInvited                      = 103,
	Fail_FailedToFetchPlayerGuildData        = 104,
	Fail_ReachedInviteLimit                  = 105,
	Fail_IncompatibleFaction                 = 106,
	EGuildActionInviteResult_MAX             = 107,
};

// Enum DuneSandbox.EGuildActionInviteAcceptResult
// NumValues: 0x0006
enum class EGuildActionInviteAcceptResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	Fail_ReachedMemberLimit                  = 101,
	Fail_IncompatibleFaction                 = 102,
	EGuildActionInviteAcceptResult_MAX       = 103,
};

// Enum DuneSandbox.EGuildActionLeaveGuildResult
// NumValues: 0x0005
enum class EGuildActionLeaveGuildResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	Fail_GuildAdmin                          = 101,
	EGuildActionLeaveGuildResult_MAX         = 102,
};

// Enum DuneSandbox.EGuildActionResult
// NumValues: 0x0007
enum class EGuildActionResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	Fail_NameNotMeetingConditions            = 101,
	Fail_DescriptionNotMeetingConditions     = 102,
	Fail_NameAlreadyTaken                    = 103,
	EGuildActionResult_MAX                   = 104,
};

// Enum DuneSandbox.EGuildNotificationType
// NumValues: 0x000C
enum class EGuildNotificationType : uint8
{
	NONE                                     = 0,
	InviteAccepted                           = 1,
	InviteDeclined                           = 2,
	GuildDisbanded                           = 3,
	PlayerRemoved                            = 4,
	AlreadyInAnotherGuild                    = 5,
	AlreadyInvited                           = 6,
	ReachedGuildInviteLimit                  = 7,
	ReachedGuildMemberLimit                  = 8,
	IncompatibleFaction                      = 9,
	InviteSent                               = 10,
	EGuildNotificationType_MAX               = 11,
};

// Enum DuneSandbox.EGuildRole
// NumValues: 0x0005
enum class EGuildRole : uint8
{
	None                                     = 0,
	Member                                   = 1,
	Officer                                  = 50,
	Admin                                    = 100,
	EGuildRole_MAX                           = 101,
};

// Enum DuneSandbox.EGuildRemoveReason
// NumValues: 0x0004
enum class EGuildRemoveReason : uint8
{
	Manual                                   = 0,
	GuildAllegianceChanged                   = 1,
	Excluded                                 = 2,
	EGuildRemoveReason_MAX                   = 3,
};

// Enum DuneSandbox.EGuildInviteResponseType
// NumValues: 0x0004
enum class EGuildInviteResponseType : uint8
{
	Canceled                                 = 0,
	Accepted                                 = 1,
	Rejected                                 = 2,
	EGuildInviteResponseType_MAX             = 3,
};

// Enum DuneSandbox.EGuildCreateFailReason
// NumValues: 0x0004
enum class EGuildCreateFailReason : uint8
{
	None                                     = 0,
	NameAlreadyTaken                         = 1,
	QueryError                               = 2,
	EGuildCreateFailReason_MAX               = 3,
};

// Enum DuneSandbox.EHazardZoneAudioType
// NumValues: 0x0005
enum class EHazardZoneAudioType : uint8
{
	HazardZoneAudioType_None                 = 0,
	HazardZoneAudioType_ToxicPool            = 1,
	HazardZoneAudioType_QuickSand            = 2,
	HazardZoneAudioType_Count                = 3,
	HazardZoneAudioType_MAX                  = 4,
};

// Enum DuneSandbox.EDrinkActionType
// NumValues: 0x0003
enum class EDrinkActionType : uint8
{
	DrinkIfThirstyEnough                     = 0,
	DrinkToFillThirst                        = 1,
	EDrinkActionType_MAX                     = 2,
};

// Enum DuneSandbox.EShelterState
// NumValues: 0x0005
enum class EShelterState : uint8
{
	Unsheltered                              = 0,
	Sheltered                                = 1,
	Enclosed                                 = 2,
	Watersealed                              = 3,
	EShelterState_MAX                        = 4,
};

// Enum DuneSandbox.EIndicatorNewStyle
// NumValues: 0x0003
enum class EIndicatorNewStyle : uint8
{
	Diamond                                  = 0,
	Message                                  = 1,
	EIndicatorNewStyle_MAX                   = 2,
};

// Enum DuneSandbox.EIconPosition
// NumValues: 0x0004
enum class EIconPosition : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	EIconPosition_MAX                        = 3,
};

// Enum DuneSandbox.EContextPriorityLevel
// NumValues: 0x0007
enum class EContextPriorityLevel : uint8
{
	Custom                                   = 0,
	Character                                = 1,
	Vehicles                                 = 2,
	Building                                 = 3,
	GUI                                      = 4,
	Overlay                                  = 5,
	EContextPriorityLevel_MAX                = 6,
};

// Enum DuneSandbox.EInspectContext
// NumValues: 0x0003
enum class EInspectContext : uint8
{
	Default                                  = 0,
	FromChat                                 = 1,
	EInspectContext_MAX                      = 2,
};

// Enum DuneSandbox.EInteractionTraceType
// NumValues: 0x0004
enum class EInteractionTraceType : uint8
{
	LineTrace                                = 0,
	RangeCheck                               = 1,
	None                                     = 2,
	EInteractionTraceType_MAX                = 3,
};

// Enum DuneSandbox.EInvOverflowAction
// NumValues: 0x0003
enum class EInvOverflowAction : uint8
{
	SkipItem                                 = 0,
	DropToGround                             = 1,
	EInvOverflowAction_MAX                   = 2,
};

// Enum DuneSandbox.EInventoryAccessLevel
// NumValues: 0x0005
enum class EInventoryAccessLevel : uint8
{
	Unknown                                  = 0,
	NoAccess                                 = 1,
	ReadOnly                                 = 2,
	ReadWrite                                = 3,
	EInventoryAccessLevel_MAX                = 4,
};

// Enum DuneSandbox.EItemTier
// NumValues: 0x0009
enum class EItemTier : uint8
{
	None                                     = 0,
	Salvage                                  = 1,
	Copper                                   = 2,
	Iron                                     = 3,
	Steel                                    = 4,
	Aluminum                                 = 5,
	Duraluminum                              = 6,
	Plastanium                               = 7,
	EItemTier_MAX                            = 8,
};

// Enum DuneSandbox.EVolumeIconContext
// NumValues: 0x0003
enum class EVolumeIconContext : uint8
{
	InventoryGridItem                        = 0,
	InfoCard                                 = 1,
	EVolumeIconContext_MAX                   = 2,
};

// Enum DuneSandbox.EJourneyCategory
// NumValues: 0x0008
enum class EJourneyCategory : uint8
{
	Undefined                                = 0,
	Story                                    = 1,
	Survival                                 = 2,
	Dunipedia                                = 3,
	Tutorials                                = 4,
	Achievements                             = 5,
	Contracts                                = 6,
	EJourneyCategory_MAX                     = 7,
};

// Enum DuneSandbox.EJourneyContentPanel
// NumValues: 0x0005
enum class EJourneyContentPanel : uint8
{
	Standard                                 = 0,
	TutorialRepository                       = 1,
	Contracts                                = 2,
	Dunipedia                                = 3,
	EJourneyContentPanel_MAX                 = 4,
};

// Enum DuneSandbox.EJourneyCinematicType
// NumValues: 0x0007
enum class EJourneyCinematicType : uint8
{
	None                                     = 0,
	SpiceDream                               = 1,
	SpiceDream2                              = 2,
	AltarIntro                               = 3,
	AltarOutro                               = 4,
	ChallengeWakeUp                          = 5,
	EJourneyCinematicType_MAX                = 6,
};

// Enum DuneSandbox.EJourneyNodeEventState
// NumValues: 0x0004
enum class EJourneyNodeEventState : uint8
{
	Hidden                                   = 0,
	Revealed                                 = 1,
	Completed                                = 2,
	EJourneyNodeEventState_MAX               = 3,
};

// Enum DuneSandbox.EJourneyState
// NumValues: 0x0008
enum class EJourneyState : uint8
{
	Undefined                                = 0,
	FirstState                               = 1,
	Hidden                                   = 1,
	Locked                                   = 2,
	Available                                = 3,
	Progress                                 = 4,
	Complete                                 = 5,
	EJourneyState_MAX                        = 6,
};

// Enum DuneSandbox.ELandsraadStatus
// NumValues: 0x0004
enum class ELandsraadStatus : uint8
{
	Unavailable                              = 0,
	Disabled                                 = 1,
	Enabled                                  = 2,
	ELandsraadStatus_MAX                     = 3,
};

// Enum DuneSandbox.ELandsraadPeriod
// NumValues: 0x0007
enum class ELandsraadPeriod : uint8
{
	None                                     = 0,
	StartingTerm                             = 1,
	Suspended                                = 2,
	Competition                              = 3,
	Voting                                   = 4,
	EndingTerm                               = 5,
	ELandsraadPeriod_MAX                     = 6,
};

// Enum DuneSandbox.ELandsraadUITaskState
// NumValues: 0x0005
enum class ELandsraadUITaskState : uint8
{
	Unintialized                             = 0,
	Open                                     = 1,
	Won                                      = 2,
	Lost                                     = 3,
	ELandsraadUITaskState_MAX                = 4,
};

// Enum DuneSandbox.ELandsraadVendorType
// NumValues: 0x0006
enum class ELandsraadVendorType : uint8
{
	Unintialized                             = 0,
	Vehicle                                  = 1,
	Weapon                                   = 2,
	Armor                                    = 3,
	Utility                                  = 4,
	ELandsraadVendorType_MAX                 = 5,
};

// Enum DuneSandbox.ELootTableItemVariety
// NumValues: 0x0004
enum class ELootTableItemVariety : uint8
{
	RandomItems                              = 0,
	LockFirstRandomItem                      = 1,
	Unique                                   = 2,
	ELootTableItemVariety_MAX                = 3,
};

// Enum DuneSandbox.EPerPlayerLootType
// NumValues: 0x0004
enum class EPerPlayerLootType : uint8
{
	NotPerPlayer                             = 0,
	DetermineByZone                          = 1,
	AlwaysPerPlayer                          = 2,
	EPerPlayerLootType_MAX                   = 3,
};

// Enum DuneSandbox.EMeleeActionInputMode
// NumValues: 0x0004
enum class EMeleeActionInputMode : uint8
{
	InputPressed                             = 0,
	InputReleased                            = 1,
	None                                     = 2,
	EMeleeActionInputMode_MAX                = 3,
};

// Enum DuneSandbox.EMeleeActionInputKey
// NumValues: 0x0004
enum class EMeleeActionInputKey : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	None                                     = 2,
	EMeleeActionInputKey_MAX                 = 3,
};

// Enum DuneSandbox.EGameplayTagTarget
// NumValues: 0x0003
enum class EGameplayTagTarget : uint8
{
	Self                                     = 0,
	Target                                   = 1,
	EGameplayTagTarget_MAX                   = 2,
};

// Enum DuneSandbox.EMeleeRangeTestType
// NumValues: 0x0004
enum class EMeleeRangeTestType : uint8
{
	CloserThan                               = 0,
	FurtherThan                              = 1,
	InBetween                                = 2,
	EMeleeRangeTestType_MAX                  = 3,
};

// Enum DuneSandbox.EMeleeType
// NumValues: 0x0004
enum class EMeleeType : uint8
{
	Unarmed                                  = 0,
	Dagger                                   = 1,
	Gadget                                   = 2,
	EMeleeType_MAX                           = 3,
};

// Enum DuneSandbox.ENPCGroupFlags
// NumValues: 0x0004
enum class ENPCGroupFlags : uint8
{
	None                                     = 0,
	NoDuplicates                             = 1,
	IsBoss                                   = 2,
	ENPCGroupFlags_MAX                       = 3,
};

// Enum DuneSandbox.ENpeTriggerType
// NumValues: 0x0003
enum class ENpeTriggerType : uint8
{
	Prompt                                   = 0,
	Complete                                 = 1,
	ENpeTriggerType_MAX                      = 2,
};

// Enum DuneSandbox.EPartyActionResult
// NumValues: 0x0009
enum class EPartyActionResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	Fail_NotEnoughPermissions                = 101,
	Fail_NotInParty                          = 102,
	Fail_AlreadyLeader                       = 103,
	Fail_PartyDoesNotExist                   = 104,
	Fail_PlayerOffline                       = 105,
	EPartyActionResult_MAX                   = 106,
};

// Enum DuneSandbox.EPartyActionInviteResult
// NumValues: 0x000C
enum class EPartyActionInviteResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	Fail_InSameParty                         = 101,
	Fail_InAnotherParty                      = 102,
	Fail_PartyFull                           = 103,
	Fail_NeedLeaderPermission                = 104,
	Fail_AlreadyInvited                      = 105,
	Fail_UserOffline                         = 106,
	Fail_MaxInviteReached                    = 107,
	Fail_PlayerBlocked                       = 108,
	EPartyActionInviteResult_MAX             = 109,
};

// Enum DuneSandbox.EPartyAcceptInviteResult
// NumValues: 0x0006
enum class EPartyAcceptInviteResult : uint8
{
	Success                                  = 0,
	QueryError                               = 1,
	NonExistingInvite                        = 2,
	NonExistingParty                         = 3,
	PartyFull                                = 4,
	EPartyAcceptInviteResult_MAX             = 5,
};

// Enum DuneSandbox.EPartyInviteNotificationTypes
// NumValues: 0x000F
enum class EPartyInviteNotificationTypes : uint8
{
	None                                     = 0,
	Send                                     = 1,
	Received                                 = 2,
	Declined                                 = 3,
	Timeout                                  = 4,
	Cancelled                                = 5,
	InviteFailed_NameNotFound                = 6,
	InviteFailed_InviteAlreadyExists         = 7,
	InviteFailed_CanNotInviteSelf            = 8,
	InviteFailed_PlayerAlreadyInGroup        = 9,
	InviteFailed_FlsIdNotFound               = 10,
	InviteFailed_PartyIsFull                 = 11,
	InviteFailed_NonExistingParty            = 12,
	InviteFailed_NonExistingInvite           = 13,
	EPartyInviteNotificationTypes_MAX        = 14,
};

// Enum DuneSandbox.EPartyNotificationTypes
// NumValues: 0x000A
enum class EPartyNotificationTypes : uint8
{
	None                                     = 0,
	Error                                    = 1,
	LeaderChangedToSomeoneElse               = 2,
	LeaderChangedToLocalPlayer               = 3,
	PartyJoined                              = 4,
	PartyLeft                                = 5,
	PartyDisband                             = 6,
	PartyMemberJoined                        = 7,
	PartyMemberLeft                          = 8,
	EPartyNotificationTypes_MAX              = 9,
};

// Enum DuneSandbox.EInviteListType
// NumValues: 0x0004
enum class EInviteListType : uint8
{
	All                                      = 0,
	Sent                                     = 1,
	Received                                 = 2,
	EInviteListType_MAX                      = 3,
};

// Enum DuneSandbox.EPartyMemberStatus
// NumValues: 0x0006
enum class EPartyMemberStatus : uint8
{
	Normal                                   = 0,
	Dead                                     = 1,
	DBND                                     = 2,
	InGroundVehicle                          = 3,
	InFlyingVehicle                          = 4,
	EPartyMemberStatus_MAX                   = 5,
};

// Enum DuneSandbox.EPartyGroupInviteResponseType
// NumValues: 0x0005
enum class EPartyGroupInviteResponseType : uint8
{
	Canceled                                 = 0,
	Accepted                                 = 1,
	Rejected                                 = 2,
	Expired                                  = 3,
	EPartyGroupInviteResponseType_MAX        = 4,
};

// Enum DuneSandbox.EPartyGroupLeaveType
// NumValues: 0x0004
enum class EPartyGroupLeaveType : uint8
{
	Self                                     = 0,
	Disconnected                             = 1,
	Excluded                                 = 2,
	EPartyGroupLeaveType_MAX                 = 3,
};

// Enum DuneSandbox.EPatrolShipMovementMode
// NumValues: 0x0003
enum class EPatrolShipMovementMode : uint8
{
	STATIONARY                               = 0,
	SPLINE                                   = 1,
	EPatrolShipMovementMode_MAX              = 2,
};

// Enum DuneSandbox.EPatrolShipAudioEvent
// NumValues: 0x0009
enum class EPatrolShipAudioEvent : uint8
{
	PatrolStarted                            = 0,
	PatrolEnded                              = 1,
	PatrolLoop                               = 2,
	SearchlightActivated                     = 3,
	SearchlightDeactivated                   = 4,
	TargetAcquired                           = 5,
	CombatMusicOn                            = 6,
	CombatMusicOff                           = 7,
	EPatrolShipAudioEvent_MAX                = 8,
};

// Enum DuneSandbox.EPatrolShipMovementState
// NumValues: 0x0007
enum class EPatrolShipMovementState : uint8
{
	InvalidState                             = 0,
	Preparing                                = 1,
	Moving                                   = 2,
	NotMoving                                = 3,
	AppearanceAnimationPlaying               = 4,
	DepartureAnimationPlaying                = 5,
	MAX                                      = 6,
};

// Enum DuneSandbox.EPatrolShipAttackState
// NumValues: 0x0006
enum class EPatrolShipAttackState : uint8
{
	Idle                                     = 0,
	Cooldown                                 = 1,
	Searching                                = 2,
	Alerted                                  = 3,
	TrackingTarget                           = 4,
	MAX                                      = 5,
};

// Enum DuneSandbox.EPentashieldSurfaceOrientation
// NumValues: 0x0003
enum class EPentashieldSurfaceOrientation : uint8
{
	Vertical                                 = 0,
	Horizontal                               = 1,
	EPentashieldSurfaceOrientation_MAX       = 2,
};

// Enum DuneSandbox.EAIRangeFlag
// NumValues: 0x0004
enum class EAIRangeFlag : uint8
{
	None                                     = 0,
	WithinRemainCombatRange                  = 1,
	WithinAwarenessRange                     = 2,
	EAIRangeFlag_MAX                         = 3,
};

// Enum DuneSandbox.EPerceptionChannel
// NumValues: 0x0008
enum class EPerceptionChannel : uint8
{
	Sight                                    = 0,
	Damage                                   = 1,
	Squad                                    = 2,
	FlyBy                                    = 3,
	WeaponFire                               = 4,
	Footstep                                 = 5,
	Bark                                     = 6,
	Max                                      = 7,
};

// Enum DuneSandbox.EPerceptionChannelFlag
// NumValues: 0x0009
enum class EPerceptionChannelFlag : uint8
{
	None                                     = 0,
	Sight                                    = 1,
	Damage                                   = 2,
	Squad                                    = 4,
	FlyBy                                    = 8,
	WeaponFire                               = 16,
	Footstep                                 = 32,
	Bark                                     = 64,
	EPerceptionChannelFlag_MAX               = 65,
};

// Enum DuneSandbox.ESenseUpdate
// NumValues: 0x0003
enum class ESenseUpdate : uint8
{
	Gained                                   = 0,
	Lost                                     = 1,
	ESenseUpdate_MAX                         = 2,
};

// Enum DuneSandbox.EPermissionActionResult
// NumValues: 0x0004
enum class EPermissionActionResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	EPermissionActionResult_MAX              = 101,
};

// Enum DuneSandbox.EPermissionType
// NumValues: 0x001D
enum class EPermissionType : uint8
{
	None                                     = 0,
	BuildingViewOwnership                    = 1,
	BuildingInvitePlayers                    = 2,
	BuildingRemovePlayers                    = 3,
	BuildingPromoteDemotePlayers             = 4,
	BuildingBaseAccess                       = 5,
	BuildingDeployDeployables                = 6,
	BuildingManagement                       = 7,
	BuildingMoveRemoveTotem                  = 8,
	BuildingAbandonTotem                     = 9,
	BuildingVehicleDoesntDecay               = 10,
	BuildingPlaceableManagement              = 11,
	VehicleViewOwnership                     = 50,
	VehicleInvitePlayers                     = 51,
	VehicleRemovePlayers                     = 52,
	VehiclePromoteDemotePlayers              = 53,
	VehicleBoardDriver                       = 54,
	VehicleBoardPassenger                    = 55,
	VehicleBoardTurret                       = 56,
	VehicleAssembly                          = 57,
	VehicleDisassembly                       = 58,
	VehicleManagement                        = 59,
	VehicleManagementStatus                  = 60,
	VehicleManagementUtilities               = 61,
	VehicleManagementTransport               = 62,
	VehicleCustomize                         = 63,
	VehicleBackupTool                        = 64,
	Respawn                                  = 100,
	EPermissionType_MAX                      = 101,
};

// Enum DuneSandbox.EPermissionActorType
// NumValues: 0x0006
enum class EPermissionActorType : uint8
{
	None                                     = 0,
	Placeable                                = 1,
	Vehicle                                  = 2,
	Totem                                    = 3,
	TotemSmall                               = 4,
	EPermissionActorType_MAX                 = 5,
};

// Enum DuneSandbox.EIsRelevantForPermissionContext
// NumValues: 0x0004
enum class EIsRelevantForPermissionContext : uint8
{
	CheckingPermission                       = 0,
	GettingChildActors                       = 1,
	GettingActorType                         = 2,
	EIsRelevantForPermissionContext_MAX      = 3,
};

// Enum DuneSandbox.EDoorType
// NumValues: 0x0004
enum class EDoorType : uint8
{
	None                                     = 0,
	Door                                     = 1,
	Hatch                                    = 2,
	EDoorType_MAX                            = 3,
};

// Enum DuneSandbox.EPlaceableMenuTabs
// NumValues: 0x000E
enum class EPlaceableMenuTabs : uint8
{
	None                                     = 0,
	Recyler                                  = 1,
	Crafting                                 = 2,
	RepairStation                            = 3,
	ModdingStation                           = 4,
	BloodPurifier                            = 5,
	Deathstill                               = 6,
	FuelPoweredPlaceable                     = 7,
	GeneralSettings                          = 8,
	Water                                    = 9,
	Inventory                                = 10,
	Permissions                              = 11,
	TotemOverview                            = 12,
	EPlaceableMenuTabs_MAX                   = 13,
};

// Enum DuneSandbox.EPlaceableRotationBuildingMode
// NumValues: 0x0004
enum class EPlaceableRotationBuildingMode : uint8
{
	IndepedentRotation                       = 0,
	RelativeToPlayerFacing                   = 1,
	Count                                    = 2,
	EPlaceableRotationBuildingMode_MAX       = 3,
};

// Enum DuneSandbox.EPlayerActionResult
// NumValues: 0x0004
enum class EPlayerActionResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	EPlayerActionResult_MAX                  = 101,
};

// Enum DuneSandbox.EPlayerActionFloodControlBucketType
// NumValues: 0x0009
enum class EPlayerActionFloodControlBucketType : uint8
{
	Common                                   = 0,
	Permission                               = 1,
	Ping                                     = 2,
	Dialogue                                 = 3,
	PlayerInfoRequest                        = 4,
	InventoryAction                          = 5,
	ExchangeOrderQueries                     = 6,
	PermissionDiscardAllButLast              = 7,
	EPlayerActionFloodControlBucketType_MAX  = 8,
};

// Enum DuneSandbox.EPlayerActionFloodControlBucketFailMode
// NumValues: 0x0003
enum class EPlayerActionFloodControlBucketFailMode : uint8
{
	FailAction                               = 0,
	DiscardAllButLast                        = 1,
	EPlayerActionFloodControlBucketFailMode_MAX = 2,
};

// Enum DuneSandbox.ELevelSequencePlayStatus
// NumValues: 0x0009
enum class ELevelSequencePlayStatus : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	Failed_EarlyOut                          = 2,
	Failed_InvalidSequenceActor              = 3,
	Failed_InvalidSequencePlayer             = 4,
	Failed_InvalidSequenceAsset              = 5,
	Failed_LevelSequenceActorWasNotCreated   = 6,
	Failed_CreatedLevelSequencePlayerInValid = 7,
	ELevelSequencePlayStatus_MAX             = 8,
};

// Enum DuneSandbox.ELevelSequenceLoadStatus
// NumValues: 0x0003
enum class ELevelSequenceLoadStatus : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	ELevelSequenceLoadStatus_MAX             = 2,
};

// Enum DuneSandbox.ELevelSequenceState
// NumValues: 0x0004
enum class ELevelSequenceState : uint8
{
	Unloaded                                 = 0,
	Loading                                  = 1,
	Loaded                                   = 2,
	ELevelSequenceState_MAX                  = 3,
};

// Enum DuneSandbox.EPlayerInviteTelemetryState
// NumValues: 0x0004
enum class EPlayerInviteTelemetryState : uint8
{
	Unknown                                  = 0,
	Accepted                                 = 1,
	Rejected                                 = 2,
	EPlayerInviteTelemetryState_MAX          = 3,
};

// Enum DuneSandbox.EPlayerIdentifierType
// NumValues: 0x0006
enum class EPlayerIdentifierType : uint8
{
	None                                     = 0,
	ByCharacterName                          = 1,
	ByFlsId                                  = 2,
	ByPlayerId                               = 3,
	ByFuncomId                               = 4,
	EPlayerIdentifierType_MAX                = 5,
};

// Enum DuneSandbox.EInputState
// NumValues: 0x0005
enum class EInputState : uint8
{
	NotPressed                               = 0,
	Pressed                                  = 1,
	JustReleased                             = 2,
	JustPressed                              = 3,
	EInputState_MAX                          = 4,
};

// Enum DuneSandbox.EPlayerConnectionStatus
// NumValues: 0x0004
enum class EPlayerConnectionStatus : uint8
{
	Offline                                  = 0,
	LoggingOut                               = 1,
	Online                                   = 2,
	EPlayerConnectionStatus_MAX              = 3,
};

// Enum DuneSandbox.EPlayerSpawnType
// NumValues: 0x0006
enum class EPlayerSpawnType : uint8
{
	Resume                                   = 0,
	Default                                  = 1,
	Respawn                                  = 2,
	Travel                                   = 3,
	Invalid                                  = 4,
	EPlayerSpawnType_MAX                     = 5,
};

// Enum DuneSandbox.EKnockbackDirectionType
// NumValues: 0x0003
enum class EKnockbackDirectionType : uint8
{
	RadialPush                               = 0,
	RadialPull                               = 1,
	EKnockbackDirectionType_MAX              = 2,
};

// Enum DuneSandbox.EMeleeTargetType
// NumValues: 0x0004
enum class EMeleeTargetType : uint8
{
	None                                     = 0,
	SoftLock                                 = 1,
	DBNO                                     = 2,
	EMeleeTargetType_MAX                     = 3,
};

// Enum DuneSandbox.EResourceFieldKind
// NumValues: 0x0003
enum class EResourceFieldKind : uint8
{
	FlourSand                                = 0,
	Spice                                    = 1,
	EResourceFieldKind_MAX                   = 2,
};

// Enum DuneSandbox.EResourcePointTrace
// NumValues: 0x0004
enum class EResourcePointTrace : uint8
{
	Skip                                     = 0,
	MoveUpwards                              = 1,
	Ignore                                   = 2,
	EResourcePointTrace_MAX                  = 3,
};

// Enum DuneSandbox.EAnalysisResultType
// NumValues: 0x0006
enum class EAnalysisResultType : uint8
{
	HealthPercentage                         = 0,
	HydrationPercentage                      = 1,
	EncumbranceVolume                        = 2,
	ResourceQuantity                         = 3,
	Dew                                      = 4,
	EAnalysisResultType_MAX                  = 5,
};

// Enum DuneSandbox.EScannerAnalysisType
// NumValues: 0x0004
enum class EScannerAnalysisType : uint8
{
	None                                     = 0,
	Basic                                    = 1,
	Cutteray                                 = 2,
	EScannerAnalysisType_MAX                 = 3,
};

// Enum DuneSandbox.EScannerMountingType
// NumValues: 0x0005
enum class EScannerMountingType : uint8
{
	Innate                                   = 0,
	Handheld                                 = 1,
	Vehicle                                  = 2,
	Building                                 = 3,
	EScannerMountingType_MAX                 = 4,
};

// Enum DuneSandbox.ESpatialMapFlags
// NumValues: 0x0005
enum class ESpatialMapFlags : uint8
{
	NONE                                     = 0,
	Static                                   = 1,
	Dynamic                                  = 2,
	LongRange                                = 4,
	ESpatialMapFlags_MAX                     = 5,
};

// Enum DuneSandbox.ESecurityZoneCriminalType
// NumValues: 0x0004
enum class ESecurityZoneCriminalType : uint8
{
	Innocent                                 = 0,
	Criminal                                 = 1,
	Outlaw                                   = 2,
	ESecurityZoneCriminalType_MAX            = 3,
};

// Enum DuneSandbox.ESecurityZoneRulesType
// NumValues: 0x0004
enum class ESecurityZoneRulesType : uint8
{
	PvP                                      = 0,
	PvE                                      = 1,
	City                                     = 2,
	ESecurityZoneRulesType_MAX               = 3,
};

// Enum DuneSandbox.EShieldState
// NumValues: 0x0006
enum class EShieldState : uint8
{
	Disabled                                 = 0,
	Idle                                     = 1,
	Active                                   = 2,
	ManualCharge                             = 3,
	AutoCharge                               = 4,
	EShieldState_MAX                         = 5,
};

// Enum DuneSandbox.EShieldType
// NumValues: 0x0005
enum class EShieldType : uint8
{
	NoShield                                 = 0,
	FullShield                               = 1,
	HalfShield                               = 2,
	Invalid                                  = 255,
	EShieldType_MAX                          = 256,
};

// Enum DuneSandbox.EPenetrationType
// NumValues: 0x0003
enum class EPenetrationType : uint8
{
	BurrowDart                               = 0,
	SlowBlade                                = 1,
	EPenetrationType_MAX                     = 2,
};

// Enum DuneSandbox.EShowroomId
// NumValues: 0x0005
enum class EShowroomId : uint8
{
	Character                                = 0,
	Map                                      = 1,
	Item                                     = 2,
	Building                                 = 3,
	EShowroomId_MAX                          = 4,
};

// Enum DuneSandbox.EInputHintLocation
// NumValues: 0x0005
enum class EInputHintLocation : uint8
{
	Left                                     = 0,
	Top                                      = 1,
	Right                                    = 2,
	Bottom                                   = 3,
	Max                                      = 4,
};

// Enum DuneSandbox.ESkillType
// NumValues: 0x0004
enum class ESkillType : uint8
{
	Ability                                  = 0,
	Technique                                = 1,
	Attribute                                = 2,
	ESkillType_MAX                           = 3,
};

// Enum DuneSandbox.EPlayerInVehicleStatus
// NumValues: 0x0004
enum class EPlayerInVehicleStatus : uint8
{
	Empty                                    = 0,
	OnFoot                                   = 1,
	InVehicle                                = 2,
	EPlayerInVehicleStatus_MAX               = 3,
};

// Enum DuneSandbox.EPlayerHealthStatus
// NumValues: 0x0004
enum class EPlayerHealthStatus : uint8
{
	Alive                                    = 0,
	Downed                                   = 1,
	Dead                                     = 2,
	EPlayerHealthStatus_MAX                  = 3,
};

// Enum DuneSandbox.ESocialMenuFriendsListCategories
// NumValues: 0x000A
enum class ESocialMenuFriendsListCategories : uint8
{
	None                                     = 0,
	OnlineSameBattlegroup                    = 1,
	OnlineDifferentBattlegroup               = 2,
	Offline                                  = 3,
	Blocked                                  = 4,
	InviteInbound                            = 5,
	InviteOutbound                           = 6,
	SearchFriend                             = 7,
	SearchGuildPlayer                        = 8,
	ESocialMenuFriendsListCategories_MAX     = 9,
};

// Enum DuneSandbox.ESocialMenuFriendsListButtonTypes
// NumValues: 0x000A
enum class ESocialMenuFriendsListButtonTypes : uint8
{
	None                                     = 0,
	AddToParty                               = 1,
	SendFriendInvite                         = 2,
	AcceptFriendInvite                       = 3,
	DeclineFriendInvite                      = 4,
	CancelFriendInvite                       = 5,
	Whisper                                  = 6,
	AddToGuild                               = 7,
	VisitFriend                              = 8,
	ESocialMenuFriendsListButtonTypes_MAX    = 9,
};

// Enum DuneSandbox.ESpawnLocationType
// NumValues: 0x0003
enum class ESpawnLocationType : uint8
{
	Transform                                = 0,
	PersistentActor                          = 1,
	ESpawnLocationType_MAX                   = 2,
};

// Enum DuneSandbox.ESpiceState
// NumValues: 0x0007
enum class ESpiceState : uint8
{
	SpiceInvalidState                        = 0,
	SpiceEmptyState                          = 1,
	SpiceDormantState                        = 2,
	SpiceSaturatedState                      = 3,
	SpiceWithdrawalState                     = 4,
	SpicePrescienceState                     = 5,
	ESpiceState_MAX                          = 6,
};

// Enum DuneSandbox.ESpiceAddictionSystemStatus
// NumValues: 0x0005
enum class ESpiceAddictionSystemStatus : uint8
{
	FullyEnabled                             = 0,
	AddictionDisabled                        = 1,
	FullyDisabledOnCharacter                 = 2,
	FullyDisabledOnServer                    = 4,
	ESpiceAddictionSystemStatus_MAX          = 5,
};

// Enum DuneSandbox.ESpiceVisionEnabledStatus
// NumValues: 0x0005
enum class ESpiceVisionEnabledStatus : uint8
{
	Disabled                                 = 0,
	EnabledOnCharacter                       = 1,
	EnabledServerWide                        = 2,
	FullyEnabled                             = 3,
	ESpiceVisionEnabledStatus_MAX            = 4,
};

// Enum DuneSandbox.EDataChangeHandlingPolicy
// NumValues: 0x0004
enum class EDataChangeHandlingPolicy : uint8
{
	DoNothing                                = 0,
	ReObserve                                = 1,
	Forget                                   = 2,
	EDataChangeHandlingPolicy_MAX            = 3,
};

// Enum DuneSandbox.ESubtitlesFontSize
// NumValues: 0x0005
enum class ESubtitlesFontSize : uint8
{
	Small                                    = 0,
	Default                                  = 1,
	Large                                    = 2,
	COUNT                                    = 3,
	ESubtitlesFontSize_MAX                   = 4,
};

// Enum DuneSandbox.ESurfaceSnappingType
// NumValues: 0x0006
enum class ESurfaceSnappingType : uint8
{
	None                                     = 0,
	ToSurface                                = 1,
	ToSurfaceNormal                          = 2,
	ToLowestSurfaceInArea                    = 3,
	ToTopmostSurfaceInArea                   = 4,
	ESurfaceSnappingType_MAX                 = 5,
};

// Enum DuneSandbox.ETaxInvoiceStatus
// NumValues: 0x0005
enum class ETaxInvoiceStatus : uint8
{
	Paid                                     = 0,
	Unpaid                                   = 1,
	Overdue                                  = 2,
	Defaulted                                = 3,
	ETaxInvoiceStatus_MAX                    = 4,
};

// Enum DuneSandbox.EKnowledgeInfoFlag
// NumValues: 0x0005
enum class EKnowledgeInfoFlag : uint8
{
	None                                     = 0,
	Existence                                = 1,
	Recipe                                   = 2,
	Location                                 = 4,
	EKnowledgeInfoFlag_MAX                   = 5,
};

// Enum DuneSandbox.EKnowledgeInfoSource
// NumValues: 0x000B
enum class EKnowledgeInfoSource : uint8
{
	None                                     = 0,
	Cheat                                    = 1,
	MnemonicRecall                           = 2,
	Crafting                                 = 3,
	ItemPickup                               = 4,
	LorePickup                               = 5,
	SchematicPickup                          = 6,
	Bought                                   = 7,
	Dialogue                                 = 8,
	AutoScript                               = 9,
	EKnowledgeInfoSource_MAX                 = 10,
};

// Enum DuneSandbox.EIntelPointSource
// NumValues: 0x0008
enum class EIntelPointSource : uint8
{
	None                                     = 0,
	LevelUp                                  = 1,
	Pickup                                   = 2,
	Contract                                 = 3,
	Cheat                                    = 4,
	AutoScript                               = 5,
	Refund                                   = 6,
	EIntelPointSource_MAX                    = 7,
};

// Enum DuneSandbox.EItemKeyType
// NumValues: 0x0003
enum class EItemKeyType : uint8
{
	ItemTemplateId                           = 0,
	BuildableType                            = 1,
	EItemKeyType_MAX                         = 2,
};

// Enum DuneSandbox.ETemporaryLootSpawnerSettingsSource
// NumValues: 0x0003
enum class ETemporaryLootSpawnerSettingsSource : uint8
{
	GlobalDistributionSystem                 = 0,
	LootTable                                = 1,
	ETemporaryLootSpawnerSettingsSource_MAX  = 2,
};

// Enum DuneSandbox.ESpawningController
// NumValues: 0x0003
enum class ESpawningController : uint8
{
	NoController                             = 0,
	Totem                                    = 1,
	ESpawningController_MAX                  = 2,
};

// Enum DuneSandbox.ETerrainBlockStreamingFlags
// NumValues: 0x000A
enum class ETerrainBlockStreamingFlags : uint8
{
	None                                     = 0,
	VisibleByDefault                         = 1,
	BlockingLoad                             = 2,
	UsesStreamingVolume                      = 4,
	UsesStreamingDistance                    = 8,
	Lod1Only                                 = 16,
	Server                                   = 4,
	EditorGizmo                              = 3,
	Client                                   = 12,
	ETerrainBlockStreamingFlags_MAX          = 17,
};

// Enum DuneSandbox.ETiledLandscapeSnappingType
// NumValues: 0x0004
enum class ETiledLandscapeSnappingType : uint8
{
	None                                     = 0,
	Tile                                     = 1,
	BiomePreset                              = 2,
	ETiledLandscapeSnappingType_MAX          = 3,
};

// Enum DuneSandbox.EToastNotificationLevel
// NumValues: 0x0007
enum class EToastNotificationLevel : uint8
{
	Positive1                                = 0,
	Positive2                                = 1,
	Positive3                                = 2,
	Negative1                                = 3,
	Negative2                                = 4,
	Negative3                                = 5,
	EToastNotificationLevel_MAX              = 6,
};

// Enum DuneSandbox.ECircuitElementFlowType
// NumValues: 0x0004
enum class ECircuitElementFlowType : uint8
{
	Input                                    = 0,
	Output                                   = 1,
	InputOutput                              = 2,
	ECircuitElementFlowType_MAX              = 3,
};

// Enum DuneSandbox.ETotemType
// NumValues: 0x0003
enum class ETotemType : uint8
{
	Player                                   = 0,
	Npc                                      = 1,
	ETotemType_MAX                           = 2,
};

// Enum DuneSandbox.ETotemOverviewStateType
// NumValues: 0x0004
enum class ETotemOverviewStateType : uint8
{
	OK                                       = 0,
	Warning                                  = 1,
	Error                                    = 2,
	ETotemOverviewStateType_MAX              = 3,
};

// Enum DuneSandbox.EToxicityFilteringExternalService
// NumValues: 0x0003
enum class EToxicityFilteringExternalService : uint8
{
	None                                     = 0,
	GGWP                                     = 1,
	EToxicityFilteringExternalService_MAX    = 2,
};

// Enum DuneSandbox.EToxicityFilteringTextType
// NumValues: 0x0003
enum class EToxicityFilteringTextType : uint8
{
	Name                                     = 0,
	GenericText                              = 1,
	EToxicityFilteringTextType_MAX           = 2,
};

// Enum DuneSandbox.ETraceUtilitiesTarget
// NumValues: 0x0006
enum class ETraceUtilitiesTarget : uint8
{
	Anything                                 = 0,
	LandscapeOnly                            = 1,
	LandscapePreferred                       = 2,
	LandscapeOrBlockingOnly                  = 3,
	All                                      = 4,
	ETraceUtilitiesTarget_MAX                = 5,
};

// Enum DuneSandbox.ETravelRequirementType
// NumValues: 0x0009
enum class ETravelRequirementType : uint8
{
	Invalid                                  = 0,
	Fuel                                     = 1,
	Water                                    = 2,
	NavigationType                           = 3,
	HarnessedVehicle                         = 4,
	JourneyCompleted                         = 6,
	SavedVehicle                             = 7,
	JourneyNotCompleted                      = 8,
	ETravelRequirementType_MAX               = 9,
};

// Enum DuneSandbox.ETravelNavigationType
// NumValues: 0x0006
enum class ETravelNavigationType : uint8
{
	None                                     = 0,
	Air                                      = 1,
	Ground                                   = 2,
	Foot                                     = 4,
	Passenger                                = 8,
	ETravelNavigationType_MAX                = 9,
};

// Enum DuneSandbox.ETravelHarnessedVehicleType
// NumValues: 0x0004
enum class ETravelHarnessedVehicleType : uint8
{
	NotAllowed                               = 0,
	OnlyUnoccupied                           = 1,
	AllAllowed                               = 2,
	ETravelHarnessedVehicleType_MAX          = 3,
};

// Enum DuneSandbox.EFrameCapOption
// NumValues: 0x0006
enum class EFrameCapOption : uint8
{
	Cap30                                    = 30,
	Cap45                                    = 45,
	Cap60                                    = 60,
	Cap120                                   = 120,
	CapUnlimited                             = 0,
	EFrameCapOption_MAX                      = 121,
};

// Enum DuneSandbox.EVehicleBackupToolNotificationType
// NumValues: 0x0010
enum class EVehicleBackupToolNotificationType : uint8
{
	None                                     = 0,
	StoreSuccess                             = 1,
	StoreFail                                = 2,
	StoreFailRange                           = 3,
	StoreFailAlreadyStored                   = 4,
	StoreFailInvalidVehicle                  = 5,
	StoreFailInventory                       = 6,
	StoreFailOwnership                       = 7,
	RestoreSuccess                           = 8,
	RestoreFail                              = 9,
	RestoreFailNoStoredVehicle               = 10,
	TemporarilyDisabled                      = 11,
	StoreFailPassenger                       = 12,
	StoreFailHarnessed                       = 13,
	StoreFailAssembly                        = 14,
	EVehicleBackupToolNotificationType_MAX   = 15,
};

// Enum DuneSandbox.EVehicleCustomizationType
// NumValues: 0x0003
enum class EVehicleCustomizationType : uint8
{
	Variants                                 = 0,
	Swatches                                 = 1,
	EVehicleCustomizationType_MAX            = 2,
};

// Enum DuneSandbox.EVehicleLoadoutAction
// NumValues: 0x0005
enum class EVehicleLoadoutAction : uint8
{
	SpawnVehicleModule                       = 0,
	SpawnAndDistributeVehicleModule          = 1,
	DeleteVehicleModule                      = 2,
	UpdateSeatAssignments                    = 3,
	EVehicleLoadoutAction_MAX                = 4,
};

// Enum DuneSandbox.EVehicleBoostType
// NumValues: 0x0005
enum class EVehicleBoostType : uint8
{
	Hold                                     = 0,
	Toggle                                   = 1,
	OneShot                                  = 2,
	Count                                    = 3,
	EVehicleBoostType_MAX                    = 4,
};

// Enum DuneSandbox.EVehicleAccelerationType
// NumValues: 0x0007
enum class EVehicleAccelerationType : uint8
{
	VerySlow                                 = 0,
	Slow                                     = 1,
	Medium                                   = 2,
	Fast                                     = 3,
	VeryFast                                 = 4,
	Count                                    = 5,
	EVehicleAccelerationType_MAX             = 6,
};

// Enum DuneSandbox.EVehicleWingsType
// NumValues: 0x0006
enum class EVehicleWingsType : uint8
{
	Normal                                   = 0,
	Speed                                    = 1,
	Strafe                                   = 2,
	Climb                                    = 3,
	Count                                    = 4,
	EVehicleWingsType_MAX                    = 5,
};

// Enum DuneSandbox.EVehicleRefuelNotificationType
// NumValues: 0x0004
enum class EVehicleRefuelNotificationType : uint8
{
	None                                     = 0,
	NoMaterials                              = 1,
	AlreadyFull                              = 2,
	EVehicleRefuelNotificationType_MAX       = 3,
};

// Enum DuneSandbox.EVehicleStatBarState
// NumValues: 0x0004
enum class EVehicleStatBarState : uint8
{
	Default                                  = 0,
	Critical                                 = 1,
	Disabled                                 = 2,
	EVehicleStatBarState_MAX                 = 3,
};

// Enum DuneSandbox.EVoiceChatTxMode
// NumValues: 0x0004
enum class EVoiceChatTxMode : uint8
{
	None                                     = 0,
	Proximity                                = 1,
	Radio                                    = 2,
	EVoiceChatTxMode_MAX                     = 3,
};

// Enum DuneSandbox.EVoiceChatInputMethod
// NumValues: 0x0005
enum class EVoiceChatInputMethod : uint8
{
	None                                     = 0,
	PushToTalk                               = 1,
	Toggle                                   = 2,
	Count                                    = 3,
	EVoiceChatInputMethod_MAX                = 4,
};

// Enum DuneSandbox.ECharacterBulletMagnetismMode
// NumValues: 0x0004
enum class ECharacterBulletMagnetismMode : uint8
{
	None                                     = 0,
	Controller                               = 1,
	Mouse                                    = 2,
	ECharacterBulletMagnetismMode_MAX        = 3,
};

// Enum DuneSandbox.EDamageBlockType
// NumValues: 0x0005
enum class EDamageBlockType : uint8
{
	None                                     = 0,
	Shielded                                 = 1,
	Deflection                               = 2,
	Immunity                                 = 3,
	EDamageBlockType_MAX                     = 4,
};

// Enum DuneSandbox.EWeaponModFrame
// NumValues: 0x0014
enum class EWeaponModFrame : uint8
{
	None                                     = 0,
	Carbine                                  = 1,
	Pistol                                   = 2,
	Dart                                     = 3,
	Lasgun                                   = 4,
	FlameThrower                             = 5,
	Scattergun                               = 6,
	Rifle                                    = 7,
	Lmg                                      = 8,
	ShortBlade                               = 9,
	LongBlade                                = 10,
	CutterRay                                = 11,
	BuildingTool                             = 12,
	DewReaper                                = 13,
	Scanner                                  = 14,
	Vision                                   = 15,
	WeldingTorch                             = 16,
	VehicleBackupTool                        = 17,
	COUNT                                    = 18,
	EWeaponModFrame_MAX                      = 19,
};

// Enum DuneSandbox.EWeaponModAmmo
// NumValues: 0x0009
enum class EWeaponModAmmo : uint8
{
	Basic                                    = 0,
	Spread                                   = 1,
	Sniper                                   = 2,
	Pen                                      = 3,
	Needle                                   = 4,
	Poison                                   = 5,
	Stun                                     = 6,
	COUNT                                    = 7,
	EWeaponModAmmo_MAX                       = 8,
};

// Enum DuneSandbox.EWeaponFailureReason
// NumValues: 0x0004
enum class EWeaponFailureReason : uint8
{
	WeaponBroken                             = 0,
	WeaponVenting                            = 1,
	ShieldActive                             = 2,
	EWeaponFailureReason_MAX                 = 3,
};

// Enum DuneSandbox.EWheelShape
// NumValues: 0x0005
enum class EWheelShape : uint8
{
	Sphere                                   = 0,
	Capsule                                  = 1,
	Line                                     = 2,
	Box                                      = 3,
	EWheelShape_MAX                          = 4,
};

// Enum DuneSandbox.EAbilityState
// NumValues: 0x0006
enum class EAbilityState : uint8
{
	Ready                                    = 0,
	Active                                   = 1,
	BlockedCooldown                          = 2,
	BlockedCost                              = 3,
	BlockedOther                             = 4,
	MAX                                      = 5,
};

// Enum DuneSandbox.ETelemetryAbilityPhase
// NumValues: 0x0003
enum class ETelemetryAbilityPhase : uint8
{
	Casting                                  = 0,
	Execution                                = 1,
	ETelemetryAbilityPhase_MAX               = 2,
};

// Enum DuneSandbox.ETelemetryAbilityOutcome
// NumValues: 0x0003
enum class ETelemetryAbilityOutcome : uint8
{
	Success                                  = 0,
	Interrupted                              = 1,
	ETelemetryAbilityOutcome_MAX             = 2,
};

// Enum DuneSandbox.EDuneAbilityProperty
// NumValues: 0x0003
enum class EDuneAbilityProperty : uint8
{
	RadiationPill_Duration                   = 0,
	RadiationPill_RadiationMitigation        = 1,
	RadiationPill_MAX                        = 2,
};

// Enum DuneSandbox.ETargetValidity
// NumValues: 0x0004
enum class ETargetValidity : uint8
{
	Valid                                    = 0,
	FallbackValid                            = 1,
	InValid                                  = 2,
	MAX                                      = 3,
};

// Enum DuneSandbox.EDamageOutcome
// NumValues: 0x0004
enum class EDamageOutcome : uint8
{
	NoDamage                                 = 0,
	ReducedDamage                            = 1,
	FullDamage                               = 2,
	EDamageOutcome_MAX                       = 3,
};

// Enum DuneSandbox.EAttractorSlotMode
// NumValues: 0x0003
enum class EAttractorSlotMode : uint8
{
	Single                                   = 0,
	Group                                    = 1,
	EAttractorSlotMode_MAX                   = 2,
};

// Enum DuneSandbox.EAttractorSlotState
// NumValues: 0x0004
enum class EAttractorSlotState : uint8
{
	Free                                     = 0,
	WaitingForOccupant                       = 1,
	Occupied                                 = 2,
	EAttractorSlotState_MAX                  = 3,
};

// Enum DuneSandbox.EAttractorAnimState
// NumValues: 0x0008
enum class EAttractorAnimState : uint8
{
	Ready                                    = 0,
	Begin                                    = 1,
	Loop                                     = 2,
	Breaker                                  = 3,
	End                                      = 4,
	Finished                                 = 5,
	Count                                    = 6,
	EAttractorAnimState_MAX                  = 7,
};

// Enum DuneSandbox.ECheckPowerPackPowerComparison
// NumValues: 0x0003
enum class ECheckPowerPackPowerComparison : uint8
{
	GreaterOrEqual                           = 0,
	LessOrEqual                              = 1,
	ECheckPowerPackPowerComparison_MAX       = 2,
};

// Enum DuneSandbox.ECheckShieldComparison
// NumValues: 0x0003
enum class ECheckShieldComparison : uint8
{
	GreaterOrEqual                           = 0,
	LessOrEqual                              = 1,
	ECheckShieldComparison_MAX               = 2,
};

// Enum DuneSandbox.ERandomSuccessParam
// NumValues: 0x0004
enum class ERandomSuccessParam : uint8
{
	Constant                                 = 0,
	BlackboardValue                          = 1,
	DifficultyConfig                         = 2,
	ERandomSuccessParam_MAX                  = 3,
};

// Enum DuneSandbox.EAIRange
// NumValues: 0x0008
enum class EAIRange : uint8
{
	OutOfRange                               = 0,
	LongShootingRange                        = 1,
	ShortShootingRange                       = 2,
	MeleeToShootingTransitionRange           = 3,
	MeleeRange                               = 4,
	MeleeEncroachRange                       = 5,
	Invalid                                  = 6,
	EAIRange_MAX                             = 7,
};

// Enum DuneSandbox.EDiveDirection
// NumValues: 0x0006
enum class EDiveDirection : uint8
{
	Auto                                     = 0,
	Forwards                                 = 1,
	Backward                                 = 2,
	Left                                     = 3,
	Right                                    = 4,
	EDiveDirection_MAX                       = 5,
};

// Enum DuneSandbox.ENpcDashDirection
// NumValues: 0x0005
enum class ENpcDashDirection : uint8
{
	Backwards                                = 0,
	Forwards                                 = 1,
	Left                                     = 2,
	Right                                    = 3,
	ENpcDashDirection_MAX                    = 4,
};

// Enum DuneSandbox.ECoverSearchState
// NumValues: 0x0005
enum class ECoverSearchState : uint8
{
	Inactive                                 = 0,
	WaitingForTimer                          = 1,
	WaitingForSquad                          = 2,
	InProgress                               = 3,
	ECoverSearchState_MAX                    = 4,
};

// Enum DuneSandbox.EDuneSquadTimers
// NumValues: 0x0008
enum class EDuneSquadTimers : uint8
{
	SquadFormationEQS                        = 0,
	CoverPositionEQS                         = 1,
	AlliesInNeedSearch                       = 2,
	ShelterEQS                               = 3,
	CheckTarget                              = 4,
	ClearLastAlertedLocation                 = 5,
	Count                                    = 6,
	EDuneSquadTimers_MAX                     = 7,
};

// Enum DuneSandbox.EDuneBlackboardKeysObject
// NumValues: 0x0004
enum class EDuneBlackboardKeysObject : uint8
{
	Target                                   = 0,
	Job_FocusActor                           = 1,
	UnrecognizedTarget                       = 2,
	EDuneBlackboardKeysObject_MAX            = 3,
};

// Enum DuneSandbox.EDuneBlackboardKeysBoolean
// NumValues: 0x0028
enum class EDuneBlackboardKeysBoolean : uint8
{
	IsBeingShotAt                            = 0,
	IsAtSafeLocation                         = 1,
	IsThreatened                             = 2,
	IsInCover                                = 3,
	IsInSandstorm                            = 4,
	IsUsingShield                            = 5,
	WasRecentlyDamaged                       = 6,
	WasRecentlyDamagedByTarget               = 7,
	IsStaggered                              = 8,
	CoverLocationValid                       = 9,
	UsingAttractorCover                      = 10,
	UsingAttractorPoint                      = 11,
	HasLoSToTarget                           = 12,
	HasClearTargetLineOfFire                 = 13,
	IsInHazardArea                           = 14,
	IsNpcHostile                             = 15,
	CanSearchForCover                        = 16,
	IsWeaponEquipped                         = 17,
	HasWeaponInHand                          = 18,
	WeaponCanFire                            = 19,
	IsAttackingTarget                        = 20,
	IsTargetMeleeAttackingMe                 = 21,
	IsBreakingOutOfStagger                   = 22,
	IsWeaponTemporaryBroken                  = 23,
	IsInDialogue                             = 24,
	ShouldCheckTarget                        = 25,
	IsLightStaggered                         = 26,
	IsReloading                              = 27,
	ShouldReload                             = 28,
	CoverInvalidatedRecently                 = 29,
	IsStuck                                  = 30,
	WasRecentlyStaggered                     = 31,
	HasBlockedHits                           = 32,
	HasBlockedMinimumHits                    = 33,
	IsKeyNPC                                 = 34,
	ShouldSlowAttackTarget                   = 35,
	IsMeleeAttackReady                       = 36,
	ShouldUseRangedWeapon                    = 37,
	ShouldRemoveBurrowDarts                  = 38,
	EDuneBlackboardKeysBoolean_MAX           = 39,
};

// Enum DuneSandbox.EDuneBlackboardKeysVector
// NumValues: 0x000A
enum class EDuneBlackboardKeysVector : uint8
{
	LastNoiseLocation                        = 0,
	HomeLocation                             = 1,
	LastKnownTargetPosition                  = 2,
	PositionOfInterest                       = 3,
	CoverLocation                            = 4,
	CoverOrientation                         = 5,
	CoverStepOutLocation                     = 6,
	SquadCommandLocation                     = 7,
	InvestigationLocation                    = 8,
	EDuneBlackboardKeysVector_MAX            = 9,
};

// Enum DuneSandbox.EDuneBlackboardKeysFloat
// NumValues: 0x0014
enum class EDuneBlackboardKeysFloat : uint8
{
	Aggressiveness                           = 0,
	AwarenessRange                           = 1,
	CombatRange                              = 2,
	Mobility                                 = 3,
	MaxCoverDistance                         = 4,
	HomeDistanceLimit                        = 5,
	DiveDistance                             = 6,
	MaxWeaponRange                           = 7,
	PreferredDistanceToTargetMin             = 8,
	PreferredDistanceToTargetMax             = 9,
	MaxPreferredDistanceFromHome             = 10,
	MaxDistanceFromHome                      = 11,
	TimeWithoutLoSToTarget                   = 12,
	TimeWithoutClearLineOfFire               = 13,
	TimeWithCurrentCover                     = 14,
	InvestigationRadius                      = 15,
	MaxDistanceToTarget                      = 16,
	DistanceToTarget                         = 17,
	NumBurrowingDarts                        = 18,
	EDuneBlackboardKeysFloat_MAX             = 19,
};

// Enum DuneSandbox.EDuneBlackboardKeysEnum
// NumValues: 0x0005
enum class EDuneBlackboardKeysEnum : uint8
{
	CombatMode                               = 0,
	HomeDistance                             = 1,
	TargetHomeDistance                       = 2,
	EquippedWeaponType                       = 3,
	EDuneBlackboardKeysEnum_MAX              = 4,
};

// Enum DuneSandbox.EDuneBlackboardKeysName
// NumValues: 0x0005
enum class EDuneBlackboardKeysName : uint8
{
	BehaviorState                            = 0,
	SquadDirective                           = 1,
	LastCombatBehavior                       = 2,
	SelectedAbility                          = 3,
	EDuneBlackboardKeysName_MAX              = 4,
};

// Enum DuneSandbox.ENpcTargetCounters
// NumValues: 0x0005
enum class ENpcTargetCounters : uint8
{
	Targeting                                = 0,
	Attacking                                = 1,
	MeleeAttacking                           = 2,
	COUNTER_MAX                              = 3,
	ENpcTargetCounters_MAX                   = 4,
};

// Enum DuneSandbox.ECooldownBehavior
// NumValues: 0x0004
enum class ECooldownBehavior : uint8
{
	OnBehaviorStateStart                     = 0,
	OnUse                                    = 1,
	OnFinished                               = 2,
	ECooldownBehavior_MAX                    = 3,
};

// Enum DuneSandbox.EConsiderationTestType
// NumValues: 0x0004
enum class EConsiderationTestType : uint8
{
	Score                                    = 0,
	Filter                                   = 1,
	FilterAndScore                           = 2,
	EConsiderationTestType_MAX               = 3,
};

// Enum DuneSandbox.EConsiderationFilterType
// NumValues: 0x0004
enum class EConsiderationFilterType : uint8
{
	Minimum                                  = 0,
	Maximum                                  = 1,
	InRange                                  = 2,
	EConsiderationFilterType_MAX             = 3,
};

// Enum DuneSandbox.EConsiderationParamType
// NumValues: 0x0003
enum class EConsiderationParamType : uint8
{
	Constant                                 = 0,
	Blackboard                               = 1,
	EConsiderationParamType_MAX              = 2,
};

// Enum DuneSandbox.EAiSpawningType
// NumValues: 0x0003
enum class EAiSpawningType : uint32
{
	Static                                   = 0,
	Random                                   = 1,
	EAiSpawningType_MAX                      = 2,
};

// Enum DuneSandbox.EAIRequestSpawnResult
// NumValues: 0x0005
enum class EAIRequestSpawnResult : uint8
{
	Success                                  = 0,
	NoSpawnableNPCType                       = 1,
	NoSpawnableLocation                      = 2,
	InvalidNPCType                           = 3,
	EAIRequestSpawnResult_MAX                = 4,
};

// Enum DuneSandbox.EMaxTargetingDistanceRule
// NumValues: 0x0003
enum class EMaxTargetingDistanceRule : uint8
{
	SightRange                               = 0,
	Custom                                   = 1,
	EMaxTargetingDistanceRule_MAX            = 2,
};

// Enum DuneSandbox.EMaxSuspicionRule
// NumValues: 0x0003
enum class EMaxSuspicionRule : uint8
{
	TargetingComponent                       = 0,
	Custom                                   = 1,
	EMaxSuspicionRule_MAX                    = 2,
};

// Enum DuneSandbox.ENpcWeaponEquipType
// NumValues: 0x0005
enum class ENpcWeaponEquipType : uint8
{
	NoEquipment                              = 0,
	RangedWeapon                             = 1,
	MeleeWeapon                              = 2,
	SecondaryRangedWeapon                    = 3,
	ENpcWeaponEquipType_MAX                  = 4,
};

// Enum DuneSandbox.EAiAttractorAnimType
// NumValues: 0x0003
enum class EAiAttractorAnimType : uint8
{
	None                                     = 0,
	Guard                                    = 1,
	EAiAttractorAnimType_MAX                 = 2,
};

// Enum DuneSandbox.EAnimationComponentPlaymode
// NumValues: 0x0004
enum class EAnimationComponentPlaymode : uint8
{
	ACP_PlayOnce                             = 0,
	ACP_Looped                               = 1,
	ACP_PingPong                             = 2,
	ACP_MAX                                  = 3,
};

// Enum DuneSandbox.EEase
// NumValues: 0x0022
enum class EEase : uint8
{
	Linear                                   = 0,
	InSine                                   = 1,
	OutSine                                  = 2,
	InOutSine                                = 3,
	InQuad                                   = 4,
	OutQuad                                  = 5,
	InOutQuad                                = 6,
	InCubic                                  = 7,
	OutCubic                                 = 8,
	InOutCubic                               = 9,
	InQuart                                  = 10,
	OutQuart                                 = 11,
	InOutQuart                               = 12,
	InQuint                                  = 13,
	OutQuint                                 = 14,
	InOutQuint                               = 15,
	InExpo                                   = 16,
	OutExpo                                  = 17,
	InOutExpo                                = 18,
	InCirc                                   = 19,
	OutCirc                                  = 20,
	InOutCirc                                = 21,
	InBack                                   = 22,
	OutBack                                  = 23,
	InOutBack                                = 24,
	InElastic                                = 25,
	OutElastic                               = 26,
	InOutElastic                             = 27,
	InBounce                                 = 28,
	OutBounce                                = 29,
	InOutBounce                              = 30,
	CurveAsset                               = 100,
	RuntimeCurve                             = 101,
	EEase_MAX                                = 102,
};

// Enum DuneSandbox.ELoopType
// NumValues: 0x0003
enum class ELoopType : uint8
{
	None                                     = 0,
	Restart                                  = 1,
	ELoopType_MAX                            = 2,
};

// Enum DuneSandbox.EDuneAudioFoleyMaterial
// NumValues: 0x0004
enum class EDuneAudioFoleyMaterial : uint8
{
	Air                                      = 0,
	Cloth                                    = 1,
	Leather                                  = 2,
	EDuneAudioFoleyMaterial_MAX              = 3,
};

// Enum DuneSandbox.EDuneAudioFoleyArmorWeight
// NumValues: 0x0005
enum class EDuneAudioFoleyArmorWeight : uint8
{
	Air                                      = 0,
	Light                                    = 5,
	Medium                                   = 10,
	Heavy                                    = 15,
	EDuneAudioFoleyArmorWeight_MAX           = 16,
};

// Enum DuneSandbox.EDuneAudioObjectType
// NumValues: 0x0011
enum class EDuneAudioObjectType : uint8
{
	Default                                  = 0,
	CharacterVoice                           = 1,
	CharacterEnvironmentAnimNotify           = 2,
	CharacterEquipmentFoley                  = 3,
	CharacterGenericSfx                      = 4,
	PlayerCharacterItemPickup                = 5,
	Footsteps                                = 6,
	WeaponGunshots                           = 7,
	WeaponImpacts                            = 8,
	Abilities                                = 9,
	SpiceVisionActor                         = 10,
	ProximityVoiceChat                       = 11,
	Vehicle                                  = 12,
	VehicleCollision                         = 13,
	PatrolShip                               = 14,
	BulletFlyby                              = 15,
	MAX                                      = 16,
};

// Enum DuneSandbox.EDuneCharacterAudioEquipmentFoleyPriority
// NumValues: 0x0007
enum class EDuneCharacterAudioEquipmentFoleyPriority : uint8
{
	Auto                                     = 0,
	Head                                     = 1,
	Torso                                    = 2,
	Gloves                                   = 3,
	Legs                                     = 4,
	Boots                                    = 5,
	EDuneCharacterAudioEquipmentFoleyPriority_MAX = 6,
};

// Enum DuneSandbox.EFootstepAnimNotifyFoot
// NumValues: 0x0004
enum class EFootstepAnimNotifyFoot : uint8
{
	UserSpecified                            = 0,
	Left                                     = 1,
	Right                                    = 2,
	MAX                                      = 3,
};

// Enum DuneSandbox.EAccessCodeType
// NumValues: 0x0003
enum class EAccessCodeType : uint8
{
	None                                     = 0,
	Interactable                             = 4,
	EAccessCodeType_MAX                      = 5,
};

// Enum DuneSandbox.EDeathstillState
// NumValues: 0x0005
enum class EDeathstillState : uint8
{
	Inactive                                 = 0,
	Paused_NoPower                           = 1,
	Paused_WaterStorageFull                  = 2,
	Processing                               = 3,
	EDeathstillState_MAX                     = 4,
};

// Enum DuneSandbox.EPlaceableActionRecycleResult
// NumValues: 0x0007
enum class EPlaceableActionRecycleResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	NoPower                                  = 101,
	NotEnoughSpace                           = 102,
	NoOutput                                 = 103,
	EPlaceableActionRecycleResult_MAX        = 104,
};

// Enum DuneSandbox.EPlaceableActionRepairResult
// NumValues: 0x000C
enum class EPlaceableActionRepairResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	NoPower                                  = 101,
	UnknownRecipe                            = 102,
	MissingTechTreeEntry                     = 103,
	NotEnoughResources                       = 104,
	NoRepairCost                             = 105,
	BrokenBeyondRepair                       = 106,
	AlreadyRepaired                          = 107,
	RequiresManualRepair                     = 108,
	EPlaceableActionRepairResult_MAX         = 109,
};

// Enum DuneSandbox.EBuildingBlueprintCanBePlacedType
// NumValues: 0x0007
enum class EBuildingBlueprintCanBePlacedType : uint8
{
	IsLoading                                = 0,
	HasPermissions                           = 1,
	IsBuildingNearBorders                    = 2,
	IsInHeightLimit                          = 3,
	CheckCollisions                          = 4,
	Num                                      = 5,
	EBuildingBlueprintCanBePlacedType_MAX    = 6,
};

// Enum DuneSandbox.EPlaceBuildingBlueprintResult
// NumValues: 0x0003
enum class EPlaceBuildingBlueprintResult : uint8
{
	Invalid                                  = 0,
	Valid                                    = 1,
	EPlaceBuildingBlueprintResult_MAX        = 2,
};

// Enum DuneSandbox.EBuildingModeMenuType
// NumValues: 0x0004
enum class EBuildingModeMenuType : uint8
{
	None                                     = 0,
	Building                                 = 1,
	Deployable                               = 2,
	EBuildingModeMenuType_MAX                = 3,
};

// Enum DuneSandbox.BuildableStabilizationCheatState
// NumValues: 0x0004
enum class EBuildableStabilizationCheatState : uint8
{
	Default                                  = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	BuildableStabilizationCheatState_MAX     = 3,
};

// Enum DuneSandbox.EBuildingMode
// NumValues: 0x0003
enum class EBuildingMode : uint8
{
	Structures                               = 0,
	Placeables                               = 1,
	EBuildingMode_MAX                        = 2,
};

// Enum DuneSandbox.EPlaceModuleResult
// NumValues: 0x0004
enum class EPlaceModuleResult : uint8
{
	Invalid                                  = 0,
	EnteredMultiStepAction                   = 1,
	Valid                                    = 2,
	EPlaceModuleResult_MAX                   = 3,
};

// Enum DuneSandbox.EPieceSelectionOrigin
// NumValues: 0x0004
enum class EPieceSelectionOrigin : uint8
{
	None                                     = 0,
	Contracted                               = 1,
	Extended                                 = 2,
	EPieceSelectionOrigin_MAX                = 3,
};

// Enum DuneSandbox.EHasRequiredMaterialsInInventoryType
// NumValues: 0x0005
enum class EHasRequiredMaterialsInInventoryType : uint8
{
	None                                     = 0,
	BuildingAction                           = 1,
	PlaceableAction                          = 2,
	PlaceableAndCircuitOnlyAction            = 3,
	EHasRequiredMaterialsInInventoryType_MAX = 4,
};

// Enum DuneSandbox.EHologramHighlightCondition
// NumValues: 0x0004
enum class EHologramHighlightCondition : uint8
{
	None                                     = 0,
	IgnoreHolograms                          = 1,
	IgnoreHologramWithoutFillStability       = 2,
	EHologramHighlightCondition_MAX          = 3,
};

// Enum DuneSandbox.EModifierPhase
// NumValues: 0x0006
enum class EModifierPhase : uint8
{
	None                                     = 0,
	Starting                                 = 1,
	Running                                  = 2,
	Removing                                 = 3,
	Done                                     = 4,
	EModifierPhase_MAX                       = 5,
};

// Enum DuneSandbox.ECinePawnMovementMode
// NumValues: 0x0004
enum class ECinePawnMovementMode : uint8
{
	Static                                   = 0,
	Walking                                  = 1,
	Flying                                   = 2,
	ECinePawnMovementMode_MAX                = 3,
};

// Enum DuneSandbox.ELockedMovementDirection
// NumValues: 0x0004
enum class ELockedMovementDirection : uint8
{
	NotLocked                                = 0,
	Forward                                  = 1,
	Right                                    = 2,
	ELockedMovementDirection_MAX             = 3,
};

// Enum DuneSandbox.ELockedAimAxis
// NumValues: 0x0005
enum class ELockedAimAxis : uint8
{
	None                                     = 0,
	Yaw                                      = 1,
	Pitch                                    = 2,
	Roll                                     = 4,
	ELockedAimAxis_MAX                       = 5,
};

// Enum DuneSandbox.ECameraMountMode
// NumValues: 0x0005
enum class ECameraMountMode : uint8
{
	NotMounted                               = 0,
	Follow                                   = 1,
	Hard                                     = 2,
	Vanity                                   = 3,
	ECameraMountMode_MAX                     = 4,
};

// Enum DuneSandbox.ECharacterRotationMode
// NumValues: 0x0006
enum class ECharacterRotationMode : uint8
{
	UseOrientRotationToMovement              = 0,
	UseControllerDesiredRotation             = 1,
	UseControllerYaw                         = 2,
	NoRotation                               = 3,
	Manual                                   = 4,
	ECharacterRotationMode_MAX               = 5,
};

// Enum DuneSandbox.EClimbingMode
// NumValues: 0x0006
enum class EClimbingMode : uint8
{
	None                                     = 0,
	WallClimbing                             = 1,
	CeilingClimbing                          = 2,
	StandupTransition                        = 3,
	MantlingTransition                       = 4,
	EClimbingMode_MAX                        = 5,
};

// Enum DuneSandbox.EPlayerActionDialogueResult
// NumValues: 0x0005
enum class EPlayerActionDialogueResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	Fail_InconsistentState                   = 101,
	EPlayerActionDialogueResult_MAX          = 102,
};

// Enum DuneSandbox.EDialogueComponentServerState
// NumValues: 0x0009
enum class EDialogueComponentServerState : uint8
{
	Invalid                                  = 0,
	Idle                                     = 1,
	Starting                                 = 2,
	WaitingForReplyStartedAction             = 3,
	ProcessingPlayerEvents                   = 4,
	WaitingForGetRepliesAction               = 5,
	ProcessingNpcEvents                      = 6,
	EndingDialogue                           = 7,
	EDialogueComponentServerState_MAX        = 8,
};

// Enum DuneSandbox.EDialogueComponentClientState
// NumValues: 0x0007
enum class EDialogueComponentClientState : uint8
{
	Invalid                                  = 0,
	Idle                                     = 1,
	Starting                                 = 2,
	WaitingForInput                          = 3,
	ProcessingReply                          = 4,
	EndingDialogue                           = 5,
	EDialogueComponentClientState_MAX        = 6,
};

// Enum DuneSandbox.EDialogueDebugModeFlags
// NumValues: 0x0004
enum class EDialogueDebugModeFlags : uint8
{
	None                                     = 0,
	ConditionsAlwaysTrue                     = 1,
	ConditionsAlwaysFalse                    = 2,
	EDialogueDebugModeFlags_MAX              = 3,
};

// Enum DuneSandbox.EDialogueTagType
// NumValues: 0x0003
enum class EDialogueTagType : uint8
{
	BodyGesture                              = 0,
	FaceExpression                           = 1,
	EDialogueTagType_MAX                     = 2,
};

// Enum DuneSandbox.EDuneCharacterGender
// NumValues: 0x0005
enum class EDuneCharacterGender : uint8
{
	Invalid                                  = 0,
	Male                                     = 1,
	Female                                   = 2,
	Neutral                                  = 3,
	Max                                      = 4,
};

// Enum DuneSandbox.EDuneCorrectionSeverity
// NumValues: 0x0006
enum class EDuneCorrectionSeverity : uint8
{
	Untracked                                = 0,
	Minute                                   = 1,
	Moderate                                 = 2,
	Severe                                   = 3,
	MAX                                      = 4,
	MAX_COUNT                                = 3,
};

// Enum DuneSandbox.ENPCFlags
// NumValues: 0x0009
enum class ENPCFlags : uint8
{
	None                                     = 0,
	CanEnterDBNO                             = 1,
	SpawnInDBNO                              = 2,
	Unkillable                               = 4,
	Invulnerable                             = 8,
	UsingEQSCover                            = 16,
	SprintAttackOpener                       = 32,
	BlocksAfterStagger                       = 64,
	ENPCFlags_MAX                            = 65,
};

// Enum DuneSandbox.EHostilityType
// NumValues: 0x0004
enum class EHostilityType : uint8
{
	None                                     = 0,
	Neutral                                  = 1,
	Hostile                                  = 2,
	EHostilityType_MAX                       = 3,
};

// Enum DuneSandbox.ENpcDifficultyGroup
// NumValues: 0x0003
enum class ENpcDifficultyGroup : uint8
{
	Solo                                     = 0,
	Group                                    = 1,
	ENpcDifficultyGroup_MAX                  = 2,
};

// Enum DuneSandbox.EEndCCType
// NumValues: 0x0003
enum class EEndCCType : uint8
{
	Success                                  = 0,
	Error                                    = 1,
	EEndCCType_MAX                           = 2,
};

// Enum DuneSandbox.EPbeTelemetryParameter
// NumValues: 0x0009
enum class EPbeTelemetryParameter : uint8
{
	None                                     = 0,
	Homeworld                                = 1,
	Caste                                    = 2,
	Mentor                                   = 3,
	JourneyTechUnlocked                      = 4,
	NPESkipped                               = 5,
	Recant                                   = 6,
	PbeTimer                                 = 7,
	EPbeTelemetryParameter_MAX               = 8,
};

// Enum DuneSandbox.EDeleteCharacterOption
// NumValues: 0x000A
enum class EDeleteCharacterOption : uint8
{
	Reconnect                                = 0,
	Disconnect                               = 1,
	SkipPbeAndReconnect                      = 2,
	SkipPbeAndDisconnect                     = 3,
	SkipNpeAndReconnect                      = 4,
	SkipNpeAndDisconnect                     = 5,
	SkipPbeAndSkipNpeAndReconnect            = 6,
	SkipPbeAndSkipNpeAndDisconnect           = 7,
	Count                                    = 8,
	EDeleteCharacterOption_MAX               = 9,
};

// Enum DuneSandbox.EPlayerDamageStatus
// NumValues: 0x0008
enum class EPlayerDamageStatus : uint8
{
	Normal                                   = 0,
	LowHealth                                = 1,
	VeryLowHealth                            = 2,
	Critical                                 = 3,
	DBNO                                     = 4,
	Dead                                     = 5,
	Invalid                                  = 10,
	Max                                      = 11,
};

// Enum DuneSandbox.ESprintLockMode
// NumValues: 0x0005
enum class ESprintLockMode : uint8
{
	Toggle                                   = 0,
	Hold                                     = 1,
	Lock                                     = 2,
	COUNT                                    = 3,
	ESprintLockMode_MAX                      = 4,
};

// Enum DuneSandbox.EDunePlayerProceduralInputsMode
// NumValues: 0x0006
enum class EDunePlayerProceduralInputsMode : uint8
{
	Random                                   = 0,
	Straight                                 = 1,
	Circle                                   = 2,
	Square                                   = 3,
	COUNT                                    = 4,
	EDunePlayerProceduralInputsMode_MAX      = 5,
};

// Enum DuneSandbox.EDunePlayerLifeState
// NumValues: 0x0005
enum class EDunePlayerLifeState : uint8
{
	Alive                                    = 0,
	Dead                                     = 1,
	DeadByCoriolis                           = 2,
	DeadBySandworm                           = 3,
	EDunePlayerLifeState_MAX                 = 4,
};

// Enum DuneSandbox.EDeathReason
// NumValues: 0x0004
enum class EDeathReason : uint8
{
	NotSpecified                             = 0,
	Coriolis                                 = 1,
	Sandworm                                 = 2,
	EDeathReason_MAX                         = 3,
};

// Enum DuneSandbox.ETradeRequestAnswer
// NumValues: 0x0007
enum class ETradeRequestAnswer : uint8
{
	None                                     = 0,
	Accept                                   = 1,
	Decline                                  = 2,
	Interrupted                              = 3,
	Busy                                     = 4,
	Cancel                                   = 5,
	ETradeRequestAnswer_MAX                  = 6,
};

// Enum DuneSandbox.ETradeState
// NumValues: 0x0007
enum class ETradeState : uint8
{
	Uninitialized                            = 0,
	Available                                = 1,
	WaitingForResponse                       = 2,
	HasReceivedRequest                       = 3,
	Trading                                  = 4,
	OnCooldown                               = 5,
	ETradeState_MAX                          = 6,
};

// Enum DuneSandbox.EAIHazardType
// NumValues: 0x0003
enum class EAIHazardType : uint8
{
	NonLethal                                = 0,
	Lethal                                   = 1,
	EAIHazardType_MAX                        = 2,
};

// Enum DuneSandbox.EAbilityConditionType
// NumValues: 0x0006
enum class EAbilityConditionType : uint8
{
	ActivateAbility                          = 0,
	LearnAbility                             = 1,
	UnlockPhase                              = 2,
	AttemptActivate                          = 3,
	EndAbility                               = 4,
	EAbilityConditionType_MAX                = 5,
};

// Enum DuneSandbox.ECompositeConditionType
// NumValues: 0x0003
enum class ECompositeConditionType : uint8
{
	And                                      = 0,
	Or                                       = 1,
	ECompositeConditionType_MAX              = 2,
};

// Enum DuneSandbox.EConsumeType
// NumValues: 0x0003
enum class EConsumeType : uint8
{
	Item                                     = 0,
	Liquid                                   = 1,
	EConsumeType_MAX                         = 2,
};

// Enum DuneSandbox.ESurveyConditionType
// NumValues: 0x0003
enum class ESurveyConditionType : uint8
{
	SpecificArea                             = 0,
	NumberOfAreas                            = 1,
	ESurveyConditionType_MAX                 = 2,
};

// Enum DuneSandbox.EContractState
// NumValues: 0x0004
enum class EContractState : uint8
{
	Active                                   = 0,
	Complete                                 = 1,
	Locked                                   = 2,
	EContractState_MAX                       = 3,
};

// Enum DuneSandbox.EServerRuleset
// NumValues: 0x0003
enum class EServerRuleset : uint8
{
	Public                                   = 0,
	Private                                  = 1,
	EServerRuleset_MAX                       = 2,
};

// Enum DuneSandbox.EIngredientComponentType
// NumValues: 0x0004
enum class EIngredientComponentType : uint8
{
	None                                     = 0,
	Water                                    = 3,
	Invalid                                  = 4,
	EIngredientComponentType_MAX             = 5,
};

// Enum DuneSandbox.ECustomizationType
// NumValues: 0x0005
enum class ECustomizationType : uint8
{
	None                                     = 0,
	Swatch                                   = 1,
	Variant                                  = 2,
	Combined                                 = 3,
	ECustomizationType_MAX                   = 4,
};

// Enum DuneSandbox.EHealthFloatId
// NumValues: 0x0004
enum class EHealthFloatId : uint8
{
	CurrentHealth                            = 0,
	CurrentDBNOHealth                        = 1,
	MaxDBNOHealth                            = 2,
	EHealthFloatId_MAX                       = 3,
};

// Enum DuneSandbox.EApplyEffectRule
// NumValues: 0x0004
enum class EApplyEffectRule : uint8
{
	OnHitShield                              = 0,
	Always                                   = 1,
	OnDamageHealth                           = 2,
	EApplyEffectRule_MAX                     = 3,
};

// Enum DuneSandbox.EDuneExchangeResults
// NumValues: 0x0006
enum class EDuneExchangeResults : uint8
{
	Success                                  = 0,
	UnknownError                             = 1,
	OrderMissing                             = 2,
	OrderCountToLow                          = 3,
	NotEnoughSolaris                         = 4,
	EDuneExchangeResults_MAX                 = 5,
};

// Enum DuneSandbox.EEcoLabTelemetryMode
// NumValues: 0x0003
enum class EEcoLabTelemetryMode : uint8
{
	Exploration                              = 0,
	Completion                               = 1,
	EEcoLabTelemetryMode_MAX                 = 2,
};

// Enum DuneSandbox.EShipwreckTelemetryModeFlags
// NumValues: 0x0005
enum class EShipwreckTelemetryModeFlags : uint8
{
	None                                     = 0,
	Enter                                    = 1,
	Exit                                     = 2,
	Clear                                    = 4,
	EShipwreckTelemetryModeFlags_MAX         = 5,
};

// Enum DuneSandbox.EEncounterInstanceState
// NumValues: 0x0003
enum class EEncounterInstanceState : uint8
{
	Active                                   = 0,
	Inactive                                 = 1,
	EEncounterInstanceState_MAX              = 2,
};

// Enum DuneSandbox.ETerrainBlockStreamingDistanceSource
// NumValues: 0x0004
enum class ETerrainBlockStreamingDistanceSource : uint8
{
	DataAsset                                = 0,
	Subsystem_ByDistance                     = 1,
	Subsystem_ByScreenSize                   = 2,
	ETerrainBlockStreamingDistanceSource_MAX = 3,
};

// Enum DuneSandbox.EWeaponLightBehaviour
// NumValues: 0x0005
enum class EWeaponLightBehaviour : uint8
{
	AlwaysActive                             = 0,
	BeamLight                                = 1,
	Disabled                                 = 2,
	ActiveOnUnholstered                      = 3,
	EWeaponLightBehaviour_MAX                = 4,
};

// Enum DuneSandbox.ECharacterStates
// NumValues: 0x002E
enum class ECharacterStates : uint8
{
	Exploration                              = 0,
	Combat                                   = 1,
	Building                                 = 2,
	Deployables                              = 3,
	Stilltent                                = 4,
	VehicleAssembly                          = 5,
	VehicleGround                            = 6,
	VehicleAir                               = 7,
	VehicleSeeker                            = 8,
	Passenger                                = 9,
	PassengerCombat                          = 10,
	VehicleTurret                            = 11,
	Downed                                   = 12,
	Dead                                     = 13,
	Sprinting                                = 14,
	Dashing                                  = 15,
	HyperSprinting                           = 16,
	LockedMovement                           = 17,
	ScanningLongRange                        = 18,
	WantsCrouch                              = 19,
	Suspending                               = 20,
	Shooting                                 = 21,
	ADS                                      = 22,
	Reloading                                = 23,
	Airborne                                 = 24,
	Climbing                                 = 25,
	Running                                  = 26,
	WalkWoRhythm                             = 27,
	LightStagger                             = 28,
	MediumStagger                            = 29,
	KnockedDown                              = 30,
	P2pTrading                               = 31,
	Refueling                                = 32,
	SeatedChair                              = 33,
	SandwormDeath                            = 34,
	BuildingBlueprint                        = 35,
	Casting                                  = 36,
	Emote                                    = 37,
	Quicksand                                = 38,
	QuicksandCombatRestrictions              = 39,
	QuicksandMaximumDepth                    = 40,
	QuicksandDeath                           = 41,
	Melee                                    = 42,
	Reviving                                 = 43,
	ECharacterState_MAX                      = 44,
	ECharacterStates_MAX                     = 45,
};

// Enum DuneSandbox.EFailureReasons
// NumValues: 0x0010
enum class EFailureReasons : uint8
{
	NoFailure                                = 0,
	InvalidParameters                        = 1,
	NoDuneASC                                = 2,
	InvalidTag                               = 3,
	InvalidDataTableRow                      = 4,
	DataTableRowNotFound                     = 5,
	NotInSubstate                            = 6,
	InvalidClass                             = 7,
	ServerOnly                               = 8,
	InvalidEffect                            = 9,
	QueryFailed                              = 10,
	AlreadyHaveTag                           = 11,
	StompFailed                              = 12,
	UnableToLeave                            = 13,
	NotClientControllable                    = 14,
	EFailureReasons_MAX                      = 15,
};

// Enum DuneSandbox.EKnockbackRotationOverride
// NumValues: 0x0004
enum class EKnockbackRotationOverride : uint8
{
	None                                     = 0,
	Clockwise                                = 1,
	CounterClockwise                         = 2,
	EKnockbackRotationOverride_MAX           = 3,
};

// Enum DuneSandbox.EMTXEventStatus
// NumValues: 0x0004
enum class EMTXEventStatus : uint8
{
	None                                     = 0,
	Pending                                  = 1,
	Active                                   = 2,
	EMTXEventStatus_MAX                      = 3,
};

// Enum DuneSandbox.EFriendStatus
// NumValues: 0x0005
enum class EFriendStatus : uint8
{
	None                                     = 0,
	Friends                                  = 1,
	FriendInvitePending                      = 2,
	Blocked                                  = 3,
	EFriendStatus_MAX                        = 4,
};

// Enum DuneSandbox.ESinkchartCraftingResult
// NumValues: 0x0009
enum class ESinkchartCraftingResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Fail                                     = 100,
	Fail_InventoryFull                       = 101,
	Fail_NoCraftingMaterials                 = 102,
	Fail_InvalidDataOrObject                 = 103,
	Fail_AreaNotSurveyed                     = 104,
	Fail_NotValidSkillOrPerk                 = 105,
	ESinkchartCraftingResult_MAX             = 106,
};

// Enum DuneSandbox.EStaticLocationTagMode
// NumValues: 0x0004
enum class EStaticLocationTagMode : uint8
{
	AssetOnly                                = 0,
	ActorOverride                            = 1,
	ActorAppend                              = 2,
	EStaticLocationTagMode_MAX               = 3,
};

// Enum DuneSandbox.EMapAreaTimeType
// NumValues: 0x0004
enum class EMapAreaTimeType : uint8
{
	TimeDiscovered                           = 0,
	TimeFirstEntered                         = 1,
	Count                                    = 2,
	EMapAreaTimeType_MAX                     = 3,
};

// Enum DuneSandbox.EMarkerDiscoveryMethod
// NumValues: 0x0013
enum class EMarkerDiscoveryMethod : uint8
{
	None                                     = 0,
	BasicObservation                         = 1,
	BinocularObservation                     = 2,
	Cheat                                    = 3,
	Client                                   = 4,
	Communinet                               = 5,
	Contract                                 = 6,
	Death                                    = 7,
	ExplorationVolume                        = 8,
	Journey                                  = 9,
	Permissions                              = 10,
	Scanner                                  = 11,
	Sinkchart                                = 12,
	Social                                   = 13,
	Surveying                                = 14,
	VehicleScanner                           = 15,
	NPE                                      = 16,
	MapMarkerContentUpdate                   = 17,
	EMarkerDiscoveryMethod_MAX               = 18,
};

// Enum DuneSandbox.EMarkerPayloadType
// NumValues: 0x0007
enum class EMarkerPayloadType : uint8
{
	Default                                  = 0,
	Permissions                              = 1,
	Contract                                 = 2,
	StaticLocation                           = 3,
	SocialPlayer                             = 4,
	DuneMap                                  = 5,
	EMarkerPayloadType_MAX                   = 6,
};

// Enum DuneSandbox.EMarkerFilterFlags
// NumValues: 0x0003
enum class EMarkerFilterFlags : uint32
{
	None                                     = 0,
	ScanArc                                  = 1,
	EMarkerFilterFlags_MAX                   = 2,
};

// Enum DuneSandbox.EScannableToScanRelationshipFlags
// NumValues: 0x0007
enum class EScannableToScanRelationshipFlags : uint8
{
	None                                     = 0,
	InsideScanRadius                         = 1,
	InsideScannableRadius                    = 2,
	ScanOverlapsScannableMysteryRange        = 4,
	InsideScanDiscoveryRange                 = 8,
	ScanOverlapsScannableRadius              = 16,
	EScannableToScanRelationshipFlags_MAX    = 17,
};

// Enum DuneSandbox.EClaimActionResult
// NumValues: 0x0007
enum class EClaimActionResult : uint8
{
	Empty                                    = 0,
	Success                                  = 1,
	Success_ClaimedItemsDroppedToGround      = 2,
	Fail                                     = 100,
	Fail_CharacterNotAvailable               = 101,
	Fail_InventoryOperationFailed            = 102,
	EClaimActionResult_MAX                   = 103,
};

// Enum DuneSandbox.EAbilityEventType
// NumValues: 0x0006
enum class EAbilityEventType : uint8
{
	ActivatingAbility                        = 0,
	UnlockingAbility                         = 1,
	AttemptActivate                          = 2,
	EndAbility                               = 3,
	None                                     = 4,
	EAbilityEventType_MAX                    = 5,
};

// Enum DuneSandbox.EConstructionType
// NumValues: 0x0005
enum class EConstructionType : uint8
{
	Place                                    = 0,
	Repair                                   = 1,
	Remove                                   = 2,
	Move                                     = 3,
	EConstructionType_MAX                    = 4,
};

// Enum DuneSandbox.EContractEventType
// NumValues: 0x0005
enum class EContractEventType : uint8
{
	Pickup                                   = 0,
	Completion                               = 1,
	Delivery                                 = 2,
	ManuallyClaimReward                      = 3,
	EContractEventType_MAX                   = 4,
};

// Enum DuneSandbox.EDepositLiquidType
// NumValues: 0x0003
enum class EDepositLiquidType : uint8
{
	Blood                                    = 0,
	Water                                    = 1,
	EDepositLiquidType_MAX                   = 2,
};

// Enum DuneSandbox.EGameEventType
// NumValues: 0x0044
enum class EGameEventType : uint8
{
	CharacterDeathDamage                     = 0,
	CharacterDeathDehydration                = 1,
	CharacterKilledDamage                    = 2,
	PlayerEnteredExplorationVolume           = 4,
	PlayerKilledDamage                       = 5,
	PlayerInteracting                        = 6,
	AbilityEvent                             = 7,
	ContractEvent                            = 8,
	NpcDialogueEvent                         = 9,
	BuildableDestroyedDamage                 = 10,
	BuildableRemoved                         = 11,
	BuildableDamaged                         = 12,
	TotemShieldStateChange                   = 13,
	Construction                             = 14,
	RepairItem                               = 15,
	RecycleItem                              = 16,
	DepositCorpse                            = 17,
	BuildingSetUnlocked                      = 18,
	BasePowerStateChange                     = 19,
	VehicleDestroyedDamage                   = 20,
	VehicleDismantled                        = 21,
	VehicleAttached                          = 22,
	VehicleModuleBrokenDamage                = 23,
	VehicleAbandoned                         = 24,
	CompletedTrade                           = 28,
	CompletedTutorial                        = 29,
	ItemDelivered                            = 30,
	VehicleDelivered                         = 31,
	TreasureEvent                            = 32,
	AbandonBaseEvent                         = 40,
	CopyBaseEvent                            = 41,
	HarvestEvent                             = 60,
	CraftingEvent                            = 61,
	EquipEvent                               = 62,
	ConsumeEvent                             = 63,
	PlayerLevelUp                            = 64,
	RecipeEvent                              = 65,
	WeaponFiredEvent                         = 66,
	VehicleEvent                             = 67,
	ItemOwnedEvent                           = 68,
	MapMarkerEvent                           = 69,
	GameplayTagChangedEvent                  = 70,
	SuccessfulStaggerEvent                   = 71,
	ShieldPenetrationEvent                   = 72,
	DodgeEvent                               = 73,
	ParryEvent                               = 74,
	GuildEvent                               = 75,
	SkillEquippedEvent                       = 76,
	DepositLiquidEvent                       = 77,
	PlayerBaseTurnedOnEvent                  = 78,
	PlayerEnteredMapAreaEvent                = 79,
	JourneyNodeEvent                         = 80,
	SurveyEvent                              = 81,
	HarvestLiquidEvent                       = 82,
	BinocularsObservationEvent               = 83,
	WeaponHolsterEvent                       = 84,
	EventLogOpenedEvent                      = 85,
	ForceHasEventLogEvent                    = 86,
	LandsraadTaskContributionEvent           = 87,
	LandsraadRedeemHouseRewardEvent          = 88,
	VehicleSeatEvent                         = 89,
	TotemOwnershipChanged                    = 90,
	PlayerShelterState                       = 91,
	SandwormEvent                            = 92,
	ReplenishHydrationEvent                  = 93,
	None                                     = 254,
	ConditionTest                            = 255,
	EGameEventType_MAX                       = 256,
};

// Enum DuneSandbox.EInstigatorType
// NumValues: 0x0008
enum class EInstigatorType : uint8
{
	None                                     = 0,
	Player                                   = 1,
	NPC                                      = 2,
	ShaiHulud                                = 3,
	Sandstorm                                = 4,
	Quicksand                                = 5,
	Environment                              = 6,
	EInstigatorType_MAX                      = 7,
};

// Enum DuneSandbox.EDamageType
// NumValues: 0x0003
enum class EDamageType : uint8
{
	None                                     = 0,
	Dehydration                              = 1,
	EDamageType_MAX                          = 2,
};

// Enum DuneSandbox.EGuildEventType
// NumValues: 0x0004
enum class EGuildEventType : uint8
{
	None                                     = 0,
	GuildCreated                             = 1,
	GuildJoined                              = 2,
	EGuildEventType_MAX                      = 3,
};

// Enum DuneSandbox.EHarvestType
// NumValues: 0x0005
enum class EHarvestType : uint8
{
	HandheldMining                           = 0,
	VehicleMining                            = 1,
	Gathering                                = 2,
	VehicleHarvesting                        = 3,
	EHarvestType_MAX                         = 4,
};

// Enum DuneSandbox.EHarvestLiquidType
// NumValues: 0x0003
enum class EHarvestLiquidType : uint8
{
	Blood                                    = 0,
	Water                                    = 1,
	EHarvestLiquidType_MAX                   = 2,
};

// Enum DuneSandbox.ELandsraadTaskType
// NumValues: 0x0003
enum class ELandsraadTaskType : uint8
{
	Other                                    = 0,
	ControlPoint                             = 1,
	ELandsraadTaskType_MAX                   = 2,
};

// Enum DuneSandbox.ESandwormEventType
// NumValues: 0x0003
enum class ESandwormEventType : uint8
{
	SandwormStarePrimaryTarget               = 0,
	SandwormStareSecondaryObserver           = 1,
	ESandwormEventType_MAX                   = 2,
};

// Enum DuneSandbox.ETotemShieldState
// NumValues: 0x0003
enum class ETotemShieldState : uint8
{
	Disabled                                 = 0,
	Restored                                 = 1,
	ETotemShieldState_MAX                    = 2,
};

// Enum DuneSandbox.EVehicleConditionType
// NumValues: 0x0006
enum class EVehicleConditionType : uint8
{
	Build                                    = 0,
	Drive                                    = 1,
	Fuel                                     = 2,
	Store                                    = 3,
	Restore                                  = 4,
	EVehicleConditionType_MAX                = 5,
};

// Enum DuneSandbox.EVehicleSeatConditionType
// NumValues: 0x0003
enum class EVehicleSeatConditionType : uint8
{
	Enter                                    = 0,
	Exit                                     = 1,
	EVehicleSeatConditionType_MAX            = 2,
};

// Enum DuneSandbox.ESchematicSource
// NumValues: 0x0006
enum class ESchematicSource : uint8
{
	Unknown                                  = 0,
	SchematicPickup                          = 4,
	DefaultSchematics                        = 5,
	Refund                                   = 6,
	Invalid                                  = 7,
	ESchematicSource_MAX                     = 8,
};

// Enum DuneSandbox.EItemDurabilityState
// NumValues: 0x0005
enum class EItemDurabilityState : uint8
{
	Destroyed                                = 0,
	Broken                                   = 1,
	NearlyBroken                             = 2,
	Normal                                   = 3,
	EItemDurabilityState_MAX                 = 4,
};

// Enum DuneSandbox.EClientPhases
// NumValues: 0x0014
enum class EClientPhases : uint8
{
	StartUp                                  = 0,
	PostStartupRequirements                  = 1,
	LoadingGameBlock                         = 2,
	GameBlock                                = 3,
	LoadingMainMenu                          = 4,
	MainMenu                                 = 5,
	Connecting                               = 6,
	Joining                                  = 7,
	LoadingCC                                = 8,
	CC                                       = 9,
	LoadingNPE                               = 10,
	NPE                                      = 11,
	LoadingInGame                            = 12,
	InGame                                   = 13,
	LoadingChallengeRoom                     = 14,
	ChallengeRoom                            = 15,
	PreShutdown                              = 16,
	Shutdown                                 = 17,
	Count                                    = 18,
	EClientPhases_MAX                        = 19,
};

// Enum DuneSandbox.EServerPhases
// NumValues: 0x0007
enum class EServerPhases : uint8
{
	Startup                                  = 0,
	PostLandscapePhysics                     = 1,
	Running                                  = 2,
	PreShutdown                              = 3,
	Shutdown                                 = 4,
	Count                                    = 5,
	EServerPhases_MAX                        = 6,
};

// Enum DuneSandbox.EHarvestMethod
// NumValues: 0x0003
enum class EHarvestMethod : uint8
{
	Even                                     = 0,
	FromCenter                               = 1,
	EHarvestMethod_MAX                       = 2,
};

// Enum DuneSandbox.EResourceFieldState
// NumValues: 0x0005
enum class EResourceFieldState : uint8
{
	Uninitialized                            = 0,
	Full                                     = 1,
	Modified                                 = 2,
	Empty                                    = 3,
	EResourceFieldState_MAX                  = 4,
};

// Enum DuneSandbox.EResourceResult
// NumValues: 0x0008
enum class EResourceResult : uint8
{
	ZoneChanceFail                           = 0,
	HeatmapChanceFail                        = 1,
	TooHighSkipped                           = 2,
	TooHighMoveThreshold                     = 3,
	TooSteep                                 = 4,
	Excluded                                 = 5,
	Success                                  = 6,
	EResourceResult_MAX                      = 7,
};

// Enum DuneSandbox.EResourcePointType
// NumValues: 0x0003
enum class EResourcePointType : uint8
{
	Core                                     = 0,
	Aux                                      = 1,
	EResourcePointType_MAX                   = 2,
};

// Enum DuneSandbox.EValueViewType
// NumValues: 0x0004
enum class EValueViewType : uint8
{
	Value                                    = 0,
	Percentage                               = 1,
	Range                                    = 2,
	EValueViewType_MAX                       = 3,
};

// Enum DuneSandbox.EWearableCurveDataEntryType
// NumValues: 0x0006
enum class EWearableCurveDataEntryType : uint32
{
	None                                     = 0,
	RegenRate                                = 1,
	PowerPool                                = 2,
	ShieldRefreshTime                        = 3,
	ShieldDamageMitigationFactor             = 4,
	EWearableCurveDataEntryType_MAX          = 5,
};

// Enum DuneSandbox.ERadiationPillStatType
// NumValues: 0x0003
enum class ERadiationPillStatType : uint8
{
	RadiationMitigation                      = 0,
	Duration                                 = 1,
	ERadiationPillStatType_MAX               = 2,
};

// Enum DuneSandbox.EVehicleModuleInfoType
// NumValues: 0x0027
enum class EVehicleModuleInfoType : uint8
{
	InventoryMaxVolume                       = 0,
	InventoryNumSlots                        = 1,
	HullNumSeats                             = 2,
	NumUtilitySlots                          = 3,
	Armor                                    = 4,
	BoostDragonfly                           = 5,
	BoostVulture                             = 6,
	BoostGround                              = 7,
	PowerConsumptionPerSecond                = 8,
	TargetHeatIncrease                       = 9,
	TreadsSteeringSpeed                      = 10,
	EngineAirMaxSpeed                        = 11,
	EngineGroundMaxPower                     = 12,
	WingsIntertia                            = 13,
	WingsTurnRate                            = 14,
	WingsVultureSpeed                        = 15,
	FuelCapacity                             = 16,
	GeneratorFuelToPower                     = 17,
	GeneratorPowerToTemp                     = 18,
	ScannerRange                             = 19,
	ScannerArc                               = 20,
	HeatAddedInstant                         = 21,
	PowerConsumptionInstant                  = 22,
	NumTurretSlots                           = 23,
	SandwormThreatMovingGround               = 24,
	SandwormThreatEngine                     = 25,
	WeaponDamage                             = 26,
	WeaponDamageOuterRadius                  = 27,
	WeaponFireRate                           = 28,
	WeaponFireRateAbility                    = 29,
	WeaponPowerConsumptionPerShot            = 30,
	WeaponPowerConsumptionPerSecond          = 31,
	WeaponPowerConsumptionPerSecondAbility   = 32,
	WeaponHeatAddedPerShot                   = 33,
	WeaponHeatAddedPerSecond                 = 34,
	WeaponHeatAddedPerSecondAbility          = 35,
	WingsSpeedDecrease                       = 36,
	EngineAirMaxSpeedDecrease                = 37,
	EVehicleModuleInfoType_MAX               = 38,
};

// Enum DuneSandbox.EVehicleModuleType_InfoCards
// NumValues: 0x0006
enum class EVehicleModuleType_InfoCards : uint8
{
	Boost                                    = 0,
	Acceleration                             = 1,
	Wings                                    = 2,
	AmmoType                                 = 3,
	Count                                    = 4,
	EVehicleModuleType_MAX                   = 5,
};

// Enum DuneSandbox.EWeldingTorchStatType
// NumValues: 0x0004
enum class EWeldingTorchStatType : uint8
{
	CuttingPoints                            = 0,
	RepairDecay                              = 1,
	RepairSpeed                              = 2,
	EWeldingTorchStatType_MAX                = 3,
};

// Enum DuneSandbox.ESettingsToggleTextPair
// NumValues: 0x0004
enum class ESettingsToggleTextPair : uint8
{
	OffOn                                    = 0,
	NoYes                                    = 1,
	DisabledEnabled                          = 2,
	ESettingsToggleTextPair_MAX              = 3,
};

// Enum DuneSandbox.EFFXFSR3QualityModeCopy
// NumValues: 0x0006
enum class EFFXFSR3QualityModeCopy : uint32
{
	NativeAA                                 = 0,
	Quality                                  = 1,
	Balanced                                 = 2,
	Performance                              = 3,
	UltraPerformance                         = 4,
	EFFXFSR3QualityModeCopy_MAX              = 5,
};

// Enum DuneSandbox.EItemPreviewCameraId
// NumValues: 0x0004
enum class EItemPreviewCameraId : uint8
{
	Character                                = 0,
	Customization                            = 1,
	Store                                    = 2,
	EItemPreviewCameraId_MAX                 = 3,
};

// Enum DuneSandbox.EPrivacyDialogState
// NumValues: 0x0004
enum class EPrivacyDialogState : uint8
{
	Privacy                                  = 0,
	Cancel                                   = 1,
	DataCollection                           = 2,
	EPrivacyDialogState_MAX                  = 3,
};

// Enum DuneSandbox.EVehicleManagementTabs
// NumValues: 0x0005
enum class EVehicleManagementTabs : uint8
{
	Overview                                 = 0,
	Ammo                                     = 1,
	Inventory                                = 2,
	AccessControl                            = 3,
	EVehicleManagementTabs_MAX               = 4,
};

// Enum DuneSandbox.EWarningState
// NumValues: 0x0004
enum class EWarningState : uint8
{
	Error                                    = 0,
	Warning                                  = 1,
	Ok                                       = 2,
	EWarningState_MAX                        = 3,
};

// Enum DuneSandbox.EBattlegroupSortOption
// NumValues: 0x000A
enum class EBattlegroupSortOption : uint8
{
	Name                                     = 0,
	Level                                    = 1,
	Friends                                  = 2,
	Ccu                                      = 3,
	Players                                  = 4,
	Ping                                     = 5,
	Language                                 = 6,
	Locked                                   = 7,
	Random                                   = 8,
	Max                                      = 9,
};

// Enum DuneSandbox.EBattlegroupSortOrderType
// NumValues: 0x0003
enum class EBattlegroupSortOrderType : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
	EBattlegroupSortOrderType_MAX            = 2,
};

// Enum DuneSandbox.ECharacterCreationGridItemNameBehaviour
// NumValues: 0x0004
enum class ECharacterCreationGridItemNameBehaviour : uint8
{
	DefaultLabelOnFocus                      = 0,
	ChangeLabelOnSelectedOnly                = 1,
	NoLabel                                  = 2,
	ECharacterCreationGridItemNameBehaviour_MAX = 3,
};

// Enum DuneSandbox.ECharacterCreationGridItemApplyBehaviour
// NumValues: 0x0003
enum class ECharacterCreationGridItemApplyBehaviour : uint8
{
	DefaultApplyOnSelection                  = 0,
	ApplyOnFocus                             = 1,
	ECharacterCreationGridItemApplyBehaviour_MAX = 2,
};

// Enum DuneSandbox.ECCPresetDirection
// NumValues: 0x0003
enum class ECCPresetDirection : uint8
{
	Previous                                 = 0,
	Next                                     = 1,
	ECCPresetDirection_MAX                   = 2,
};

// Enum DuneSandbox.EButtonWidgetState
// NumValues: 0x0004
enum class EButtonWidgetState : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Locked                                   = 2,
	EButtonWidgetState_MAX                   = 3,
};

// Enum DuneSandbox.EImageLoadingType
// NumValues: 0x0003
enum class EImageLoadingType : uint8
{
	None                                     = 0,
	Hidden                                   = 1,
	EImageLoadingType_MAX                    = 2,
};

// Enum DuneSandbox.ESearchFilterType
// NumValues: 0x0003
enum class ESearchFilterType : uint8
{
	None                                     = 0,
	Players                                  = 1,
	ESearchFilterType_MAX                    = 2,
};

// Enum DuneSandbox.ETabsControlInputHintVisibility
// NumValues: 0x0004
enum class ETabsControlInputHintVisibility : uint8
{
	HideForSingleTab                         = 0,
	AlwaysHide                               = 1,
	AlwaysShow                               = 2,
	ETabsControlInputHintVisibility_MAX      = 3,
};

// Enum DuneSandbox.ECompassMarkerHeight
// NumValues: 0x0005
enum class ECompassMarkerHeight : uint8
{
	AtPlayerHeight                           = 0,
	DoNotDisplay                             = 0,
	AbovePlayer                              = 1,
	BelowPlayer                              = 2,
	ECompassMarkerHeight_MAX                 = 3,
};

// Enum DuneSandbox.ECompassMarkerClass
// NumValues: 0x0004
enum class ECompassMarkerClass : uint8
{
	None                                     = 0,
	Primary                                  = 1,
	Secondary                                = 2,
	ECompassMarkerClass_MAX                  = 3,
};

// Enum DuneSandbox.ERadialSlotTextOrientation
// NumValues: 0x0003
enum class ERadialSlotTextOrientation : uint8
{
	Above                                    = 0,
	Below                                    = 1,
	ERadialSlotTextOrientation_MAX           = 2,
};

// Enum DuneSandbox.ERadialWheelInputLockMode
// NumValues: 0x0005
enum class ERadialWheelInputLockMode : uint8
{
	None                                     = 0,
	FlickAndRemember                         = 1,
	FlickAndForget                           = 2,
	COUNT                                    = 3,
	ERadialWheelInputLockMode_MAX            = 4,
};

// Enum DuneSandbox.ERadialWheelCloseBehaviour
// NumValues: 0x0004
enum class ERadialWheelCloseBehaviour : uint8
{
	RequireAxisInputReset                    = 0,
	MaintainAxisInput                        = 1,
	COUNT                                    = 2,
	ERadialWheelCloseBehaviour_MAX           = 3,
};

// Enum DuneSandbox.ETrackStyle
// NumValues: 0x0002
enum class ETrackStyle : uint8
{
	TrackOnly                                = 0,
	ETrackStyle_MAX                          = 1,
};

// Enum DuneSandbox.ECrosshairTargetType
// NumValues: 0x0003
enum class ECrosshairTargetType : uint8
{
	None                                     = 0,
	Valid                                    = 1,
	ECrosshairTargetType_MAX                 = 2,
};

// Enum DuneSandbox.EDbnoState
// NumValues: 0x0004
enum class EDbnoState : uint8
{
	None                                     = 0,
	Reviving                                 = 1,
	Surrender                                = 2,
	EDbnoState_MAX                           = 3,
};

// Enum DuneSandbox.EAccessibilityTextType
// NumValues: 0x0003
enum class EAccessibilityTextType : uint8
{
	None                                     = 0,
	Subtitles                                = 1,
	EAccessibilityTextType_MAX               = 2,
};

// Enum DuneSandbox.EDryFireType
// NumValues: 0x0004
enum class EDryFireType : uint8
{
	None                                     = 0,
	OutOfAmmo                                = 1,
	NotEnoughAmmo                            = 2,
	EDryFireType_MAX                         = 3,
};

// Enum DuneSandbox.ECalculateDistanceTo
// NumValues: 0x0005
enum class ECalculateDistanceTo : uint8
{
	PlayerActor                              = 0,
	PlayerCamera                             = 1,
	ScanOrigin                               = 2,
	None                                     = 3,
	ECalculateDistanceTo_MAX                 = 4,
};

// Enum DuneSandbox.ESurveyState
// NumValues: 0x0003
enum class ESurveyState : uint8
{
	FullSurvey                               = 0,
	NoSurvey                                 = 1,
	ESurveyState_MAX                         = 2,
};

// Enum DuneSandbox.EBanType
// NumValues: 0x0006
enum class EBanType : uint8
{
	NotBanned                                = 0,
	Generic                                  = 1,
	GenericNoHelp                            = 2,
	ExpiredTrial                             = 3,
	Economy                                  = 4,
	EBanType_MAX                             = 5,
};

// Enum DuneSandbox.EGridAlignment
// NumValues: 0x0003
enum class EGridAlignment : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	EGridAlignment_MAX                       = 2,
};

// Enum DuneSandbox.EGuiActionBehavior
// NumValues: 0x0007
enum class EGuiActionBehavior : uint8
{
	None                                     = 0,
	ShowOnItemSelection                      = 1,
	ShowOnItemSelectionWithUseText           = 2,
	EnableOnItemSelection                    = 3,
	EnableOnItemSelectionWithUseText         = 4,
	SolarisWithdrawal                        = 5,
	EGuiActionBehavior_MAX                   = 6,
};

// Enum DuneSandbox.EInputSourceSupport
// NumValues: 0x0004
enum class EInputSourceSupport : uint8
{
	MouseKeyboardOnly                        = 0,
	GamepadOnly                              = 1,
	Both                                     = 2,
	EInputSourceSupport_MAX                  = 3,
};

// Enum DuneSandbox.EHitIndicatorDamageThreshold
// NumValues: 0x0004
enum class EHitIndicatorDamageThreshold : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	EHitIndicatorDamageThreshold_MAX         = 3,
};

// Enum DuneSandbox.EHitIndicatorDamageCardinalDirection
// NumValues: 0x0005
enum class EHitIndicatorDamageCardinalDirection : uint8
{
	Left                                     = 0,
	Top                                      = 1,
	Right                                    = 2,
	Bottom                                   = 3,
	EHitIndicatorDamageCardinalDirection_MAX = 4,
};

// Enum DuneSandbox.ELabelPosition
// NumValues: 0x0004
enum class ELabelPosition : uint8
{
	NoLabel                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	ELabelPosition_MAX                       = 3,
};

// Enum DuneSandbox.EInventoryContext
// NumValues: 0x0003
enum class EInventoryContext : uint8
{
	Default                                  = 0,
	WaterCircuit                             = 1,
	EInventoryContext_MAX                    = 2,
};

// Enum DuneSandbox.EEncondedType
// NumValues: 0x0004
enum class EEncondedType : uint8
{
	Invalid                                  = 0,
	Encoded                                  = 1,
	Empty                                    = 2,
	EEncondedType_MAX                        = 3,
};

// Enum DuneSandbox.EGridSortType
// NumValues: 0x0009
enum class EGridSortType : uint8
{
	Free                                     = 0,
	SlotOrder                                = 1,
	Newest                                   = 2,
	Alphabetical                             = 3,
	Volume                                   = 4,
	Filtered                                 = 5,
	Price                                    = 6,
	Tier                                     = 7,
	EGridSortType_MAX                        = 8,
};

// Enum DuneSandbox.EAutoScrollOnSelectionMode
// NumValues: 0x0004
enum class EAutoScrollOnSelectionMode : uint8
{
	Disabled                                 = 0,
	Enabled                                  = 1,
	EnabledOnGamepadOnly                     = 2,
	EAutoScrollOnSelectionMode_MAX           = 3,
};

// Enum DuneSandbox.FEMetaDialogType
// NumValues: 0x0003
enum class EFEMetaDialogType : uint8
{
	Classic                                  = 0,
	CharacterCreation                        = 1,
	FEMetaDialogType_MAX                     = 2,
};

// Enum DuneSandbox.EMetaDialogContentType
// NumValues: 0x0003
enum class EMetaDialogContentType : uint8
{
	Generic                                  = 0,
	Specialized                              = 1,
	EMetaDialogContentType_MAX               = 2,
};

// Enum DuneSandbox.EMetaDialogButtonGroup
// NumValues: 0x0005
enum class EMetaDialogButtonGroup : uint8
{
	None                                     = 0,
	Confirm                                  = 1,
	Cancel                                   = 2,
	ConfirmCancel                            = 3,
	EMetaDialogButtonGroup_MAX               = 4,
};

// Enum DuneSandbox.EServiceMessageNotificationStyle
// NumValues: 0x0003
enum class EServiceMessageNotificationStyle : uint8
{
	Generic                                  = 0,
	ServerShutdown                           = 1,
	EServiceMessageNotificationStyle_MAX     = 2,
};

// Enum DuneSandbox.EOvermapStatusSfxType
// NumValues: 0x0003
enum class EOvermapStatusSfxType : uint8
{
	Started                                  = 0,
	Ended                                    = 1,
	EOvermapStatusSfxType_MAX                = 2,
};

// Enum DuneSandbox.EInventoryMenuState
// NumValues: 0x0004
enum class EInventoryMenuState : uint8
{
	Home                                     = 0,
	Equipment                                = 1,
	RadialWheelsSwitcher                     = 2,
	EInventoryMenuState_MAX                  = 3,
};

// Enum DuneSandbox.EListContext
// NumValues: 0x0003
enum class EListContext : uint8
{
	RepairStation                            = 1,
	Recycler                                 = 2,
	EListContext_MAX                         = 3,
};

// Enum DuneSandbox.EConsoleVariableSetByFlag
// NumValues: 0x000B
enum class EConsoleVariableSetByFlag : uint8
{
	SetByConstructor                         = 0,
	SetByScalability                         = 1,
	SetByGameSetting                         = 2,
	SetByProjectSetting                      = 3,
	SetBySystemSettingsIni                   = 4,
	SetByDeviceProfile                       = 5,
	SetByConsoleVariablesIni                 = 6,
	SetByCommandline                         = 7,
	SetByCode                                = 8,
	SetByConsole                             = 9,
	EConsoleVariableSetByFlag_MAX            = 10,
};

// Enum DuneSandbox.ESkillBuildTab
// NumValues: 0x0003
enum class ESkillBuildTab : uint8
{
	Abilities                                = 0,
	Techniques                               = 1,
	ESkillBuildTab_MAX                       = 2,
};

// Enum DuneSandbox.EStatBarStatus
// NumValues: 0x0004
enum class EStatBarStatus : uint8
{
	Default                                  = 0,
	Low                                      = 1,
	Critical                                 = 2,
	EStatBarStatus_MAX                       = 3,
};

// Enum DuneSandbox.EModuleHighlightType
// NumValues: 0x0003
enum class EModuleHighlightType : uint8
{
	Outline                                  = 0,
	Fill                                     = 1,
	EModuleHighlightType_MAX                 = 2,
};

// Enum DuneSandbox.EVehicleModuleAttachState
// NumValues: 0x0004
enum class EVehicleModuleAttachState : uint8
{
	CannotBeAttached                         = 0,
	CanBeAttached                            = 1,
	IsAttached                               = 2,
	EVehicleModuleAttachState_MAX            = 3,
};

// Enum DuneSandbox.ETravelDialogType
// NumValues: 0x0004
enum class ETravelDialogType : uint8
{
	RequestDialog                            = 0,
	QueueDialog                              = 1,
	NoDialog                                 = 2,
	ETravelDialogType_MAX                    = 3,
};

// Enum DuneSandbox.EInputController
// NumValues: 0x0004
enum class EInputController : uint8
{
	PS4                                      = 0,
	XboxOne                                  = 1,
	KeyboardAndMouse                         = 2,
	EInputController_MAX                     = 3,
};

// Enum DuneSandbox.EKeyCodeArrayCondition
// NumValues: 0x0003
enum class EKeyCodeArrayCondition : uint8
{
	OneOfTheKeys                             = 0,
	AllOfTheKeys                             = 1,
	EKeyCodeArrayCondition_MAX               = 2,
};

// Enum DuneSandbox.EInteractionExecutionMode
// NumValues: 0x0004
enum class EInteractionExecutionMode : uint8
{
	Client                                   = 0,
	Server                                   = 1,
	ClientAndServer                          = 2,
	EInteractionExecutionMode_MAX            = 3,
};

// Enum DuneSandbox.EInteractionDysplayState
// NumValues: 0x0004
enum class EInteractionDysplayState : uint8
{
	ListAndHighlight                         = 0,
	HighlightOnly                            = 2,
	Hide                                     = 4,
	EInteractionDysplayState_MAX             = 5,
};

// Enum DuneSandbox.EInteractionErrorType
// NumValues: 0x0003
enum class EInteractionErrorType : uint8
{
	None                                     = 0,
	IGWDisallows                             = 2,
	EInteractionErrorType_MAX                = 3,
};

// Enum DuneSandbox.EInteractionOnClientCompletedBroadcastResult
// NumValues: 0x0003
enum class EInteractionOnClientCompletedBroadcastResult : uint8
{
	Completed                                = 0,
	Cancelled                                = 2,
	EInteractionOnClientCompletedBroadcastResult_MAX = 3,
};

// Enum DuneSandbox.ERefuelFailureReason
// NumValues: 0x0005
enum class ERefuelFailureReason : uint8
{
	None                                     = 0,
	Internal                                 = 1,
	NoItem                                   = 2,
	AlreadyFull                              = 3,
	ERefuelFailureReason_MAX                 = 4,
};

// Enum DuneSandbox.EGameItemMode
// NumValues: 0x0004
enum class EGameItemMode : uint8
{
	Server                                   = 0,
	Client                                   = 1,
	ServerClient                             = 2,
	EGameItemMode_MAX                        = 3,
};

// Enum DuneSandbox.ECanEquip
// NumValues: 0x0008
enum class ECanEquip : uint8
{
	Empty                                    = 0,
	SuccessEquip                             = 1,
	SuccessEquipSwap                         = 2,
	SuccessUnequip                           = 3,
	Failure                                  = 100,
	FailureTargetFull                        = 101,
	FailureItemSwitchingBlocked              = 102,
	ECanEquip_MAX                            = 103,
};

// Enum DuneSandbox.ECanUse
// NumValues: 0x0008
enum class ECanUse : uint8
{
	SuccessShortcutUse                       = 0,
	SuccessShortcutAndInventoryUse           = 1,
	SuccessShortcutAndInventoryAndAutoUse    = 2,
	SuccessUsedSameEquippable                = 3,
	Failure                                  = 50,
	FailureItemSwitchingBlocked              = 51,
	FailureBlockedByClimb                    = 52,
	ECanUse_MAX                              = 53,
};

// Enum DuneSandbox.EResultOfCapacityUpdate
// NumValues: 0x0004
enum class EResultOfCapacityUpdate : uint8
{
	NoChange                                 = 0,
	MaxCapacityReached                       = 1,
	NoLongerAtMaxCapacity                    = 2,
	EResultOfCapacityUpdate_MAX              = 3,
};

// Enum DuneSandbox.EShortcutType
// NumValues: 0x0005
enum class EShortcutType : uint8
{
	RadialMenu                               = 0,
	GadgetAbility                            = 1,
	VehicleAbility                           = 2,
	Count                                    = 3,
	EShortcutType_MAX                        = 4,
};

// Enum DuneSandbox.EStarDoorStates
// NumValues: 0x0009
enum class EStarDoorStates : uint8
{
	BaseState                                = 0,
	State1                                   = 1,
	State2                                   = 2,
	State3                                   = 3,
	State4                                   = 4,
	State5                                   = 5,
	State6                                   = 6,
	State7                                   = 7,
	EStarDoorStates_MAX                      = 8,
};

// Enum DuneSandbox.EJourneyCosmeticEventExecutionRule
// NumValues: 0x0004
enum class EJourneyCosmeticEventExecutionRule : uint8
{
	Server                                   = 0,
	Client                                   = 1,
	Both                                     = 2,
	EJourneyCosmeticEventExecutionRule_MAX   = 3,
};

// Enum DuneSandbox.EJourneyStoryStopReason
// NumValues: 0x0007
enum class EJourneyStoryStopReason : uint8
{
	None                                     = 0,
	DurationExpired                          = 1,
	Completed                                = 2,
	AllPlayersLeft                           = 3,
	ManuallyStopped                          = 4,
	EndPlay                                  = 5,
	EJourneyStoryStopReason_MAX              = 6,
};

// Enum DuneSandbox.ELandsraadControlPointState
// NumValues: 0x0005
enum class ELandsraadControlPointState : uint8
{
	Uncontrolled                             = 0,
	GainingControl                           = 1,
	Controlled                               = 2,
	LosingControl                            = 3,
	ELandsraadControlPointState_MAX          = 4,
};

// Enum DuneSandbox.EClassRepNodeMapping
// NumValues: 0x0008
enum class EClassRepNodeMapping : uint8
{
	NotRouted                                = 0,
	RelevantAllConnections                   = 1,
	OnlyRelevantToOwner                      = 2,
	Spatialize_Static                        = 3,
	Spatialize_Dynamic                       = 4,
	Spatialize_Dormancy                      = 5,
	Spatialize_Priority                      = 6,
	EClassRepNodeMapping_MAX                 = 7,
};

// Enum DuneSandbox.EOvermapPawnFlags
// NumValues: 0x0003
enum class EOvermapPawnFlags : uint8
{
	None                                     = 0,
	IsPassenger                              = 1,
	EOvermapPawnFlags_MAX                    = 2,
};

// Enum DuneSandbox.EOvermapVehicleState
// NumValues: 0x0005
enum class EOvermapVehicleState : uint8
{
	Flying                                   = 0,
	Landing                                  = 1,
	Landed                                   = 2,
	Takeoff                                  = 3,
	EOvermapVehicleState_MAX                 = 4,
};

// Enum DuneSandbox.EOvermapPawnFlightMode
// NumValues: 0x0004
enum class EOvermapPawnFlightMode : uint8
{
	Landed                                   = 0,
	Hovering                                 = 1,
	Flying                                   = 2,
	EOvermapPawnFlightMode_MAX               = 3,
};

// Enum DuneSandbox.ESkillTree
// NumValues: 0x0007
enum class ESkillTree : uint8
{
	Hidden                                   = 0,
	BeneGesserit                             = 1,
	Mentat                                   = 2,
	Trooper                                  = 3,
	Swordmaster                              = 4,
	Planetologist                            = 5,
	MAX                                      = 6,
};

// Enum DuneSandbox.EXPEarnArea
// NumValues: 0x0004
enum class EXPEarnArea : uint8
{
	Science                                  = 0,
	Combat                                   = 1,
	Exploration                              = 2,
	MAX                                      = 3,
};

// Enum DuneSandbox.EPerkSetterOp
// NumValues: 0x0004
enum class EPerkSetterOp : uint8
{
	Add                                      = 0,
	Remove                                   = 1,
	Swap                                     = 2,
	EPerkSetterOp_MAX                        = 3,
};

// Enum DuneSandbox.EDuneRazerHapticType
// NumValues: 0x0004
enum class EDuneRazerHapticType : uint8
{
	NoHaptics                                = 0,
	Trigger                                  = 1,
	SWITCH                                   = 2,
	EDuneRazerHapticType_MAX                 = 3,
};

// Enum DuneSandbox.ESandStormSandShiftType
// NumValues: 0x0004
enum class ESandStormSandShiftType : uint8
{
	Reveal                                   = 0,
	Cover                                    = 1,
	RevealAndCover                           = 2,
	ESandStormSandShiftType_MAX              = 3,
};

// Enum DuneSandbox.ESandwormAnimationState
// NumValues: 0x0007
enum class ESandwormAnimationState : uint8
{
	None                                     = 0,
	ChaseClosed                              = 1,
	ChaseOpen                                = 2,
	Bail                                     = 3,
	Attack                                   = 4,
	Observe                                  = 5,
	ESandwormAnimationState_MAX              = 6,
};

// Enum DuneSandbox.ESandwormChaseAttackStateType
// NumValues: 0x0010
enum class ESandwormChaseAttackStateType : uint8
{
	None                                     = 0,
	SurfaceBreach                            = 1,
	ClosedMouthChaseLoop                     = 2,
	CloseMouthDive                           = 3,
	Eat                                      = 4,
	OpenMouthChaseLoop                       = 5,
	OpenMouthBegin                           = 6,
	OpenMouthDive                            = 7,
	EatFromOpenMouthChase                    = 8,
	ClosedMouthBegin                         = 9,
	SurfaceOpen                              = 10,
	StareIn                                  = 11,
	StareInOpen                              = 12,
	StareLoop                                = 13,
	StareOut                                 = 14,
	ESandwormChaseAttackStateType_MAX        = 15,
};

// Enum DuneSandbox.ESandwormBoneOvelapPrimitiveType
// NumValues: 0x0004
enum class ESandwormBoneOvelapPrimitiveType : uint8
{
	Sphere                                   = 0,
	Capsule                                  = 1,
	Box                                      = 2,
	ESandwormBoneOvelapPrimitiveType_MAX     = 3,
};

// Enum DuneSandbox.ESandwormSpawningType
// NumValues: 0x0004
enum class ESandwormSpawningType : uint32
{
	UseAllowList                             = 0,
	ForceEnable                              = 1,
	ForceDisable                             = 2,
	ESandwormSpawningType_MAX                = 3,
};

// Enum DuneSandbox.ESandowmTargetPriority
// NumValues: 0x0005
enum class ESandowmTargetPriority : uint8
{
	Medium                                   = 0,
	Low                                      = 1,
	High                                     = 2,
	Extreme                                  = 3,
	ESandowmTargetPriority_MAX               = 4,
};

// Enum DuneSandbox.EThreatBlobType
// NumValues: 0x000C
enum class EThreatBlobType : uint8
{
	Default                                  = 0,
	Character                                = 1,
	Group                                    = 2,
	Thumper                                  = 3,
	UniqueThumper                            = 4,
	Vehicle                                  = 5,
	Npc                                      = 6,
	DesertWreck                              = 7,
	Area                                     = 8,
	Spice                                    = 9,
	ValuableDesertWreck                      = 10,
	EThreatBlobType_MAX                      = 11,
};

// Enum DuneSandbox.EScannableType
// NumValues: 0x0005
enum class EScannableType : uint8
{
	None                                     = 0,
	Bio                                      = 1,
	Chem                                     = 2,
	Tech                                     = 3,
	EScannableType_MAX                       = 4,
};

// Enum DuneSandbox.EPlayerToPlayerInteractionName
// NumValues: 0x000F
enum class EPlayerToPlayerInteractionName : uint8
{
	Open_Interaction_Wheel                   = 0,
	Close_Interaction_Wheel                  = 1,
	Chat                                     = 2,
	Trade                                    = 3,
	Open_Inspect_Menu                        = 4,
	Friend_Request                           = 5,
	Friend_Accept                            = 6,
	Friend_Remove                            = 7,
	Friend_Reject                            = 8,
	Party_Invite                             = 9,
	Mute                                     = 10,
	Block                                    = 11,
	Unblock                                  = 12,
	Report                                   = 13,
	EPlayerToPlayerInteractionName_MAX       = 14,
};

// Enum DuneSandbox.EPlayerOnlineStateType
// NumValues: 0x0007
enum class EPlayerOnlineStateType : uint8
{
	OnlineSameMapAndDimension                = 0,
	OnlineSameMapDifferentDimension          = 1,
	OnlineDifferentMap                       = 2,
	OnlineDifferentBattlegroup               = 3,
	Offline                                  = 4,
	Blocked                                  = 5,
	EPlayerOnlineStateType_MAX               = 6,
};

// Enum DuneSandbox.ESourceMenuType
// NumValues: 0x0005
enum class ESourceMenuType : uint8
{
	InteractionWheel                         = 0,
	InspectMenu                              = 1,
	FriendList                               = 2,
	AutoScript                               = 3,
	ESourceMenuType_MAX                      = 4,
};

// Enum DuneSandbox.EAllianceType
// NumValues: 0x0008
enum class EAllianceType : uint8
{
	None                                     = 0,
	Party_0                                  = 1,
	Party_1                                  = 2,
	Party_2                                  = 4,
	Party_3                                  = 8,
	Friend                                   = 16,
	Guild                                    = 32,
	EAllianceType_MAX                        = 33,
};

// Enum DuneSandbox.ESocialInteractionType
// NumValues: 0x0007
enum class ESocialInteractionType : uint32
{
	None                                     = 0,
	ShowInspectMenu                          = 1,
	AddToGroup                               = 2,
	Trade                                    = 3,
	Whisper                                  = 4,
	AddToGuild                               = 5,
	ESocialInteractionType_MAX               = 6,
};

// Enum DuneSandbox.ESocialInteractionErrorMessageType
// NumValues: 0x000D
enum class ESocialInteractionErrorMessageType : uint8
{
	None                                     = 0,
	AddToGroup_AlreadyInAGroup               = 1,
	AddToGroup_PartyIsFull                   = 2,
	AddToGroup_PartyInvitePending            = 3,
	Trade_PlayerIsBusy                       = 4,
	AddAsFriend_PlayerBlocked                = 5,
	AddAsFriend_FriendInvitePending          = 6,
	AddToGuild_NoGuild                       = 7,
	AddToGuild_NoPermission                  = 8,
	AddToGuild_AlreadyInSameGuild            = 9,
	AddToGuild_TargetIsInTooManyGuilds       = 10,
	AddToGuild_TargetHasAlreadyGuildInvite   = 11,
	ESocialInteractionErrorMessageType_MAX   = 12,
};

// Enum DuneSandbox.ESpiceBloomEvent
// NumValues: 0x0007
enum class ESpiceBloomEvent : uint8
{
	Bloom_None                               = 0,
	Bloom_Rumble                             = 1,
	Bloom_Gas                                = 2,
	Bloom_SandBoil                           = 3,
	Bloom_OverPressure                       = 4,
	Bloom_Geyser                             = 5,
	Bloom_MAX                                = 6,
};

// Enum DuneSandbox.ESpiceFieldSequence
// NumValues: 0x0005
enum class ESpiceFieldSequence : uint32
{
	PreBloom                                 = 0,
	Bloom                                    = 1,
	PostBloom                                = 2,
	Invalid                                  = 3,
	ESpiceFieldSequence_MAX                  = 4,
};

// Enum DuneSandbox.ESpiceFieldActivationStatus
// NumValues: 0x0005
enum class ESpiceFieldActivationStatus : uint8
{
	Min                                      = 0,
	Any                                      = 0,
	Deactivated                              = 1,
	Activated                                = 2,
	Max                                      = 2,
};

// Enum DuneSandbox.EScannableLogicOverrideType
// NumValues: 0x0004
enum class EScannableLogicOverrideType : uint8
{
	FollowScannerLogic                       = 0,
	DetectOnlyIfDiscovered                   = 1,
	NoMarkerDetection                        = 2,
	EScannableLogicOverrideType_MAX          = 3,
};

// Enum DuneSandbox.ESurveyReportQuantityCategory
// NumValues: 0x0005
enum class ESurveyReportQuantityCategory : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	ESurveyReportQuantityCategory_MAX        = 4,
};

// Enum DuneSandbox.EFogHeightPositioning
// NumValues: 0x0004
enum class EFogHeightPositioning : uint32
{
	Own                                      = 0,
	FromPlayer                               = 1,
	FromLandscape                            = 2,
	EFogHeightPositioning_MAX                = 3,
};

// Enum DuneSandbox.ETravelRequirementResult
// NumValues: 0x0003
enum class ETravelRequirementResult : uint8
{
	IsPassed                                 = 0,
	IsNotPassed                              = 1,
	ETravelRequirementResult_MAX             = 2,
};

// Enum DuneSandbox.ETutorialState
// NumValues: 0x0006
enum class ETutorialState : uint8
{
	Active                                   = 0,
	Revealed                                 = 1,
	Completed                                = 2,
	Canceled                                 = 3,
	None                                     = 255,
	ETutorialState_MAX                       = 256,
};

// Enum DuneSandbox.ETutorialReplicationReason
// NumValues: 0x0003
enum class ETutorialReplicationReason : uint8
{
	Load                                     = 0,
	Change                                   = 1,
	ETutorialReplicationReason_MAX           = 2,
};

// Enum DuneSandbox.ETutorialVisualStyle
// NumValues: 0x0003
enum class ETutorialVisualStyle : uint8
{
	Full                                     = 0,
	Hint                                     = 1,
	ETutorialVisualStyle_MAX                 = 2,
};

// Enum DuneSandbox.EGizmoRotationAllowanceFlags
// NumValues: 0x0006
enum class EGizmoRotationAllowanceFlags : uint8
{
	None                                     = 0,
	Pitch                                    = 1,
	Yaw                                      = 2,
	Roll                                     = 4,
	All                                      = 7,
	EGizmoRotationAllowanceFlags_MAX         = 8,
};

// Enum DuneSandbox.EActorSpawnerPreviewType
// NumValues: 0x0004
enum class EActorSpawnerPreviewType : uint8
{
	None                                     = 0,
	Mesh                                     = 1,
	Actor                                    = 2,
	EActorSpawnerPreviewType_MAX             = 3,
};

// Enum DuneSandbox.EGCAAddOrRemove
// NumValues: 0x0003
enum class EGCAAddOrRemove : uint8
{
	Add                                      = 0,
	Remove                                   = 1,
	EGCAAddOrRemove_MAX                      = 2,
};

// Enum DuneSandbox.EDuneComparisonMethod
// NumValues: 0x0007
enum class EDuneComparisonMethod : uint8
{
	Equal_To                                 = 0,
	Not_Equal_To                             = 1,
	Greater_Than_Or_Equal_To                 = 2,
	Less_Than_Or_Equal_To                    = 3,
	Greater_Than                             = 4,
	Less_Than                                = 5,
	EDuneComparisonMethod_MAX                = 6,
};

// Enum DuneSandbox.ELoreObjectType
// NumValues: 0x0004
enum class ELoreObjectType : uint8
{
	ShigawireReel                            = 0,
	Filmbook                                 = 1,
	Document                                 = 2,
	ELoreObjectType_MAX                      = 3,
};

// Enum DuneSandbox.EFilterTextErrorType
// NumValues: 0x000C
enum class EFilterTextErrorType : uint8
{
	PrecedingOrTrailingWhiteSpaces           = 0,
	MinCharacters                            = 1,
	MaxCharacters                            = 2,
	CombinedLengthCheck                      = 3,
	TextCharactersTypeFiltering              = 4,
	ProfanityFiltering                       = 5,
	ReservedWordFiltering                    = 6,
	MaxLineBreaks                            = 7,
	SpecialCharacterNotBetweenLettersOrNumbers = 8,
	TooManyConsecutiveNumbers                = 9,
	ProfanityFilterExternalServiceRequestFailed = 10,
	EFilterTextErrorType_MAX                 = 11,
};

// Enum DuneSandbox.EFilterTextCharactersType
// NumValues: 0x0008
enum class EFilterTextCharactersType : uint8
{
	BasicAlphabetOnly                        = 0,
	BasicAlphanumericOnly                    = 1,
	AlphabetOnly                             = 2,
	AlphanumericOnly                         = 3,
	AlphanumericWithSpecialChars             = 4,
	Regex                                    = 5,
	AllowAll                                 = 6,
	EFilterTextCharactersType_MAX            = 7,
};

// Enum DuneSandbox.ESeatExitStatus
// NumValues: 0x0004
enum class ESeatExitStatus : uint8
{
	Unknown                                  = 0,
	Blocked                                  = 1,
	NotBlocked                               = 2,
	ESeatExitStatus_MAX                      = 3,
};

// Enum DuneSandbox.EVehicleModuleInventoryType
// NumValues: 0x0003
enum class EVehicleModuleInventoryType : uint16
{
	Invalid                                  = 0,
	Ammunition                               = 1,
	EVehicleModuleInventoryType_MAX          = 2,
};

// Enum DuneSandbox.EVehicleStateFlag
// NumValues: 0x000D
enum class EVehicleStateFlag : uint16
{
	None                                     = 0,
	OutOfOrder                               = 1,
	Boosting                                 = 2,
	Firing                                   = 4,
	PlanarLock                               = 8,
	Harnessing                               = 16,
	CriticalState                            = 32,
	Dashing                                  = 64,
	InSandwormDangerZone                     = 128,
	EngineBroken                             = 256,
	Wrecked                                  = 512,
	PowerUnitDisabled                        = 1024,
	EVehicleStateFlag_MAX                    = 1025,
};

// Enum DuneSandbox.EVehicleBackupMode
// NumValues: 0x0004
enum class EVehicleBackupMode : uint8
{
	Disabled                                 = 0,
	StoreVehicle                             = 1,
	RestoreVehicle                           = 2,
	EVehicleBackupMode_MAX                   = 3,
};

// Enum DuneSandbox.EWeldingTorchMode
// NumValues: 0x0006
enum class EWeldingTorchMode : uint8
{
	Repairing                                = 0,
	Cutting                                  = 1,
	Assembling                               = 2,
	Customizing                              = 3,
	None                                     = 4,
	EWeldingTorchMode_MAX                    = 5,
};

// Enum DuneSandbox.EZoneShape
// NumValues: 0x0006
enum class EZoneShape : uint8
{
	Box                                      = 0,
	Sphere                                   = 1,
	Cylinder                                 = 2,
	HollowSphere                             = 3,
	HollowCylinder                           = 4,
	EZoneShape_MAX                           = 5,
};

// ScriptStruct DuneSandbox.VehicleModuleCustomizationMeshInfo
// 0x00E0 (0x00E0 - 0x0000)
struct FVehicleModuleCustomizationMeshInfo final
{
public:
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_AnimClass;                                       // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UMaterialInterface>> Materials;                           // 0x0090(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleCustomizationMeshInfo) == 0x000008, "Wrong alignment on FVehicleModuleCustomizationMeshInfo");
static_assert(sizeof(FVehicleModuleCustomizationMeshInfo) == 0x0000E0, "Wrong size on FVehicleModuleCustomizationMeshInfo");
static_assert(offsetof(FVehicleModuleCustomizationMeshInfo, StaticMesh) == 0x000000, "Member 'FVehicleModuleCustomizationMeshInfo::StaticMesh' has a wrong offset!");
static_assert(offsetof(FVehicleModuleCustomizationMeshInfo, SkeletalMesh) == 0x000030, "Member 'FVehicleModuleCustomizationMeshInfo::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FVehicleModuleCustomizationMeshInfo, m_AnimClass) == 0x000060, "Member 'FVehicleModuleCustomizationMeshInfo::m_AnimClass' has a wrong offset!");
static_assert(offsetof(FVehicleModuleCustomizationMeshInfo, Materials) == 0x000090, "Member 'FVehicleModuleCustomizationMeshInfo::Materials' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleMeshInfo
// 0x00E0 (0x00E0 - 0x0000)
struct FVehicleModuleMeshInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreatePhysicsState;                               // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BonesExcludedFromPhysicsState;                     // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRenderCustomDepth;                                // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             Mesh;                                              // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UMaterialInterface>> Materials;                           // 0x0090(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleMeshInfo) == 0x000008, "Wrong alignment on FVehicleModuleMeshInfo");
static_assert(sizeof(FVehicleModuleMeshInfo) == 0x0000E0, "Wrong size on FVehicleModuleMeshInfo");
static_assert(offsetof(FVehicleModuleMeshInfo, Name) == 0x000000, "Member 'FVehicleModuleMeshInfo::Name' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMeshInfo, SocketName) == 0x000008, "Member 'FVehicleModuleMeshInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMeshInfo, bCreatePhysicsState) == 0x000010, "Member 'FVehicleModuleMeshInfo::bCreatePhysicsState' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMeshInfo, BonesExcludedFromPhysicsState) == 0x000018, "Member 'FVehicleModuleMeshInfo::BonesExcludedFromPhysicsState' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMeshInfo, bRenderCustomDepth) == 0x000028, "Member 'FVehicleModuleMeshInfo::bRenderCustomDepth' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMeshInfo, Mesh) == 0x000030, "Member 'FVehicleModuleMeshInfo::Mesh' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMeshInfo, SkeletalMesh) == 0x000060, "Member 'FVehicleModuleMeshInfo::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMeshInfo, Materials) == 0x000090, "Member 'FVehicleModuleMeshInfo::Materials' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleCustomizationModule
// 0x0260 (0x0260 - 0x0000)
struct FVehicleCustomizationModule final
{
public:
	struct FVehicleModuleCustomizationMeshInfo    m_ModuleMesh;                                      // 0x0000(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVehicleModuleCustomizationMeshInfo    m_BrokenModuleMesh;                                // 0x00E0(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             m_StaticWeaponCollisionOverride;                   // 0x01C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UStaticMesh>> m_SkeletalWeaponCollisionMeshOverrides;     // 0x01F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FVehicleModuleMeshInfo>         m_ExtensionMeshes;                                 // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVehicleModuleMeshInfo>         m_ShieldMeshes;                                    // 0x0250(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCustomizationModule) == 0x000008, "Wrong alignment on FVehicleCustomizationModule");
static_assert(sizeof(FVehicleCustomizationModule) == 0x000260, "Wrong size on FVehicleCustomizationModule");
static_assert(offsetof(FVehicleCustomizationModule, m_ModuleMesh) == 0x000000, "Member 'FVehicleCustomizationModule::m_ModuleMesh' has a wrong offset!");
static_assert(offsetof(FVehicleCustomizationModule, m_BrokenModuleMesh) == 0x0000E0, "Member 'FVehicleCustomizationModule::m_BrokenModuleMesh' has a wrong offset!");
static_assert(offsetof(FVehicleCustomizationModule, m_StaticWeaponCollisionOverride) == 0x0001C0, "Member 'FVehicleCustomizationModule::m_StaticWeaponCollisionOverride' has a wrong offset!");
static_assert(offsetof(FVehicleCustomizationModule, m_SkeletalWeaponCollisionMeshOverrides) == 0x0001F0, "Member 'FVehicleCustomizationModule::m_SkeletalWeaponCollisionMeshOverrides' has a wrong offset!");
static_assert(offsetof(FVehicleCustomizationModule, m_ExtensionMeshes) == 0x000240, "Member 'FVehicleCustomizationModule::m_ExtensionMeshes' has a wrong offset!");
static_assert(offsetof(FVehicleCustomizationModule, m_ShieldMeshes) == 0x000250, "Member 'FVehicleCustomizationModule::m_ShieldMeshes' has a wrong offset!");

// ScriptStruct DuneSandbox.RespawnLocationUniqueId
// 0x0008 (0x0008 - 0x0000)
struct FRespawnLocationUniqueId final
{
public:
	int64                                         m_UniqueId;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRespawnLocationUniqueId) == 0x000008, "Wrong alignment on FRespawnLocationUniqueId");
static_assert(sizeof(FRespawnLocationUniqueId) == 0x000008, "Wrong size on FRespawnLocationUniqueId");
static_assert(offsetof(FRespawnLocationUniqueId, m_UniqueId) == 0x000000, "Member 'FRespawnLocationUniqueId::m_UniqueId' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsEnumOptionBase
// 0x0020 (0x0020 - 0x0000)
struct FSettingsEnumOptionBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSettingsEnumOptionBase) == 0x000008, "Wrong alignment on FSettingsEnumOptionBase");
static_assert(sizeof(FSettingsEnumOptionBase) == 0x000020, "Wrong size on FSettingsEnumOptionBase");
static_assert(offsetof(FSettingsEnumOptionBase, DisplayName) == 0x000008, "Member 'FSettingsEnumOptionBase::DisplayName' has a wrong offset!");

// ScriptStruct DuneSandbox.DamageVisualizationHitMarker
// 0x0020 (0x0020 - 0x0000)
struct FDamageVisualizationHitMarker final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageVisualizationHitMarker) == 0x000008, "Wrong alignment on FDamageVisualizationHitMarker");
static_assert(sizeof(FDamageVisualizationHitMarker) == 0x000020, "Wrong size on FDamageVisualizationHitMarker");
static_assert(offsetof(FDamageVisualizationHitMarker, Location) == 0x000000, "Member 'FDamageVisualizationHitMarker::Location' has a wrong offset!");
static_assert(offsetof(FDamageVisualizationHitMarker, Radius) == 0x000018, "Member 'FDamageVisualizationHitMarker::Radius' has a wrong offset!");

// ScriptStruct DuneSandbox.ClothingHydrationStats
// 0x0008 (0x0008 - 0x0000)
struct FClothingHydrationStats final
{
public:
	float                                         DehydrationMitigationModifier;                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DehydrationCaptureModifier;                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClothingHydrationStats) == 0x000004, "Wrong alignment on FClothingHydrationStats");
static_assert(sizeof(FClothingHydrationStats) == 0x000008, "Wrong size on FClothingHydrationStats");
static_assert(offsetof(FClothingHydrationStats, DehydrationMitigationModifier) == 0x000000, "Member 'FClothingHydrationStats::DehydrationMitigationModifier' has a wrong offset!");
static_assert(offsetof(FClothingHydrationStats, DehydrationCaptureModifier) == 0x000004, "Member 'FClothingHydrationStats::DehydrationCaptureModifier' has a wrong offset!");

// ScriptStruct DuneSandbox.ClothingHydrationStatsComponent_BlueprintWrapper
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FClothingHydrationStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClothingHydrationStats                ClothingHydrationStats;                            // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClothingHydrationStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FClothingHydrationStatsComponent_BlueprintWrapper");
static_assert(sizeof(FClothingHydrationStatsComponent_BlueprintWrapper) == 0x000038, "Wrong size on FClothingHydrationStatsComponent_BlueprintWrapper");
static_assert(offsetof(FClothingHydrationStatsComponent_BlueprintWrapper, ClothingHydrationStats) == 0x000030, "Member 'FClothingHydrationStatsComponent_BlueprintWrapper::ClothingHydrationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.ECommuninetChannel
// 0x0000 (0x0008 - 0x0008)
struct FECommuninetChannel final : public FStringEnumValue
{
};
static_assert(alignof(FECommuninetChannel) == 0x000004, "Wrong alignment on FECommuninetChannel");
static_assert(sizeof(FECommuninetChannel) == 0x000008, "Wrong size on FECommuninetChannel");

// ScriptStruct DuneSandbox.EItemTemplateID
// 0x0000 (0x0008 - 0x0008)
struct FEItemTemplateID final : public FStringEnumValue
{
};
static_assert(alignof(FEItemTemplateID) == 0x000004, "Wrong alignment on FEItemTemplateID");
static_assert(sizeof(FEItemTemplateID) == 0x000008, "Wrong size on FEItemTemplateID");

// ScriptStruct DuneSandbox.EMapMarker
// 0x0000 (0x0008 - 0x0008)
struct FEMapMarker final : public FStringEnumValue
{
};
static_assert(alignof(FEMapMarker) == 0x000004, "Wrong alignment on FEMapMarker");
static_assert(sizeof(FEMapMarker) == 0x000008, "Wrong size on FEMapMarker");

// ScriptStruct DuneSandbox.ECommuninetActionType
// 0x0000 (0x0008 - 0x0008)
struct FECommuninetActionType final : public FStringEnumValue
{
};
static_assert(alignof(FECommuninetActionType) == 0x000004, "Wrong alignment on FECommuninetActionType");
static_assert(sizeof(FECommuninetActionType) == 0x000008, "Wrong size on FECommuninetActionType");

// ScriptStruct DuneSandbox.ENotificationType
// 0x0000 (0x0008 - 0x0008)
struct FENotificationType final : public FStringEnumValue
{
};
static_assert(alignof(FENotificationType) == 0x000004, "Wrong alignment on FENotificationType");
static_assert(sizeof(FENotificationType) == 0x000008, "Wrong size on FENotificationType");

// ScriptStruct DuneSandbox.CommuninetMessageRowBase
// 0x0230 (0x0240 - 0x0010)
struct FCommuninetMessageRowBase final : public FTableRowBase
{
public:
	struct FECommuninetChannel                    m_Channel;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_Text;                                            // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_AudioEvent;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_PriorityLevel;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_PriorityDecayInSeconds;                          // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LowPriorityTimeoutInSeconds;                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_AudioCooldownInSeconds;                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            m_UsabilityIcon;                                   // 0x0050(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       m_CraftItem;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bNeedsCommuninetSignal;                          // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsResendableByServer;                           // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bTriggerOnlyOnce;                                // 0x012A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_AcceptText;                                      // 0x0130(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_DeclineText;                                     // 0x0148(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          m_bContainsMapMarkerLocation;                      // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bConfirmMessageDelivery;                         // 0x0161(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<ECommuninetMessageTarget>                m_MessageTargets;                                  // 0x0168(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_MetaDialogTitle;                                 // 0x01B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              m_MapMarkerWorldLocation;                          // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEMapMarker                            m_MapMarkerType;                                   // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FECommuninetActionType>           m_ActionsOnReceive;                                // 0x01E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FENotificationType                     m_InstantRequestNotificationType;                  // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommuninetMessageRowBase) == 0x000010, "Wrong alignment on FCommuninetMessageRowBase");
static_assert(sizeof(FCommuninetMessageRowBase) == 0x000240, "Wrong size on FCommuninetMessageRowBase");
static_assert(offsetof(FCommuninetMessageRowBase, m_Channel) == 0x000010, "Member 'FCommuninetMessageRowBase::m_Channel' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_Text) == 0x000018, "Member 'FCommuninetMessageRowBase::m_Text' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_AudioEvent) == 0x000030, "Member 'FCommuninetMessageRowBase::m_AudioEvent' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_PriorityLevel) == 0x000038, "Member 'FCommuninetMessageRowBase::m_PriorityLevel' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_PriorityDecayInSeconds) == 0x00003C, "Member 'FCommuninetMessageRowBase::m_PriorityDecayInSeconds' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_LowPriorityTimeoutInSeconds) == 0x000040, "Member 'FCommuninetMessageRowBase::m_LowPriorityTimeoutInSeconds' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_AudioCooldownInSeconds) == 0x000044, "Member 'FCommuninetMessageRowBase::m_AudioCooldownInSeconds' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_UsabilityIcon) == 0x000050, "Member 'FCommuninetMessageRowBase::m_UsabilityIcon' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_CraftItem) == 0x000120, "Member 'FCommuninetMessageRowBase::m_CraftItem' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_bNeedsCommuninetSignal) == 0x000128, "Member 'FCommuninetMessageRowBase::m_bNeedsCommuninetSignal' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_bIsResendableByServer) == 0x000129, "Member 'FCommuninetMessageRowBase::m_bIsResendableByServer' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_bTriggerOnlyOnce) == 0x00012A, "Member 'FCommuninetMessageRowBase::m_bTriggerOnlyOnce' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_AcceptText) == 0x000130, "Member 'FCommuninetMessageRowBase::m_AcceptText' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_DeclineText) == 0x000148, "Member 'FCommuninetMessageRowBase::m_DeclineText' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_bContainsMapMarkerLocation) == 0x000160, "Member 'FCommuninetMessageRowBase::m_bContainsMapMarkerLocation' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_bConfirmMessageDelivery) == 0x000161, "Member 'FCommuninetMessageRowBase::m_bConfirmMessageDelivery' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_MessageTargets) == 0x000168, "Member 'FCommuninetMessageRowBase::m_MessageTargets' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_MetaDialogTitle) == 0x0001B8, "Member 'FCommuninetMessageRowBase::m_MetaDialogTitle' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_MapMarkerWorldLocation) == 0x0001D0, "Member 'FCommuninetMessageRowBase::m_MapMarkerWorldLocation' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_MapMarkerType) == 0x0001E0, "Member 'FCommuninetMessageRowBase::m_MapMarkerType' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_ActionsOnReceive) == 0x0001E8, "Member 'FCommuninetMessageRowBase::m_ActionsOnReceive' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRowBase, m_InstantRequestNotificationType) == 0x000238, "Member 'FCommuninetMessageRowBase::m_InstantRequestNotificationType' has a wrong offset!");

// ScriptStruct DuneSandbox.AICombatModifiers
// 0x0018 (0x0018 - 0x0000)
struct FAICombatModifiers final
{
public:
	float                                         Aggressiveness;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mobility;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetThresholds;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreferredDistanceToTargetMin;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreferredDistanceToTargetMax;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAICombatModifiers) == 0x000004, "Wrong alignment on FAICombatModifiers");
static_assert(sizeof(FAICombatModifiers) == 0x000018, "Wrong size on FAICombatModifiers");
static_assert(offsetof(FAICombatModifiers, Aggressiveness) == 0x000000, "Member 'FAICombatModifiers::Aggressiveness' has a wrong offset!");
static_assert(offsetof(FAICombatModifiers, Mobility) == 0x000004, "Member 'FAICombatModifiers::Mobility' has a wrong offset!");
static_assert(offsetof(FAICombatModifiers, MaxHealth) == 0x000008, "Member 'FAICombatModifiers::MaxHealth' has a wrong offset!");
static_assert(offsetof(FAICombatModifiers, TargetThresholds) == 0x00000C, "Member 'FAICombatModifiers::TargetThresholds' has a wrong offset!");
static_assert(offsetof(FAICombatModifiers, PreferredDistanceToTargetMin) == 0x000010, "Member 'FAICombatModifiers::PreferredDistanceToTargetMin' has a wrong offset!");
static_assert(offsetof(FAICombatModifiers, PreferredDistanceToTargetMax) == 0x000014, "Member 'FAICombatModifiers::PreferredDistanceToTargetMax' has a wrong offset!");

// ScriptStruct DuneSandbox.EInputContext
// 0x0000 (0x0008 - 0x0008)
struct FEInputContext final : public FStringEnumValue
{
};
static_assert(alignof(FEInputContext) == 0x000004, "Wrong alignment on FEInputContext");
static_assert(sizeof(FEInputContext) == 0x000008, "Wrong size on FEInputContext");

// ScriptStruct DuneSandbox.EInputAction
// 0x0000 (0x0008 - 0x0008)
struct FEInputAction final : public FStringEnumValue
{
};
static_assert(alignof(FEInputAction) == 0x000004, "Wrong alignment on FEInputAction");
static_assert(sizeof(FEInputAction) == 0x000008, "Wrong size on FEInputAction");

// ScriptStruct DuneSandbox.InputActionHintData
// 0x0010 (0x0010 - 0x0000)
struct FInputActionHintData final
{
public:
	struct FEInputContext                         m_InputContextType;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEInputAction                          m_InputActionType;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputActionHintData) == 0x000004, "Wrong alignment on FInputActionHintData");
static_assert(sizeof(FInputActionHintData) == 0x000010, "Wrong size on FInputActionHintData");
static_assert(offsetof(FInputActionHintData, m_InputContextType) == 0x000000, "Member 'FInputActionHintData::m_InputContextType' has a wrong offset!");
static_assert(offsetof(FInputActionHintData, m_InputActionType) == 0x000008, "Member 'FInputActionHintData::m_InputActionType' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceableTabsDataEntry
// 0x0060 (0x0060 - 0x0000)
struct FPlaceableTabsDataEntry final
{
public:
	class FText                                   m_DisplayName;                                     // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_ContentWidget;                                   // 0x0018(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_TelemetryName;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputActionHintData>           m_InputHintsData;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableTabsDataEntry) == 0x000008, "Wrong alignment on FPlaceableTabsDataEntry");
static_assert(sizeof(FPlaceableTabsDataEntry) == 0x000060, "Wrong size on FPlaceableTabsDataEntry");
static_assert(offsetof(FPlaceableTabsDataEntry, m_DisplayName) == 0x000000, "Member 'FPlaceableTabsDataEntry::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FPlaceableTabsDataEntry, m_ContentWidget) == 0x000018, "Member 'FPlaceableTabsDataEntry::m_ContentWidget' has a wrong offset!");
static_assert(offsetof(FPlaceableTabsDataEntry, m_TelemetryName) == 0x000048, "Member 'FPlaceableTabsDataEntry::m_TelemetryName' has a wrong offset!");
static_assert(offsetof(FPlaceableTabsDataEntry, m_InputHintsData) == 0x000050, "Member 'FPlaceableTabsDataEntry::m_InputHintsData' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleShieldModuleStats
// 0x0008 (0x0008 - 0x0000)
struct FVehicleShieldModuleStats final
{
public:
	class UShieldDataAsset*                       ShieldRef;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleShieldModuleStats) == 0x000008, "Wrong alignment on FVehicleShieldModuleStats");
static_assert(sizeof(FVehicleShieldModuleStats) == 0x000008, "Wrong size on FVehicleShieldModuleStats");
static_assert(offsetof(FVehicleShieldModuleStats, ShieldRef) == 0x000000, "Member 'FVehicleShieldModuleStats::ShieldRef' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleShieldModuleComponent_BlueprintWrapper
// 0x0038 (0x0038 - 0x0000)
struct FVehicleShieldModuleComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleShieldModuleStats              VehicleShieldModuleStats;                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleShieldModuleComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FVehicleShieldModuleComponent_BlueprintWrapper");
static_assert(sizeof(FVehicleShieldModuleComponent_BlueprintWrapper) == 0x000038, "Wrong size on FVehicleShieldModuleComponent_BlueprintWrapper");
static_assert(offsetof(FVehicleShieldModuleComponent_BlueprintWrapper, VehicleShieldModuleStats) == 0x000030, "Member 'FVehicleShieldModuleComponent_BlueprintWrapper::VehicleShieldModuleStats' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcHazardAreaResponse
// 0x0038 (0x0038 - 0x0000)
struct FNpcHazardAreaResponse final
{
public:
	float                                         m_ResponseChance;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UBehaviorTree>           m_HazardResponseBehaviorTree;                      // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcHazardAreaResponse) == 0x000008, "Wrong alignment on FNpcHazardAreaResponse");
static_assert(sizeof(FNpcHazardAreaResponse) == 0x000038, "Wrong size on FNpcHazardAreaResponse");
static_assert(offsetof(FNpcHazardAreaResponse, m_ResponseChance) == 0x000000, "Member 'FNpcHazardAreaResponse::m_ResponseChance' has a wrong offset!");
static_assert(offsetof(FNpcHazardAreaResponse, m_HazardResponseBehaviorTree) == 0x000008, "Member 'FNpcHazardAreaResponse::m_HazardResponseBehaviorTree' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcHazardAreaResponseSetDataRowBase
// 0x0010 (0x0020 - 0x0010)
struct FNpcHazardAreaResponseSetDataRowBase final : public FTableRowBase
{
public:
	TArray<struct FNpcHazardAreaResponse>         m_HazardResponses;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcHazardAreaResponseSetDataRowBase) == 0x000008, "Wrong alignment on FNpcHazardAreaResponseSetDataRowBase");
static_assert(sizeof(FNpcHazardAreaResponseSetDataRowBase) == 0x000020, "Wrong size on FNpcHazardAreaResponseSetDataRowBase");
static_assert(offsetof(FNpcHazardAreaResponseSetDataRowBase, m_HazardResponses) == 0x000010, "Member 'FNpcHazardAreaResponseSetDataRowBase::m_HazardResponses' has a wrong offset!");

// ScriptStruct DuneSandbox.MentatKeyFloatValuePair
// 0x000C (0x000C - 0x0000)
struct FMentatKeyFloatValuePair final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMentatKeyFloatValuePair) == 0x000004, "Wrong alignment on FMentatKeyFloatValuePair");
static_assert(sizeof(FMentatKeyFloatValuePair) == 0x00000C, "Wrong size on FMentatKeyFloatValuePair");
static_assert(offsetof(FMentatKeyFloatValuePair, Key) == 0x000000, "Member 'FMentatKeyFloatValuePair::Key' has a wrong offset!");
static_assert(offsetof(FMentatKeyFloatValuePair, Value) == 0x000008, "Member 'FMentatKeyFloatValuePair::Value' has a wrong offset!");

// ScriptStruct DuneSandbox.EEncounterResetType
// 0x0000 (0x0008 - 0x0008)
struct FEEncounterResetType final : public FStringEnumValue
{
};
static_assert(alignof(FEEncounterResetType) == 0x000004, "Wrong alignment on FEEncounterResetType");
static_assert(sizeof(FEEncounterResetType) == 0x000008, "Wrong size on FEEncounterResetType");

// ScriptStruct DuneSandbox.VehicleModuleInfo
// 0x0044 (0x0050 - 0x000C)
struct FVehicleModuleInfo final : public FFastArraySerializerItem
{
public:
	int32                                         ModuleRowIdx;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueID;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleModuleType                            ModuleType;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelativeDurability;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeDecayedMaxDurability;                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalActiveTime;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DisassemblyHitpoints;                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADunePlayerCharacter*                   m_CurrentWeldingPlayer;                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_SwatchID;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleModuleInfo) == 0x000008, "Wrong alignment on FVehicleModuleInfo");
static_assert(sizeof(FVehicleModuleInfo) == 0x000050, "Wrong size on FVehicleModuleInfo");
static_assert(offsetof(FVehicleModuleInfo, ModuleRowIdx) == 0x00000C, "Member 'FVehicleModuleInfo::ModuleRowIdx' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfo, UniqueID) == 0x000010, "Member 'FVehicleModuleInfo::UniqueID' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfo, ModuleType) == 0x000014, "Member 'FVehicleModuleInfo::ModuleType' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfo, RelativeDurability) == 0x000018, "Member 'FVehicleModuleInfo::RelativeDurability' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfo, RelativeDecayedMaxDurability) == 0x00001C, "Member 'FVehicleModuleInfo::RelativeDecayedMaxDurability' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfo, TotalActiveTime) == 0x000020, "Member 'FVehicleModuleInfo::TotalActiveTime' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfo, m_DisassemblyHitpoints) == 0x000024, "Member 'FVehicleModuleInfo::m_DisassemblyHitpoints' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfo, m_CurrentWeldingPlayer) == 0x000028, "Member 'FVehicleModuleInfo::m_CurrentWeldingPlayer' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfo, m_SwatchID) == 0x000030, "Member 'FVehicleModuleInfo::m_SwatchID' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModulesContainer
// 0x0018 (0x0140 - 0x0128)
struct FVehicleModulesContainer final : public FFastArraySerializer
{
public:
	TArray<struct FVehicleModuleInfo>             m_Items;                                           // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class ADuneVehicle*                           m_Owner;                                           // 0x0138(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModulesContainer) == 0x000008, "Wrong alignment on FVehicleModulesContainer");
static_assert(sizeof(FVehicleModulesContainer) == 0x000140, "Wrong size on FVehicleModulesContainer");
static_assert(offsetof(FVehicleModulesContainer, m_Items) == 0x000128, "Member 'FVehicleModulesContainer::m_Items' has a wrong offset!");
static_assert(offsetof(FVehicleModulesContainer, m_Owner) == 0x000138, "Member 'FVehicleModulesContainer::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableTypeArray
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBuildableTypeArray final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildableTypeArray) == 0x000008, "Wrong alignment on FBuildableTypeArray");
static_assert(sizeof(FBuildableTypeArray) == 0x000010, "Wrong size on FBuildableTypeArray");

// ScriptStruct DuneSandbox.SwayData
// 0x0028 (0x0028 - 0x0000)
struct FSwayData final
{
public:
	class UCurveFloat*                            SwayCurve;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalLoopTime;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomnessFactor;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomnessIntensity;                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x14];                                      // 0x0014(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSwayData) == 0x000008, "Wrong alignment on FSwayData");
static_assert(sizeof(FSwayData) == 0x000028, "Wrong size on FSwayData");
static_assert(offsetof(FSwayData, SwayCurve) == 0x000000, "Member 'FSwayData::SwayCurve' has a wrong offset!");
static_assert(offsetof(FSwayData, TotalLoopTime) == 0x000008, "Member 'FSwayData::TotalLoopTime' has a wrong offset!");
static_assert(offsetof(FSwayData, RandomnessFactor) == 0x00000C, "Member 'FSwayData::RandomnessFactor' has a wrong offset!");
static_assert(offsetof(FSwayData, RandomnessIntensity) == 0x000010, "Member 'FSwayData::RandomnessIntensity' has a wrong offset!");

// ScriptStruct DuneSandbox.FireMode
// 0x00E0 (0x00E0 - 0x0000)
struct FFireMode final
{
public:
	float                                         m_BaseAccuracyOffset;                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxAccuracyOffset;                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AccuracyOffsetDecay;                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AccuracyOffsetRecovery;                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseAccuracyCurve;                               // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_AccuracyOffsetCurve;                             // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SustainedFireWindowTimer;                        // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VerticalRecoil;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxVerticalRecoil;                               // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HorizontalRecoilChance;                          // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxHorizontalRecoil;                             // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RecoilTime;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RecoilRecoveryPerSecond;                         // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDoesRecoverRecoil;                              // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_DragImpulse;                                     // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DragRecoveryCorrectionFactor;                    // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DragAmount;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_NotFiringDragImpulse;                            // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_NotFiringDragRecoveryCorrectionFactor;           // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_NotFiringDragAmount;                             // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           m_CameraShake;                                     // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   m_ForceFeedbackEffect;                             // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UDuneCameraModifier>> m_CameraModifiers;                                // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FSwayData                              m_SwayHorizontal;                                  // 0x0078(0x0028)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSwayData                              m_SwayVertical;                                    // 0x00A0(0x0028)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PitchScalar;                                       // 0x00C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawScalar;                                         // 0x00CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFireMode) == 0x000008, "Wrong alignment on FFireMode");
static_assert(sizeof(FFireMode) == 0x0000E0, "Wrong size on FFireMode");
static_assert(offsetof(FFireMode, m_BaseAccuracyOffset) == 0x000000, "Member 'FFireMode::m_BaseAccuracyOffset' has a wrong offset!");
static_assert(offsetof(FFireMode, m_MaxAccuracyOffset) == 0x000004, "Member 'FFireMode::m_MaxAccuracyOffset' has a wrong offset!");
static_assert(offsetof(FFireMode, m_AccuracyOffsetDecay) == 0x000008, "Member 'FFireMode::m_AccuracyOffsetDecay' has a wrong offset!");
static_assert(offsetof(FFireMode, m_AccuracyOffsetRecovery) == 0x00000C, "Member 'FFireMode::m_AccuracyOffsetRecovery' has a wrong offset!");
static_assert(offsetof(FFireMode, m_bUseAccuracyCurve) == 0x000010, "Member 'FFireMode::m_bUseAccuracyCurve' has a wrong offset!");
static_assert(offsetof(FFireMode, m_AccuracyOffsetCurve) == 0x000018, "Member 'FFireMode::m_AccuracyOffsetCurve' has a wrong offset!");
static_assert(offsetof(FFireMode, m_SustainedFireWindowTimer) == 0x000020, "Member 'FFireMode::m_SustainedFireWindowTimer' has a wrong offset!");
static_assert(offsetof(FFireMode, m_VerticalRecoil) == 0x000024, "Member 'FFireMode::m_VerticalRecoil' has a wrong offset!");
static_assert(offsetof(FFireMode, m_MaxVerticalRecoil) == 0x000028, "Member 'FFireMode::m_MaxVerticalRecoil' has a wrong offset!");
static_assert(offsetof(FFireMode, m_HorizontalRecoilChance) == 0x00002C, "Member 'FFireMode::m_HorizontalRecoilChance' has a wrong offset!");
static_assert(offsetof(FFireMode, m_MaxHorizontalRecoil) == 0x000030, "Member 'FFireMode::m_MaxHorizontalRecoil' has a wrong offset!");
static_assert(offsetof(FFireMode, m_RecoilTime) == 0x000034, "Member 'FFireMode::m_RecoilTime' has a wrong offset!");
static_assert(offsetof(FFireMode, m_RecoilRecoveryPerSecond) == 0x000038, "Member 'FFireMode::m_RecoilRecoveryPerSecond' has a wrong offset!");
static_assert(offsetof(FFireMode, m_bDoesRecoverRecoil) == 0x00003C, "Member 'FFireMode::m_bDoesRecoverRecoil' has a wrong offset!");
static_assert(offsetof(FFireMode, m_DragImpulse) == 0x000040, "Member 'FFireMode::m_DragImpulse' has a wrong offset!");
static_assert(offsetof(FFireMode, m_DragRecoveryCorrectionFactor) == 0x000044, "Member 'FFireMode::m_DragRecoveryCorrectionFactor' has a wrong offset!");
static_assert(offsetof(FFireMode, m_DragAmount) == 0x000048, "Member 'FFireMode::m_DragAmount' has a wrong offset!");
static_assert(offsetof(FFireMode, m_NotFiringDragImpulse) == 0x00004C, "Member 'FFireMode::m_NotFiringDragImpulse' has a wrong offset!");
static_assert(offsetof(FFireMode, m_NotFiringDragRecoveryCorrectionFactor) == 0x000050, "Member 'FFireMode::m_NotFiringDragRecoveryCorrectionFactor' has a wrong offset!");
static_assert(offsetof(FFireMode, m_NotFiringDragAmount) == 0x000054, "Member 'FFireMode::m_NotFiringDragAmount' has a wrong offset!");
static_assert(offsetof(FFireMode, m_CameraShake) == 0x000058, "Member 'FFireMode::m_CameraShake' has a wrong offset!");
static_assert(offsetof(FFireMode, m_ForceFeedbackEffect) == 0x000060, "Member 'FFireMode::m_ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(FFireMode, m_CameraModifiers) == 0x000068, "Member 'FFireMode::m_CameraModifiers' has a wrong offset!");
static_assert(offsetof(FFireMode, m_SwayHorizontal) == 0x000078, "Member 'FFireMode::m_SwayHorizontal' has a wrong offset!");
static_assert(offsetof(FFireMode, m_SwayVertical) == 0x0000A0, "Member 'FFireMode::m_SwayVertical' has a wrong offset!");
static_assert(offsetof(FFireMode, PitchScalar) == 0x0000C8, "Member 'FFireMode::PitchScalar' has a wrong offset!");
static_assert(offsetof(FFireMode, YawScalar) == 0x0000CC, "Member 'FFireMode::YawScalar' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetActionRowBase
// 0x0008 (0x0018 - 0x0010)
struct FCommuninetActionRowBase final : public FTableRowBase
{
public:
	TSubclassOf<class UCommuninetActionBase>      m_Action;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommuninetActionRowBase) == 0x000008, "Wrong alignment on FCommuninetActionRowBase");
static_assert(sizeof(FCommuninetActionRowBase) == 0x000018, "Wrong size on FCommuninetActionRowBase");
static_assert(offsetof(FCommuninetActionRowBase, m_Action) == 0x000010, "Member 'FCommuninetActionRowBase::m_Action' has a wrong offset!");

// ScriptStruct DuneSandbox.OverriddenNPCAttribute
// 0x0040 (0x0040 - 0x0000)
struct FOverriddenNPCAttribute final
{
public:
	struct FGameplayAttribute                     OverridingGameplayAttribute;                       // 0x0000(0x0038)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverridingValue;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOverriddenNPCAttribute) == 0x000008, "Wrong alignment on FOverriddenNPCAttribute");
static_assert(sizeof(FOverriddenNPCAttribute) == 0x000040, "Wrong size on FOverriddenNPCAttribute");
static_assert(offsetof(FOverriddenNPCAttribute, OverridingGameplayAttribute) == 0x000000, "Member 'FOverriddenNPCAttribute::OverridingGameplayAttribute' has a wrong offset!");
static_assert(offsetof(FOverriddenNPCAttribute, OverridingValue) == 0x000038, "Member 'FOverriddenNPCAttribute::OverridingValue' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildDatabaseEventAddPlayer
// 0x0020 (0x0020 - 0x0000)
struct FGuildDatabaseEventAddPlayer final
{
public:
	int64                                         PlayerId;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         PlayerFactionId;                                   // 0x0008(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         GuildId;                                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          RoleId;                                            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          ShouldClearInvites;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDatabaseEventAddPlayer) == 0x000008, "Wrong alignment on FGuildDatabaseEventAddPlayer");
static_assert(sizeof(FGuildDatabaseEventAddPlayer) == 0x000020, "Wrong size on FGuildDatabaseEventAddPlayer");
static_assert(offsetof(FGuildDatabaseEventAddPlayer, PlayerId) == 0x000000, "Member 'FGuildDatabaseEventAddPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddPlayer, PlayerFactionId) == 0x000008, "Member 'FGuildDatabaseEventAddPlayer::PlayerFactionId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddPlayer, GuildId) == 0x000010, "Member 'FGuildDatabaseEventAddPlayer::GuildId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddPlayer, RoleId) == 0x000018, "Member 'FGuildDatabaseEventAddPlayer::RoleId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddPlayer, ShouldClearInvites) == 0x000019, "Member 'FGuildDatabaseEventAddPlayer::ShouldClearInvites' has a wrong offset!");

// ScriptStruct DuneSandbox.DeathQuickResetSettings
// 0x0010 (0x0010 - 0x0000)
struct FDeathQuickResetSettings final
{
public:
	bool                                          bIsDeathQuickResetEnabled;                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DeathQuickResetGameplayTag;                        // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathQuickResetDurationInSeconds;                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeathQuickResetSettings) == 0x000004, "Wrong alignment on FDeathQuickResetSettings");
static_assert(sizeof(FDeathQuickResetSettings) == 0x000010, "Wrong size on FDeathQuickResetSettings");
static_assert(offsetof(FDeathQuickResetSettings, bIsDeathQuickResetEnabled) == 0x000000, "Member 'FDeathQuickResetSettings::bIsDeathQuickResetEnabled' has a wrong offset!");
static_assert(offsetof(FDeathQuickResetSettings, DeathQuickResetGameplayTag) == 0x000004, "Member 'FDeathQuickResetSettings::DeathQuickResetGameplayTag' has a wrong offset!");
static_assert(offsetof(FDeathQuickResetSettings, DeathQuickResetDurationInSeconds) == 0x00000C, "Member 'FDeathQuickResetSettings::DeathQuickResetDurationInSeconds' has a wrong offset!");

// ScriptStruct DuneSandbox.EFaction
// 0x0000 (0x0008 - 0x0008)
struct FEFaction final : public FStringEnumValue
{
};
static_assert(alignof(FEFaction) == 0x000004, "Wrong alignment on FEFaction");
static_assert(sizeof(FEFaction) == 0x000008, "Wrong size on FEFaction");

// ScriptStruct DuneSandbox.EModularAIBehaviorName
// 0x0000 (0x0008 - 0x0008)
struct FEModularAIBehaviorName final : public FStringEnumValue
{
};
static_assert(alignof(FEModularAIBehaviorName) == 0x000004, "Wrong alignment on FEModularAIBehaviorName");
static_assert(sizeof(FEModularAIBehaviorName) == 0x000008, "Wrong size on FEModularAIBehaviorName");

// ScriptStruct DuneSandbox.NetworkDependencyComponent
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FNetworkDependencyComponent final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNetworkDependencyComponent) == 0x000004, "Wrong alignment on FNetworkDependencyComponent");
static_assert(sizeof(FNetworkDependencyComponent) == 0x000004, "Wrong size on FNetworkDependencyComponent");

// ScriptStruct DuneSandbox.ModularAiBehaviorInstance
// 0x0090 (0x0090 - 0x0000)
struct FModularAiBehaviorInstance final
{
public:
	TSoftObjectPtr<class UModularAiBehaviorAsset> m_BehaviorAsset;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         m_LevelObjects;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EModularAiBehaviorState                       m_ActivationState;                                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 m_Owner;                                           // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModularAiBehaviorInstance) == 0x000008, "Wrong alignment on FModularAiBehaviorInstance");
static_assert(sizeof(FModularAiBehaviorInstance) == 0x000090, "Wrong size on FModularAiBehaviorInstance");
static_assert(offsetof(FModularAiBehaviorInstance, m_BehaviorAsset) == 0x000000, "Member 'FModularAiBehaviorInstance::m_BehaviorAsset' has a wrong offset!");
static_assert(offsetof(FModularAiBehaviorInstance, m_LevelObjects) == 0x000030, "Member 'FModularAiBehaviorInstance::m_LevelObjects' has a wrong offset!");
static_assert(offsetof(FModularAiBehaviorInstance, m_ActivationState) == 0x000040, "Member 'FModularAiBehaviorInstance::m_ActivationState' has a wrong offset!");
static_assert(offsetof(FModularAiBehaviorInstance, m_Owner) == 0x000048, "Member 'FModularAiBehaviorInstance::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.ELootContainerType
// 0x0000 (0x0008 - 0x0008)
struct FELootContainerType final : public FStringEnumValue
{
};
static_assert(alignof(FELootContainerType) == 0x000004, "Wrong alignment on FELootContainerType");
static_assert(sizeof(FELootContainerType) == 0x000008, "Wrong size on FELootContainerType");

// ScriptStruct DuneSandbox.MapMarkerFilterRowBase
// 0x0028 (0x0038 - 0x0010)
struct FMapMarkerFilterRowBase final : public FTableRowBase
{
public:
	class FText                                   m_DisplayName;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_FilterTag;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bToggledState;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapMarkerFilterRowBase) == 0x000008, "Wrong alignment on FMapMarkerFilterRowBase");
static_assert(sizeof(FMapMarkerFilterRowBase) == 0x000038, "Wrong size on FMapMarkerFilterRowBase");
static_assert(offsetof(FMapMarkerFilterRowBase, m_DisplayName) == 0x000010, "Member 'FMapMarkerFilterRowBase::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FMapMarkerFilterRowBase, m_FilterTag) == 0x000028, "Member 'FMapMarkerFilterRowBase::m_FilterTag' has a wrong offset!");
static_assert(offsetof(FMapMarkerFilterRowBase, m_bToggledState) == 0x000030, "Member 'FMapMarkerFilterRowBase::m_bToggledState' has a wrong offset!");

// ScriptStruct DuneSandbox.GenericActorWorldLayoutEntry
// 0x00A0 (0x00A0 - 0x0000)
struct FGenericActorWorldLayoutEntry
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0060(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorLabel;                                        // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenericActorWorldLayoutEntry) == 0x000010, "Wrong alignment on FGenericActorWorldLayoutEntry");
static_assert(sizeof(FGenericActorWorldLayoutEntry) == 0x0000A0, "Wrong size on FGenericActorWorldLayoutEntry");
static_assert(offsetof(FGenericActorWorldLayoutEntry, Transform) == 0x000000, "Member 'FGenericActorWorldLayoutEntry::Transform' has a wrong offset!");
static_assert(offsetof(FGenericActorWorldLayoutEntry, ActorClass) == 0x000060, "Member 'FGenericActorWorldLayoutEntry::ActorClass' has a wrong offset!");
static_assert(offsetof(FGenericActorWorldLayoutEntry, ActorLabel) == 0x000090, "Member 'FGenericActorWorldLayoutEntry::ActorLabel' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemReferencerRecord
// 0x0058 (0x0058 - 0x0000)
struct FItemReferencerRecord final
{
public:
	class UObjectReferencer*                      m_Referencer;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x50];                                       // 0x0008(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemReferencerRecord) == 0x000008, "Wrong alignment on FItemReferencerRecord");
static_assert(sizeof(FItemReferencerRecord) == 0x000058, "Wrong size on FItemReferencerRecord");
static_assert(offsetof(FItemReferencerRecord, m_Referencer) == 0x000000, "Member 'FItemReferencerRecord::m_Referencer' has a wrong offset!");

// ScriptStruct DuneSandbox.EDuneExchangeNames
// 0x0000 (0x0008 - 0x0008)
struct FEDuneExchangeNames final : public FStringEnumValue
{
};
static_assert(alignof(FEDuneExchangeNames) == 0x000004, "Wrong alignment on FEDuneExchangeNames");
static_assert(sizeof(FEDuneExchangeNames) == 0x000008, "Wrong size on FEDuneExchangeNames");

// ScriptStruct DuneSandbox.EBasicInventoryId
// 0x0000 (0x0008 - 0x0008)
struct FEBasicInventoryId final : public FStringEnumValue
{
};
static_assert(alignof(FEBasicInventoryId) == 0x000004, "Wrong alignment on FEBasicInventoryId");
static_assert(sizeof(FEBasicInventoryId) == 0x000008, "Wrong size on FEBasicInventoryId");

// ScriptStruct DuneSandbox.EItemCraftingRecipeId
// 0x0000 (0x0008 - 0x0008)
struct FEItemCraftingRecipeId final : public FStringEnumValue
{
};
static_assert(alignof(FEItemCraftingRecipeId) == 0x000004, "Wrong alignment on FEItemCraftingRecipeId");
static_assert(sizeof(FEItemCraftingRecipeId) == 0x000008, "Wrong size on FEItemCraftingRecipeId");

// ScriptStruct DuneSandbox.SchematicStats
// 0x0010 (0x0010 - 0x0000)
struct FSchematicStats final
{
public:
	struct FEItemCraftingRecipeId                 SchematicRecipeId;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLimitedSchematicRecipe;                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SchematicNumberOfRecipeUses;                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSchematicStats) == 0x000004, "Wrong alignment on FSchematicStats");
static_assert(sizeof(FSchematicStats) == 0x000010, "Wrong size on FSchematicStats");
static_assert(offsetof(FSchematicStats, SchematicRecipeId) == 0x000000, "Member 'FSchematicStats::SchematicRecipeId' has a wrong offset!");
static_assert(offsetof(FSchematicStats, bIsLimitedSchematicRecipe) == 0x000008, "Member 'FSchematicStats::bIsLimitedSchematicRecipe' has a wrong offset!");
static_assert(offsetof(FSchematicStats, SchematicNumberOfRecipeUses) == 0x00000C, "Member 'FSchematicStats::SchematicNumberOfRecipeUses' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterProgressCheckpointRow
// 0x0038 (0x0048 - 0x0010)
struct FCharacterProgressCheckpointRow final : public FTableRowBase
{
public:
	struct FVector                                TeleportLocation;                                  // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEBasicInventoryId>             Inventories;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSchematicStats>                LearnedRecipes;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterProgressCheckpointRow) == 0x000008, "Wrong alignment on FCharacterProgressCheckpointRow");
static_assert(sizeof(FCharacterProgressCheckpointRow) == 0x000048, "Wrong size on FCharacterProgressCheckpointRow");
static_assert(offsetof(FCharacterProgressCheckpointRow, TeleportLocation) == 0x000010, "Member 'FCharacterProgressCheckpointRow::TeleportLocation' has a wrong offset!");
static_assert(offsetof(FCharacterProgressCheckpointRow, Inventories) == 0x000028, "Member 'FCharacterProgressCheckpointRow::Inventories' has a wrong offset!");
static_assert(offsetof(FCharacterProgressCheckpointRow, LearnedRecipes) == 0x000038, "Member 'FCharacterProgressCheckpointRow::LearnedRecipes' has a wrong offset!");

// ScriptStruct DuneSandbox.HitMarkerInfo
// 0x0008 (0x0008 - 0x0000)
struct FHitMarkerInfo final
{
public:
	uint8                                         m_bIsShielded : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bShieldEnergyBroken : 1;                         // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bShieldMeleePenetrated : 1;                      // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bIsCrit : 1;                                     // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bIsBeamWeapon : 1;                               // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bShouldLoopHitMarker : 1;                        // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bCanBeClientPredicted : 1;                       // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_HitInterval;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitMarkerInfo) == 0x000004, "Wrong alignment on FHitMarkerInfo");
static_assert(sizeof(FHitMarkerInfo) == 0x000008, "Wrong size on FHitMarkerInfo");
static_assert(offsetof(FHitMarkerInfo, m_HitInterval) == 0x000004, "Member 'FHitMarkerInfo::m_HitInterval' has a wrong offset!");

// ScriptStruct DuneSandbox.EDuneMapId
// 0x0000 (0x0008 - 0x0008)
struct FEDuneMapId final : public FStringEnumValue
{
};
static_assert(alignof(FEDuneMapId) == 0x000004, "Wrong alignment on FEDuneMapId");
static_assert(sizeof(FEDuneMapId) == 0x000008, "Wrong size on FEDuneMapId");

// ScriptStruct DuneSandbox.TabEntryVisibilityConditions
// 0x0040 (0x0040 - 0x0000)
struct FTabEntryVisibilityConditions final
{
public:
	TArray<EHUDUnlockLevel>                       m_RequiredHUDUnlockLevels;                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	EHUDUnlockLevel                               m_HudUnlockLevelMask;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_RequiredGameTweakNames;                          // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          m_bShowOnSteamDeck;                                // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEDuneMapId>                    m_BlacklistedMaps;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTabEntryVisibilityConditions) == 0x000008, "Wrong alignment on FTabEntryVisibilityConditions");
static_assert(sizeof(FTabEntryVisibilityConditions) == 0x000040, "Wrong size on FTabEntryVisibilityConditions");
static_assert(offsetof(FTabEntryVisibilityConditions, m_RequiredHUDUnlockLevels) == 0x000000, "Member 'FTabEntryVisibilityConditions::m_RequiredHUDUnlockLevels' has a wrong offset!");
static_assert(offsetof(FTabEntryVisibilityConditions, m_HudUnlockLevelMask) == 0x000010, "Member 'FTabEntryVisibilityConditions::m_HudUnlockLevelMask' has a wrong offset!");
static_assert(offsetof(FTabEntryVisibilityConditions, m_RequiredGameTweakNames) == 0x000018, "Member 'FTabEntryVisibilityConditions::m_RequiredGameTweakNames' has a wrong offset!");
static_assert(offsetof(FTabEntryVisibilityConditions, m_bShowOnSteamDeck) == 0x000028, "Member 'FTabEntryVisibilityConditions::m_bShowOnSteamDeck' has a wrong offset!");
static_assert(offsetof(FTabEntryVisibilityConditions, m_BlacklistedMaps) == 0x000030, "Member 'FTabEntryVisibilityConditions::m_BlacklistedMaps' has a wrong offset!");

// ScriptStruct DuneSandbox.PossibleMeleeAction
// 0x0038 (0x0038 - 0x0000)
struct FPossibleMeleeAction final
{
public:
	class FName                                   m_PossibleMeleeActionNameInternal;                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           m_Montage;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_MontageSection;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_AllowNotStartingNewMontage;                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeleeActionCondition*>          m_MeleeActionConditions;                           // 0x0020(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EMeleeTargetType                              m_TargetType;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPossibleMeleeAction) == 0x000008, "Wrong alignment on FPossibleMeleeAction");
static_assert(sizeof(FPossibleMeleeAction) == 0x000038, "Wrong size on FPossibleMeleeAction");
static_assert(offsetof(FPossibleMeleeAction, m_PossibleMeleeActionNameInternal) == 0x000000, "Member 'FPossibleMeleeAction::m_PossibleMeleeActionNameInternal' has a wrong offset!");
static_assert(offsetof(FPossibleMeleeAction, m_Montage) == 0x000008, "Member 'FPossibleMeleeAction::m_Montage' has a wrong offset!");
static_assert(offsetof(FPossibleMeleeAction, m_MontageSection) == 0x000010, "Member 'FPossibleMeleeAction::m_MontageSection' has a wrong offset!");
static_assert(offsetof(FPossibleMeleeAction, m_AllowNotStartingNewMontage) == 0x000018, "Member 'FPossibleMeleeAction::m_AllowNotStartingNewMontage' has a wrong offset!");
static_assert(offsetof(FPossibleMeleeAction, m_MeleeActionConditions) == 0x000020, "Member 'FPossibleMeleeAction::m_MeleeActionConditions' has a wrong offset!");
static_assert(offsetof(FPossibleMeleeAction, m_TargetType) == 0x000030, "Member 'FPossibleMeleeAction::m_TargetType' has a wrong offset!");

// ScriptStruct DuneSandbox.AbilityRetriggerWindowTriggeredData
// 0x0010 (0x0010 - 0x0000)
struct FAbilityRetriggerWindowTriggeredData final
{
public:
	class UGameplayAbility*                       Ability;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             AbilitySpecHandle;                                 // 0x0008(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicateNotifyBroadcast;                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityRetriggerWindowTriggeredData) == 0x000008, "Wrong alignment on FAbilityRetriggerWindowTriggeredData");
static_assert(sizeof(FAbilityRetriggerWindowTriggeredData) == 0x000010, "Wrong size on FAbilityRetriggerWindowTriggeredData");
static_assert(offsetof(FAbilityRetriggerWindowTriggeredData, Ability) == 0x000000, "Member 'FAbilityRetriggerWindowTriggeredData::Ability' has a wrong offset!");
static_assert(offsetof(FAbilityRetriggerWindowTriggeredData, AbilitySpecHandle) == 0x000008, "Member 'FAbilityRetriggerWindowTriggeredData::AbilitySpecHandle' has a wrong offset!");
static_assert(offsetof(FAbilityRetriggerWindowTriggeredData, bReplicateNotifyBroadcast) == 0x00000C, "Member 'FAbilityRetriggerWindowTriggeredData::bReplicateNotifyBroadcast' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleHealthInfo
// 0x0020 (0x0020 - 0x0000)
struct FVehicleHealthInfo final
{
public:
	float                                         m_CurrentHealth;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxHealth;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_NormalizedHealth;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TotalMaxHealth;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CriticalStateCurrentHealth;                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CriticalStateMaxHealth;                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CriticalStateNormalizedHealth;                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bInCriticalState;                                // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bInWreckedState;                                 // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleHealthInfo) == 0x000004, "Wrong alignment on FVehicleHealthInfo");
static_assert(sizeof(FVehicleHealthInfo) == 0x000020, "Wrong size on FVehicleHealthInfo");
static_assert(offsetof(FVehicleHealthInfo, m_CurrentHealth) == 0x000000, "Member 'FVehicleHealthInfo::m_CurrentHealth' has a wrong offset!");
static_assert(offsetof(FVehicleHealthInfo, m_MaxHealth) == 0x000004, "Member 'FVehicleHealthInfo::m_MaxHealth' has a wrong offset!");
static_assert(offsetof(FVehicleHealthInfo, m_NormalizedHealth) == 0x000008, "Member 'FVehicleHealthInfo::m_NormalizedHealth' has a wrong offset!");
static_assert(offsetof(FVehicleHealthInfo, m_TotalMaxHealth) == 0x00000C, "Member 'FVehicleHealthInfo::m_TotalMaxHealth' has a wrong offset!");
static_assert(offsetof(FVehicleHealthInfo, m_CriticalStateCurrentHealth) == 0x000010, "Member 'FVehicleHealthInfo::m_CriticalStateCurrentHealth' has a wrong offset!");
static_assert(offsetof(FVehicleHealthInfo, m_CriticalStateMaxHealth) == 0x000014, "Member 'FVehicleHealthInfo::m_CriticalStateMaxHealth' has a wrong offset!");
static_assert(offsetof(FVehicleHealthInfo, m_CriticalStateNormalizedHealth) == 0x000018, "Member 'FVehicleHealthInfo::m_CriticalStateNormalizedHealth' has a wrong offset!");
static_assert(offsetof(FVehicleHealthInfo, m_bInCriticalState) == 0x00001C, "Member 'FVehicleHealthInfo::m_bInCriticalState' has a wrong offset!");
static_assert(offsetof(FVehicleHealthInfo, m_bInWreckedState) == 0x00001D, "Member 'FVehicleHealthInfo::m_bInWreckedState' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableStructureCategoryType
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableStructureCategoryType final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableStructureCategoryType) == 0x000004, "Wrong alignment on FEBuildableStructureCategoryType");
static_assert(sizeof(FEBuildableStructureCategoryType) == 0x000008, "Wrong size on FEBuildableStructureCategoryType");

// ScriptStruct DuneSandbox.BuildableStructureCategoryComposedLimitsDataRow
// 0x0030 (0x0040 - 0x0010)
struct FBuildableStructureCategoryComposedLimitsDataRow final : public FTableRowBase
{
public:
	int32                                         m_LimitNumberOfBuildables;                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEBuildableStructureCategoryType> m_BuildableStructureCategoryTypes;               // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_DisplayName;                                     // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableStructureCategoryComposedLimitsDataRow) == 0x000008, "Wrong alignment on FBuildableStructureCategoryComposedLimitsDataRow");
static_assert(sizeof(FBuildableStructureCategoryComposedLimitsDataRow) == 0x000040, "Wrong size on FBuildableStructureCategoryComposedLimitsDataRow");
static_assert(offsetof(FBuildableStructureCategoryComposedLimitsDataRow, m_LimitNumberOfBuildables) == 0x000010, "Member 'FBuildableStructureCategoryComposedLimitsDataRow::m_LimitNumberOfBuildables' has a wrong offset!");
static_assert(offsetof(FBuildableStructureCategoryComposedLimitsDataRow, m_BuildableStructureCategoryTypes) == 0x000018, "Member 'FBuildableStructureCategoryComposedLimitsDataRow::m_BuildableStructureCategoryTypes' has a wrong offset!");
static_assert(offsetof(FBuildableStructureCategoryComposedLimitsDataRow, m_DisplayName) == 0x000028, "Member 'FBuildableStructureCategoryComposedLimitsDataRow::m_DisplayName' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneExchangeOrderId
// 0x0008 (0x0008 - 0x0000)
struct FDuneExchangeOrderId final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneExchangeOrderId) == 0x000008, "Wrong alignment on FDuneExchangeOrderId");
static_assert(sizeof(FDuneExchangeOrderId) == 0x000008, "Wrong size on FDuneExchangeOrderId");
static_assert(offsetof(FDuneExchangeOrderId, Value) == 0x000000, "Member 'FDuneExchangeOrderId::Value' has a wrong offset!");

// ScriptStruct DuneSandbox.DimensionFriendInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FDimensionFriendInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDimensionFriendInfo) == 0x000008, "Wrong alignment on FDimensionFriendInfo");
static_assert(sizeof(FDimensionFriendInfo) == 0x000028, "Wrong size on FDimensionFriendInfo");

// ScriptStruct DuneSandbox.SolidFuelItemStats
// 0x0004 (0x0004 - 0x0000)
struct FSolidFuelItemStats final
{
public:
	float                                         BurnTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolidFuelItemStats) == 0x000004, "Wrong alignment on FSolidFuelItemStats");
static_assert(sizeof(FSolidFuelItemStats) == 0x000004, "Wrong size on FSolidFuelItemStats");
static_assert(offsetof(FSolidFuelItemStats, BurnTime) == 0x000000, "Member 'FSolidFuelItemStats::BurnTime' has a wrong offset!");

// ScriptStruct DuneSandbox.EInfoRingErrorMessageNotificationType
// 0x0000 (0x0008 - 0x0008)
struct FEInfoRingErrorMessageNotificationType final : public FStringEnumValue
{
};
static_assert(alignof(FEInfoRingErrorMessageNotificationType) == 0x000004, "Wrong alignment on FEInfoRingErrorMessageNotificationType");
static_assert(sizeof(FEInfoRingErrorMessageNotificationType) == 0x000008, "Wrong size on FEInfoRingErrorMessageNotificationType");

// ScriptStruct DuneSandbox.EInfoRingErrorMessageNotificationSubType
// 0x0000 (0x0008 - 0x0008)
struct FEInfoRingErrorMessageNotificationSubType final : public FStringEnumValue
{
};
static_assert(alignof(FEInfoRingErrorMessageNotificationSubType) == 0x000004, "Wrong alignment on FEInfoRingErrorMessageNotificationSubType");
static_assert(sizeof(FEInfoRingErrorMessageNotificationSubType) == 0x000008, "Wrong size on FEInfoRingErrorMessageNotificationSubType");

// ScriptStruct DuneSandbox.ErrorMessageNotificationDefinition
// 0x0010 (0x0010 - 0x0000)
struct FErrorMessageNotificationDefinition final
{
public:
	struct FEInfoRingErrorMessageNotificationType m_Type;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEInfoRingErrorMessageNotificationSubType m_SubType;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FErrorMessageNotificationDefinition) == 0x000004, "Wrong alignment on FErrorMessageNotificationDefinition");
static_assert(sizeof(FErrorMessageNotificationDefinition) == 0x000010, "Wrong size on FErrorMessageNotificationDefinition");
static_assert(offsetof(FErrorMessageNotificationDefinition, m_Type) == 0x000000, "Member 'FErrorMessageNotificationDefinition::m_Type' has a wrong offset!");
static_assert(offsetof(FErrorMessageNotificationDefinition, m_SubType) == 0x000008, "Member 'FErrorMessageNotificationDefinition::m_SubType' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleOptimizationSettings
// 0x0024 (0x0024 - 0x0000)
struct FVehicleModuleOptimizationSettings final
{
public:
	float                                         m_MaxDrawDistance;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_TickOnServer;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_TickOnClient;                                    // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_EnableUpdateRateOptimizations;                   // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisibilityBasedAnimTickOption                m_VisibilityBasedAnimTickOption;                   // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ClientTickRate;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ServerTickRate;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_TickWhenSleeping;                                // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_SleepingTickRate;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EnterSleepingTickDelay;                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_InitialTickDuration;                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TickVariation;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleOptimizationSettings) == 0x000004, "Wrong alignment on FVehicleModuleOptimizationSettings");
static_assert(sizeof(FVehicleModuleOptimizationSettings) == 0x000024, "Wrong size on FVehicleModuleOptimizationSettings");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_MaxDrawDistance) == 0x000000, "Member 'FVehicleModuleOptimizationSettings::m_MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_TickOnServer) == 0x000004, "Member 'FVehicleModuleOptimizationSettings::m_TickOnServer' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_TickOnClient) == 0x000005, "Member 'FVehicleModuleOptimizationSettings::m_TickOnClient' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_EnableUpdateRateOptimizations) == 0x000006, "Member 'FVehicleModuleOptimizationSettings::m_EnableUpdateRateOptimizations' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_VisibilityBasedAnimTickOption) == 0x000007, "Member 'FVehicleModuleOptimizationSettings::m_VisibilityBasedAnimTickOption' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_ClientTickRate) == 0x000008, "Member 'FVehicleModuleOptimizationSettings::m_ClientTickRate' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_ServerTickRate) == 0x00000C, "Member 'FVehicleModuleOptimizationSettings::m_ServerTickRate' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_TickWhenSleeping) == 0x000010, "Member 'FVehicleModuleOptimizationSettings::m_TickWhenSleeping' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_SleepingTickRate) == 0x000014, "Member 'FVehicleModuleOptimizationSettings::m_SleepingTickRate' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_EnterSleepingTickDelay) == 0x000018, "Member 'FVehicleModuleOptimizationSettings::m_EnterSleepingTickDelay' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_InitialTickDuration) == 0x00001C, "Member 'FVehicleModuleOptimizationSettings::m_InitialTickDuration' has a wrong offset!");
static_assert(offsetof(FVehicleModuleOptimizationSettings, m_TickVariation) == 0x000020, "Member 'FVehicleModuleOptimizationSettings::m_TickVariation' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleMesh
// 0x00D0 (0x00D0 - 0x0000)
struct FVehicleModuleMesh final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMeshComponent*>                 ExtensionMeshComponents;                           // 0x0008(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UMeshComponent*>                 ShieldMeshComponents;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UMeshComponent*>                 ShadowProxyMeshComponents;                         // 0x0028(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UMeshComponent*>                 AssemblySuspensorMeshComponents;                   // 0x0038(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVehicleModuleOptimizationSettings     OptimizationSettings;                              // 0x0048(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x64];                                      // 0x006C(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleModuleMesh) == 0x000008, "Wrong alignment on FVehicleModuleMesh");
static_assert(sizeof(FVehicleModuleMesh) == 0x0000D0, "Wrong size on FVehicleModuleMesh");
static_assert(offsetof(FVehicleModuleMesh, MeshComponent) == 0x000000, "Member 'FVehicleModuleMesh::MeshComponent' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMesh, ExtensionMeshComponents) == 0x000008, "Member 'FVehicleModuleMesh::ExtensionMeshComponents' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMesh, ShieldMeshComponents) == 0x000018, "Member 'FVehicleModuleMesh::ShieldMeshComponents' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMesh, ShadowProxyMeshComponents) == 0x000028, "Member 'FVehicleModuleMesh::ShadowProxyMeshComponents' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMesh, AssemblySuspensorMeshComponents) == 0x000038, "Member 'FVehicleModuleMesh::AssemblySuspensorMeshComponents' has a wrong offset!");
static_assert(offsetof(FVehicleModuleMesh, OptimizationSettings) == 0x000048, "Member 'FVehicleModuleMesh::OptimizationSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingMasterComponent
// 0x0001 (0x0001 - 0x0000)
struct FBuildingMasterComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingMasterComponent) == 0x000001, "Wrong alignment on FBuildingMasterComponent");
static_assert(sizeof(FBuildingMasterComponent) == 0x000001, "Wrong size on FBuildingMasterComponent");

// ScriptStruct DuneSandbox.TotemCircuitWaterPendingRecalculation
// 0x0001 (0x0001 - 0x0000)
struct FTotemCircuitWaterPendingRecalculation final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTotemCircuitWaterPendingRecalculation) == 0x000001, "Wrong alignment on FTotemCircuitWaterPendingRecalculation");
static_assert(sizeof(FTotemCircuitWaterPendingRecalculation) == 0x000001, "Wrong size on FTotemCircuitWaterPendingRecalculation");

// ScriptStruct DuneSandbox.CinematicModeSettings
// 0x0005 (0x0005 - 0x0000)
struct FCinematicModeSettings final
{
public:
	bool                                          bShouldHidePlayerPawn;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldHideHUD;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldLockAllInput;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldLockAllInputButCamera;                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldShowHelmet;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCinematicModeSettings) == 0x000001, "Wrong alignment on FCinematicModeSettings");
static_assert(sizeof(FCinematicModeSettings) == 0x000005, "Wrong size on FCinematicModeSettings");
static_assert(offsetof(FCinematicModeSettings, bShouldHidePlayerPawn) == 0x000000, "Member 'FCinematicModeSettings::bShouldHidePlayerPawn' has a wrong offset!");
static_assert(offsetof(FCinematicModeSettings, bShouldHideHUD) == 0x000001, "Member 'FCinematicModeSettings::bShouldHideHUD' has a wrong offset!");
static_assert(offsetof(FCinematicModeSettings, bShouldLockAllInput) == 0x000002, "Member 'FCinematicModeSettings::bShouldLockAllInput' has a wrong offset!");
static_assert(offsetof(FCinematicModeSettings, bShouldLockAllInputButCamera) == 0x000003, "Member 'FCinematicModeSettings::bShouldLockAllInputButCamera' has a wrong offset!");
static_assert(offsetof(FCinematicModeSettings, bShouldShowHelmet) == 0x000004, "Member 'FCinematicModeSettings::bShouldShowHelmet' has a wrong offset!");

// ScriptStruct DuneSandbox.SplineChangedMulticastData
// 0x0028 (0x0028 - 0x0000)
struct FSplineChangedMulticastData final
{
public:
	TArray<struct FVector_NetQuantize>            m_NewSplinePoints;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    m_Velocity;                                        // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplineChangedMulticastData) == 0x000008, "Wrong alignment on FSplineChangedMulticastData");
static_assert(sizeof(FSplineChangedMulticastData) == 0x000028, "Wrong size on FSplineChangedMulticastData");
static_assert(offsetof(FSplineChangedMulticastData, m_NewSplinePoints) == 0x000000, "Member 'FSplineChangedMulticastData::m_NewSplinePoints' has a wrong offset!");
static_assert(offsetof(FSplineChangedMulticastData, m_Velocity) == 0x000010, "Member 'FSplineChangedMulticastData::m_Velocity' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleCollisionDamageTableRow
// 0x0038 (0x0048 - 0x0010)
struct FVehicleCollisionDamageTableRow final : public FTableRowBase
{
public:
	class UCurveFloat*                            m_DamageFromLandscapeVerticalCurve;                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_DamageFromLandscapeHorizontalCurve;              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_DamageFromBuildingCurve;                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_DamageToBuildingCurve;                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_DamageToOtherVehicleCurve;                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_DamageToCharacterCurve;                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           m_CharacterLaunchVelocity;                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCollisionDamageTableRow) == 0x000008, "Wrong alignment on FVehicleCollisionDamageTableRow");
static_assert(sizeof(FVehicleCollisionDamageTableRow) == 0x000048, "Wrong size on FVehicleCollisionDamageTableRow");
static_assert(offsetof(FVehicleCollisionDamageTableRow, m_DamageFromLandscapeVerticalCurve) == 0x000010, "Member 'FVehicleCollisionDamageTableRow::m_DamageFromLandscapeVerticalCurve' has a wrong offset!");
static_assert(offsetof(FVehicleCollisionDamageTableRow, m_DamageFromLandscapeHorizontalCurve) == 0x000018, "Member 'FVehicleCollisionDamageTableRow::m_DamageFromLandscapeHorizontalCurve' has a wrong offset!");
static_assert(offsetof(FVehicleCollisionDamageTableRow, m_DamageFromBuildingCurve) == 0x000020, "Member 'FVehicleCollisionDamageTableRow::m_DamageFromBuildingCurve' has a wrong offset!");
static_assert(offsetof(FVehicleCollisionDamageTableRow, m_DamageToBuildingCurve) == 0x000028, "Member 'FVehicleCollisionDamageTableRow::m_DamageToBuildingCurve' has a wrong offset!");
static_assert(offsetof(FVehicleCollisionDamageTableRow, m_DamageToOtherVehicleCurve) == 0x000030, "Member 'FVehicleCollisionDamageTableRow::m_DamageToOtherVehicleCurve' has a wrong offset!");
static_assert(offsetof(FVehicleCollisionDamageTableRow, m_DamageToCharacterCurve) == 0x000038, "Member 'FVehicleCollisionDamageTableRow::m_DamageToCharacterCurve' has a wrong offset!");
static_assert(offsetof(FVehicleCollisionDamageTableRow, m_CharacterLaunchVelocity) == 0x000040, "Member 'FVehicleCollisionDamageTableRow::m_CharacterLaunchVelocity' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerLevelGainedData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPlayerLevelGainedData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerLevelGainedData) == 0x000008, "Wrong alignment on FPlayerLevelGainedData");
static_assert(sizeof(FPlayerLevelGainedData) == 0x000008, "Wrong size on FPlayerLevelGainedData");

// ScriptStruct DuneSandbox.PlayerInfoData
// 0x0060 (0x0060 - 0x0000)
struct FPlayerInfoData final
{
public:
	struct FUniqueID                              m_PlayerId;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       m_FlsId;                                           // 0x0008(0x0038)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_FuncomId;                                        // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_CharacterName;                                   // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerInfoData) == 0x000008, "Wrong alignment on FPlayerInfoData");
static_assert(sizeof(FPlayerInfoData) == 0x000060, "Wrong size on FPlayerInfoData");
static_assert(offsetof(FPlayerInfoData, m_PlayerId) == 0x000000, "Member 'FPlayerInfoData::m_PlayerId' has a wrong offset!");
static_assert(offsetof(FPlayerInfoData, m_FlsId) == 0x000008, "Member 'FPlayerInfoData::m_FlsId' has a wrong offset!");
static_assert(offsetof(FPlayerInfoData, m_FuncomId) == 0x000040, "Member 'FPlayerInfoData::m_FuncomId' has a wrong offset!");
static_assert(offsetof(FPlayerInfoData, m_CharacterName) == 0x000050, "Member 'FPlayerInfoData::m_CharacterName' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerOnlineStateActivityData
// 0x0030 (0x0030 - 0x0000)
struct FPlayerOnlineStateActivityData final
{
public:
	struct FEDuneMapId                            m_Map;                                             // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEDuneMapId                            m_PreviousMap;                                     // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         m_PartitionId;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        m_LastActivityUniverseTime;                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_DimensionIndex;                                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_PreviousDimensionIndex;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsAuthorityTransfer;                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerOnlineStateActivityData) == 0x000008, "Wrong alignment on FPlayerOnlineStateActivityData");
static_assert(sizeof(FPlayerOnlineStateActivityData) == 0x000030, "Wrong size on FPlayerOnlineStateActivityData");
static_assert(offsetof(FPlayerOnlineStateActivityData, m_Map) == 0x000000, "Member 'FPlayerOnlineStateActivityData::m_Map' has a wrong offset!");
static_assert(offsetof(FPlayerOnlineStateActivityData, m_PreviousMap) == 0x000008, "Member 'FPlayerOnlineStateActivityData::m_PreviousMap' has a wrong offset!");
static_assert(offsetof(FPlayerOnlineStateActivityData, m_PartitionId) == 0x000010, "Member 'FPlayerOnlineStateActivityData::m_PartitionId' has a wrong offset!");
static_assert(offsetof(FPlayerOnlineStateActivityData, m_LastActivityUniverseTime) == 0x000018, "Member 'FPlayerOnlineStateActivityData::m_LastActivityUniverseTime' has a wrong offset!");
static_assert(offsetof(FPlayerOnlineStateActivityData, m_DimensionIndex) == 0x000020, "Member 'FPlayerOnlineStateActivityData::m_DimensionIndex' has a wrong offset!");
static_assert(offsetof(FPlayerOnlineStateActivityData, m_PreviousDimensionIndex) == 0x000024, "Member 'FPlayerOnlineStateActivityData::m_PreviousDimensionIndex' has a wrong offset!");
static_assert(offsetof(FPlayerOnlineStateActivityData, m_bIsAuthorityTransfer) == 0x000028, "Member 'FPlayerOnlineStateActivityData::m_bIsAuthorityTransfer' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerOnlineStateData
// 0x0038 (0x0038 - 0x0000)
struct FPlayerOnlineStateData final
{
public:
	struct FUniqueID                              m_PlayerId;                                        // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerOnlineStateActivityData         m_ActivityData;                                    // 0x0008(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerOnlineStateData) == 0x000008, "Wrong alignment on FPlayerOnlineStateData");
static_assert(sizeof(FPlayerOnlineStateData) == 0x000038, "Wrong size on FPlayerOnlineStateData");
static_assert(offsetof(FPlayerOnlineStateData, m_PlayerId) == 0x000000, "Member 'FPlayerOnlineStateData::m_PlayerId' has a wrong offset!");
static_assert(offsetof(FPlayerOnlineStateData, m_ActivityData) == 0x000008, "Member 'FPlayerOnlineStateData::m_ActivityData' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayersSearchResponseData
// 0x0098 (0x0098 - 0x0000)
struct FPlayersSearchResponseData final
{
public:
	struct FPlayerInfoData                        m_PlayerData;                                      // 0x0000(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerOnlineStateData                 m_PlayerOnlineStateData;                           // 0x0060(0x0038)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayersSearchResponseData) == 0x000008, "Wrong alignment on FPlayersSearchResponseData");
static_assert(sizeof(FPlayersSearchResponseData) == 0x000098, "Wrong size on FPlayersSearchResponseData");
static_assert(offsetof(FPlayersSearchResponseData, m_PlayerData) == 0x000000, "Member 'FPlayersSearchResponseData::m_PlayerData' has a wrong offset!");
static_assert(offsetof(FPlayersSearchResponseData, m_PlayerOnlineStateData) == 0x000060, "Member 'FPlayersSearchResponseData::m_PlayerOnlineStateData' has a wrong offset!");

// ScriptStruct DuneSandbox.TaxationDatabaseEventUpdateInvoiceStatus
// 0x0018 (0x0018 - 0x0000)
struct FTaxationDatabaseEventUpdateInvoiceStatus final
{
public:
	int16                                         InvoiceStatus;                                     // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 InvoiceIds;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaxationDatabaseEventUpdateInvoiceStatus) == 0x000008, "Wrong alignment on FTaxationDatabaseEventUpdateInvoiceStatus");
static_assert(sizeof(FTaxationDatabaseEventUpdateInvoiceStatus) == 0x000018, "Wrong size on FTaxationDatabaseEventUpdateInvoiceStatus");
static_assert(offsetof(FTaxationDatabaseEventUpdateInvoiceStatus, InvoiceStatus) == 0x000000, "Member 'FTaxationDatabaseEventUpdateInvoiceStatus::InvoiceStatus' has a wrong offset!");
static_assert(offsetof(FTaxationDatabaseEventUpdateInvoiceStatus, InvoiceIds) == 0x000008, "Member 'FTaxationDatabaseEventUpdateInvoiceStatus::InvoiceIds' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormTerritoryDebugData
// 0x0098 (0x0098 - 0x0000)
struct FSandwormTerritoryDebugData final
{
public:
	int32                                         m_SandwormID;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_SandwormType;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_SandwormLocation;                                // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_CurrentAnimationType;                            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_CurrentAnimationName;                            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_DebugStatus;                                     // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ThreatBlobDebugStatus;                           // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 m_SandwormTargetActor;                             // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_CurrentEnrageStatus;                             // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_CurrentTargetChangeStatus;                       // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandwormTerritoryDebugData) == 0x000008, "Wrong alignment on FSandwormTerritoryDebugData");
static_assert(sizeof(FSandwormTerritoryDebugData) == 0x000098, "Wrong size on FSandwormTerritoryDebugData");
static_assert(offsetof(FSandwormTerritoryDebugData, m_SandwormID) == 0x000000, "Member 'FSandwormTerritoryDebugData::m_SandwormID' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryDebugData, m_SandwormType) == 0x000008, "Member 'FSandwormTerritoryDebugData::m_SandwormType' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryDebugData, m_SandwormLocation) == 0x000018, "Member 'FSandwormTerritoryDebugData::m_SandwormLocation' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryDebugData, m_CurrentAnimationType) == 0x000030, "Member 'FSandwormTerritoryDebugData::m_CurrentAnimationType' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryDebugData, m_CurrentAnimationName) == 0x000040, "Member 'FSandwormTerritoryDebugData::m_CurrentAnimationName' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryDebugData, m_DebugStatus) == 0x000050, "Member 'FSandwormTerritoryDebugData::m_DebugStatus' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryDebugData, m_ThreatBlobDebugStatus) == 0x000060, "Member 'FSandwormTerritoryDebugData::m_ThreatBlobDebugStatus' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryDebugData, m_SandwormTargetActor) == 0x000070, "Member 'FSandwormTerritoryDebugData::m_SandwormTargetActor' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryDebugData, m_CurrentEnrageStatus) == 0x000078, "Member 'FSandwormTerritoryDebugData::m_CurrentEnrageStatus' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryDebugData, m_CurrentTargetChangeStatus) == 0x000088, "Member 'FSandwormTerritoryDebugData::m_CurrentTargetChangeStatus' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterCreationScreenCategory
// 0x0068 (0x0068 - 0x0000)
struct FCharacterCreationScreenCategory final
{
public:
	class FText                                   m_DisplayName;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          m_bVisible;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterCreationCameraFocus                 m_CameraFocus;                                     // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              UIThumbnail;                                       // 0x0020(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCharacterCreationScreenContent*> CategoryContents;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   m_TelemetryName;                                   // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterCreationScreenCategory) == 0x000008, "Wrong alignment on FCharacterCreationScreenCategory");
static_assert(sizeof(FCharacterCreationScreenCategory) == 0x000068, "Wrong size on FCharacterCreationScreenCategory");
static_assert(offsetof(FCharacterCreationScreenCategory, m_DisplayName) == 0x000000, "Member 'FCharacterCreationScreenCategory::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FCharacterCreationScreenCategory, m_bVisible) == 0x000018, "Member 'FCharacterCreationScreenCategory::m_bVisible' has a wrong offset!");
static_assert(offsetof(FCharacterCreationScreenCategory, m_CameraFocus) == 0x000019, "Member 'FCharacterCreationScreenCategory::m_CameraFocus' has a wrong offset!");
static_assert(offsetof(FCharacterCreationScreenCategory, UIThumbnail) == 0x000020, "Member 'FCharacterCreationScreenCategory::UIThumbnail' has a wrong offset!");
static_assert(offsetof(FCharacterCreationScreenCategory, CategoryContents) == 0x000050, "Member 'FCharacterCreationScreenCategory::CategoryContents' has a wrong offset!");
static_assert(offsetof(FCharacterCreationScreenCategory, m_TelemetryName) == 0x000060, "Member 'FCharacterCreationScreenCategory::m_TelemetryName' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodeDamagePacket
// 0x0020 (0x0020 - 0x0000)
struct FResourceNodeDamagePacket final
{
public:
	struct FVector_NetQuantize100                 ImpactPointLocal;                                  // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NodeDamage;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceNodeDamagePacket) == 0x000008, "Wrong alignment on FResourceNodeDamagePacket");
static_assert(sizeof(FResourceNodeDamagePacket) == 0x000020, "Wrong size on FResourceNodeDamagePacket");
static_assert(offsetof(FResourceNodeDamagePacket, ImpactPointLocal) == 0x000000, "Member 'FResourceNodeDamagePacket::ImpactPointLocal' has a wrong offset!");
static_assert(offsetof(FResourceNodeDamagePacket, NodeDamage) == 0x000018, "Member 'FResourceNodeDamagePacket::NodeDamage' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodeDamageBuffer
// 0x0018 (0x0018 - 0x0000)
struct FResourceNodeDamageBuffer final
{
public:
	TArray<struct FResourceNodeDamagePacket>      Packets;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint16                                        FirstIndex;                                        // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        LastIndex;                                         // 0x0012(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceNodeDamageBuffer) == 0x000008, "Wrong alignment on FResourceNodeDamageBuffer");
static_assert(sizeof(FResourceNodeDamageBuffer) == 0x000018, "Wrong size on FResourceNodeDamageBuffer");
static_assert(offsetof(FResourceNodeDamageBuffer, Packets) == 0x000000, "Member 'FResourceNodeDamageBuffer::Packets' has a wrong offset!");
static_assert(offsetof(FResourceNodeDamageBuffer, FirstIndex) == 0x000010, "Member 'FResourceNodeDamageBuffer::FirstIndex' has a wrong offset!");
static_assert(offsetof(FResourceNodeDamageBuffer, LastIndex) == 0x000012, "Member 'FResourceNodeDamageBuffer::LastIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceVisionActorTuning
// 0x0070 (0x0070 - 0x0000)
struct FSpiceVisionActorTuning final
{
public:
	struct FGuid                                  m_Guid;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    m_ActorVariation;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_SpawnConeAngleOverride;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       m_ActorMaterialInstance;                           // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ShouldDissolveWhenOutsideOfRange;                // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_ProbabilityToSpawn;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaximumAmountToSpawnPerVision;                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaximumAmountAtOnce;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinSpawnTimeRange;                               // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxSpawnTimeRange;                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceVisionActorTuning) == 0x000008, "Wrong alignment on FSpiceVisionActorTuning");
static_assert(sizeof(FSpiceVisionActorTuning) == 0x000070, "Wrong size on FSpiceVisionActorTuning");
static_assert(offsetof(FSpiceVisionActorTuning, m_Guid) == 0x000000, "Member 'FSpiceVisionActorTuning::m_Guid' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorTuning, m_ActorVariation) == 0x000010, "Member 'FSpiceVisionActorTuning::m_ActorVariation' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorTuning, m_SpawnConeAngleOverride) == 0x000020, "Member 'FSpiceVisionActorTuning::m_SpawnConeAngleOverride' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorTuning, m_ActorMaterialInstance) == 0x000028, "Member 'FSpiceVisionActorTuning::m_ActorMaterialInstance' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorTuning, m_ShouldDissolveWhenOutsideOfRange) == 0x000058, "Member 'FSpiceVisionActorTuning::m_ShouldDissolveWhenOutsideOfRange' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorTuning, m_ProbabilityToSpawn) == 0x00005C, "Member 'FSpiceVisionActorTuning::m_ProbabilityToSpawn' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorTuning, m_MaximumAmountToSpawnPerVision) == 0x000060, "Member 'FSpiceVisionActorTuning::m_MaximumAmountToSpawnPerVision' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorTuning, m_MaximumAmountAtOnce) == 0x000064, "Member 'FSpiceVisionActorTuning::m_MaximumAmountAtOnce' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorTuning, m_MinSpawnTimeRange) == 0x000068, "Member 'FSpiceVisionActorTuning::m_MinSpawnTimeRange' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorTuning, m_MaxSpawnTimeRange) == 0x00006C, "Member 'FSpiceVisionActorTuning::m_MaxSpawnTimeRange' has a wrong offset!");

// ScriptStruct DuneSandbox.WheelLocomotionSettings
// 0x00C0 (0x00C0 - 0x0000)
struct FWheelLocomotionSettings final
{
public:
	class FName                                   m_WheelConfigIdentifier;                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SuspensionHeight;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SuspensionAnchorZOffset;                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SuspensionStiffness;                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SuspensionDamping;                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RollingGrip;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LateralGrip;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BrokenModuleRollingGrip;                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BrokenModuleLateralGrip;                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TimeForFullSteeringChange;                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SandwormDangerZoneMaxSpeedFactor;                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideSteeringSpeedCurve;                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     m_SteeringSpeedOverrideCurve;                      // 0x0038(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWheelLocomotionSettings) == 0x000008, "Wrong alignment on FWheelLocomotionSettings");
static_assert(sizeof(FWheelLocomotionSettings) == 0x0000C0, "Wrong size on FWheelLocomotionSettings");
static_assert(offsetof(FWheelLocomotionSettings, m_WheelConfigIdentifier) == 0x000000, "Member 'FWheelLocomotionSettings::m_WheelConfigIdentifier' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_SuspensionHeight) == 0x000008, "Member 'FWheelLocomotionSettings::m_SuspensionHeight' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_SuspensionAnchorZOffset) == 0x00000C, "Member 'FWheelLocomotionSettings::m_SuspensionAnchorZOffset' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_SuspensionStiffness) == 0x000010, "Member 'FWheelLocomotionSettings::m_SuspensionStiffness' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_SuspensionDamping) == 0x000014, "Member 'FWheelLocomotionSettings::m_SuspensionDamping' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_RollingGrip) == 0x000018, "Member 'FWheelLocomotionSettings::m_RollingGrip' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_LateralGrip) == 0x00001C, "Member 'FWheelLocomotionSettings::m_LateralGrip' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_BrokenModuleRollingGrip) == 0x000020, "Member 'FWheelLocomotionSettings::m_BrokenModuleRollingGrip' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_BrokenModuleLateralGrip) == 0x000024, "Member 'FWheelLocomotionSettings::m_BrokenModuleLateralGrip' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_TimeForFullSteeringChange) == 0x000028, "Member 'FWheelLocomotionSettings::m_TimeForFullSteeringChange' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_SandwormDangerZoneMaxSpeedFactor) == 0x00002C, "Member 'FWheelLocomotionSettings::m_SandwormDangerZoneMaxSpeedFactor' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_bOverrideSteeringSpeedCurve) == 0x000030, "Member 'FWheelLocomotionSettings::m_bOverrideSteeringSpeedCurve' has a wrong offset!");
static_assert(offsetof(FWheelLocomotionSettings, m_SteeringSpeedOverrideCurve) == 0x000038, "Member 'FWheelLocomotionSettings::m_SteeringSpeedOverrideCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.LevelSequenceTriggerVolumeEventPlayerCallbackData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FLevelSequenceTriggerVolumeEventPlayerCallbackData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelSequenceTriggerVolumeEventPlayerCallbackData) == 0x000010, "Wrong alignment on FLevelSequenceTriggerVolumeEventPlayerCallbackData");
static_assert(sizeof(FLevelSequenceTriggerVolumeEventPlayerCallbackData) == 0x000040, "Wrong size on FLevelSequenceTriggerVolumeEventPlayerCallbackData");

// ScriptStruct DuneSandbox.AudioSwitchStateCharacterDataRow
// 0x0010 (0x0020 - 0x0010)
struct FAudioSwitchStateCharacterDataRow final : public FTableRowBase
{
public:
	class FString                                 m_Description;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioSwitchStateCharacterDataRow) == 0x000008, "Wrong alignment on FAudioSwitchStateCharacterDataRow");
static_assert(sizeof(FAudioSwitchStateCharacterDataRow) == 0x000020, "Wrong size on FAudioSwitchStateCharacterDataRow");
static_assert(offsetof(FAudioSwitchStateCharacterDataRow, m_Description) == 0x000010, "Member 'FAudioSwitchStateCharacterDataRow::m_Description' has a wrong offset!");

// ScriptStruct DuneSandbox.MarkerTypeScalarSetting
// 0x0010 (0x0010 - 0x0000)
struct FMarkerTypeScalarSetting final
{
public:
	float                                         m_MaximumScale;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinimumScale;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DistanceScalar;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IconScalar;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarkerTypeScalarSetting) == 0x000004, "Wrong alignment on FMarkerTypeScalarSetting");
static_assert(sizeof(FMarkerTypeScalarSetting) == 0x000010, "Wrong size on FMarkerTypeScalarSetting");
static_assert(offsetof(FMarkerTypeScalarSetting, m_MaximumScale) == 0x000000, "Member 'FMarkerTypeScalarSetting::m_MaximumScale' has a wrong offset!");
static_assert(offsetof(FMarkerTypeScalarSetting, m_MinimumScale) == 0x000004, "Member 'FMarkerTypeScalarSetting::m_MinimumScale' has a wrong offset!");
static_assert(offsetof(FMarkerTypeScalarSetting, m_DistanceScalar) == 0x000008, "Member 'FMarkerTypeScalarSetting::m_DistanceScalar' has a wrong offset!");
static_assert(offsetof(FMarkerTypeScalarSetting, m_IconScalar) == 0x00000C, "Member 'FMarkerTypeScalarSetting::m_IconScalar' has a wrong offset!");

// ScriptStruct DuneSandbox.GenericActorInstanceRowBase
// 0x0040 (0x0050 - 0x0010)
struct FGenericActorInstanceRowBase final : public FTableRowBase
{
public:
	class FName                                   TemplateName;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SurfaceHeightDifference;                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenericActorInstanceRowBase) == 0x000008, "Wrong alignment on FGenericActorInstanceRowBase");
static_assert(sizeof(FGenericActorInstanceRowBase) == 0x000050, "Wrong size on FGenericActorInstanceRowBase");
static_assert(offsetof(FGenericActorInstanceRowBase, TemplateName) == 0x000010, "Member 'FGenericActorInstanceRowBase::TemplateName' has a wrong offset!");
static_assert(offsetof(FGenericActorInstanceRowBase, Location) == 0x000018, "Member 'FGenericActorInstanceRowBase::Location' has a wrong offset!");
static_assert(offsetof(FGenericActorInstanceRowBase, Rotation) == 0x000030, "Member 'FGenericActorInstanceRowBase::Rotation' has a wrong offset!");
static_assert(offsetof(FGenericActorInstanceRowBase, SurfaceHeightDifference) == 0x000048, "Member 'FGenericActorInstanceRowBase::SurfaceHeightDifference' has a wrong offset!");

// ScriptStruct DuneSandbox.ETutorialEnum
// 0x0000 (0x0008 - 0x0008)
struct FETutorialEnum final : public FStringEnumValue
{
};
static_assert(alignof(FETutorialEnum) == 0x000004, "Wrong alignment on FETutorialEnum");
static_assert(sizeof(FETutorialEnum) == 0x000008, "Wrong size on FETutorialEnum");

// ScriptStruct DuneSandbox.GameEvent
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FGameEvent
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameEvent) == 0x000008, "Wrong alignment on FGameEvent");
static_assert(sizeof(FGameEvent) == 0x000030, "Wrong size on FGameEvent");

// ScriptStruct DuneSandbox.CompletedTutorialEvent
// 0x0008 (0x0038 - 0x0030)
struct FCompletedTutorialEvent final : public FGameEvent
{
public:
	struct FETutorialEnum                         m_CompletedTutorial;                               // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompletedTutorialEvent) == 0x000008, "Wrong alignment on FCompletedTutorialEvent");
static_assert(sizeof(FCompletedTutorialEvent) == 0x000038, "Wrong size on FCompletedTutorialEvent");
static_assert(offsetof(FCompletedTutorialEvent, m_CompletedTutorial) == 0x000030, "Member 'FCompletedTutorialEvent::m_CompletedTutorial' has a wrong offset!");

// ScriptStruct DuneSandbox.DERecurringOrder
// 0x0028 (0x0028 - 0x0000)
struct FDERecurringOrder final
{
public:
	struct FEItemTemplateID                       TemplateId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              Period;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              LifeSpan;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemsToAddPerPeriod;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ItemPrice;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDERecurringOrder) == 0x000008, "Wrong alignment on FDERecurringOrder");
static_assert(sizeof(FDERecurringOrder) == 0x000028, "Wrong size on FDERecurringOrder");
static_assert(offsetof(FDERecurringOrder, TemplateId) == 0x000000, "Member 'FDERecurringOrder::TemplateId' has a wrong offset!");
static_assert(offsetof(FDERecurringOrder, Period) == 0x000008, "Member 'FDERecurringOrder::Period' has a wrong offset!");
static_assert(offsetof(FDERecurringOrder, LifeSpan) == 0x000010, "Member 'FDERecurringOrder::LifeSpan' has a wrong offset!");
static_assert(offsetof(FDERecurringOrder, ItemsToAddPerPeriod) == 0x000018, "Member 'FDERecurringOrder::ItemsToAddPerPeriod' has a wrong offset!");
static_assert(offsetof(FDERecurringOrder, MaxCount) == 0x00001C, "Member 'FDERecurringOrder::MaxCount' has a wrong offset!");
static_assert(offsetof(FDERecurringOrder, ItemPrice) == 0x000020, "Member 'FDERecurringOrder::ItemPrice' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableSocketCostsDataRow
// 0x0008 (0x0018 - 0x0010)
struct FBuildableSocketCostsDataRow final : public FTableRowBase
{
public:
	int32                                         m_AttachToCost;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_AttachCost;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableSocketCostsDataRow) == 0x000008, "Wrong alignment on FBuildableSocketCostsDataRow");
static_assert(sizeof(FBuildableSocketCostsDataRow) == 0x000018, "Wrong size on FBuildableSocketCostsDataRow");
static_assert(offsetof(FBuildableSocketCostsDataRow, m_AttachToCost) == 0x000010, "Member 'FBuildableSocketCostsDataRow::m_AttachToCost' has a wrong offset!");
static_assert(offsetof(FBuildableSocketCostsDataRow, m_AttachCost) == 0x000014, "Member 'FBuildableSocketCostsDataRow::m_AttachCost' has a wrong offset!");

// ScriptStruct DuneSandbox.LockInputAndMovementRequest
// 0x0004 (0x0004 - 0x0000)
struct FLockInputAndMovementRequest final
{
public:
	float                                         m_Duration;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLockInputAndMovementRequest) == 0x000004, "Wrong alignment on FLockInputAndMovementRequest");
static_assert(sizeof(FLockInputAndMovementRequest) == 0x000004, "Wrong size on FLockInputAndMovementRequest");
static_assert(offsetof(FLockInputAndMovementRequest, m_Duration) == 0x000000, "Member 'FLockInputAndMovementRequest::m_Duration' has a wrong offset!");

// ScriptStruct DuneSandbox.DrawDebugLineProperties
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FDrawDebugLineProperties final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrawDebugLineProperties) == 0x000008, "Wrong alignment on FDrawDebugLineProperties");
static_assert(sizeof(FDrawDebugLineProperties) == 0x000040, "Wrong size on FDrawDebugLineProperties");

// ScriptStruct DuneSandbox.VehicleModuleExplosionData
// 0x0038 (0x0038 - 0x0000)
struct FVehicleModuleExplosionData final
{
public:
	class FName                                   Socket;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          DestructionFX;                                     // 0x0008(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleExplosionData) == 0x000008, "Wrong alignment on FVehicleModuleExplosionData");
static_assert(sizeof(FVehicleModuleExplosionData) == 0x000038, "Wrong size on FVehicleModuleExplosionData");
static_assert(offsetof(FVehicleModuleExplosionData, Socket) == 0x000000, "Member 'FVehicleModuleExplosionData::Socket' has a wrong offset!");
static_assert(offsetof(FVehicleModuleExplosionData, DestructionFX) == 0x000008, "Member 'FVehicleModuleExplosionData::DestructionFX' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleDurabilityStats
// 0x0060 (0x0060 - 0x0000)
struct FVehicleModuleDurabilityStats final
{
public:
	float                                         MaxDurability;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayedMaxDurability;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentDurability;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentRepairDurability;                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveDeterioration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeteriorationInstant;                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurabilityDamagePercent;                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepairDamagePercent;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepairDurabilityThreshold;                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepairDurabilityPercentageDecay;                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverheatPunishmentMultiplier;                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WreckedDurabilityDamage;                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          BrokenGameplayEffect;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SubobjectReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVehicleModuleExplosionDataAsset*       ModuleExplosionConfig;                             // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, SubobjectReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVehicleModuleExplosionData>    ExplosionData;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, SubobjectReference, NativeAccessSpecifierPublic)
	float                                         DurabilityDamageDone;                              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastDeteriorationCause;                            // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalActivationTime;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleDurabilityStats) == 0x000008, "Wrong alignment on FVehicleModuleDurabilityStats");
static_assert(sizeof(FVehicleModuleDurabilityStats) == 0x000060, "Wrong size on FVehicleModuleDurabilityStats");
static_assert(offsetof(FVehicleModuleDurabilityStats, MaxDurability) == 0x000000, "Member 'FVehicleModuleDurabilityStats::MaxDurability' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, DecayedMaxDurability) == 0x000004, "Member 'FVehicleModuleDurabilityStats::DecayedMaxDurability' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, CurrentDurability) == 0x000008, "Member 'FVehicleModuleDurabilityStats::CurrentDurability' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, CurrentRepairDurability) == 0x00000C, "Member 'FVehicleModuleDurabilityStats::CurrentRepairDurability' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, ActiveDeterioration) == 0x000010, "Member 'FVehicleModuleDurabilityStats::ActiveDeterioration' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, DeteriorationInstant) == 0x000014, "Member 'FVehicleModuleDurabilityStats::DeteriorationInstant' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, DurabilityDamagePercent) == 0x000018, "Member 'FVehicleModuleDurabilityStats::DurabilityDamagePercent' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, RepairDamagePercent) == 0x00001C, "Member 'FVehicleModuleDurabilityStats::RepairDamagePercent' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, RepairDurabilityThreshold) == 0x000020, "Member 'FVehicleModuleDurabilityStats::RepairDurabilityThreshold' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, RepairDurabilityPercentageDecay) == 0x000024, "Member 'FVehicleModuleDurabilityStats::RepairDurabilityPercentageDecay' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, OverheatPunishmentMultiplier) == 0x000028, "Member 'FVehicleModuleDurabilityStats::OverheatPunishmentMultiplier' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, WreckedDurabilityDamage) == 0x00002C, "Member 'FVehicleModuleDurabilityStats::WreckedDurabilityDamage' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, BrokenGameplayEffect) == 0x000030, "Member 'FVehicleModuleDurabilityStats::BrokenGameplayEffect' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, ModuleExplosionConfig) == 0x000038, "Member 'FVehicleModuleDurabilityStats::ModuleExplosionConfig' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, ExplosionData) == 0x000040, "Member 'FVehicleModuleDurabilityStats::ExplosionData' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, DurabilityDamageDone) == 0x000050, "Member 'FVehicleModuleDurabilityStats::DurabilityDamageDone' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, LastDeteriorationCause) == 0x000054, "Member 'FVehicleModuleDurabilityStats::LastDeteriorationCause' has a wrong offset!");
static_assert(offsetof(FVehicleModuleDurabilityStats, TotalActivationTime) == 0x00005C, "Member 'FVehicleModuleDurabilityStats::TotalActivationTime' has a wrong offset!");

// ScriptStruct DuneSandbox.GameplayEffectToApply
// 0x0010 (0x0010 - 0x0000)
struct FGameplayEffectToApply final
{
public:
	TSubclassOf<class UGameplayEffect>            m_GameplayEffect;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_StacksToApply;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_Level;                                           // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EApplyEffectRule                              m_ApplyRule;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEffectToApply) == 0x000008, "Wrong alignment on FGameplayEffectToApply");
static_assert(sizeof(FGameplayEffectToApply) == 0x000010, "Wrong size on FGameplayEffectToApply");
static_assert(offsetof(FGameplayEffectToApply, m_GameplayEffect) == 0x000000, "Member 'FGameplayEffectToApply::m_GameplayEffect' has a wrong offset!");
static_assert(offsetof(FGameplayEffectToApply, m_StacksToApply) == 0x000008, "Member 'FGameplayEffectToApply::m_StacksToApply' has a wrong offset!");
static_assert(offsetof(FGameplayEffectToApply, m_Level) == 0x000009, "Member 'FGameplayEffectToApply::m_Level' has a wrong offset!");
static_assert(offsetof(FGameplayEffectToApply, m_ApplyRule) == 0x00000A, "Member 'FGameplayEffectToApply::m_ApplyRule' has a wrong offset!");

// ScriptStruct DuneSandbox.PoiseDamageData
// 0x000C (0x000C - 0x0000)
struct FPoiseDamageData final
{
public:
	float                                         m_SlowdownDamage;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PoiseDamage;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockbackType                                m_KnockbackToTriggerOnHit;                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockbackType                                m_KnockbackToTriggerOnBreak;                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanOverrideKnockback;                           // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoiseDamageData) == 0x000004, "Wrong alignment on FPoiseDamageData");
static_assert(sizeof(FPoiseDamageData) == 0x00000C, "Wrong size on FPoiseDamageData");
static_assert(offsetof(FPoiseDamageData, m_SlowdownDamage) == 0x000000, "Member 'FPoiseDamageData::m_SlowdownDamage' has a wrong offset!");
static_assert(offsetof(FPoiseDamageData, m_PoiseDamage) == 0x000004, "Member 'FPoiseDamageData::m_PoiseDamage' has a wrong offset!");
static_assert(offsetof(FPoiseDamageData, m_KnockbackToTriggerOnHit) == 0x000008, "Member 'FPoiseDamageData::m_KnockbackToTriggerOnHit' has a wrong offset!");
static_assert(offsetof(FPoiseDamageData, m_KnockbackToTriggerOnBreak) == 0x000009, "Member 'FPoiseDamageData::m_KnockbackToTriggerOnBreak' has a wrong offset!");
static_assert(offsetof(FPoiseDamageData, m_bCanOverrideKnockback) == 0x00000A, "Member 'FPoiseDamageData::m_bCanOverrideKnockback' has a wrong offset!");

// ScriptStruct DuneSandbox.ServerDealDamageInfo
// 0x0198 (0x0198 - 0x0000)
struct FServerDealDamageInfo final
{
public:
	class FString                                 m_DamageSourceName;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_AttackName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 m_DamagedActor;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 m_DamageCauser;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            m_InstigatingController;                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              m_InstigatingControllerUID;                        // 0x0038(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             m_HitInfo;                                         // 0x0040(0x00E8)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                m_HitFromDirection;                                // 0x0128(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BaseDamage;                                      // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage;                                     // 0x0144(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_CritMultiplier;                                  // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_DamageSourceFlags;                               // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDuneDamageType>            m_DamageTypeClass;                                 // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_bMulticastDamage : 1;                            // 0x0160(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bPoiseDamagePredicted : 1;                       // 0x0160(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApply;                          // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApplyToAttacker;                // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_CalculatedFrameTypeDamageModifier;               // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HitInterval;                                     // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDirectDamage;                                   // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerDealDamageInfo) == 0x000008, "Wrong alignment on FServerDealDamageInfo");
static_assert(sizeof(FServerDealDamageInfo) == 0x000198, "Wrong size on FServerDealDamageInfo");
static_assert(offsetof(FServerDealDamageInfo, m_DamageSourceName) == 0x000000, "Member 'FServerDealDamageInfo::m_DamageSourceName' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_AttackName) == 0x000010, "Member 'FServerDealDamageInfo::m_AttackName' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_DamagedActor) == 0x000020, "Member 'FServerDealDamageInfo::m_DamagedActor' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_DamageCauser) == 0x000028, "Member 'FServerDealDamageInfo::m_DamageCauser' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_InstigatingController) == 0x000030, "Member 'FServerDealDamageInfo::m_InstigatingController' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_InstigatingControllerUID) == 0x000038, "Member 'FServerDealDamageInfo::m_InstigatingControllerUID' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_HitInfo) == 0x000040, "Member 'FServerDealDamageInfo::m_HitInfo' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_HitFromDirection) == 0x000128, "Member 'FServerDealDamageInfo::m_HitFromDirection' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_BaseDamage) == 0x000140, "Member 'FServerDealDamageInfo::m_BaseDamage' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_PoiseDamage) == 0x000144, "Member 'FServerDealDamageInfo::m_PoiseDamage' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_CritMultiplier) == 0x000150, "Member 'FServerDealDamageInfo::m_CritMultiplier' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_DamageSourceFlags) == 0x000154, "Member 'FServerDealDamageInfo::m_DamageSourceFlags' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_DamageTypeClass) == 0x000158, "Member 'FServerDealDamageInfo::m_DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_GameplayEffectsToApply) == 0x000168, "Member 'FServerDealDamageInfo::m_GameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_GameplayEffectsToApplyToAttacker) == 0x000178, "Member 'FServerDealDamageInfo::m_GameplayEffectsToApplyToAttacker' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_CalculatedFrameTypeDamageModifier) == 0x000188, "Member 'FServerDealDamageInfo::m_CalculatedFrameTypeDamageModifier' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_HitInterval) == 0x00018C, "Member 'FServerDealDamageInfo::m_HitInterval' has a wrong offset!");
static_assert(offsetof(FServerDealDamageInfo, m_bDirectDamage) == 0x000190, "Member 'FServerDealDamageInfo::m_bDirectDamage' has a wrong offset!");

// ScriptStruct DuneSandbox.HolderBase
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FHolderBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EAnimLoadPriority                             m_LoadPriority;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0xF];                                        // 0x0009(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHolderBase) == 0x000008, "Wrong alignment on FHolderBase");
static_assert(sizeof(FHolderBase) == 0x000018, "Wrong size on FHolderBase");
static_assert(offsetof(FHolderBase, m_LoadPriority) == 0x000008, "Member 'FHolderBase::m_LoadPriority' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimMontageHolder
// 0x0040 (0x0058 - 0x0018)
struct FAnimMontageHolder final : public FHolderBase
{
public:
	TSoftObjectPtr<class UAnimMontage>            m_Montage;                                         // 0x0018(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           m_Holder;                                          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           m_DefaultMontage;                                  // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimMontageHolder) == 0x000008, "Wrong alignment on FAnimMontageHolder");
static_assert(sizeof(FAnimMontageHolder) == 0x000058, "Wrong size on FAnimMontageHolder");
static_assert(offsetof(FAnimMontageHolder, m_Montage) == 0x000018, "Member 'FAnimMontageHolder::m_Montage' has a wrong offset!");
static_assert(offsetof(FAnimMontageHolder, m_Holder) == 0x000048, "Member 'FAnimMontageHolder::m_Holder' has a wrong offset!");
static_assert(offsetof(FAnimMontageHolder, m_DefaultMontage) == 0x000050, "Member 'FAnimMontageHolder::m_DefaultMontage' has a wrong offset!");

// ScriptStruct DuneSandbox.HitReactTorqueDirection
// 0x0020 (0x0020 - 0x0000)
struct FHitReactTorqueDirection final
{
public:
	TArray<struct FAnimMontageHolder>             ClockwiseHit;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimMontageHolder>             CounterClockwiseHit;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitReactTorqueDirection) == 0x000008, "Wrong alignment on FHitReactTorqueDirection");
static_assert(sizeof(FHitReactTorqueDirection) == 0x000020, "Wrong size on FHitReactTorqueDirection");
static_assert(offsetof(FHitReactTorqueDirection, ClockwiseHit) == 0x000000, "Member 'FHitReactTorqueDirection::ClockwiseHit' has a wrong offset!");
static_assert(offsetof(FHitReactTorqueDirection, CounterClockwiseHit) == 0x000010, "Member 'FHitReactTorqueDirection::CounterClockwiseHit' has a wrong offset!");

// ScriptStruct DuneSandbox.MapLayerMarker
// 0x0020 (0x0020 - 0x0000)
struct FMapLayerMarker final
{
public:
	struct FEDuneMapId                            m_Map;                                             // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_Location;                                        // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapLayerMarker) == 0x000008, "Wrong alignment on FMapLayerMarker");
static_assert(sizeof(FMapLayerMarker) == 0x000020, "Wrong size on FMapLayerMarker");
static_assert(offsetof(FMapLayerMarker, m_Map) == 0x000000, "Member 'FMapLayerMarker::m_Map' has a wrong offset!");
static_assert(offsetof(FMapLayerMarker, m_Location) == 0x000008, "Member 'FMapLayerMarker::m_Location' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleInventoryInfo
// 0x0010 (0x0010 - 0x0000)
struct FVehicleModuleInventoryInfo final
{
public:
	int32                                         VehicleModuleUniqueId;                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicleModuleInventory*                InventoryComponent;                                // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleInventoryInfo) == 0x000008, "Wrong alignment on FVehicleModuleInventoryInfo");
static_assert(sizeof(FVehicleModuleInventoryInfo) == 0x000010, "Wrong size on FVehicleModuleInventoryInfo");
static_assert(offsetof(FVehicleModuleInventoryInfo, VehicleModuleUniqueId) == 0x000000, "Member 'FVehicleModuleInventoryInfo::VehicleModuleUniqueId' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInventoryInfo, InventoryComponent) == 0x000008, "Member 'FVehicleModuleInventoryInfo::InventoryComponent' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockSubLevelInstance
// 0x0010 (0x0010 - 0x0000)
struct FTerrainBlockSubLevelInstance final
{
public:
	class ULevelStreamingDynamic*                 StreamingLevel;                                    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelStreamingVolume*                  StreamingVolume;                                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockSubLevelInstance) == 0x000008, "Wrong alignment on FTerrainBlockSubLevelInstance");
static_assert(sizeof(FTerrainBlockSubLevelInstance) == 0x000010, "Wrong size on FTerrainBlockSubLevelInstance");
static_assert(offsetof(FTerrainBlockSubLevelInstance, StreamingLevel) == 0x000000, "Member 'FTerrainBlockSubLevelInstance::StreamingLevel' has a wrong offset!");
static_assert(offsetof(FTerrainBlockSubLevelInstance, StreamingVolume) == 0x000008, "Member 'FTerrainBlockSubLevelInstance::StreamingVolume' has a wrong offset!");

// ScriptStruct DuneSandbox.SpawnItemParams
// 0x0030 (0x0030 - 0x0000)
struct FSpawnItemParams
{
public:
	struct FEItemTemplateID                       TemplateId;                                        // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackSize;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurabilityPercentage;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              DatabaseId;                                        // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatsJson;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldMarkDirtyStats;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnItemParams) == 0x000008, "Wrong alignment on FSpawnItemParams");
static_assert(sizeof(FSpawnItemParams) == 0x000030, "Wrong size on FSpawnItemParams");
static_assert(offsetof(FSpawnItemParams, TemplateId) == 0x000000, "Member 'FSpawnItemParams::TemplateId' has a wrong offset!");
static_assert(offsetof(FSpawnItemParams, StackSize) == 0x000008, "Member 'FSpawnItemParams::StackSize' has a wrong offset!");
static_assert(offsetof(FSpawnItemParams, DurabilityPercentage) == 0x00000C, "Member 'FSpawnItemParams::DurabilityPercentage' has a wrong offset!");
static_assert(offsetof(FSpawnItemParams, DatabaseId) == 0x000010, "Member 'FSpawnItemParams::DatabaseId' has a wrong offset!");
static_assert(offsetof(FSpawnItemParams, StatsJson) == 0x000018, "Member 'FSpawnItemParams::StatsJson' has a wrong offset!");
static_assert(offsetof(FSpawnItemParams, bShouldMarkDirtyStats) == 0x000028, "Member 'FSpawnItemParams::bShouldMarkDirtyStats' has a wrong offset!");

// ScriptStruct DuneSandbox.SortableSpawnItemParams
// 0x0008 (0x0038 - 0x0030)
struct FSortableSpawnItemParams final : public FSpawnItemParams
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSortableSpawnItemParams) == 0x000008, "Wrong alignment on FSortableSpawnItemParams");
static_assert(sizeof(FSortableSpawnItemParams) == 0x000038, "Wrong size on FSortableSpawnItemParams");

// ScriptStruct DuneSandbox.MapAreaIdRef
// 0x0002 (0x0002 - 0x0000)
struct FMapAreaIdRef final
{
public:
	uint16                                        m_Id;                                              // 0x0000(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapAreaIdRef) == 0x000002, "Wrong alignment on FMapAreaIdRef");
static_assert(sizeof(FMapAreaIdRef) == 0x000002, "Wrong size on FMapAreaIdRef");
static_assert(offsetof(FMapAreaIdRef, m_Id) == 0x000000, "Member 'FMapAreaIdRef::m_Id' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableRegionModifers
// 0x0008 (0x0008 - 0x0000)
struct FBuildableRegionModifers final
{
public:
	float                                         m_RefundPercentage;                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PlacementCostMultiplier;                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableRegionModifers) == 0x000004, "Wrong alignment on FBuildableRegionModifers");
static_assert(sizeof(FBuildableRegionModifers) == 0x000008, "Wrong size on FBuildableRegionModifers");
static_assert(offsetof(FBuildableRegionModifers, m_RefundPercentage) == 0x000000, "Member 'FBuildableRegionModifers::m_RefundPercentage' has a wrong offset!");
static_assert(offsetof(FBuildableRegionModifers, m_PlacementCostMultiplier) == 0x000004, "Member 'FBuildableRegionModifers::m_PlacementCostMultiplier' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableGroupType
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableGroupType final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableGroupType) == 0x000004, "Wrong alignment on FEBuildableGroupType");
static_assert(sizeof(FEBuildableGroupType) == 0x000008, "Wrong size on FEBuildableGroupType");

// ScriptStruct DuneSandbox.BuildableGroupsModifiersData
// 0x0018 (0x0018 - 0x0000)
struct FBuildableGroupsModifiersData final
{
public:
	struct FBuildableRegionModifers               m_Modifiers;                                       // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FEBuildableGroupType>           m_BuildableGroups;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableGroupsModifiersData) == 0x000008, "Wrong alignment on FBuildableGroupsModifiersData");
static_assert(sizeof(FBuildableGroupsModifiersData) == 0x000018, "Wrong size on FBuildableGroupsModifiersData");
static_assert(offsetof(FBuildableGroupsModifiersData, m_Modifiers) == 0x000000, "Member 'FBuildableGroupsModifiersData::m_Modifiers' has a wrong offset!");
static_assert(offsetof(FBuildableGroupsModifiersData, m_BuildableGroups) == 0x000008, "Member 'FBuildableGroupsModifiersData::m_BuildableGroups' has a wrong offset!");

// ScriptStruct DuneSandbox.MapAreaBuildableModifiersData
// 0x0020 (0x0020 - 0x0000)
struct FMapAreaBuildableModifiersData final
{
public:
	struct FMapAreaIdRef                          m_MapArea;                                         // 0x0000(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBuildableRegionModifers               m_DefaultModifiers;                                // 0x0004(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBuildableGroupsModifiersData>  m_BuildableGroupsModifiersData;                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapAreaBuildableModifiersData) == 0x000008, "Wrong alignment on FMapAreaBuildableModifiersData");
static_assert(sizeof(FMapAreaBuildableModifiersData) == 0x000020, "Wrong size on FMapAreaBuildableModifiersData");
static_assert(offsetof(FMapAreaBuildableModifiersData, m_MapArea) == 0x000000, "Member 'FMapAreaBuildableModifiersData::m_MapArea' has a wrong offset!");
static_assert(offsetof(FMapAreaBuildableModifiersData, m_DefaultModifiers) == 0x000004, "Member 'FMapAreaBuildableModifiersData::m_DefaultModifiers' has a wrong offset!");
static_assert(offsetof(FMapAreaBuildableModifiersData, m_BuildableGroupsModifiersData) == 0x000010, "Member 'FMapAreaBuildableModifiersData::m_BuildableGroupsModifiersData' has a wrong offset!");

// ScriptStruct DuneSandbox.GroundVehicleEngineSettings
// 0x0128 (0x0128 - 0x0000)
struct FGroundVehicleEngineSettings final
{
public:
	float                                         m_MaxEnginePower;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxBackwardEnginePower;                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideEnginePowerSpeedCurve;                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     m_EnginePowerSpeedOverrideCurve;                   // 0x0010(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideEnginePowerSlopeCurve;                  // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     m_EnginePowerSlopeOverrideCurve;                   // 0x00A0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroundVehicleEngineSettings) == 0x000008, "Wrong alignment on FGroundVehicleEngineSettings");
static_assert(sizeof(FGroundVehicleEngineSettings) == 0x000128, "Wrong size on FGroundVehicleEngineSettings");
static_assert(offsetof(FGroundVehicleEngineSettings, m_MaxEnginePower) == 0x000000, "Member 'FGroundVehicleEngineSettings::m_MaxEnginePower' has a wrong offset!");
static_assert(offsetof(FGroundVehicleEngineSettings, m_MaxBackwardEnginePower) == 0x000004, "Member 'FGroundVehicleEngineSettings::m_MaxBackwardEnginePower' has a wrong offset!");
static_assert(offsetof(FGroundVehicleEngineSettings, m_bOverrideEnginePowerSpeedCurve) == 0x000008, "Member 'FGroundVehicleEngineSettings::m_bOverrideEnginePowerSpeedCurve' has a wrong offset!");
static_assert(offsetof(FGroundVehicleEngineSettings, m_EnginePowerSpeedOverrideCurve) == 0x000010, "Member 'FGroundVehicleEngineSettings::m_EnginePowerSpeedOverrideCurve' has a wrong offset!");
static_assert(offsetof(FGroundVehicleEngineSettings, m_bOverrideEnginePowerSlopeCurve) == 0x000098, "Member 'FGroundVehicleEngineSettings::m_bOverrideEnginePowerSlopeCurve' has a wrong offset!");
static_assert(offsetof(FGroundVehicleEngineSettings, m_EnginePowerSlopeOverrideCurve) == 0x0000A0, "Member 'FGroundVehicleEngineSettings::m_EnginePowerSlopeOverrideCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.SkyActorBiomeParticleSystem
// 0x0010 (0x0010 - 0x0000)
struct FSkyActorBiomeParticleSystem final
{
public:
	class UNiagaraSystem*                         NiagaraSystem;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranslucentSortPriority;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectDynamicIndirectLighting;                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkyActorBiomeParticleSystem) == 0x000008, "Wrong alignment on FSkyActorBiomeParticleSystem");
static_assert(sizeof(FSkyActorBiomeParticleSystem) == 0x000010, "Wrong size on FSkyActorBiomeParticleSystem");
static_assert(offsetof(FSkyActorBiomeParticleSystem, NiagaraSystem) == 0x000000, "Member 'FSkyActorBiomeParticleSystem::NiagaraSystem' has a wrong offset!");
static_assert(offsetof(FSkyActorBiomeParticleSystem, TranslucentSortPriority) == 0x000008, "Member 'FSkyActorBiomeParticleSystem::TranslucentSortPriority' has a wrong offset!");
static_assert(offsetof(FSkyActorBiomeParticleSystem, bAffectDynamicIndirectLighting) == 0x00000C, "Member 'FSkyActorBiomeParticleSystem::bAffectDynamicIndirectLighting' has a wrong offset!");

// ScriptStruct DuneSandbox.ArmorComponent
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FArmorComponent final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArmorComponent) == 0x000008, "Wrong alignment on FArmorComponent");
static_assert(sizeof(FArmorComponent) == 0x000060, "Wrong size on FArmorComponent");

// ScriptStruct DuneSandbox.VehicleBoostStaticData
// 0x0040 (0x0040 - 0x0000)
struct FVehicleBoostStaticData final
{
public:
	EVehicleModuleType                            m_ModuleSlot;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             m_BoostAmountCurve;                                // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxTime;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CooldownSpeed;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleBoostStaticData) == 0x000008, "Wrong alignment on FVehicleBoostStaticData");
static_assert(sizeof(FVehicleBoostStaticData) == 0x000040, "Wrong size on FVehicleBoostStaticData");
static_assert(offsetof(FVehicleBoostStaticData, m_ModuleSlot) == 0x000000, "Member 'FVehicleBoostStaticData::m_ModuleSlot' has a wrong offset!");
static_assert(offsetof(FVehicleBoostStaticData, m_BoostAmountCurve) == 0x000008, "Member 'FVehicleBoostStaticData::m_BoostAmountCurve' has a wrong offset!");
static_assert(offsetof(FVehicleBoostStaticData, m_MaxTime) == 0x000038, "Member 'FVehicleBoostStaticData::m_MaxTime' has a wrong offset!");
static_assert(offsetof(FVehicleBoostStaticData, m_CooldownSpeed) == 0x00003C, "Member 'FVehicleBoostStaticData::m_CooldownSpeed' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleBoostModuleTableRow
// 0x0050 (0x0060 - 0x0010)
struct FVehicleBoostModuleTableRow final : public FTableRowBase
{
public:
	struct FVehicleBoostStaticData                m_BoostData;                                       // 0x0010(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         m_GroundVehicleBoostForce;                         // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VultureModeBoostSpeed;                           // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DragonflyModeBoostSpeed;                         // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleBoostModuleTableRow) == 0x000008, "Wrong alignment on FVehicleBoostModuleTableRow");
static_assert(sizeof(FVehicleBoostModuleTableRow) == 0x000060, "Wrong size on FVehicleBoostModuleTableRow");
static_assert(offsetof(FVehicleBoostModuleTableRow, m_BoostData) == 0x000010, "Member 'FVehicleBoostModuleTableRow::m_BoostData' has a wrong offset!");
static_assert(offsetof(FVehicleBoostModuleTableRow, m_GroundVehicleBoostForce) == 0x000050, "Member 'FVehicleBoostModuleTableRow::m_GroundVehicleBoostForce' has a wrong offset!");
static_assert(offsetof(FVehicleBoostModuleTableRow, m_VultureModeBoostSpeed) == 0x000054, "Member 'FVehicleBoostModuleTableRow::m_VultureModeBoostSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleBoostModuleTableRow, m_DragonflyModeBoostSpeed) == 0x000058, "Member 'FVehicleBoostModuleTableRow::m_DragonflyModeBoostSpeed' has a wrong offset!");

// ScriptStruct DuneSandbox.EmoteItemStats
// 0x0090 (0x0090 - 0x0000)
struct FEmoteItemStats final
{
public:
	TSoftClassPtr<class UClass>                   EmoteAbilityRef;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            EmoteAnimMontage;                                  // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmotePlayRate;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmoteBlendOutTime;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EmoteEventTag;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EmoteOptionalOverrideTags;                         // 0x0070(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteItemStats) == 0x000008, "Wrong alignment on FEmoteItemStats");
static_assert(sizeof(FEmoteItemStats) == 0x000090, "Wrong size on FEmoteItemStats");
static_assert(offsetof(FEmoteItemStats, EmoteAbilityRef) == 0x000000, "Member 'FEmoteItemStats::EmoteAbilityRef' has a wrong offset!");
static_assert(offsetof(FEmoteItemStats, EmoteAnimMontage) == 0x000030, "Member 'FEmoteItemStats::EmoteAnimMontage' has a wrong offset!");
static_assert(offsetof(FEmoteItemStats, EmotePlayRate) == 0x000060, "Member 'FEmoteItemStats::EmotePlayRate' has a wrong offset!");
static_assert(offsetof(FEmoteItemStats, EmoteBlendOutTime) == 0x000064, "Member 'FEmoteItemStats::EmoteBlendOutTime' has a wrong offset!");
static_assert(offsetof(FEmoteItemStats, EmoteEventTag) == 0x000068, "Member 'FEmoteItemStats::EmoteEventTag' has a wrong offset!");
static_assert(offsetof(FEmoteItemStats, EmoteOptionalOverrideTags) == 0x000070, "Member 'FEmoteItemStats::EmoteOptionalOverrideTags' has a wrong offset!");

// ScriptStruct DuneSandbox.EmoteItemStatsComponent_BlueprintWrapper
// 0x01D0 (0x01D0 - 0x0000)
struct FEmoteItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x140];                                      // 0x0000(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEmoteItemStats                        EmoteItemStats;                                    // 0x0140(0x0090)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FEmoteItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FEmoteItemStatsComponent_BlueprintWrapper) == 0x0001D0, "Wrong size on FEmoteItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FEmoteItemStatsComponent_BlueprintWrapper, EmoteItemStats) == 0x000140, "Member 'FEmoteItemStatsComponent_BlueprintWrapper::EmoteItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.EScannableComponentTypes
// 0x0000 (0x0008 - 0x0008)
struct FEScannableComponentTypes final : public FStringEnumValue
{
};
static_assert(alignof(FEScannableComponentTypes) == 0x000004, "Wrong alignment on FEScannableComponentTypes");
static_assert(sizeof(FEScannableComponentTypes) == 0x000008, "Wrong size on FEScannableComponentTypes");

// ScriptStruct DuneSandbox.EBuildableType
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableType final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableType) == 0x000004, "Wrong alignment on FEBuildableType");
static_assert(sizeof(FEBuildableType) == 0x000008, "Wrong size on FEBuildableType");

// ScriptStruct DuneSandbox.EBuildableSocketSetup
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableSocketSetup final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableSocketSetup) == 0x000004, "Wrong alignment on FEBuildableSocketSetup");
static_assert(sizeof(FEBuildableSocketSetup) == 0x000008, "Wrong size on FEBuildableSocketSetup");

// ScriptStruct DuneSandbox.PentashieldSurfaceDataRow
// 0x0018 (0x0028 - 0x0010)
struct FPentashieldSurfaceDataRow final : public FTableRowBase
{
public:
	struct FEBuildableType                        m_PlacementCorner;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEBuildableSocketSetup                 m_CornerSocketSetup;                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPentashieldSurfaceOrientation                m_SurfaceOrientation;                              // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPentashieldSurfaceDataRow) == 0x000008, "Wrong alignment on FPentashieldSurfaceDataRow");
static_assert(sizeof(FPentashieldSurfaceDataRow) == 0x000028, "Wrong size on FPentashieldSurfaceDataRow");
static_assert(offsetof(FPentashieldSurfaceDataRow, m_PlacementCorner) == 0x000010, "Member 'FPentashieldSurfaceDataRow::m_PlacementCorner' has a wrong offset!");
static_assert(offsetof(FPentashieldSurfaceDataRow, m_CornerSocketSetup) == 0x000018, "Member 'FPentashieldSurfaceDataRow::m_CornerSocketSetup' has a wrong offset!");
static_assert(offsetof(FPentashieldSurfaceDataRow, m_SurfaceOrientation) == 0x000020, "Member 'FPentashieldSurfaceDataRow::m_SurfaceOrientation' has a wrong offset!");

// ScriptStruct DuneSandbox.GameItemInfo
// 0x0010 (0x0010 - 0x0000)
struct FGameItemInfo final
{
public:
	struct FEItemTemplateID                       TemplateId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Durability;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameItemInfo) == 0x000004, "Wrong alignment on FGameItemInfo");
static_assert(sizeof(FGameItemInfo) == 0x000010, "Wrong size on FGameItemInfo");
static_assert(offsetof(FGameItemInfo, TemplateId) == 0x000000, "Member 'FGameItemInfo::TemplateId' has a wrong offset!");
static_assert(offsetof(FGameItemInfo, Quantity) == 0x000008, "Member 'FGameItemInfo::Quantity' has a wrong offset!");
static_assert(offsetof(FGameItemInfo, Durability) == 0x00000C, "Member 'FGameItemInfo::Durability' has a wrong offset!");

// ScriptStruct DuneSandbox.CheckpointState
// 0x0038 (0x0038 - 0x0000)
struct FCheckpointState final
{
public:
	TArray<TSubclassOf<class UDWGameplayEffect>>  m_PlayerStatsEffectClasses;                        // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FGameItemInfo>                  m_NonDefaultItems;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EHUDUnlockLevel>                       m_HUDUnlockLevel;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         m_ExpectedNpcCount;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCheckpointState) == 0x000008, "Wrong alignment on FCheckpointState");
static_assert(sizeof(FCheckpointState) == 0x000038, "Wrong size on FCheckpointState");
static_assert(offsetof(FCheckpointState, m_PlayerStatsEffectClasses) == 0x000000, "Member 'FCheckpointState::m_PlayerStatsEffectClasses' has a wrong offset!");
static_assert(offsetof(FCheckpointState, m_NonDefaultItems) == 0x000010, "Member 'FCheckpointState::m_NonDefaultItems' has a wrong offset!");
static_assert(offsetof(FCheckpointState, m_HUDUnlockLevel) == 0x000020, "Member 'FCheckpointState::m_HUDUnlockLevel' has a wrong offset!");
static_assert(offsetof(FCheckpointState, m_ExpectedNpcCount) == 0x000030, "Member 'FCheckpointState::m_ExpectedNpcCount' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneMapInfoRow
// 0x0050 (0x0060 - 0x0010)
struct FDuneMapInfoRow final : public FTableRowBase
{
public:
	struct FSoftObjectPath                        m_Map;                                             // 0x0010(0x0020)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_DisplayName;                                     // 0x0030(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_Description;                                     // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneMapInfoRow) == 0x000008, "Wrong alignment on FDuneMapInfoRow");
static_assert(sizeof(FDuneMapInfoRow) == 0x000060, "Wrong size on FDuneMapInfoRow");
static_assert(offsetof(FDuneMapInfoRow, m_Map) == 0x000010, "Member 'FDuneMapInfoRow::m_Map' has a wrong offset!");
static_assert(offsetof(FDuneMapInfoRow, m_DisplayName) == 0x000030, "Member 'FDuneMapInfoRow::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FDuneMapInfoRow, m_Description) == 0x000048, "Member 'FDuneMapInfoRow::m_Description' has a wrong offset!");

// ScriptStruct DuneSandbox.OrnithopterEngineSettings
// 0x0048 (0x0048 - 0x0000)
struct FOrnithopterEngineSettings final
{
public:
	struct FFloatRange                            m_MaxAltitudeRange;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            m_BrokenEngineMaxAltitudeRange;                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            m_MinHeightWithAttachment;                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxSpeed;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandByManeuverSpeed;                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandByVerticalSpeed;                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_AltitudePowerConsumptionMultiplierCurve;         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrnithopterEngineSettings) == 0x000008, "Wrong alignment on FOrnithopterEngineSettings");
static_assert(sizeof(FOrnithopterEngineSettings) == 0x000048, "Wrong size on FOrnithopterEngineSettings");
static_assert(offsetof(FOrnithopterEngineSettings, m_MaxAltitudeRange) == 0x000000, "Member 'FOrnithopterEngineSettings::m_MaxAltitudeRange' has a wrong offset!");
static_assert(offsetof(FOrnithopterEngineSettings, m_BrokenEngineMaxAltitudeRange) == 0x000010, "Member 'FOrnithopterEngineSettings::m_BrokenEngineMaxAltitudeRange' has a wrong offset!");
static_assert(offsetof(FOrnithopterEngineSettings, m_MinHeightWithAttachment) == 0x000020, "Member 'FOrnithopterEngineSettings::m_MinHeightWithAttachment' has a wrong offset!");
static_assert(offsetof(FOrnithopterEngineSettings, m_MaxSpeed) == 0x000030, "Member 'FOrnithopterEngineSettings::m_MaxSpeed' has a wrong offset!");
static_assert(offsetof(FOrnithopterEngineSettings, m_StandByManeuverSpeed) == 0x000034, "Member 'FOrnithopterEngineSettings::m_StandByManeuverSpeed' has a wrong offset!");
static_assert(offsetof(FOrnithopterEngineSettings, m_StandByVerticalSpeed) == 0x000038, "Member 'FOrnithopterEngineSettings::m_StandByVerticalSpeed' has a wrong offset!");
static_assert(offsetof(FOrnithopterEngineSettings, m_AltitudePowerConsumptionMultiplierCurve) == 0x000040, "Member 'FOrnithopterEngineSettings::m_AltitudePowerConsumptionMultiplierCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimMontageArray
// 0x0010 (0x0010 - 0x0000)
struct FAnimMontageArray final
{
public:
	TArray<class UAnimMontage*>                   Montages;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimMontageArray) == 0x000008, "Wrong alignment on FAnimMontageArray");
static_assert(sizeof(FAnimMontageArray) == 0x000010, "Wrong size on FAnimMontageArray");
static_assert(offsetof(FAnimMontageArray, Montages) == 0x000000, "Member 'FAnimMontageArray::Montages' has a wrong offset!");

// ScriptStruct DuneSandbox.IntelDistributionSettingsRowBase
// 0x0030 (0x0040 - 0x0010)
struct FIntelDistributionSettingsRowBase final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint32                                        RespawnTimeInSec;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MinimumPoints;                                     // 0x0034(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MaximumPoints;                                     // 0x0036(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntelDistributionSettingsRowBase) == 0x000008, "Wrong alignment on FIntelDistributionSettingsRowBase");
static_assert(sizeof(FIntelDistributionSettingsRowBase) == 0x000040, "Wrong size on FIntelDistributionSettingsRowBase");
static_assert(offsetof(FIntelDistributionSettingsRowBase, RequiredTags) == 0x000010, "Member 'FIntelDistributionSettingsRowBase::RequiredTags' has a wrong offset!");
static_assert(offsetof(FIntelDistributionSettingsRowBase, RespawnTimeInSec) == 0x000030, "Member 'FIntelDistributionSettingsRowBase::RespawnTimeInSec' has a wrong offset!");
static_assert(offsetof(FIntelDistributionSettingsRowBase, MinimumPoints) == 0x000034, "Member 'FIntelDistributionSettingsRowBase::MinimumPoints' has a wrong offset!");
static_assert(offsetof(FIntelDistributionSettingsRowBase, MaximumPoints) == 0x000036, "Member 'FIntelDistributionSettingsRowBase::MaximumPoints' has a wrong offset!");
static_assert(offsetof(FIntelDistributionSettingsRowBase, bIsEnabled) == 0x000038, "Member 'FIntelDistributionSettingsRowBase::bIsEnabled' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceFieldPlayerMetrics
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSpiceFieldPlayerMetrics final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiceFieldPlayerMetrics) == 0x000004, "Wrong alignment on FSpiceFieldPlayerMetrics");
static_assert(sizeof(FSpiceFieldPlayerMetrics) == 0x000008, "Wrong size on FSpiceFieldPlayerMetrics");

// ScriptStruct DuneSandbox.InstigatorInfo
// 0x0010 (0x0010 - 0x0000)
struct FInstigatorInfo final
{
public:
	TWeakObjectPtr<class AActor>                  m_Actor;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             m_Controller;                                      // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstigatorInfo) == 0x000004, "Wrong alignment on FInstigatorInfo");
static_assert(sizeof(FInstigatorInfo) == 0x000010, "Wrong size on FInstigatorInfo");
static_assert(offsetof(FInstigatorInfo, m_Actor) == 0x000000, "Member 'FInstigatorInfo::m_Actor' has a wrong offset!");
static_assert(offsetof(FInstigatorInfo, m_Controller) == 0x000008, "Member 'FInstigatorInfo::m_Controller' has a wrong offset!");

// ScriptStruct DuneSandbox.KnockbackInfo
// 0x0108 (0x0108 - 0x0000)
struct FKnockbackInfo final
{
public:
	struct FHitResult                             m_HitResult;                                       // 0x0000(0x00E8)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                m_KnockbackDirection;                              // 0x00E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockbackHitRotation                         m_KnockbackRotation;                               // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKnockbackInfo) == 0x000008, "Wrong alignment on FKnockbackInfo");
static_assert(sizeof(FKnockbackInfo) == 0x000108, "Wrong size on FKnockbackInfo");
static_assert(offsetof(FKnockbackInfo, m_HitResult) == 0x000000, "Member 'FKnockbackInfo::m_HitResult' has a wrong offset!");
static_assert(offsetof(FKnockbackInfo, m_KnockbackDirection) == 0x0000E8, "Member 'FKnockbackInfo::m_KnockbackDirection' has a wrong offset!");
static_assert(offsetof(FKnockbackInfo, m_KnockbackRotation) == 0x000100, "Member 'FKnockbackInfo::m_KnockbackRotation' has a wrong offset!");

// ScriptStruct DuneSandbox.MulticastDamageInfo
// 0x0230 (0x0230 - 0x0000)
struct FMulticastDamageInfo final
{
public:
	struct FInstigatorInfo                        m_InstigatorInfo;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_FinalCalculatedDamage;                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FinalCalculatedShieldDamage;                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKnockbackInfo                         m_KnockbackInfo;                                   // 0x0018(0x0108)(BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage;                                     // 0x0120(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          m_bPoiseDamagePredicted;                           // 0x012C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             m_HitResult;                                       // 0x0130(0x00E8)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          m_bCrit;                                           // 0x0218(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShielded;                                       // 0x0219(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A[0x6];                                      // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneDamageType>            m_DamageTypeClass;                                 // 0x0220(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsDirectDamage;                                 // 0x0228(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMulticastDamageInfo) == 0x000008, "Wrong alignment on FMulticastDamageInfo");
static_assert(sizeof(FMulticastDamageInfo) == 0x000230, "Wrong size on FMulticastDamageInfo");
static_assert(offsetof(FMulticastDamageInfo, m_InstigatorInfo) == 0x000000, "Member 'FMulticastDamageInfo::m_InstigatorInfo' has a wrong offset!");
static_assert(offsetof(FMulticastDamageInfo, m_FinalCalculatedDamage) == 0x000010, "Member 'FMulticastDamageInfo::m_FinalCalculatedDamage' has a wrong offset!");
static_assert(offsetof(FMulticastDamageInfo, m_FinalCalculatedShieldDamage) == 0x000014, "Member 'FMulticastDamageInfo::m_FinalCalculatedShieldDamage' has a wrong offset!");
static_assert(offsetof(FMulticastDamageInfo, m_KnockbackInfo) == 0x000018, "Member 'FMulticastDamageInfo::m_KnockbackInfo' has a wrong offset!");
static_assert(offsetof(FMulticastDamageInfo, m_PoiseDamage) == 0x000120, "Member 'FMulticastDamageInfo::m_PoiseDamage' has a wrong offset!");
static_assert(offsetof(FMulticastDamageInfo, m_bPoiseDamagePredicted) == 0x00012C, "Member 'FMulticastDamageInfo::m_bPoiseDamagePredicted' has a wrong offset!");
static_assert(offsetof(FMulticastDamageInfo, m_HitResult) == 0x000130, "Member 'FMulticastDamageInfo::m_HitResult' has a wrong offset!");
static_assert(offsetof(FMulticastDamageInfo, m_bCrit) == 0x000218, "Member 'FMulticastDamageInfo::m_bCrit' has a wrong offset!");
static_assert(offsetof(FMulticastDamageInfo, m_bShielded) == 0x000219, "Member 'FMulticastDamageInfo::m_bShielded' has a wrong offset!");
static_assert(offsetof(FMulticastDamageInfo, m_DamageTypeClass) == 0x000220, "Member 'FMulticastDamageInfo::m_DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FMulticastDamageInfo, m_bIsDirectDamage) == 0x000228, "Member 'FMulticastDamageInfo::m_bIsDirectDamage' has a wrong offset!");

// ScriptStruct DuneSandbox.CompressedNormal
// 0x0003 (0x0003 - 0x0000)
struct FCompressedNormal final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCompressedNormal) == 0x000001, "Wrong alignment on FCompressedNormal");
static_assert(sizeof(FCompressedNormal) == 0x000003, "Wrong size on FCompressedNormal");

// ScriptStruct DuneSandbox.WeaponVFXData
// 0x0030 (0x0030 - 0x0000)
struct FWeaponVFXData final
{
public:
	struct FVector_NetQuantize10                  m_EndLocation;                                     // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  m_ActorHit;                                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  m_CausingActor;                                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCompressedNormal                      m_HitNormal;                                       // 0x0028(0x0003)(NoDestructor, NativeAccessSpecifierPublic)
	EPhysicalSurface                              m_SurfaceType;                                     // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageBlockType                              m_DamageBlockType;                                 // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponVFXData) == 0x000008, "Wrong alignment on FWeaponVFXData");
static_assert(sizeof(FWeaponVFXData) == 0x000030, "Wrong size on FWeaponVFXData");
static_assert(offsetof(FWeaponVFXData, m_EndLocation) == 0x000000, "Member 'FWeaponVFXData::m_EndLocation' has a wrong offset!");
static_assert(offsetof(FWeaponVFXData, m_ActorHit) == 0x000018, "Member 'FWeaponVFXData::m_ActorHit' has a wrong offset!");
static_assert(offsetof(FWeaponVFXData, m_CausingActor) == 0x000020, "Member 'FWeaponVFXData::m_CausingActor' has a wrong offset!");
static_assert(offsetof(FWeaponVFXData, m_HitNormal) == 0x000028, "Member 'FWeaponVFXData::m_HitNormal' has a wrong offset!");
static_assert(offsetof(FWeaponVFXData, m_SurfaceType) == 0x00002B, "Member 'FWeaponVFXData::m_SurfaceType' has a wrong offset!");
static_assert(offsetof(FWeaponVFXData, m_DamageBlockType) == 0x00002C, "Member 'FWeaponVFXData::m_DamageBlockType' has a wrong offset!");

// ScriptStruct DuneSandbox.ESurveyProgressType
// 0x0000 (0x0008 - 0x0008)
struct FESurveyProgressType final : public FStringEnumValue
{
};
static_assert(alignof(FESurveyProgressType) == 0x000004, "Wrong alignment on FESurveyProgressType");
static_assert(sizeof(FESurveyProgressType) == 0x000008, "Wrong size on FESurveyProgressType");

// ScriptStruct DuneSandbox.BootLoadClassData
// 0x0038 (0x0038 - 0x0000)
struct FBootLoadClassData final
{
public:
	TSoftClassPtr<class UClass>                   ClassRef;                                          // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESyncLoadTarget                               LoadTarget;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncLoad;                                         // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBootLoadClassData) == 0x000008, "Wrong alignment on FBootLoadClassData");
static_assert(sizeof(FBootLoadClassData) == 0x000038, "Wrong size on FBootLoadClassData");
static_assert(offsetof(FBootLoadClassData, ClassRef) == 0x000000, "Member 'FBootLoadClassData::ClassRef' has a wrong offset!");
static_assert(offsetof(FBootLoadClassData, LoadTarget) == 0x000030, "Member 'FBootLoadClassData::LoadTarget' has a wrong offset!");
static_assert(offsetof(FBootLoadClassData, bSyncLoad) == 0x000031, "Member 'FBootLoadClassData::bSyncLoad' has a wrong offset!");

// ScriptStruct DuneSandbox.PartyDatabaseEventCreateParty
// 0x0038 (0x0038 - 0x0000)
struct FPartyDatabaseEventCreateParty final
{
public:
	int64                                         PartyId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LeaderId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderName;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MemberId;                                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberName;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyDatabaseEventCreateParty) == 0x000008, "Wrong alignment on FPartyDatabaseEventCreateParty");
static_assert(sizeof(FPartyDatabaseEventCreateParty) == 0x000038, "Wrong size on FPartyDatabaseEventCreateParty");
static_assert(offsetof(FPartyDatabaseEventCreateParty, PartyId) == 0x000000, "Member 'FPartyDatabaseEventCreateParty::PartyId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventCreateParty, LeaderId) == 0x000008, "Member 'FPartyDatabaseEventCreateParty::LeaderId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventCreateParty, LeaderName) == 0x000010, "Member 'FPartyDatabaseEventCreateParty::LeaderName' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventCreateParty, MemberId) == 0x000020, "Member 'FPartyDatabaseEventCreateParty::MemberId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventCreateParty, MemberName) == 0x000028, "Member 'FPartyDatabaseEventCreateParty::MemberName' has a wrong offset!");

// ScriptStruct DuneSandbox.WorldGeneratorAreaRowBase
// 0x0038 (0x0048 - 0x0010)
struct FWorldGeneratorAreaRowBase final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              AreaTexture;                                       // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 AreaColor;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldGeneratorAreaRowBase) == 0x000008, "Wrong alignment on FWorldGeneratorAreaRowBase");
static_assert(sizeof(FWorldGeneratorAreaRowBase) == 0x000048, "Wrong size on FWorldGeneratorAreaRowBase");
static_assert(offsetof(FWorldGeneratorAreaRowBase, AreaTexture) == 0x000010, "Member 'FWorldGeneratorAreaRowBase::AreaTexture' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorAreaRowBase, AreaColor) == 0x000040, "Member 'FWorldGeneratorAreaRowBase::AreaColor' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneExchangeId
// 0x0008 (0x0008 - 0x0000)
struct FDuneExchangeId final
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneExchangeId) == 0x000008, "Wrong alignment on FDuneExchangeId");
static_assert(sizeof(FDuneExchangeId) == 0x000008, "Wrong size on FDuneExchangeId");
static_assert(offsetof(FDuneExchangeId, Value) == 0x000000, "Member 'FDuneExchangeId::Value' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterGroupedSettings
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEncounterGroupedSettings final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterGroupedSettings) == 0x000008, "Wrong alignment on FEncounterGroupedSettings");
static_assert(sizeof(FEncounterGroupedSettings) == 0x000010, "Wrong size on FEncounterGroupedSettings");

// ScriptStruct DuneSandbox.EContractName
// 0x0000 (0x0008 - 0x0008)
struct FEContractName final : public FStringEnumValue
{
};
static_assert(alignof(FEContractName) == 0x000004, "Wrong alignment on FEContractName");
static_assert(sizeof(FEContractName) == 0x000008, "Wrong size on FEContractName");

// ScriptStruct DuneSandbox.ContractNameFastArrayItem
// 0x0008 (0x0014 - 0x000C)
struct FContractNameFastArrayItem final : public FFastArraySerializerItem
{
public:
	struct FEContractName                         Name;                                              // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractNameFastArrayItem) == 0x000004, "Wrong alignment on FContractNameFastArrayItem");
static_assert(sizeof(FContractNameFastArrayItem) == 0x000014, "Wrong size on FContractNameFastArrayItem");
static_assert(offsetof(FContractNameFastArrayItem, Name) == 0x00000C, "Member 'FContractNameFastArrayItem::Name' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractInfoKey
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FContractInfoKey final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContractInfoKey) == 0x000008, "Wrong alignment on FContractInfoKey");
static_assert(sizeof(FContractInfoKey) == 0x000018, "Wrong size on FContractInfoKey");

// ScriptStruct DuneSandbox.EDamageableStatID
// 0x0000 (0x0008 - 0x0008)
struct FEDamageableStatID : public FStringEnumValue
{
};
static_assert(alignof(FEDamageableStatID) == 0x000004, "Wrong alignment on FEDamageableStatID");
static_assert(sizeof(FEDamageableStatID) == 0x000008, "Wrong size on FEDamageableStatID");

// ScriptStruct DuneSandbox.EDamageMitigationFloatStatID
// 0x0000 (0x0008 - 0x0008)
struct FEDamageMitigationFloatStatID final : public FEDamageableStatID
{
};
static_assert(alignof(FEDamageMitigationFloatStatID) == 0x000004, "Wrong alignment on FEDamageMitigationFloatStatID");
static_assert(sizeof(FEDamageMitigationFloatStatID) == 0x000008, "Wrong size on FEDamageMitigationFloatStatID");

// ScriptStruct DuneSandbox.EXPConstants
// 0x0000 (0x0008 - 0x0008)
struct FEXPConstants final : public FStringEnumValue
{
};
static_assert(alignof(FEXPConstants) == 0x000004, "Wrong alignment on FEXPConstants");
static_assert(sizeof(FEXPConstants) == 0x000008, "Wrong size on FEXPConstants");

// ScriptStruct DuneSandbox.XPEventTableRow
// 0x0010 (0x0020 - 0x0010)
struct FXPEventTableRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           m_XPEventTag;                                      // 0x0010(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEXPConstants                          m_XPConstant;                                      // 0x0018(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXPEventTableRow) == 0x000008, "Wrong alignment on FXPEventTableRow");
static_assert(sizeof(FXPEventTableRow) == 0x000020, "Wrong size on FXPEventTableRow");
static_assert(offsetof(FXPEventTableRow, m_XPEventTag) == 0x000010, "Member 'FXPEventTableRow::m_XPEventTag' has a wrong offset!");
static_assert(offsetof(FXPEventTableRow, m_XPConstant) == 0x000018, "Member 'FXPEventTableRow::m_XPConstant' has a wrong offset!");

// ScriptStruct DuneSandbox.SimulatedProxyVehiclePhysics
// 0x0068 (0x0068 - 0x0000)
struct FSimulatedProxyVehiclePhysics final
{
public:
	struct FVector_NetQuantize                    m_PreviousLinearVelocity;                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  m_PreviousAngularVelocity;                         // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_Location;                                        // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               m_Rotation;                                        // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_Timestamp;                                       // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimulatedProxyVehiclePhysics) == 0x000008, "Wrong alignment on FSimulatedProxyVehiclePhysics");
static_assert(sizeof(FSimulatedProxyVehiclePhysics) == 0x000068, "Wrong size on FSimulatedProxyVehiclePhysics");
static_assert(offsetof(FSimulatedProxyVehiclePhysics, m_PreviousLinearVelocity) == 0x000000, "Member 'FSimulatedProxyVehiclePhysics::m_PreviousLinearVelocity' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehiclePhysics, m_PreviousAngularVelocity) == 0x000018, "Member 'FSimulatedProxyVehiclePhysics::m_PreviousAngularVelocity' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehiclePhysics, m_Location) == 0x000030, "Member 'FSimulatedProxyVehiclePhysics::m_Location' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehiclePhysics, m_Rotation) == 0x000048, "Member 'FSimulatedProxyVehiclePhysics::m_Rotation' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehiclePhysics, m_Timestamp) == 0x000060, "Member 'FSimulatedProxyVehiclePhysics::m_Timestamp' has a wrong offset!");

// ScriptStruct DuneSandbox.DepositCorpseEvent
// 0x0000 (0x0030 - 0x0030)
struct FDepositCorpseEvent final : public FGameEvent
{
};
static_assert(alignof(FDepositCorpseEvent) == 0x000008, "Wrong alignment on FDepositCorpseEvent");
static_assert(sizeof(FDepositCorpseEvent) == 0x000030, "Wrong size on FDepositCorpseEvent");

// ScriptStruct DuneSandbox.DialogueWidgetSettings
// 0x0030 (0x0030 - 0x0000)
struct FDialogueWidgetSettings final
{
public:
	EDialogueWidgetTypes                          Style;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDialogueWidget>            Class;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   DataKey;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDynamic;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueWidgetSettings) == 0x000008, "Wrong alignment on FDialogueWidgetSettings");
static_assert(sizeof(FDialogueWidgetSettings) == 0x000030, "Wrong size on FDialogueWidgetSettings");
static_assert(offsetof(FDialogueWidgetSettings, Style) == 0x000000, "Member 'FDialogueWidgetSettings::Style' has a wrong offset!");
static_assert(offsetof(FDialogueWidgetSettings, Class) == 0x000008, "Member 'FDialogueWidgetSettings::Class' has a wrong offset!");
static_assert(offsetof(FDialogueWidgetSettings, Padding) == 0x000010, "Member 'FDialogueWidgetSettings::Padding' has a wrong offset!");
static_assert(offsetof(FDialogueWidgetSettings, DataKey) == 0x000020, "Member 'FDialogueWidgetSettings::DataKey' has a wrong offset!");
static_assert(offsetof(FDialogueWidgetSettings, bIsDynamic) == 0x000028, "Member 'FDialogueWidgetSettings::bIsDynamic' has a wrong offset!");

// ScriptStruct DuneSandbox.ServiceMessagePayload
// 0x0004 (0x0004 - 0x0000)
struct FServiceMessagePayload
{
public:
	int32                                         m_BroadcastDuration;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServiceMessagePayload) == 0x000004, "Wrong alignment on FServiceMessagePayload");
static_assert(sizeof(FServiceMessagePayload) == 0x000004, "Wrong size on FServiceMessagePayload");
static_assert(offsetof(FServiceMessagePayload, m_BroadcastDuration) == 0x000000, "Member 'FServiceMessagePayload::m_BroadcastDuration' has a wrong offset!");

// ScriptStruct DuneSandbox.ServerShutdownServiceMessagePayload
// 0x0014 (0x0018 - 0x0004)
struct FServerShutdownServiceMessagePayload final : public FServiceMessagePayload
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         m_ShutdownTimestamp;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_BroadcastFrequency;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShouldCancel;                                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerShutdownServiceMessagePayload) == 0x000008, "Wrong alignment on FServerShutdownServiceMessagePayload");
static_assert(sizeof(FServerShutdownServiceMessagePayload) == 0x000018, "Wrong size on FServerShutdownServiceMessagePayload");
static_assert(offsetof(FServerShutdownServiceMessagePayload, m_ShutdownTimestamp) == 0x000008, "Member 'FServerShutdownServiceMessagePayload::m_ShutdownTimestamp' has a wrong offset!");
static_assert(offsetof(FServerShutdownServiceMessagePayload, m_BroadcastFrequency) == 0x000010, "Member 'FServerShutdownServiceMessagePayload::m_BroadcastFrequency' has a wrong offset!");
static_assert(offsetof(FServerShutdownServiceMessagePayload, m_bShouldCancel) == 0x000014, "Member 'FServerShutdownServiceMessagePayload::m_bShouldCancel' has a wrong offset!");

// ScriptStruct DuneSandbox.PentashieldAndDoorAccessComponent
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPentashieldAndDoorAccessComponent final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPentashieldAndDoorAccessComponent) == 0x000008, "Wrong alignment on FPentashieldAndDoorAccessComponent");
static_assert(sizeof(FPentashieldAndDoorAccessComponent) == 0x000020, "Wrong size on FPentashieldAndDoorAccessComponent");

// ScriptStruct DuneSandbox.EVehicleModuleTemplateID
// 0x0000 (0x0008 - 0x0008)
struct FEVehicleModuleTemplateID final : public FStringEnumValue
{
};
static_assert(alignof(FEVehicleModuleTemplateID) == 0x000004, "Wrong alignment on FEVehicleModuleTemplateID");
static_assert(sizeof(FEVehicleModuleTemplateID) == 0x000008, "Wrong size on FEVehicleModuleTemplateID");

// ScriptStruct DuneSandbox.GmeUserComponent
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FGmeUserComponent final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGmeUserComponent) == 0x000008, "Wrong alignment on FGmeUserComponent");
static_assert(sizeof(FGmeUserComponent) == 0x000068, "Wrong size on FGmeUserComponent");

// ScriptStruct DuneSandbox.FogOfWarTrailTextureData
// 0x0018 (0x0018 - 0x0000)
struct FFogOfWarTrailTextureData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFogOfWarClientSubsystem*               m_Owner;                                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFogOfWarTrailTextureData) == 0x000008, "Wrong alignment on FFogOfWarTrailTextureData");
static_assert(sizeof(FFogOfWarTrailTextureData) == 0x000018, "Wrong size on FFogOfWarTrailTextureData");
static_assert(offsetof(FFogOfWarTrailTextureData, m_Owner) == 0x000010, "Member 'FFogOfWarTrailTextureData::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.FrameTypeToWeaponClassRowBase
// 0x0040 (0x0050 - 0x0010)
struct FFrameTypeToWeaponClassRowBase final : public FTableRowBase
{
public:
	struct FGameplayAttribute                     m_DamageAttribute;                                 // 0x0010(0x0038)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ShieldDamageModifier;                            // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFrameTypeToWeaponClassRowBase) == 0x000008, "Wrong alignment on FFrameTypeToWeaponClassRowBase");
static_assert(sizeof(FFrameTypeToWeaponClassRowBase) == 0x000050, "Wrong size on FFrameTypeToWeaponClassRowBase");
static_assert(offsetof(FFrameTypeToWeaponClassRowBase, m_DamageAttribute) == 0x000010, "Member 'FFrameTypeToWeaponClassRowBase::m_DamageAttribute' has a wrong offset!");
static_assert(offsetof(FFrameTypeToWeaponClassRowBase, m_ShieldDamageModifier) == 0x000048, "Member 'FFrameTypeToWeaponClassRowBase::m_ShieldDamageModifier' has a wrong offset!");

// ScriptStruct DuneSandbox.VehiclePowerStats
// 0x01A0 (0x01A0 - 0x0000)
struct FVehiclePowerStats final
{
public:
	float                                         FuelToPowerFactor;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerToTemperatureFactor;                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrokenPowerToTemperatureFactor;                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     HeatInterpolationCurve;                            // 0x0010(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         CoolDownDelay;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeatOperationMin;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeatOperationMax;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     BaseTemperatureTodCurve;                           // 0x00A8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         HeatLimit;                                         // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BiomeTemperatureWeight;                            // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HeatDecreasePunishmentCurve;                       // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HeatIncreasePunishmentCurve;                       // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HeatCooldownDelayPunishmentCurve;                  // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverheatDamagePerSecond;                           // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneDamageType>            OverheatDamageType;                                // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x40];                                     // 0x0160(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehiclePowerStats) == 0x000008, "Wrong alignment on FVehiclePowerStats");
static_assert(sizeof(FVehiclePowerStats) == 0x0001A0, "Wrong size on FVehiclePowerStats");
static_assert(offsetof(FVehiclePowerStats, FuelToPowerFactor) == 0x000000, "Member 'FVehiclePowerStats::FuelToPowerFactor' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, PowerToTemperatureFactor) == 0x000004, "Member 'FVehiclePowerStats::PowerToTemperatureFactor' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, BrokenPowerToTemperatureFactor) == 0x000008, "Member 'FVehiclePowerStats::BrokenPowerToTemperatureFactor' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, HeatInterpolationCurve) == 0x000010, "Member 'FVehiclePowerStats::HeatInterpolationCurve' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, CoolDownDelay) == 0x000098, "Member 'FVehiclePowerStats::CoolDownDelay' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, HeatOperationMin) == 0x00009C, "Member 'FVehiclePowerStats::HeatOperationMin' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, HeatOperationMax) == 0x0000A0, "Member 'FVehiclePowerStats::HeatOperationMax' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, BaseTemperatureTodCurve) == 0x0000A8, "Member 'FVehiclePowerStats::BaseTemperatureTodCurve' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, HeatLimit) == 0x000130, "Member 'FVehiclePowerStats::HeatLimit' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, BiomeTemperatureWeight) == 0x000134, "Member 'FVehiclePowerStats::BiomeTemperatureWeight' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, HeatDecreasePunishmentCurve) == 0x000138, "Member 'FVehiclePowerStats::HeatDecreasePunishmentCurve' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, HeatIncreasePunishmentCurve) == 0x000140, "Member 'FVehiclePowerStats::HeatIncreasePunishmentCurve' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, HeatCooldownDelayPunishmentCurve) == 0x000148, "Member 'FVehiclePowerStats::HeatCooldownDelayPunishmentCurve' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, OverheatDamagePerSecond) == 0x000150, "Member 'FVehiclePowerStats::OverheatDamagePerSecond' has a wrong offset!");
static_assert(offsetof(FVehiclePowerStats, OverheatDamageType) == 0x000158, "Member 'FVehiclePowerStats::OverheatDamageType' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceFieldMetricsHeader
// 0x0060 (0x0060 - 0x0000)
struct FSpiceFieldMetricsHeader final
{
public:
	class FString                                 et;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         si;                                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 sfc;                                               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ft;                                                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 st;                                                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 sfst;                                              // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         np;                                                // 0x0058(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiceFieldMetricsHeader) == 0x000008, "Wrong alignment on FSpiceFieldMetricsHeader");
static_assert(sizeof(FSpiceFieldMetricsHeader) == 0x000060, "Wrong size on FSpiceFieldMetricsHeader");
static_assert(offsetof(FSpiceFieldMetricsHeader, et) == 0x000000, "Member 'FSpiceFieldMetricsHeader::et' has a wrong offset!");
static_assert(offsetof(FSpiceFieldMetricsHeader, si) == 0x000010, "Member 'FSpiceFieldMetricsHeader::si' has a wrong offset!");
static_assert(offsetof(FSpiceFieldMetricsHeader, sfc) == 0x000018, "Member 'FSpiceFieldMetricsHeader::sfc' has a wrong offset!");
static_assert(offsetof(FSpiceFieldMetricsHeader, ft) == 0x000028, "Member 'FSpiceFieldMetricsHeader::ft' has a wrong offset!");
static_assert(offsetof(FSpiceFieldMetricsHeader, st) == 0x000038, "Member 'FSpiceFieldMetricsHeader::st' has a wrong offset!");
static_assert(offsetof(FSpiceFieldMetricsHeader, sfst) == 0x000048, "Member 'FSpiceFieldMetricsHeader::sfst' has a wrong offset!");
static_assert(offsetof(FSpiceFieldMetricsHeader, np) == 0x000058, "Member 'FSpiceFieldMetricsHeader::np' has a wrong offset!");

// ScriptStruct DuneSandbox.TimeToInitialSpiceFieldConflictEvent
// 0x0068 (0x0068 - 0x0000)
struct FTimeToInitialSpiceFieldConflictEvent final
{
public:
	struct FSpiceFieldMetricsHeader               hd;                                                // 0x0000(0x0060)(NativeAccessSpecifierPublic)
	float                                         tbic;                                              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeToInitialSpiceFieldConflictEvent) == 0x000008, "Wrong alignment on FTimeToInitialSpiceFieldConflictEvent");
static_assert(sizeof(FTimeToInitialSpiceFieldConflictEvent) == 0x000068, "Wrong size on FTimeToInitialSpiceFieldConflictEvent");
static_assert(offsetof(FTimeToInitialSpiceFieldConflictEvent, hd) == 0x000000, "Member 'FTimeToInitialSpiceFieldConflictEvent::hd' has a wrong offset!");
static_assert(offsetof(FTimeToInitialSpiceFieldConflictEvent, tbic) == 0x000060, "Member 'FTimeToInitialSpiceFieldConflictEvent::tbic' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleSeatConfig
// 0x0014 (0x0014 - 0x0000)
struct FVehicleSeatConfig final
{
public:
	class FName                                   m_ProvidedSeat;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideProtectionSettings;                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_RadiationMitigation;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SeatedCharacterShelter;                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleSeatConfig) == 0x000004, "Wrong alignment on FVehicleSeatConfig");
static_assert(sizeof(FVehicleSeatConfig) == 0x000014, "Wrong size on FVehicleSeatConfig");
static_assert(offsetof(FVehicleSeatConfig, m_ProvidedSeat) == 0x000000, "Member 'FVehicleSeatConfig::m_ProvidedSeat' has a wrong offset!");
static_assert(offsetof(FVehicleSeatConfig, m_bOverrideProtectionSettings) == 0x000008, "Member 'FVehicleSeatConfig::m_bOverrideProtectionSettings' has a wrong offset!");
static_assert(offsetof(FVehicleSeatConfig, m_RadiationMitigation) == 0x00000C, "Member 'FVehicleSeatConfig::m_RadiationMitigation' has a wrong offset!");
static_assert(offsetof(FVehicleSeatConfig, m_SeatedCharacterShelter) == 0x000010, "Member 'FVehicleSeatConfig::m_SeatedCharacterShelter' has a wrong offset!");

// ScriptStruct DuneSandbox.OrnithopterLocomotionSettings
// 0x0008 (0x0008 - 0x0000)
struct FOrnithopterLocomotionSettings final
{
public:
	class UOrnithopterLocomotionModifierDataAsset* m_LocomotionModifierDataAsset;                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrnithopterLocomotionSettings) == 0x000008, "Wrong alignment on FOrnithopterLocomotionSettings");
static_assert(sizeof(FOrnithopterLocomotionSettings) == 0x000008, "Wrong size on FOrnithopterLocomotionSettings");
static_assert(offsetof(FOrnithopterLocomotionSettings, m_LocomotionModifierDataAsset) == 0x000000, "Member 'FOrnithopterLocomotionSettings::m_LocomotionModifierDataAsset' has a wrong offset!");

// ScriptStruct DuneSandbox.EVehicleModuleSubType
// 0x0000 (0x0008 - 0x0008)
struct FEVehicleModuleSubType final : public FStringEnumValue
{
};
static_assert(alignof(FEVehicleModuleSubType) == 0x000004, "Wrong alignment on FEVehicleModuleSubType");
static_assert(sizeof(FEVehicleModuleSubType) == 0x000008, "Wrong size on FEVehicleModuleSubType");

// ScriptStruct DuneSandbox.VehicleAbility
// 0x0014 (0x0014 - 0x0000)
struct FVehicleAbility final
{
public:
	struct FEItemTemplateID                       TemplateId;                                        // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SeatName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AbilityIndex;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleAbility) == 0x000004, "Wrong alignment on FVehicleAbility");
static_assert(sizeof(FVehicleAbility) == 0x000014, "Wrong size on FVehicleAbility");
static_assert(offsetof(FVehicleAbility, TemplateId) == 0x000000, "Member 'FVehicleAbility::TemplateId' has a wrong offset!");
static_assert(offsetof(FVehicleAbility, SeatName) == 0x000008, "Member 'FVehicleAbility::SeatName' has a wrong offset!");
static_assert(offsetof(FVehicleAbility, AbilityIndex) == 0x000010, "Member 'FVehicleAbility::AbilityIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.PowerAndHeatSettings
// 0x0014 (0x0014 - 0x0000)
struct FPowerAndHeatSettings final
{
public:
	float                                         PowerConsumptionPerSecond;                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerConsumptionModifier;                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerConsumptionInstant;                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetHeatIncrease;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeatAddedInstant;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerAndHeatSettings) == 0x000004, "Wrong alignment on FPowerAndHeatSettings");
static_assert(sizeof(FPowerAndHeatSettings) == 0x000014, "Wrong size on FPowerAndHeatSettings");
static_assert(offsetof(FPowerAndHeatSettings, PowerConsumptionPerSecond) == 0x000000, "Member 'FPowerAndHeatSettings::PowerConsumptionPerSecond' has a wrong offset!");
static_assert(offsetof(FPowerAndHeatSettings, PowerConsumptionModifier) == 0x000004, "Member 'FPowerAndHeatSettings::PowerConsumptionModifier' has a wrong offset!");
static_assert(offsetof(FPowerAndHeatSettings, PowerConsumptionInstant) == 0x000008, "Member 'FPowerAndHeatSettings::PowerConsumptionInstant' has a wrong offset!");
static_assert(offsetof(FPowerAndHeatSettings, TargetHeatIncrease) == 0x00000C, "Member 'FPowerAndHeatSettings::TargetHeatIncrease' has a wrong offset!");
static_assert(offsetof(FPowerAndHeatSettings, HeatAddedInstant) == 0x000010, "Member 'FPowerAndHeatSettings::HeatAddedInstant' has a wrong offset!");

// ScriptStruct DuneSandbox.DamageMitigationMap
// 0x0050 (0x0050 - 0x0000)
struct FDamageMitigationMap final
{
public:
	TMap<struct FEDamageMitigationFloatStatID, float> DamageMitigationStats;                         // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageMitigationMap) == 0x000008, "Wrong alignment on FDamageMitigationMap");
static_assert(sizeof(FDamageMitigationMap) == 0x000050, "Wrong size on FDamageMitigationMap");
static_assert(offsetof(FDamageMitigationMap, DamageMitigationStats) == 0x000000, "Member 'FDamageMitigationMap::DamageMitigationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleComponent
// 0x02D8 (0x02D8 - 0x0000)
struct FVehicleModuleComponent final
{
public:
	struct FEVehicleModuleTemplateID              TemplateId;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              DatabaseId;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueID;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	EVehicleModuleType                            VehicleModuleType;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEVehicleModuleSubType                 VehicleModuleSubType;                              // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleModuleClass                           VehicleModuleClass;                                // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleModel                                 VehicleModel;                                      // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleClass                                 VehicleClass;                                      // 0x002E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleBrand                                 VehicleBrand;                                      // 0x002F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVehicleSeatConfig>             ProvidedSeatConfigs;                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FVehicleAbility>                AbilityItems;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         NumInventorySlots;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxInventoryVolume;                              // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AssemblyHitpoints;                               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GlobalSpeedMultiplier;                           // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Health;                                            // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalStateHealth;                               // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CriticalStateDamageTickRate;                     // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CriticalStateDamagePerTick;                      // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDuneDamageType>            m_CriticalStateContinuousDmgTypeClass;             // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FuelCapacity;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOrnithopterEngineSettings             m_OrnithoperEngineConfig;                          // 0x0080(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGroundVehicleEngineSettings           m_GroundVehicleEngineConfig;                       // 0x00C8(0x0128)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_BrokenEnginePowerModifier;                       // 0x01F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SandwormEngineThreatPerSecond;                   // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOrnithopterLocomotionSettings         m_OrnithoperLocomotionConfig;                      // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FWheelLocomotionSettings>       m_WheelLocomotionConfigs;                          // 0x0200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_SandwormVehicleThreatPerSecond;                  // 0x0210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerAndHeatSettings                  m_PowerAndHeatConfig;                              // 0x0214(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UDamageMitigationDataAsset*             DamageMitigationDataAsset;                         // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FEDamageMitigationFloatStatID, float> DamageMitigationStats;                         // 0x0230(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EOrnithopterFlightMode, struct FDamageMitigationMap> OrnithopterFlightModeDamageMitigation; // 0x0280(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         ArmorValue;                                        // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleModuleComponent) == 0x000008, "Wrong alignment on FVehicleModuleComponent");
static_assert(sizeof(FVehicleModuleComponent) == 0x0002D8, "Wrong size on FVehicleModuleComponent");
static_assert(offsetof(FVehicleModuleComponent, TemplateId) == 0x000000, "Member 'FVehicleModuleComponent::TemplateId' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, DatabaseId) == 0x000008, "Member 'FVehicleModuleComponent::DatabaseId' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, UniqueID) == 0x000010, "Member 'FVehicleModuleComponent::UniqueID' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, VehicleModuleType) == 0x000020, "Member 'FVehicleModuleComponent::VehicleModuleType' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, VehicleModuleSubType) == 0x000024, "Member 'FVehicleModuleComponent::VehicleModuleSubType' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, VehicleModuleClass) == 0x00002C, "Member 'FVehicleModuleComponent::VehicleModuleClass' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, VehicleModel) == 0x00002D, "Member 'FVehicleModuleComponent::VehicleModel' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, VehicleClass) == 0x00002E, "Member 'FVehicleModuleComponent::VehicleClass' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, VehicleBrand) == 0x00002F, "Member 'FVehicleModuleComponent::VehicleBrand' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, ProvidedSeatConfigs) == 0x000030, "Member 'FVehicleModuleComponent::ProvidedSeatConfigs' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, AbilityItems) == 0x000040, "Member 'FVehicleModuleComponent::AbilityItems' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, NumInventorySlots) == 0x000050, "Member 'FVehicleModuleComponent::NumInventorySlots' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_MaxInventoryVolume) == 0x000054, "Member 'FVehicleModuleComponent::m_MaxInventoryVolume' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_AssemblyHitpoints) == 0x000058, "Member 'FVehicleModuleComponent::m_AssemblyHitpoints' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_GlobalSpeedMultiplier) == 0x00005C, "Member 'FVehicleModuleComponent::m_GlobalSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, Health) == 0x000060, "Member 'FVehicleModuleComponent::Health' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, CriticalStateHealth) == 0x000064, "Member 'FVehicleModuleComponent::CriticalStateHealth' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_CriticalStateDamageTickRate) == 0x000068, "Member 'FVehicleModuleComponent::m_CriticalStateDamageTickRate' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_CriticalStateDamagePerTick) == 0x00006C, "Member 'FVehicleModuleComponent::m_CriticalStateDamagePerTick' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_CriticalStateContinuousDmgTypeClass) == 0x000070, "Member 'FVehicleModuleComponent::m_CriticalStateContinuousDmgTypeClass' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_FuelCapacity) == 0x000078, "Member 'FVehicleModuleComponent::m_FuelCapacity' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_OrnithoperEngineConfig) == 0x000080, "Member 'FVehicleModuleComponent::m_OrnithoperEngineConfig' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_GroundVehicleEngineConfig) == 0x0000C8, "Member 'FVehicleModuleComponent::m_GroundVehicleEngineConfig' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_BrokenEnginePowerModifier) == 0x0001F0, "Member 'FVehicleModuleComponent::m_BrokenEnginePowerModifier' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_SandwormEngineThreatPerSecond) == 0x0001F4, "Member 'FVehicleModuleComponent::m_SandwormEngineThreatPerSecond' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_OrnithoperLocomotionConfig) == 0x0001F8, "Member 'FVehicleModuleComponent::m_OrnithoperLocomotionConfig' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_WheelLocomotionConfigs) == 0x000200, "Member 'FVehicleModuleComponent::m_WheelLocomotionConfigs' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_SandwormVehicleThreatPerSecond) == 0x000210, "Member 'FVehicleModuleComponent::m_SandwormVehicleThreatPerSecond' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, m_PowerAndHeatConfig) == 0x000214, "Member 'FVehicleModuleComponent::m_PowerAndHeatConfig' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, DamageMitigationDataAsset) == 0x000228, "Member 'FVehicleModuleComponent::DamageMitigationDataAsset' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, DamageMitigationStats) == 0x000230, "Member 'FVehicleModuleComponent::DamageMitigationStats' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, OrnithopterFlightModeDamageMitigation) == 0x000280, "Member 'FVehicleModuleComponent::OrnithopterFlightModeDamageMitigation' has a wrong offset!");
static_assert(offsetof(FVehicleModuleComponent, ArmorValue) == 0x0002D0, "Member 'FVehicleModuleComponent::ArmorValue' has a wrong offset!");

// ScriptStruct DuneSandbox.CustomizationStats
// 0x0014 (0x0014 - 0x0000)
struct FCustomizationStats final
{
public:
	class FName                                   VariantId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwatchId;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanShowVariant;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanShowSwatch;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationStats) == 0x000004, "Wrong alignment on FCustomizationStats");
static_assert(sizeof(FCustomizationStats) == 0x000014, "Wrong size on FCustomizationStats");
static_assert(offsetof(FCustomizationStats, VariantId) == 0x000000, "Member 'FCustomizationStats::VariantId' has a wrong offset!");
static_assert(offsetof(FCustomizationStats, SwatchId) == 0x000008, "Member 'FCustomizationStats::SwatchId' has a wrong offset!");
static_assert(offsetof(FCustomizationStats, bCanShowVariant) == 0x000010, "Member 'FCustomizationStats::bCanShowVariant' has a wrong offset!");
static_assert(offsetof(FCustomizationStats, bCanShowSwatch) == 0x000011, "Member 'FCustomizationStats::bCanShowSwatch' has a wrong offset!");

// ScriptStruct DuneSandbox.BaseVehicleModuleTableRow
// 0x0590 (0x05A0 - 0x0010)
struct FBaseVehicleModuleTableRow final : public FTableRowBase
{
public:
	struct FEItemTemplateID                       m_ItemTemplate;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_CreatePhysicsState;                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_BonesExcludedFromPhysicsState;                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVehicleModuleOptimizationSettings     m_OptimizationSettings;                            // 0x0030(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   m_MeshComponentName;                               // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             m_StaticMesh;                                      // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             m_BrokenModuleStaticMesh;                          // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             m_StaticWeaponCollisionOverride;                   // 0x00C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           m_BrokenModuleSkeletalMesh;                        // 0x00F0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           m_SkeletalMesh;                                    // 0x0120(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UStaticMesh>> m_SkeletalWeaponCollisionMeshOverrides;     // 0x0150(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FVehicleModuleMeshInfo>         m_ExtensionMeshes;                                 // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVehicleModuleMeshInfo>         m_ShieldMeshes;                                    // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVehicleModuleMeshInfo>         m_AssemblySuspensorEffectMeshes;                   // 0x01C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_AnimClass;                                       // 0x01D0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UMaterialInterface>> m_Materials;                         // 0x0200(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FVehicleModuleComponent                m_StaticData;                                      // 0x0250(0x02D8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVehicleModuleDurabilityStats          m_DurabilityStats;                                 // 0x0528(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCustomizationStats                    m_CustomizationStats;                              // 0x0588(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_59C[0x4];                                      // 0x059C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseVehicleModuleTableRow) == 0x000008, "Wrong alignment on FBaseVehicleModuleTableRow");
static_assert(sizeof(FBaseVehicleModuleTableRow) == 0x0005A0, "Wrong size on FBaseVehicleModuleTableRow");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_ItemTemplate) == 0x000010, "Member 'FBaseVehicleModuleTableRow::m_ItemTemplate' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_CreatePhysicsState) == 0x000018, "Member 'FBaseVehicleModuleTableRow::m_CreatePhysicsState' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_BonesExcludedFromPhysicsState) == 0x000020, "Member 'FBaseVehicleModuleTableRow::m_BonesExcludedFromPhysicsState' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_OptimizationSettings) == 0x000030, "Member 'FBaseVehicleModuleTableRow::m_OptimizationSettings' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_MeshComponentName) == 0x000054, "Member 'FBaseVehicleModuleTableRow::m_MeshComponentName' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_StaticMesh) == 0x000060, "Member 'FBaseVehicleModuleTableRow::m_StaticMesh' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_BrokenModuleStaticMesh) == 0x000090, "Member 'FBaseVehicleModuleTableRow::m_BrokenModuleStaticMesh' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_StaticWeaponCollisionOverride) == 0x0000C0, "Member 'FBaseVehicleModuleTableRow::m_StaticWeaponCollisionOverride' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_BrokenModuleSkeletalMesh) == 0x0000F0, "Member 'FBaseVehicleModuleTableRow::m_BrokenModuleSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_SkeletalMesh) == 0x000120, "Member 'FBaseVehicleModuleTableRow::m_SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_SkeletalWeaponCollisionMeshOverrides) == 0x000150, "Member 'FBaseVehicleModuleTableRow::m_SkeletalWeaponCollisionMeshOverrides' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_ExtensionMeshes) == 0x0001A0, "Member 'FBaseVehicleModuleTableRow::m_ExtensionMeshes' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_ShieldMeshes) == 0x0001B0, "Member 'FBaseVehicleModuleTableRow::m_ShieldMeshes' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_AssemblySuspensorEffectMeshes) == 0x0001C0, "Member 'FBaseVehicleModuleTableRow::m_AssemblySuspensorEffectMeshes' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_AnimClass) == 0x0001D0, "Member 'FBaseVehicleModuleTableRow::m_AnimClass' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_Materials) == 0x000200, "Member 'FBaseVehicleModuleTableRow::m_Materials' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_StaticData) == 0x000250, "Member 'FBaseVehicleModuleTableRow::m_StaticData' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_DurabilityStats) == 0x000528, "Member 'FBaseVehicleModuleTableRow::m_DurabilityStats' has a wrong offset!");
static_assert(offsetof(FBaseVehicleModuleTableRow, m_CustomizationStats) == 0x000588, "Member 'FBaseVehicleModuleTableRow::m_CustomizationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.GameItemDefaultCustomization
// 0x0010 (0x0010 - 0x0000)
struct FGameItemDefaultCustomization final
{
public:
	class UCustomizationMaterialData*             MaterialData;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomizationDyePackData*              DyePack;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameItemDefaultCustomization) == 0x000008, "Wrong alignment on FGameItemDefaultCustomization");
static_assert(sizeof(FGameItemDefaultCustomization) == 0x000010, "Wrong size on FGameItemDefaultCustomization");
static_assert(offsetof(FGameItemDefaultCustomization, MaterialData) == 0x000000, "Member 'FGameItemDefaultCustomization::MaterialData' has a wrong offset!");
static_assert(offsetof(FGameItemDefaultCustomization, DyePack) == 0x000008, "Member 'FGameItemDefaultCustomization::DyePack' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleWeaponInfo
// 0x0010 (0x0010 - 0x0000)
struct FVehicleWeaponInfo final
{
public:
	EVehicleModuleType                            ModuleType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeaponActorComponent*                  WeaponActorComponent;                              // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleWeaponInfo) == 0x000008, "Wrong alignment on FVehicleWeaponInfo");
static_assert(sizeof(FVehicleWeaponInfo) == 0x000010, "Wrong size on FVehicleWeaponInfo");
static_assert(offsetof(FVehicleWeaponInfo, ModuleType) == 0x000000, "Member 'FVehicleWeaponInfo::ModuleType' has a wrong offset!");
static_assert(offsetof(FVehicleWeaponInfo, WeaponActorComponent) == 0x000008, "Member 'FVehicleWeaponInfo::WeaponActorComponent' has a wrong offset!");

// ScriptStruct DuneSandbox.EItemStatID
// 0x0000 (0x0008 - 0x0008)
struct FEItemStatID : public FStringEnumValue
{
};
static_assert(alignof(FEItemStatID) == 0x000004, "Wrong alignment on FEItemStatID");
static_assert(sizeof(FEItemStatID) == 0x000008, "Wrong size on FEItemStatID");

// ScriptStruct DuneSandbox.EItemStatIdProject
// 0x0000 (0x0008 - 0x0008)
struct FEItemStatIdProject final : public FEItemStatID
{
};
static_assert(alignof(FEItemStatIdProject) == 0x000004, "Wrong alignment on FEItemStatIdProject");
static_assert(sizeof(FEItemStatIdProject) == 0x000008, "Wrong size on FEItemStatIdProject");

// ScriptStruct DuneSandbox.LootTableNumericalStat
// 0x0018 (0x0018 - 0x0000)
struct FLootTableNumericalStat final
{
public:
	struct FEItemStatIdProject                    StatId;                                            // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Minimum;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Maximum;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootTableNumericalStat) == 0x000008, "Wrong alignment on FLootTableNumericalStat");
static_assert(sizeof(FLootTableNumericalStat) == 0x000018, "Wrong size on FLootTableNumericalStat");
static_assert(offsetof(FLootTableNumericalStat, StatId) == 0x000000, "Member 'FLootTableNumericalStat::StatId' has a wrong offset!");
static_assert(offsetof(FLootTableNumericalStat, Minimum) == 0x000008, "Member 'FLootTableNumericalStat::Minimum' has a wrong offset!");
static_assert(offsetof(FLootTableNumericalStat, Maximum) == 0x000010, "Member 'FLootTableNumericalStat::Maximum' has a wrong offset!");

// ScriptStruct DuneSandbox.BaseLootTableRow
// 0x0108 (0x0118 - 0x0010)
struct FBaseLootTableRow : public FTableRowBase
{
public:
	struct FEItemTemplateID                       ItemTemplateId;                                    // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      ItemTagsFilter;                                    // 0x0018(0x0048)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLootTableNumericalStat>        NumericalStats;                                    // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LootTable;                                         // 0x0070(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LootWeightedTable;                                 // 0x00A0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x00D0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ForbiddenTags;                                     // 0x00F0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ELootTableItemVariety                         Variety;                                           // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseLootTableRow) == 0x000008, "Wrong alignment on FBaseLootTableRow");
static_assert(sizeof(FBaseLootTableRow) == 0x000118, "Wrong size on FBaseLootTableRow");
static_assert(offsetof(FBaseLootTableRow, ItemTemplateId) == 0x000010, "Member 'FBaseLootTableRow::ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FBaseLootTableRow, ItemTagsFilter) == 0x000018, "Member 'FBaseLootTableRow::ItemTagsFilter' has a wrong offset!");
static_assert(offsetof(FBaseLootTableRow, NumericalStats) == 0x000060, "Member 'FBaseLootTableRow::NumericalStats' has a wrong offset!");
static_assert(offsetof(FBaseLootTableRow, LootTable) == 0x000070, "Member 'FBaseLootTableRow::LootTable' has a wrong offset!");
static_assert(offsetof(FBaseLootTableRow, LootWeightedTable) == 0x0000A0, "Member 'FBaseLootTableRow::LootWeightedTable' has a wrong offset!");
static_assert(offsetof(FBaseLootTableRow, RequiredTags) == 0x0000D0, "Member 'FBaseLootTableRow::RequiredTags' has a wrong offset!");
static_assert(offsetof(FBaseLootTableRow, ForbiddenTags) == 0x0000F0, "Member 'FBaseLootTableRow::ForbiddenTags' has a wrong offset!");
static_assert(offsetof(FBaseLootTableRow, Variety) == 0x000110, "Member 'FBaseLootTableRow::Variety' has a wrong offset!");

// ScriptStruct DuneSandbox.LootTableRow
// 0x0008 (0x0120 - 0x0118)
struct FLootTableRow final : public FBaseLootTableRow
{
public:
	int32                                         NumRolls;                                          // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentageChance;                                  // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootTableRow) == 0x000008, "Wrong alignment on FLootTableRow");
static_assert(sizeof(FLootTableRow) == 0x000120, "Wrong size on FLootTableRow");
static_assert(offsetof(FLootTableRow, NumRolls) == 0x000118, "Member 'FLootTableRow::NumRolls' has a wrong offset!");
static_assert(offsetof(FLootTableRow, PercentageChance) == 0x00011C, "Member 'FLootTableRow::PercentageChance' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractRewardItemStats
// 0x0008 (0x0008 - 0x0000)
struct FContractRewardItemStats final
{
public:
	struct FEContractName                         RewardsContractName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractRewardItemStats) == 0x000004, "Wrong alignment on FContractRewardItemStats");
static_assert(sizeof(FContractRewardItemStats) == 0x000008, "Wrong size on FContractRewardItemStats");
static_assert(offsetof(FContractRewardItemStats, RewardsContractName) == 0x000000, "Member 'FContractRewardItemStats::RewardsContractName' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractRewardItemTableRow
// 0x0008 (0x0018 - 0x0010)
struct FContractRewardItemTableRow final : public FTableRowBase
{
public:
	struct FContractRewardItemStats               ContractRewardItemStats;                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractRewardItemTableRow) == 0x000008, "Wrong alignment on FContractRewardItemTableRow");
static_assert(sizeof(FContractRewardItemTableRow) == 0x000018, "Wrong size on FContractRewardItemTableRow");
static_assert(offsetof(FContractRewardItemTableRow, ContractRewardItemStats) == 0x000010, "Member 'FContractRewardItemTableRow::ContractRewardItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.PerPlayerLorePickupData
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FPerPlayerLorePickupData final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerPlayerLorePickupData) == 0x000010, "Wrong alignment on FPerPlayerLorePickupData");
static_assert(sizeof(FPerPlayerLorePickupData) == 0x0000F0, "Wrong size on FPerPlayerLorePickupData");

// ScriptStruct DuneSandbox.PermissionDatabaseEventDestroy
// 0x0008 (0x0008 - 0x0000)
struct FPermissionDatabaseEventDestroy final
{
public:
	int64                                         ActorId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermissionDatabaseEventDestroy) == 0x000008, "Wrong alignment on FPermissionDatabaseEventDestroy");
static_assert(sizeof(FPermissionDatabaseEventDestroy) == 0x000008, "Wrong size on FPermissionDatabaseEventDestroy");
static_assert(offsetof(FPermissionDatabaseEventDestroy, ActorId) == 0x000000, "Member 'FPermissionDatabaseEventDestroy::ActorId' has a wrong offset!");

// ScriptStruct DuneSandbox.UnlockedCustomizationSerializerItem
// 0x0008 (0x0014 - 0x000C)
struct FUnlockedCustomizationSerializerItem final : public FFastArraySerializerItem
{
public:
	class FName                                   m_CustomizationId;                                 // 0x000C(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnlockedCustomizationSerializerItem) == 0x000004, "Wrong alignment on FUnlockedCustomizationSerializerItem");
static_assert(sizeof(FUnlockedCustomizationSerializerItem) == 0x000014, "Wrong size on FUnlockedCustomizationSerializerItem");
static_assert(offsetof(FUnlockedCustomizationSerializerItem, m_CustomizationId) == 0x00000C, "Member 'FUnlockedCustomizationSerializerItem::m_CustomizationId' has a wrong offset!");

// ScriptStruct DuneSandbox.UnlockedCustomizationSerializableList
// 0x0040 (0x0168 - 0x0128)
struct FUnlockedCustomizationSerializableList final : public FFastArraySerializer
{
public:
	uint8                                         Pad_128[0x30];                                     // 0x0128(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUnlockedCustomizationSerializerItem> m_UnlockedCustomizationIds;                  // 0x0158(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FUnlockedCustomizationSerializableList) == 0x000008, "Wrong alignment on FUnlockedCustomizationSerializableList");
static_assert(sizeof(FUnlockedCustomizationSerializableList) == 0x000168, "Wrong size on FUnlockedCustomizationSerializableList");
static_assert(offsetof(FUnlockedCustomizationSerializableList, m_UnlockedCustomizationIds) == 0x000158, "Member 'FUnlockedCustomizationSerializableList::m_UnlockedCustomizationIds' has a wrong offset!");

// ScriptStruct DuneSandbox.ProximityChatIncomingComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FProximityChatIncomingComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProximityChatIncomingComponent) == 0x000008, "Wrong alignment on FProximityChatIncomingComponent");
static_assert(sizeof(FProximityChatIncomingComponent) == 0x000010, "Wrong size on FProximityChatIncomingComponent");

// ScriptStruct DuneSandbox.ScanAnalysisResult
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x02) FScanAnalysisResult final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScanAnalysisResult) == 0x000002, "Wrong alignment on FScanAnalysisResult");
static_assert(sizeof(FScanAnalysisResult) == 0x000004, "Wrong size on FScanAnalysisResult");

// ScriptStruct DuneSandbox.MarkerId
// 0x0004 (0x0004 - 0x0000)
struct FMarkerId final
{
public:
	int32                                         m_UniqueId;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMarkerId) == 0x000004, "Wrong alignment on FMarkerId");
static_assert(sizeof(FMarkerId) == 0x000004, "Wrong size on FMarkerId");
static_assert(offsetof(FMarkerId, m_UniqueId) == 0x000000, "Member 'FMarkerId::m_UniqueId' has a wrong offset!");

// ScriptStruct DuneSandbox.MapMarkerSPSItem
// 0x008C (0x0098 - 0x000C)
struct FMapMarkerSPSItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEntityId                              m_EntityId;                                        // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActorInstanceHandle                   m_ActorHandle;                                     // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FScanAnalysisResult>            m_AnalysisData;                                    // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_bIsAnalyzed;                                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsClientDynamicMarker;                          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEMapMarker                            m_MarkerType;                                      // 0x0044(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         m_LOD;                                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_bIsNewMarker;                                    // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_WorldPosition;                                   // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         m_RotationRadians;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C[0x14];                                      // 0x006C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	EMarkerPayloadType                            m_MarkerPayloadType;                               // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              m_UniqueSubId;                                     // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMarkerId                              m_MarkerId;                                        // 0x0090(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapMarkerSPSItem) == 0x000008, "Wrong alignment on FMapMarkerSPSItem");
static_assert(sizeof(FMapMarkerSPSItem) == 0x000098, "Wrong size on FMapMarkerSPSItem");
static_assert(offsetof(FMapMarkerSPSItem, m_EntityId) == 0x000010, "Member 'FMapMarkerSPSItem::m_EntityId' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_ActorHandle) == 0x000018, "Member 'FMapMarkerSPSItem::m_ActorHandle' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_AnalysisData) == 0x000030, "Member 'FMapMarkerSPSItem::m_AnalysisData' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_bIsAnalyzed) == 0x000040, "Member 'FMapMarkerSPSItem::m_bIsAnalyzed' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_bIsClientDynamicMarker) == 0x000041, "Member 'FMapMarkerSPSItem::m_bIsClientDynamicMarker' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_MarkerType) == 0x000044, "Member 'FMapMarkerSPSItem::m_MarkerType' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_LOD) == 0x00004C, "Member 'FMapMarkerSPSItem::m_LOD' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_bIsNewMarker) == 0x00004D, "Member 'FMapMarkerSPSItem::m_bIsNewMarker' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_WorldPosition) == 0x000050, "Member 'FMapMarkerSPSItem::m_WorldPosition' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_RotationRadians) == 0x000068, "Member 'FMapMarkerSPSItem::m_RotationRadians' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_MarkerPayloadType) == 0x000080, "Member 'FMapMarkerSPSItem::m_MarkerPayloadType' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_UniqueSubId) == 0x000088, "Member 'FMapMarkerSPSItem::m_UniqueSubId' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPSItem, m_MarkerId) == 0x000090, "Member 'FMapMarkerSPSItem::m_MarkerId' has a wrong offset!");

// ScriptStruct DuneSandbox.ESolidFuelItemId
// 0x0000 (0x0008 - 0x0008)
struct FESolidFuelItemId final : public FStringEnumValue
{
};
static_assert(alignof(FESolidFuelItemId) == 0x000004, "Wrong alignment on FESolidFuelItemId");
static_assert(sizeof(FESolidFuelItemId) == 0x000008, "Wrong size on FESolidFuelItemId");

// ScriptStruct DuneSandbox.FuelPoweredPlaceableComponent
// 0x0014 (0x0014 - 0x0000)
struct FFuelPoweredPlaceableComponent final
{
public:
	struct FESolidFuelItemId                      m_FuelBurningId;                                   // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FuelBurningInitialTime;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FuelBurningDuration;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FuelBurningPassedTimeSinceStart;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFuelPoweredPlaceableComponent) == 0x000004, "Wrong alignment on FFuelPoweredPlaceableComponent");
static_assert(sizeof(FFuelPoweredPlaceableComponent) == 0x000014, "Wrong size on FFuelPoweredPlaceableComponent");
static_assert(offsetof(FFuelPoweredPlaceableComponent, m_FuelBurningId) == 0x000000, "Member 'FFuelPoweredPlaceableComponent::m_FuelBurningId' has a wrong offset!");
static_assert(offsetof(FFuelPoweredPlaceableComponent, m_FuelBurningInitialTime) == 0x000008, "Member 'FFuelPoweredPlaceableComponent::m_FuelBurningInitialTime' has a wrong offset!");
static_assert(offsetof(FFuelPoweredPlaceableComponent, m_FuelBurningDuration) == 0x00000C, "Member 'FFuelPoweredPlaceableComponent::m_FuelBurningDuration' has a wrong offset!");
static_assert(offsetof(FFuelPoweredPlaceableComponent, m_FuelBurningPassedTimeSinceStart) == 0x000010, "Member 'FFuelPoweredPlaceableComponent::m_FuelBurningPassedTimeSinceStart' has a wrong offset!");

// ScriptStruct DuneSandbox.DebugNodePath
// 0x0010 (0x0010 - 0x0000)
struct FDebugNodePath final
{
public:
	struct FIntPoint                              Start;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              End;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugNodePath) == 0x000004, "Wrong alignment on FDebugNodePath");
static_assert(sizeof(FDebugNodePath) == 0x000010, "Wrong size on FDebugNodePath");
static_assert(offsetof(FDebugNodePath, Start) == 0x000000, "Member 'FDebugNodePath::Start' has a wrong offset!");
static_assert(offsetof(FDebugNodePath, End) == 0x000008, "Member 'FDebugNodePath::End' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleAbilityStats
// 0x0030 (0x0030 - 0x0000)
struct FVehicleAbilityStats final
{
public:
	TSoftClassPtr<class UClass>                   VehicleAbilityRef;                                 // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleAbilityStats) == 0x000008, "Wrong alignment on FVehicleAbilityStats");
static_assert(sizeof(FVehicleAbilityStats) == 0x000030, "Wrong size on FVehicleAbilityStats");
static_assert(offsetof(FVehicleAbilityStats, VehicleAbilityRef) == 0x000000, "Member 'FVehicleAbilityStats::VehicleAbilityRef' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleAbilityStatsComponent_BlueprintWrapper
// 0x00B0 (0x00B0 - 0x0000)
struct FVehicleAbilityStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleAbilityStats                   VehicleAbilityStats;                               // 0x0080(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleAbilityStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FVehicleAbilityStatsComponent_BlueprintWrapper");
static_assert(sizeof(FVehicleAbilityStatsComponent_BlueprintWrapper) == 0x0000B0, "Wrong size on FVehicleAbilityStatsComponent_BlueprintWrapper");
static_assert(offsetof(FVehicleAbilityStatsComponent_BlueprintWrapper, VehicleAbilityStats) == 0x000080, "Member 'FVehicleAbilityStatsComponent_BlueprintWrapper::VehicleAbilityStats' has a wrong offset!");

// ScriptStruct DuneSandbox.DialogueNode
// 0x0138 (0x0138 - 0x0000)
struct FDialogueNode final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NodeID;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bPlayerNode;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Links;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UDialogueEvent*>                 Events;                                            // 0x0038(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDialogueConditionContainer*            ConditionContainer;                                // 0x0048(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDialogueTag*>                   Tags;                                              // 0x0050(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UDialogueVariable*>              Variables;                                         // 0x0060(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           AudioEvent;                                        // 0x0070(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           Animation;                                         // 0x00A0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          Camera;                                            // 0x00D0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueWidgetSettings                WidgetSettings;                                    // 0x0100(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowCancelDialogue;                              // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCriticalNode;                                   // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoRangeChecks;                                    // 0x0132(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueNode) == 0x000008, "Wrong alignment on FDialogueNode");
static_assert(sizeof(FDialogueNode) == 0x000138, "Wrong size on FDialogueNode");
static_assert(offsetof(FDialogueNode, ID) == 0x000000, "Member 'FDialogueNode::ID' has a wrong offset!");
static_assert(offsetof(FDialogueNode, NodeID) == 0x000004, "Member 'FDialogueNode::NodeID' has a wrong offset!");
static_assert(offsetof(FDialogueNode, Text) == 0x000008, "Member 'FDialogueNode::Text' has a wrong offset!");
static_assert(offsetof(FDialogueNode, bPlayerNode) == 0x000020, "Member 'FDialogueNode::bPlayerNode' has a wrong offset!");
static_assert(offsetof(FDialogueNode, Links) == 0x000028, "Member 'FDialogueNode::Links' has a wrong offset!");
static_assert(offsetof(FDialogueNode, Events) == 0x000038, "Member 'FDialogueNode::Events' has a wrong offset!");
static_assert(offsetof(FDialogueNode, ConditionContainer) == 0x000048, "Member 'FDialogueNode::ConditionContainer' has a wrong offset!");
static_assert(offsetof(FDialogueNode, Tags) == 0x000050, "Member 'FDialogueNode::Tags' has a wrong offset!");
static_assert(offsetof(FDialogueNode, Variables) == 0x000060, "Member 'FDialogueNode::Variables' has a wrong offset!");
static_assert(offsetof(FDialogueNode, AudioEvent) == 0x000070, "Member 'FDialogueNode::AudioEvent' has a wrong offset!");
static_assert(offsetof(FDialogueNode, Animation) == 0x0000A0, "Member 'FDialogueNode::Animation' has a wrong offset!");
static_assert(offsetof(FDialogueNode, Camera) == 0x0000D0, "Member 'FDialogueNode::Camera' has a wrong offset!");
static_assert(offsetof(FDialogueNode, WidgetSettings) == 0x000100, "Member 'FDialogueNode::WidgetSettings' has a wrong offset!");
static_assert(offsetof(FDialogueNode, bAllowCancelDialogue) == 0x000130, "Member 'FDialogueNode::bAllowCancelDialogue' has a wrong offset!");
static_assert(offsetof(FDialogueNode, bIsCriticalNode) == 0x000131, "Member 'FDialogueNode::bIsCriticalNode' has a wrong offset!");
static_assert(offsetof(FDialogueNode, bDoRangeChecks) == 0x000132, "Member 'FDialogueNode::bDoRangeChecks' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleAudioEvents
// 0x0100 (0x0100 - 0x0000)
struct FVehicleAudioEvents final
{
public:
	class UFcAudioEvent*                          m_Engine;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_EngineStart;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_EngineStop;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_Impact;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_MalfunctionStart;                                // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_MalfunctionStop;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_Destruction;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_Wheels;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_BoostStart;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_BoostStop;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_Attached;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_Detached;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_CriticalStateEntered;                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_CriticalStateEnded;                              // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_HeatWarning;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_PSUDisabled;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_AssemblyEntered;                                 // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_AssemblyFinished;                                // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ModuleAttached;                                  // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ModuleRemoved;                                   // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_RefuelStart;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_OutOfPower;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_PowerLow;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ShieldActivated;                                 // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ShieldDeactivated;                               // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ShieldActivateFail;                              // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ShieldHit;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ShieldHitMeleed;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ShieldDepleted;                                  // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ShieldLow;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ShieldRechargeStart;                             // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ShieldRechargeStop;                              // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleAudioEvents) == 0x000008, "Wrong alignment on FVehicleAudioEvents");
static_assert(sizeof(FVehicleAudioEvents) == 0x000100, "Wrong size on FVehicleAudioEvents");
static_assert(offsetof(FVehicleAudioEvents, m_Engine) == 0x000000, "Member 'FVehicleAudioEvents::m_Engine' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_EngineStart) == 0x000008, "Member 'FVehicleAudioEvents::m_EngineStart' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_EngineStop) == 0x000010, "Member 'FVehicleAudioEvents::m_EngineStop' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_Impact) == 0x000018, "Member 'FVehicleAudioEvents::m_Impact' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_MalfunctionStart) == 0x000020, "Member 'FVehicleAudioEvents::m_MalfunctionStart' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_MalfunctionStop) == 0x000028, "Member 'FVehicleAudioEvents::m_MalfunctionStop' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_Destruction) == 0x000030, "Member 'FVehicleAudioEvents::m_Destruction' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_Wheels) == 0x000038, "Member 'FVehicleAudioEvents::m_Wheels' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_BoostStart) == 0x000040, "Member 'FVehicleAudioEvents::m_BoostStart' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_BoostStop) == 0x000048, "Member 'FVehicleAudioEvents::m_BoostStop' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_Attached) == 0x000050, "Member 'FVehicleAudioEvents::m_Attached' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_Detached) == 0x000058, "Member 'FVehicleAudioEvents::m_Detached' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_CriticalStateEntered) == 0x000060, "Member 'FVehicleAudioEvents::m_CriticalStateEntered' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_CriticalStateEnded) == 0x000068, "Member 'FVehicleAudioEvents::m_CriticalStateEnded' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_HeatWarning) == 0x000070, "Member 'FVehicleAudioEvents::m_HeatWarning' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_PSUDisabled) == 0x000078, "Member 'FVehicleAudioEvents::m_PSUDisabled' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_AssemblyEntered) == 0x000080, "Member 'FVehicleAudioEvents::m_AssemblyEntered' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_AssemblyFinished) == 0x000088, "Member 'FVehicleAudioEvents::m_AssemblyFinished' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ModuleAttached) == 0x000090, "Member 'FVehicleAudioEvents::m_ModuleAttached' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ModuleRemoved) == 0x000098, "Member 'FVehicleAudioEvents::m_ModuleRemoved' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_RefuelStart) == 0x0000A0, "Member 'FVehicleAudioEvents::m_RefuelStart' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_OutOfPower) == 0x0000A8, "Member 'FVehicleAudioEvents::m_OutOfPower' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_PowerLow) == 0x0000B0, "Member 'FVehicleAudioEvents::m_PowerLow' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ShieldActivated) == 0x0000B8, "Member 'FVehicleAudioEvents::m_ShieldActivated' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ShieldDeactivated) == 0x0000C0, "Member 'FVehicleAudioEvents::m_ShieldDeactivated' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ShieldActivateFail) == 0x0000C8, "Member 'FVehicleAudioEvents::m_ShieldActivateFail' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ShieldHit) == 0x0000D0, "Member 'FVehicleAudioEvents::m_ShieldHit' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ShieldHitMeleed) == 0x0000D8, "Member 'FVehicleAudioEvents::m_ShieldHitMeleed' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ShieldDepleted) == 0x0000E0, "Member 'FVehicleAudioEvents::m_ShieldDepleted' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ShieldLow) == 0x0000E8, "Member 'FVehicleAudioEvents::m_ShieldLow' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ShieldRechargeStart) == 0x0000F0, "Member 'FVehicleAudioEvents::m_ShieldRechargeStart' has a wrong offset!");
static_assert(offsetof(FVehicleAudioEvents, m_ShieldRechargeStop) == 0x0000F8, "Member 'FVehicleAudioEvents::m_ShieldRechargeStop' has a wrong offset!");

// ScriptStruct DuneSandbox.ToolStalkInfo
// 0x0028 (0x0028 - 0x0000)
struct FToolStalkInfo final
{
public:
	class AToolStalk*                             ToolStalk;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    SourceComponent;                                   // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceInstance;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FToolStalkInfo) == 0x000008, "Wrong alignment on FToolStalkInfo");
static_assert(sizeof(FToolStalkInfo) == 0x000028, "Wrong size on FToolStalkInfo");
static_assert(offsetof(FToolStalkInfo, ToolStalk) == 0x000000, "Member 'FToolStalkInfo::ToolStalk' has a wrong offset!");
static_assert(offsetof(FToolStalkInfo, SourceActor) == 0x000008, "Member 'FToolStalkInfo::SourceActor' has a wrong offset!");
static_assert(offsetof(FToolStalkInfo, SourceComponent) == 0x000010, "Member 'FToolStalkInfo::SourceComponent' has a wrong offset!");
static_assert(offsetof(FToolStalkInfo, SourceInstance) == 0x000018, "Member 'FToolStalkInfo::SourceInstance' has a wrong offset!");
static_assert(offsetof(FToolStalkInfo, Priority) == 0x00001C, "Member 'FToolStalkInfo::Priority' has a wrong offset!");
static_assert(offsetof(FToolStalkInfo, bIsActive) == 0x000020, "Member 'FToolStalkInfo::bIsActive' has a wrong offset!");

// ScriptStruct DuneSandbox.UpdateNpeMarkerBehaviourData
// 0x0003 (0x0003 - 0x0000)
struct FUpdateNpeMarkerBehaviourData final
{
public:
	bool                                          bUpdateMarker;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateOnlyIfHigherDiscoveryLevel;                 // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarkerDiscoveryLevel                         NewDiscoveryLevel;                                 // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateNpeMarkerBehaviourData) == 0x000001, "Wrong alignment on FUpdateNpeMarkerBehaviourData");
static_assert(sizeof(FUpdateNpeMarkerBehaviourData) == 0x000003, "Wrong size on FUpdateNpeMarkerBehaviourData");
static_assert(offsetof(FUpdateNpeMarkerBehaviourData, bUpdateMarker) == 0x000000, "Member 'FUpdateNpeMarkerBehaviourData::bUpdateMarker' has a wrong offset!");
static_assert(offsetof(FUpdateNpeMarkerBehaviourData, bUpdateOnlyIfHigherDiscoveryLevel) == 0x000001, "Member 'FUpdateNpeMarkerBehaviourData::bUpdateOnlyIfHigherDiscoveryLevel' has a wrong offset!");
static_assert(offsetof(FUpdateNpeMarkerBehaviourData, NewDiscoveryLevel) == 0x000002, "Member 'FUpdateNpeMarkerBehaviourData::NewDiscoveryLevel' has a wrong offset!");

// ScriptStruct DuneSandbox.TechTreeUpgradeAddEntryData
// 0x0038 (0x0038 - 0x0000)
struct FTechTreeUpgradeAddEntryData final
{
public:
	TArray<class UTechTreeNodeData*>              EntriesRequired;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UTechTreeNodeData*>              EntriesToAddAutomatically;                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UTechTreeNodeData*>              EntriesToUnlearn;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         IntelPointsToRefund;                               // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTechTreeUpgradeAddEntryData) == 0x000008, "Wrong alignment on FTechTreeUpgradeAddEntryData");
static_assert(sizeof(FTechTreeUpgradeAddEntryData) == 0x000038, "Wrong size on FTechTreeUpgradeAddEntryData");
static_assert(offsetof(FTechTreeUpgradeAddEntryData, EntriesRequired) == 0x000000, "Member 'FTechTreeUpgradeAddEntryData::EntriesRequired' has a wrong offset!");
static_assert(offsetof(FTechTreeUpgradeAddEntryData, EntriesToAddAutomatically) == 0x000010, "Member 'FTechTreeUpgradeAddEntryData::EntriesToAddAutomatically' has a wrong offset!");
static_assert(offsetof(FTechTreeUpgradeAddEntryData, EntriesToUnlearn) == 0x000020, "Member 'FTechTreeUpgradeAddEntryData::EntriesToUnlearn' has a wrong offset!");
static_assert(offsetof(FTechTreeUpgradeAddEntryData, IntelPointsToRefund) == 0x000030, "Member 'FTechTreeUpgradeAddEntryData::IntelPointsToRefund' has a wrong offset!");

// ScriptStruct DuneSandbox.TechTreeUpgradeData
// 0x0010 (0x0010 - 0x0000)
struct FTechTreeUpgradeData final
{
public:
	TArray<struct FTechTreeUpgradeAddEntryData>   UpgradeSteps;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTechTreeUpgradeData) == 0x000008, "Wrong alignment on FTechTreeUpgradeData");
static_assert(sizeof(FTechTreeUpgradeData) == 0x000010, "Wrong size on FTechTreeUpgradeData");
static_assert(offsetof(FTechTreeUpgradeData, UpgradeSteps) == 0x000000, "Member 'FTechTreeUpgradeData::UpgradeSteps' has a wrong offset!");

// ScriptStruct DuneSandbox.EGUIAudioEventsType
// 0x0000 (0x0008 - 0x0008)
struct FEGUIAudioEventsType final : public FStringEnumValue
{
};
static_assert(alignof(FEGUIAudioEventsType) == 0x000004, "Wrong alignment on FEGUIAudioEventsType");
static_assert(sizeof(FEGUIAudioEventsType) == 0x000008, "Wrong size on FEGUIAudioEventsType");

// ScriptStruct DuneSandbox.WorldLayoutClusterEntry
// 0x0018 (0x0018 - 0x0000)
struct FWorldLayoutClusterEntry final
{
public:
	struct FIntPoint                              ClusterAnchor;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorldLayoutClusterDataAsset*           ClusterDataAsset;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClusterVariation;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldLayoutClusterEntry) == 0x000008, "Wrong alignment on FWorldLayoutClusterEntry");
static_assert(sizeof(FWorldLayoutClusterEntry) == 0x000018, "Wrong size on FWorldLayoutClusterEntry");
static_assert(offsetof(FWorldLayoutClusterEntry, ClusterAnchor) == 0x000000, "Member 'FWorldLayoutClusterEntry::ClusterAnchor' has a wrong offset!");
static_assert(offsetof(FWorldLayoutClusterEntry, ClusterDataAsset) == 0x000008, "Member 'FWorldLayoutClusterEntry::ClusterDataAsset' has a wrong offset!");
static_assert(offsetof(FWorldLayoutClusterEntry, ClusterVariation) == 0x000010, "Member 'FWorldLayoutClusterEntry::ClusterVariation' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneArmorItemAudioSetting
// 0x0008 (0x0008 - 0x0000)
struct FDuneArmorItemAudioSetting final
{
public:
	EDuneAudioFoleyMaterial                       FoleyMaterial;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDuneAudioFoleyArmorWeight                    FoleyArmorWeight;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FoleyPriority;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneArmorItemAudioSetting) == 0x000004, "Wrong alignment on FDuneArmorItemAudioSetting");
static_assert(sizeof(FDuneArmorItemAudioSetting) == 0x000008, "Wrong size on FDuneArmorItemAudioSetting");
static_assert(offsetof(FDuneArmorItemAudioSetting, FoleyMaterial) == 0x000000, "Member 'FDuneArmorItemAudioSetting::FoleyMaterial' has a wrong offset!");
static_assert(offsetof(FDuneArmorItemAudioSetting, FoleyArmorWeight) == 0x000001, "Member 'FDuneArmorItemAudioSetting::FoleyArmorWeight' has a wrong offset!");
static_assert(offsetof(FDuneArmorItemAudioSetting, FoleyPriority) == 0x000004, "Member 'FDuneArmorItemAudioSetting::FoleyPriority' has a wrong offset!");

// ScriptStruct DuneSandbox.GameplayAbilityTargetData_Emote
// 0x0008 (0x0010 - 0x0008)
struct FGameplayAbilityTargetData_Emote final : public FGameplayAbilityTargetData
{
public:
	struct FUniqueID                              EmoteItemDatabaseId;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityTargetData_Emote) == 0x000008, "Wrong alignment on FGameplayAbilityTargetData_Emote");
static_assert(sizeof(FGameplayAbilityTargetData_Emote) == 0x000010, "Wrong size on FGameplayAbilityTargetData_Emote");
static_assert(offsetof(FGameplayAbilityTargetData_Emote, EmoteItemDatabaseId) == 0x000008, "Member 'FGameplayAbilityTargetData_Emote::EmoteItemDatabaseId' has a wrong offset!");

// ScriptStruct DuneSandbox.ArmorItemStats
// 0x0048 (0x0048 - 0x0000)
struct FArmorItemStats final
{
public:
	float                                         ColdDamageMitigationArmor;                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoriolisDamageMitigationArmor;                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DartDamageMitigationArmor;                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyDamageMitigationArmor;                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosiveDamageMitigationArmor;                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HarvestDamageMitigationArmor;                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeatDamageMitigationArmor;                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeDamageMitigationArmor;                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalDamageMitigationArmor;                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoisonDamageMitigationArmor;                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiationDamageMitigationArmor;                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepairDamageMitigationArmor;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SandstormDamageMitigationLevel1Armor;              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SandstormDamageMitigationLevel2Armor;              // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SandstormDamageMitigationLevel3Armor;              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealingDamageMitigationArmor;                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeavyDartDamageMitigationArmor;                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorValue;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArmorItemStats) == 0x000004, "Wrong alignment on FArmorItemStats");
static_assert(sizeof(FArmorItemStats) == 0x000048, "Wrong size on FArmorItemStats");
static_assert(offsetof(FArmorItemStats, ColdDamageMitigationArmor) == 0x000000, "Member 'FArmorItemStats::ColdDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, CoriolisDamageMitigationArmor) == 0x000004, "Member 'FArmorItemStats::CoriolisDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, DartDamageMitigationArmor) == 0x000008, "Member 'FArmorItemStats::DartDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, EnergyDamageMitigationArmor) == 0x00000C, "Member 'FArmorItemStats::EnergyDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, ExplosiveDamageMitigationArmor) == 0x000010, "Member 'FArmorItemStats::ExplosiveDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, HarvestDamageMitigationArmor) == 0x000014, "Member 'FArmorItemStats::HarvestDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, HeatDamageMitigationArmor) == 0x000018, "Member 'FArmorItemStats::HeatDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, MeleeDamageMitigationArmor) == 0x00001C, "Member 'FArmorItemStats::MeleeDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, PhysicalDamageMitigationArmor) == 0x000020, "Member 'FArmorItemStats::PhysicalDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, PoisonDamageMitigationArmor) == 0x000024, "Member 'FArmorItemStats::PoisonDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, RadiationDamageMitigationArmor) == 0x000028, "Member 'FArmorItemStats::RadiationDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, RepairDamageMitigationArmor) == 0x00002C, "Member 'FArmorItemStats::RepairDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, SandstormDamageMitigationLevel1Armor) == 0x000030, "Member 'FArmorItemStats::SandstormDamageMitigationLevel1Armor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, SandstormDamageMitigationLevel2Armor) == 0x000034, "Member 'FArmorItemStats::SandstormDamageMitigationLevel2Armor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, SandstormDamageMitigationLevel3Armor) == 0x000038, "Member 'FArmorItemStats::SandstormDamageMitigationLevel3Armor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, HealingDamageMitigationArmor) == 0x00003C, "Member 'FArmorItemStats::HealingDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, HeavyDartDamageMitigationArmor) == 0x000040, "Member 'FArmorItemStats::HeavyDartDamageMitigationArmor' has a wrong offset!");
static_assert(offsetof(FArmorItemStats, ArmorValue) == 0x000044, "Member 'FArmorItemStats::ArmorValue' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadConditionData
// 0x0020 (0x0020 - 0x0000)
struct FLandsraadConditionData final
{
public:
	class FName                                   m_ConditionName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ContributionFactor;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VotingInfluenceFactor;                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RewardFactor;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UConditionData*                         m_Condition;                                       // 0x0018(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadConditionData) == 0x000008, "Wrong alignment on FLandsraadConditionData");
static_assert(sizeof(FLandsraadConditionData) == 0x000020, "Wrong size on FLandsraadConditionData");
static_assert(offsetof(FLandsraadConditionData, m_ConditionName) == 0x000000, "Member 'FLandsraadConditionData::m_ConditionName' has a wrong offset!");
static_assert(offsetof(FLandsraadConditionData, m_ContributionFactor) == 0x000008, "Member 'FLandsraadConditionData::m_ContributionFactor' has a wrong offset!");
static_assert(offsetof(FLandsraadConditionData, m_VotingInfluenceFactor) == 0x00000C, "Member 'FLandsraadConditionData::m_VotingInfluenceFactor' has a wrong offset!");
static_assert(offsetof(FLandsraadConditionData, m_RewardFactor) == 0x000010, "Member 'FLandsraadConditionData::m_RewardFactor' has a wrong offset!");
static_assert(offsetof(FLandsraadConditionData, m_Condition) == 0x000018, "Member 'FLandsraadConditionData::m_Condition' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadTaskRewardData
// 0x0010 (0x0010 - 0x0000)
struct FLandsraadTaskRewardData final
{
public:
	int32                                         m_Threshold;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Amount;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadTaskRewardData) == 0x000004, "Wrong alignment on FLandsraadTaskRewardData");
static_assert(sizeof(FLandsraadTaskRewardData) == 0x000010, "Wrong size on FLandsraadTaskRewardData");
static_assert(offsetof(FLandsraadTaskRewardData, m_Threshold) == 0x000000, "Member 'FLandsraadTaskRewardData::m_Threshold' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskRewardData, m_ItemTemplateId) == 0x000004, "Member 'FLandsraadTaskRewardData::m_ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskRewardData, m_Amount) == 0x00000C, "Member 'FLandsraadTaskRewardData::m_Amount' has a wrong offset!");

// ScriptStruct DuneSandbox.ECommuninetMessageId
// 0x0000 (0x0008 - 0x0008)
struct FECommuninetMessageId final : public FStringEnumValue
{
};
static_assert(alignof(FECommuninetMessageId) == 0x000004, "Wrong alignment on FECommuninetMessageId");
static_assert(sizeof(FECommuninetMessageId) == 0x000008, "Wrong size on FECommuninetMessageId");

// ScriptStruct DuneSandbox.LandsraadSharedTaskData
// 0x00A8 (0x00A8 - 0x0000)
struct FLandsraadSharedTaskData final
{
public:
	class FName                                   m_TaskName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_TaskComplexity;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_GoalAmount;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_VotingPower;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int64>                      m_RegistrationIds;                                 // 0x0018(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FLandsraadConditionData>        m_Conditions;                                      // 0x0068(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FLandsraadTaskRewardData>       m_Rewards;                                         // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FECommuninetMessageId                  m_CommuninetMessageId;                             // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_TaskDisplayName;                                 // 0x0090(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadSharedTaskData) == 0x000008, "Wrong alignment on FLandsraadSharedTaskData");
static_assert(sizeof(FLandsraadSharedTaskData) == 0x0000A8, "Wrong size on FLandsraadSharedTaskData");
static_assert(offsetof(FLandsraadSharedTaskData, m_TaskName) == 0x000000, "Member 'FLandsraadSharedTaskData::m_TaskName' has a wrong offset!");
static_assert(offsetof(FLandsraadSharedTaskData, m_TaskComplexity) == 0x000008, "Member 'FLandsraadSharedTaskData::m_TaskComplexity' has a wrong offset!");
static_assert(offsetof(FLandsraadSharedTaskData, m_GoalAmount) == 0x00000C, "Member 'FLandsraadSharedTaskData::m_GoalAmount' has a wrong offset!");
static_assert(offsetof(FLandsraadSharedTaskData, m_VotingPower) == 0x000010, "Member 'FLandsraadSharedTaskData::m_VotingPower' has a wrong offset!");
static_assert(offsetof(FLandsraadSharedTaskData, m_RegistrationIds) == 0x000018, "Member 'FLandsraadSharedTaskData::m_RegistrationIds' has a wrong offset!");
static_assert(offsetof(FLandsraadSharedTaskData, m_Conditions) == 0x000068, "Member 'FLandsraadSharedTaskData::m_Conditions' has a wrong offset!");
static_assert(offsetof(FLandsraadSharedTaskData, m_Rewards) == 0x000078, "Member 'FLandsraadSharedTaskData::m_Rewards' has a wrong offset!");
static_assert(offsetof(FLandsraadSharedTaskData, m_CommuninetMessageId) == 0x000088, "Member 'FLandsraadSharedTaskData::m_CommuninetMessageId' has a wrong offset!");
static_assert(offsetof(FLandsraadSharedTaskData, m_TaskDisplayName) == 0x000090, "Member 'FLandsraadSharedTaskData::m_TaskDisplayName' has a wrong offset!");

// ScriptStruct DuneSandbox.AudioBiomeSingletonComponent
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FAudioBiomeSingletonComponent final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioBiomeSingletonComponent) == 0x000004, "Wrong alignment on FAudioBiomeSingletonComponent");
static_assert(sizeof(FAudioBiomeSingletonComponent) == 0x000004, "Wrong size on FAudioBiomeSingletonComponent");

// ScriptStruct DuneSandbox.BlendSpaceHolder
// 0x0040 (0x0058 - 0x0018)
struct FBlendSpaceHolder final : public FHolderBase
{
public:
	TSoftObjectPtr<class UBlendSpace>             m_BlendSpace;                                      // 0x0018(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            m_Holder;                                          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBlendSpace*                            m_DefaultBlendSpace;                               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FBlendSpaceHolder) == 0x000008, "Wrong alignment on FBlendSpaceHolder");
static_assert(sizeof(FBlendSpaceHolder) == 0x000058, "Wrong size on FBlendSpaceHolder");
static_assert(offsetof(FBlendSpaceHolder, m_BlendSpace) == 0x000018, "Member 'FBlendSpaceHolder::m_BlendSpace' has a wrong offset!");
static_assert(offsetof(FBlendSpaceHolder, m_Holder) == 0x000048, "Member 'FBlendSpaceHolder::m_Holder' has a wrong offset!");
static_assert(offsetof(FBlendSpaceHolder, m_DefaultBlendSpace) == 0x000050, "Member 'FBlendSpaceHolder::m_DefaultBlendSpace' has a wrong offset!");

// ScriptStruct DuneSandbox.StoredHitReactMontages
// 0x0060 (0x0060 - 0x0000)
struct FStoredHitReactMontages final
{
public:
	struct FAnimMontageHolder                     HitReact;                                          // 0x0000(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EHitReactDirection                            HitDirection;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHitReactLocation                             HitLocation;                                       // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoredHitReactMontages) == 0x000008, "Wrong alignment on FStoredHitReactMontages");
static_assert(sizeof(FStoredHitReactMontages) == 0x000060, "Wrong size on FStoredHitReactMontages");
static_assert(offsetof(FStoredHitReactMontages, HitReact) == 0x000000, "Member 'FStoredHitReactMontages::HitReact' has a wrong offset!");
static_assert(offsetof(FStoredHitReactMontages, HitDirection) == 0x000058, "Member 'FStoredHitReactMontages::HitDirection' has a wrong offset!");
static_assert(offsetof(FStoredHitReactMontages, HitLocation) == 0x000059, "Member 'FStoredHitReactMontages::HitLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.StaggerHitReact
// 0x0018 (0x0018 - 0x0000)
struct FStaggerHitReact final
{
public:
	TSubclassOf<class UDuneDamageType>            m_DamageTypeClass;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStoredHitReactMontages>        m_Montages;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaggerHitReact) == 0x000008, "Wrong alignment on FStaggerHitReact");
static_assert(sizeof(FStaggerHitReact) == 0x000018, "Wrong size on FStaggerHitReact");
static_assert(offsetof(FStaggerHitReact, m_DamageTypeClass) == 0x000000, "Member 'FStaggerHitReact::m_DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FStaggerHitReact, m_Montages) == 0x000008, "Member 'FStaggerHitReact::m_Montages' has a wrong offset!");

// ScriptStruct DuneSandbox.StoredKnockbackReactMontages
// 0x0060 (0x0060 - 0x0000)
struct FStoredKnockbackReactMontages final
{
public:
	struct FAnimMontageHolder                     HitReact;                                          // 0x0000(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EKnockbackHitDirection                        Direction;                                         // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockbackHitRotation                         Rotation;                                          // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoredKnockbackReactMontages) == 0x000008, "Wrong alignment on FStoredKnockbackReactMontages");
static_assert(sizeof(FStoredKnockbackReactMontages) == 0x000060, "Wrong size on FStoredKnockbackReactMontages");
static_assert(offsetof(FStoredKnockbackReactMontages, HitReact) == 0x000000, "Member 'FStoredKnockbackReactMontages::HitReact' has a wrong offset!");
static_assert(offsetof(FStoredKnockbackReactMontages, Direction) == 0x000058, "Member 'FStoredKnockbackReactMontages::Direction' has a wrong offset!");
static_assert(offsetof(FStoredKnockbackReactMontages, Rotation) == 0x000059, "Member 'FStoredKnockbackReactMontages::Rotation' has a wrong offset!");

// ScriptStruct DuneSandbox.FlinchHitReaction
// 0x0040 (0x0040 - 0x0000)
struct FFlinchHitReaction final
{
public:
	struct FHitReactTorqueDirection               FrontHit;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHitReactTorqueDirection               BackHit;                                           // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlinchHitReaction) == 0x000008, "Wrong alignment on FFlinchHitReaction");
static_assert(sizeof(FFlinchHitReaction) == 0x000040, "Wrong size on FFlinchHitReaction");
static_assert(offsetof(FFlinchHitReaction, FrontHit) == 0x000000, "Member 'FFlinchHitReaction::FrontHit' has a wrong offset!");
static_assert(offsetof(FFlinchHitReaction, BackHit) == 0x000020, "Member 'FFlinchHitReaction::BackHit' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponAnimData
// 0x06E8 (0x06F8 - 0x0010)
struct FWeaponAnimData final : public FTableRowBase
{
public:
	TSubclassOf<class UAnimInstance>              m_WeaponLinkedAnimLayer;                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              m_BleedingWeaponLinkedAnimLayer;                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_BeamWeaponUpAimOffsetLocation;                   // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_BeamWeaponFwdAimOffsetLocation;                  // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_BeamWeaponDownAimOffsetLocation;                 // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_BeamWeaponLeftAimOffsetLocation;                 // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_BeamWeaponRightAimOffsetLocation;                // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_UpDownAimOffsetLimits;                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_LeftRightAimOffsetLimits;                        // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BeamTargetOffsetModifier;                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BeamWeaponCrouchOffsetIdle;                      // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BeamWeaponCrouchOffsetMove;                      // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CalmTimeThreshold;                               // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinContinuousFireTime;                           // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSpaceHolder                      m_EquipWeaponBS;                                   // 0x00D0(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBlendSpaceHolder                      m_CrouchEquipWeaponBS;                             // 0x0128(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAnimMontageHolder                     m_UnholsterAnimMontage;                            // 0x0180(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAnimMontageHolder                     m_CrouchUnholsterAnimMontage;                      // 0x01D8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAnimMontageHolder                     m_HolsterAnimMontage;                              // 0x0230(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAnimMontageHolder                     m_CrouchHolsterAnimMontage;                        // 0x0288(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAimOffsetBlendSpace>    m_AO_Aim;                                          // 0x02E0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAimOffsetBlendSpace>    m_AO_Ready;                                        // 0x0310(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAimOffsetBlendSpace>    m_AO_Calm;                                         // 0x0340(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAimOffsetBlendSpace>    m_Crouch_AO_Aim;                                   // 0x0370(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAimOffsetBlendSpace>    m_Crouch_AO_Ready;                                 // 0x03A0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAimOffsetBlendSpace>    m_Crouch_AO_Calm;                                  // 0x03D0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStaggerHitReact>               m_LightStaggerHitReactions;                        // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaggerHitReact>               m_MediumStaggerHitReactions;                       // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaggerHitReact>               m_CrouchLightStaggerHitReactions;                  // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaggerHitReact>               m_CrouchMediumStaggerHitReactions;                 // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStoredKnockbackReactMontages>  m_StumbleHitReactions;                             // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStoredKnockbackReactMontages>  m_StaggerHitReactions;                             // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStoredKnockbackReactMontages>  m_LaunchHitReactions;                              // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStoredKnockbackReactMontages>  m_StabbedHitReactions;                             // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStoredKnockbackReactMontages>  m_SlashedHitReactions;                             // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStoredKnockbackReactMontages>  m_BlockBounceHitReactions;                         // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFlinchHitReaction                     m_FlinchHitReactionsHead;                          // 0x04A0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFlinchHitReaction                     m_FlinchHitReactionsTorso;                         // 0x04E0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFlinchHitReaction                     m_FlinchHitReactionsLeftArm;                       // 0x0520(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFlinchHitReaction                     m_FlinchHitReactionsRightArm;                      // 0x0560(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFlinchHitReaction                     m_CrouchFlinchHitReactionsHead;                    // 0x05A0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFlinchHitReaction                     m_CrouchFlinchHitReactionsTorso;                   // 0x05E0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFlinchHitReaction                     m_CrouchFlinchHitReactionsLeftArm;                 // 0x0620(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFlinchHitReaction                     m_CrouchFlinchHitReactionsRightArm;                // 0x0660(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAnimMontageHolder                     m_Attractor_Guard;                                 // 0x06A0(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponAnimData) == 0x000008, "Wrong alignment on FWeaponAnimData");
static_assert(sizeof(FWeaponAnimData) == 0x0006F8, "Wrong size on FWeaponAnimData");
static_assert(offsetof(FWeaponAnimData, m_WeaponLinkedAnimLayer) == 0x000010, "Member 'FWeaponAnimData::m_WeaponLinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_BleedingWeaponLinkedAnimLayer) == 0x000018, "Member 'FWeaponAnimData::m_BleedingWeaponLinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_BeamWeaponUpAimOffsetLocation) == 0x000020, "Member 'FWeaponAnimData::m_BeamWeaponUpAimOffsetLocation' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_BeamWeaponFwdAimOffsetLocation) == 0x000038, "Member 'FWeaponAnimData::m_BeamWeaponFwdAimOffsetLocation' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_BeamWeaponDownAimOffsetLocation) == 0x000050, "Member 'FWeaponAnimData::m_BeamWeaponDownAimOffsetLocation' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_BeamWeaponLeftAimOffsetLocation) == 0x000068, "Member 'FWeaponAnimData::m_BeamWeaponLeftAimOffsetLocation' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_BeamWeaponRightAimOffsetLocation) == 0x000080, "Member 'FWeaponAnimData::m_BeamWeaponRightAimOffsetLocation' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_UpDownAimOffsetLimits) == 0x000098, "Member 'FWeaponAnimData::m_UpDownAimOffsetLimits' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_LeftRightAimOffsetLimits) == 0x0000A8, "Member 'FWeaponAnimData::m_LeftRightAimOffsetLimits' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_BeamTargetOffsetModifier) == 0x0000B8, "Member 'FWeaponAnimData::m_BeamTargetOffsetModifier' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_BeamWeaponCrouchOffsetIdle) == 0x0000BC, "Member 'FWeaponAnimData::m_BeamWeaponCrouchOffsetIdle' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_BeamWeaponCrouchOffsetMove) == 0x0000C0, "Member 'FWeaponAnimData::m_BeamWeaponCrouchOffsetMove' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_CalmTimeThreshold) == 0x0000C4, "Member 'FWeaponAnimData::m_CalmTimeThreshold' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_MinContinuousFireTime) == 0x0000C8, "Member 'FWeaponAnimData::m_MinContinuousFireTime' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_EquipWeaponBS) == 0x0000D0, "Member 'FWeaponAnimData::m_EquipWeaponBS' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_CrouchEquipWeaponBS) == 0x000128, "Member 'FWeaponAnimData::m_CrouchEquipWeaponBS' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_UnholsterAnimMontage) == 0x000180, "Member 'FWeaponAnimData::m_UnholsterAnimMontage' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_CrouchUnholsterAnimMontage) == 0x0001D8, "Member 'FWeaponAnimData::m_CrouchUnholsterAnimMontage' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_HolsterAnimMontage) == 0x000230, "Member 'FWeaponAnimData::m_HolsterAnimMontage' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_CrouchHolsterAnimMontage) == 0x000288, "Member 'FWeaponAnimData::m_CrouchHolsterAnimMontage' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_AO_Aim) == 0x0002E0, "Member 'FWeaponAnimData::m_AO_Aim' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_AO_Ready) == 0x000310, "Member 'FWeaponAnimData::m_AO_Ready' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_AO_Calm) == 0x000340, "Member 'FWeaponAnimData::m_AO_Calm' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_Crouch_AO_Aim) == 0x000370, "Member 'FWeaponAnimData::m_Crouch_AO_Aim' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_Crouch_AO_Ready) == 0x0003A0, "Member 'FWeaponAnimData::m_Crouch_AO_Ready' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_Crouch_AO_Calm) == 0x0003D0, "Member 'FWeaponAnimData::m_Crouch_AO_Calm' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_LightStaggerHitReactions) == 0x000400, "Member 'FWeaponAnimData::m_LightStaggerHitReactions' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_MediumStaggerHitReactions) == 0x000410, "Member 'FWeaponAnimData::m_MediumStaggerHitReactions' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_CrouchLightStaggerHitReactions) == 0x000420, "Member 'FWeaponAnimData::m_CrouchLightStaggerHitReactions' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_CrouchMediumStaggerHitReactions) == 0x000430, "Member 'FWeaponAnimData::m_CrouchMediumStaggerHitReactions' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_StumbleHitReactions) == 0x000440, "Member 'FWeaponAnimData::m_StumbleHitReactions' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_StaggerHitReactions) == 0x000450, "Member 'FWeaponAnimData::m_StaggerHitReactions' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_LaunchHitReactions) == 0x000460, "Member 'FWeaponAnimData::m_LaunchHitReactions' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_StabbedHitReactions) == 0x000470, "Member 'FWeaponAnimData::m_StabbedHitReactions' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_SlashedHitReactions) == 0x000480, "Member 'FWeaponAnimData::m_SlashedHitReactions' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_BlockBounceHitReactions) == 0x000490, "Member 'FWeaponAnimData::m_BlockBounceHitReactions' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_FlinchHitReactionsHead) == 0x0004A0, "Member 'FWeaponAnimData::m_FlinchHitReactionsHead' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_FlinchHitReactionsTorso) == 0x0004E0, "Member 'FWeaponAnimData::m_FlinchHitReactionsTorso' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_FlinchHitReactionsLeftArm) == 0x000520, "Member 'FWeaponAnimData::m_FlinchHitReactionsLeftArm' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_FlinchHitReactionsRightArm) == 0x000560, "Member 'FWeaponAnimData::m_FlinchHitReactionsRightArm' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_CrouchFlinchHitReactionsHead) == 0x0005A0, "Member 'FWeaponAnimData::m_CrouchFlinchHitReactionsHead' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_CrouchFlinchHitReactionsTorso) == 0x0005E0, "Member 'FWeaponAnimData::m_CrouchFlinchHitReactionsTorso' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_CrouchFlinchHitReactionsLeftArm) == 0x000620, "Member 'FWeaponAnimData::m_CrouchFlinchHitReactionsLeftArm' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_CrouchFlinchHitReactionsRightArm) == 0x000660, "Member 'FWeaponAnimData::m_CrouchFlinchHitReactionsRightArm' has a wrong offset!");
static_assert(offsetof(FWeaponAnimData, m_Attractor_Guard) == 0x0006A0, "Member 'FWeaponAnimData::m_Attractor_Guard' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildMember
// 0x0018 (0x0018 - 0x0000)
struct FGuildMember final
{
public:
	struct FUniqueID                              m_PlayerId;                                        // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFaction                              m_Faction;                                         // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildRole                                    m_Role;                                            // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildMember) == 0x000008, "Wrong alignment on FGuildMember");
static_assert(sizeof(FGuildMember) == 0x000018, "Wrong size on FGuildMember");
static_assert(offsetof(FGuildMember, m_PlayerId) == 0x000000, "Member 'FGuildMember::m_PlayerId' has a wrong offset!");
static_assert(offsetof(FGuildMember, m_Faction) == 0x000008, "Member 'FGuildMember::m_Faction' has a wrong offset!");
static_assert(offsetof(FGuildMember, m_Role) == 0x000010, "Member 'FGuildMember::m_Role' has a wrong offset!");

// ScriptStruct DuneSandbox.AudioShelteredComponent
// 0x1510 (0x1510 - 0x0000)
struct alignas(0x08) FAudioShelteredComponent final
{
public:
	uint8                                         Pad_0[0x1510];                                     // 0x0000(0x1510)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioShelteredComponent) == 0x000008, "Wrong alignment on FAudioShelteredComponent");
static_assert(sizeof(FAudioShelteredComponent) == 0x001510, "Wrong size on FAudioShelteredComponent");

// ScriptStruct DuneSandbox.BuildingSetUnlockedEvent
// 0x0008 (0x0038 - 0x0030)
struct FBuildingSetUnlockedEvent final : public FGameEvent
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingSetUnlockedEvent) == 0x000008, "Wrong alignment on FBuildingSetUnlockedEvent");
static_assert(sizeof(FBuildingSetUnlockedEvent) == 0x000038, "Wrong size on FBuildingSetUnlockedEvent");

// ScriptStruct DuneSandbox.DynamicEncounterComponent
// 0x000C (0x000C - 0x0000)
struct FDynamicEncounterComponent final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainingLifetimeInSec;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicEncounterComponent) == 0x000004, "Wrong alignment on FDynamicEncounterComponent");
static_assert(sizeof(FDynamicEncounterComponent) == 0x00000C, "Wrong size on FDynamicEncounterComponent");
static_assert(offsetof(FDynamicEncounterComponent, RemainingLifetimeInSec) == 0x000004, "Member 'FDynamicEncounterComponent::RemainingLifetimeInSec' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableSocketCosts
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableSocketCosts final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableSocketCosts) == 0x000004, "Wrong alignment on FEBuildableSocketCosts");
static_assert(sizeof(FEBuildableSocketCosts) == 0x000008, "Wrong size on FEBuildableSocketCosts");

// ScriptStruct DuneSandbox.TerrainBlockSubLevelInstanceLodData
// 0x0038 (0x0038 - 0x0000)
struct FTerrainBlockSubLevelInstanceLodData final
{
public:
	TSoftObjectPtr<class UWorld>                  LodLevel;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelativeStreamingDistance;                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeOnConsole;                                 // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTerrainBlockSubLevelInstanceLodData) == 0x000008, "Wrong alignment on FTerrainBlockSubLevelInstanceLodData");
static_assert(sizeof(FTerrainBlockSubLevelInstanceLodData) == 0x000038, "Wrong size on FTerrainBlockSubLevelInstanceLodData");
static_assert(offsetof(FTerrainBlockSubLevelInstanceLodData, LodLevel) == 0x000000, "Member 'FTerrainBlockSubLevelInstanceLodData::LodLevel' has a wrong offset!");
static_assert(offsetof(FTerrainBlockSubLevelInstanceLodData, RelativeStreamingDistance) == 0x000030, "Member 'FTerrainBlockSubLevelInstanceLodData::RelativeStreamingDistance' has a wrong offset!");
static_assert(offsetof(FTerrainBlockSubLevelInstanceLodData, bExcludeOnConsole) == 0x000034, "Member 'FTerrainBlockSubLevelInstanceLodData::bExcludeOnConsole' has a wrong offset!");

// ScriptStruct DuneSandbox.QueuedBunchTimeoutInfo
// 0x0020 (0x0020 - 0x0000)
struct FQueuedBunchTimeoutInfo final
{
public:
	uint32                                        ActorNetGuidValue;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint32>                                PendingNetGuidValues;                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOpenAcked;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActorSpawned;                                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQueuedBunchTimeoutInfo) == 0x000008, "Wrong alignment on FQueuedBunchTimeoutInfo");
static_assert(sizeof(FQueuedBunchTimeoutInfo) == 0x000020, "Wrong size on FQueuedBunchTimeoutInfo");
static_assert(offsetof(FQueuedBunchTimeoutInfo, ActorNetGuidValue) == 0x000000, "Member 'FQueuedBunchTimeoutInfo::ActorNetGuidValue' has a wrong offset!");
static_assert(offsetof(FQueuedBunchTimeoutInfo, PendingNetGuidValues) == 0x000008, "Member 'FQueuedBunchTimeoutInfo::PendingNetGuidValues' has a wrong offset!");
static_assert(offsetof(FQueuedBunchTimeoutInfo, bOpenAcked) == 0x000018, "Member 'FQueuedBunchTimeoutInfo::bOpenAcked' has a wrong offset!");
static_assert(offsetof(FQueuedBunchTimeoutInfo, bActorSpawned) == 0x000019, "Member 'FQueuedBunchTimeoutInfo::bActorSpawned' has a wrong offset!");

// ScriptStruct DuneSandbox.FacingDirectionComponent
// 0x0018 (0x0018 - 0x0000)
struct FFacingDirectionComponent final
{
public:
	struct FVector                                m_FacingDirection;                                 // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFacingDirectionComponent) == 0x000008, "Wrong alignment on FFacingDirectionComponent");
static_assert(sizeof(FFacingDirectionComponent) == 0x000018, "Wrong size on FFacingDirectionComponent");
static_assert(offsetof(FFacingDirectionComponent, m_FacingDirection) == 0x000000, "Member 'FFacingDirectionComponent::m_FacingDirection' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleSlot
// 0x0068 (0x0068 - 0x0000)
struct FVehicleModuleSlot final
{
public:
	class FText                                   m_SlotName;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          m_bIsMandatory;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleModuleType                            m_ParentSlot;                                      // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EVehicleModuleType>                    m_RequiredSlots;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEVehicleModuleTemplateID>      m_RequiredModules;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_bBlocksRequiredSlotsDetach;                      // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   m_ModuleGroupTag;                                  // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEVehicleModuleTemplateID>      m_ModuleList;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EVehicleModuleType                            m_DamageSeepThrough;                               // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleModuleSlot) == 0x000008, "Wrong alignment on FVehicleModuleSlot");
static_assert(sizeof(FVehicleModuleSlot) == 0x000068, "Wrong size on FVehicleModuleSlot");
static_assert(offsetof(FVehicleModuleSlot, m_SlotName) == 0x000000, "Member 'FVehicleModuleSlot::m_SlotName' has a wrong offset!");
static_assert(offsetof(FVehicleModuleSlot, m_bIsMandatory) == 0x000018, "Member 'FVehicleModuleSlot::m_bIsMandatory' has a wrong offset!");
static_assert(offsetof(FVehicleModuleSlot, m_ParentSlot) == 0x000019, "Member 'FVehicleModuleSlot::m_ParentSlot' has a wrong offset!");
static_assert(offsetof(FVehicleModuleSlot, m_RequiredSlots) == 0x000020, "Member 'FVehicleModuleSlot::m_RequiredSlots' has a wrong offset!");
static_assert(offsetof(FVehicleModuleSlot, m_RequiredModules) == 0x000030, "Member 'FVehicleModuleSlot::m_RequiredModules' has a wrong offset!");
static_assert(offsetof(FVehicleModuleSlot, m_bBlocksRequiredSlotsDetach) == 0x000040, "Member 'FVehicleModuleSlot::m_bBlocksRequiredSlotsDetach' has a wrong offset!");
static_assert(offsetof(FVehicleModuleSlot, m_ModuleGroupTag) == 0x000044, "Member 'FVehicleModuleSlot::m_ModuleGroupTag' has a wrong offset!");
static_assert(offsetof(FVehicleModuleSlot, m_ModuleList) == 0x000050, "Member 'FVehicleModuleSlot::m_ModuleList' has a wrong offset!");
static_assert(offsetof(FVehicleModuleSlot, m_DamageSeepThrough) == 0x000060, "Member 'FVehicleModuleSlot::m_DamageSeepThrough' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleCraftingSchematic
// 0x0080 (0x0080 - 0x0000)
struct FVehicleCraftingSchematic final
{
public:
	TSoftClassPtr<class UClass>                   m_VehicleActorClass;                               // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EVehicleModuleType, struct FVehicleModuleSlot> m_VehicleSlots;                              // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCraftingSchematic) == 0x000008, "Wrong alignment on FVehicleCraftingSchematic");
static_assert(sizeof(FVehicleCraftingSchematic) == 0x000080, "Wrong size on FVehicleCraftingSchematic");
static_assert(offsetof(FVehicleCraftingSchematic, m_VehicleActorClass) == 0x000000, "Member 'FVehicleCraftingSchematic::m_VehicleActorClass' has a wrong offset!");
static_assert(offsetof(FVehicleCraftingSchematic, m_VehicleSlots) == 0x000030, "Member 'FVehicleCraftingSchematic::m_VehicleSlots' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleSchematicsTableRow
// 0x0118 (0x0128 - 0x0010)
struct FVehicleSchematicsTableRow final : public FTableRowBase
{
public:
	class FText                                   m_Name;                                            // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_Description;                                     // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVehicleCraftingSchematic              m_CraftingSchematic;                               // 0x0040(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          m_bShowInCraftingList;                             // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              m_VehicleIcon;                                     // 0x00C8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_VehicleIconSmall;                                // 0x00F8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleSchematicsTableRow) == 0x000008, "Wrong alignment on FVehicleSchematicsTableRow");
static_assert(sizeof(FVehicleSchematicsTableRow) == 0x000128, "Wrong size on FVehicleSchematicsTableRow");
static_assert(offsetof(FVehicleSchematicsTableRow, m_Name) == 0x000010, "Member 'FVehicleSchematicsTableRow::m_Name' has a wrong offset!");
static_assert(offsetof(FVehicleSchematicsTableRow, m_Description) == 0x000028, "Member 'FVehicleSchematicsTableRow::m_Description' has a wrong offset!");
static_assert(offsetof(FVehicleSchematicsTableRow, m_CraftingSchematic) == 0x000040, "Member 'FVehicleSchematicsTableRow::m_CraftingSchematic' has a wrong offset!");
static_assert(offsetof(FVehicleSchematicsTableRow, m_bShowInCraftingList) == 0x0000C0, "Member 'FVehicleSchematicsTableRow::m_bShowInCraftingList' has a wrong offset!");
static_assert(offsetof(FVehicleSchematicsTableRow, m_VehicleIcon) == 0x0000C8, "Member 'FVehicleSchematicsTableRow::m_VehicleIcon' has a wrong offset!");
static_assert(offsetof(FVehicleSchematicsTableRow, m_VehicleIconSmall) == 0x0000F8, "Member 'FVehicleSchematicsTableRow::m_VehicleIconSmall' has a wrong offset!");

// ScriptStruct DuneSandbox.ExternalContractConditionData
// 0x0020 (0x0020 - 0x0000)
struct FExternalContractConditionData final
{
public:
	class UConditionData*                         Data;                                              // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExternalContractConditionData) == 0x000008, "Wrong alignment on FExternalContractConditionData");
static_assert(sizeof(FExternalContractConditionData) == 0x000020, "Wrong size on FExternalContractConditionData");
static_assert(offsetof(FExternalContractConditionData, Data) == 0x000000, "Member 'FExternalContractConditionData::Data' has a wrong offset!");

// ScriptStruct DuneSandbox.DamageVignetteStyle
// 0x0020 (0x0020 - 0x0000)
struct FDamageVignetteStyle final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Opacity;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Saturation;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowVeins;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPulsateStrength;                                  // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPulsateOpacity;                                   // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowActivationStrengthPulse;                      // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowActivationOpacityPulse;                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PulseStrengthOffset;                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseOpacityOffset;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseAnimTime;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageVignetteStyle) == 0x000004, "Wrong alignment on FDamageVignetteStyle");
static_assert(sizeof(FDamageVignetteStyle) == 0x000020, "Wrong size on FDamageVignetteStyle");
static_assert(offsetof(FDamageVignetteStyle, Strength) == 0x000000, "Member 'FDamageVignetteStyle::Strength' has a wrong offset!");
static_assert(offsetof(FDamageVignetteStyle, Opacity) == 0x000004, "Member 'FDamageVignetteStyle::Opacity' has a wrong offset!");
static_assert(offsetof(FDamageVignetteStyle, Saturation) == 0x000008, "Member 'FDamageVignetteStyle::Saturation' has a wrong offset!");
static_assert(offsetof(FDamageVignetteStyle, bShowVeins) == 0x00000C, "Member 'FDamageVignetteStyle::bShowVeins' has a wrong offset!");
static_assert(offsetof(FDamageVignetteStyle, bPulsateStrength) == 0x00000D, "Member 'FDamageVignetteStyle::bPulsateStrength' has a wrong offset!");
static_assert(offsetof(FDamageVignetteStyle, bPulsateOpacity) == 0x00000E, "Member 'FDamageVignetteStyle::bPulsateOpacity' has a wrong offset!");
static_assert(offsetof(FDamageVignetteStyle, bShowActivationStrengthPulse) == 0x00000F, "Member 'FDamageVignetteStyle::bShowActivationStrengthPulse' has a wrong offset!");
static_assert(offsetof(FDamageVignetteStyle, bShowActivationOpacityPulse) == 0x000010, "Member 'FDamageVignetteStyle::bShowActivationOpacityPulse' has a wrong offset!");
static_assert(offsetof(FDamageVignetteStyle, PulseStrengthOffset) == 0x000014, "Member 'FDamageVignetteStyle::PulseStrengthOffset' has a wrong offset!");
static_assert(offsetof(FDamageVignetteStyle, PulseOpacityOffset) == 0x000018, "Member 'FDamageVignetteStyle::PulseOpacityOffset' has a wrong offset!");
static_assert(offsetof(FDamageVignetteStyle, PulseAnimTime) == 0x00001C, "Member 'FDamageVignetteStyle::PulseAnimTime' has a wrong offset!");

// ScriptStruct DuneSandbox.LevelSequenceBinding
// 0x0010 (0x0010 - 0x0000)
struct FLevelSequenceBinding final
{
public:
	class FName                                   m_BindingName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 m_ActorToBind;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelSequenceBinding) == 0x000008, "Wrong alignment on FLevelSequenceBinding");
static_assert(sizeof(FLevelSequenceBinding) == 0x000010, "Wrong size on FLevelSequenceBinding");
static_assert(offsetof(FLevelSequenceBinding, m_BindingName) == 0x000000, "Member 'FLevelSequenceBinding::m_BindingName' has a wrong offset!");
static_assert(offsetof(FLevelSequenceBinding, m_ActorToBind) == 0x000008, "Member 'FLevelSequenceBinding::m_ActorToBind' has a wrong offset!");

// ScriptStruct DuneSandbox.LevelSequenceSettingsData
// 0x00B0 (0x00B0 - 0x0000)
struct FLevelSequenceSettingsData final
{
public:
	struct FMovieSceneSequencePlaybackSettings    m_PlaybackSettings;                                // 0x0000(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 m_TransformOriginActor;                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             m_TransformOrigin;                                 // 0x0030(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PlayerImmunityDurationInSeconds;                 // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShouldUsePlayerBindingTag;                      // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLevelSequenceBinding>          m_AdditionalBindings;                              // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelSequenceSettingsData) == 0x000010, "Wrong alignment on FLevelSequenceSettingsData");
static_assert(sizeof(FLevelSequenceSettingsData) == 0x0000B0, "Wrong size on FLevelSequenceSettingsData");
static_assert(offsetof(FLevelSequenceSettingsData, m_PlaybackSettings) == 0x000000, "Member 'FLevelSequenceSettingsData::m_PlaybackSettings' has a wrong offset!");
static_assert(offsetof(FLevelSequenceSettingsData, m_TransformOriginActor) == 0x000020, "Member 'FLevelSequenceSettingsData::m_TransformOriginActor' has a wrong offset!");
static_assert(offsetof(FLevelSequenceSettingsData, m_TransformOrigin) == 0x000030, "Member 'FLevelSequenceSettingsData::m_TransformOrigin' has a wrong offset!");
static_assert(offsetof(FLevelSequenceSettingsData, m_PlayerImmunityDurationInSeconds) == 0x000090, "Member 'FLevelSequenceSettingsData::m_PlayerImmunityDurationInSeconds' has a wrong offset!");
static_assert(offsetof(FLevelSequenceSettingsData, m_bShouldUsePlayerBindingTag) == 0x000094, "Member 'FLevelSequenceSettingsData::m_bShouldUsePlayerBindingTag' has a wrong offset!");
static_assert(offsetof(FLevelSequenceSettingsData, m_AdditionalBindings) == 0x000098, "Member 'FLevelSequenceSettingsData::m_AdditionalBindings' has a wrong offset!");

// ScriptStruct DuneSandbox.SlotConfiguration
// 0x001C (0x001C - 0x0000)
struct FSlotConfiguration final
{
public:
	struct FSlateChildSize                        m_SlateSize;                                       // 0x0000(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                m_Padding;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          m_HorizontalAlignment;                             // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            m_VerticalAlignment;                               // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlotConfiguration) == 0x000004, "Wrong alignment on FSlotConfiguration");
static_assert(sizeof(FSlotConfiguration) == 0x00001C, "Wrong size on FSlotConfiguration");
static_assert(offsetof(FSlotConfiguration, m_SlateSize) == 0x000000, "Member 'FSlotConfiguration::m_SlateSize' has a wrong offset!");
static_assert(offsetof(FSlotConfiguration, m_Padding) == 0x000008, "Member 'FSlotConfiguration::m_Padding' has a wrong offset!");
static_assert(offsetof(FSlotConfiguration, m_HorizontalAlignment) == 0x000018, "Member 'FSlotConfiguration::m_HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FSlotConfiguration, m_VerticalAlignment) == 0x000019, "Member 'FSlotConfiguration::m_VerticalAlignment' has a wrong offset!");

// ScriptStruct DuneSandbox.HeaderConfiguration
// 0x0050 (0x0050 - 0x0000)
struct FHeaderConfiguration final
{
public:
	class FText                                   m_Title;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          m_ContentAlignment;                                // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_DesiredWidth;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlotConfiguration                     m_SlotConfiguration;                               // 0x0020(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_DataObjectPropertyName;                          // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeaderConfiguration) == 0x000008, "Wrong alignment on FHeaderConfiguration");
static_assert(sizeof(FHeaderConfiguration) == 0x000050, "Wrong size on FHeaderConfiguration");
static_assert(offsetof(FHeaderConfiguration, m_Title) == 0x000000, "Member 'FHeaderConfiguration::m_Title' has a wrong offset!");
static_assert(offsetof(FHeaderConfiguration, m_ContentAlignment) == 0x000018, "Member 'FHeaderConfiguration::m_ContentAlignment' has a wrong offset!");
static_assert(offsetof(FHeaderConfiguration, m_DesiredWidth) == 0x00001C, "Member 'FHeaderConfiguration::m_DesiredWidth' has a wrong offset!");
static_assert(offsetof(FHeaderConfiguration, m_SlotConfiguration) == 0x000020, "Member 'FHeaderConfiguration::m_SlotConfiguration' has a wrong offset!");
static_assert(offsetof(FHeaderConfiguration, m_DataObjectPropertyName) == 0x000040, "Member 'FHeaderConfiguration::m_DataObjectPropertyName' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponDragConfig
// 0x00A0 (0x00A0 - 0x0000)
struct FWeaponDragConfig final
{
public:
	bool                                          UseDragTurnRate;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DragTurnRateAimingDragSpeed;                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragTurnRateFiringDragSpeed;                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     WeaponSpinUpDragLerpFactor;                        // 0x0010(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DragAccelerationFactor;                            // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponDragConfig) == 0x000008, "Wrong alignment on FWeaponDragConfig");
static_assert(sizeof(FWeaponDragConfig) == 0x0000A0, "Wrong size on FWeaponDragConfig");
static_assert(offsetof(FWeaponDragConfig, UseDragTurnRate) == 0x000000, "Member 'FWeaponDragConfig::UseDragTurnRate' has a wrong offset!");
static_assert(offsetof(FWeaponDragConfig, DragTurnRateAimingDragSpeed) == 0x000004, "Member 'FWeaponDragConfig::DragTurnRateAimingDragSpeed' has a wrong offset!");
static_assert(offsetof(FWeaponDragConfig, DragTurnRateFiringDragSpeed) == 0x000008, "Member 'FWeaponDragConfig::DragTurnRateFiringDragSpeed' has a wrong offset!");
static_assert(offsetof(FWeaponDragConfig, WeaponSpinUpDragLerpFactor) == 0x000010, "Member 'FWeaponDragConfig::WeaponSpinUpDragLerpFactor' has a wrong offset!");
static_assert(offsetof(FWeaponDragConfig, DragAccelerationFactor) == 0x000098, "Member 'FWeaponDragConfig::DragAccelerationFactor' has a wrong offset!");

// ScriptStruct DuneSandbox.StilltentDataRowBase
// 0x00A0 (0x00B0 - 0x0010)
struct FStilltentDataRowBase final : public FTableRowBase
{
public:
	TMap<int32, float>                            m_WaterGenRatePerStormLevel;                       // 0x0010(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	TMap<int32, float>                            m_WaterGenModifierForStormIntensity;               // 0x0060(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStilltentDataRowBase) == 0x000008, "Wrong alignment on FStilltentDataRowBase");
static_assert(sizeof(FStilltentDataRowBase) == 0x0000B0, "Wrong size on FStilltentDataRowBase");
static_assert(offsetof(FStilltentDataRowBase, m_WaterGenRatePerStormLevel) == 0x000010, "Member 'FStilltentDataRowBase::m_WaterGenRatePerStormLevel' has a wrong offset!");
static_assert(offsetof(FStilltentDataRowBase, m_WaterGenModifierForStormIntensity) == 0x000060, "Member 'FStilltentDataRowBase::m_WaterGenModifierForStormIntensity' has a wrong offset!");

// ScriptStruct DuneSandbox.EGameItemAudioCategory
// 0x0000 (0x0008 - 0x0008)
struct FEGameItemAudioCategory final : public FStringEnumValue
{
};
static_assert(alignof(FEGameItemAudioCategory) == 0x000004, "Wrong alignment on FEGameItemAudioCategory");
static_assert(sizeof(FEGameItemAudioCategory) == 0x000008, "Wrong size on FEGameItemAudioCategory");

// ScriptStruct DuneSandbox.AbandonBaseEvent
// 0x0000 (0x0030 - 0x0030)
struct FAbandonBaseEvent final : public FGameEvent
{
};
static_assert(alignof(FAbandonBaseEvent) == 0x000008, "Wrong alignment on FAbandonBaseEvent");
static_assert(sizeof(FAbandonBaseEvent) == 0x000030, "Wrong size on FAbandonBaseEvent");

// ScriptStruct DuneSandbox.ENPCGeneticsLookName
// 0x0000 (0x0008 - 0x0008)
struct FENPCGeneticsLookName final : public FStringEnumValue
{
};
static_assert(alignof(FENPCGeneticsLookName) == 0x000004, "Wrong alignment on FENPCGeneticsLookName");
static_assert(sizeof(FENPCGeneticsLookName) == 0x000008, "Wrong size on FENPCGeneticsLookName");

// ScriptStruct DuneSandbox.PlayerReapedInstancesContainer
// 0x0010 (0x0010 - 0x0000)
struct FPlayerReapedInstancesContainer final
{
public:
	TArray<uint16>                                InstanceList;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerReapedInstancesContainer) == 0x000008, "Wrong alignment on FPlayerReapedInstancesContainer");
static_assert(sizeof(FPlayerReapedInstancesContainer) == 0x000010, "Wrong size on FPlayerReapedInstancesContainer");
static_assert(offsetof(FPlayerReapedInstancesContainer, InstanceList) == 0x000000, "Member 'FPlayerReapedInstancesContainer::InstanceList' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerReapedInstances
// 0x0070 (0x0070 - 0x0000)
struct FPlayerReapedInstances final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ADunePlayerCharacter>> PlayerCharacters;                             // 0x0050(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FPlayerReapedInstancesContainer> PlayerCharacterReapedInstances;                   // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerReapedInstances) == 0x000008, "Wrong alignment on FPlayerReapedInstances");
static_assert(sizeof(FPlayerReapedInstances) == 0x000070, "Wrong size on FPlayerReapedInstances");
static_assert(offsetof(FPlayerReapedInstances, PlayerCharacters) == 0x000050, "Member 'FPlayerReapedInstances::PlayerCharacters' has a wrong offset!");
static_assert(offsetof(FPlayerReapedInstances, PlayerCharacterReapedInstances) == 0x000060, "Member 'FPlayerReapedInstances::PlayerCharacterReapedInstances' has a wrong offset!");

// ScriptStruct DuneSandbox.BoneTransformData
// 0x0090 (0x0090 - 0x0000)
struct FBoneTransformData final
{
public:
	class FName                                   StartBone;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CounterBones;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BoneTransform;                                     // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCounterScale;                                  // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoneTransformData) == 0x000010, "Wrong alignment on FBoneTransformData");
static_assert(sizeof(FBoneTransformData) == 0x000090, "Wrong size on FBoneTransformData");
static_assert(offsetof(FBoneTransformData, StartBone) == 0x000000, "Member 'FBoneTransformData::StartBone' has a wrong offset!");
static_assert(offsetof(FBoneTransformData, CounterBones) == 0x000008, "Member 'FBoneTransformData::CounterBones' has a wrong offset!");
static_assert(offsetof(FBoneTransformData, BoneTransform) == 0x000020, "Member 'FBoneTransformData::BoneTransform' has a wrong offset!");
static_assert(offsetof(FBoneTransformData, bUseCounterScale) == 0x000080, "Member 'FBoneTransformData::bUseCounterScale' has a wrong offset!");

// ScriptStruct DuneSandbox.ModifyBoneChain
// 0x0010 (0x0010 - 0x0000)
struct FModifyBoneChain final
{
public:
	TArray<struct FBoneTransformData>             BoneTransformData;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModifyBoneChain) == 0x000008, "Wrong alignment on FModifyBoneChain");
static_assert(sizeof(FModifyBoneChain) == 0x000010, "Wrong size on FModifyBoneChain");
static_assert(offsetof(FModifyBoneChain, BoneTransformData) == 0x000000, "Member 'FModifyBoneChain::BoneTransformData' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleInputReplication
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x02) FVehicleInputReplication final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleInputReplication) == 0x000002, "Wrong alignment on FVehicleInputReplication");
static_assert(sizeof(FVehicleInputReplication) == 0x000008, "Wrong size on FVehicleInputReplication");

// ScriptStruct DuneSandbox.VehicleInputReplicationBatch
// 0x0050 (0x0050 - 0x0000)
struct FVehicleInputReplicationBatch final
{
public:
	TArray<struct FVehicleInputReplication>       m_Inputs;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint64                                        m_FirstInputIndex;                                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_Location;                                        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               m_Rotation;                                        // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleInputReplicationBatch) == 0x000008, "Wrong alignment on FVehicleInputReplicationBatch");
static_assert(sizeof(FVehicleInputReplicationBatch) == 0x000050, "Wrong size on FVehicleInputReplicationBatch");
static_assert(offsetof(FVehicleInputReplicationBatch, m_Inputs) == 0x000000, "Member 'FVehicleInputReplicationBatch::m_Inputs' has a wrong offset!");
static_assert(offsetof(FVehicleInputReplicationBatch, m_FirstInputIndex) == 0x000010, "Member 'FVehicleInputReplicationBatch::m_FirstInputIndex' has a wrong offset!");
static_assert(offsetof(FVehicleInputReplicationBatch, m_Location) == 0x000020, "Member 'FVehicleInputReplicationBatch::m_Location' has a wrong offset!");
static_assert(offsetof(FVehicleInputReplicationBatch, m_Rotation) == 0x000038, "Member 'FVehicleInputReplicationBatch::m_Rotation' has a wrong offset!");

// ScriptStruct DuneSandbox.DebugSandstormLocationData
// 0x0060 (0x0060 - 0x0000)
struct FDebugSandstormLocationData final
{
public:
	int64                                         ID;                                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathStart;                                         // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathFinish;                                        // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerIndex;                                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugSandstormLocationData) == 0x000008, "Wrong alignment on FDebugSandstormLocationData");
static_assert(sizeof(FDebugSandstormLocationData) == 0x000060, "Wrong size on FDebugSandstormLocationData");
static_assert(offsetof(FDebugSandstormLocationData, ID) == 0x000000, "Member 'FDebugSandstormLocationData::ID' has a wrong offset!");
static_assert(offsetof(FDebugSandstormLocationData, Location) == 0x000008, "Member 'FDebugSandstormLocationData::Location' has a wrong offset!");
static_assert(offsetof(FDebugSandstormLocationData, PathStart) == 0x000020, "Member 'FDebugSandstormLocationData::PathStart' has a wrong offset!");
static_assert(offsetof(FDebugSandstormLocationData, PathFinish) == 0x000038, "Member 'FDebugSandstormLocationData::PathFinish' has a wrong offset!");
static_assert(offsetof(FDebugSandstormLocationData, Level) == 0x000050, "Member 'FDebugSandstormLocationData::Level' has a wrong offset!");
static_assert(offsetof(FDebugSandstormLocationData, ServerIndex) == 0x000054, "Member 'FDebugSandstormLocationData::ServerIndex' has a wrong offset!");
static_assert(offsetof(FDebugSandstormLocationData, bActive) == 0x000058, "Member 'FDebugSandstormLocationData::bActive' has a wrong offset!");

// ScriptStruct DuneSandbox.WorldLayoutHeatMapSettings
// 0x00C0 (0x00C0 - 0x0000)
struct FWorldLayoutHeatMapSettings final
{
public:
	TSoftObjectPtr<class UBitMapCollection>       TagsDistributionBitMap;                            // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBitMapData>             DehydrationBiomeTiersBitMap;                       // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UResourceDistributionGroup> ResourceDistributionGroup;                      // 0x0060(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHeatMapData>            SandstormTreasureHeatMap;                          // 0x0090(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldLayoutHeatMapSettings) == 0x000008, "Wrong alignment on FWorldLayoutHeatMapSettings");
static_assert(sizeof(FWorldLayoutHeatMapSettings) == 0x0000C0, "Wrong size on FWorldLayoutHeatMapSettings");
static_assert(offsetof(FWorldLayoutHeatMapSettings, TagsDistributionBitMap) == 0x000000, "Member 'FWorldLayoutHeatMapSettings::TagsDistributionBitMap' has a wrong offset!");
static_assert(offsetof(FWorldLayoutHeatMapSettings, DehydrationBiomeTiersBitMap) == 0x000030, "Member 'FWorldLayoutHeatMapSettings::DehydrationBiomeTiersBitMap' has a wrong offset!");
static_assert(offsetof(FWorldLayoutHeatMapSettings, ResourceDistributionGroup) == 0x000060, "Member 'FWorldLayoutHeatMapSettings::ResourceDistributionGroup' has a wrong offset!");
static_assert(offsetof(FWorldLayoutHeatMapSettings, SandstormTreasureHeatMap) == 0x000090, "Member 'FWorldLayoutHeatMapSettings::SandstormTreasureHeatMap' has a wrong offset!");

// ScriptStruct DuneSandbox.PerPlayerActorVehiclePermissionAccessData
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FPerPlayerActorVehiclePermissionAccessData final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerPlayerActorVehiclePermissionAccessData) == 0x000010, "Wrong alignment on FPerPlayerActorVehiclePermissionAccessData");
static_assert(sizeof(FPerPlayerActorVehiclePermissionAccessData) == 0x0000F0, "Wrong size on FPerPlayerActorVehiclePermissionAccessData");

// ScriptStruct DuneSandbox.VehicleHeatInfo
// 0x0018 (0x0018 - 0x0000)
struct FVehicleHeatInfo final
{
public:
	struct FFloatRange                            m_CachedOperationRange;                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CurrentTemperature;                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TargetTemperature;                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleHeatInfo) == 0x000004, "Wrong alignment on FVehicleHeatInfo");
static_assert(sizeof(FVehicleHeatInfo) == 0x000018, "Wrong size on FVehicleHeatInfo");
static_assert(offsetof(FVehicleHeatInfo, m_CachedOperationRange) == 0x000000, "Member 'FVehicleHeatInfo::m_CachedOperationRange' has a wrong offset!");
static_assert(offsetof(FVehicleHeatInfo, m_CurrentTemperature) == 0x000010, "Member 'FVehicleHeatInfo::m_CurrentTemperature' has a wrong offset!");
static_assert(offsetof(FVehicleHeatInfo, m_TargetTemperature) == 0x000014, "Member 'FVehicleHeatInfo::m_TargetTemperature' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractConditionItemsState
// 0x000C (0x000C - 0x0000)
struct FContractConditionItemsState final
{
public:
	int32                                         RequiredNum;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValidNum;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowDurabilityNum;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractConditionItemsState) == 0x000004, "Wrong alignment on FContractConditionItemsState");
static_assert(sizeof(FContractConditionItemsState) == 0x00000C, "Wrong size on FContractConditionItemsState");
static_assert(offsetof(FContractConditionItemsState, RequiredNum) == 0x000000, "Member 'FContractConditionItemsState::RequiredNum' has a wrong offset!");
static_assert(offsetof(FContractConditionItemsState, ValidNum) == 0x000004, "Member 'FContractConditionItemsState::ValidNum' has a wrong offset!");
static_assert(offsetof(FContractConditionItemsState, LowDurabilityNum) == 0x000008, "Member 'FContractConditionItemsState::LowDurabilityNum' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractConditionFastArrayItem
// 0x001C (0x0028 - 0x000C)
struct FContractConditionFastArrayItem : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              ContractItemUid;                                   // 0x0010(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEContractName                         ContractName;                                      // 0x0018(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionId;                                       // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContractConditionFastArrayItem) == 0x000008, "Wrong alignment on FContractConditionFastArrayItem");
static_assert(sizeof(FContractConditionFastArrayItem) == 0x000028, "Wrong size on FContractConditionFastArrayItem");
static_assert(offsetof(FContractConditionFastArrayItem, ContractItemUid) == 0x000010, "Member 'FContractConditionFastArrayItem::ContractItemUid' has a wrong offset!");
static_assert(offsetof(FContractConditionFastArrayItem, ContractName) == 0x000018, "Member 'FContractConditionFastArrayItem::ContractName' has a wrong offset!");
static_assert(offsetof(FContractConditionFastArrayItem, ConditionId) == 0x000020, "Member 'FContractConditionFastArrayItem::ConditionId' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractConditionStateFastArrayItem
// 0x0010 (0x0038 - 0x0028)
struct FContractConditionStateFastArrayItem final : public FContractConditionFastArrayItem
{
public:
	struct FContractConditionItemsState           ItemsState;                                        // 0x0028(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContractConditionStateFastArrayItem) == 0x000008, "Wrong alignment on FContractConditionStateFastArrayItem");
static_assert(sizeof(FContractConditionStateFastArrayItem) == 0x000038, "Wrong size on FContractConditionStateFastArrayItem");
static_assert(offsetof(FContractConditionStateFastArrayItem, ItemsState) == 0x000028, "Member 'FContractConditionStateFastArrayItem::ItemsState' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterMutableParameter
// 0x0028 (0x0028 - 0x0000)
struct FCharacterMutableParameter final
{
public:
	class FString                                 m_StateName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ParameterName;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMutableParameterType                         m_ParameterType;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterMutableParameter) == 0x000008, "Wrong alignment on FCharacterMutableParameter");
static_assert(sizeof(FCharacterMutableParameter) == 0x000028, "Wrong size on FCharacterMutableParameter");
static_assert(offsetof(FCharacterMutableParameter, m_StateName) == 0x000000, "Member 'FCharacterMutableParameter::m_StateName' has a wrong offset!");
static_assert(offsetof(FCharacterMutableParameter, m_ParameterName) == 0x000010, "Member 'FCharacterMutableParameter::m_ParameterName' has a wrong offset!");
static_assert(offsetof(FCharacterMutableParameter, m_ParameterType) == 0x000020, "Member 'FCharacterMutableParameter::m_ParameterType' has a wrong offset!");

// ScriptStruct DuneSandbox.CCScreenMutableParameterOption
// 0x0058 (0x0058 - 0x0000)
struct FCCScreenMutableParameterOption final
{
public:
	class FString                                 m_MutableName;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_DisplayName;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              UIThumbnail;                                       // 0x0028(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCCScreenMutableParameterOption) == 0x000008, "Wrong alignment on FCCScreenMutableParameterOption");
static_assert(sizeof(FCCScreenMutableParameterOption) == 0x000058, "Wrong size on FCCScreenMutableParameterOption");
static_assert(offsetof(FCCScreenMutableParameterOption, m_MutableName) == 0x000000, "Member 'FCCScreenMutableParameterOption::m_MutableName' has a wrong offset!");
static_assert(offsetof(FCCScreenMutableParameterOption, m_DisplayName) == 0x000010, "Member 'FCCScreenMutableParameterOption::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FCCScreenMutableParameterOption, UIThumbnail) == 0x000028, "Member 'FCCScreenMutableParameterOption::UIThumbnail' has a wrong offset!");

// ScriptStruct DuneSandbox.CCScreenMutableParameter
// 0x0070 (0x0070 - 0x0000)
struct FCCScreenMutableParameter final
{
public:
	struct FCharacterMutableParameter             m_MutableParameter;                                // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FCCScreenMutableParameterOption> m_ParameterOptionConfigs;                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 m_ParameterValue;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsParameterValueInverted;                       // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_SimpleName;                                      // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCharacterCreationEvent*>        m_EventsToTrigger;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCCScreenMutableParameter) == 0x000008, "Wrong alignment on FCCScreenMutableParameter");
static_assert(sizeof(FCCScreenMutableParameter) == 0x000070, "Wrong size on FCCScreenMutableParameter");
static_assert(offsetof(FCCScreenMutableParameter, m_MutableParameter) == 0x000000, "Member 'FCCScreenMutableParameter::m_MutableParameter' has a wrong offset!");
static_assert(offsetof(FCCScreenMutableParameter, m_ParameterOptionConfigs) == 0x000028, "Member 'FCCScreenMutableParameter::m_ParameterOptionConfigs' has a wrong offset!");
static_assert(offsetof(FCCScreenMutableParameter, m_ParameterValue) == 0x000038, "Member 'FCCScreenMutableParameter::m_ParameterValue' has a wrong offset!");
static_assert(offsetof(FCCScreenMutableParameter, m_bIsParameterValueInverted) == 0x000048, "Member 'FCCScreenMutableParameter::m_bIsParameterValueInverted' has a wrong offset!");
static_assert(offsetof(FCCScreenMutableParameter, m_SimpleName) == 0x000050, "Member 'FCCScreenMutableParameter::m_SimpleName' has a wrong offset!");
static_assert(offsetof(FCCScreenMutableParameter, m_EventsToTrigger) == 0x000060, "Member 'FCCScreenMutableParameter::m_EventsToTrigger' has a wrong offset!");

// ScriptStruct DuneSandbox.CCValidOptionValues
// 0x0050 (0x0050 - 0x0000)
struct FCCValidOptionValues final
{
public:
	TSet<class FString>                           m_Values;                                          // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCCValidOptionValues) == 0x000008, "Wrong alignment on FCCValidOptionValues");
static_assert(sizeof(FCCValidOptionValues) == 0x000050, "Wrong size on FCCValidOptionValues");
static_assert(offsetof(FCCValidOptionValues, m_Values) == 0x000000, "Member 'FCCValidOptionValues::m_Values' has a wrong offset!");

// ScriptStruct DuneSandbox.SimulatedProxyVehicleInput
// 0x0028 (0x0028 - 0x0000)
struct FSimulatedProxyVehicleInput final
{
public:
	EVehicleInputFlag                             m_InputChangedFlags;                               // 0x0000(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_XAxis;                                           // 0x0002(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_YAxis;                                           // 0x0003(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_ZAxis;                                           // 0x0004(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_XAxisValue;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_YAxisValue;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ZAxisValue;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_ControlVectorXAxis;                              // 0x0014(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_ControlVectorYAxis;                              // 0x0015(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_ControlVectorZAxis;                              // 0x0016(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_ControlVectorXAxisValue;                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ControlVectorYAxisValue;                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ControlVectorZAxisValue;                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_bIsBrakePressed : 1;                             // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bIsBoostPressed : 1;                             // 0x0024(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimulatedProxyVehicleInput) == 0x000004, "Wrong alignment on FSimulatedProxyVehicleInput");
static_assert(sizeof(FSimulatedProxyVehicleInput) == 0x000028, "Wrong size on FSimulatedProxyVehicleInput");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_InputChangedFlags) == 0x000000, "Member 'FSimulatedProxyVehicleInput::m_InputChangedFlags' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_XAxis) == 0x000002, "Member 'FSimulatedProxyVehicleInput::m_XAxis' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_YAxis) == 0x000003, "Member 'FSimulatedProxyVehicleInput::m_YAxis' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_ZAxis) == 0x000004, "Member 'FSimulatedProxyVehicleInput::m_ZAxis' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_XAxisValue) == 0x000008, "Member 'FSimulatedProxyVehicleInput::m_XAxisValue' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_YAxisValue) == 0x00000C, "Member 'FSimulatedProxyVehicleInput::m_YAxisValue' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_ZAxisValue) == 0x000010, "Member 'FSimulatedProxyVehicleInput::m_ZAxisValue' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_ControlVectorXAxis) == 0x000014, "Member 'FSimulatedProxyVehicleInput::m_ControlVectorXAxis' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_ControlVectorYAxis) == 0x000015, "Member 'FSimulatedProxyVehicleInput::m_ControlVectorYAxis' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_ControlVectorZAxis) == 0x000016, "Member 'FSimulatedProxyVehicleInput::m_ControlVectorZAxis' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_ControlVectorXAxisValue) == 0x000018, "Member 'FSimulatedProxyVehicleInput::m_ControlVectorXAxisValue' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_ControlVectorYAxisValue) == 0x00001C, "Member 'FSimulatedProxyVehicleInput::m_ControlVectorYAxisValue' has a wrong offset!");
static_assert(offsetof(FSimulatedProxyVehicleInput, m_ControlVectorZAxisValue) == 0x000020, "Member 'FSimulatedProxyVehicleInput::m_ControlVectorZAxisValue' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterMutableParameterOption
// 0x0038 (0x0038 - 0x0000)
struct FCharacterMutableParameterOption final
{
public:
	struct FCharacterMutableParameter             m_ParameterDefinition;                             // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 m_ParameterOption;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterMutableParameterOption) == 0x000008, "Wrong alignment on FCharacterMutableParameterOption");
static_assert(sizeof(FCharacterMutableParameterOption) == 0x000038, "Wrong size on FCharacterMutableParameterOption");
static_assert(offsetof(FCharacterMutableParameterOption, m_ParameterDefinition) == 0x000000, "Member 'FCharacterMutableParameterOption::m_ParameterDefinition' has a wrong offset!");
static_assert(offsetof(FCharacterMutableParameterOption, m_ParameterOption) == 0x000028, "Member 'FCharacterMutableParameterOption::m_ParameterOption' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceFieldQuadrantItem
// 0x000C (0x000C - 0x0000)
struct FResourceFieldQuadrantItem final
{
public:
	int32                                         ReplicationID;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplicationKey;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OriginalValue;                                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceFieldQuadrantItem) == 0x000004, "Wrong alignment on FResourceFieldQuadrantItem");
static_assert(sizeof(FResourceFieldQuadrantItem) == 0x00000C, "Wrong size on FResourceFieldQuadrantItem");
static_assert(offsetof(FResourceFieldQuadrantItem, ReplicationID) == 0x000000, "Member 'FResourceFieldQuadrantItem::ReplicationID' has a wrong offset!");
static_assert(offsetof(FResourceFieldQuadrantItem, ReplicationKey) == 0x000004, "Member 'FResourceFieldQuadrantItem::ReplicationKey' has a wrong offset!");
static_assert(offsetof(FResourceFieldQuadrantItem, OriginalValue) == 0x000008, "Member 'FResourceFieldQuadrantItem::OriginalValue' has a wrong offset!");
static_assert(offsetof(FResourceFieldQuadrantItem, Value) == 0x000009, "Member 'FResourceFieldQuadrantItem::Value' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceFieldQuadrant
// 0x0020 (0x0020 - 0x0000)
struct FResourceFieldQuadrant final
{
public:
	TArray<struct FResourceFieldQuadrantItem>     Items;                                             // 0x0000(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	struct FIntPoint                              Size;                                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplicationKey;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceFieldQuadrant) == 0x000008, "Wrong alignment on FResourceFieldQuadrant");
static_assert(sizeof(FResourceFieldQuadrant) == 0x000020, "Wrong size on FResourceFieldQuadrant");
static_assert(offsetof(FResourceFieldQuadrant, Items) == 0x000000, "Member 'FResourceFieldQuadrant::Items' has a wrong offset!");
static_assert(offsetof(FResourceFieldQuadrant, Size) == 0x000010, "Member 'FResourceFieldQuadrant::Size' has a wrong offset!");
static_assert(offsetof(FResourceFieldQuadrant, ReplicationKey) == 0x000018, "Member 'FResourceFieldQuadrant::ReplicationKey' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceFieldFastSerializer
// 0x00C0 (0x00C0 - 0x0000)
struct FResourceFieldFastSerializer final
{
public:
	TArray<struct FResourceFieldQuadrant>         Quadrants;                                         // 0x0000(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x70];                                      // 0x0010(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ItemStatePercentages;                              // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, RepSkip, NativeAccessSpecifierPublic)
	struct FIntPoint                              GridSize;                                          // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              QuadrantSize;                                      // 0x0098(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NodeSize;                                          // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x4];                                       // 0x00B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReplicationKey;                                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NumNodeIndexBits;                                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x1];                                       // 0x00B9(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCanUnpackItems;                                   // 0x00BA(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceFieldFastSerializer) == 0x000008, "Wrong alignment on FResourceFieldFastSerializer");
static_assert(sizeof(FResourceFieldFastSerializer) == 0x0000C0, "Wrong size on FResourceFieldFastSerializer");
static_assert(offsetof(FResourceFieldFastSerializer, Quadrants) == 0x000000, "Member 'FResourceFieldFastSerializer::Quadrants' has a wrong offset!");
static_assert(offsetof(FResourceFieldFastSerializer, ItemStatePercentages) == 0x000080, "Member 'FResourceFieldFastSerializer::ItemStatePercentages' has a wrong offset!");
static_assert(offsetof(FResourceFieldFastSerializer, GridSize) == 0x000090, "Member 'FResourceFieldFastSerializer::GridSize' has a wrong offset!");
static_assert(offsetof(FResourceFieldFastSerializer, QuadrantSize) == 0x000098, "Member 'FResourceFieldFastSerializer::QuadrantSize' has a wrong offset!");
static_assert(offsetof(FResourceFieldFastSerializer, NodeSize) == 0x0000A0, "Member 'FResourceFieldFastSerializer::NodeSize' has a wrong offset!");
static_assert(offsetof(FResourceFieldFastSerializer, ReplicationKey) == 0x0000B4, "Member 'FResourceFieldFastSerializer::ReplicationKey' has a wrong offset!");
static_assert(offsetof(FResourceFieldFastSerializer, NumNodeIndexBits) == 0x0000B8, "Member 'FResourceFieldFastSerializer::NumNodeIndexBits' has a wrong offset!");
static_assert(offsetof(FResourceFieldFastSerializer, bCanUnpackItems) == 0x0000BA, "Member 'FResourceFieldFastSerializer::bCanUnpackItems' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractCondition
// 0x01F8 (0x01F8 - 0x0000)
struct FContractCondition final
{
public:
	EContractConditionGroupId                     GroupID;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   InteractionNotificationText;                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         InteractionNotificationDurationInSec;              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CompletionNotificationText;                        // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         CompletionNotificationDurationInSec;               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldCompletePreviousConditions;                 // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContractConditionType                        Type;                                              // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameItemInfo                          ItemById;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TSet<TSoftClassPtr<class UClass>>             GameplayAbilities;                                 // 0x0070(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TSoftClassPtr<class UClass>>             RequiredDamageTypes;                               // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      Target;                                            // 0x0118(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      MapMarkerTarget;                                   // 0x0160(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapMarkerRadius;                                   // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContractLocationAnchorName                   Anchor;                                            // 0x01AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DistanceToAnchor;                                  // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   PossessedPawnClass;                                // 0x01B8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCustomCheckDistance;                           // 0x01E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomCheckDistance;                               // 0x01EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppressCompletedToast;                           // 0x01F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContractCondition) == 0x000008, "Wrong alignment on FContractCondition");
static_assert(sizeof(FContractCondition) == 0x0001F8, "Wrong size on FContractCondition");
static_assert(offsetof(FContractCondition, GroupID) == 0x000000, "Member 'FContractCondition::GroupID' has a wrong offset!");
static_assert(offsetof(FContractCondition, Title) == 0x000008, "Member 'FContractCondition::Title' has a wrong offset!");
static_assert(offsetof(FContractCondition, InteractionNotificationText) == 0x000020, "Member 'FContractCondition::InteractionNotificationText' has a wrong offset!");
static_assert(offsetof(FContractCondition, InteractionNotificationDurationInSec) == 0x000038, "Member 'FContractCondition::InteractionNotificationDurationInSec' has a wrong offset!");
static_assert(offsetof(FContractCondition, CompletionNotificationText) == 0x000040, "Member 'FContractCondition::CompletionNotificationText' has a wrong offset!");
static_assert(offsetof(FContractCondition, CompletionNotificationDurationInSec) == 0x000058, "Member 'FContractCondition::CompletionNotificationDurationInSec' has a wrong offset!");
static_assert(offsetof(FContractCondition, bShouldCompletePreviousConditions) == 0x00005C, "Member 'FContractCondition::bShouldCompletePreviousConditions' has a wrong offset!");
static_assert(offsetof(FContractCondition, Type) == 0x00005D, "Member 'FContractCondition::Type' has a wrong offset!");
static_assert(offsetof(FContractCondition, ItemById) == 0x000060, "Member 'FContractCondition::ItemById' has a wrong offset!");
static_assert(offsetof(FContractCondition, GameplayAbilities) == 0x000070, "Member 'FContractCondition::GameplayAbilities' has a wrong offset!");
static_assert(offsetof(FContractCondition, Number) == 0x0000C0, "Member 'FContractCondition::Number' has a wrong offset!");
static_assert(offsetof(FContractCondition, RequiredDamageTypes) == 0x0000C8, "Member 'FContractCondition::RequiredDamageTypes' has a wrong offset!");
static_assert(offsetof(FContractCondition, Target) == 0x000118, "Member 'FContractCondition::Target' has a wrong offset!");
static_assert(offsetof(FContractCondition, MapMarkerTarget) == 0x000160, "Member 'FContractCondition::MapMarkerTarget' has a wrong offset!");
static_assert(offsetof(FContractCondition, MapMarkerRadius) == 0x0001A8, "Member 'FContractCondition::MapMarkerRadius' has a wrong offset!");
static_assert(offsetof(FContractCondition, Anchor) == 0x0001AC, "Member 'FContractCondition::Anchor' has a wrong offset!");
static_assert(offsetof(FContractCondition, DistanceToAnchor) == 0x0001B0, "Member 'FContractCondition::DistanceToAnchor' has a wrong offset!");
static_assert(offsetof(FContractCondition, PossessedPawnClass) == 0x0001B8, "Member 'FContractCondition::PossessedPawnClass' has a wrong offset!");
static_assert(offsetof(FContractCondition, bHasCustomCheckDistance) == 0x0001E8, "Member 'FContractCondition::bHasCustomCheckDistance' has a wrong offset!");
static_assert(offsetof(FContractCondition, CustomCheckDistance) == 0x0001EC, "Member 'FContractCondition::CustomCheckDistance' has a wrong offset!");
static_assert(offsetof(FContractCondition, bSuppressCompletedToast) == 0x0001F0, "Member 'FContractCondition::bSuppressCompletedToast' has a wrong offset!");

// ScriptStruct DuneSandbox.AttractorAnimationSet
// 0x0070 (0x0070 - 0x0000)
struct FAttractorAnimationSet final
{
public:
	EAiAttractorAnimType                          m_AnimationFromAnimWeapon;                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            m_CombinedAttractorMontagePtr;                     // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           m_CombinedAttractorMontage;                        // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_IntroSectionName;                                // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_LoopSectionName;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_OutroSectionName;                                // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_UrgentOutroSectionName;                          // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           m_BreakerSectionNames;                             // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttractorAnimationSet) == 0x000008, "Wrong alignment on FAttractorAnimationSet");
static_assert(sizeof(FAttractorAnimationSet) == 0x000070, "Wrong size on FAttractorAnimationSet");
static_assert(offsetof(FAttractorAnimationSet, m_AnimationFromAnimWeapon) == 0x000000, "Member 'FAttractorAnimationSet::m_AnimationFromAnimWeapon' has a wrong offset!");
static_assert(offsetof(FAttractorAnimationSet, m_CombinedAttractorMontagePtr) == 0x000008, "Member 'FAttractorAnimationSet::m_CombinedAttractorMontagePtr' has a wrong offset!");
static_assert(offsetof(FAttractorAnimationSet, m_CombinedAttractorMontage) == 0x000038, "Member 'FAttractorAnimationSet::m_CombinedAttractorMontage' has a wrong offset!");
static_assert(offsetof(FAttractorAnimationSet, m_IntroSectionName) == 0x000040, "Member 'FAttractorAnimationSet::m_IntroSectionName' has a wrong offset!");
static_assert(offsetof(FAttractorAnimationSet, m_LoopSectionName) == 0x000048, "Member 'FAttractorAnimationSet::m_LoopSectionName' has a wrong offset!");
static_assert(offsetof(FAttractorAnimationSet, m_OutroSectionName) == 0x000050, "Member 'FAttractorAnimationSet::m_OutroSectionName' has a wrong offset!");
static_assert(offsetof(FAttractorAnimationSet, m_UrgentOutroSectionName) == 0x000058, "Member 'FAttractorAnimationSet::m_UrgentOutroSectionName' has a wrong offset!");
static_assert(offsetof(FAttractorAnimationSet, m_BreakerSectionNames) == 0x000060, "Member 'FAttractorAnimationSet::m_BreakerSectionNames' has a wrong offset!");

// ScriptStruct DuneSandbox.MapFps
// 0x000C (0x000C - 0x0000)
struct FMapFps final
{
public:
	struct FEDuneMapId                            m_Map;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxFps;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapFps) == 0x000004, "Wrong alignment on FMapFps");
static_assert(sizeof(FMapFps) == 0x00000C, "Wrong size on FMapFps");
static_assert(offsetof(FMapFps, m_Map) == 0x000000, "Member 'FMapFps::m_Map' has a wrong offset!");
static_assert(offsetof(FMapFps, m_MaxFps) == 0x000008, "Member 'FMapFps::m_MaxFps' has a wrong offset!");

// ScriptStruct DuneSandbox.CameraClamps
// 0x0018 (0x0018 - 0x0000)
struct FCameraClamps final
{
public:
	float                                         ViewPitchMax;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewPitchMin;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewYawMax;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewYawMin;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewRollMax;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewRollMin;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraClamps) == 0x000004, "Wrong alignment on FCameraClamps");
static_assert(sizeof(FCameraClamps) == 0x000018, "Wrong size on FCameraClamps");
static_assert(offsetof(FCameraClamps, ViewPitchMax) == 0x000000, "Member 'FCameraClamps::ViewPitchMax' has a wrong offset!");
static_assert(offsetof(FCameraClamps, ViewPitchMin) == 0x000004, "Member 'FCameraClamps::ViewPitchMin' has a wrong offset!");
static_assert(offsetof(FCameraClamps, ViewYawMax) == 0x000008, "Member 'FCameraClamps::ViewYawMax' has a wrong offset!");
static_assert(offsetof(FCameraClamps, ViewYawMin) == 0x00000C, "Member 'FCameraClamps::ViewYawMin' has a wrong offset!");
static_assert(offsetof(FCameraClamps, ViewRollMax) == 0x000010, "Member 'FCameraClamps::ViewRollMax' has a wrong offset!");
static_assert(offsetof(FCameraClamps, ViewRollMin) == 0x000014, "Member 'FCameraClamps::ViewRollMin' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerInteractingEvent
// 0x0008 (0x0038 - 0x0030)
struct FPlayerInteractingEvent final : public FGameEvent
{
public:
	class UInteraction*                           m_Interaction;                                     // 0x0030(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerInteractingEvent) == 0x000008, "Wrong alignment on FPlayerInteractingEvent");
static_assert(sizeof(FPlayerInteractingEvent) == 0x000038, "Wrong size on FPlayerInteractingEvent");
static_assert(offsetof(FPlayerInteractingEvent, m_Interaction) == 0x000030, "Member 'FPlayerInteractingEvent::m_Interaction' has a wrong offset!");

// ScriptStruct DuneSandbox.TimerFeedbackPlayerComponentData
// 0x0030 (0x0030 - 0x0000)
struct FTimerFeedbackPlayerComponentData final
{
public:
	class FText                                   FeedbackText;                                      // 0x0000(0x0018)(Transient, NativeAccessSpecifierPublic)
	float                                         TargetTime;                                        // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x001C(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayRemainingTime;                             // 0x002C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimerFeedbackPlayerComponentData) == 0x000008, "Wrong alignment on FTimerFeedbackPlayerComponentData");
static_assert(sizeof(FTimerFeedbackPlayerComponentData) == 0x000030, "Wrong size on FTimerFeedbackPlayerComponentData");
static_assert(offsetof(FTimerFeedbackPlayerComponentData, FeedbackText) == 0x000000, "Member 'FTimerFeedbackPlayerComponentData::FeedbackText' has a wrong offset!");
static_assert(offsetof(FTimerFeedbackPlayerComponentData, TargetTime) == 0x000018, "Member 'FTimerFeedbackPlayerComponentData::TargetTime' has a wrong offset!");
static_assert(offsetof(FTimerFeedbackPlayerComponentData, BackgroundColor) == 0x00001C, "Member 'FTimerFeedbackPlayerComponentData::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FTimerFeedbackPlayerComponentData, bDisplayRemainingTime) == 0x00002C, "Member 'FTimerFeedbackPlayerComponentData::bDisplayRemainingTime' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetActionDataBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FCommuninetActionDataBase
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommuninetActionDataBase) == 0x000008, "Wrong alignment on FCommuninetActionDataBase");
static_assert(sizeof(FCommuninetActionDataBase) == 0x000010, "Wrong size on FCommuninetActionDataBase");

// ScriptStruct DuneSandbox.MeleeActionInputState
// 0x0008 (0x0008 - 0x0000)
struct FMeleeActionInputState final
{
public:
	EMeleeActionInputKey                          InputKey;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeleeActionInputMode                         InputMode;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeHeld;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeActionInputState) == 0x000004, "Wrong alignment on FMeleeActionInputState");
static_assert(sizeof(FMeleeActionInputState) == 0x000008, "Wrong size on FMeleeActionInputState");
static_assert(offsetof(FMeleeActionInputState, InputKey) == 0x000000, "Member 'FMeleeActionInputState::InputKey' has a wrong offset!");
static_assert(offsetof(FMeleeActionInputState, InputMode) == 0x000001, "Member 'FMeleeActionInputState::InputMode' has a wrong offset!");
static_assert(offsetof(FMeleeActionInputState, TimeHeld) == 0x000004, "Member 'FMeleeActionInputState::TimeHeld' has a wrong offset!");

// ScriptStruct DuneSandbox.ConditionEvaluationContext
// 0x0038 (0x0038 - 0x0000)
struct FConditionEvaluationContext final
{
public:
	bool                                          bIsRetrigger;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeleeActionInputKey                          LastPressedInputKey;                               // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeleeActionInputMode                         LastInputMode;                                     // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggeredByEvent;                                 // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSentFromClient;                                   // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetCharacter;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurrentMontageSection;                             // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMeleeActionInputState>         InputStates;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConditionEvaluationContext) == 0x000008, "Wrong alignment on FConditionEvaluationContext");
static_assert(sizeof(FConditionEvaluationContext) == 0x000038, "Wrong size on FConditionEvaluationContext");
static_assert(offsetof(FConditionEvaluationContext, bIsRetrigger) == 0x000000, "Member 'FConditionEvaluationContext::bIsRetrigger' has a wrong offset!");
static_assert(offsetof(FConditionEvaluationContext, LastPressedInputKey) == 0x000001, "Member 'FConditionEvaluationContext::LastPressedInputKey' has a wrong offset!");
static_assert(offsetof(FConditionEvaluationContext, LastInputMode) == 0x000002, "Member 'FConditionEvaluationContext::LastInputMode' has a wrong offset!");
static_assert(offsetof(FConditionEvaluationContext, bTriggeredByEvent) == 0x000003, "Member 'FConditionEvaluationContext::bTriggeredByEvent' has a wrong offset!");
static_assert(offsetof(FConditionEvaluationContext, bSentFromClient) == 0x000004, "Member 'FConditionEvaluationContext::bSentFromClient' has a wrong offset!");
static_assert(offsetof(FConditionEvaluationContext, TargetCharacter) == 0x000008, "Member 'FConditionEvaluationContext::TargetCharacter' has a wrong offset!");
static_assert(offsetof(FConditionEvaluationContext, Montage) == 0x000010, "Member 'FConditionEvaluationContext::Montage' has a wrong offset!");
static_assert(offsetof(FConditionEvaluationContext, CurrentMontageSection) == 0x000018, "Member 'FConditionEvaluationContext::CurrentMontageSection' has a wrong offset!");
static_assert(offsetof(FConditionEvaluationContext, InputStates) == 0x000020, "Member 'FConditionEvaluationContext::InputStates' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceRewardTimeSlice
// 0x0028 (0x0028 - 0x0000)
struct FResourceRewardTimeSlice final
{
public:
	struct FEItemTemplateID                       RewardType;                                        // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              Duration;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceRewardTimeSlice) == 0x000008, "Wrong alignment on FResourceRewardTimeSlice");
static_assert(sizeof(FResourceRewardTimeSlice) == 0x000028, "Wrong size on FResourceRewardTimeSlice");
static_assert(offsetof(FResourceRewardTimeSlice, RewardType) == 0x000000, "Member 'FResourceRewardTimeSlice::RewardType' has a wrong offset!");
static_assert(offsetof(FResourceRewardTimeSlice, Duration) == 0x000020, "Member 'FResourceRewardTimeSlice::Duration' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceVisionActorVariations
// 0x0148 (0x0158 - 0x0010)
struct FSpiceVisionActorVariations final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   m_SpiceVisionActorSoftPtr;                         // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpiceVisionActorType                         m_SpiceVisionActorType;                            // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USkeletalMesh>>   m_SkeletalMeshes;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UStaticMesh>>     m_StaticMeshes;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimMontage>>    m_AnimationMontages;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         m_MinSpawnDistance;                                // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxSpawnDistance;                                // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_FloatsAboveGround;                               // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_MinFloatHeight;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxFloatHeight;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinActorScale;                                   // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxActorScale;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AnimationPlayrate;                               // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DissolveThresholdClose;                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DissolveThresholdFar;                            // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_DissolveWhenAnimationIsFinished;                 // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ShouldPlayAnimation;                             // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ShouldLoopAnimation;                             // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_RotateToPlayerWhenSpawned;                       // 0x00A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_RotateToPlayerContinuously;                      // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFcAudioEvent>           m_VOEvent;                                         // 0x00A8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_FormingEvent;                                    // 0x00D8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_DissolvingEvent;                                 // 0x0108(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UNiagaraSystem>>  m_SurroundingActorVFX;                             // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UNiagaraSystem>>  m_DissolvingActorVFX;                              // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceVisionActorVariations) == 0x000008, "Wrong alignment on FSpiceVisionActorVariations");
static_assert(sizeof(FSpiceVisionActorVariations) == 0x000158, "Wrong size on FSpiceVisionActorVariations");
static_assert(offsetof(FSpiceVisionActorVariations, m_SpiceVisionActorSoftPtr) == 0x000010, "Member 'FSpiceVisionActorVariations::m_SpiceVisionActorSoftPtr' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_SpiceVisionActorType) == 0x000040, "Member 'FSpiceVisionActorVariations::m_SpiceVisionActorType' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_SkeletalMeshes) == 0x000048, "Member 'FSpiceVisionActorVariations::m_SkeletalMeshes' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_StaticMeshes) == 0x000058, "Member 'FSpiceVisionActorVariations::m_StaticMeshes' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_AnimationMontages) == 0x000068, "Member 'FSpiceVisionActorVariations::m_AnimationMontages' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_MinSpawnDistance) == 0x000078, "Member 'FSpiceVisionActorVariations::m_MinSpawnDistance' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_MaxSpawnDistance) == 0x00007C, "Member 'FSpiceVisionActorVariations::m_MaxSpawnDistance' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_FloatsAboveGround) == 0x000080, "Member 'FSpiceVisionActorVariations::m_FloatsAboveGround' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_MinFloatHeight) == 0x000084, "Member 'FSpiceVisionActorVariations::m_MinFloatHeight' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_MaxFloatHeight) == 0x000088, "Member 'FSpiceVisionActorVariations::m_MaxFloatHeight' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_MinActorScale) == 0x00008C, "Member 'FSpiceVisionActorVariations::m_MinActorScale' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_MaxActorScale) == 0x000090, "Member 'FSpiceVisionActorVariations::m_MaxActorScale' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_AnimationPlayrate) == 0x000094, "Member 'FSpiceVisionActorVariations::m_AnimationPlayrate' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_DissolveThresholdClose) == 0x000098, "Member 'FSpiceVisionActorVariations::m_DissolveThresholdClose' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_DissolveThresholdFar) == 0x00009C, "Member 'FSpiceVisionActorVariations::m_DissolveThresholdFar' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_DissolveWhenAnimationIsFinished) == 0x0000A0, "Member 'FSpiceVisionActorVariations::m_DissolveWhenAnimationIsFinished' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_ShouldPlayAnimation) == 0x0000A1, "Member 'FSpiceVisionActorVariations::m_ShouldPlayAnimation' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_ShouldLoopAnimation) == 0x0000A2, "Member 'FSpiceVisionActorVariations::m_ShouldLoopAnimation' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_RotateToPlayerWhenSpawned) == 0x0000A3, "Member 'FSpiceVisionActorVariations::m_RotateToPlayerWhenSpawned' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_RotateToPlayerContinuously) == 0x0000A4, "Member 'FSpiceVisionActorVariations::m_RotateToPlayerContinuously' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_VOEvent) == 0x0000A8, "Member 'FSpiceVisionActorVariations::m_VOEvent' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_FormingEvent) == 0x0000D8, "Member 'FSpiceVisionActorVariations::m_FormingEvent' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_DissolvingEvent) == 0x000108, "Member 'FSpiceVisionActorVariations::m_DissolvingEvent' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_SurroundingActorVFX) == 0x000138, "Member 'FSpiceVisionActorVariations::m_SurroundingActorVFX' has a wrong offset!");
static_assert(offsetof(FSpiceVisionActorVariations, m_DissolvingActorVFX) == 0x000148, "Member 'FSpiceVisionActorVariations::m_DissolvingActorVFX' has a wrong offset!");

// ScriptStruct DuneSandbox.PredictedInterpolator
// 0x000C (0x000C - 0x0000)
struct FPredictedInterpolator final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPredictedInterpolator) == 0x000004, "Wrong alignment on FPredictedInterpolator");
static_assert(sizeof(FPredictedInterpolator) == 0x00000C, "Wrong size on FPredictedInterpolator");
static_assert(offsetof(FPredictedInterpolator, Speed) == 0x000000, "Member 'FPredictedInterpolator::Speed' has a wrong offset!");
static_assert(offsetof(FPredictedInterpolator, TargetValue) == 0x000004, "Member 'FPredictedInterpolator::TargetValue' has a wrong offset!");

// ScriptStruct DuneSandbox.SuspensorBeltStats
// 0x0038 (0x0038 - 0x0000)
struct FSuspensorBeltStats final
{
public:
	uint8                                         m_bUsesStabilization : 1;                          // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bHasTerminalVelocityProtection : 1;              // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictedInterpolator                 m_MaxFallVelocityInterpolator;                     // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                VelocityMultiplier;                                // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAccelerationMultiplier;                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLateralFallFrictionAddition;                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScalar;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSuspensorBeltStats) == 0x000008, "Wrong alignment on FSuspensorBeltStats");
static_assert(sizeof(FSuspensorBeltStats) == 0x000038, "Wrong size on FSuspensorBeltStats");
static_assert(offsetof(FSuspensorBeltStats, m_MaxFallVelocityInterpolator) == 0x000004, "Member 'FSuspensorBeltStats::m_MaxFallVelocityInterpolator' has a wrong offset!");
static_assert(offsetof(FSuspensorBeltStats, VelocityMultiplier) == 0x000010, "Member 'FSuspensorBeltStats::VelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FSuspensorBeltStats, MaxAccelerationMultiplier) == 0x000028, "Member 'FSuspensorBeltStats::MaxAccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(FSuspensorBeltStats, MaxLateralFallFrictionAddition) == 0x00002C, "Member 'FSuspensorBeltStats::MaxLateralFallFrictionAddition' has a wrong offset!");
static_assert(offsetof(FSuspensorBeltStats, GravityScalar) == 0x000030, "Member 'FSuspensorBeltStats::GravityScalar' has a wrong offset!");

// ScriptStruct DuneSandbox.ContentBlockSetting
// 0x0030 (0x0030 - 0x0000)
struct FContentBlockSetting
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESurfaceSnappingType                          SnapType;                                          // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalSnappingOffsetByZ;                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentBlockSetting) == 0x000008, "Wrong alignment on FContentBlockSetting");
static_assert(sizeof(FContentBlockSetting) == 0x000030, "Wrong size on FContentBlockSetting");
static_assert(offsetof(FContentBlockSetting, Tags) == 0x000000, "Member 'FContentBlockSetting::Tags' has a wrong offset!");
static_assert(offsetof(FContentBlockSetting, SnapType) == 0x000020, "Member 'FContentBlockSetting::SnapType' has a wrong offset!");
static_assert(offsetof(FContentBlockSetting, AdditionalSnappingOffsetByZ) == 0x000024, "Member 'FContentBlockSetting::AdditionalSnappingOffsetByZ' has a wrong offset!");
static_assert(offsetof(FContentBlockSetting, Color) == 0x000028, "Member 'FContentBlockSetting::Color' has a wrong offset!");
static_assert(offsetof(FContentBlockSetting, bIsEnabled) == 0x00002C, "Member 'FContentBlockSetting::bIsEnabled' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleWeaponModuleStats
// 0x00B0 (0x00B0 - 0x0000)
struct FVehicleWeaponModuleStats final
{
public:
	TSoftClassPtr<class UClass>                   WeaponBaseClass;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WeaponAnimClass;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              WeaponHudIcon;                                     // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CharacterStateTag;                                 // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTurretWeapon;                                   // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsAimAssist;                                // 0x0099(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   m_AimAssistProfileName;                            // 0x009C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAmmunitionInventorySlots;                       // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x4];                                       // 0x00A8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_TurretModuleDecayedMaxDurability;                // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleWeaponModuleStats) == 0x000008, "Wrong alignment on FVehicleWeaponModuleStats");
static_assert(sizeof(FVehicleWeaponModuleStats) == 0x0000B0, "Wrong size on FVehicleWeaponModuleStats");
static_assert(offsetof(FVehicleWeaponModuleStats, WeaponBaseClass) == 0x000000, "Member 'FVehicleWeaponModuleStats::WeaponBaseClass' has a wrong offset!");
static_assert(offsetof(FVehicleWeaponModuleStats, WeaponAnimClass) == 0x000030, "Member 'FVehicleWeaponModuleStats::WeaponAnimClass' has a wrong offset!");
static_assert(offsetof(FVehicleWeaponModuleStats, WeaponHudIcon) == 0x000060, "Member 'FVehicleWeaponModuleStats::WeaponHudIcon' has a wrong offset!");
static_assert(offsetof(FVehicleWeaponModuleStats, CharacterStateTag) == 0x000090, "Member 'FVehicleWeaponModuleStats::CharacterStateTag' has a wrong offset!");
static_assert(offsetof(FVehicleWeaponModuleStats, bIsTurretWeapon) == 0x000098, "Member 'FVehicleWeaponModuleStats::bIsTurretWeapon' has a wrong offset!");
static_assert(offsetof(FVehicleWeaponModuleStats, bSupportsAimAssist) == 0x000099, "Member 'FVehicleWeaponModuleStats::bSupportsAimAssist' has a wrong offset!");
static_assert(offsetof(FVehicleWeaponModuleStats, m_AimAssistProfileName) == 0x00009C, "Member 'FVehicleWeaponModuleStats::m_AimAssistProfileName' has a wrong offset!");
static_assert(offsetof(FVehicleWeaponModuleStats, NumAmmunitionInventorySlots) == 0x0000A4, "Member 'FVehicleWeaponModuleStats::NumAmmunitionInventorySlots' has a wrong offset!");
static_assert(offsetof(FVehicleWeaponModuleStats, m_TurretModuleDecayedMaxDurability) == 0x0000AC, "Member 'FVehicleWeaponModuleStats::m_TurretModuleDecayedMaxDurability' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleWeaponModuleComponent_BlueprintWrapper
// 0x0230 (0x0230 - 0x0000)
struct FVehicleWeaponModuleComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x180];                                      // 0x0000(0x0180)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleWeaponModuleStats              VehicleWeaponModuleStats;                          // 0x0180(0x00B0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleWeaponModuleComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FVehicleWeaponModuleComponent_BlueprintWrapper");
static_assert(sizeof(FVehicleWeaponModuleComponent_BlueprintWrapper) == 0x000230, "Wrong size on FVehicleWeaponModuleComponent_BlueprintWrapper");
static_assert(offsetof(FVehicleWeaponModuleComponent_BlueprintWrapper, VehicleWeaponModuleStats) == 0x000180, "Member 'FVehicleWeaponModuleComponent_BlueprintWrapper::VehicleWeaponModuleStats' has a wrong offset!");

// ScriptStruct DuneSandbox.VoiceParams
// 0x0028 (0x0028 - 0x0000)
struct FVoiceParams final
{
public:
	int32                                         m_PresetIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_VoiceName;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          m_bIsBenchmarkPreset;                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoiceParams) == 0x000008, "Wrong alignment on FVoiceParams");
static_assert(sizeof(FVoiceParams) == 0x000028, "Wrong size on FVoiceParams");
static_assert(offsetof(FVoiceParams, m_PresetIndex) == 0x000000, "Member 'FVoiceParams::m_PresetIndex' has a wrong offset!");
static_assert(offsetof(FVoiceParams, m_VoiceName) == 0x000008, "Member 'FVoiceParams::m_VoiceName' has a wrong offset!");
static_assert(offsetof(FVoiceParams, m_bIsBenchmarkPreset) == 0x000020, "Member 'FVoiceParams::m_bIsBenchmarkPreset' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorHealthStateTransitions
// 0x0001 (0x0001 - 0x0000)
struct FActorHealthStateTransitions final
{
public:
	EHealthStateTransition                        m_Transition;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorHealthStateTransitions) == 0x000001, "Wrong alignment on FActorHealthStateTransitions");
static_assert(sizeof(FActorHealthStateTransitions) == 0x000001, "Wrong size on FActorHealthStateTransitions");
static_assert(offsetof(FActorHealthStateTransitions, m_Transition) == 0x000000, "Member 'FActorHealthStateTransitions::m_Transition' has a wrong offset!");

// ScriptStruct DuneSandbox.PermissionDatabaseEventRemoveRank
// 0x0010 (0x0010 - 0x0000)
struct FPermissionDatabaseEventRemoveRank final
{
public:
	int64                                         ActorId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermissionDatabaseEventRemoveRank) == 0x000008, "Wrong alignment on FPermissionDatabaseEventRemoveRank");
static_assert(sizeof(FPermissionDatabaseEventRemoveRank) == 0x000010, "Wrong size on FPermissionDatabaseEventRemoveRank");
static_assert(offsetof(FPermissionDatabaseEventRemoveRank, ActorId) == 0x000000, "Member 'FPermissionDatabaseEventRemoveRank::ActorId' has a wrong offset!");
static_assert(offsetof(FPermissionDatabaseEventRemoveRank, PlayerId) == 0x000008, "Member 'FPermissionDatabaseEventRemoveRank::PlayerId' has a wrong offset!");

// ScriptStruct DuneSandbox.SubtitleDataRowBase
// 0x0050 (0x0060 - 0x0010)
struct FSubtitleDataRowBase final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UObject>                 Asset;                                             // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubtitleDataRowBase) == 0x000008, "Wrong alignment on FSubtitleDataRowBase");
static_assert(sizeof(FSubtitleDataRowBase) == 0x000060, "Wrong size on FSubtitleDataRowBase");
static_assert(offsetof(FSubtitleDataRowBase, Asset) == 0x000010, "Member 'FSubtitleDataRowBase::Asset' has a wrong offset!");
static_assert(offsetof(FSubtitleDataRowBase, Text) == 0x000040, "Member 'FSubtitleDataRowBase::Text' has a wrong offset!");
static_assert(offsetof(FSubtitleDataRowBase, Time) == 0x000058, "Member 'FSubtitleDataRowBase::Time' has a wrong offset!");

// ScriptStruct DuneSandbox.DamageableComponent
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FDamageableComponent final
{
public:
	uint8                                         Pad_0[0x64];                                       // 0x0000(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstigatorInfo                        m_DefeaterInfo;                                    // 0x0064(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageableComponent) == 0x000008, "Wrong alignment on FDamageableComponent");
static_assert(sizeof(FDamageableComponent) == 0x000078, "Wrong size on FDamageableComponent");
static_assert(offsetof(FDamageableComponent, m_DefeaterInfo) == 0x000064, "Member 'FDamageableComponent::m_DefeaterInfo' has a wrong offset!");

// ScriptStruct DuneSandbox.PatrolShipState
// 0x0020 (0x0020 - 0x0000)
struct FPatrolShipState final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchLightPatternCurveCurrentKey;                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPatrolShipMovementState                      MovementState;                                     // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPatrolShipAttackState                        AttackState;                                       // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementSpeedMultiplier;                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMovementSpeed;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         timestamp;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TrackedTarget;                                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolShipState) == 0x000008, "Wrong alignment on FPatrolShipState");
static_assert(sizeof(FPatrolShipState) == 0x000020, "Wrong size on FPatrolShipState");
static_assert(offsetof(FPatrolShipState, Progress) == 0x000000, "Member 'FPatrolShipState::Progress' has a wrong offset!");
static_assert(offsetof(FPatrolShipState, SearchLightPatternCurveCurrentKey) == 0x000004, "Member 'FPatrolShipState::SearchLightPatternCurveCurrentKey' has a wrong offset!");
static_assert(offsetof(FPatrolShipState, MovementState) == 0x000008, "Member 'FPatrolShipState::MovementState' has a wrong offset!");
static_assert(offsetof(FPatrolShipState, AttackState) == 0x000009, "Member 'FPatrolShipState::AttackState' has a wrong offset!");
static_assert(offsetof(FPatrolShipState, MovementSpeedMultiplier) == 0x00000C, "Member 'FPatrolShipState::MovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FPatrolShipState, CurrentMovementSpeed) == 0x000010, "Member 'FPatrolShipState::CurrentMovementSpeed' has a wrong offset!");
static_assert(offsetof(FPatrolShipState, timestamp) == 0x000014, "Member 'FPatrolShipState::timestamp' has a wrong offset!");
static_assert(offsetof(FPatrolShipState, TrackedTarget) == 0x000018, "Member 'FPatrolShipState::TrackedTarget' has a wrong offset!");

// ScriptStruct DuneSandbox.DeathMontages
// 0x0038 (0x0038 - 0x0000)
struct FDeathMontages final
{
public:
	int32                                         HitFromDirectionFlags;                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimMontageHolder>             CrouchingAnimations;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimMontageHolder>             StandingAnimations;                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimMontageHolder>             DBNOAnimations;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeathMontages) == 0x000008, "Wrong alignment on FDeathMontages");
static_assert(sizeof(FDeathMontages) == 0x000038, "Wrong size on FDeathMontages");
static_assert(offsetof(FDeathMontages, HitFromDirectionFlags) == 0x000000, "Member 'FDeathMontages::HitFromDirectionFlags' has a wrong offset!");
static_assert(offsetof(FDeathMontages, CrouchingAnimations) == 0x000008, "Member 'FDeathMontages::CrouchingAnimations' has a wrong offset!");
static_assert(offsetof(FDeathMontages, StandingAnimations) == 0x000018, "Member 'FDeathMontages::StandingAnimations' has a wrong offset!");
static_assert(offsetof(FDeathMontages, DBNOAnimations) == 0x000028, "Member 'FDeathMontages::DBNOAnimations' has a wrong offset!");

// ScriptStruct DuneSandbox.DeathAnimationSettings
// 0x0018 (0x0018 - 0x0000)
struct FDeathAnimationSettings final
{
public:
	int32                                         WeaponTypeFlags;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitLocationFlags;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDeathMontages>                 DeathAnimations;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeathAnimationSettings) == 0x000008, "Wrong alignment on FDeathAnimationSettings");
static_assert(sizeof(FDeathAnimationSettings) == 0x000018, "Wrong size on FDeathAnimationSettings");
static_assert(offsetof(FDeathAnimationSettings, WeaponTypeFlags) == 0x000000, "Member 'FDeathAnimationSettings::WeaponTypeFlags' has a wrong offset!");
static_assert(offsetof(FDeathAnimationSettings, HitLocationFlags) == 0x000004, "Member 'FDeathAnimationSettings::HitLocationFlags' has a wrong offset!");
static_assert(offsetof(FDeathAnimationSettings, DeathAnimations) == 0x000008, "Member 'FDeathAnimationSettings::DeathAnimations' has a wrong offset!");

// ScriptStruct DuneSandbox.DeathAnimSettingsRowBase
// 0x0018 (0x0028 - 0x0010)
struct FDeathAnimSettingsRowBase final : public FTableRowBase
{
public:
	bool                                          bUseDirection;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLocation;                                      // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDeathAnimationSettings>        DeathAnimationSettings;                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeathAnimSettingsRowBase) == 0x000008, "Wrong alignment on FDeathAnimSettingsRowBase");
static_assert(sizeof(FDeathAnimSettingsRowBase) == 0x000028, "Wrong size on FDeathAnimSettingsRowBase");
static_assert(offsetof(FDeathAnimSettingsRowBase, bUseDirection) == 0x000010, "Member 'FDeathAnimSettingsRowBase::bUseDirection' has a wrong offset!");
static_assert(offsetof(FDeathAnimSettingsRowBase, bUseLocation) == 0x000011, "Member 'FDeathAnimSettingsRowBase::bUseLocation' has a wrong offset!");
static_assert(offsetof(FDeathAnimSettingsRowBase, DeathAnimationSettings) == 0x000018, "Member 'FDeathAnimSettingsRowBase::DeathAnimationSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.BurrowingDart
// 0x0080 (0x0080 - 0x0000)
struct FBurrowingDart final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirection;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDuneDamageType>            DamageTypeClass;                                   // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurrowTime;                                        // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBurrowTime;                                     // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageOnPenetrate;                                 // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       PoiseDamageOnPenetrate;                            // 0x0054(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PowerDrain;                                        // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowDamageRate;                                    // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBurrowDartState                              BurrowState;                                       // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DamageSourceName;                                  // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBurrowingDart) == 0x000008, "Wrong alignment on FBurrowingDart");
static_assert(sizeof(FBurrowingDart) == 0x000080, "Wrong size on FBurrowingDart");
static_assert(offsetof(FBurrowingDart, HitLocation) == 0x000000, "Member 'FBurrowingDart::HitLocation' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, HitDirection) == 0x000018, "Member 'FBurrowingDart::HitDirection' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, Instigator) == 0x000030, "Member 'FBurrowingDart::Instigator' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, InstigatorController) == 0x000038, "Member 'FBurrowingDart::InstigatorController' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, DamageTypeClass) == 0x000040, "Member 'FBurrowingDart::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, BurrowTime) == 0x000048, "Member 'FBurrowingDart::BurrowTime' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, MaxBurrowTime) == 0x00004C, "Member 'FBurrowingDart::MaxBurrowTime' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, DamageOnPenetrate) == 0x000050, "Member 'FBurrowingDart::DamageOnPenetrate' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, PoiseDamageOnPenetrate) == 0x000054, "Member 'FBurrowingDart::PoiseDamageOnPenetrate' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, PowerDrain) == 0x000060, "Member 'FBurrowingDart::PowerDrain' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, SlowDamageRate) == 0x000064, "Member 'FBurrowingDart::SlowDamageRate' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, BurrowState) == 0x000068, "Member 'FBurrowingDart::BurrowState' has a wrong offset!");
static_assert(offsetof(FBurrowingDart, DamageSourceName) == 0x000070, "Member 'FBurrowingDart::DamageSourceName' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableEvent
// 0x0028 (0x0058 - 0x0030)
struct FBuildableEvent : public FGameEvent
{
public:
	EInstigatorType                               m_CauserType;                                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              m_CauserId;                                        // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_CauserName;                                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_BuildableName;                                   // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableEvent) == 0x000008, "Wrong alignment on FBuildableEvent");
static_assert(sizeof(FBuildableEvent) == 0x000058, "Wrong size on FBuildableEvent");
static_assert(offsetof(FBuildableEvent, m_CauserType) == 0x000030, "Member 'FBuildableEvent::m_CauserType' has a wrong offset!");
static_assert(offsetof(FBuildableEvent, m_CauserId) == 0x000038, "Member 'FBuildableEvent::m_CauserId' has a wrong offset!");
static_assert(offsetof(FBuildableEvent, m_CauserName) == 0x000040, "Member 'FBuildableEvent::m_CauserName' has a wrong offset!");
static_assert(offsetof(FBuildableEvent, m_BuildableName) == 0x000048, "Member 'FBuildableEvent::m_BuildableName' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleAbandonedEvent
// 0x0008 (0x0060 - 0x0058)
struct FVehicleAbandonedEvent final : public FBuildableEvent
{
public:
	struct FUniqueID                              m_VehicleID;                                       // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleAbandonedEvent) == 0x000008, "Wrong alignment on FVehicleAbandonedEvent");
static_assert(sizeof(FVehicleAbandonedEvent) == 0x000060, "Wrong size on FVehicleAbandonedEvent");
static_assert(offsetof(FVehicleAbandonedEvent, m_VehicleID) == 0x000058, "Member 'FVehicleAbandonedEvent::m_VehicleID' has a wrong offset!");

// ScriptStruct DuneSandbox.CartographyMapRevealConditions
// 0x0010 (0x0010 - 0x0000)
struct FCartographyMapRevealConditions final
{
public:
	class FString                                 RequiredJourneyNodeName;                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCartographyMapRevealConditions) == 0x000008, "Wrong alignment on FCartographyMapRevealConditions");
static_assert(sizeof(FCartographyMapRevealConditions) == 0x000010, "Wrong size on FCartographyMapRevealConditions");
static_assert(offsetof(FCartographyMapRevealConditions, RequiredJourneyNodeName) == 0x000000, "Member 'FCartographyMapRevealConditions::RequiredJourneyNodeName' has a wrong offset!");

// ScriptStruct DuneSandbox.DeteriorationStats
// 0x002C (0x002C - 0x0000)
struct FDeteriorationStats final
{
public:
	float                                         DeteriorationScale;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UsageDeterioration;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurabilityDamagePercent;                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageDone;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefeatDurabilityLoss;                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DBNODurabilityLoss;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceLastDurabilityUpdate;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuousUsageDeteriorationTickLenght;            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuousUsageDeteriorationAmountPerUpdate;       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceLastContinuosDurabilityUpdate;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemDurabilityChangeSource                   LastDurabilityChangeSource;                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeteriorationStats) == 0x000004, "Wrong alignment on FDeteriorationStats");
static_assert(sizeof(FDeteriorationStats) == 0x00002C, "Wrong size on FDeteriorationStats");
static_assert(offsetof(FDeteriorationStats, DeteriorationScale) == 0x000000, "Member 'FDeteriorationStats::DeteriorationScale' has a wrong offset!");
static_assert(offsetof(FDeteriorationStats, UsageDeterioration) == 0x000004, "Member 'FDeteriorationStats::UsageDeterioration' has a wrong offset!");
static_assert(offsetof(FDeteriorationStats, DurabilityDamagePercent) == 0x000008, "Member 'FDeteriorationStats::DurabilityDamagePercent' has a wrong offset!");
static_assert(offsetof(FDeteriorationStats, DamageDone) == 0x00000C, "Member 'FDeteriorationStats::DamageDone' has a wrong offset!");
static_assert(offsetof(FDeteriorationStats, DefeatDurabilityLoss) == 0x000010, "Member 'FDeteriorationStats::DefeatDurabilityLoss' has a wrong offset!");
static_assert(offsetof(FDeteriorationStats, DBNODurabilityLoss) == 0x000014, "Member 'FDeteriorationStats::DBNODurabilityLoss' has a wrong offset!");
static_assert(offsetof(FDeteriorationStats, TimeSinceLastDurabilityUpdate) == 0x000018, "Member 'FDeteriorationStats::TimeSinceLastDurabilityUpdate' has a wrong offset!");
static_assert(offsetof(FDeteriorationStats, ContinuousUsageDeteriorationTickLenght) == 0x00001C, "Member 'FDeteriorationStats::ContinuousUsageDeteriorationTickLenght' has a wrong offset!");
static_assert(offsetof(FDeteriorationStats, ContinuousUsageDeteriorationAmountPerUpdate) == 0x000020, "Member 'FDeteriorationStats::ContinuousUsageDeteriorationAmountPerUpdate' has a wrong offset!");
static_assert(offsetof(FDeteriorationStats, TimeSinceLastContinuosDurabilityUpdate) == 0x000024, "Member 'FDeteriorationStats::TimeSinceLastContinuosDurabilityUpdate' has a wrong offset!");
static_assert(offsetof(FDeteriorationStats, LastDurabilityChangeSource) == 0x000028, "Member 'FDeteriorationStats::LastDurabilityChangeSource' has a wrong offset!");

// ScriptStruct DuneSandbox.PerishableItemTableRow
// 0x0030 (0x0040 - 0x0010)
struct FPerishableItemTableRow final : public FTableRowBase
{
public:
	struct FDeteriorationStats                    DeteriorationStats;                                // 0x0010(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerishableItemTableRow) == 0x000008, "Wrong alignment on FPerishableItemTableRow");
static_assert(sizeof(FPerishableItemTableRow) == 0x000040, "Wrong size on FPerishableItemTableRow");
static_assert(offsetof(FPerishableItemTableRow, DeteriorationStats) == 0x000010, "Member 'FPerishableItemTableRow::DeteriorationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.CritterSpawningConfig
// 0x0038 (0x0038 - 0x0000)
struct FCritterSpawningConfig final
{
public:
	TSubclassOf<class AActor>                     CritterClass;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ConfigDataTableRowHandle;                          // 0x0008(0x0010)(Edit, Config, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpawnAttemptRateInSeconds;                         // 0x0018(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnChance;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnMinDistanceFromPlayer;                        // 0x0020(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnMaxDistanceFromPlayer;                        // 0x0024(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSpawnOnGround;                              // 0x0028(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnMinHeightOffset;                              // 0x002C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnMaxHeightOffset;                              // 0x0030(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifetimeInSeconds;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCritterSpawningConfig) == 0x000008, "Wrong alignment on FCritterSpawningConfig");
static_assert(sizeof(FCritterSpawningConfig) == 0x000038, "Wrong size on FCritterSpawningConfig");
static_assert(offsetof(FCritterSpawningConfig, CritterClass) == 0x000000, "Member 'FCritterSpawningConfig::CritterClass' has a wrong offset!");
static_assert(offsetof(FCritterSpawningConfig, ConfigDataTableRowHandle) == 0x000008, "Member 'FCritterSpawningConfig::ConfigDataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FCritterSpawningConfig, SpawnAttemptRateInSeconds) == 0x000018, "Member 'FCritterSpawningConfig::SpawnAttemptRateInSeconds' has a wrong offset!");
static_assert(offsetof(FCritterSpawningConfig, SpawnChance) == 0x00001C, "Member 'FCritterSpawningConfig::SpawnChance' has a wrong offset!");
static_assert(offsetof(FCritterSpawningConfig, SpawnMinDistanceFromPlayer) == 0x000020, "Member 'FCritterSpawningConfig::SpawnMinDistanceFromPlayer' has a wrong offset!");
static_assert(offsetof(FCritterSpawningConfig, SpawnMaxDistanceFromPlayer) == 0x000024, "Member 'FCritterSpawningConfig::SpawnMaxDistanceFromPlayer' has a wrong offset!");
static_assert(offsetof(FCritterSpawningConfig, bShouldSpawnOnGround) == 0x000028, "Member 'FCritterSpawningConfig::bShouldSpawnOnGround' has a wrong offset!");
static_assert(offsetof(FCritterSpawningConfig, SpawnMinHeightOffset) == 0x00002C, "Member 'FCritterSpawningConfig::SpawnMinHeightOffset' has a wrong offset!");
static_assert(offsetof(FCritterSpawningConfig, SpawnMaxHeightOffset) == 0x000030, "Member 'FCritterSpawningConfig::SpawnMaxHeightOffset' has a wrong offset!");
static_assert(offsetof(FCritterSpawningConfig, LifetimeInSeconds) == 0x000034, "Member 'FCritterSpawningConfig::LifetimeInSeconds' has a wrong offset!");

// ScriptStruct DuneSandbox.CritterSettings
// 0x0018 (0x0018 - 0x0000)
struct FCritterSettings final
{
public:
	TArray<struct FCritterSpawningConfig>         CritterSpawningConfigs;                            // 0x0000(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         CritterSpawningProcessorsTickRate;                 // 0x0010(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCritterSettings) == 0x000008, "Wrong alignment on FCritterSettings");
static_assert(sizeof(FCritterSettings) == 0x000018, "Wrong size on FCritterSettings");
static_assert(offsetof(FCritterSettings, CritterSpawningConfigs) == 0x000000, "Member 'FCritterSettings::CritterSpawningConfigs' has a wrong offset!");
static_assert(offsetof(FCritterSettings, CritterSpawningProcessorsTickRate) == 0x000010, "Member 'FCritterSettings::CritterSpawningProcessorsTickRate' has a wrong offset!");

// ScriptStruct DuneSandbox.InputContextEntry
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FInputContextEntry final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputContextEntry) == 0x000008, "Wrong alignment on FInputContextEntry");
static_assert(sizeof(FInputContextEntry) == 0x000020, "Wrong size on FInputContextEntry");

// ScriptStruct DuneSandbox.JourneyProgressionStatePreset
// 0x0070 (0x0070 - 0x0000)
struct FJourneyProgressionStatePreset final
{
public:
	TArray<class FString>                         RevealedJourneys;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         CompletedJourneys;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AddTags;                                           // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RemoveTags;                                        // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGameItemInfo>                  ItemsGranted;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJourneyProgressionStatePreset) == 0x000008, "Wrong alignment on FJourneyProgressionStatePreset");
static_assert(sizeof(FJourneyProgressionStatePreset) == 0x000070, "Wrong size on FJourneyProgressionStatePreset");
static_assert(offsetof(FJourneyProgressionStatePreset, RevealedJourneys) == 0x000000, "Member 'FJourneyProgressionStatePreset::RevealedJourneys' has a wrong offset!");
static_assert(offsetof(FJourneyProgressionStatePreset, CompletedJourneys) == 0x000010, "Member 'FJourneyProgressionStatePreset::CompletedJourneys' has a wrong offset!");
static_assert(offsetof(FJourneyProgressionStatePreset, AddTags) == 0x000020, "Member 'FJourneyProgressionStatePreset::AddTags' has a wrong offset!");
static_assert(offsetof(FJourneyProgressionStatePreset, RemoveTags) == 0x000040, "Member 'FJourneyProgressionStatePreset::RemoveTags' has a wrong offset!");
static_assert(offsetof(FJourneyProgressionStatePreset, ItemsGranted) == 0x000060, "Member 'FJourneyProgressionStatePreset::ItemsGranted' has a wrong offset!");

// ScriptStruct DuneSandbox.FriendInfo
// 0x0060 (0x0060 - 0x0000)
struct FFriendInfo final
{
public:
	struct FUniqueNetIdRepl                       m_FlsId;                                           // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_FuncomId;                                        // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerPresenceState                          m_PlayerPresenceState;                             // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerInviteState                            m_PlayerInviteState;                               // 0x0049(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              m_LastOnline;                                      // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsPlatformFriend;                               // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendInfo) == 0x000008, "Wrong alignment on FFriendInfo");
static_assert(sizeof(FFriendInfo) == 0x000060, "Wrong size on FFriendInfo");
static_assert(offsetof(FFriendInfo, m_FlsId) == 0x000000, "Member 'FFriendInfo::m_FlsId' has a wrong offset!");
static_assert(offsetof(FFriendInfo, m_FuncomId) == 0x000038, "Member 'FFriendInfo::m_FuncomId' has a wrong offset!");
static_assert(offsetof(FFriendInfo, m_PlayerPresenceState) == 0x000048, "Member 'FFriendInfo::m_PlayerPresenceState' has a wrong offset!");
static_assert(offsetof(FFriendInfo, m_PlayerInviteState) == 0x000049, "Member 'FFriendInfo::m_PlayerInviteState' has a wrong offset!");
static_assert(offsetof(FFriendInfo, m_LastOnline) == 0x000050, "Member 'FFriendInfo::m_LastOnline' has a wrong offset!");
static_assert(offsetof(FFriendInfo, m_bIsPlatformFriend) == 0x000058, "Member 'FFriendInfo::m_bIsPlatformFriend' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableStructureCategoryTypeStatuses
// 0x0050 (0x0050 - 0x0000)
struct FEBuildableStructureCategoryTypeStatuses final
{
public:
	TMap<struct FEBuildableStructureCategoryType, int32> RestrictionStatuses;                        // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FEBuildableStructureCategoryTypeStatuses) == 0x000008, "Wrong alignment on FEBuildableStructureCategoryTypeStatuses");
static_assert(sizeof(FEBuildableStructureCategoryTypeStatuses) == 0x000050, "Wrong size on FEBuildableStructureCategoryTypeStatuses");
static_assert(offsetof(FEBuildableStructureCategoryTypeStatuses, RestrictionStatuses) == 0x000000, "Member 'FEBuildableStructureCategoryTypeStatuses::RestrictionStatuses' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableUiCategory
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableUiCategory final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableUiCategory) == 0x000004, "Wrong alignment on FEBuildableUiCategory");
static_assert(sizeof(FEBuildableUiCategory) == 0x000008, "Wrong size on FEBuildableUiCategory");

// ScriptStruct DuneSandbox.InteractionDataRowBase
// 0x0050 (0x0060 - 0x0010)
struct FInteractionDataRowBase final : public FTableRowBase
{
public:
	TArray<class FName>                           m_Criterias;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EInteractionTraceType                         m_TraceType;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_Actions;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEInputContext                         m_InputContext;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_DisplayName;                                     // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          m_bShowFeedback;                                   // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bSupportsIgw;                                    // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bBlockByLifespan;                                // 0x005A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractionDataRowBase) == 0x000008, "Wrong alignment on FInteractionDataRowBase");
static_assert(sizeof(FInteractionDataRowBase) == 0x000060, "Wrong size on FInteractionDataRowBase");
static_assert(offsetof(FInteractionDataRowBase, m_Criterias) == 0x000010, "Member 'FInteractionDataRowBase::m_Criterias' has a wrong offset!");
static_assert(offsetof(FInteractionDataRowBase, m_TraceType) == 0x000020, "Member 'FInteractionDataRowBase::m_TraceType' has a wrong offset!");
static_assert(offsetof(FInteractionDataRowBase, m_Actions) == 0x000028, "Member 'FInteractionDataRowBase::m_Actions' has a wrong offset!");
static_assert(offsetof(FInteractionDataRowBase, m_InputContext) == 0x000038, "Member 'FInteractionDataRowBase::m_InputContext' has a wrong offset!");
static_assert(offsetof(FInteractionDataRowBase, m_DisplayName) == 0x000040, "Member 'FInteractionDataRowBase::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FInteractionDataRowBase, m_bShowFeedback) == 0x000058, "Member 'FInteractionDataRowBase::m_bShowFeedback' has a wrong offset!");
static_assert(offsetof(FInteractionDataRowBase, m_bSupportsIgw) == 0x000059, "Member 'FInteractionDataRowBase::m_bSupportsIgw' has a wrong offset!");
static_assert(offsetof(FInteractionDataRowBase, m_bBlockByLifespan) == 0x00005A, "Member 'FInteractionDataRowBase::m_bBlockByLifespan' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableItemStats
// 0x0008 (0x0008 - 0x0000)
struct FBuildableItemStats final
{
public:
	class FName                                   BuildableType;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableItemStats) == 0x000004, "Wrong alignment on FBuildableItemStats");
static_assert(sizeof(FBuildableItemStats) == 0x000008, "Wrong size on FBuildableItemStats");
static_assert(offsetof(FBuildableItemStats, BuildableType) == 0x000000, "Member 'FBuildableItemStats::BuildableType' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableItemTableRow
// 0x0008 (0x0018 - 0x0010)
struct FBuildableItemTableRow final : public FTableRowBase
{
public:
	struct FBuildableItemStats                    BuildableStats;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableItemTableRow) == 0x000008, "Wrong alignment on FBuildableItemTableRow");
static_assert(sizeof(FBuildableItemTableRow) == 0x000018, "Wrong size on FBuildableItemTableRow");
static_assert(offsetof(FBuildableItemTableRow, BuildableStats) == 0x000010, "Member 'FBuildableItemTableRow::BuildableStats' has a wrong offset!");

// ScriptStruct DuneSandbox.ElodComponent
// 0x0020 (0x0020 - 0x0000)
struct FElodComponent final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LodFactor;                                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RemainingInvocationTime;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x1];                                       // 0x001C(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ELodLevel                                     m_LodLevel;                                        // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FElodComponent) == 0x000004, "Wrong alignment on FElodComponent");
static_assert(sizeof(FElodComponent) == 0x000020, "Wrong size on FElodComponent");
static_assert(offsetof(FElodComponent, m_LodFactor) == 0x000014, "Member 'FElodComponent::m_LodFactor' has a wrong offset!");
static_assert(offsetof(FElodComponent, m_RemainingInvocationTime) == 0x000018, "Member 'FElodComponent::m_RemainingInvocationTime' has a wrong offset!");
static_assert(offsetof(FElodComponent, m_LodLevel) == 0x00001D, "Member 'FElodComponent::m_LodLevel' has a wrong offset!");

// ScriptStruct DuneSandbox.EIconLayerPresets
// 0x0000 (0x0008 - 0x0008)
struct FEIconLayerPresets final : public FStringEnumValue
{
};
static_assert(alignof(FEIconLayerPresets) == 0x000004, "Wrong alignment on FEIconLayerPresets");
static_assert(sizeof(FEIconLayerPresets) == 0x000008, "Wrong size on FEIconLayerPresets");

// ScriptStruct DuneSandbox.IconLayer
// 0x0038 (0x0038 - 0x0000)
struct FIconLayer final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEIconLayerPresets                     LayerPreset;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIconLayer) == 0x000008, "Wrong alignment on FIconLayer");
static_assert(sizeof(FIconLayer) == 0x000038, "Wrong size on FIconLayer");
static_assert(offsetof(FIconLayer, Icon) == 0x000000, "Member 'FIconLayer::Icon' has a wrong offset!");
static_assert(offsetof(FIconLayer, LayerPreset) == 0x000030, "Member 'FIconLayer::LayerPreset' has a wrong offset!");

// ScriptStruct DuneSandbox.ExtraStatUIData
// 0x0030 (0x0030 - 0x0000)
struct FExtraStatUIData final
{
public:
	struct FCurveTableRowHandle                   Stat;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DescriptionShort;                                  // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bPercentBased;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExtraStatUIData) == 0x000008, "Wrong alignment on FExtraStatUIData");
static_assert(sizeof(FExtraStatUIData) == 0x000030, "Wrong size on FExtraStatUIData");
static_assert(offsetof(FExtraStatUIData, Stat) == 0x000000, "Member 'FExtraStatUIData::Stat' has a wrong offset!");
static_assert(offsetof(FExtraStatUIData, DescriptionShort) == 0x000010, "Member 'FExtraStatUIData::DescriptionShort' has a wrong offset!");
static_assert(offsetof(FExtraStatUIData, bPercentBased) == 0x000028, "Member 'FExtraStatUIData::bPercentBased' has a wrong offset!");

// ScriptStruct DuneSandbox.GameItemStaticData
// 0x01A8 (0x01A8 - 0x0000)
struct FGameItemStaticData final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ShortDesc;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   LongDesc;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Location;                                          // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       TemplateId;                                        // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              DatabaseId;                                        // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEGameItemAudioCategory                AudioCategory;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ItemTags;                                          // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UInfoCardDataAsset*                     InfoCard;                                          // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxQuantity;                                       // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseBuyFromVendorPrice;                            // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameItemActions*                       ActionsObject;                                     // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemInventory*                         OwnerInventory;                                    // 0x00C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AcquisitionTime;                                   // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemSize;                                          // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepairDurabilityPercentageDecay;                   // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                SubInventoryType;                                  // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FGameplayTag>                     CharacterStateTags;                                // 0x00E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDroppedOnDeath;                                 // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDropOnDefeat;                                // 0x0132(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDroppedOnDefeat;                                // 0x0133(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivatesCompass;                                 // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FExtraStatUIData>               ExtraStatsUIData;                                  // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x50];                                     // 0x0148(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsSlotless;                                       // 0x0198(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_199[0xF];                                      // 0x0199(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameItemStaticData) == 0x000008, "Wrong alignment on FGameItemStaticData");
static_assert(sizeof(FGameItemStaticData) == 0x0001A8, "Wrong size on FGameItemStaticData");
static_assert(offsetof(FGameItemStaticData, Name) == 0x000000, "Member 'FGameItemStaticData::Name' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, ShortDesc) == 0x000018, "Member 'FGameItemStaticData::ShortDesc' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, LongDesc) == 0x000030, "Member 'FGameItemStaticData::LongDesc' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, Location) == 0x000048, "Member 'FGameItemStaticData::Location' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, TemplateId) == 0x000060, "Member 'FGameItemStaticData::TemplateId' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, DatabaseId) == 0x000070, "Member 'FGameItemStaticData::DatabaseId' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, AudioCategory) == 0x000078, "Member 'FGameItemStaticData::AudioCategory' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, ItemTags) == 0x000080, "Member 'FGameItemStaticData::ItemTags' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, InfoCard) == 0x0000A0, "Member 'FGameItemStaticData::InfoCard' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, bIsEnabled) == 0x0000A8, "Member 'FGameItemStaticData::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, MaxQuantity) == 0x0000AC, "Member 'FGameItemStaticData::MaxQuantity' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, BaseBuyFromVendorPrice) == 0x0000B0, "Member 'FGameItemStaticData::BaseBuyFromVendorPrice' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, ActionsObject) == 0x0000B8, "Member 'FGameItemStaticData::ActionsObject' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, OwnerInventory) == 0x0000C0, "Member 'FGameItemStaticData::OwnerInventory' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, AcquisitionTime) == 0x0000C8, "Member 'FGameItemStaticData::AcquisitionTime' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, ItemSize) == 0x0000D0, "Member 'FGameItemStaticData::ItemSize' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, RepairDurabilityPercentageDecay) == 0x0000D4, "Member 'FGameItemStaticData::RepairDurabilityPercentageDecay' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, SubInventoryType) == 0x0000D8, "Member 'FGameItemStaticData::SubInventoryType' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, CharacterStateTags) == 0x0000E0, "Member 'FGameItemStaticData::CharacterStateTags' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, bIsNew) == 0x000130, "Member 'FGameItemStaticData::bIsNew' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, bIsDroppedOnDeath) == 0x000131, "Member 'FGameItemStaticData::bIsDroppedOnDeath' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, bForceDropOnDefeat) == 0x000132, "Member 'FGameItemStaticData::bForceDropOnDefeat' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, bIsDroppedOnDefeat) == 0x000133, "Member 'FGameItemStaticData::bIsDroppedOnDefeat' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, bActivatesCompass) == 0x000134, "Member 'FGameItemStaticData::bActivatesCompass' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, ExtraStatsUIData) == 0x000138, "Member 'FGameItemStaticData::ExtraStatsUIData' has a wrong offset!");
static_assert(offsetof(FGameItemStaticData, bIsSlotless) == 0x000198, "Member 'FGameItemStaticData::bIsSlotless' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemStackAndDurabilityStats
// 0x0010 (0x0010 - 0x0000)
struct FItemStackAndDurabilityStats final
{
public:
	int32                                         MaxStackSize;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDurability;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayedMaxDurability;                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentDurability;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemStackAndDurabilityStats) == 0x000004, "Wrong alignment on FItemStackAndDurabilityStats");
static_assert(sizeof(FItemStackAndDurabilityStats) == 0x000010, "Wrong size on FItemStackAndDurabilityStats");
static_assert(offsetof(FItemStackAndDurabilityStats, MaxStackSize) == 0x000000, "Member 'FItemStackAndDurabilityStats::MaxStackSize' has a wrong offset!");
static_assert(offsetof(FItemStackAndDurabilityStats, MaxDurability) == 0x000004, "Member 'FItemStackAndDurabilityStats::MaxDurability' has a wrong offset!");
static_assert(offsetof(FItemStackAndDurabilityStats, DecayedMaxDurability) == 0x000008, "Member 'FItemStackAndDurabilityStats::DecayedMaxDurability' has a wrong offset!");
static_assert(offsetof(FItemStackAndDurabilityStats, CurrentDurability) == 0x00000C, "Member 'FItemStackAndDurabilityStats::CurrentDurability' has a wrong offset!");

// ScriptStruct DuneSandbox.BaseItemTableRow
// 0x0278 (0x0288 - 0x0010)
struct FBaseItemTableRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIconLayer>                     IconLayers;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SimpleIcon;                                        // 0x0050(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RenderedIcon;                                      // 0x0080(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameItemActions>           ActionsClass;                                      // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameItemStaticData                    StaticData;                                        // 0x00B8(0x01A8)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FItemStackAndDurabilityStats           StackAndDurability;                                // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsDeprecated;                                     // 0x0270(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameItemDefaultCustomization          DefaultCustomization;                              // 0x0278(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseItemTableRow) == 0x000008, "Wrong alignment on FBaseItemTableRow");
static_assert(sizeof(FBaseItemTableRow) == 0x000288, "Wrong size on FBaseItemTableRow");
static_assert(offsetof(FBaseItemTableRow, Icon) == 0x000010, "Member 'FBaseItemTableRow::Icon' has a wrong offset!");
static_assert(offsetof(FBaseItemTableRow, IconLayers) == 0x000040, "Member 'FBaseItemTableRow::IconLayers' has a wrong offset!");
static_assert(offsetof(FBaseItemTableRow, SimpleIcon) == 0x000050, "Member 'FBaseItemTableRow::SimpleIcon' has a wrong offset!");
static_assert(offsetof(FBaseItemTableRow, RenderedIcon) == 0x000080, "Member 'FBaseItemTableRow::RenderedIcon' has a wrong offset!");
static_assert(offsetof(FBaseItemTableRow, ActionsClass) == 0x0000B0, "Member 'FBaseItemTableRow::ActionsClass' has a wrong offset!");
static_assert(offsetof(FBaseItemTableRow, StaticData) == 0x0000B8, "Member 'FBaseItemTableRow::StaticData' has a wrong offset!");
static_assert(offsetof(FBaseItemTableRow, StackAndDurability) == 0x000260, "Member 'FBaseItemTableRow::StackAndDurability' has a wrong offset!");
static_assert(offsetof(FBaseItemTableRow, bIsDeprecated) == 0x000270, "Member 'FBaseItemTableRow::bIsDeprecated' has a wrong offset!");
static_assert(offsetof(FBaseItemTableRow, DefaultCustomization) == 0x000278, "Member 'FBaseItemTableRow::DefaultCustomization' has a wrong offset!");

// ScriptStruct DuneSandbox.AdminLoginResponse
// 0x0001 (0x0001 - 0x0000)
struct FAdminLoginResponse final
{
public:
	uint8                                         m_ResponseCode;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminLoginResponse) == 0x000001, "Wrong alignment on FAdminLoginResponse");
static_assert(sizeof(FAdminLoginResponse) == 0x000001, "Wrong size on FAdminLoginResponse");
static_assert(offsetof(FAdminLoginResponse, m_ResponseCode) == 0x000000, "Member 'FAdminLoginResponse::m_ResponseCode' has a wrong offset!");

// ScriptStruct DuneSandbox.AOEDamageSettings
// 0x0018 (0x0018 - 0x0000)
struct FAOEDamageSettings final
{
public:
	float                                         DamagePerSec;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneDamageType>            DamageTypeClass;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DealDamageIntervalInSec;                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDealDamageOnContact;                        // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAOEDamageSettings) == 0x000008, "Wrong alignment on FAOEDamageSettings");
static_assert(sizeof(FAOEDamageSettings) == 0x000018, "Wrong size on FAOEDamageSettings");
static_assert(offsetof(FAOEDamageSettings, DamagePerSec) == 0x000000, "Member 'FAOEDamageSettings::DamagePerSec' has a wrong offset!");
static_assert(offsetof(FAOEDamageSettings, DamageTypeClass) == 0x000008, "Member 'FAOEDamageSettings::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FAOEDamageSettings, DealDamageIntervalInSec) == 0x000010, "Member 'FAOEDamageSettings::DealDamageIntervalInSec' has a wrong offset!");
static_assert(offsetof(FAOEDamageSettings, bShouldDealDamageOnContact) == 0x000014, "Member 'FAOEDamageSettings::bShouldDealDamageOnContact' has a wrong offset!");

// ScriptStruct DuneSandbox.HealthComponent
// 0x000C (0x000C - 0x0000)
struct FHealthComponent final
{
public:
	float                                         m_CurrentHealth;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxDownButNotOutStateHealth;                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CurrentDownButNotOutStateHealth;                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHealthComponent) == 0x000004, "Wrong alignment on FHealthComponent");
static_assert(sizeof(FHealthComponent) == 0x00000C, "Wrong size on FHealthComponent");
static_assert(offsetof(FHealthComponent, m_CurrentHealth) == 0x000000, "Member 'FHealthComponent::m_CurrentHealth' has a wrong offset!");
static_assert(offsetof(FHealthComponent, m_MaxDownButNotOutStateHealth) == 0x000004, "Member 'FHealthComponent::m_MaxDownButNotOutStateHealth' has a wrong offset!");
static_assert(offsetof(FHealthComponent, m_CurrentDownButNotOutStateHealth) == 0x000008, "Member 'FHealthComponent::m_CurrentDownButNotOutStateHealth' has a wrong offset!");

// ScriptStruct DuneSandbox.GenericCheckpoint
// 0x0010 (0x0010 - 0x0000)
struct FGenericCheckpoint final
{
public:
	TArray<class UGenericCheckpointAction*>       m_Actions;                                         // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenericCheckpoint) == 0x000008, "Wrong alignment on FGenericCheckpoint");
static_assert(sizeof(FGenericCheckpoint) == 0x000010, "Wrong size on FGenericCheckpoint");
static_assert(offsetof(FGenericCheckpoint, m_Actions) == 0x000000, "Member 'FGenericCheckpoint::m_Actions' has a wrong offset!");

// ScriptStruct DuneSandbox.FilterTextError
// 0x0018 (0x0018 - 0x0000)
struct FFilterTextError final
{
public:
	EFilterTextErrorType                          Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFilterTextCharactersType                     CharactersType;                                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ErrorStringArgs;                                   // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFilterTextError) == 0x000008, "Wrong alignment on FFilterTextError");
static_assert(sizeof(FFilterTextError) == 0x000018, "Wrong size on FFilterTextError");
static_assert(offsetof(FFilterTextError, Type) == 0x000000, "Member 'FFilterTextError::Type' has a wrong offset!");
static_assert(offsetof(FFilterTextError, CharactersType) == 0x000001, "Member 'FFilterTextError::CharactersType' has a wrong offset!");
static_assert(offsetof(FFilterTextError, ErrorStringArgs) == 0x000008, "Member 'FFilterTextError::ErrorStringArgs' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorServerTrackingInterest
// 0x0014 (0x0020 - 0x000C)
struct FActorServerTrackingInterest final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              m_ActorId;                                         // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActorServerTrackingInterest                  m_Interest;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorServerTrackingInterest) == 0x000008, "Wrong alignment on FActorServerTrackingInterest");
static_assert(sizeof(FActorServerTrackingInterest) == 0x000020, "Wrong size on FActorServerTrackingInterest");
static_assert(offsetof(FActorServerTrackingInterest, m_ActorId) == 0x000010, "Member 'FActorServerTrackingInterest::m_ActorId' has a wrong offset!");
static_assert(offsetof(FActorServerTrackingInterest, m_Interest) == 0x000018, "Member 'FActorServerTrackingInterest::m_Interest' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorServerTrackingInterestList
// 0x00D8 (0x0200 - 0x0128)
struct alignas(0x10) FActorServerTrackingInterestList final : public FFastArraySerializer
{
public:
	TArray<struct FActorServerTrackingInterest>   m_Actors;                                          // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0xC8];                                     // 0x0138(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorServerTrackingInterestList) == 0x000010, "Wrong alignment on FActorServerTrackingInterestList");
static_assert(sizeof(FActorServerTrackingInterestList) == 0x000200, "Wrong size on FActorServerTrackingInterestList");
static_assert(offsetof(FActorServerTrackingInterestList, m_Actors) == 0x000128, "Member 'FActorServerTrackingInterestList::m_Actors' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadBannerVisualData
// 0x0020 (0x0020 - 0x0000)
struct FLandsraadBannerVisualData final
{
public:
	class UTexture2D*                             m_FactionBannerTexture;                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_FactionDisplayName;                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadBannerVisualData) == 0x000008, "Wrong alignment on FLandsraadBannerVisualData");
static_assert(sizeof(FLandsraadBannerVisualData) == 0x000020, "Wrong size on FLandsraadBannerVisualData");
static_assert(offsetof(FLandsraadBannerVisualData, m_FactionBannerTexture) == 0x000000, "Member 'FLandsraadBannerVisualData::m_FactionBannerTexture' has a wrong offset!");
static_assert(offsetof(FLandsraadBannerVisualData, m_FactionDisplayName) == 0x000008, "Member 'FLandsraadBannerVisualData::m_FactionDisplayName' has a wrong offset!");

// ScriptStruct DuneSandbox.NewBuildablePieceData
// 0x0008 (0x0014 - 0x000C)
struct FNewBuildablePieceData final : public FFastArraySerializerItem
{
public:
	struct FEBuildableType                        m_NewUnlockedBuildablePiece;                       // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewBuildablePieceData) == 0x000004, "Wrong alignment on FNewBuildablePieceData");
static_assert(sizeof(FNewBuildablePieceData) == 0x000014, "Wrong size on FNewBuildablePieceData");
static_assert(offsetof(FNewBuildablePieceData, m_NewUnlockedBuildablePiece) == 0x00000C, "Member 'FNewBuildablePieceData::m_NewUnlockedBuildablePiece' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerNewBuildablePiecesInfoArray
// 0x0018 (0x0140 - 0x0128)
struct FPlayerNewBuildablePiecesInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FNewBuildablePieceData>         m_NewBuildablePiecesData;                          // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UBuildingPlayerStateComponent*          m_Owner;                                           // 0x0138(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayerNewBuildablePiecesInfoArray) == 0x000008, "Wrong alignment on FPlayerNewBuildablePiecesInfoArray");
static_assert(sizeof(FPlayerNewBuildablePiecesInfoArray) == 0x000140, "Wrong size on FPlayerNewBuildablePiecesInfoArray");
static_assert(offsetof(FPlayerNewBuildablePiecesInfoArray, m_NewBuildablePiecesData) == 0x000128, "Member 'FPlayerNewBuildablePiecesInfoArray::m_NewBuildablePiecesData' has a wrong offset!");
static_assert(offsetof(FPlayerNewBuildablePiecesInfoArray, m_Owner) == 0x000138, "Member 'FPlayerNewBuildablePiecesInfoArray::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAdministrationSettings
// 0x00F8 (0x00F8 - 0x0000)
struct FDuneAdministrationSettings final
{
public:
	bool                                          m_bRequiresAdminPassword;                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, EDunePrivileges>          m_AdminPasswords;                                  // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, uint8>                    m_AllowedCommands;                                 // 0x0058(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<class FString>                           m_BlockedCommands;                                 // 0x00A8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAdministrationSettings) == 0x000008, "Wrong alignment on FDuneAdministrationSettings");
static_assert(sizeof(FDuneAdministrationSettings) == 0x0000F8, "Wrong size on FDuneAdministrationSettings");
static_assert(offsetof(FDuneAdministrationSettings, m_bRequiresAdminPassword) == 0x000000, "Member 'FDuneAdministrationSettings::m_bRequiresAdminPassword' has a wrong offset!");
static_assert(offsetof(FDuneAdministrationSettings, m_AdminPasswords) == 0x000008, "Member 'FDuneAdministrationSettings::m_AdminPasswords' has a wrong offset!");
static_assert(offsetof(FDuneAdministrationSettings, m_AllowedCommands) == 0x000058, "Member 'FDuneAdministrationSettings::m_AllowedCommands' has a wrong offset!");
static_assert(offsetof(FDuneAdministrationSettings, m_BlockedCommands) == 0x0000A8, "Member 'FDuneAdministrationSettings::m_BlockedCommands' has a wrong offset!");

// ScriptStruct DuneSandbox.CartographyMapLayerSettings
// 0x0068 (0x0068 - 0x0000)
struct FCartographyMapLayerSettings final
{
public:
	TSoftClassPtr<class UClass>                   m_MapLayerActor;                                   // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_MapLayerPosition;                                // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               m_MapLayerRotation;                                // 0x0048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_MapLayerScale;                                   // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCartographyMapLayerSettings) == 0x000008, "Wrong alignment on FCartographyMapLayerSettings");
static_assert(sizeof(FCartographyMapLayerSettings) == 0x000068, "Wrong size on FCartographyMapLayerSettings");
static_assert(offsetof(FCartographyMapLayerSettings, m_MapLayerActor) == 0x000000, "Member 'FCartographyMapLayerSettings::m_MapLayerActor' has a wrong offset!");
static_assert(offsetof(FCartographyMapLayerSettings, m_MapLayerPosition) == 0x000030, "Member 'FCartographyMapLayerSettings::m_MapLayerPosition' has a wrong offset!");
static_assert(offsetof(FCartographyMapLayerSettings, m_MapLayerRotation) == 0x000048, "Member 'FCartographyMapLayerSettings::m_MapLayerRotation' has a wrong offset!");
static_assert(offsetof(FCartographyMapLayerSettings, m_MapLayerScale) == 0x000060, "Member 'FCartographyMapLayerSettings::m_MapLayerScale' has a wrong offset!");

// ScriptStruct DuneSandbox.StaticEncounterComponent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FStaticEncounterComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaticEncounterComponent) == 0x000004, "Wrong alignment on FStaticEncounterComponent");
static_assert(sizeof(FStaticEncounterComponent) == 0x000008, "Wrong size on FStaticEncounterComponent");

// ScriptStruct DuneSandbox.EAudioSwitchState_Character
// 0x0000 (0x0008 - 0x0008)
struct FEAudioSwitchState_Character final : public FStringEnumValue
{
};
static_assert(alignof(FEAudioSwitchState_Character) == 0x000004, "Wrong alignment on FEAudioSwitchState_Character");
static_assert(sizeof(FEAudioSwitchState_Character) == 0x000008, "Wrong size on FEAudioSwitchState_Character");

// ScriptStruct DuneSandbox.FactionDataRow
// 0x0058 (0x0068 - 0x0010)
struct FFactionDataRow final : public FTableRowBase
{
public:
	struct FEAudioSwitchState_Character           m_CharacterAudioSwitchState;                       // 0x0010(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_DisplayName;                                     // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_FactionIcon;                                     // 0x0030(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDebugOnly;                                      // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFactionDataRow) == 0x000008, "Wrong alignment on FFactionDataRow");
static_assert(sizeof(FFactionDataRow) == 0x000068, "Wrong size on FFactionDataRow");
static_assert(offsetof(FFactionDataRow, m_CharacterAudioSwitchState) == 0x000010, "Member 'FFactionDataRow::m_CharacterAudioSwitchState' has a wrong offset!");
static_assert(offsetof(FFactionDataRow, m_DisplayName) == 0x000018, "Member 'FFactionDataRow::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FFactionDataRow, m_FactionIcon) == 0x000030, "Member 'FFactionDataRow::m_FactionIcon' has a wrong offset!");
static_assert(offsetof(FFactionDataRow, m_bDebugOnly) == 0x000060, "Member 'FFactionDataRow::m_bDebugOnly' has a wrong offset!");

// ScriptStruct DuneSandbox.ServerIdAndMapData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FServerIdAndMapData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerIdAndMapData) == 0x000008, "Wrong alignment on FServerIdAndMapData");
static_assert(sizeof(FServerIdAndMapData) == 0x000040, "Wrong size on FServerIdAndMapData");

// ScriptStruct DuneSandbox.ShowroomWorldCreationSettings
// 0x0001 (0x0001 - 0x0000)
struct FShowroomWorldCreationSettings final
{
public:
	bool                                          bShouldSimulatePhysics;                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowroomWorldCreationSettings) == 0x000001, "Wrong alignment on FShowroomWorldCreationSettings");
static_assert(sizeof(FShowroomWorldCreationSettings) == 0x000001, "Wrong size on FShowroomWorldCreationSettings");
static_assert(offsetof(FShowroomWorldCreationSettings, bShouldSimulatePhysics) == 0x000000, "Member 'FShowroomWorldCreationSettings::bShouldSimulatePhysics' has a wrong offset!");

// ScriptStruct DuneSandbox.BiomeSequenceDataCache
// 0x0018 (0x0018 - 0x0000)
struct FBiomeSequenceDataCache final
{
public:
	TArray<class UBiomeSequenceData*>             m_BiomeSequenceData;                               // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomeSequenceDataCache) == 0x000008, "Wrong alignment on FBiomeSequenceDataCache");
static_assert(sizeof(FBiomeSequenceDataCache) == 0x000018, "Wrong size on FBiomeSequenceDataCache");
static_assert(offsetof(FBiomeSequenceDataCache, m_BiomeSequenceData) == 0x000000, "Member 'FBiomeSequenceDataCache::m_BiomeSequenceData' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockSetting
// 0x0008 (0x0038 - 0x0030)
struct FTerrainBlockSetting final : public FContentBlockSetting
{
public:
	bool                                          bCanBeUsedToPlaceWorldGeneratorContent;            // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTerrainBlockSetting) == 0x000008, "Wrong alignment on FTerrainBlockSetting");
static_assert(sizeof(FTerrainBlockSetting) == 0x000038, "Wrong size on FTerrainBlockSetting");
static_assert(offsetof(FTerrainBlockSetting, bCanBeUsedToPlaceWorldGeneratorContent) == 0x000030, "Member 'FTerrainBlockSetting::bCanBeUsedToPlaceWorldGeneratorContent' has a wrong offset!");

// ScriptStruct DuneSandbox.MentatKeyStringValuePair
// 0x0018 (0x0018 - 0x0000)
struct FMentatKeyStringValuePair final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMentatKeyStringValuePair) == 0x000008, "Wrong alignment on FMentatKeyStringValuePair");
static_assert(sizeof(FMentatKeyStringValuePair) == 0x000018, "Wrong size on FMentatKeyStringValuePair");
static_assert(offsetof(FMentatKeyStringValuePair, Key) == 0x000000, "Member 'FMentatKeyStringValuePair::Key' has a wrong offset!");
static_assert(offsetof(FMentatKeyStringValuePair, Value) == 0x000008, "Member 'FMentatKeyStringValuePair::Value' has a wrong offset!");

// ScriptStruct DuneSandbox.MentatVisionTarget
// 0x0028 (0x0028 - 0x0000)
struct FMentatVisionTarget final
{
public:
	TWeakObjectPtr<class AActor>                  m_Actor;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMentatKeyFloatValuePair>       m_TagFloatValues;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMentatKeyStringValuePair>      m_TagStringValues;                                 // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMentatVisionTarget) == 0x000008, "Wrong alignment on FMentatVisionTarget");
static_assert(sizeof(FMentatVisionTarget) == 0x000028, "Wrong size on FMentatVisionTarget");
static_assert(offsetof(FMentatVisionTarget, m_Actor) == 0x000000, "Member 'FMentatVisionTarget::m_Actor' has a wrong offset!");
static_assert(offsetof(FMentatVisionTarget, m_TagFloatValues) == 0x000008, "Member 'FMentatVisionTarget::m_TagFloatValues' has a wrong offset!");
static_assert(offsetof(FMentatVisionTarget, m_TagStringValues) == 0x000018, "Member 'FMentatVisionTarget::m_TagStringValues' has a wrong offset!");

// ScriptStruct DuneSandbox.CCScreenPreset
// 0x00C0 (0x00C0 - 0x0000)
struct FCCScreenPreset final
{
public:
	class FString                                 m_Name;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bVisible;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_Voice;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_BannerTexture;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECharacterCreationModifiableBodyPartType, float> m_BodyPartParameters;                      // 0x0060(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 m_MutableDescriptorJson;                           // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCCScreenPreset) == 0x000008, "Wrong alignment on FCCScreenPreset");
static_assert(sizeof(FCCScreenPreset) == 0x0000C0, "Wrong size on FCCScreenPreset");
static_assert(offsetof(FCCScreenPreset, m_Name) == 0x000000, "Member 'FCCScreenPreset::m_Name' has a wrong offset!");
static_assert(offsetof(FCCScreenPreset, m_bVisible) == 0x000010, "Member 'FCCScreenPreset::m_bVisible' has a wrong offset!");
static_assert(offsetof(FCCScreenPreset, m_Voice) == 0x000018, "Member 'FCCScreenPreset::m_Voice' has a wrong offset!");
static_assert(offsetof(FCCScreenPreset, m_BannerTexture) == 0x000030, "Member 'FCCScreenPreset::m_BannerTexture' has a wrong offset!");
static_assert(offsetof(FCCScreenPreset, m_BodyPartParameters) == 0x000060, "Member 'FCCScreenPreset::m_BodyPartParameters' has a wrong offset!");
static_assert(offsetof(FCCScreenPreset, m_MutableDescriptorJson) == 0x0000B0, "Member 'FCCScreenPreset::m_MutableDescriptorJson' has a wrong offset!");

// ScriptStruct DuneSandbox.TaxationDatabaseEventRemoveInvoices
// 0x0010 (0x0010 - 0x0000)
struct FTaxationDatabaseEventRemoveInvoices final
{
public:
	TArray<int64>                                 InvoiceIds;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaxationDatabaseEventRemoveInvoices) == 0x000008, "Wrong alignment on FTaxationDatabaseEventRemoveInvoices");
static_assert(sizeof(FTaxationDatabaseEventRemoveInvoices) == 0x000010, "Wrong size on FTaxationDatabaseEventRemoveInvoices");
static_assert(offsetof(FTaxationDatabaseEventRemoveInvoices, InvoiceIds) == 0x000000, "Member 'FTaxationDatabaseEventRemoveInvoices::InvoiceIds' has a wrong offset!");

// ScriptStruct DuneSandbox.TutorialCollection
// 0x0050 (0x0050 - 0x0000)
struct FTutorialCollection final
{
public:
	TMap<class FName, class UTutorialBaseData*>   m_Tutorials;                                       // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialCollection) == 0x000008, "Wrong alignment on FTutorialCollection");
static_assert(sizeof(FTutorialCollection) == 0x000050, "Wrong size on FTutorialCollection");
static_assert(offsetof(FTutorialCollection, m_Tutorials) == 0x000000, "Member 'FTutorialCollection::m_Tutorials' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableDamageMitigationGroupDataRow
// 0x0058 (0x0068 - 0x0010)
struct FBuildableDamageMitigationGroupDataRow final : public FTableRowBase
{
public:
	TMap<struct FEDamageMitigationFloatStatID, float> m_DamageMitigationStats;                       // 0x0010(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_SandstormShieldDamageMitigationPercentage;       // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SandstormDamageMultiplierForNoTotem;             // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableDamageMitigationGroupDataRow) == 0x000008, "Wrong alignment on FBuildableDamageMitigationGroupDataRow");
static_assert(sizeof(FBuildableDamageMitigationGroupDataRow) == 0x000068, "Wrong size on FBuildableDamageMitigationGroupDataRow");
static_assert(offsetof(FBuildableDamageMitigationGroupDataRow, m_DamageMitigationStats) == 0x000010, "Member 'FBuildableDamageMitigationGroupDataRow::m_DamageMitigationStats' has a wrong offset!");
static_assert(offsetof(FBuildableDamageMitigationGroupDataRow, m_SandstormShieldDamageMitigationPercentage) == 0x000060, "Member 'FBuildableDamageMitigationGroupDataRow::m_SandstormShieldDamageMitigationPercentage' has a wrong offset!");
static_assert(offsetof(FBuildableDamageMitigationGroupDataRow, m_SandstormDamageMultiplierForNoTotem) == 0x000064, "Member 'FBuildableDamageMitigationGroupDataRow::m_SandstormDamageMultiplierForNoTotem' has a wrong offset!");

// ScriptStruct DuneSandbox.PartyMember
// 0x0018 (0x0018 - 0x0000)
struct FPartyMember final
{
public:
	struct FUniqueID                              PlayerId;                                          // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyMember) == 0x000008, "Wrong alignment on FPartyMember");
static_assert(sizeof(FPartyMember) == 0x000018, "Wrong size on FPartyMember");
static_assert(offsetof(FPartyMember, PlayerId) == 0x000000, "Member 'FPartyMember::PlayerId' has a wrong offset!");
static_assert(offsetof(FPartyMember, PlayerName) == 0x000008, "Member 'FPartyMember::PlayerName' has a wrong offset!");

// ScriptStruct DuneSandbox.Party
// 0x0020 (0x0020 - 0x0000)
struct FParty final
{
public:
	struct FUniqueID                              PartyId;                                           // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              LeaderId;                                          // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPartyMember>                   Members;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParty) == 0x000008, "Wrong alignment on FParty");
static_assert(sizeof(FParty) == 0x000020, "Wrong size on FParty");
static_assert(offsetof(FParty, PartyId) == 0x000000, "Member 'FParty::PartyId' has a wrong offset!");
static_assert(offsetof(FParty, LeaderId) == 0x000008, "Member 'FParty::LeaderId' has a wrong offset!");
static_assert(offsetof(FParty, Members) == 0x000010, "Member 'FParty::Members' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponState
// 0x0010 (0x0010 - 0x0000)
struct FWeaponState final
{
public:
	TSubclassOf<class UHandheldBase>              m_HandheldClass;                                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_CurrentAmmo;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaxAmmo;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponState) == 0x000008, "Wrong alignment on FWeaponState");
static_assert(sizeof(FWeaponState) == 0x000010, "Wrong size on FWeaponState");
static_assert(offsetof(FWeaponState, m_HandheldClass) == 0x000000, "Member 'FWeaponState::m_HandheldClass' has a wrong offset!");
static_assert(offsetof(FWeaponState, m_CurrentAmmo) == 0x000008, "Member 'FWeaponState::m_CurrentAmmo' has a wrong offset!");
static_assert(offsetof(FWeaponState, m_MaxAmmo) == 0x00000C, "Member 'FWeaponState::m_MaxAmmo' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadPlayerContribution
// 0x0010 (0x0010 - 0x0000)
struct FLandsraadPlayerContribution final
{
public:
	struct FUniqueID                              m_PlayerId;                                        // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_BoardIndex;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_PlayerProgress;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadPlayerContribution) == 0x000008, "Wrong alignment on FLandsraadPlayerContribution");
static_assert(sizeof(FLandsraadPlayerContribution) == 0x000010, "Wrong size on FLandsraadPlayerContribution");
static_assert(offsetof(FLandsraadPlayerContribution, m_PlayerId) == 0x000000, "Member 'FLandsraadPlayerContribution::m_PlayerId' has a wrong offset!");
static_assert(offsetof(FLandsraadPlayerContribution, m_BoardIndex) == 0x000008, "Member 'FLandsraadPlayerContribution::m_BoardIndex' has a wrong offset!");
static_assert(offsetof(FLandsraadPlayerContribution, m_PlayerProgress) == 0x00000C, "Member 'FLandsraadPlayerContribution::m_PlayerProgress' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneRadialDamageParams
// 0x001C (0x001C - 0x0000)
struct FDuneRadialDamageParams final
{
public:
	float                                         BaseDamage;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDamage;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseShieldDamage;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumShieldDamage;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloff;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneRadialDamageParams) == 0x000004, "Wrong alignment on FDuneRadialDamageParams");
static_assert(sizeof(FDuneRadialDamageParams) == 0x00001C, "Wrong size on FDuneRadialDamageParams");
static_assert(offsetof(FDuneRadialDamageParams, BaseDamage) == 0x000000, "Member 'FDuneRadialDamageParams::BaseDamage' has a wrong offset!");
static_assert(offsetof(FDuneRadialDamageParams, MinimumDamage) == 0x000004, "Member 'FDuneRadialDamageParams::MinimumDamage' has a wrong offset!");
static_assert(offsetof(FDuneRadialDamageParams, BaseShieldDamage) == 0x000008, "Member 'FDuneRadialDamageParams::BaseShieldDamage' has a wrong offset!");
static_assert(offsetof(FDuneRadialDamageParams, MinimumShieldDamage) == 0x00000C, "Member 'FDuneRadialDamageParams::MinimumShieldDamage' has a wrong offset!");
static_assert(offsetof(FDuneRadialDamageParams, InnerRadius) == 0x000010, "Member 'FDuneRadialDamageParams::InnerRadius' has a wrong offset!");
static_assert(offsetof(FDuneRadialDamageParams, OuterRadius) == 0x000014, "Member 'FDuneRadialDamageParams::OuterRadius' has a wrong offset!");
static_assert(offsetof(FDuneRadialDamageParams, DamageFalloff) == 0x000018, "Member 'FDuneRadialDamageParams::DamageFalloff' has a wrong offset!");

// ScriptStruct DuneSandbox.BurstFireConfig
// 0x0008 (0x0008 - 0x0000)
struct FBurstFireConfig final
{
public:
	float                                         m_BurstInterval;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ShotsPerBurst;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBurstFireConfig) == 0x000004, "Wrong alignment on FBurstFireConfig");
static_assert(sizeof(FBurstFireConfig) == 0x000008, "Wrong size on FBurstFireConfig");
static_assert(offsetof(FBurstFireConfig, m_BurstInterval) == 0x000000, "Member 'FBurstFireConfig::m_BurstInterval' has a wrong offset!");
static_assert(offsetof(FBurstFireConfig, m_ShotsPerBurst) == 0x000004, "Member 'FBurstFireConfig::m_ShotsPerBurst' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponLightConfig
// 0x0040 (0x0040 - 0x0000)
struct FWeaponLightConfig final
{
public:
	EWeaponLightBehaviour                         LightBehaviour;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   LightActorClass;                                   // 0x0008(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightSourceSocketName;                             // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponLightConfig) == 0x000008, "Wrong alignment on FWeaponLightConfig");
static_assert(sizeof(FWeaponLightConfig) == 0x000040, "Wrong size on FWeaponLightConfig");
static_assert(offsetof(FWeaponLightConfig, LightBehaviour) == 0x000000, "Member 'FWeaponLightConfig::LightBehaviour' has a wrong offset!");
static_assert(offsetof(FWeaponLightConfig, LightActorClass) == 0x000008, "Member 'FWeaponLightConfig::LightActorClass' has a wrong offset!");
static_assert(offsetof(FWeaponLightConfig, LightSourceSocketName) == 0x000038, "Member 'FWeaponLightConfig::LightSourceSocketName' has a wrong offset!");

// ScriptStruct DuneSandbox.SpringRecoilConfig
// 0x0010 (0x0010 - 0x0000)
struct FSpringRecoilConfig final
{
public:
	float                                         Impulse;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPartialRecover;                                   // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Handling;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpringRecoil;                                  // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpringRecoilConfig) == 0x000004, "Wrong alignment on FSpringRecoilConfig");
static_assert(sizeof(FSpringRecoilConfig) == 0x000010, "Wrong size on FSpringRecoilConfig");
static_assert(offsetof(FSpringRecoilConfig, Impulse) == 0x000000, "Member 'FSpringRecoilConfig::Impulse' has a wrong offset!");
static_assert(offsetof(FSpringRecoilConfig, bPartialRecover) == 0x000004, "Member 'FSpringRecoilConfig::bPartialRecover' has a wrong offset!");
static_assert(offsetof(FSpringRecoilConfig, Handling) == 0x000008, "Member 'FSpringRecoilConfig::Handling' has a wrong offset!");
static_assert(offsetof(FSpringRecoilConfig, bUseSpringRecoil) == 0x00000C, "Member 'FSpringRecoilConfig::bUseSpringRecoil' has a wrong offset!");

// ScriptStruct DuneSandbox.RecoilSystemConfig
// 0x0020 (0x0020 - 0x0000)
struct FRecoilSystemConfig final
{
public:
	float                                         m_RecoilYawScale;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RecoilPitchScale;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            m_RecoilTable;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RecoilApplicationTime;                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AutomaticRecoveryTime;                           // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_AutomaticRecoveryCurve;                          // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecoilSystemConfig) == 0x000008, "Wrong alignment on FRecoilSystemConfig");
static_assert(sizeof(FRecoilSystemConfig) == 0x000020, "Wrong size on FRecoilSystemConfig");
static_assert(offsetof(FRecoilSystemConfig, m_RecoilYawScale) == 0x000000, "Member 'FRecoilSystemConfig::m_RecoilYawScale' has a wrong offset!");
static_assert(offsetof(FRecoilSystemConfig, m_RecoilPitchScale) == 0x000004, "Member 'FRecoilSystemConfig::m_RecoilPitchScale' has a wrong offset!");
static_assert(offsetof(FRecoilSystemConfig, m_RecoilTable) == 0x000008, "Member 'FRecoilSystemConfig::m_RecoilTable' has a wrong offset!");
static_assert(offsetof(FRecoilSystemConfig, m_RecoilApplicationTime) == 0x000010, "Member 'FRecoilSystemConfig::m_RecoilApplicationTime' has a wrong offset!");
static_assert(offsetof(FRecoilSystemConfig, m_AutomaticRecoveryTime) == 0x000014, "Member 'FRecoilSystemConfig::m_AutomaticRecoveryTime' has a wrong offset!");
static_assert(offsetof(FRecoilSystemConfig, m_AutomaticRecoveryCurve) == 0x000018, "Member 'FRecoilSystemConfig::m_AutomaticRecoveryCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.FiringPatternConfig
// 0x0024 (0x0024 - 0x0000)
struct FFiringPatternConfig final
{
public:
	bool                                          m_SemiAutoPattern;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_MinShotsPerPattern;                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_MaxShotsPerPattern;                              // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_MinShotInterval;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxShotInterval;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinPatternDuration;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxPatternDuration;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinPatternInterval;                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxPatternInterval;                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RemainingAmmoThreshold;                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_YawRotationRateOverride;                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFiringPatternConfig) == 0x000004, "Wrong alignment on FFiringPatternConfig");
static_assert(sizeof(FFiringPatternConfig) == 0x000024, "Wrong size on FFiringPatternConfig");
static_assert(offsetof(FFiringPatternConfig, m_SemiAutoPattern) == 0x000000, "Member 'FFiringPatternConfig::m_SemiAutoPattern' has a wrong offset!");
static_assert(offsetof(FFiringPatternConfig, m_MinShotsPerPattern) == 0x000001, "Member 'FFiringPatternConfig::m_MinShotsPerPattern' has a wrong offset!");
static_assert(offsetof(FFiringPatternConfig, m_MaxShotsPerPattern) == 0x000002, "Member 'FFiringPatternConfig::m_MaxShotsPerPattern' has a wrong offset!");
static_assert(offsetof(FFiringPatternConfig, m_MinShotInterval) == 0x000004, "Member 'FFiringPatternConfig::m_MinShotInterval' has a wrong offset!");
static_assert(offsetof(FFiringPatternConfig, m_MaxShotInterval) == 0x000008, "Member 'FFiringPatternConfig::m_MaxShotInterval' has a wrong offset!");
static_assert(offsetof(FFiringPatternConfig, m_MinPatternDuration) == 0x00000C, "Member 'FFiringPatternConfig::m_MinPatternDuration' has a wrong offset!");
static_assert(offsetof(FFiringPatternConfig, m_MaxPatternDuration) == 0x000010, "Member 'FFiringPatternConfig::m_MaxPatternDuration' has a wrong offset!");
static_assert(offsetof(FFiringPatternConfig, m_MinPatternInterval) == 0x000014, "Member 'FFiringPatternConfig::m_MinPatternInterval' has a wrong offset!");
static_assert(offsetof(FFiringPatternConfig, m_MaxPatternInterval) == 0x000018, "Member 'FFiringPatternConfig::m_MaxPatternInterval' has a wrong offset!");
static_assert(offsetof(FFiringPatternConfig, m_RemainingAmmoThreshold) == 0x00001C, "Member 'FFiringPatternConfig::m_RemainingAmmoThreshold' has a wrong offset!");
static_assert(offsetof(FFiringPatternConfig, m_YawRotationRateOverride) == 0x000020, "Member 'FFiringPatternConfig::m_YawRotationRateOverride' has a wrong offset!");

// ScriptStruct DuneSandbox.SpinupConfig
// 0x00B8 (0x00B8 - 0x0000)
struct FSpinupConfig final
{
public:
	float                                         SpinupTime;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpindownTime;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerPerSecond;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          FX;                                                // 0x0010(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           CameraShake;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           SpinupActiveAudioEvent;                            // 0x0050(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           SpinCancelAudioEvent;                              // 0x0080(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FXAttachName;                                      // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpinupConfig) == 0x000008, "Wrong alignment on FSpinupConfig");
static_assert(sizeof(FSpinupConfig) == 0x0000B8, "Wrong size on FSpinupConfig");
static_assert(offsetof(FSpinupConfig, SpinupTime) == 0x000000, "Member 'FSpinupConfig::SpinupTime' has a wrong offset!");
static_assert(offsetof(FSpinupConfig, SpindownTime) == 0x000004, "Member 'FSpinupConfig::SpindownTime' has a wrong offset!");
static_assert(offsetof(FSpinupConfig, PowerPerSecond) == 0x000008, "Member 'FSpinupConfig::PowerPerSecond' has a wrong offset!");
static_assert(offsetof(FSpinupConfig, FX) == 0x000010, "Member 'FSpinupConfig::FX' has a wrong offset!");
static_assert(offsetof(FSpinupConfig, CameraShake) == 0x000040, "Member 'FSpinupConfig::CameraShake' has a wrong offset!");
static_assert(offsetof(FSpinupConfig, ForceFeedback) == 0x000048, "Member 'FSpinupConfig::ForceFeedback' has a wrong offset!");
static_assert(offsetof(FSpinupConfig, SpinupActiveAudioEvent) == 0x000050, "Member 'FSpinupConfig::SpinupActiveAudioEvent' has a wrong offset!");
static_assert(offsetof(FSpinupConfig, SpinCancelAudioEvent) == 0x000080, "Member 'FSpinupConfig::SpinCancelAudioEvent' has a wrong offset!");
static_assert(offsetof(FSpinupConfig, FXAttachName) == 0x0000B0, "Member 'FSpinupConfig::FXAttachName' has a wrong offset!");

// ScriptStruct DuneSandbox.FocusFireConfig
// 0x0018 (0x0018 - 0x0000)
struct FFocusFireConfig final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHitWindow;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDamageScalar;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageScalar;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DamageScaleCurve;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFocusFireConfig) == 0x000008, "Wrong alignment on FFocusFireConfig");
static_assert(sizeof(FFocusFireConfig) == 0x000018, "Wrong size on FFocusFireConfig");
static_assert(offsetof(FFocusFireConfig, bEnabled) == 0x000000, "Member 'FFocusFireConfig::bEnabled' has a wrong offset!");
static_assert(offsetof(FFocusFireConfig, MaxHitWindow) == 0x000004, "Member 'FFocusFireConfig::MaxHitWindow' has a wrong offset!");
static_assert(offsetof(FFocusFireConfig, MinDamageScalar) == 0x000008, "Member 'FFocusFireConfig::MinDamageScalar' has a wrong offset!");
static_assert(offsetof(FFocusFireConfig, MaxDamageScalar) == 0x00000C, "Member 'FFocusFireConfig::MaxDamageScalar' has a wrong offset!");
static_assert(offsetof(FFocusFireConfig, DamageScaleCurve) == 0x000010, "Member 'FFocusFireConfig::DamageScaleCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.BeamShieldData
// 0x0070 (0x0070 - 0x0000)
struct FBeamShieldData final
{
public:
	float                                         MaxBeamOnShieldTime;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LasgunRecoveryDuration;                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          VentingVFX;                                        // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VentingVFXAttachName;                              // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           BeamCancelAudioEvent;                              // 0x0040(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBeamShieldData) == 0x000008, "Wrong alignment on FBeamShieldData");
static_assert(sizeof(FBeamShieldData) == 0x000070, "Wrong size on FBeamShieldData");
static_assert(offsetof(FBeamShieldData, MaxBeamOnShieldTime) == 0x000000, "Member 'FBeamShieldData::MaxBeamOnShieldTime' has a wrong offset!");
static_assert(offsetof(FBeamShieldData, LasgunRecoveryDuration) == 0x000004, "Member 'FBeamShieldData::LasgunRecoveryDuration' has a wrong offset!");
static_assert(offsetof(FBeamShieldData, VentingVFX) == 0x000008, "Member 'FBeamShieldData::VentingVFX' has a wrong offset!");
static_assert(offsetof(FBeamShieldData, VentingVFXAttachName) == 0x000038, "Member 'FBeamShieldData::VentingVFXAttachName' has a wrong offset!");
static_assert(offsetof(FBeamShieldData, BeamCancelAudioEvent) == 0x000040, "Member 'FBeamShieldData::BeamCancelAudioEvent' has a wrong offset!");

// ScriptStruct DuneSandbox.StaticWeaponDataComponent
// 0x0B18 (0x0B18 - 0x0000)
struct FStaticWeaponDataComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   m_DamageTypeClass;                                 // 0x0008(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDealsRadialDamage;                              // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bRadialCanHurtDamageCauser;                      // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_DamageValue;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ShieldDamageValue;                               // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DamageValue_NPC;                                 // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ShieldDamageValue_NPC;                           // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDuneRadialDamageParams                m_RadialDamageConfig;                              // 0x004C(0x001C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDuneRadialDamageParams                m_RadialDamageConfig_NPC;                          // 0x0068(0x001C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x14];                                      // 0x0084(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CritDamage;                                      // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_DamageFalloffCurve;                              // 0x00A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_DamageFalloffCurveShields;                       // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoiseDamageData                       m_PoiseDamage;                                     // 0x00C0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_ShieldedPoiseDamage;                             // 0x00CC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_MinimumPoiseDamage;                              // 0x00D8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage_NPC;                                 // 0x00E4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_ShieldedPoiseDamage_NPC;                         // 0x00F0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_MinimumPoiseDamage_NPC;                          // 0x00FC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_MaximumRange;                                    // 0x0108(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinimumRange;                                    // 0x010C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EffectiveRange;                                  // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_HazardZoneIntersectNumShotsThreshold;            // 0x0114(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_AimAssistDistanceScaling;                        // 0x0118(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_AimAssistFrictionDistanceScaling;                // 0x0128(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIgnoreShieldHipFireRule;                          // 0x0138(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_FireRate;                                        // 0x013C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ShieldDepletionFactorBonusIncrement;             // 0x0140(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsSemiAuto;                                     // 0x0144(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_SemiAutoWindow;                                  // 0x0148(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SemiAutoFiringStateDuration;                     // 0x014C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             m_TraceChannel;                                    // 0x0150(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bRequiresClientSideComplexTrace;                 // 0x0151(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x2];                                      // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CameraAimTraceSphereRadius;                      // 0x0154(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApply;                          // 0x0158(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApplyToAttacker;                // 0x0168(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_TimeToSwitchFireModes;                           // 0x0178(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_UnholsterDuration;                               // 0x017C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MoveSpeedModifier;                               // 0x0180(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ADSMoveSpeedModifier;                            // 0x0184(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FiringMoveSpeedModifier;                         // 0x0188(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_ServerStaticTraceStartOffset;                    // 0x0190(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_BaseMeleeActions;                                // 0x01A8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_AmmoInventoryItem;                               // 0x01D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxAmmoInWeapon;                                 // 0x01E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ReloadTime;                                      // 0x01E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAutoReloadOnFire;                               // 0x01E8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAutoReloadAfterFire;                            // 0x01E9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAutoReloadOnEmpty;                              // 0x01EA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB[0x1];                                      // 0x01EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_AmmoPerShot;                                     // 0x01EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PowerConsumptionPerShot;                         // 0x01F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HeatAddedPerShot;                                // 0x01F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SwitchTime;                                      // 0x01F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxBeamDuration;                                 // 0x01FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_NumberOfBeams;                                   // 0x0200(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_BeamSpreadAngle;                                 // 0x0204(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FlameRadius;                                     // 0x0208(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FlameIntimidationRadius;                         // 0x020C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_NearHitGameplayEffectsToApply;                   // 0x0210(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     FlamethrowerScaleOverTime;                         // 0x0220(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      m_ScattergunOffsets;                               // 0x02A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_ScattergunOffsetDistance;                        // 0x02B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ScattergunRandomnessFactorRadians;               // 0x02BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUsePhysicsDrag;                                 // 0x02C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Mass;                                            // 0x02C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ThreatAmount;                                    // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          m_FireFX;                                          // 0x02D0(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          m_FireTracerFX;                                    // 0x0300(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          m_FireMuzzleFX;                                    // 0x0330(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FireMuzzleFXRate;                                // 0x0360(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          m_BreakingFireFX;                                  // 0x0368(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          m_SightsFX;                                        // 0x0398(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          m_PrimaryBeamFX;                                   // 0x03C8(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_PrimaryBeamColor;                                // 0x03F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PrimaryBeamWidth;                                // 0x0408(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          m_SecondaryBeamFX;                                 // 0x0410(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_SecondaryBeamColor;                              // 0x0440(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SecondaryBeamWidth;                              // 0x0450(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDoesBeamRequireImpactToFire;                    // 0x0454(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_455[0x3];                                      // 0x0455(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          m_MisfireBeamFX;                                   // 0x0458(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, TSoftObjectPtr<class UNiagaraSystem>> m_ImpactFX;                         // 0x0488(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EDamageBlockType, TSoftObjectPtr<class UNiagaraSystem>> m_BlockedImpactFX;                  // 0x04D8(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, TSoftClassPtr<class UClass>> m_ImpactDecals;                              // 0x0528(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FWeaponLightConfig                     m_LightConfig;                                     // 0x0578(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   m_MuzzleSocketName;                                // 0x05B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           m_MuzzleSocketsOverride;                           // 0x05C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_AimAssistFrictionRange;                          // 0x05D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AimAssistRotationRange;                          // 0x05D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponDragConfig                      m_DragConfig;                                      // 0x05D8(0x00A0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FWeaponDragConfig                      m_DragConfigNPC;                                   // 0x0678(0x00A0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bBecomesProjectileAfterEffectiveRange;           // 0x0718(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   m_ProjectileClass;                                 // 0x0720(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_750[0x8];                                      // 0x0750(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBurstFireConfig                       BurstData;                                         // 0x0758(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSpringRecoilConfig                    SpringRecoilData;                                  // 0x0760(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FRecoilSystemConfig                    RecoilSystemConfig;                                // 0x0770(0x0020)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSpinupConfig                          SpinupData;                                        // 0x0790(0x00B8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFocusFireConfig                       FocusFireData;                                     // 0x0848(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBeamShieldData                        BeamShieldData;                                    // 0x0860(0x0070)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFiringPatternConfig                   FiringPatternData;                                 // 0x08D0(0x0024)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_FiringNoiseDistance;                             // 0x08F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FlyByNoiseDistance;                              // 0x08F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8FC[0x4];                                      // 0x08FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventEquipped;                              // 0x0900(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventHolstered;                             // 0x0930(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventOnFire;                                // 0x0960(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventOnFireStop;                            // 0x0990(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventReload;                                // 0x09C0(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventReloadCancelled;                       // 0x09F0(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventImpact;                                // 0x0A20(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventImpactStop;                            // 0x0A50(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventWeaponBreak;                           // 0x0A80(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventWeaponDryFire;                         // 0x0AB0(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventBeamMisfire;                           // 0x0AE0(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeaponMovementAccuracyData*            m_WeaponMovementAccuracyData;                      // 0x0B10(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaticWeaponDataComponent) == 0x000008, "Wrong alignment on FStaticWeaponDataComponent");
static_assert(sizeof(FStaticWeaponDataComponent) == 0x000B18, "Wrong size on FStaticWeaponDataComponent");
static_assert(offsetof(FStaticWeaponDataComponent, m_DamageTypeClass) == 0x000008, "Member 'FStaticWeaponDataComponent::m_DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_bDealsRadialDamage) == 0x000038, "Member 'FStaticWeaponDataComponent::m_bDealsRadialDamage' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_bRadialCanHurtDamageCauser) == 0x000039, "Member 'FStaticWeaponDataComponent::m_bRadialCanHurtDamageCauser' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_DamageValue) == 0x00003C, "Member 'FStaticWeaponDataComponent::m_DamageValue' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ShieldDamageValue) == 0x000040, "Member 'FStaticWeaponDataComponent::m_ShieldDamageValue' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_DamageValue_NPC) == 0x000044, "Member 'FStaticWeaponDataComponent::m_DamageValue_NPC' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ShieldDamageValue_NPC) == 0x000048, "Member 'FStaticWeaponDataComponent::m_ShieldDamageValue_NPC' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_RadialDamageConfig) == 0x00004C, "Member 'FStaticWeaponDataComponent::m_RadialDamageConfig' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_RadialDamageConfig_NPC) == 0x000068, "Member 'FStaticWeaponDataComponent::m_RadialDamageConfig_NPC' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_CritDamage) == 0x000098, "Member 'FStaticWeaponDataComponent::m_CritDamage' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_DamageFalloffCurve) == 0x0000A0, "Member 'FStaticWeaponDataComponent::m_DamageFalloffCurve' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_DamageFalloffCurveShields) == 0x0000B0, "Member 'FStaticWeaponDataComponent::m_DamageFalloffCurveShields' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_PoiseDamage) == 0x0000C0, "Member 'FStaticWeaponDataComponent::m_PoiseDamage' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ShieldedPoiseDamage) == 0x0000CC, "Member 'FStaticWeaponDataComponent::m_ShieldedPoiseDamage' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_MinimumPoiseDamage) == 0x0000D8, "Member 'FStaticWeaponDataComponent::m_MinimumPoiseDamage' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_PoiseDamage_NPC) == 0x0000E4, "Member 'FStaticWeaponDataComponent::m_PoiseDamage_NPC' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ShieldedPoiseDamage_NPC) == 0x0000F0, "Member 'FStaticWeaponDataComponent::m_ShieldedPoiseDamage_NPC' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_MinimumPoiseDamage_NPC) == 0x0000FC, "Member 'FStaticWeaponDataComponent::m_MinimumPoiseDamage_NPC' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_MaximumRange) == 0x000108, "Member 'FStaticWeaponDataComponent::m_MaximumRange' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_MinimumRange) == 0x00010C, "Member 'FStaticWeaponDataComponent::m_MinimumRange' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_EffectiveRange) == 0x000110, "Member 'FStaticWeaponDataComponent::m_EffectiveRange' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_HazardZoneIntersectNumShotsThreshold) == 0x000114, "Member 'FStaticWeaponDataComponent::m_HazardZoneIntersectNumShotsThreshold' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AimAssistDistanceScaling) == 0x000118, "Member 'FStaticWeaponDataComponent::m_AimAssistDistanceScaling' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AimAssistFrictionDistanceScaling) == 0x000128, "Member 'FStaticWeaponDataComponent::m_AimAssistFrictionDistanceScaling' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, bIgnoreShieldHipFireRule) == 0x000138, "Member 'FStaticWeaponDataComponent::bIgnoreShieldHipFireRule' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_FireRate) == 0x00013C, "Member 'FStaticWeaponDataComponent::m_FireRate' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ShieldDepletionFactorBonusIncrement) == 0x000140, "Member 'FStaticWeaponDataComponent::m_ShieldDepletionFactorBonusIncrement' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_bIsSemiAuto) == 0x000144, "Member 'FStaticWeaponDataComponent::m_bIsSemiAuto' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_SemiAutoWindow) == 0x000148, "Member 'FStaticWeaponDataComponent::m_SemiAutoWindow' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_SemiAutoFiringStateDuration) == 0x00014C, "Member 'FStaticWeaponDataComponent::m_SemiAutoFiringStateDuration' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_TraceChannel) == 0x000150, "Member 'FStaticWeaponDataComponent::m_TraceChannel' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_bRequiresClientSideComplexTrace) == 0x000151, "Member 'FStaticWeaponDataComponent::m_bRequiresClientSideComplexTrace' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_CameraAimTraceSphereRadius) == 0x000154, "Member 'FStaticWeaponDataComponent::m_CameraAimTraceSphereRadius' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_GameplayEffectsToApply) == 0x000158, "Member 'FStaticWeaponDataComponent::m_GameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_GameplayEffectsToApplyToAttacker) == 0x000168, "Member 'FStaticWeaponDataComponent::m_GameplayEffectsToApplyToAttacker' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_TimeToSwitchFireModes) == 0x000178, "Member 'FStaticWeaponDataComponent::m_TimeToSwitchFireModes' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_UnholsterDuration) == 0x00017C, "Member 'FStaticWeaponDataComponent::m_UnholsterDuration' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_MoveSpeedModifier) == 0x000180, "Member 'FStaticWeaponDataComponent::m_MoveSpeedModifier' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ADSMoveSpeedModifier) == 0x000184, "Member 'FStaticWeaponDataComponent::m_ADSMoveSpeedModifier' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_FiringMoveSpeedModifier) == 0x000188, "Member 'FStaticWeaponDataComponent::m_FiringMoveSpeedModifier' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ServerStaticTraceStartOffset) == 0x000190, "Member 'FStaticWeaponDataComponent::m_ServerStaticTraceStartOffset' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_BaseMeleeActions) == 0x0001A8, "Member 'FStaticWeaponDataComponent::m_BaseMeleeActions' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AmmoInventoryItem) == 0x0001D8, "Member 'FStaticWeaponDataComponent::m_AmmoInventoryItem' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_MaxAmmoInWeapon) == 0x0001E0, "Member 'FStaticWeaponDataComponent::m_MaxAmmoInWeapon' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ReloadTime) == 0x0001E4, "Member 'FStaticWeaponDataComponent::m_ReloadTime' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_bAutoReloadOnFire) == 0x0001E8, "Member 'FStaticWeaponDataComponent::m_bAutoReloadOnFire' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_bAutoReloadAfterFire) == 0x0001E9, "Member 'FStaticWeaponDataComponent::m_bAutoReloadAfterFire' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_bAutoReloadOnEmpty) == 0x0001EA, "Member 'FStaticWeaponDataComponent::m_bAutoReloadOnEmpty' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AmmoPerShot) == 0x0001EC, "Member 'FStaticWeaponDataComponent::m_AmmoPerShot' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_PowerConsumptionPerShot) == 0x0001F0, "Member 'FStaticWeaponDataComponent::m_PowerConsumptionPerShot' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_HeatAddedPerShot) == 0x0001F4, "Member 'FStaticWeaponDataComponent::m_HeatAddedPerShot' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_SwitchTime) == 0x0001F8, "Member 'FStaticWeaponDataComponent::m_SwitchTime' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_MaxBeamDuration) == 0x0001FC, "Member 'FStaticWeaponDataComponent::m_MaxBeamDuration' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_NumberOfBeams) == 0x000200, "Member 'FStaticWeaponDataComponent::m_NumberOfBeams' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_BeamSpreadAngle) == 0x000204, "Member 'FStaticWeaponDataComponent::m_BeamSpreadAngle' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_FlameRadius) == 0x000208, "Member 'FStaticWeaponDataComponent::m_FlameRadius' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_FlameIntimidationRadius) == 0x00020C, "Member 'FStaticWeaponDataComponent::m_FlameIntimidationRadius' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_NearHitGameplayEffectsToApply) == 0x000210, "Member 'FStaticWeaponDataComponent::m_NearHitGameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, FlamethrowerScaleOverTime) == 0x000220, "Member 'FStaticWeaponDataComponent::FlamethrowerScaleOverTime' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ScattergunOffsets) == 0x0002A8, "Member 'FStaticWeaponDataComponent::m_ScattergunOffsets' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ScattergunOffsetDistance) == 0x0002B8, "Member 'FStaticWeaponDataComponent::m_ScattergunOffsetDistance' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ScattergunRandomnessFactorRadians) == 0x0002BC, "Member 'FStaticWeaponDataComponent::m_ScattergunRandomnessFactorRadians' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_bUsePhysicsDrag) == 0x0002C0, "Member 'FStaticWeaponDataComponent::m_bUsePhysicsDrag' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_Mass) == 0x0002C4, "Member 'FStaticWeaponDataComponent::m_Mass' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ThreatAmount) == 0x0002C8, "Member 'FStaticWeaponDataComponent::m_ThreatAmount' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_FireFX) == 0x0002D0, "Member 'FStaticWeaponDataComponent::m_FireFX' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_FireTracerFX) == 0x000300, "Member 'FStaticWeaponDataComponent::m_FireTracerFX' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_FireMuzzleFX) == 0x000330, "Member 'FStaticWeaponDataComponent::m_FireMuzzleFX' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_FireMuzzleFXRate) == 0x000360, "Member 'FStaticWeaponDataComponent::m_FireMuzzleFXRate' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_BreakingFireFX) == 0x000368, "Member 'FStaticWeaponDataComponent::m_BreakingFireFX' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_SightsFX) == 0x000398, "Member 'FStaticWeaponDataComponent::m_SightsFX' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_PrimaryBeamFX) == 0x0003C8, "Member 'FStaticWeaponDataComponent::m_PrimaryBeamFX' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_PrimaryBeamColor) == 0x0003F8, "Member 'FStaticWeaponDataComponent::m_PrimaryBeamColor' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_PrimaryBeamWidth) == 0x000408, "Member 'FStaticWeaponDataComponent::m_PrimaryBeamWidth' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_SecondaryBeamFX) == 0x000410, "Member 'FStaticWeaponDataComponent::m_SecondaryBeamFX' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_SecondaryBeamColor) == 0x000440, "Member 'FStaticWeaponDataComponent::m_SecondaryBeamColor' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_SecondaryBeamWidth) == 0x000450, "Member 'FStaticWeaponDataComponent::m_SecondaryBeamWidth' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_bDoesBeamRequireImpactToFire) == 0x000454, "Member 'FStaticWeaponDataComponent::m_bDoesBeamRequireImpactToFire' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_MisfireBeamFX) == 0x000458, "Member 'FStaticWeaponDataComponent::m_MisfireBeamFX' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ImpactFX) == 0x000488, "Member 'FStaticWeaponDataComponent::m_ImpactFX' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_BlockedImpactFX) == 0x0004D8, "Member 'FStaticWeaponDataComponent::m_BlockedImpactFX' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ImpactDecals) == 0x000528, "Member 'FStaticWeaponDataComponent::m_ImpactDecals' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_LightConfig) == 0x000578, "Member 'FStaticWeaponDataComponent::m_LightConfig' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_MuzzleSocketName) == 0x0005B8, "Member 'FStaticWeaponDataComponent::m_MuzzleSocketName' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_MuzzleSocketsOverride) == 0x0005C0, "Member 'FStaticWeaponDataComponent::m_MuzzleSocketsOverride' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AimAssistFrictionRange) == 0x0005D0, "Member 'FStaticWeaponDataComponent::m_AimAssistFrictionRange' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AimAssistRotationRange) == 0x0005D4, "Member 'FStaticWeaponDataComponent::m_AimAssistRotationRange' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_DragConfig) == 0x0005D8, "Member 'FStaticWeaponDataComponent::m_DragConfig' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_DragConfigNPC) == 0x000678, "Member 'FStaticWeaponDataComponent::m_DragConfigNPC' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_bBecomesProjectileAfterEffectiveRange) == 0x000718, "Member 'FStaticWeaponDataComponent::m_bBecomesProjectileAfterEffectiveRange' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_ProjectileClass) == 0x000720, "Member 'FStaticWeaponDataComponent::m_ProjectileClass' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, BurstData) == 0x000758, "Member 'FStaticWeaponDataComponent::BurstData' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, SpringRecoilData) == 0x000760, "Member 'FStaticWeaponDataComponent::SpringRecoilData' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, RecoilSystemConfig) == 0x000770, "Member 'FStaticWeaponDataComponent::RecoilSystemConfig' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, SpinupData) == 0x000790, "Member 'FStaticWeaponDataComponent::SpinupData' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, FocusFireData) == 0x000848, "Member 'FStaticWeaponDataComponent::FocusFireData' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, BeamShieldData) == 0x000860, "Member 'FStaticWeaponDataComponent::BeamShieldData' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, FiringPatternData) == 0x0008D0, "Member 'FStaticWeaponDataComponent::FiringPatternData' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_FiringNoiseDistance) == 0x0008F4, "Member 'FStaticWeaponDataComponent::m_FiringNoiseDistance' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_FlyByNoiseDistance) == 0x0008F8, "Member 'FStaticWeaponDataComponent::m_FlyByNoiseDistance' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventEquipped) == 0x000900, "Member 'FStaticWeaponDataComponent::m_AudioEventEquipped' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventHolstered) == 0x000930, "Member 'FStaticWeaponDataComponent::m_AudioEventHolstered' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventOnFire) == 0x000960, "Member 'FStaticWeaponDataComponent::m_AudioEventOnFire' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventOnFireStop) == 0x000990, "Member 'FStaticWeaponDataComponent::m_AudioEventOnFireStop' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventReload) == 0x0009C0, "Member 'FStaticWeaponDataComponent::m_AudioEventReload' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventReloadCancelled) == 0x0009F0, "Member 'FStaticWeaponDataComponent::m_AudioEventReloadCancelled' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventImpact) == 0x000A20, "Member 'FStaticWeaponDataComponent::m_AudioEventImpact' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventImpactStop) == 0x000A50, "Member 'FStaticWeaponDataComponent::m_AudioEventImpactStop' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventWeaponBreak) == 0x000A80, "Member 'FStaticWeaponDataComponent::m_AudioEventWeaponBreak' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventWeaponDryFire) == 0x000AB0, "Member 'FStaticWeaponDataComponent::m_AudioEventWeaponDryFire' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_AudioEventBeamMisfire) == 0x000AE0, "Member 'FStaticWeaponDataComponent::m_AudioEventBeamMisfire' has a wrong offset!");
static_assert(offsetof(FStaticWeaponDataComponent, m_WeaponMovementAccuracyData) == 0x000B10, "Member 'FStaticWeaponDataComponent::m_WeaponMovementAccuracyData' has a wrong offset!");

// ScriptStruct DuneSandbox.CachedShortCommandExecutionEntries
// 0x0010 (0x0010 - 0x0000)
struct FCachedShortCommandExecutionEntries final
{
public:
	TArray<class UShortCommandsExecutionBase*>    m_ShortCommandExecutions;                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedShortCommandExecutionEntries) == 0x000008, "Wrong alignment on FCachedShortCommandExecutionEntries");
static_assert(sizeof(FCachedShortCommandExecutionEntries) == 0x000010, "Wrong size on FCachedShortCommandExecutionEntries");
static_assert(offsetof(FCachedShortCommandExecutionEntries, m_ShortCommandExecutions) == 0x000000, "Member 'FCachedShortCommandExecutionEntries::m_ShortCommandExecutions' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneSpringArmDebugInfo
// 0x0160 (0x0160 - 0x0000)
struct alignas(0x08) FDuneSpringArmDebugInfo final
{
public:
	uint8                                         Pad_0[0x160];                                      // 0x0000(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneSpringArmDebugInfo) == 0x000008, "Wrong alignment on FDuneSpringArmDebugInfo");
static_assert(sizeof(FDuneSpringArmDebugInfo) == 0x000160, "Wrong size on FDuneSpringArmDebugInfo");

// ScriptStruct DuneSandbox.PartyInvitation
// 0x0048 (0x0048 - 0x0000)
struct FPartyInvitation final
{
public:
	struct FUniqueID                              InviteId;                                          // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              PartyId;                                           // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              PlayerId;                                          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              SenderId;                                          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderName;                                        // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InviteSentUniverseTime;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyInvitation) == 0x000008, "Wrong alignment on FPartyInvitation");
static_assert(sizeof(FPartyInvitation) == 0x000048, "Wrong size on FPartyInvitation");
static_assert(offsetof(FPartyInvitation, InviteId) == 0x000000, "Member 'FPartyInvitation::InviteId' has a wrong offset!");
static_assert(offsetof(FPartyInvitation, PartyId) == 0x000008, "Member 'FPartyInvitation::PartyId' has a wrong offset!");
static_assert(offsetof(FPartyInvitation, PlayerId) == 0x000010, "Member 'FPartyInvitation::PlayerId' has a wrong offset!");
static_assert(offsetof(FPartyInvitation, PlayerName) == 0x000018, "Member 'FPartyInvitation::PlayerName' has a wrong offset!");
static_assert(offsetof(FPartyInvitation, SenderId) == 0x000028, "Member 'FPartyInvitation::SenderId' has a wrong offset!");
static_assert(offsetof(FPartyInvitation, SenderName) == 0x000030, "Member 'FPartyInvitation::SenderName' has a wrong offset!");
static_assert(offsetof(FPartyInvitation, InviteSentUniverseTime) == 0x000040, "Member 'FPartyInvitation::InviteSentUniverseTime' has a wrong offset!");

// ScriptStruct DuneSandbox.PatrolShipSpawnTimeSettings
// 0x0008 (0x0008 - 0x0000)
struct FPatrolShipSpawnTimeSettings final
{
public:
	float                                         m_TimeOfDayToSpawn;                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TimeOfDayToDespawn;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolShipSpawnTimeSettings) == 0x000004, "Wrong alignment on FPatrolShipSpawnTimeSettings");
static_assert(sizeof(FPatrolShipSpawnTimeSettings) == 0x000008, "Wrong size on FPatrolShipSpawnTimeSettings");
static_assert(offsetof(FPatrolShipSpawnTimeSettings, m_TimeOfDayToSpawn) == 0x000000, "Member 'FPatrolShipSpawnTimeSettings::m_TimeOfDayToSpawn' has a wrong offset!");
static_assert(offsetof(FPatrolShipSpawnTimeSettings, m_TimeOfDayToDespawn) == 0x000004, "Member 'FPatrolShipSpawnTimeSettings::m_TimeOfDayToDespawn' has a wrong offset!");

// ScriptStruct DuneSandbox.TravelQueueUpdatedResult
// 0x0010 (0x0010 - 0x0000)
struct FTravelQueueUpdatedResult final
{
public:
	int32                                         PlayersInQueue;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADunePlayerControllerBase*              Controller;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTravelQueueUpdatedResult) == 0x000008, "Wrong alignment on FTravelQueueUpdatedResult");
static_assert(sizeof(FTravelQueueUpdatedResult) == 0x000010, "Wrong size on FTravelQueueUpdatedResult");
static_assert(offsetof(FTravelQueueUpdatedResult, PlayersInQueue) == 0x000000, "Member 'FTravelQueueUpdatedResult::PlayersInQueue' has a wrong offset!");
static_assert(offsetof(FTravelQueueUpdatedResult, Controller) == 0x000008, "Member 'FTravelQueueUpdatedResult::Controller' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemCircuit
// 0x0060 (0x0060 - 0x0000)
struct FTotemCircuit
{
public:
	int32                                         m_CircuitId;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        m_OwnerTotemEntityId;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FEntityId, ECircuitElementFlowType> m_CircuitElements;                               // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTotemCircuit) == 0x000008, "Wrong alignment on FTotemCircuit");
static_assert(sizeof(FTotemCircuit) == 0x000060, "Wrong size on FTotemCircuit");
static_assert(offsetof(FTotemCircuit, m_CircuitId) == 0x000000, "Member 'FTotemCircuit::m_CircuitId' has a wrong offset!");
static_assert(offsetof(FTotemCircuit, m_OwnerTotemEntityId) == 0x000008, "Member 'FTotemCircuit::m_OwnerTotemEntityId' has a wrong offset!");
static_assert(offsetof(FTotemCircuit, m_CircuitElements) == 0x000010, "Member 'FTotemCircuit::m_CircuitElements' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemCircuitPower
// 0x0008 (0x0068 - 0x0060)
struct FTotemCircuitPower final : public FTotemCircuit
{
public:
	int32                                         m_TotalPowerProduction;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_TotalPowerConsumption;                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTotemCircuitPower) == 0x000008, "Wrong alignment on FTotemCircuitPower");
static_assert(sizeof(FTotemCircuitPower) == 0x000068, "Wrong size on FTotemCircuitPower");
static_assert(offsetof(FTotemCircuitPower, m_TotalPowerProduction) == 0x000060, "Member 'FTotemCircuitPower::m_TotalPowerProduction' has a wrong offset!");
static_assert(offsetof(FTotemCircuitPower, m_TotalPowerConsumption) == 0x000064, "Member 'FTotemCircuitPower::m_TotalPowerConsumption' has a wrong offset!");

// ScriptStruct DuneSandbox.DrawDebugCircleProperties
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FDrawDebugCircleProperties final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrawDebugCircleProperties) == 0x000008, "Wrong alignment on FDrawDebugCircleProperties");
static_assert(sizeof(FDrawDebugCircleProperties) == 0x000030, "Wrong size on FDrawDebugCircleProperties");

// ScriptStruct DuneSandbox.CharacterProfile
// 0x0010 (0x0010 - 0x0000)
struct FCharacterProfile final
{
public:
	TArray<class FName>                           BuildingFavorites;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterProfile) == 0x000008, "Wrong alignment on FCharacterProfile");
static_assert(sizeof(FCharacterProfile) == 0x000010, "Wrong size on FCharacterProfile");
static_assert(offsetof(FCharacterProfile, BuildingFavorites) == 0x000000, "Member 'FCharacterProfile::BuildingFavorites' has a wrong offset!");

// ScriptStruct DuneSandbox.TravelRequestResult
// 0x0018 (0x0018 - 0x0000)
struct FTravelRequestResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADunePlayerControllerBase*              Controller;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTravelRequestResult) == 0x000008, "Wrong alignment on FTravelRequestResult");
static_assert(sizeof(FTravelRequestResult) == 0x000018, "Wrong size on FTravelRequestResult");
static_assert(offsetof(FTravelRequestResult, bSuccess) == 0x000000, "Member 'FTravelRequestResult::bSuccess' has a wrong offset!");
static_assert(offsetof(FTravelRequestResult, Controller) == 0x000008, "Member 'FTravelRequestResult::Controller' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneExchangeQuery
// 0x0028 (0x0028 - 0x0000)
struct FDuneExchangeQuery final
{
public:
	TArray<uint8>                                 CategoryIndices;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       TemplateId;                                        // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MinPrice;                                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MaxPrice;                                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneExchangeQuery) == 0x000008, "Wrong alignment on FDuneExchangeQuery");
static_assert(sizeof(FDuneExchangeQuery) == 0x000028, "Wrong size on FDuneExchangeQuery");
static_assert(offsetof(FDuneExchangeQuery, CategoryIndices) == 0x000000, "Member 'FDuneExchangeQuery::CategoryIndices' has a wrong offset!");
static_assert(offsetof(FDuneExchangeQuery, TemplateId) == 0x000010, "Member 'FDuneExchangeQuery::TemplateId' has a wrong offset!");
static_assert(offsetof(FDuneExchangeQuery, MinPrice) == 0x000018, "Member 'FDuneExchangeQuery::MinPrice' has a wrong offset!");
static_assert(offsetof(FDuneExchangeQuery, MaxPrice) == 0x000020, "Member 'FDuneExchangeQuery::MaxPrice' has a wrong offset!");

// ScriptStruct DuneSandbox.TextChatState
// 0x0058 (0x0058 - 0x0000)
struct FTextChatState final
{
public:
	ETextChatChannelType                          m_MainChannel;                                     // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETextChatChannelType, class FString>     m_ActiveSubChannels;                               // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextChatState) == 0x000008, "Wrong alignment on FTextChatState");
static_assert(sizeof(FTextChatState) == 0x000058, "Wrong size on FTextChatState");
static_assert(offsetof(FTextChatState, m_MainChannel) == 0x000000, "Member 'FTextChatState::m_MainChannel' has a wrong offset!");
static_assert(offsetof(FTextChatState, m_ActiveSubChannels) == 0x000008, "Member 'FTextChatState::m_ActiveSubChannels' has a wrong offset!");

// ScriptStruct DuneSandbox.DateTimeUnitName
// 0x0030 (0x0030 - 0x0000)
struct FDateTimeUnitName final
{
public:
	class FText                                   SingularForm;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PluralForm;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDateTimeUnitName) == 0x000008, "Wrong alignment on FDateTimeUnitName");
static_assert(sizeof(FDateTimeUnitName) == 0x000030, "Wrong size on FDateTimeUnitName");
static_assert(offsetof(FDateTimeUnitName, SingularForm) == 0x000000, "Member 'FDateTimeUnitName::SingularForm' has a wrong offset!");
static_assert(offsetof(FDateTimeUnitName, PluralForm) == 0x000018, "Member 'FDateTimeUnitName::PluralForm' has a wrong offset!");

// ScriptStruct DuneSandbox.DateTimeUnitNames
// 0x00C0 (0x00C0 - 0x0000)
struct FDateTimeUnitNames final
{
public:
	struct FDateTimeUnitName                      Day;                                               // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTimeUnitName                      Hour;                                              // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTimeUnitName                      Minute;                                            // 0x0060(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTimeUnitName                      Second;                                            // 0x0090(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDateTimeUnitNames) == 0x000008, "Wrong alignment on FDateTimeUnitNames");
static_assert(sizeof(FDateTimeUnitNames) == 0x0000C0, "Wrong size on FDateTimeUnitNames");
static_assert(offsetof(FDateTimeUnitNames, Day) == 0x000000, "Member 'FDateTimeUnitNames::Day' has a wrong offset!");
static_assert(offsetof(FDateTimeUnitNames, Hour) == 0x000030, "Member 'FDateTimeUnitNames::Hour' has a wrong offset!");
static_assert(offsetof(FDateTimeUnitNames, Minute) == 0x000060, "Member 'FDateTimeUnitNames::Minute' has a wrong offset!");
static_assert(offsetof(FDateTimeUnitNames, Second) == 0x000090, "Member 'FDateTimeUnitNames::Second' has a wrong offset!");

// ScriptStruct DuneSandbox.MeleeServerRPCData
// 0x0168 (0x0168 - 0x0000)
struct FMeleeServerRPCData final
{
public:
	TSubclassOf<class UDuneDamageType>            m_DamageTypeClass;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              m_HitFromDirection;                                // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             m_HitInfo;                                         // 0x0020(0x00E8)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         m_Damage;                                          // 0x0108(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApply;                          // 0x0110(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApplyToAttacker;                // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage;                                     // 0x0130(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_WeaponName;                                      // 0x0140(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_AttackName;                                      // 0x0150(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsDamageShielded;                                // 0x0160(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDirectDamage;                                   // 0x0161(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162[0x2];                                      // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CalculatedFrameTypeDamageModifier;               // 0x0164(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeServerRPCData) == 0x000008, "Wrong alignment on FMeleeServerRPCData");
static_assert(sizeof(FMeleeServerRPCData) == 0x000168, "Wrong size on FMeleeServerRPCData");
static_assert(offsetof(FMeleeServerRPCData, m_DamageTypeClass) == 0x000000, "Member 'FMeleeServerRPCData::m_DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_HitFromDirection) == 0x000008, "Member 'FMeleeServerRPCData::m_HitFromDirection' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_HitInfo) == 0x000020, "Member 'FMeleeServerRPCData::m_HitInfo' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_Damage) == 0x000108, "Member 'FMeleeServerRPCData::m_Damage' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_GameplayEffectsToApply) == 0x000110, "Member 'FMeleeServerRPCData::m_GameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_GameplayEffectsToApplyToAttacker) == 0x000120, "Member 'FMeleeServerRPCData::m_GameplayEffectsToApplyToAttacker' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_PoiseDamage) == 0x000130, "Member 'FMeleeServerRPCData::m_PoiseDamage' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_WeaponName) == 0x000140, "Member 'FMeleeServerRPCData::m_WeaponName' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_AttackName) == 0x000150, "Member 'FMeleeServerRPCData::m_AttackName' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_IsDamageShielded) == 0x000160, "Member 'FMeleeServerRPCData::m_IsDamageShielded' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_bDirectDamage) == 0x000161, "Member 'FMeleeServerRPCData::m_bDirectDamage' has a wrong offset!");
static_assert(offsetof(FMeleeServerRPCData, m_CalculatedFrameTypeDamageModifier) == 0x000164, "Member 'FMeleeServerRPCData::m_CalculatedFrameTypeDamageModifier' has a wrong offset!");

// ScriptStruct DuneSandbox.DrawDebugBoxProperties
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FDrawDebugBoxProperties final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrawDebugBoxProperties) == 0x000008, "Wrong alignment on FDrawDebugBoxProperties");
static_assert(sizeof(FDrawDebugBoxProperties) == 0x000058, "Wrong size on FDrawDebugBoxProperties");

// ScriptStruct DuneSandbox.LocalizedMessageFormatArg
// 0x0038 (0x0038 - 0x0000)
struct FLocalizedMessageFormatArg final
{
public:
	class FString                                 m_NativeValue;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_TableId;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_Key;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELocalizedMessageFormatArgType                m_Type;                                            // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocalizedMessageFormatArg) == 0x000008, "Wrong alignment on FLocalizedMessageFormatArg");
static_assert(sizeof(FLocalizedMessageFormatArg) == 0x000038, "Wrong size on FLocalizedMessageFormatArg");
static_assert(offsetof(FLocalizedMessageFormatArg, m_NativeValue) == 0x000000, "Member 'FLocalizedMessageFormatArg::m_NativeValue' has a wrong offset!");
static_assert(offsetof(FLocalizedMessageFormatArg, m_TableId) == 0x000010, "Member 'FLocalizedMessageFormatArg::m_TableId' has a wrong offset!");
static_assert(offsetof(FLocalizedMessageFormatArg, m_Key) == 0x000020, "Member 'FLocalizedMessageFormatArg::m_Key' has a wrong offset!");
static_assert(offsetof(FLocalizedMessageFormatArg, m_Type) == 0x000030, "Member 'FLocalizedMessageFormatArg::m_Type' has a wrong offset!");

// ScriptStruct DuneSandbox.LocalizedMessageData
// 0x0030 (0x0030 - 0x0000)
struct FLocalizedMessageData final
{
public:
	class FString                                 m_TableId;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_Key;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLocalizedMessageFormatArg>     m_FormatArgs;                                      // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizedMessageData) == 0x000008, "Wrong alignment on FLocalizedMessageData");
static_assert(sizeof(FLocalizedMessageData) == 0x000030, "Wrong size on FLocalizedMessageData");
static_assert(offsetof(FLocalizedMessageData, m_TableId) == 0x000000, "Member 'FLocalizedMessageData::m_TableId' has a wrong offset!");
static_assert(offsetof(FLocalizedMessageData, m_Key) == 0x000010, "Member 'FLocalizedMessageData::m_Key' has a wrong offset!");
static_assert(offsetof(FLocalizedMessageData, m_FormatArgs) == 0x000020, "Member 'FLocalizedMessageData::m_FormatArgs' has a wrong offset!");

// ScriptStruct DuneSandbox.ChatMessageData
// 0x00B8 (0x00B8 - 0x0000)
struct FChatMessageData final
{
public:
	struct FGuid                                  m_Id;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextChatChannelType                          m_Type;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              m_PlayerIdFrom;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_UserFuncomIdFrom;                                // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_UserNameFrom;                                    // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_UserNameTo;                                      // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_Message;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLocalizedMessageData                  m_LocalizedMessageData;                            // 0x0060(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDateTime                              m_Timestamp;                                       // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_OriginLocation;                                  // 0x0098(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_HasSeenMessage;                                  // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsSendByLocalPlayer;                             // 0x00B1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChatMessageData) == 0x000008, "Wrong alignment on FChatMessageData");
static_assert(sizeof(FChatMessageData) == 0x0000B8, "Wrong size on FChatMessageData");
static_assert(offsetof(FChatMessageData, m_Id) == 0x000000, "Member 'FChatMessageData::m_Id' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_Type) == 0x000010, "Member 'FChatMessageData::m_Type' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_PlayerIdFrom) == 0x000018, "Member 'FChatMessageData::m_PlayerIdFrom' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_UserFuncomIdFrom) == 0x000020, "Member 'FChatMessageData::m_UserFuncomIdFrom' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_UserNameFrom) == 0x000030, "Member 'FChatMessageData::m_UserNameFrom' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_UserNameTo) == 0x000040, "Member 'FChatMessageData::m_UserNameTo' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_Message) == 0x000050, "Member 'FChatMessageData::m_Message' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_LocalizedMessageData) == 0x000060, "Member 'FChatMessageData::m_LocalizedMessageData' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_Timestamp) == 0x000090, "Member 'FChatMessageData::m_Timestamp' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_OriginLocation) == 0x000098, "Member 'FChatMessageData::m_OriginLocation' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_HasSeenMessage) == 0x0000B0, "Member 'FChatMessageData::m_HasSeenMessage' has a wrong offset!");
static_assert(offsetof(FChatMessageData, m_IsSendByLocalPlayer) == 0x0000B1, "Member 'FChatMessageData::m_IsSendByLocalPlayer' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemCircuitInventory
// 0x0008 (0x0068 - 0x0060)
struct FTotemCircuitInventory final : public FTotemCircuit
{
public:
	class UPlaceableInventoryCircuitUpdatesHandler* m_InventoryCircuitUpdatesHandler;                // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTotemCircuitInventory) == 0x000008, "Wrong alignment on FTotemCircuitInventory");
static_assert(sizeof(FTotemCircuitInventory) == 0x000068, "Wrong size on FTotemCircuitInventory");
static_assert(offsetof(FTotemCircuitInventory, m_InventoryCircuitUpdatesHandler) == 0x000060, "Member 'FTotemCircuitInventory::m_InventoryCircuitUpdatesHandler' has a wrong offset!");

// ScriptStruct DuneSandbox.InventoryCircuitSyncData
// 0x0078 (0x0078 - 0x0000)
struct FInventoryCircuitSyncData final
{
public:
	struct FTotemCircuitInventory                 m_CircuitInventory;                                // 0x0000(0x0068)(NativeAccessSpecifierPrivate)
	TArray<struct FEBuildableType>                m_InventoryPlaceablesTypes;                        // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FInventoryCircuitSyncData) == 0x000008, "Wrong alignment on FInventoryCircuitSyncData");
static_assert(sizeof(FInventoryCircuitSyncData) == 0x000078, "Wrong size on FInventoryCircuitSyncData");
static_assert(offsetof(FInventoryCircuitSyncData, m_CircuitInventory) == 0x000000, "Member 'FInventoryCircuitSyncData::m_CircuitInventory' has a wrong offset!");
static_assert(offsetof(FInventoryCircuitSyncData, m_InventoryPlaceablesTypes) == 0x000068, "Member 'FInventoryCircuitSyncData::m_InventoryPlaceablesTypes' has a wrong offset!");

// ScriptStruct DuneSandbox.InventoryCircuitsSyncData
// 0x0010 (0x0010 - 0x0000)
struct FInventoryCircuitsSyncData final
{
public:
	TArray<struct FInventoryCircuitSyncData>      m_InventoryCircuitsData;                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FInventoryCircuitsSyncData) == 0x000008, "Wrong alignment on FInventoryCircuitsSyncData");
static_assert(sizeof(FInventoryCircuitsSyncData) == 0x000010, "Wrong size on FInventoryCircuitsSyncData");
static_assert(offsetof(FInventoryCircuitsSyncData, m_InventoryCircuitsData) == 0x000000, "Member 'FInventoryCircuitsSyncData::m_InventoryCircuitsData' has a wrong offset!");

// ScriptStruct DuneSandbox.DoorComponent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FDoorComponent final
{
public:
	EDoorState                                    m_DoorState;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShouldDoorCloseAutomatically;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShouldDoorOpenAutomaticallyInVehicle;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShouldDoorOpenAutomaticallyOnFoot;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDoorComponent) == 0x000004, "Wrong alignment on FDoorComponent");
static_assert(sizeof(FDoorComponent) == 0x000008, "Wrong size on FDoorComponent");
static_assert(offsetof(FDoorComponent, m_DoorState) == 0x000000, "Member 'FDoorComponent::m_DoorState' has a wrong offset!");
static_assert(offsetof(FDoorComponent, m_bShouldDoorCloseAutomatically) == 0x000001, "Member 'FDoorComponent::m_bShouldDoorCloseAutomatically' has a wrong offset!");
static_assert(offsetof(FDoorComponent, m_bShouldDoorOpenAutomaticallyInVehicle) == 0x000002, "Member 'FDoorComponent::m_bShouldDoorOpenAutomaticallyInVehicle' has a wrong offset!");
static_assert(offsetof(FDoorComponent, m_bShouldDoorOpenAutomaticallyOnFoot) == 0x000003, "Member 'FDoorComponent::m_bShouldDoorOpenAutomaticallyOnFoot' has a wrong offset!");

// ScriptStruct DuneSandbox.ESchematicId
// 0x0000 (0x0008 - 0x0008)
struct FESchematicId final : public FStringEnumValue
{
};
static_assert(alignof(FESchematicId) == 0x000004, "Wrong alignment on FESchematicId");
static_assert(sizeof(FESchematicId) == 0x000008, "Wrong size on FESchematicId");

// ScriptStruct DuneSandbox.HazardZone3DShapeInfo
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FHazardZone3DShapeInfo final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHazardZone3DShapeInfo) == 0x000010, "Wrong alignment on FHazardZone3DShapeInfo");
static_assert(sizeof(FHazardZone3DShapeInfo) == 0x000090, "Wrong size on FHazardZone3DShapeInfo");

// ScriptStruct DuneSandbox.EIconPresetWidgetName
// 0x0000 (0x0008 - 0x0008)
struct FEIconPresetWidgetName final : public FStringEnumValue
{
};
static_assert(alignof(FEIconPresetWidgetName) == 0x000004, "Wrong alignment on FEIconPresetWidgetName");
static_assert(sizeof(FEIconPresetWidgetName) == 0x000008, "Wrong size on FEIconPresetWidgetName");

// ScriptStruct DuneSandbox.MetaDialogData
// 0x0250 (0x0250 - 0x0000)
struct alignas(0x10) FMetaDialogData final
{
public:
	TArray<class FText>                           m_TitlesArray;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           m_MessagesArray;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   m_Message;                                         // 0x0020(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   m_ConfirmText;                                     // 0x0038(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   m_CancelText;                                      // 0x0050(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   m_ExtraButton1Text;                                // 0x0068(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         m_ButtonEnableFlags;                               // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ButtonDeactivatedFlags;                          // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NoCloseButtonFlags;                              // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMetaDialogButtonId                           m_DefaultButton;                                   // 0x008C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMetaDialogWidth                              m_Width;                                           // 0x008D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_WidthOverride;                                   // 0x0090(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HeightOverride;                                  // 0x0094(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      m_ImagesArray;                                     // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_HeaderIcon;                                      // 0x00A8(0x0030)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEIconPresetWidgetName                 m_IconPresetName;                                  // 0x00D8(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_WarningMessage;                                  // 0x00E0(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                m_UserData;                                        // 0x00F8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                m_OutputData;                                      // 0x0100(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindowLayerStacks                            m_WindowStack;                                     // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bContentWidgetHandlesClosing;                    // 0x0109(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseBackgroundLinework;                          // 0x010A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseThrobberAnimation;                           // 0x010B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      m_CustomLinework;                                  // 0x0110(0x0030)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 m_CustomContentBackground;                         // 0x0140(0x0030)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMetaDialogAnimMode                           m_AnimMode;                                        // 0x0170(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDialogContentBase>         m_ContentWidgetClass;                              // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              m_OnDialogOpenedDynamic;                           // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x18];                                     // 0x0190(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const EMetaDialogButtonId ButtonId)> m_OnDialogClosedDynamic;      // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x98];                                     // 0x01B8(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetaDialogData) == 0x000010, "Wrong alignment on FMetaDialogData");
static_assert(sizeof(FMetaDialogData) == 0x000250, "Wrong size on FMetaDialogData");
static_assert(offsetof(FMetaDialogData, m_TitlesArray) == 0x000000, "Member 'FMetaDialogData::m_TitlesArray' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_MessagesArray) == 0x000010, "Member 'FMetaDialogData::m_MessagesArray' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_Message) == 0x000020, "Member 'FMetaDialogData::m_Message' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_ConfirmText) == 0x000038, "Member 'FMetaDialogData::m_ConfirmText' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_CancelText) == 0x000050, "Member 'FMetaDialogData::m_CancelText' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_ExtraButton1Text) == 0x000068, "Member 'FMetaDialogData::m_ExtraButton1Text' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_ButtonEnableFlags) == 0x000080, "Member 'FMetaDialogData::m_ButtonEnableFlags' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_ButtonDeactivatedFlags) == 0x000084, "Member 'FMetaDialogData::m_ButtonDeactivatedFlags' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_NoCloseButtonFlags) == 0x000088, "Member 'FMetaDialogData::m_NoCloseButtonFlags' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_DefaultButton) == 0x00008C, "Member 'FMetaDialogData::m_DefaultButton' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_Width) == 0x00008D, "Member 'FMetaDialogData::m_Width' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_WidthOverride) == 0x000090, "Member 'FMetaDialogData::m_WidthOverride' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_HeightOverride) == 0x000094, "Member 'FMetaDialogData::m_HeightOverride' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_ImagesArray) == 0x000098, "Member 'FMetaDialogData::m_ImagesArray' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_HeaderIcon) == 0x0000A8, "Member 'FMetaDialogData::m_HeaderIcon' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_IconPresetName) == 0x0000D8, "Member 'FMetaDialogData::m_IconPresetName' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_WarningMessage) == 0x0000E0, "Member 'FMetaDialogData::m_WarningMessage' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_UserData) == 0x0000F8, "Member 'FMetaDialogData::m_UserData' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_OutputData) == 0x000100, "Member 'FMetaDialogData::m_OutputData' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_WindowStack) == 0x000108, "Member 'FMetaDialogData::m_WindowStack' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_bContentWidgetHandlesClosing) == 0x000109, "Member 'FMetaDialogData::m_bContentWidgetHandlesClosing' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_bUseBackgroundLinework) == 0x00010A, "Member 'FMetaDialogData::m_bUseBackgroundLinework' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_bUseThrobberAnimation) == 0x00010B, "Member 'FMetaDialogData::m_bUseThrobberAnimation' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_CustomLinework) == 0x000110, "Member 'FMetaDialogData::m_CustomLinework' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_CustomContentBackground) == 0x000140, "Member 'FMetaDialogData::m_CustomContentBackground' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_AnimMode) == 0x000170, "Member 'FMetaDialogData::m_AnimMode' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_ContentWidgetClass) == 0x000178, "Member 'FMetaDialogData::m_ContentWidgetClass' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_OnDialogOpenedDynamic) == 0x000180, "Member 'FMetaDialogData::m_OnDialogOpenedDynamic' has a wrong offset!");
static_assert(offsetof(FMetaDialogData, m_OnDialogClosedDynamic) == 0x0001A8, "Member 'FMetaDialogData::m_OnDialogClosedDynamic' has a wrong offset!");

// ScriptStruct DuneSandbox.CompassMarkerShrinkConfig
// 0x000C (0x000C - 0x0000)
struct FCompassMarkerShrinkConfig final
{
public:
	bool                                          OverrideStopShrinkRange;                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideStartShrinkRange;                          // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopShrinkRange;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartShrinkRange;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompassMarkerShrinkConfig) == 0x000004, "Wrong alignment on FCompassMarkerShrinkConfig");
static_assert(sizeof(FCompassMarkerShrinkConfig) == 0x00000C, "Wrong size on FCompassMarkerShrinkConfig");
static_assert(offsetof(FCompassMarkerShrinkConfig, OverrideStopShrinkRange) == 0x000000, "Member 'FCompassMarkerShrinkConfig::OverrideStopShrinkRange' has a wrong offset!");
static_assert(offsetof(FCompassMarkerShrinkConfig, OverrideStartShrinkRange) == 0x000001, "Member 'FCompassMarkerShrinkConfig::OverrideStartShrinkRange' has a wrong offset!");
static_assert(offsetof(FCompassMarkerShrinkConfig, StopShrinkRange) == 0x000004, "Member 'FCompassMarkerShrinkConfig::StopShrinkRange' has a wrong offset!");
static_assert(offsetof(FCompassMarkerShrinkConfig, StartShrinkRange) == 0x000008, "Member 'FCompassMarkerShrinkConfig::StartShrinkRange' has a wrong offset!");

// ScriptStruct DuneSandbox.CompassMarkerGuiData
// 0x0060 (0x0060 - 0x0000)
struct FCompassMarkerGuiData final
{
public:
	struct FMarkerId                              MarkerId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEMapMarker                            MarkerType;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldPos;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	ECompassMarkerClass                           MarkerClass;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCompassMarkerShrinkConfig             CompassMarkersConfig;                              // 0x003C(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FActorInstanceHandle                   ActorHandle;                                       // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompassMarkerGuiData) == 0x000008, "Wrong alignment on FCompassMarkerGuiData");
static_assert(sizeof(FCompassMarkerGuiData) == 0x000060, "Wrong size on FCompassMarkerGuiData");
static_assert(offsetof(FCompassMarkerGuiData, MarkerId) == 0x000000, "Member 'FCompassMarkerGuiData::MarkerId' has a wrong offset!");
static_assert(offsetof(FCompassMarkerGuiData, MarkerType) == 0x000004, "Member 'FCompassMarkerGuiData::MarkerType' has a wrong offset!");
static_assert(offsetof(FCompassMarkerGuiData, WorldPos) == 0x000010, "Member 'FCompassMarkerGuiData::WorldPos' has a wrong offset!");
static_assert(offsetof(FCompassMarkerGuiData, MarkerClass) == 0x000038, "Member 'FCompassMarkerGuiData::MarkerClass' has a wrong offset!");
static_assert(offsetof(FCompassMarkerGuiData, CompassMarkersConfig) == 0x00003C, "Member 'FCompassMarkerGuiData::CompassMarkersConfig' has a wrong offset!");
static_assert(offsetof(FCompassMarkerGuiData, ActorHandle) == 0x000048, "Member 'FCompassMarkerGuiData::ActorHandle' has a wrong offset!");

// ScriptStruct DuneSandbox.MapAreaId
// 0x0002 (0x0002 - 0x0000)
struct FMapAreaId final
{
public:
	uint16                                        m_Id;                                              // 0x0000(0x0002)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMapAreaId) == 0x000002, "Wrong alignment on FMapAreaId");
static_assert(sizeof(FMapAreaId) == 0x000002, "Wrong size on FMapAreaId");
static_assert(offsetof(FMapAreaId, m_Id) == 0x000000, "Member 'FMapAreaId::m_Id' has a wrong offset!");

// ScriptStruct DuneSandbox.BackendReportPlayerResult
// 0x0001 (0x0001 - 0x0000)
struct FBackendReportPlayerResult final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBackendReportPlayerResult) == 0x000001, "Wrong alignment on FBackendReportPlayerResult");
static_assert(sizeof(FBackendReportPlayerResult) == 0x000001, "Wrong size on FBackendReportPlayerResult");
static_assert(offsetof(FBackendReportPlayerResult, bSucceeded) == 0x000000, "Member 'FBackendReportPlayerResult::bSucceeded' has a wrong offset!");

// ScriptStruct DuneSandbox.CurrentBiomeComponent
// 0x00E8 (0x00E8 - 0x0000)
struct alignas(0x08) FCurrentBiomeComponent final
{
public:
	uint8                                         Pad_0[0xE8];                                       // 0x0000(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrentBiomeComponent) == 0x000008, "Wrong alignment on FCurrentBiomeComponent");
static_assert(sizeof(FCurrentBiomeComponent) == 0x0000E8, "Wrong size on FCurrentBiomeComponent");

// ScriptStruct DuneSandbox.RootMotionSource_FollowPathBase
// 0x0030 (0x0110 - 0x00E0)
struct FRootMotionSource_FollowPathBase : public FRootMotionSource
{
public:
	struct FVector                                StartLocation;                                     // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRestrictSpeedToExpected;                          // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_FollowPathBase) == 0x000010, "Wrong alignment on FRootMotionSource_FollowPathBase");
static_assert(sizeof(FRootMotionSource_FollowPathBase) == 0x000110, "Wrong size on FRootMotionSource_FollowPathBase");
static_assert(offsetof(FRootMotionSource_FollowPathBase, StartLocation) == 0x0000D8, "Member 'FRootMotionSource_FollowPathBase::StartLocation' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_FollowPathBase, Rotation) == 0x0000F0, "Member 'FRootMotionSource_FollowPathBase::Rotation' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_FollowPathBase, bRestrictSpeedToExpected) == 0x000108, "Member 'FRootMotionSource_FollowPathBase::bRestrictSpeedToExpected' has a wrong offset!");

// ScriptStruct DuneSandbox.RootMotionSource_FollowPath_AnimRootMotion
// 0x0030 (0x0140 - 0x0110)
struct FRootMotionSource_FollowPath_AnimRootMotion final : public FRootMotionSource_FollowPathBase
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0110(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTimeSeconds;                                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MotionScale;                                       // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_FollowPath_AnimRootMotion) == 0x000010, "Wrong alignment on FRootMotionSource_FollowPath_AnimRootMotion");
static_assert(sizeof(FRootMotionSource_FollowPath_AnimRootMotion) == 0x000140, "Wrong size on FRootMotionSource_FollowPath_AnimRootMotion");
static_assert(offsetof(FRootMotionSource_FollowPath_AnimRootMotion, AnimMontage) == 0x000110, "Member 'FRootMotionSource_FollowPath_AnimRootMotion::AnimMontage' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_FollowPath_AnimRootMotion, PlayRate) == 0x000118, "Member 'FRootMotionSource_FollowPath_AnimRootMotion::PlayRate' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_FollowPath_AnimRootMotion, StartTimeSeconds) == 0x00011C, "Member 'FRootMotionSource_FollowPath_AnimRootMotion::StartTimeSeconds' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_FollowPath_AnimRootMotion, MotionScale) == 0x000120, "Member 'FRootMotionSource_FollowPath_AnimRootMotion::MotionScale' has a wrong offset!");

// ScriptStruct DuneSandbox.ArmorItemTableRow
// 0x0078 (0x0088 - 0x0010)
struct FArmorItemTableRow final : public FTableRowBase
{
public:
	struct FArmorItemStats                        ArmorStats;                                        // 0x0010(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDeteriorationStats                    DeteriorationStats;                                // 0x0058(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArmorItemTableRow) == 0x000008, "Wrong alignment on FArmorItemTableRow");
static_assert(sizeof(FArmorItemTableRow) == 0x000088, "Wrong size on FArmorItemTableRow");
static_assert(offsetof(FArmorItemTableRow, ArmorStats) == 0x000010, "Member 'FArmorItemTableRow::ArmorStats' has a wrong offset!");
static_assert(offsetof(FArmorItemTableRow, DeteriorationStats) == 0x000058, "Member 'FArmorItemTableRow::DeteriorationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.SubCategoryData
// 0x0028 (0x0028 - 0x0000)
struct FSubCategoryData final
{
public:
	class FText                                   m_HeaderTitle;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UKeybindsData*                          m_KeyboardKeybindsData;                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKeybindsData*                          m_GamepadKeybindsData;                             // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubCategoryData) == 0x000008, "Wrong alignment on FSubCategoryData");
static_assert(sizeof(FSubCategoryData) == 0x000028, "Wrong size on FSubCategoryData");
static_assert(offsetof(FSubCategoryData, m_HeaderTitle) == 0x000000, "Member 'FSubCategoryData::m_HeaderTitle' has a wrong offset!");
static_assert(offsetof(FSubCategoryData, m_KeyboardKeybindsData) == 0x000018, "Member 'FSubCategoryData::m_KeyboardKeybindsData' has a wrong offset!");
static_assert(offsetof(FSubCategoryData, m_GamepadKeybindsData) == 0x000020, "Member 'FSubCategoryData::m_GamepadKeybindsData' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneExchangeNameTableRow
// 0x0018 (0x0028 - 0x0010)
struct FDuneExchangeNameTableRow final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneExchangeNameTableRow) == 0x000008, "Wrong alignment on FDuneExchangeNameTableRow");
static_assert(sizeof(FDuneExchangeNameTableRow) == 0x000028, "Wrong size on FDuneExchangeNameTableRow");
static_assert(offsetof(FDuneExchangeNameTableRow, Name) == 0x000010, "Member 'FDuneExchangeNameTableRow::Name' has a wrong offset!");

// ScriptStruct DuneSandbox.AudioGeometryBuildingInstanceComponent
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FAudioGeometryBuildingInstanceComponent final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioGeometryBuildingInstanceComponent) == 0x000008, "Wrong alignment on FAudioGeometryBuildingInstanceComponent");
static_assert(sizeof(FAudioGeometryBuildingInstanceComponent) == 0x000018, "Wrong size on FAudioGeometryBuildingInstanceComponent");

// ScriptStruct DuneSandbox.DeferredAbilityLevelUpComponent
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDeferredAbilityLevelUpComponent final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeferredAbilityLevelUpComponent) == 0x000008, "Wrong alignment on FDeferredAbilityLevelUpComponent");
static_assert(sizeof(FDeferredAbilityLevelUpComponent) == 0x000018, "Wrong size on FDeferredAbilityLevelUpComponent");

// ScriptStruct DuneSandbox.ENpcHazardAreaResponseSetName
// 0x0000 (0x0008 - 0x0008)
struct FENpcHazardAreaResponseSetName final : public FStringEnumValue
{
};
static_assert(alignof(FENpcHazardAreaResponseSetName) == 0x000004, "Wrong alignment on FENpcHazardAreaResponseSetName");
static_assert(sizeof(FENpcHazardAreaResponseSetName) == 0x000008, "Wrong size on FENpcHazardAreaResponseSetName");

// ScriptStruct DuneSandbox.SurveyProbeSequenceData
// 0x0058 (0x0058 - 0x0000)
struct FSurveyProbeSequenceData final
{
public:
	struct FMapAreaId                             AreaId;                                            // 0x0000(0x0002)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AreaScanLocation;                                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SurveyPointLocalPosition;                          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        QueryID;                                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SurveyProbeGoalLocation;                           // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurveyProbeSequenceData) == 0x000008, "Wrong alignment on FSurveyProbeSequenceData");
static_assert(sizeof(FSurveyProbeSequenceData) == 0x000058, "Wrong size on FSurveyProbeSequenceData");
static_assert(offsetof(FSurveyProbeSequenceData, AreaId) == 0x000000, "Member 'FSurveyProbeSequenceData::AreaId' has a wrong offset!");
static_assert(offsetof(FSurveyProbeSequenceData, AreaScanLocation) == 0x000008, "Member 'FSurveyProbeSequenceData::AreaScanLocation' has a wrong offset!");
static_assert(offsetof(FSurveyProbeSequenceData, SurveyPointLocalPosition) == 0x000020, "Member 'FSurveyProbeSequenceData::SurveyPointLocalPosition' has a wrong offset!");
static_assert(offsetof(FSurveyProbeSequenceData, Radius) == 0x000038, "Member 'FSurveyProbeSequenceData::Radius' has a wrong offset!");
static_assert(offsetof(FSurveyProbeSequenceData, QueryID) == 0x00003C, "Member 'FSurveyProbeSequenceData::QueryID' has a wrong offset!");
static_assert(offsetof(FSurveyProbeSequenceData, SurveyProbeGoalLocation) == 0x000040, "Member 'FSurveyProbeSequenceData::SurveyProbeGoalLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.DespawnAnimation
// 0x0038 (0x0038 - 0x0000)
struct FDespawnAnimation final
{
public:
	TSoftObjectPtr<class UAnimMontage>            m_AnimMontage;                                     // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AnimDuration;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDespawnAnimation) == 0x000008, "Wrong alignment on FDespawnAnimation");
static_assert(sizeof(FDespawnAnimation) == 0x000038, "Wrong size on FDespawnAnimation");
static_assert(offsetof(FDespawnAnimation, m_AnimMontage) == 0x000000, "Member 'FDespawnAnimation::m_AnimMontage' has a wrong offset!");
static_assert(offsetof(FDespawnAnimation, m_AnimDuration) == 0x000030, "Member 'FDespawnAnimation::m_AnimDuration' has a wrong offset!");

// ScriptStruct DuneSandbox.ENpcCombatAbilityName
// 0x0000 (0x0008 - 0x0008)
struct FENpcCombatAbilityName final : public FStringEnumValue
{
};
static_assert(alignof(FENpcCombatAbilityName) == 0x000004, "Wrong alignment on FENpcCombatAbilityName");
static_assert(sizeof(FENpcCombatAbilityName) == 0x000008, "Wrong size on FENpcCombatAbilityName");

// ScriptStruct DuneSandbox.CombatBehavior
// 0x0018 (0x0018 - 0x0000)
struct FCombatBehavior final
{
public:
	struct FENpcCombatAbilityName                 m_AbilityName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UConsiderationBase*>             m_Considerations;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatBehavior) == 0x000008, "Wrong alignment on FCombatBehavior");
static_assert(sizeof(FCombatBehavior) == 0x000018, "Wrong size on FCombatBehavior");
static_assert(offsetof(FCombatBehavior, m_AbilityName) == 0x000000, "Member 'FCombatBehavior::m_AbilityName' has a wrong offset!");
static_assert(offsetof(FCombatBehavior, m_Considerations) == 0x000008, "Member 'FCombatBehavior::m_Considerations' has a wrong offset!");

// ScriptStruct DuneSandbox.LocomotionVelocityBlend
// 0x0010 (0x0010 - 0x0000)
struct FLocomotionVelocityBlend final
{
public:
	float                                         m_Forward;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Backward;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Left;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Right;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocomotionVelocityBlend) == 0x000004, "Wrong alignment on FLocomotionVelocityBlend");
static_assert(sizeof(FLocomotionVelocityBlend) == 0x000010, "Wrong size on FLocomotionVelocityBlend");
static_assert(offsetof(FLocomotionVelocityBlend, m_Forward) == 0x000000, "Member 'FLocomotionVelocityBlend::m_Forward' has a wrong offset!");
static_assert(offsetof(FLocomotionVelocityBlend, m_Backward) == 0x000004, "Member 'FLocomotionVelocityBlend::m_Backward' has a wrong offset!");
static_assert(offsetof(FLocomotionVelocityBlend, m_Left) == 0x000008, "Member 'FLocomotionVelocityBlend::m_Left' has a wrong offset!");
static_assert(offsetof(FLocomotionVelocityBlend, m_Right) == 0x00000C, "Member 'FLocomotionVelocityBlend::m_Right' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorLODOptimizationSettings
// 0x000C (0x000C - 0x0000)
struct FActorLODOptimizationSettings final
{
public:
	float                                         TickInterval;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetUpdateFrequency;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinNetUpdateFrequency;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorLODOptimizationSettings) == 0x000004, "Wrong alignment on FActorLODOptimizationSettings");
static_assert(sizeof(FActorLODOptimizationSettings) == 0x00000C, "Wrong size on FActorLODOptimizationSettings");
static_assert(offsetof(FActorLODOptimizationSettings, TickInterval) == 0x000000, "Member 'FActorLODOptimizationSettings::TickInterval' has a wrong offset!");
static_assert(offsetof(FActorLODOptimizationSettings, NetUpdateFrequency) == 0x000004, "Member 'FActorLODOptimizationSettings::NetUpdateFrequency' has a wrong offset!");
static_assert(offsetof(FActorLODOptimizationSettings, MinNetUpdateFrequency) == 0x000008, "Member 'FActorLODOptimizationSettings::MinNetUpdateFrequency' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorSignificanceOptimizationSettings
// 0x0004 (0x0004 - 0x0000)
struct FActorSignificanceOptimizationSettings final
{
public:
	float                                         TickInterval;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorSignificanceOptimizationSettings) == 0x000004, "Wrong alignment on FActorSignificanceOptimizationSettings");
static_assert(sizeof(FActorSignificanceOptimizationSettings) == 0x000004, "Wrong size on FActorSignificanceOptimizationSettings");
static_assert(offsetof(FActorSignificanceOptimizationSettings, TickInterval) == 0x000000, "Member 'FActorSignificanceOptimizationSettings::TickInterval' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorOptimizationSettings
// 0x00A0 (0x00A0 - 0x0000)
struct FActorOptimizationSettings final
{
public:
	TMap<ELodLevel, struct FActorLODOptimizationSettings> ServerPerLodSettings;                      // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ESignificanceLevel, struct FActorSignificanceOptimizationSettings> ClientPerSignificanceSettings; // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorOptimizationSettings) == 0x000008, "Wrong alignment on FActorOptimizationSettings");
static_assert(sizeof(FActorOptimizationSettings) == 0x0000A0, "Wrong size on FActorOptimizationSettings");
static_assert(offsetof(FActorOptimizationSettings, ServerPerLodSettings) == 0x000000, "Member 'FActorOptimizationSettings::ServerPerLodSettings' has a wrong offset!");
static_assert(offsetof(FActorOptimizationSettings, ClientPerSignificanceSettings) == 0x000050, "Member 'FActorOptimizationSettings::ClientPerSignificanceSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.ComponentSignificanceOptimizationSettings
// 0x0004 (0x0004 - 0x0000)
struct FComponentSignificanceOptimizationSettings final
{
public:
	float                                         TickInterval;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComponentSignificanceOptimizationSettings) == 0x000004, "Wrong alignment on FComponentSignificanceOptimizationSettings");
static_assert(sizeof(FComponentSignificanceOptimizationSettings) == 0x000004, "Wrong size on FComponentSignificanceOptimizationSettings");
static_assert(offsetof(FComponentSignificanceOptimizationSettings, TickInterval) == 0x000000, "Member 'FComponentSignificanceOptimizationSettings::TickInterval' has a wrong offset!");

// ScriptStruct DuneSandbox.ComponentLODOptimizationSettings
// 0x0008 (0x0008 - 0x0000)
struct FComponentLODOptimizationSettings final
{
public:
	float                                         TickInterval;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetUpdateFrequency;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComponentLODOptimizationSettings) == 0x000004, "Wrong alignment on FComponentLODOptimizationSettings");
static_assert(sizeof(FComponentLODOptimizationSettings) == 0x000008, "Wrong size on FComponentLODOptimizationSettings");
static_assert(offsetof(FComponentLODOptimizationSettings, TickInterval) == 0x000000, "Member 'FComponentLODOptimizationSettings::TickInterval' has a wrong offset!");
static_assert(offsetof(FComponentLODOptimizationSettings, NetUpdateFrequency) == 0x000004, "Member 'FComponentLODOptimizationSettings::NetUpdateFrequency' has a wrong offset!");

// ScriptStruct DuneSandbox.ComponentOptimizationSettings
// 0x00A0 (0x00A0 - 0x0000)
struct FComponentOptimizationSettings final
{
public:
	TMap<ELodLevel, struct FComponentLODOptimizationSettings> ServerPerLodSettings;                  // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ESignificanceLevel, struct FComponentSignificanceOptimizationSettings> ClientPerSignificanceSettings; // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComponentOptimizationSettings) == 0x000008, "Wrong alignment on FComponentOptimizationSettings");
static_assert(sizeof(FComponentOptimizationSettings) == 0x0000A0, "Wrong size on FComponentOptimizationSettings");
static_assert(offsetof(FComponentOptimizationSettings, ServerPerLodSettings) == 0x000000, "Member 'FComponentOptimizationSettings::ServerPerLodSettings' has a wrong offset!");
static_assert(offsetof(FComponentOptimizationSettings, ClientPerSignificanceSettings) == 0x000050, "Member 'FComponentOptimizationSettings::ClientPerSignificanceSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.OptimizationSettings
// 0x00A0 (0x00A0 - 0x0000)
struct FOptimizationSettings final
{
public:
	TMap<TSoftClassPtr<class UClass>, struct FActorOptimizationSettings> PerActorSettings;           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<TSoftClassPtr<class UClass>, struct FComponentOptimizationSettings> PerComponentSettings;   // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimizationSettings) == 0x000008, "Wrong alignment on FOptimizationSettings");
static_assert(sizeof(FOptimizationSettings) == 0x0000A0, "Wrong size on FOptimizationSettings");
static_assert(offsetof(FOptimizationSettings, PerActorSettings) == 0x000000, "Member 'FOptimizationSettings::PerActorSettings' has a wrong offset!");
static_assert(offsetof(FOptimizationSettings, PerComponentSettings) == 0x000050, "Member 'FOptimizationSettings::PerComponentSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.AttachedPlaceableData
// 0x0070 (0x0070 - 0x0000)
struct FAttachedPlaceableData final
{
public:
	struct FEBuildableType                        m_PlaceableType;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             m_RelativeTransform;                               // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttachedPlaceableData) == 0x000010, "Wrong alignment on FAttachedPlaceableData");
static_assert(sizeof(FAttachedPlaceableData) == 0x000070, "Wrong size on FAttachedPlaceableData");
static_assert(offsetof(FAttachedPlaceableData, m_PlaceableType) == 0x000000, "Member 'FAttachedPlaceableData::m_PlaceableType' has a wrong offset!");
static_assert(offsetof(FAttachedPlaceableData, m_RelativeTransform) == 0x000010, "Member 'FAttachedPlaceableData::m_RelativeTransform' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableTier
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableTier final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableTier) == 0x000004, "Wrong alignment on FEBuildableTier");
static_assert(sizeof(FEBuildableTier) == 0x000008, "Wrong size on FEBuildableTier");

// ScriptStruct DuneSandbox.FailedOverlapMessageData
// 0x0020 (0x0020 - 0x0000)
struct FFailedOverlapMessageData final
{
public:
	class UClass*                                 m_OverlapClass;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_ErrorMessage;                                    // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFailedOverlapMessageData) == 0x000008, "Wrong alignment on FFailedOverlapMessageData");
static_assert(sizeof(FFailedOverlapMessageData) == 0x000020, "Wrong size on FFailedOverlapMessageData");
static_assert(offsetof(FFailedOverlapMessageData, m_OverlapClass) == 0x000000, "Member 'FFailedOverlapMessageData::m_OverlapClass' has a wrong offset!");
static_assert(offsetof(FFailedOverlapMessageData, m_ErrorMessage) == 0x000008, "Member 'FFailedOverlapMessageData::m_ErrorMessage' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableAudioCategory
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableAudioCategory final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableAudioCategory) == 0x000004, "Wrong alignment on FEBuildableAudioCategory");
static_assert(sizeof(FEBuildableAudioCategory) == 0x000008, "Wrong size on FEBuildableAudioCategory");

// ScriptStruct DuneSandbox.BuildableDataRowBase
// 0x0250 (0x0260 - 0x0010)
struct FBuildableDataRowBase : public FTableRowBase
{
public:
	struct FEBuildableGroupType                   m_BuildableGroupType;                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_BuildingMenuOrderWeight;                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEBuildableTier                        m_BuildableTier;                                   // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEBuildableUiCategory                  m_BuildableFaction;                                // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UCanBePlacedBase>>   m_CanBePlacedFunctions;                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_DestructibleGeometryCollectionActorClass;        // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UGeometryCollection>     m_DestructibleGeometryCollection;                  // 0x0070(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_DefaultTranslate;                                // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootAtOffset;                                     // 0x00B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShowInList;                                     // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_DisplayName;                                     // 0x00D8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_BuildableIcon;                                   // 0x00F0(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFailedOverlapMessageData>      m_ClassesFailedOverlapMessageOverride;             // 0x0120(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct FEDamageMitigationFloatStatID, float> m_DamageMitigationStats;                       // 0x0130(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           m_ValidPlacementClassesOverride;                   // 0x0180(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<class FName>                             m_ValidPlacementActorTags;                         // 0x0190(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideValidPlacementComponentClasses;         // 0x01E0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           m_ValidPlacementComponentClassesOverride;          // 0x01E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          m_bRequiresTotem;                                  // 0x01F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShouldPassOwner;                                // 0x01F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanBeAffectedByBuildingTool;                    // 0x01FA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FB[0x5];                                      // 0x01FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EBuildingActionAudioType, class UFcAudioEvent*> m_BuildableActionAudioEvents;               // 0x0200(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEBuildableAudioCategory               m_BuildableAudioCategory;                          // 0x0250(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuildableBuildAndFillHoldTimeType            m_BuildAndFillHoldTime;                            // 0x0258(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CustomBuildAndFillHoldTime;                      // 0x025C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableDataRowBase) == 0x000008, "Wrong alignment on FBuildableDataRowBase");
static_assert(sizeof(FBuildableDataRowBase) == 0x000260, "Wrong size on FBuildableDataRowBase");
static_assert(offsetof(FBuildableDataRowBase, m_BuildableGroupType) == 0x000010, "Member 'FBuildableDataRowBase::m_BuildableGroupType' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_BuildingMenuOrderWeight) == 0x000018, "Member 'FBuildableDataRowBase::m_BuildingMenuOrderWeight' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_BuildableTier) == 0x00001C, "Member 'FBuildableDataRowBase::m_BuildableTier' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_BuildableFaction) == 0x000024, "Member 'FBuildableDataRowBase::m_BuildableFaction' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_CanBePlacedFunctions) == 0x000030, "Member 'FBuildableDataRowBase::m_CanBePlacedFunctions' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_DestructibleGeometryCollectionActorClass) == 0x000040, "Member 'FBuildableDataRowBase::m_DestructibleGeometryCollectionActorClass' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_DestructibleGeometryCollection) == 0x000070, "Member 'FBuildableDataRowBase::m_DestructibleGeometryCollection' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_DefaultTranslate) == 0x0000A0, "Member 'FBuildableDataRowBase::m_DefaultTranslate' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, ShootAtOffset) == 0x0000B8, "Member 'FBuildableDataRowBase::ShootAtOffset' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_bShowInList) == 0x0000D0, "Member 'FBuildableDataRowBase::m_bShowInList' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_DisplayName) == 0x0000D8, "Member 'FBuildableDataRowBase::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_BuildableIcon) == 0x0000F0, "Member 'FBuildableDataRowBase::m_BuildableIcon' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_ClassesFailedOverlapMessageOverride) == 0x000120, "Member 'FBuildableDataRowBase::m_ClassesFailedOverlapMessageOverride' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_DamageMitigationStats) == 0x000130, "Member 'FBuildableDataRowBase::m_DamageMitigationStats' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_ValidPlacementClassesOverride) == 0x000180, "Member 'FBuildableDataRowBase::m_ValidPlacementClassesOverride' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_ValidPlacementActorTags) == 0x000190, "Member 'FBuildableDataRowBase::m_ValidPlacementActorTags' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_bOverrideValidPlacementComponentClasses) == 0x0001E0, "Member 'FBuildableDataRowBase::m_bOverrideValidPlacementComponentClasses' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_ValidPlacementComponentClassesOverride) == 0x0001E8, "Member 'FBuildableDataRowBase::m_ValidPlacementComponentClassesOverride' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_bRequiresTotem) == 0x0001F8, "Member 'FBuildableDataRowBase::m_bRequiresTotem' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_bShouldPassOwner) == 0x0001F9, "Member 'FBuildableDataRowBase::m_bShouldPassOwner' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_bCanBeAffectedByBuildingTool) == 0x0001FA, "Member 'FBuildableDataRowBase::m_bCanBeAffectedByBuildingTool' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_BuildableActionAudioEvents) == 0x000200, "Member 'FBuildableDataRowBase::m_BuildableActionAudioEvents' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_BuildableAudioCategory) == 0x000250, "Member 'FBuildableDataRowBase::m_BuildableAudioCategory' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_BuildAndFillHoldTime) == 0x000258, "Member 'FBuildableDataRowBase::m_BuildAndFillHoldTime' has a wrong offset!");
static_assert(offsetof(FBuildableDataRowBase, m_CustomBuildAndFillHoldTime) == 0x00025C, "Member 'FBuildableDataRowBase::m_CustomBuildAndFillHoldTime' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingDataRowBase
// 0x00B0 (0x0310 - 0x0260)
struct FBuildingDataRowBase final : public FBuildableDataRowBase
{
public:
	TArray<struct FAttachedPlaceableData>         m_AttachedPlaceables;                              // 0x0260(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             m_StaticMesh;                                      // 0x0270(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             m_StaticMeshReduced;                               // 0x02A0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsFoundation;                                   // 0x02D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsPillar;                                       // 0x02D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_OverrideCollisionDetectionPercentage;            // 0x02D8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_CollisionDetectionOffset;                        // 0x02F0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseStaticMeshForCollisionCheck;                 // 0x0308(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseOverrideCollisionPercentage;                 // 0x0309(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingDataRowBase) == 0x000008, "Wrong alignment on FBuildingDataRowBase");
static_assert(sizeof(FBuildingDataRowBase) == 0x000310, "Wrong size on FBuildingDataRowBase");
static_assert(offsetof(FBuildingDataRowBase, m_AttachedPlaceables) == 0x000260, "Member 'FBuildingDataRowBase::m_AttachedPlaceables' has a wrong offset!");
static_assert(offsetof(FBuildingDataRowBase, m_StaticMesh) == 0x000270, "Member 'FBuildingDataRowBase::m_StaticMesh' has a wrong offset!");
static_assert(offsetof(FBuildingDataRowBase, m_StaticMeshReduced) == 0x0002A0, "Member 'FBuildingDataRowBase::m_StaticMeshReduced' has a wrong offset!");
static_assert(offsetof(FBuildingDataRowBase, m_bIsFoundation) == 0x0002D0, "Member 'FBuildingDataRowBase::m_bIsFoundation' has a wrong offset!");
static_assert(offsetof(FBuildingDataRowBase, m_bIsPillar) == 0x0002D1, "Member 'FBuildingDataRowBase::m_bIsPillar' has a wrong offset!");
static_assert(offsetof(FBuildingDataRowBase, m_OverrideCollisionDetectionPercentage) == 0x0002D8, "Member 'FBuildingDataRowBase::m_OverrideCollisionDetectionPercentage' has a wrong offset!");
static_assert(offsetof(FBuildingDataRowBase, m_CollisionDetectionOffset) == 0x0002F0, "Member 'FBuildingDataRowBase::m_CollisionDetectionOffset' has a wrong offset!");
static_assert(offsetof(FBuildingDataRowBase, m_bUseStaticMeshForCollisionCheck) == 0x000308, "Member 'FBuildingDataRowBase::m_bUseStaticMeshForCollisionCheck' has a wrong offset!");
static_assert(offsetof(FBuildingDataRowBase, m_bUseOverrideCollisionPercentage) == 0x000309, "Member 'FBuildingDataRowBase::m_bUseOverrideCollisionPercentage' has a wrong offset!");

// ScriptStruct DuneSandbox.CachedWeaponModGameplayEffectData
// 0x0018 (0x0018 - 0x0000)
struct FCachedWeaponModGameplayEffectData final
{
public:
	class FName                                   m_CachedWeaponModName;                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    m_ActiveGameplayEffectHandles;                     // 0x0008(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedWeaponModGameplayEffectData) == 0x000008, "Wrong alignment on FCachedWeaponModGameplayEffectData");
static_assert(sizeof(FCachedWeaponModGameplayEffectData) == 0x000018, "Wrong size on FCachedWeaponModGameplayEffectData");
static_assert(offsetof(FCachedWeaponModGameplayEffectData, m_CachedWeaponModName) == 0x000000, "Member 'FCachedWeaponModGameplayEffectData::m_CachedWeaponModName' has a wrong offset!");
static_assert(offsetof(FCachedWeaponModGameplayEffectData, m_ActiveGameplayEffectHandles) == 0x000008, "Member 'FCachedWeaponModGameplayEffectData::m_ActiveGameplayEffectHandles' has a wrong offset!");

// ScriptStruct DuneSandbox.StaticLocationComponent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FStaticLocationComponent final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaticLocationComponent) == 0x000008, "Wrong alignment on FStaticLocationComponent");
static_assert(sizeof(FStaticLocationComponent) == 0x000028, "Wrong size on FStaticLocationComponent");
static_assert(offsetof(FStaticLocationComponent, Key) == 0x000000, "Member 'FStaticLocationComponent::Key' has a wrong offset!");

// ScriptStruct DuneSandbox.PermissionPlayerSyncData
// 0x0100 (0x0100 - 0x0000)
struct FPermissionPlayerSyncData final
{
public:
	TSet<struct FUniqueID>                        OwnedActorsArray;                                  // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
	TSet<struct FUniqueID>                        CoOwnedActorsArray;                                // 0x0050(0x0050)(Transient, NativeAccessSpecifierPublic)
	TSet<int32>                                   RequestHandles;                                    // 0x00A0(0x0050)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPermissionPlayerSyncData) == 0x000008, "Wrong alignment on FPermissionPlayerSyncData");
static_assert(sizeof(FPermissionPlayerSyncData) == 0x000100, "Wrong size on FPermissionPlayerSyncData");
static_assert(offsetof(FPermissionPlayerSyncData, OwnedActorsArray) == 0x000000, "Member 'FPermissionPlayerSyncData::OwnedActorsArray' has a wrong offset!");
static_assert(offsetof(FPermissionPlayerSyncData, CoOwnedActorsArray) == 0x000050, "Member 'FPermissionPlayerSyncData::CoOwnedActorsArray' has a wrong offset!");
static_assert(offsetof(FPermissionPlayerSyncData, RequestHandles) == 0x0000A0, "Member 'FPermissionPlayerSyncData::RequestHandles' has a wrong offset!");

// ScriptStruct DuneSandbox.MarkerPayloadBase
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMarkerPayloadBase
{
public:
	uint8                                         Pad_0[0x9];                                        // 0x0000(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	EMarkerDiscoveryLevel                         m_DiscoveryLevel;                                  // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMarkerDiscoveryMethod                        m_DiscoveryMethod;                                 // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_AreaRadius;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_bIsLongRange;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x1];                                       // 0x0011(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapAreaId                             m_AreaId;                                          // 0x0012(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarkerPayloadBase) == 0x000008, "Wrong alignment on FMarkerPayloadBase");
static_assert(sizeof(FMarkerPayloadBase) == 0x000018, "Wrong size on FMarkerPayloadBase");
static_assert(offsetof(FMarkerPayloadBase, m_DiscoveryLevel) == 0x000009, "Member 'FMarkerPayloadBase::m_DiscoveryLevel' has a wrong offset!");
static_assert(offsetof(FMarkerPayloadBase, m_DiscoveryMethod) == 0x00000A, "Member 'FMarkerPayloadBase::m_DiscoveryMethod' has a wrong offset!");
static_assert(offsetof(FMarkerPayloadBase, m_AreaRadius) == 0x00000C, "Member 'FMarkerPayloadBase::m_AreaRadius' has a wrong offset!");
static_assert(offsetof(FMarkerPayloadBase, m_bIsLongRange) == 0x000010, "Member 'FMarkerPayloadBase::m_bIsLongRange' has a wrong offset!");
static_assert(offsetof(FMarkerPayloadBase, m_AreaId) == 0x000012, "Member 'FMarkerPayloadBase::m_AreaId' has a wrong offset!");

// ScriptStruct DuneSandbox.MarkerPayloadContract
// 0x0010 (0x0028 - 0x0018)
struct FMarkerPayloadContract final : public FMarkerPayloadBase
{
public:
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarkerPayloadContract) == 0x000008, "Wrong alignment on FMarkerPayloadContract");
static_assert(sizeof(FMarkerPayloadContract) == 0x000028, "Wrong size on FMarkerPayloadContract");

// ScriptStruct DuneSandbox.DuneExchangeOrder
// 0x0080 (0x0080 - 0x0000)
struct FDuneExchangeOrder final
{
public:
	struct FDuneExchangeOrderId                   OrderId;                                           // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        OrderRevision;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              ExpirationTime;                                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              AccessPointId;                                     // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              OwnerId;                                           // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       TemplateId;                                        // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 CategoryIndices;                                   // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ItemPrice;                                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurabilityCur;                                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurabilityMax;                                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DynamicStatsJson;                                  // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwnedByPlayer;                                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEOrderCompletionType                        CompletionType;                                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              ItemId;                                            // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialStackSize;                                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneExchangeOrder) == 0x000008, "Wrong alignment on FDuneExchangeOrder");
static_assert(sizeof(FDuneExchangeOrder) == 0x000080, "Wrong size on FDuneExchangeOrder");
static_assert(offsetof(FDuneExchangeOrder, OrderId) == 0x000000, "Member 'FDuneExchangeOrder::OrderId' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, OrderRevision) == 0x000008, "Member 'FDuneExchangeOrder::OrderRevision' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, ExpirationTime) == 0x000010, "Member 'FDuneExchangeOrder::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, AccessPointId) == 0x000018, "Member 'FDuneExchangeOrder::AccessPointId' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, OwnerId) == 0x000020, "Member 'FDuneExchangeOrder::OwnerId' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, TemplateId) == 0x000028, "Member 'FDuneExchangeOrder::TemplateId' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, CategoryIndices) == 0x000030, "Member 'FDuneExchangeOrder::CategoryIndices' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, Count) == 0x000040, "Member 'FDuneExchangeOrder::Count' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, ItemPrice) == 0x000048, "Member 'FDuneExchangeOrder::ItemPrice' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, DurabilityCur) == 0x000050, "Member 'FDuneExchangeOrder::DurabilityCur' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, DurabilityMax) == 0x000054, "Member 'FDuneExchangeOrder::DurabilityMax' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, DynamicStatsJson) == 0x000058, "Member 'FDuneExchangeOrder::DynamicStatsJson' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, bOwnedByPlayer) == 0x000068, "Member 'FDuneExchangeOrder::bOwnedByPlayer' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, CompletionType) == 0x000069, "Member 'FDuneExchangeOrder::CompletionType' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, ItemId) == 0x000070, "Member 'FDuneExchangeOrder::ItemId' has a wrong offset!");
static_assert(offsetof(FDuneExchangeOrder, InitialStackSize) == 0x000078, "Member 'FDuneExchangeOrder::InitialStackSize' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableUiSubcategory
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableUiSubcategory final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableUiSubcategory) == 0x000004, "Wrong alignment on FEBuildableUiSubcategory");
static_assert(sizeof(FEBuildableUiSubcategory) == 0x000008, "Wrong size on FEBuildableUiSubcategory");

// ScriptStruct DuneSandbox.WorldGeneratorRuleRowBase
// 0x0060 (0x0070 - 0x0010)
struct FWorldGeneratorRuleRowBase final : public FTableRowBase
{
public:
	struct FDataTableRowHandle                    Layer;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    Object;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    DistributionArea;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MinCount;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistanceToWorldEdge;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistanceToServerEdge;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistanceToAreaEdge;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnePerRange;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniquePerRange;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDistributionRuleObservedLayer                ObservedLayer;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanDistributeOverTerrainBlocks;                   // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDistributionAreaColorUsed;                      // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 Color;                                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldGeneratorRuleRowBase) == 0x000008, "Wrong alignment on FWorldGeneratorRuleRowBase");
static_assert(sizeof(FWorldGeneratorRuleRowBase) == 0x000070, "Wrong size on FWorldGeneratorRuleRowBase");
static_assert(offsetof(FWorldGeneratorRuleRowBase, Layer) == 0x000010, "Member 'FWorldGeneratorRuleRowBase::Layer' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, Object) == 0x000020, "Member 'FWorldGeneratorRuleRowBase::Object' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, DistributionArea) == 0x000030, "Member 'FWorldGeneratorRuleRowBase::DistributionArea' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, MinCount) == 0x000040, "Member 'FWorldGeneratorRuleRowBase::MinCount' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, MaxCount) == 0x000044, "Member 'FWorldGeneratorRuleRowBase::MaxCount' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, Priority) == 0x000048, "Member 'FWorldGeneratorRuleRowBase::Priority' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, DistanceToWorldEdge) == 0x00004C, "Member 'FWorldGeneratorRuleRowBase::DistanceToWorldEdge' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, DistanceToServerEdge) == 0x000050, "Member 'FWorldGeneratorRuleRowBase::DistanceToServerEdge' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, DistanceToAreaEdge) == 0x000054, "Member 'FWorldGeneratorRuleRowBase::DistanceToAreaEdge' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, OnePerRange) == 0x000058, "Member 'FWorldGeneratorRuleRowBase::OnePerRange' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, UniquePerRange) == 0x00005C, "Member 'FWorldGeneratorRuleRowBase::UniquePerRange' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, ObservedLayer) == 0x000060, "Member 'FWorldGeneratorRuleRowBase::ObservedLayer' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, bCanDistributeOverTerrainBlocks) == 0x000061, "Member 'FWorldGeneratorRuleRowBase::bCanDistributeOverTerrainBlocks' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, bIsDistributionAreaColorUsed) == 0x000062, "Member 'FWorldGeneratorRuleRowBase::bIsDistributionAreaColorUsed' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, Color) == 0x000064, "Member 'FWorldGeneratorRuleRowBase::Color' has a wrong offset!");
static_assert(offsetof(FWorldGeneratorRuleRowBase, bIsEnabled) == 0x000068, "Member 'FWorldGeneratorRuleRowBase::bIsEnabled' has a wrong offset!");

// ScriptStruct DuneSandbox.NumPlayersInAreaEvent
// 0x0060 (0x0060 - 0x0000)
struct FNumPlayersInAreaEvent final
{
public:
	struct FSpiceFieldMetricsHeader               hd;                                                // 0x0000(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FNumPlayersInAreaEvent) == 0x000008, "Wrong alignment on FNumPlayersInAreaEvent");
static_assert(sizeof(FNumPlayersInAreaEvent) == 0x000060, "Wrong size on FNumPlayersInAreaEvent");
static_assert(offsetof(FNumPlayersInAreaEvent, hd) == 0x000000, "Member 'FNumPlayersInAreaEvent::hd' has a wrong offset!");

// ScriptStruct DuneSandbox.HeaderSortingOrder
// 0x0030 (0x0030 - 0x0000)
struct FHeaderSortingOrder final
{
public:
	int32                                         m_HeaderConfigurationIndex;                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeaderSortOrderType                          m_SortMode;                                        // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_HeaderTitle;                                     // 0x0008(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FName                                   m_PropertyName;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeaderSortingOrder) == 0x000008, "Wrong alignment on FHeaderSortingOrder");
static_assert(sizeof(FHeaderSortingOrder) == 0x000030, "Wrong size on FHeaderSortingOrder");
static_assert(offsetof(FHeaderSortingOrder, m_HeaderConfigurationIndex) == 0x000000, "Member 'FHeaderSortingOrder::m_HeaderConfigurationIndex' has a wrong offset!");
static_assert(offsetof(FHeaderSortingOrder, m_SortMode) == 0x000004, "Member 'FHeaderSortingOrder::m_SortMode' has a wrong offset!");
static_assert(offsetof(FHeaderSortingOrder, m_HeaderTitle) == 0x000008, "Member 'FHeaderSortingOrder::m_HeaderTitle' has a wrong offset!");
static_assert(offsetof(FHeaderSortingOrder, m_PropertyName) == 0x000020, "Member 'FHeaderSortingOrder::m_PropertyName' has a wrong offset!");

// ScriptStruct DuneSandbox.ShieldItemStats
// 0x0010 (0x0010 - 0x0000)
struct FShieldItemStats final
{
public:
	class UShieldDataAsset*                       ShieldRef;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShieldMaxStaminaDebuffScalar;                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShieldMaxPowerDebuffScalar;                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShieldItemStats) == 0x000008, "Wrong alignment on FShieldItemStats");
static_assert(sizeof(FShieldItemStats) == 0x000010, "Wrong size on FShieldItemStats");
static_assert(offsetof(FShieldItemStats, ShieldRef) == 0x000000, "Member 'FShieldItemStats::ShieldRef' has a wrong offset!");
static_assert(offsetof(FShieldItemStats, ShieldMaxStaminaDebuffScalar) == 0x000008, "Member 'FShieldItemStats::ShieldMaxStaminaDebuffScalar' has a wrong offset!");
static_assert(offsetof(FShieldItemStats, ShieldMaxPowerDebuffScalar) == 0x00000C, "Member 'FShieldItemStats::ShieldMaxPowerDebuffScalar' has a wrong offset!");

// ScriptStruct DuneSandbox.GmeUserIdWrapper
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGmeUserIdWrapper final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGmeUserIdWrapper) == 0x000008, "Wrong alignment on FGmeUserIdWrapper");
static_assert(sizeof(FGmeUserIdWrapper) == 0x000008, "Wrong size on FGmeUserIdWrapper");

// ScriptStruct DuneSandbox.BuildableUnlockableSetsDataRow
// 0x0058 (0x0068 - 0x0010)
struct FBuildableUnlockableSetsDataRow final : public FTableRowBase
{
public:
	TSet<struct FEBuildableType>                  m_Buildables;                                      // 0x0010(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bRequiresLearning;                               // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bGroupInTechTree;                                // 0x0061(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildableUnlockableSetsDataRow) == 0x000008, "Wrong alignment on FBuildableUnlockableSetsDataRow");
static_assert(sizeof(FBuildableUnlockableSetsDataRow) == 0x000068, "Wrong size on FBuildableUnlockableSetsDataRow");
static_assert(offsetof(FBuildableUnlockableSetsDataRow, m_Buildables) == 0x000010, "Member 'FBuildableUnlockableSetsDataRow::m_Buildables' has a wrong offset!");
static_assert(offsetof(FBuildableUnlockableSetsDataRow, m_bRequiresLearning) == 0x000060, "Member 'FBuildableUnlockableSetsDataRow::m_bRequiresLearning' has a wrong offset!");
static_assert(offsetof(FBuildableUnlockableSetsDataRow, m_bGroupInTechTree) == 0x000061, "Member 'FBuildableUnlockableSetsDataRow::m_bGroupInTechTree' has a wrong offset!");

// ScriptStruct DuneSandbox.CurrentlyCraftedItemData
// 0x0014 (0x0014 - 0x0000)
struct FCurrentlyCraftedItemData final
{
public:
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CraftingTime;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CraftingTimePassed;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_Version;                                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrentlyCraftedItemData) == 0x000004, "Wrong alignment on FCurrentlyCraftedItemData");
static_assert(sizeof(FCurrentlyCraftedItemData) == 0x000014, "Wrong size on FCurrentlyCraftedItemData");
static_assert(offsetof(FCurrentlyCraftedItemData, m_ItemTemplateId) == 0x000000, "Member 'FCurrentlyCraftedItemData::m_ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FCurrentlyCraftedItemData, m_CraftingTime) == 0x000008, "Member 'FCurrentlyCraftedItemData::m_CraftingTime' has a wrong offset!");
static_assert(offsetof(FCurrentlyCraftedItemData, m_CraftingTimePassed) == 0x00000C, "Member 'FCurrentlyCraftedItemData::m_CraftingTimePassed' has a wrong offset!");
static_assert(offsetof(FCurrentlyCraftedItemData, m_Version) == 0x000010, "Member 'FCurrentlyCraftedItemData::m_Version' has a wrong offset!");

// ScriptStruct DuneSandbox.BinocularsObservationEvent
// 0x0008 (0x0038 - 0x0030)
struct FBinocularsObservationEvent final : public FGameEvent
{
public:
	struct FEMapMarker                            m_ObservedMapMarkerType;                           // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBinocularsObservationEvent) == 0x000008, "Wrong alignment on FBinocularsObservationEvent");
static_assert(sizeof(FBinocularsObservationEvent) == 0x000038, "Wrong size on FBinocularsObservationEvent");
static_assert(offsetof(FBinocularsObservationEvent, m_ObservedMapMarkerType) == 0x000030, "Member 'FBinocularsObservationEvent::m_ObservedMapMarkerType' has a wrong offset!");

// ScriptStruct DuneSandbox.ECraftingRecipeProductionType
// 0x0000 (0x0008 - 0x0008)
struct FECraftingRecipeProductionType final : public FStringEnumValue
{
};
static_assert(alignof(FECraftingRecipeProductionType) == 0x000004, "Wrong alignment on FECraftingRecipeProductionType");
static_assert(sizeof(FECraftingRecipeProductionType) == 0x000008, "Wrong size on FECraftingRecipeProductionType");

// ScriptStruct DuneSandbox.VoiceChatUniquePlayerId
// 0x0004 (0x0004 - 0x0000)
struct FVoiceChatUniquePlayerId final
{
public:
	uint32                                        ID;                                                // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoiceChatUniquePlayerId) == 0x000004, "Wrong alignment on FVoiceChatUniquePlayerId");
static_assert(sizeof(FVoiceChatUniquePlayerId) == 0x000004, "Wrong size on FVoiceChatUniquePlayerId");
static_assert(offsetof(FVoiceChatUniquePlayerId, ID) == 0x000000, "Member 'FVoiceChatUniquePlayerId::ID' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableStructureLimitData
// 0x0008 (0x0008 - 0x0000)
struct FBuildableStructureLimitData final
{
public:
	int32                                         m_TargetNumberOfLandclaims;                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaximumNumberOfBuildables;                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableStructureLimitData) == 0x000004, "Wrong alignment on FBuildableStructureLimitData");
static_assert(sizeof(FBuildableStructureLimitData) == 0x000008, "Wrong size on FBuildableStructureLimitData");
static_assert(offsetof(FBuildableStructureLimitData, m_TargetNumberOfLandclaims) == 0x000000, "Member 'FBuildableStructureLimitData::m_TargetNumberOfLandclaims' has a wrong offset!");
static_assert(offsetof(FBuildableStructureLimitData, m_MaximumNumberOfBuildables) == 0x000004, "Member 'FBuildableStructureLimitData::m_MaximumNumberOfBuildables' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillDistributionSettingsRowBase
// 0x0030 (0x0040 - 0x0010)
struct FSkillDistributionSettingsRowBase final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint32                                        RespawnTimeInSec;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillTree                                    SkillTree;                                         // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x1];                                       // 0x0035(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        MinimumPoints;                                     // 0x0036(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MaximumPoints;                                     // 0x0038(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillDistributionSettingsRowBase) == 0x000008, "Wrong alignment on FSkillDistributionSettingsRowBase");
static_assert(sizeof(FSkillDistributionSettingsRowBase) == 0x000040, "Wrong size on FSkillDistributionSettingsRowBase");
static_assert(offsetof(FSkillDistributionSettingsRowBase, RequiredTags) == 0x000010, "Member 'FSkillDistributionSettingsRowBase::RequiredTags' has a wrong offset!");
static_assert(offsetof(FSkillDistributionSettingsRowBase, RespawnTimeInSec) == 0x000030, "Member 'FSkillDistributionSettingsRowBase::RespawnTimeInSec' has a wrong offset!");
static_assert(offsetof(FSkillDistributionSettingsRowBase, SkillTree) == 0x000034, "Member 'FSkillDistributionSettingsRowBase::SkillTree' has a wrong offset!");
static_assert(offsetof(FSkillDistributionSettingsRowBase, MinimumPoints) == 0x000036, "Member 'FSkillDistributionSettingsRowBase::MinimumPoints' has a wrong offset!");
static_assert(offsetof(FSkillDistributionSettingsRowBase, MaximumPoints) == 0x000038, "Member 'FSkillDistributionSettingsRowBase::MaximumPoints' has a wrong offset!");
static_assert(offsetof(FSkillDistributionSettingsRowBase, bIsEnabled) == 0x00003A, "Member 'FSkillDistributionSettingsRowBase::bIsEnabled' has a wrong offset!");

// ScriptStruct DuneSandbox.ListenActionArray
// 0x0010 (0x0010 - 0x0000)
struct FListenActionArray final
{
public:
	TArray<class UPlayerAction*>                  ActionArray;                                       // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FListenActionArray) == 0x000008, "Wrong alignment on FListenActionArray");
static_assert(sizeof(FListenActionArray) == 0x000010, "Wrong size on FListenActionArray");
static_assert(offsetof(FListenActionArray, ActionArray) == 0x000000, "Member 'FListenActionArray::ActionArray' has a wrong offset!");

// ScriptStruct DuneSandbox.ListenPlayerActionContainer
// 0x0050 (0x0050 - 0x0000)
struct FListenPlayerActionContainer final
{
public:
	TMap<class UClass*, struct FListenActionArray> m_ListenActions;                                  // 0x0000(0x0050)(Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FListenPlayerActionContainer) == 0x000008, "Wrong alignment on FListenPlayerActionContainer");
static_assert(sizeof(FListenPlayerActionContainer) == 0x000050, "Wrong size on FListenPlayerActionContainer");
static_assert(offsetof(FListenPlayerActionContainer, m_ListenActions) == 0x000000, "Member 'FListenPlayerActionContainer::m_ListenActions' has a wrong offset!");

// ScriptStruct DuneSandbox.ENPCMutablePartName
// 0x0000 (0x0008 - 0x0008)
struct FENPCMutablePartName final : public FStringEnumValue
{
};
static_assert(alignof(FENPCMutablePartName) == 0x000004, "Wrong alignment on FENPCMutablePartName");
static_assert(sizeof(FENPCMutablePartName) == 0x000008, "Wrong size on FENPCMutablePartName");

// ScriptStruct DuneSandbox.NPCSelectedMutableParameter
// 0x0010 (0x0010 - 0x0000)
struct FNPCSelectedMutableParameter final
{
public:
	struct FENPCMutablePartName                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwatchId;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCSelectedMutableParameter) == 0x000004, "Wrong alignment on FNPCSelectedMutableParameter");
static_assert(sizeof(FNPCSelectedMutableParameter) == 0x000010, "Wrong size on FNPCSelectedMutableParameter");
static_assert(offsetof(FNPCSelectedMutableParameter, Name) == 0x000000, "Member 'FNPCSelectedMutableParameter::Name' has a wrong offset!");
static_assert(offsetof(FNPCSelectedMutableParameter, SwatchId) == 0x000008, "Member 'FNPCSelectedMutableParameter::SwatchId' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneMovementDirectionScale
// 0x0014 (0x0014 - 0x0000)
struct FDuneMovementDirectionScale final
{
public:
	float                                         m_ForwardScale;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ForwardAngleOffset;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SideScale;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BackwardsScale;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BackwardsAngleOffset;                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneMovementDirectionScale) == 0x000004, "Wrong alignment on FDuneMovementDirectionScale");
static_assert(sizeof(FDuneMovementDirectionScale) == 0x000014, "Wrong size on FDuneMovementDirectionScale");
static_assert(offsetof(FDuneMovementDirectionScale, m_ForwardScale) == 0x000000, "Member 'FDuneMovementDirectionScale::m_ForwardScale' has a wrong offset!");
static_assert(offsetof(FDuneMovementDirectionScale, m_ForwardAngleOffset) == 0x000004, "Member 'FDuneMovementDirectionScale::m_ForwardAngleOffset' has a wrong offset!");
static_assert(offsetof(FDuneMovementDirectionScale, m_SideScale) == 0x000008, "Member 'FDuneMovementDirectionScale::m_SideScale' has a wrong offset!");
static_assert(offsetof(FDuneMovementDirectionScale, m_BackwardsScale) == 0x00000C, "Member 'FDuneMovementDirectionScale::m_BackwardsScale' has a wrong offset!");
static_assert(offsetof(FDuneMovementDirectionScale, m_BackwardsAngleOffset) == 0x000010, "Member 'FDuneMovementDirectionScale::m_BackwardsAngleOffset' has a wrong offset!");

// ScriptStruct DuneSandbox.CreditsTableRow
// 0x0060 (0x0070 - 0x0010)
struct FCreditsTableRow final : public FTableRowBase
{
public:
	class FString                                 MajorHeader;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SubHeader;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Categories;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0048(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreditsTableRow) == 0x000008, "Wrong alignment on FCreditsTableRow");
static_assert(sizeof(FCreditsTableRow) == 0x000070, "Wrong size on FCreditsTableRow");
static_assert(offsetof(FCreditsTableRow, MajorHeader) == 0x000010, "Member 'FCreditsTableRow::MajorHeader' has a wrong offset!");
static_assert(offsetof(FCreditsTableRow, SubHeader) == 0x000020, "Member 'FCreditsTableRow::SubHeader' has a wrong offset!");
static_assert(offsetof(FCreditsTableRow, Categories) == 0x000038, "Member 'FCreditsTableRow::Categories' has a wrong offset!");
static_assert(offsetof(FCreditsTableRow, Title) == 0x000048, "Member 'FCreditsTableRow::Title' has a wrong offset!");
static_assert(offsetof(FCreditsTableRow, Name) == 0x000060, "Member 'FCreditsTableRow::Name' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractDeliverySet
// 0x0010 (0x0138 - 0x0128)
struct FContractDeliverySet final : public FFastArraySerializer
{
public:
	TArray<struct FContractConditionStateFastArrayItem> Items;                                       // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FContractDeliverySet) == 0x000008, "Wrong alignment on FContractDeliverySet");
static_assert(sizeof(FContractDeliverySet) == 0x000138, "Wrong size on FContractDeliverySet");
static_assert(offsetof(FContractDeliverySet, Items) == 0x000128, "Member 'FContractDeliverySet::Items' has a wrong offset!");

// ScriptStruct DuneSandbox.LoadingScreenTip
// 0x0078 (0x0078 - 0x0000)
struct FLoadingScreenTip final
{
public:
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Quote;                                             // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0048(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadingScreenTip) == 0x000008, "Wrong alignment on FLoadingScreenTip");
static_assert(sizeof(FLoadingScreenTip) == 0x000078, "Wrong size on FLoadingScreenTip");
static_assert(offsetof(FLoadingScreenTip, Image) == 0x000000, "Member 'FLoadingScreenTip::Image' has a wrong offset!");
static_assert(offsetof(FLoadingScreenTip, Quote) == 0x000030, "Member 'FLoadingScreenTip::Quote' has a wrong offset!");
static_assert(offsetof(FLoadingScreenTip, Title) == 0x000048, "Member 'FLoadingScreenTip::Title' has a wrong offset!");
static_assert(offsetof(FLoadingScreenTip, Body) == 0x000060, "Member 'FLoadingScreenTip::Body' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceableStormDataComponent
// 0x0008 (0x0008 - 0x0000)
struct FPlaceableStormDataComponent final
{
public:
	int32                                         m_CurrentStormLevel;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_CurrentStormIntensity;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableStormDataComponent) == 0x000004, "Wrong alignment on FPlaceableStormDataComponent");
static_assert(sizeof(FPlaceableStormDataComponent) == 0x000008, "Wrong size on FPlaceableStormDataComponent");
static_assert(offsetof(FPlaceableStormDataComponent, m_CurrentStormLevel) == 0x000000, "Member 'FPlaceableStormDataComponent::m_CurrentStormLevel' has a wrong offset!");
static_assert(offsetof(FPlaceableStormDataComponent, m_CurrentStormIntensity) == 0x000004, "Member 'FPlaceableStormDataComponent::m_CurrentStormIntensity' has a wrong offset!");

// ScriptStruct DuneSandbox.TaxInvoiceData
// 0x0030 (0x0030 - 0x0000)
struct FTaxInvoiceData final
{
public:
	struct FUniqueID                              m_Id;                                              // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              m_TotemActorId;                                    // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         m_ReferenceUniverseTime;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETaxInvoiceStatus                             m_InvoiceStatus;                                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_Amount;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ActorName;                                       // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaxInvoiceData) == 0x000008, "Wrong alignment on FTaxInvoiceData");
static_assert(sizeof(FTaxInvoiceData) == 0x000030, "Wrong size on FTaxInvoiceData");
static_assert(offsetof(FTaxInvoiceData, m_Id) == 0x000000, "Member 'FTaxInvoiceData::m_Id' has a wrong offset!");
static_assert(offsetof(FTaxInvoiceData, m_TotemActorId) == 0x000008, "Member 'FTaxInvoiceData::m_TotemActorId' has a wrong offset!");
static_assert(offsetof(FTaxInvoiceData, m_ReferenceUniverseTime) == 0x000010, "Member 'FTaxInvoiceData::m_ReferenceUniverseTime' has a wrong offset!");
static_assert(offsetof(FTaxInvoiceData, m_InvoiceStatus) == 0x000018, "Member 'FTaxInvoiceData::m_InvoiceStatus' has a wrong offset!");
static_assert(offsetof(FTaxInvoiceData, m_Amount) == 0x00001C, "Member 'FTaxInvoiceData::m_Amount' has a wrong offset!");
static_assert(offsetof(FTaxInvoiceData, m_ActorName) == 0x000020, "Member 'FTaxInvoiceData::m_ActorName' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadDialogData
// 0x0070 (0x0070 - 0x0000)
struct FLandsraadDialogData final
{
public:
	class FName                                   m_PlayerGuildName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_AlignmentFactionName;                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_WinningFactionName;                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_NewDecreeInternalName;                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_NewDecreeName;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_CurrentDecreeName;                               // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_CurrentDecreeDescription;                        // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         m_VotingPower;                                     // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandsraadDialogData) == 0x000008, "Wrong alignment on FLandsraadDialogData");
static_assert(sizeof(FLandsraadDialogData) == 0x000070, "Wrong size on FLandsraadDialogData");
static_assert(offsetof(FLandsraadDialogData, m_PlayerGuildName) == 0x000000, "Member 'FLandsraadDialogData::m_PlayerGuildName' has a wrong offset!");
static_assert(offsetof(FLandsraadDialogData, m_AlignmentFactionName) == 0x000008, "Member 'FLandsraadDialogData::m_AlignmentFactionName' has a wrong offset!");
static_assert(offsetof(FLandsraadDialogData, m_WinningFactionName) == 0x000010, "Member 'FLandsraadDialogData::m_WinningFactionName' has a wrong offset!");
static_assert(offsetof(FLandsraadDialogData, m_NewDecreeInternalName) == 0x000018, "Member 'FLandsraadDialogData::m_NewDecreeInternalName' has a wrong offset!");
static_assert(offsetof(FLandsraadDialogData, m_NewDecreeName) == 0x000020, "Member 'FLandsraadDialogData::m_NewDecreeName' has a wrong offset!");
static_assert(offsetof(FLandsraadDialogData, m_CurrentDecreeName) == 0x000038, "Member 'FLandsraadDialogData::m_CurrentDecreeName' has a wrong offset!");
static_assert(offsetof(FLandsraadDialogData, m_CurrentDecreeDescription) == 0x000050, "Member 'FLandsraadDialogData::m_CurrentDecreeDescription' has a wrong offset!");
static_assert(offsetof(FLandsraadDialogData, m_VotingPower) == 0x000068, "Member 'FLandsraadDialogData::m_VotingPower' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneyNodeState
// 0x0040 (0x0040 - 0x0000)
struct FJourneyNodeState final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         RevealRegistrationId;                              // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CompletionRegistrationId;                          // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevealConditionStateProgress;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompletionConditionStateProgress;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJourneyNodeReplicationReason                 ReplicationReason;                                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCompleted;                                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRevealed;                                       // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRewardBlock;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJourneyNodeState) == 0x000008, "Wrong alignment on FJourneyNodeState");
static_assert(sizeof(FJourneyNodeState) == 0x000040, "Wrong size on FJourneyNodeState");
static_assert(offsetof(FJourneyNodeState, RevealRegistrationId) == 0x000020, "Member 'FJourneyNodeState::RevealRegistrationId' has a wrong offset!");
static_assert(offsetof(FJourneyNodeState, CompletionRegistrationId) == 0x000028, "Member 'FJourneyNodeState::CompletionRegistrationId' has a wrong offset!");
static_assert(offsetof(FJourneyNodeState, RevealConditionStateProgress) == 0x000030, "Member 'FJourneyNodeState::RevealConditionStateProgress' has a wrong offset!");
static_assert(offsetof(FJourneyNodeState, CompletionConditionStateProgress) == 0x000034, "Member 'FJourneyNodeState::CompletionConditionStateProgress' has a wrong offset!");
static_assert(offsetof(FJourneyNodeState, ReplicationReason) == 0x000038, "Member 'FJourneyNodeState::ReplicationReason' has a wrong offset!");
static_assert(offsetof(FJourneyNodeState, bIsCompleted) == 0x000039, "Member 'FJourneyNodeState::bIsCompleted' has a wrong offset!");
static_assert(offsetof(FJourneyNodeState, bIsRevealed) == 0x00003A, "Member 'FJourneyNodeState::bIsRevealed' has a wrong offset!");
static_assert(offsetof(FJourneyNodeState, bOverrideRewardBlock) == 0x00003B, "Member 'FJourneyNodeState::bOverrideRewardBlock' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemDeteriorationGameThreadUpdateComponent
// 0x0004 (0x0004 - 0x0000)
struct FItemDeteriorationGameThreadUpdateComponent final
{
public:
	float                                         m_NewDurabilityPercentage;                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDeteriorationGameThreadUpdateComponent) == 0x000004, "Wrong alignment on FItemDeteriorationGameThreadUpdateComponent");
static_assert(sizeof(FItemDeteriorationGameThreadUpdateComponent) == 0x000004, "Wrong size on FItemDeteriorationGameThreadUpdateComponent");
static_assert(offsetof(FItemDeteriorationGameThreadUpdateComponent, m_NewDurabilityPercentage) == 0x000000, "Member 'FItemDeteriorationGameThreadUpdateComponent::m_NewDurabilityPercentage' has a wrong offset!");

// ScriptStruct DuneSandbox.DashStats
// 0x0010 (0x0010 - 0x0000)
struct FDashStats final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockedMovementTimeInSeconds;                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RetainedSpeedFactor;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDashStats) == 0x000004, "Wrong alignment on FDashStats");
static_assert(sizeof(FDashStats) == 0x000010, "Wrong size on FDashStats");
static_assert(offsetof(FDashStats, MaxSpeed) == 0x000000, "Member 'FDashStats::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FDashStats, BrakingDeceleration) == 0x000004, "Member 'FDashStats::BrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FDashStats, LockedMovementTimeInSeconds) == 0x000008, "Member 'FDashStats::LockedMovementTimeInSeconds' has a wrong offset!");
static_assert(offsetof(FDashStats, RetainedSpeedFactor) == 0x00000C, "Member 'FDashStats::RetainedSpeedFactor' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneyNodeStateData
// 0x0018 (0x0018 - 0x0000)
struct FJourneyNodeStateData final
{
public:
	TArray<struct FJourneyNodeState>              States;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bJourneyNodesInitialized;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJourneyNodeStateData) == 0x000008, "Wrong alignment on FJourneyNodeStateData");
static_assert(sizeof(FJourneyNodeStateData) == 0x000018, "Wrong size on FJourneyNodeStateData");
static_assert(offsetof(FJourneyNodeStateData, States) == 0x000000, "Member 'FJourneyNodeStateData::States' has a wrong offset!");
static_assert(offsetof(FJourneyNodeStateData, bJourneyNodesInitialized) == 0x000010, "Member 'FJourneyNodeStateData::bJourneyNodesInitialized' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneyStoryNodeNames
// 0x0020 (0x0020 - 0x0000)
struct FJourneyStoryNodeNames final
{
public:
	class FString                                 FullPath;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJourneyStoryNodeNames) == 0x000008, "Wrong alignment on FJourneyStoryNodeNames");
static_assert(sizeof(FJourneyStoryNodeNames) == 0x000020, "Wrong size on FJourneyStoryNodeNames");
static_assert(offsetof(FJourneyStoryNodeNames, FullPath) == 0x000000, "Member 'FJourneyStoryNodeNames::FullPath' has a wrong offset!");
static_assert(offsetof(FJourneyStoryNodeNames, DisplayName) == 0x000010, "Member 'FJourneyStoryNodeNames::DisplayName' has a wrong offset!");

// ScriptStruct DuneSandbox.LootDistributionTierData
// 0x0058 (0x0058 - 0x0000)
struct FLootDistributionTierData final
{
public:
	class UBitMapData*                            m_SourceEncountersBitMap;                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBitMapData*                            m_SourceTierBitMap;                                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x48];                                      // 0x0010(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLootDistributionTierData) == 0x000008, "Wrong alignment on FLootDistributionTierData");
static_assert(sizeof(FLootDistributionTierData) == 0x000058, "Wrong size on FLootDistributionTierData");
static_assert(offsetof(FLootDistributionTierData, m_SourceEncountersBitMap) == 0x000000, "Member 'FLootDistributionTierData::m_SourceEncountersBitMap' has a wrong offset!");
static_assert(offsetof(FLootDistributionTierData, m_SourceTierBitMap) == 0x000008, "Member 'FLootDistributionTierData::m_SourceTierBitMap' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemTemplateLootDistributionLink
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FItemTemplateLootDistributionLink final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemTemplateLootDistributionLink) == 0x000004, "Wrong alignment on FItemTemplateLootDistributionLink");
static_assert(sizeof(FItemTemplateLootDistributionLink) == 0x000010, "Wrong size on FItemTemplateLootDistributionLink");

// ScriptStruct DuneSandbox.LootDistributionGridData
// 0x00A8 (0x00A8 - 0x0000)
struct FLootDistributionGridData final
{
public:
	TMap<struct FGameplayTag, struct FLootDistributionTierData> m_TierLootDistribution;              // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TMap<struct FEItemTemplateID, struct FItemTemplateLootDistributionLink> m_ItemTemplateLootDistributionLink; // 0x0050(0x0050)(Edit, EditConst, NativeAccessSpecifierPrivate)
	int32                                         m_SizeX;                                           // 0x00A0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         m_SizeY;                                           // 0x00A4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLootDistributionGridData) == 0x000008, "Wrong alignment on FLootDistributionGridData");
static_assert(sizeof(FLootDistributionGridData) == 0x0000A8, "Wrong size on FLootDistributionGridData");
static_assert(offsetof(FLootDistributionGridData, m_TierLootDistribution) == 0x000000, "Member 'FLootDistributionGridData::m_TierLootDistribution' has a wrong offset!");
static_assert(offsetof(FLootDistributionGridData, m_ItemTemplateLootDistributionLink) == 0x000050, "Member 'FLootDistributionGridData::m_ItemTemplateLootDistributionLink' has a wrong offset!");
static_assert(offsetof(FLootDistributionGridData, m_SizeX) == 0x0000A0, "Member 'FLootDistributionGridData::m_SizeX' has a wrong offset!");
static_assert(offsetof(FLootDistributionGridData, m_SizeY) == 0x0000A4, "Member 'FLootDistributionGridData::m_SizeY' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcAbilityInfo
// 0x0020 (0x0020 - 0x0000)
struct FNpcAbilityInfo final
{
public:
	struct FENpcCombatAbilityName                 m_AbilityName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LastUsedTime;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTargetFinderBase*               m_AbilityTargetFinder;                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcAbilityInfo) == 0x000008, "Wrong alignment on FNpcAbilityInfo");
static_assert(sizeof(FNpcAbilityInfo) == 0x000020, "Wrong size on FNpcAbilityInfo");
static_assert(offsetof(FNpcAbilityInfo, m_AbilityName) == 0x000000, "Member 'FNpcAbilityInfo::m_AbilityName' has a wrong offset!");
static_assert(offsetof(FNpcAbilityInfo, m_LastUsedTime) == 0x000010, "Member 'FNpcAbilityInfo::m_LastUsedTime' has a wrong offset!");
static_assert(offsetof(FNpcAbilityInfo, m_AbilityTargetFinder) == 0x000018, "Member 'FNpcAbilityInfo::m_AbilityTargetFinder' has a wrong offset!");

// ScriptStruct DuneSandbox.ESecurityZoneType
// 0x0000 (0x0008 - 0x0008)
struct FESecurityZoneType final : public FStringEnumValue
{
};
static_assert(alignof(FESecurityZoneType) == 0x000004, "Wrong alignment on FESecurityZoneType");
static_assert(sizeof(FESecurityZoneType) == 0x000008, "Wrong size on FESecurityZoneType");

// ScriptStruct DuneSandbox.ENPCGeneticsOutfitPartName
// 0x0000 (0x0008 - 0x0008)
struct FENPCGeneticsOutfitPartName final : public FStringEnumValue
{
};
static_assert(alignof(FENPCGeneticsOutfitPartName) == 0x000004, "Wrong alignment on FENPCGeneticsOutfitPartName");
static_assert(sizeof(FENPCGeneticsOutfitPartName) == 0x000008, "Wrong size on FENPCGeneticsOutfitPartName");

// ScriptStruct DuneSandbox.NPCGeneticsOutfitPartList
// 0x0010 (0x0020 - 0x0010)
struct FNPCGeneticsOutfitPartList final : public FTableRowBase
{
public:
	TArray<struct FENPCGeneticsOutfitPartName>    PartNames;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCGeneticsOutfitPartList) == 0x000008, "Wrong alignment on FNPCGeneticsOutfitPartList");
static_assert(sizeof(FNPCGeneticsOutfitPartList) == 0x000020, "Wrong size on FNPCGeneticsOutfitPartList");
static_assert(offsetof(FNPCGeneticsOutfitPartList, PartNames) == 0x000010, "Member 'FNPCGeneticsOutfitPartList::PartNames' has a wrong offset!");

// ScriptStruct DuneSandbox.NPCGeneticsOutfitRowBase
// 0x0040 (0x0050 - 0x0010)
struct FNPCGeneticsOutfitRowBase final : public FTableRowBase
{
public:
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNPCGeneticsOutfitPartList             FixedOutfits;                                      // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FNPCGeneticsOutfitPartList>     RandomOutfits;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCGeneticsOutfitRowBase) == 0x000008, "Wrong alignment on FNPCGeneticsOutfitRowBase");
static_assert(sizeof(FNPCGeneticsOutfitRowBase) == 0x000050, "Wrong size on FNPCGeneticsOutfitRowBase");
static_assert(offsetof(FNPCGeneticsOutfitRowBase, Description) == 0x000010, "Member 'FNPCGeneticsOutfitRowBase::Description' has a wrong offset!");
static_assert(offsetof(FNPCGeneticsOutfitRowBase, FixedOutfits) == 0x000020, "Member 'FNPCGeneticsOutfitRowBase::FixedOutfits' has a wrong offset!");
static_assert(offsetof(FNPCGeneticsOutfitRowBase, RandomOutfits) == 0x000040, "Member 'FNPCGeneticsOutfitRowBase::RandomOutfits' has a wrong offset!");

// ScriptStruct DuneSandbox.StoryEventFastArrayItem
// 0x0014 (0x0020 - 0x000C)
struct FStoryEventFastArrayItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADunePlayerCharacter*                   DunePlayerCharacter;                               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoryEventFastArrayItem) == 0x000008, "Wrong alignment on FStoryEventFastArrayItem");
static_assert(sizeof(FStoryEventFastArrayItem) == 0x000020, "Wrong size on FStoryEventFastArrayItem");
static_assert(offsetof(FStoryEventFastArrayItem, DunePlayerCharacter) == 0x000010, "Member 'FStoryEventFastArrayItem::DunePlayerCharacter' has a wrong offset!");
static_assert(offsetof(FStoryEventFastArrayItem, Index) == 0x000018, "Member 'FStoryEventFastArrayItem::Index' has a wrong offset!");

// ScriptStruct DuneSandbox.StoryEventFastArray
// 0x0018 (0x0140 - 0x0128)
struct FStoryEventFastArray final : public FFastArraySerializer
{
public:
	TArray<struct FStoryEventFastArrayItem>       Items;                                             // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UJourneyStoryEventComponent*            OwningEventComponent;                              // 0x0138(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FStoryEventFastArray) == 0x000008, "Wrong alignment on FStoryEventFastArray");
static_assert(sizeof(FStoryEventFastArray) == 0x000140, "Wrong size on FStoryEventFastArray");
static_assert(offsetof(FStoryEventFastArray, Items) == 0x000128, "Member 'FStoryEventFastArray::Items' has a wrong offset!");
static_assert(offsetof(FStoryEventFastArray, OwningEventComponent) == 0x000138, "Member 'FStoryEventFastArray::OwningEventComponent' has a wrong offset!");

// ScriptStruct DuneSandbox.AIWaveData
// 0x00A0 (0x00A0 - 0x0000)
struct FAIWaveData final
{
public:
	float                                         m_NextWaveTimeMinutes;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaveStartTimeDelay;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_RemainingNPCThreshold;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AAISpawnLocationProvider*>       m_SpawnLocations;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AAiSpawnLocation*>               m_CachedSpawnLocations;                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class AAISpawnLocationProvider*>       m_StaticSpawnLocations;                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AAIStaticSpawnLocation*>         m_CachedStaticSpawnLocations;                      // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      m_DesiredContentTags;                              // 0x0050(0x0048)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIWaveWarningAudio                           m_WarningAudio;                                    // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIWaveData) == 0x000008, "Wrong alignment on FAIWaveData");
static_assert(sizeof(FAIWaveData) == 0x0000A0, "Wrong size on FAIWaveData");
static_assert(offsetof(FAIWaveData, m_NextWaveTimeMinutes) == 0x000000, "Member 'FAIWaveData::m_NextWaveTimeMinutes' has a wrong offset!");
static_assert(offsetof(FAIWaveData, m_WaveStartTimeDelay) == 0x000004, "Member 'FAIWaveData::m_WaveStartTimeDelay' has a wrong offset!");
static_assert(offsetof(FAIWaveData, m_RemainingNPCThreshold) == 0x000008, "Member 'FAIWaveData::m_RemainingNPCThreshold' has a wrong offset!");
static_assert(offsetof(FAIWaveData, m_SpawnLocations) == 0x000010, "Member 'FAIWaveData::m_SpawnLocations' has a wrong offset!");
static_assert(offsetof(FAIWaveData, m_CachedSpawnLocations) == 0x000020, "Member 'FAIWaveData::m_CachedSpawnLocations' has a wrong offset!");
static_assert(offsetof(FAIWaveData, m_StaticSpawnLocations) == 0x000030, "Member 'FAIWaveData::m_StaticSpawnLocations' has a wrong offset!");
static_assert(offsetof(FAIWaveData, m_CachedStaticSpawnLocations) == 0x000040, "Member 'FAIWaveData::m_CachedStaticSpawnLocations' has a wrong offset!");
static_assert(offsetof(FAIWaveData, m_DesiredContentTags) == 0x000050, "Member 'FAIWaveData::m_DesiredContentTags' has a wrong offset!");
static_assert(offsetof(FAIWaveData, m_WarningAudio) == 0x000098, "Member 'FAIWaveData::m_WarningAudio' has a wrong offset!");

// ScriptStruct DuneSandbox.AbilityItemStats
// 0x0038 (0x0038 - 0x0000)
struct FAbilityItemStats final
{
public:
	TSoftClassPtr<class UClass>                   AbilityRef;                                        // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsButtonHold;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowedOnVehicles;                                // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityIndex                                 AbilityIndex;                                      // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityItemStats) == 0x000008, "Wrong alignment on FAbilityItemStats");
static_assert(sizeof(FAbilityItemStats) == 0x000038, "Wrong size on FAbilityItemStats");
static_assert(offsetof(FAbilityItemStats, AbilityRef) == 0x000000, "Member 'FAbilityItemStats::AbilityRef' has a wrong offset!");
static_assert(offsetof(FAbilityItemStats, bIsButtonHold) == 0x000030, "Member 'FAbilityItemStats::bIsButtonHold' has a wrong offset!");
static_assert(offsetof(FAbilityItemStats, bAllowedOnVehicles) == 0x000031, "Member 'FAbilityItemStats::bAllowedOnVehicles' has a wrong offset!");
static_assert(offsetof(FAbilityItemStats, AbilityIndex) == 0x000032, "Member 'FAbilityItemStats::AbilityIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.CreditsLogoConfiguration
// 0x0060 (0x0060 - 0x0000)
struct FCreditsLogoConfiguration final
{
public:
	class FString                                 m_Name;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_LogoIcon;                                        // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_LogoSize;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_LogoColor;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreditsLogoConfiguration) == 0x000008, "Wrong alignment on FCreditsLogoConfiguration");
static_assert(sizeof(FCreditsLogoConfiguration) == 0x000060, "Wrong size on FCreditsLogoConfiguration");
static_assert(offsetof(FCreditsLogoConfiguration, m_Name) == 0x000000, "Member 'FCreditsLogoConfiguration::m_Name' has a wrong offset!");
static_assert(offsetof(FCreditsLogoConfiguration, m_LogoIcon) == 0x000010, "Member 'FCreditsLogoConfiguration::m_LogoIcon' has a wrong offset!");
static_assert(offsetof(FCreditsLogoConfiguration, m_LogoSize) == 0x000040, "Member 'FCreditsLogoConfiguration::m_LogoSize' has a wrong offset!");
static_assert(offsetof(FCreditsLogoConfiguration, m_LogoColor) == 0x000050, "Member 'FCreditsLogoConfiguration::m_LogoColor' has a wrong offset!");

// ScriptStruct DuneSandbox.AbilityItemStatsComponent_BlueprintWrapper
// 0x00C8 (0x00C8 - 0x0000)
struct FAbilityItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityItemStats                      AbilityItemStats;                                  // 0x0090(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FAbilityItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FAbilityItemStatsComponent_BlueprintWrapper) == 0x0000C8, "Wrong size on FAbilityItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FAbilityItemStatsComponent_BlueprintWrapper, AbilityItemStats) == 0x000090, "Member 'FAbilityItemStatsComponent_BlueprintWrapper::AbilityItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.CustomizationFilterViewProxy
// 0x0030 (0x0030 - 0x0000)
struct FCustomizationFilterViewProxy final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UTabViewWidget*                         m_TabViewWidget;                                   // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationFilterViewProxy) == 0x000008, "Wrong alignment on FCustomizationFilterViewProxy");
static_assert(sizeof(FCustomizationFilterViewProxy) == 0x000030, "Wrong size on FCustomizationFilterViewProxy");
static_assert(offsetof(FCustomizationFilterViewProxy, m_TabViewWidget) == 0x000028, "Member 'FCustomizationFilterViewProxy::m_TabViewWidget' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodePoint
// 0x0040 (0x0040 - 0x0000)
struct FResourceNodePoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResourcePointType                            Type;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceNodePoint) == 0x000010, "Wrong alignment on FResourceNodePoint");
static_assert(sizeof(FResourceNodePoint) == 0x000040, "Wrong size on FResourceNodePoint");
static_assert(offsetof(FResourceNodePoint, Location) == 0x000000, "Member 'FResourceNodePoint::Location' has a wrong offset!");
static_assert(offsetof(FResourceNodePoint, Type) == 0x000018, "Member 'FResourceNodePoint::Type' has a wrong offset!");
static_assert(offsetof(FResourceNodePoint, Rotation) == 0x000020, "Member 'FResourceNodePoint::Rotation' has a wrong offset!");

// ScriptStruct DuneSandbox.ECustomizationItemId
// 0x0000 (0x0008 - 0x0008)
struct FECustomizationItemId final : public FStringEnumValue
{
};
static_assert(alignof(FECustomizationItemId) == 0x000004, "Wrong alignment on FECustomizationItemId");
static_assert(sizeof(FECustomizationItemId) == 0x000008, "Wrong size on FECustomizationItemId");

// ScriptStruct DuneSandbox.AbilityItemTableRow
// 0x0038 (0x0048 - 0x0010)
struct FAbilityItemTableRow final : public FTableRowBase
{
public:
	struct FAbilityItemStats                      AbilityStats;                                      // 0x0010(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityItemTableRow) == 0x000008, "Wrong alignment on FAbilityItemTableRow");
static_assert(sizeof(FAbilityItemTableRow) == 0x000048, "Wrong size on FAbilityItemTableRow");
static_assert(offsetof(FAbilityItemTableRow, AbilityStats) == 0x000010, "Member 'FAbilityItemTableRow::AbilityStats' has a wrong offset!");

// ScriptStruct DuneSandbox.CustomizationSubCategory
// 0x0030 (0x0030 - 0x0000)
struct FCustomizationSubCategory final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           ObjectTemplateIDs;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationSubCategory) == 0x000008, "Wrong alignment on FCustomizationSubCategory");
static_assert(sizeof(FCustomizationSubCategory) == 0x000030, "Wrong size on FCustomizationSubCategory");
static_assert(offsetof(FCustomizationSubCategory, GameplayTag) == 0x000000, "Member 'FCustomizationSubCategory::GameplayTag' has a wrong offset!");
static_assert(offsetof(FCustomizationSubCategory, DisplayName) == 0x000008, "Member 'FCustomizationSubCategory::DisplayName' has a wrong offset!");
static_assert(offsetof(FCustomizationSubCategory, ObjectTemplateIDs) == 0x000020, "Member 'FCustomizationSubCategory::ObjectTemplateIDs' has a wrong offset!");

// ScriptStruct DuneSandbox.AiSpawningResponse
// 0x0018 (0x0018 - 0x0000)
struct FAiSpawningResponse final
{
public:
	struct FDataTableRowHandle                    NPCType;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class AAiSpawnLocation*                       Location;                                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAiSpawningResponse) == 0x000008, "Wrong alignment on FAiSpawningResponse");
static_assert(sizeof(FAiSpawningResponse) == 0x000018, "Wrong size on FAiSpawningResponse");
static_assert(offsetof(FAiSpawningResponse, NPCType) == 0x000000, "Member 'FAiSpawningResponse::NPCType' has a wrong offset!");
static_assert(offsetof(FAiSpawningResponse, Location) == 0x000010, "Member 'FAiSpawningResponse::Location' has a wrong offset!");

// ScriptStruct DuneSandbox.ReferenceItemStats
// 0x0008 (0x0008 - 0x0000)
struct FReferenceItemStats final
{
public:
	int64                                         ReferenceDatabaseId;                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReferenceItemStats) == 0x000008, "Wrong alignment on FReferenceItemStats");
static_assert(sizeof(FReferenceItemStats) == 0x000008, "Wrong size on FReferenceItemStats");
static_assert(offsetof(FReferenceItemStats, ReferenceDatabaseId) == 0x000000, "Member 'FReferenceItemStats::ReferenceDatabaseId' has a wrong offset!");

// ScriptStruct DuneSandbox.AccessColorStateComponent
// 0x0001 (0x0001 - 0x0000)
struct FAccessColorStateComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccessColorStateComponent) == 0x000001, "Wrong alignment on FAccessColorStateComponent");
static_assert(sizeof(FAccessColorStateComponent) == 0x000001, "Wrong size on FAccessColorStateComponent");

// ScriptStruct DuneSandbox.ActorDiegeticUIDataRowBase
// 0x0030 (0x0040 - 0x0010)
struct FActorDiegeticUIDataRowBase final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   m_DiegeticWidgetClass;                             // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorDiegeticUIDataRowBase) == 0x000008, "Wrong alignment on FActorDiegeticUIDataRowBase");
static_assert(sizeof(FActorDiegeticUIDataRowBase) == 0x000040, "Wrong size on FActorDiegeticUIDataRowBase");
static_assert(offsetof(FActorDiegeticUIDataRowBase, m_DiegeticWidgetClass) == 0x000010, "Member 'FActorDiegeticUIDataRowBase::m_DiegeticWidgetClass' has a wrong offset!");

// ScriptStruct DuneSandbox.AggroControllerComponent
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FAggroControllerComponent final
{
public:
	uint8                                         Pad_0[0x54];                                       // 0x0000(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_TotalDamageDone;                                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAggroControllerComponent) == 0x000008, "Wrong alignment on FAggroControllerComponent");
static_assert(sizeof(FAggroControllerComponent) == 0x000058, "Wrong size on FAggroControllerComponent");
static_assert(offsetof(FAggroControllerComponent, m_TotalDamageDone) == 0x000054, "Member 'FAggroControllerComponent::m_TotalDamageDone' has a wrong offset!");

// ScriptStruct DuneSandbox.ENPCRanks
// 0x0000 (0x0008 - 0x0008)
struct FENPCRanks final : public FStringEnumValue
{
};
static_assert(alignof(FENPCRanks) == 0x000004, "Wrong alignment on FENPCRanks");
static_assert(sizeof(FENPCRanks) == 0x000008, "Wrong size on FENPCRanks");

// ScriptStruct DuneSandbox.AimAssistAreaRowBase
// 0x0030 (0x0040 - 0x0010)
struct FAimAssistAreaRowBase final : public FTableRowBase
{
public:
	struct FVector2D                              m_FrictionZone;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_RotationZone;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_RotationDeadZone;                                // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimAssistAreaRowBase) == 0x000008, "Wrong alignment on FAimAssistAreaRowBase");
static_assert(sizeof(FAimAssistAreaRowBase) == 0x000040, "Wrong size on FAimAssistAreaRowBase");
static_assert(offsetof(FAimAssistAreaRowBase, m_FrictionZone) == 0x000010, "Member 'FAimAssistAreaRowBase::m_FrictionZone' has a wrong offset!");
static_assert(offsetof(FAimAssistAreaRowBase, m_RotationZone) == 0x000020, "Member 'FAimAssistAreaRowBase::m_RotationZone' has a wrong offset!");
static_assert(offsetof(FAimAssistAreaRowBase, m_RotationDeadZone) == 0x000030, "Member 'FAimAssistAreaRowBase::m_RotationDeadZone' has a wrong offset!");

// ScriptStruct DuneSandbox.ZoneBaseSettings
// 0x0030 (0x0030 - 0x0000)
struct FZoneBaseSettings
{
public:
	EZoneShape                                    ZoneShape;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxSize;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZoneBaseSettings) == 0x000008, "Wrong alignment on FZoneBaseSettings");
static_assert(sizeof(FZoneBaseSettings) == 0x000030, "Wrong size on FZoneBaseSettings");
static_assert(offsetof(FZoneBaseSettings, ZoneShape) == 0x000000, "Member 'FZoneBaseSettings::ZoneShape' has a wrong offset!");
static_assert(offsetof(FZoneBaseSettings, BoxSize) == 0x000008, "Member 'FZoneBaseSettings::BoxSize' has a wrong offset!");
static_assert(offsetof(FZoneBaseSettings, Radius) == 0x000020, "Member 'FZoneBaseSettings::Radius' has a wrong offset!");
static_assert(offsetof(FZoneBaseSettings, InnerRadius) == 0x000024, "Member 'FZoneBaseSettings::InnerRadius' has a wrong offset!");
static_assert(offsetof(FZoneBaseSettings, Height) == 0x000028, "Member 'FZoneBaseSettings::Height' has a wrong offset!");

// ScriptStruct DuneSandbox.AimAssistRotationSettings
// 0x0040 (0x0040 - 0x0000)
struct FAimAssistRotationSettings final
{
public:
	class UCurveFloat*                            m_AimAssistRotationCurve;                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_AimAssistRotationDistanceCurve;                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_RotationAmount;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_RotationSpeed;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAllowRotationWhileAiming;                       // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_RotationEaseOffWhenPullAwayCurve;                // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimAssistRotationSettings) == 0x000008, "Wrong alignment on FAimAssistRotationSettings");
static_assert(sizeof(FAimAssistRotationSettings) == 0x000040, "Wrong size on FAimAssistRotationSettings");
static_assert(offsetof(FAimAssistRotationSettings, m_AimAssistRotationCurve) == 0x000000, "Member 'FAimAssistRotationSettings::m_AimAssistRotationCurve' has a wrong offset!");
static_assert(offsetof(FAimAssistRotationSettings, m_AimAssistRotationDistanceCurve) == 0x000008, "Member 'FAimAssistRotationSettings::m_AimAssistRotationDistanceCurve' has a wrong offset!");
static_assert(offsetof(FAimAssistRotationSettings, m_RotationAmount) == 0x000010, "Member 'FAimAssistRotationSettings::m_RotationAmount' has a wrong offset!");
static_assert(offsetof(FAimAssistRotationSettings, m_RotationSpeed) == 0x000020, "Member 'FAimAssistRotationSettings::m_RotationSpeed' has a wrong offset!");
static_assert(offsetof(FAimAssistRotationSettings, m_bAllowRotationWhileAiming) == 0x000030, "Member 'FAimAssistRotationSettings::m_bAllowRotationWhileAiming' has a wrong offset!");
static_assert(offsetof(FAimAssistRotationSettings, m_RotationEaseOffWhenPullAwayCurve) == 0x000038, "Member 'FAimAssistRotationSettings::m_RotationEaseOffWhenPullAwayCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.AimAssistRowBase
// 0x0110 (0x0120 - 0x0010)
struct FAimAssistRowBase final : public FTableRowBase
{
public:
	class UCurveFloat*                            m_AimAssistAccelerationCurve;                      // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_MaxTurnSpeed;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_MaxADSTurnSpeed;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DeadZone;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TurnAccelerationSpeed;                           // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TurnDecelerationSpeed;                           // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_AimAssistFrictionCurve;                          // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FrictionStickiness;                              // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FrictionStickinessADS;                           // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EAimAssistRotationType, struct FAimAssistRotationSettings> m_RotationSettings;              // 0x0058(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EAimAssistRotationType, struct FAimAssistRotationSettings> m_RotationSettingsADS;           // 0x00A8(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint32                                        m_RotationSmoothingBufferSize;                     // 0x00F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ControllerBulletMagnetismAreaOuter;              // 0x00FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ControllerBulletMagnetismAreaInner;              // 0x0100(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MouseBulletMagnetismAreaOuter;                   // 0x0104(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MouseBulletMagnetismAreaInner;                   // 0x0108(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BulletMagnetismDepth;                            // 0x010C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BulletMagnetismTraceTolerance;                   // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_BulletMagnetismDistanceCurve;                    // 0x0118(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimAssistRowBase) == 0x000008, "Wrong alignment on FAimAssistRowBase");
static_assert(sizeof(FAimAssistRowBase) == 0x000120, "Wrong size on FAimAssistRowBase");
static_assert(offsetof(FAimAssistRowBase, m_AimAssistAccelerationCurve) == 0x000010, "Member 'FAimAssistRowBase::m_AimAssistAccelerationCurve' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_MaxTurnSpeed) == 0x000018, "Member 'FAimAssistRowBase::m_MaxTurnSpeed' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_MaxADSTurnSpeed) == 0x000028, "Member 'FAimAssistRowBase::m_MaxADSTurnSpeed' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_DeadZone) == 0x000038, "Member 'FAimAssistRowBase::m_DeadZone' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_TurnAccelerationSpeed) == 0x00003C, "Member 'FAimAssistRowBase::m_TurnAccelerationSpeed' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_TurnDecelerationSpeed) == 0x000040, "Member 'FAimAssistRowBase::m_TurnDecelerationSpeed' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_AimAssistFrictionCurve) == 0x000048, "Member 'FAimAssistRowBase::m_AimAssistFrictionCurve' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_FrictionStickiness) == 0x000050, "Member 'FAimAssistRowBase::m_FrictionStickiness' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_FrictionStickinessADS) == 0x000054, "Member 'FAimAssistRowBase::m_FrictionStickinessADS' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_RotationSettings) == 0x000058, "Member 'FAimAssistRowBase::m_RotationSettings' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_RotationSettingsADS) == 0x0000A8, "Member 'FAimAssistRowBase::m_RotationSettingsADS' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_RotationSmoothingBufferSize) == 0x0000F8, "Member 'FAimAssistRowBase::m_RotationSmoothingBufferSize' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_ControllerBulletMagnetismAreaOuter) == 0x0000FC, "Member 'FAimAssistRowBase::m_ControllerBulletMagnetismAreaOuter' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_ControllerBulletMagnetismAreaInner) == 0x000100, "Member 'FAimAssistRowBase::m_ControllerBulletMagnetismAreaInner' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_MouseBulletMagnetismAreaOuter) == 0x000104, "Member 'FAimAssistRowBase::m_MouseBulletMagnetismAreaOuter' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_MouseBulletMagnetismAreaInner) == 0x000108, "Member 'FAimAssistRowBase::m_MouseBulletMagnetismAreaInner' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_BulletMagnetismDepth) == 0x00010C, "Member 'FAimAssistRowBase::m_BulletMagnetismDepth' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_BulletMagnetismTraceTolerance) == 0x000110, "Member 'FAimAssistRowBase::m_BulletMagnetismTraceTolerance' has a wrong offset!");
static_assert(offsetof(FAimAssistRowBase, m_BulletMagnetismDistanceCurve) == 0x000118, "Member 'FAimAssistRowBase::m_BulletMagnetismDistanceCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.TotalHealingRemaining
// 0x0018 (0x0018 - 0x0000)
struct FTotalHealingRemaining final
{
public:
	struct FActiveGameplayEffectHandle            m_HealingSource;                                   // 0x0000(0x0010)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TotalHealingRemaining;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsDurationOver;                                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTotalHealingRemaining) == 0x000004, "Wrong alignment on FTotalHealingRemaining");
static_assert(sizeof(FTotalHealingRemaining) == 0x000018, "Wrong size on FTotalHealingRemaining");
static_assert(offsetof(FTotalHealingRemaining, m_HealingSource) == 0x000000, "Member 'FTotalHealingRemaining::m_HealingSource' has a wrong offset!");
static_assert(offsetof(FTotalHealingRemaining, m_TotalHealingRemaining) == 0x000010, "Member 'FTotalHealingRemaining::m_TotalHealingRemaining' has a wrong offset!");
static_assert(offsetof(FTotalHealingRemaining, m_bIsDurationOver) == 0x000014, "Member 'FTotalHealingRemaining::m_bIsDurationOver' has a wrong offset!");

// ScriptStruct DuneSandbox.AISpawnAnimation
// 0x0038 (0x0038 - 0x0000)
struct FAISpawnAnimation final
{
public:
	TSoftObjectPtr<class UAnimMontage>            m_Animation;                                       // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvisibleOnSpawn;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipWeapon;                                      // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayed;                                           // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAISpawnAnimation) == 0x000008, "Wrong alignment on FAISpawnAnimation");
static_assert(sizeof(FAISpawnAnimation) == 0x000038, "Wrong size on FAISpawnAnimation");
static_assert(offsetof(FAISpawnAnimation, m_Animation) == 0x000000, "Member 'FAISpawnAnimation::m_Animation' has a wrong offset!");
static_assert(offsetof(FAISpawnAnimation, bInvisibleOnSpawn) == 0x000030, "Member 'FAISpawnAnimation::bInvisibleOnSpawn' has a wrong offset!");
static_assert(offsetof(FAISpawnAnimation, bEquipWeapon) == 0x000031, "Member 'FAISpawnAnimation::bEquipWeapon' has a wrong offset!");
static_assert(offsetof(FAISpawnAnimation, bPlayed) == 0x000032, "Member 'FAISpawnAnimation::bPlayed' has a wrong offset!");

// ScriptStruct DuneSandbox.EHydrationState
// 0x0000 (0x0008 - 0x0008)
struct FEHydrationState final : public FStringEnumValue
{
};
static_assert(alignof(FEHydrationState) == 0x000004, "Wrong alignment on FEHydrationState");
static_assert(sizeof(FEHydrationState) == 0x000008, "Wrong size on FEHydrationState");

// ScriptStruct DuneSandbox.HydrationStatusEffectsTrackerComponent
// 0x0070 (0x0070 - 0x0000)
struct FHydrationStatusEffectsTrackerComponent final
{
public:
	TMap<struct FUniqueID, struct FActiveGameplayEffectHandle> m_ClothingModifierEffects;            // 0x0000(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FEHydrationState                       m_CurrentHydrationState;                           // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            m_CurrentHydrationStateEffectHandle;               // 0x0058(0x0010)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHydrationStatusEffectsTrackerComponent) == 0x000008, "Wrong alignment on FHydrationStatusEffectsTrackerComponent");
static_assert(sizeof(FHydrationStatusEffectsTrackerComponent) == 0x000070, "Wrong size on FHydrationStatusEffectsTrackerComponent");
static_assert(offsetof(FHydrationStatusEffectsTrackerComponent, m_ClothingModifierEffects) == 0x000000, "Member 'FHydrationStatusEffectsTrackerComponent::m_ClothingModifierEffects' has a wrong offset!");
static_assert(offsetof(FHydrationStatusEffectsTrackerComponent, m_CurrentHydrationState) == 0x000050, "Member 'FHydrationStatusEffectsTrackerComponent::m_CurrentHydrationState' has a wrong offset!");
static_assert(offsetof(FHydrationStatusEffectsTrackerComponent, m_CurrentHydrationStateEffectHandle) == 0x000058, "Member 'FHydrationStatusEffectsTrackerComponent::m_CurrentHydrationStateEffectHandle' has a wrong offset!");

// ScriptStruct DuneSandbox.NPCMutableOptionParameter
// 0x0018 (0x0018 - 0x0000)
struct FNPCMutableOptionParameter final
{
public:
	struct FENPCMutablePartName                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SwatchIds;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCMutableOptionParameter) == 0x000008, "Wrong alignment on FNPCMutableOptionParameter");
static_assert(sizeof(FNPCMutableOptionParameter) == 0x000018, "Wrong size on FNPCMutableOptionParameter");
static_assert(offsetof(FNPCMutableOptionParameter, Name) == 0x000000, "Member 'FNPCMutableOptionParameter::Name' has a wrong offset!");
static_assert(offsetof(FNPCMutableOptionParameter, SwatchIds) == 0x000008, "Member 'FNPCMutableOptionParameter::SwatchIds' has a wrong offset!");

// ScriptStruct DuneSandbox.TabEntryPlayerMenu
// 0x0048 (0x0048 - 0x0000)
struct FTabEntryPlayerMenu final
{
public:
	EPlayerMenuScreen                             m_ScreenType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   m_TabNumberedNotificationIndicator;                // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_TelemetryName;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsActiveOnDeath;                                // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTabEntryPlayerMenu) == 0x000008, "Wrong alignment on FTabEntryPlayerMenu");
static_assert(sizeof(FTabEntryPlayerMenu) == 0x000048, "Wrong size on FTabEntryPlayerMenu");
static_assert(offsetof(FTabEntryPlayerMenu, m_ScreenType) == 0x000000, "Member 'FTabEntryPlayerMenu::m_ScreenType' has a wrong offset!");
static_assert(offsetof(FTabEntryPlayerMenu, m_TabNumberedNotificationIndicator) == 0x000008, "Member 'FTabEntryPlayerMenu::m_TabNumberedNotificationIndicator' has a wrong offset!");
static_assert(offsetof(FTabEntryPlayerMenu, m_TelemetryName) == 0x000038, "Member 'FTabEntryPlayerMenu::m_TelemetryName' has a wrong offset!");
static_assert(offsetof(FTabEntryPlayerMenu, m_bIsActiveOnDeath) == 0x000040, "Member 'FTabEntryPlayerMenu::m_bIsActiveOnDeath' has a wrong offset!");

// ScriptStruct DuneSandbox.AISpawnManagerComponent
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FAISpawnManagerComponent final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAISpawnManagerComponent) == 0x000004, "Wrong alignment on FAISpawnManagerComponent");
static_assert(sizeof(FAISpawnManagerComponent) == 0x000004, "Wrong size on FAISpawnManagerComponent");

// ScriptStruct DuneSandbox.ModuleDynamicData
// 0x0004 (0x0004 - 0x0000)
struct FModuleDynamicData final
{
public:
	int32                                         SkillPointsSpent;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModuleDynamicData) == 0x000004, "Wrong alignment on FModuleDynamicData");
static_assert(sizeof(FModuleDynamicData) == 0x000004, "Wrong size on FModuleDynamicData");
static_assert(offsetof(FModuleDynamicData, SkillPointsSpent) == 0x000000, "Member 'FModuleDynamicData::SkillPointsSpent' has a wrong offset!");

// ScriptStruct DuneSandbox.BotAutoBorderCrossingConfig
// 0x000C (0x000C - 0x0000)
struct FBotAutoBorderCrossingConfig final
{
public:
	bool                                          m_bEnabled;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_DetectBorderDistance;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_JumpOverBorderDistance;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBotAutoBorderCrossingConfig) == 0x000004, "Wrong alignment on FBotAutoBorderCrossingConfig");
static_assert(sizeof(FBotAutoBorderCrossingConfig) == 0x00000C, "Wrong size on FBotAutoBorderCrossingConfig");
static_assert(offsetof(FBotAutoBorderCrossingConfig, m_bEnabled) == 0x000000, "Member 'FBotAutoBorderCrossingConfig::m_bEnabled' has a wrong offset!");
static_assert(offsetof(FBotAutoBorderCrossingConfig, m_DetectBorderDistance) == 0x000004, "Member 'FBotAutoBorderCrossingConfig::m_DetectBorderDistance' has a wrong offset!");
static_assert(offsetof(FBotAutoBorderCrossingConfig, m_JumpOverBorderDistance) == 0x000008, "Member 'FBotAutoBorderCrossingConfig::m_JumpOverBorderDistance' has a wrong offset!");

// ScriptStruct DuneSandbox.HydrationClothingItemTableRow
// 0x0008 (0x0018 - 0x0010)
struct FHydrationClothingItemTableRow final : public FTableRowBase
{
public:
	struct FClothingHydrationStats                ClothingHydrationStats;                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHydrationClothingItemTableRow) == 0x000008, "Wrong alignment on FHydrationClothingItemTableRow");
static_assert(sizeof(FHydrationClothingItemTableRow) == 0x000018, "Wrong size on FHydrationClothingItemTableRow");
static_assert(offsetof(FHydrationClothingItemTableRow, ClothingHydrationStats) == 0x000010, "Member 'FHydrationClothingItemTableRow::ClothingHydrationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.HitReactMontages
// 0x0060 (0x0060 - 0x0000)
struct FHitReactMontages final
{
public:
	struct FAnimMontageHolder                     HitReact;                                          // 0x0000(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EHitReactDirection                            HitDirection;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHitReactLocation                             HitLocation;                                       // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitReactMontages) == 0x000008, "Wrong alignment on FHitReactMontages");
static_assert(sizeof(FHitReactMontages) == 0x000060, "Wrong size on FHitReactMontages");
static_assert(offsetof(FHitReactMontages, HitReact) == 0x000000, "Member 'FHitReactMontages::HitReact' has a wrong offset!");
static_assert(offsetof(FHitReactMontages, HitDirection) == 0x000058, "Member 'FHitReactMontages::HitDirection' has a wrong offset!");
static_assert(offsetof(FHitReactMontages, HitLocation) == 0x000059, "Member 'FHitReactMontages::HitLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.EDamageableFloatStatID
// 0x0000 (0x0008 - 0x0008)
struct FEDamageableFloatStatID final : public FEDamageableStatID
{
};
static_assert(alignof(FEDamageableFloatStatID) == 0x000004, "Wrong alignment on FEDamageableFloatStatID");
static_assert(sizeof(FEDamageableFloatStatID) == 0x000008, "Wrong size on FEDamageableFloatStatID");

// ScriptStruct DuneSandbox.Polyline
// 0x0010 (0x0010 - 0x0000)
struct FPolyline final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPolyline) == 0x000008, "Wrong alignment on FPolyline");
static_assert(sizeof(FPolyline) == 0x000010, "Wrong size on FPolyline");
static_assert(offsetof(FPolyline, Points) == 0x000000, "Member 'FPolyline::Points' has a wrong offset!");

// ScriptStruct DuneSandbox.KnockbackHits
// 0x0060 (0x0060 - 0x0000)
struct FKnockbackHits final
{
public:
	TArray<struct FStoredKnockbackReactMontages>  m_StumbleMontages;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FStoredKnockbackReactMontages>  m_StaggerMontages;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FStoredKnockbackReactMontages>  m_LaunchMontages;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FStoredKnockbackReactMontages>  m_StabbedMontages;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FStoredKnockbackReactMontages>  m_SlashedMontages;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FStoredKnockbackReactMontages>  m_BlockBounceMontages;                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FKnockbackHits) == 0x000008, "Wrong alignment on FKnockbackHits");
static_assert(sizeof(FKnockbackHits) == 0x000060, "Wrong size on FKnockbackHits");
static_assert(offsetof(FKnockbackHits, m_StumbleMontages) == 0x000000, "Member 'FKnockbackHits::m_StumbleMontages' has a wrong offset!");
static_assert(offsetof(FKnockbackHits, m_StaggerMontages) == 0x000010, "Member 'FKnockbackHits::m_StaggerMontages' has a wrong offset!");
static_assert(offsetof(FKnockbackHits, m_LaunchMontages) == 0x000020, "Member 'FKnockbackHits::m_LaunchMontages' has a wrong offset!");
static_assert(offsetof(FKnockbackHits, m_StabbedMontages) == 0x000030, "Member 'FKnockbackHits::m_StabbedMontages' has a wrong offset!");
static_assert(offsetof(FKnockbackHits, m_SlashedMontages) == 0x000040, "Member 'FKnockbackHits::m_SlashedMontages' has a wrong offset!");
static_assert(offsetof(FKnockbackHits, m_BlockBounceMontages) == 0x000050, "Member 'FKnockbackHits::m_BlockBounceMontages' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemMeshDisplayBase
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FItemMeshDisplayBase
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        m_AttachComponent;                                 // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18[0x80];                                      // 0x0018(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_DisplayBoxSize;                                  // 0x0098(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B0[0x38];                                      // 0x00B0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_MaxDisplayScale;                                 // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMeshDisplayBase) == 0x000010, "Wrong alignment on FItemMeshDisplayBase");
static_assert(sizeof(FItemMeshDisplayBase) == 0x0000F0, "Wrong size on FItemMeshDisplayBase");
static_assert(offsetof(FItemMeshDisplayBase, m_AttachComponent) == 0x000010, "Member 'FItemMeshDisplayBase::m_AttachComponent' has a wrong offset!");
static_assert(offsetof(FItemMeshDisplayBase, m_DisplayBoxSize) == 0x000098, "Member 'FItemMeshDisplayBase::m_DisplayBoxSize' has a wrong offset!");
static_assert(offsetof(FItemMeshDisplayBase, m_MaxDisplayScale) == 0x0000E8, "Member 'FItemMeshDisplayBase::m_MaxDisplayScale' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceableMeshDisplay
// 0x0010 (0x0100 - 0x00F0)
struct FPlaceableMeshDisplay final : public FItemMeshDisplayBase
{
public:
	class APlaceableBrush*                        m_PlaceableBrush;                                  // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaceableMeshDisplay) == 0x000010, "Wrong alignment on FPlaceableMeshDisplay");
static_assert(sizeof(FPlaceableMeshDisplay) == 0x000100, "Wrong size on FPlaceableMeshDisplay");
static_assert(offsetof(FPlaceableMeshDisplay, m_PlaceableBrush) == 0x0000F0, "Member 'FPlaceableMeshDisplay::m_PlaceableBrush' has a wrong offset!");

// ScriptStruct DuneSandbox.LeanOutOfCoverMontage
// 0x0040 (0x0040 - 0x0000)
struct FLeanOutOfCoverMontage final
{
public:
	TSoftObjectPtr<class UAnimMontage>            m_Montage;                                         // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_LoopSectionName;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_IdleSectionName;                                 // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeanOutOfCoverMontage) == 0x000008, "Wrong alignment on FLeanOutOfCoverMontage");
static_assert(sizeof(FLeanOutOfCoverMontage) == 0x000040, "Wrong size on FLeanOutOfCoverMontage");
static_assert(offsetof(FLeanOutOfCoverMontage, m_Montage) == 0x000000, "Member 'FLeanOutOfCoverMontage::m_Montage' has a wrong offset!");
static_assert(offsetof(FLeanOutOfCoverMontage, m_LoopSectionName) == 0x000030, "Member 'FLeanOutOfCoverMontage::m_LoopSectionName' has a wrong offset!");
static_assert(offsetof(FLeanOutOfCoverMontage, m_IdleSectionName) == 0x000038, "Member 'FLeanOutOfCoverMontage::m_IdleSectionName' has a wrong offset!");

// ScriptStruct DuneSandbox.StrafingLocomotionSequences
// 0x00C0 (0x00C0 - 0x0000)
struct FStrafingLocomotionSequences final
{
public:
	TSoftObjectPtr<class UAnimSequence>           m_Forward;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           m_Right;                                           // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           m_Backward;                                        // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           m_Left;                                            // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrafingLocomotionSequences) == 0x000008, "Wrong alignment on FStrafingLocomotionSequences");
static_assert(sizeof(FStrafingLocomotionSequences) == 0x0000C0, "Wrong size on FStrafingLocomotionSequences");
static_assert(offsetof(FStrafingLocomotionSequences, m_Forward) == 0x000000, "Member 'FStrafingLocomotionSequences::m_Forward' has a wrong offset!");
static_assert(offsetof(FStrafingLocomotionSequences, m_Right) == 0x000030, "Member 'FStrafingLocomotionSequences::m_Right' has a wrong offset!");
static_assert(offsetof(FStrafingLocomotionSequences, m_Backward) == 0x000060, "Member 'FStrafingLocomotionSequences::m_Backward' has a wrong offset!");
static_assert(offsetof(FStrafingLocomotionSequences, m_Left) == 0x000090, "Member 'FStrafingLocomotionSequences::m_Left' has a wrong offset!");

// ScriptStruct DuneSandbox.NPCMutableFloatParameter
// 0x000C (0x000C - 0x0000)
struct FNPCMutableFloatParameter final
{
public:
	struct FENPCMutablePartName                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCMutableFloatParameter) == 0x000004, "Wrong alignment on FNPCMutableFloatParameter");
static_assert(sizeof(FNPCMutableFloatParameter) == 0x00000C, "Wrong size on FNPCMutableFloatParameter");
static_assert(offsetof(FNPCMutableFloatParameter, Name) == 0x000000, "Member 'FNPCMutableFloatParameter::Name' has a wrong offset!");
static_assert(offsetof(FNPCMutableFloatParameter, Value) == 0x000008, "Member 'FNPCMutableFloatParameter::Value' has a wrong offset!");

// ScriptStruct DuneSandbox.NPCMutableFloatList
// 0x0010 (0x0010 - 0x0000)
struct FNPCMutableFloatList final
{
public:
	TArray<struct FNPCMutableFloatParameter>      FloatParameters;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCMutableFloatList) == 0x000008, "Wrong alignment on FNPCMutableFloatList");
static_assert(sizeof(FNPCMutableFloatList) == 0x000010, "Wrong size on FNPCMutableFloatList");
static_assert(offsetof(FNPCMutableFloatList, FloatParameters) == 0x000000, "Member 'FNPCMutableFloatList::FloatParameters' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimSequenceHolder
// 0x0040 (0x0058 - 0x0018)
struct FAnimSequenceHolder final : public FHolderBase
{
public:
	TSoftObjectPtr<class UAnimSequence>           m_Sequence;                                        // 0x0018(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          m_Holder;                                          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimSequence*                          m_DefaultSequence;                                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimSequenceHolder) == 0x000008, "Wrong alignment on FAnimSequenceHolder");
static_assert(sizeof(FAnimSequenceHolder) == 0x000058, "Wrong size on FAnimSequenceHolder");
static_assert(offsetof(FAnimSequenceHolder, m_Sequence) == 0x000018, "Member 'FAnimSequenceHolder::m_Sequence' has a wrong offset!");
static_assert(offsetof(FAnimSequenceHolder, m_Holder) == 0x000048, "Member 'FAnimSequenceHolder::m_Holder' has a wrong offset!");
static_assert(offsetof(FAnimSequenceHolder, m_DefaultSequence) == 0x000050, "Member 'FAnimSequenceHolder::m_DefaultSequence' has a wrong offset!");

// ScriptStruct DuneSandbox.StoredStrafingLocomotionSequences
// 0x0160 (0x0160 - 0x0000)
struct FStoredStrafingLocomotionSequences final
{
public:
	struct FAnimSequenceHolder                    m_Forward;                                         // 0x0000(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FAnimSequenceHolder                    m_Right;                                           // 0x0058(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FAnimSequenceHolder                    m_Backward;                                        // 0x00B0(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FAnimSequenceHolder                    m_Left;                                            // 0x0108(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoredStrafingLocomotionSequences) == 0x000008, "Wrong alignment on FStoredStrafingLocomotionSequences");
static_assert(sizeof(FStoredStrafingLocomotionSequences) == 0x000160, "Wrong size on FStoredStrafingLocomotionSequences");
static_assert(offsetof(FStoredStrafingLocomotionSequences, m_Forward) == 0x000000, "Member 'FStoredStrafingLocomotionSequences::m_Forward' has a wrong offset!");
static_assert(offsetof(FStoredStrafingLocomotionSequences, m_Right) == 0x000058, "Member 'FStoredStrafingLocomotionSequences::m_Right' has a wrong offset!");
static_assert(offsetof(FStoredStrafingLocomotionSequences, m_Backward) == 0x0000B0, "Member 'FStoredStrafingLocomotionSequences::m_Backward' has a wrong offset!");
static_assert(offsetof(FStoredStrafingLocomotionSequences, m_Left) == 0x000108, "Member 'FStoredStrafingLocomotionSequences::m_Left' has a wrong offset!");

// ScriptStruct DuneSandbox.MutablePartOptionValue
// 0x0018 (0x0018 - 0x0000)
struct FMutablePartOptionValue final
{
public:
	class FString                                 ValueName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowToApply;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMutablePartOptionValue) == 0x000008, "Wrong alignment on FMutablePartOptionValue");
static_assert(sizeof(FMutablePartOptionValue) == 0x000018, "Wrong size on FMutablePartOptionValue");
static_assert(offsetof(FMutablePartOptionValue, ValueName) == 0x000000, "Member 'FMutablePartOptionValue::ValueName' has a wrong offset!");
static_assert(offsetof(FMutablePartOptionValue, bAllowToApply) == 0x000010, "Member 'FMutablePartOptionValue::bAllowToApply' has a wrong offset!");

// ScriptStruct DuneSandbox.MutablePartCustomization
// 0x0020 (0x0020 - 0x0000)
struct FMutablePartCustomization final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutablePartOptionValue>        Values;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMutablePartCustomization) == 0x000008, "Wrong alignment on FMutablePartCustomization");
static_assert(sizeof(FMutablePartCustomization) == 0x000020, "Wrong size on FMutablePartCustomization");
static_assert(offsetof(FMutablePartCustomization, ParameterName) == 0x000000, "Member 'FMutablePartCustomization::ParameterName' has a wrong offset!");
static_assert(offsetof(FMutablePartCustomization, Values) == 0x000010, "Member 'FMutablePartCustomization::Values' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcAppearanceRowBase
// 0x0010 (0x0020 - 0x0010)
struct FNpcAppearanceRowBase final : public FTableRowBase
{
public:
	TArray<struct FMutablePartCustomization>      MutableParts;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcAppearanceRowBase) == 0x000008, "Wrong alignment on FNpcAppearanceRowBase");
static_assert(sizeof(FNpcAppearanceRowBase) == 0x000020, "Wrong size on FNpcAppearanceRowBase");
static_assert(offsetof(FNpcAppearanceRowBase, MutableParts) == 0x000010, "Member 'FNpcAppearanceRowBase::MutableParts' has a wrong offset!");

// ScriptStruct DuneSandbox.OrnithopterDragonFlyConfigModifier
// 0x0018 (0x0018 - 0x0000)
struct FOrnithopterDragonFlyConfigModifier final
{
public:
	float                                         MaxSpeedFactor;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitchFactor;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRollFactor;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchRateFactor;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawRateFactor;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollRateFactor;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrnithopterDragonFlyConfigModifier) == 0x000004, "Wrong alignment on FOrnithopterDragonFlyConfigModifier");
static_assert(sizeof(FOrnithopterDragonFlyConfigModifier) == 0x000018, "Wrong size on FOrnithopterDragonFlyConfigModifier");
static_assert(offsetof(FOrnithopterDragonFlyConfigModifier, MaxSpeedFactor) == 0x000000, "Member 'FOrnithopterDragonFlyConfigModifier::MaxSpeedFactor' has a wrong offset!");
static_assert(offsetof(FOrnithopterDragonFlyConfigModifier, MaxPitchFactor) == 0x000004, "Member 'FOrnithopterDragonFlyConfigModifier::MaxPitchFactor' has a wrong offset!");
static_assert(offsetof(FOrnithopterDragonFlyConfigModifier, MaxRollFactor) == 0x000008, "Member 'FOrnithopterDragonFlyConfigModifier::MaxRollFactor' has a wrong offset!");
static_assert(offsetof(FOrnithopterDragonFlyConfigModifier, PitchRateFactor) == 0x00000C, "Member 'FOrnithopterDragonFlyConfigModifier::PitchRateFactor' has a wrong offset!");
static_assert(offsetof(FOrnithopterDragonFlyConfigModifier, YawRateFactor) == 0x000010, "Member 'FOrnithopterDragonFlyConfigModifier::YawRateFactor' has a wrong offset!");
static_assert(offsetof(FOrnithopterDragonFlyConfigModifier, RollRateFactor) == 0x000014, "Member 'FOrnithopterDragonFlyConfigModifier::RollRateFactor' has a wrong offset!");

// ScriptStruct DuneSandbox.OrnithopterAngleConfig
// 0x0010 (0x0010 - 0x0000)
struct FOrnithopterAngleConfig final
{
public:
	float                                         Damping;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnRate;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnRateMultiplier;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrnithopterAngleConfig) == 0x000004, "Wrong alignment on FOrnithopterAngleConfig");
static_assert(sizeof(FOrnithopterAngleConfig) == 0x000010, "Wrong size on FOrnithopterAngleConfig");
static_assert(offsetof(FOrnithopterAngleConfig, Damping) == 0x000000, "Member 'FOrnithopterAngleConfig::Damping' has a wrong offset!");
static_assert(offsetof(FOrnithopterAngleConfig, TurnRate) == 0x000004, "Member 'FOrnithopterAngleConfig::TurnRate' has a wrong offset!");
static_assert(offsetof(FOrnithopterAngleConfig, MaxAngle) == 0x000008, "Member 'FOrnithopterAngleConfig::MaxAngle' has a wrong offset!");
static_assert(offsetof(FOrnithopterAngleConfig, TurnRateMultiplier) == 0x00000C, "Member 'FOrnithopterAngleConfig::TurnRateMultiplier' has a wrong offset!");

// ScriptStruct DuneSandbox.OrnithopterRotationConfig
// 0x0030 (0x0030 - 0x0000)
struct FOrnithopterRotationConfig final
{
public:
	struct FOrnithopterAngleConfig                Pitch;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FOrnithopterAngleConfig                Yaw;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FOrnithopterAngleConfig                Roll;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrnithopterRotationConfig) == 0x000004, "Wrong alignment on FOrnithopterRotationConfig");
static_assert(sizeof(FOrnithopterRotationConfig) == 0x000030, "Wrong size on FOrnithopterRotationConfig");
static_assert(offsetof(FOrnithopterRotationConfig, Pitch) == 0x000000, "Member 'FOrnithopterRotationConfig::Pitch' has a wrong offset!");
static_assert(offsetof(FOrnithopterRotationConfig, Yaw) == 0x000010, "Member 'FOrnithopterRotationConfig::Yaw' has a wrong offset!");
static_assert(offsetof(FOrnithopterRotationConfig, Roll) == 0x000020, "Member 'FOrnithopterRotationConfig::Roll' has a wrong offset!");

// ScriptStruct DuneSandbox.OrnithopterConfigComponent
// 0x01C0 (0x01C0 - 0x0000)
struct FOrnithopterConfigComponent final
{
public:
	float                                         m_MaxSpeed;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandByManeuverSpeed;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandByVerticalSpeed;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandBySpeedFactor;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandByLandedDistance;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandByManeuverDistance;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandByModeHeightThreshold;                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandByEnginePowerConsumption;                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DragonFlyGroundAlignedVelocityHeightThreshold;   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DragonFlySpeedScalingHeightThreshold;            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            m_MaxAltitudeRange;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            m_BrokenEngineMaxAltitudeRange;                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            m_MinHeightWithAttachment;                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrnithopterLocomotionModifierDataAsset* m_LocomotionModifierDataAsset;                    // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_YawTurnRateCurve;                                // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOrnithopterDragonFlyConfigModifier    m_DragonFlyBoostModifier;                          // 0x0068(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOrnithopterDragonFlyConfigModifier    m_DragonFlyFiringModifier;                         // 0x0080(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOrnithopterDragonFlyConfigModifier    m_DragonFlyHarnessModifier;                        // 0x0098(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_DragonFlyDashMaxSpeedMultiplier;                 // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VultureModeMaxSpeedFactor;                       // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VultureModeMaxSpeed;                             // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VultureModeDiveSpeedMultiplier;                  // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VultureModeAirResistance;                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_VultureModePitchToSpeedGain;                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_VultureModeSpeedToGravity;                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_VultureModeSpeedToPitchDown;                     // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_VultureModeRollToYawMultiplier;                  // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_VultureModePitchToYawMultiplier;                 // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_VultureModeCameraDeltaYawToRoll;                 // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DragonFlyModeBoostLateralReductionFactor;        // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DragonFlyLinearInertia;                          // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BrokenEngineMaxSpeedMultiplier;                  // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SandwormEngineThreatPerSecond;                   // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ForceVultureOnBrokenEngine;                      // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CriticalStateMaxSpeedMultiplier;                 // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOrnithopterRotationConfig             m_StandByConfig;                                   // 0x0110(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOrnithopterRotationConfig             m_DragonFlyConfig;                                 // 0x0140(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOrnithopterRotationConfig             m_VultureConfig;                                   // 0x0170(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              m_VultureModeSpeedToRollFactorRange;               // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RelativeInputAxisScale;                          // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4[0xC];                                      // 0x01B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrnithopterConfigComponent) == 0x000008, "Wrong alignment on FOrnithopterConfigComponent");
static_assert(sizeof(FOrnithopterConfigComponent) == 0x0001C0, "Wrong size on FOrnithopterConfigComponent");
static_assert(offsetof(FOrnithopterConfigComponent, m_MaxSpeed) == 0x000000, "Member 'FOrnithopterConfigComponent::m_MaxSpeed' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_StandByManeuverSpeed) == 0x000004, "Member 'FOrnithopterConfigComponent::m_StandByManeuverSpeed' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_StandByVerticalSpeed) == 0x000008, "Member 'FOrnithopterConfigComponent::m_StandByVerticalSpeed' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_StandBySpeedFactor) == 0x00000C, "Member 'FOrnithopterConfigComponent::m_StandBySpeedFactor' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_StandByLandedDistance) == 0x000010, "Member 'FOrnithopterConfigComponent::m_StandByLandedDistance' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_StandByManeuverDistance) == 0x000014, "Member 'FOrnithopterConfigComponent::m_StandByManeuverDistance' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_StandByModeHeightThreshold) == 0x000018, "Member 'FOrnithopterConfigComponent::m_StandByModeHeightThreshold' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_StandByEnginePowerConsumption) == 0x00001C, "Member 'FOrnithopterConfigComponent::m_StandByEnginePowerConsumption' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_DragonFlyGroundAlignedVelocityHeightThreshold) == 0x000020, "Member 'FOrnithopterConfigComponent::m_DragonFlyGroundAlignedVelocityHeightThreshold' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_DragonFlySpeedScalingHeightThreshold) == 0x000024, "Member 'FOrnithopterConfigComponent::m_DragonFlySpeedScalingHeightThreshold' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_MaxAltitudeRange) == 0x000028, "Member 'FOrnithopterConfigComponent::m_MaxAltitudeRange' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_BrokenEngineMaxAltitudeRange) == 0x000038, "Member 'FOrnithopterConfigComponent::m_BrokenEngineMaxAltitudeRange' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_MinHeightWithAttachment) == 0x000048, "Member 'FOrnithopterConfigComponent::m_MinHeightWithAttachment' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_LocomotionModifierDataAsset) == 0x000058, "Member 'FOrnithopterConfigComponent::m_LocomotionModifierDataAsset' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_YawTurnRateCurve) == 0x000060, "Member 'FOrnithopterConfigComponent::m_YawTurnRateCurve' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_DragonFlyBoostModifier) == 0x000068, "Member 'FOrnithopterConfigComponent::m_DragonFlyBoostModifier' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_DragonFlyFiringModifier) == 0x000080, "Member 'FOrnithopterConfigComponent::m_DragonFlyFiringModifier' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_DragonFlyHarnessModifier) == 0x000098, "Member 'FOrnithopterConfigComponent::m_DragonFlyHarnessModifier' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_DragonFlyDashMaxSpeedMultiplier) == 0x0000B0, "Member 'FOrnithopterConfigComponent::m_DragonFlyDashMaxSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModeMaxSpeedFactor) == 0x0000B4, "Member 'FOrnithopterConfigComponent::m_VultureModeMaxSpeedFactor' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModeMaxSpeed) == 0x0000B8, "Member 'FOrnithopterConfigComponent::m_VultureModeMaxSpeed' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModeDiveSpeedMultiplier) == 0x0000BC, "Member 'FOrnithopterConfigComponent::m_VultureModeDiveSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModeAirResistance) == 0x0000C0, "Member 'FOrnithopterConfigComponent::m_VultureModeAirResistance' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModePitchToSpeedGain) == 0x0000C8, "Member 'FOrnithopterConfigComponent::m_VultureModePitchToSpeedGain' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModeSpeedToGravity) == 0x0000D0, "Member 'FOrnithopterConfigComponent::m_VultureModeSpeedToGravity' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModeSpeedToPitchDown) == 0x0000D8, "Member 'FOrnithopterConfigComponent::m_VultureModeSpeedToPitchDown' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModeRollToYawMultiplier) == 0x0000E0, "Member 'FOrnithopterConfigComponent::m_VultureModeRollToYawMultiplier' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModePitchToYawMultiplier) == 0x0000E8, "Member 'FOrnithopterConfigComponent::m_VultureModePitchToYawMultiplier' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModeCameraDeltaYawToRoll) == 0x0000F0, "Member 'FOrnithopterConfigComponent::m_VultureModeCameraDeltaYawToRoll' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_DragonFlyModeBoostLateralReductionFactor) == 0x0000F8, "Member 'FOrnithopterConfigComponent::m_DragonFlyModeBoostLateralReductionFactor' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_DragonFlyLinearInertia) == 0x0000FC, "Member 'FOrnithopterConfigComponent::m_DragonFlyLinearInertia' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_BrokenEngineMaxSpeedMultiplier) == 0x000100, "Member 'FOrnithopterConfigComponent::m_BrokenEngineMaxSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_SandwormEngineThreatPerSecond) == 0x000104, "Member 'FOrnithopterConfigComponent::m_SandwormEngineThreatPerSecond' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_ForceVultureOnBrokenEngine) == 0x000108, "Member 'FOrnithopterConfigComponent::m_ForceVultureOnBrokenEngine' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_CriticalStateMaxSpeedMultiplier) == 0x00010C, "Member 'FOrnithopterConfigComponent::m_CriticalStateMaxSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_StandByConfig) == 0x000110, "Member 'FOrnithopterConfigComponent::m_StandByConfig' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_DragonFlyConfig) == 0x000140, "Member 'FOrnithopterConfigComponent::m_DragonFlyConfig' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureConfig) == 0x000170, "Member 'FOrnithopterConfigComponent::m_VultureConfig' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_VultureModeSpeedToRollFactorRange) == 0x0001A0, "Member 'FOrnithopterConfigComponent::m_VultureModeSpeedToRollFactorRange' has a wrong offset!");
static_assert(offsetof(FOrnithopterConfigComponent, m_RelativeInputAxisScale) == 0x0001B0, "Member 'FOrnithopterConfigComponent::m_RelativeInputAxisScale' has a wrong offset!");

// ScriptStruct DuneSandbox.MirrorFlipBoneIndex
// 0x0014 (0x0014 - 0x0000)
struct FMirrorFlipBoneIndex final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EAxis                                         MirrorAxis;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         FlipAxis;                                          // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsRotated;                                      // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMirrorFlipBoneIndex) == 0x000004, "Wrong alignment on FMirrorFlipBoneIndex");
static_assert(sizeof(FMirrorFlipBoneIndex) == 0x000014, "Wrong size on FMirrorFlipBoneIndex");
static_assert(offsetof(FMirrorFlipBoneIndex, bone) == 0x000000, "Member 'FMirrorFlipBoneIndex::bone' has a wrong offset!");
static_assert(offsetof(FMirrorFlipBoneIndex, MirrorAxis) == 0x000010, "Member 'FMirrorFlipBoneIndex::MirrorAxis' has a wrong offset!");
static_assert(offsetof(FMirrorFlipBoneIndex, FlipAxis) == 0x000011, "Member 'FMirrorFlipBoneIndex::FlipAxis' has a wrong offset!");
static_assert(offsetof(FMirrorFlipBoneIndex, m_bIsRotated) == 0x000012, "Member 'FMirrorFlipBoneIndex::m_bIsRotated' has a wrong offset!");

// ScriptStruct DuneSandbox.SeatedAnimations
// 0x0060 (0x0060 - 0x0000)
struct FSeatedAnimations final
{
public:
	TSoftObjectPtr<class UBlendSpace>             Turning;                                           // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBlendSpace>             Accelerating;                                      // 0x0030(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSeatedAnimations) == 0x000008, "Wrong alignment on FSeatedAnimations");
static_assert(sizeof(FSeatedAnimations) == 0x000060, "Wrong size on FSeatedAnimations");
static_assert(offsetof(FSeatedAnimations, Turning) == 0x000000, "Member 'FSeatedAnimations::Turning' has a wrong offset!");
static_assert(offsetof(FSeatedAnimations, Accelerating) == 0x000030, "Member 'FSeatedAnimations::Accelerating' has a wrong offset!");

// ScriptStruct DuneSandbox.ShowroomDefinition
// 0x0028 (0x0028 - 0x0000)
struct FShowroomDefinition final
{
public:
	struct FSoftObjectPath                        m_Map;                                             // 0x0000(0x0020)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShowroomWorldCreationSettings         m_Settings;                                        // 0x0020(0x0001)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShowroomDefinition) == 0x000008, "Wrong alignment on FShowroomDefinition");
static_assert(sizeof(FShowroomDefinition) == 0x000028, "Wrong size on FShowroomDefinition");
static_assert(offsetof(FShowroomDefinition, m_Map) == 0x000000, "Member 'FShowroomDefinition::m_Map' has a wrong offset!");
static_assert(offsetof(FShowroomDefinition, m_Settings) == 0x000020, "Member 'FShowroomDefinition::m_Settings' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimVariations
// 0x0060 (0x0060 - 0x0000)
struct FAnimVariations final
{
public:
	struct FAnimSequenceHolder                    AnimVariation;                                     // 0x0000(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         ChancePlayed;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimVariations) == 0x000008, "Wrong alignment on FAnimVariations");
static_assert(sizeof(FAnimVariations) == 0x000060, "Wrong size on FAnimVariations");
static_assert(offsetof(FAnimVariations, AnimVariation) == 0x000000, "Member 'FAnimVariations::AnimVariation' has a wrong offset!");
static_assert(offsetof(FAnimVariations, ChancePlayed) == 0x000058, "Member 'FAnimVariations::ChancePlayed' has a wrong offset!");

// ScriptStruct DuneSandbox.MiningYieldTierData
// 0x0058 (0x0058 - 0x0000)
struct FMiningYieldTierData final
{
public:
	TSoftObjectPtr<class UTexture2D>              m_Icon;                                            // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_Color;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_Text;                                            // 0x0040(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMiningYieldTierData) == 0x000008, "Wrong alignment on FMiningYieldTierData");
static_assert(sizeof(FMiningYieldTierData) == 0x000058, "Wrong size on FMiningYieldTierData");
static_assert(offsetof(FMiningYieldTierData, m_Icon) == 0x000000, "Member 'FMiningYieldTierData::m_Icon' has a wrong offset!");
static_assert(offsetof(FMiningYieldTierData, m_Color) == 0x000030, "Member 'FMiningYieldTierData::m_Color' has a wrong offset!");
static_assert(offsetof(FMiningYieldTierData, m_Text) == 0x000040, "Member 'FMiningYieldTierData::m_Text' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormSpawnSettings
// 0x0020 (0x0020 - 0x0000)
struct FSandwormSpawnSettings final
{
public:
	struct FEDuneMapId                            m_Map;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bSpawnOnlyThisWormOnThisMap;                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 m_SandwormIDs;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandwormSpawnSettings) == 0x000008, "Wrong alignment on FSandwormSpawnSettings");
static_assert(sizeof(FSandwormSpawnSettings) == 0x000020, "Wrong size on FSandwormSpawnSettings");
static_assert(offsetof(FSandwormSpawnSettings, m_Map) == 0x000000, "Member 'FSandwormSpawnSettings::m_Map' has a wrong offset!");
static_assert(offsetof(FSandwormSpawnSettings, m_bSpawnOnlyThisWormOnThisMap) == 0x000008, "Member 'FSandwormSpawnSettings::m_bSpawnOnlyThisWormOnThisMap' has a wrong offset!");
static_assert(offsetof(FSandwormSpawnSettings, m_SandwormIDs) == 0x000010, "Member 'FSandwormSpawnSettings::m_SandwormIDs' has a wrong offset!");

// ScriptStruct DuneSandbox.SharkwormRoamSettings
// 0x0024 (0x0024 - 0x0000)
struct FSharkwormRoamSettings final
{
public:
	float                                         m_MinimumCooldown;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaximumCooldown;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LogCooldown;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinimumDuration;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaximumDuration;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinimumThreatBlobDistance;                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ThreatBlobValueThreshold;                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SafezoneSearchDistance;                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SafezoneRoamingDistance;                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSharkwormRoamSettings) == 0x000004, "Wrong alignment on FSharkwormRoamSettings");
static_assert(sizeof(FSharkwormRoamSettings) == 0x000024, "Wrong size on FSharkwormRoamSettings");
static_assert(offsetof(FSharkwormRoamSettings, m_MinimumCooldown) == 0x000000, "Member 'FSharkwormRoamSettings::m_MinimumCooldown' has a wrong offset!");
static_assert(offsetof(FSharkwormRoamSettings, m_MaximumCooldown) == 0x000004, "Member 'FSharkwormRoamSettings::m_MaximumCooldown' has a wrong offset!");
static_assert(offsetof(FSharkwormRoamSettings, m_LogCooldown) == 0x000008, "Member 'FSharkwormRoamSettings::m_LogCooldown' has a wrong offset!");
static_assert(offsetof(FSharkwormRoamSettings, m_MinimumDuration) == 0x00000C, "Member 'FSharkwormRoamSettings::m_MinimumDuration' has a wrong offset!");
static_assert(offsetof(FSharkwormRoamSettings, m_MaximumDuration) == 0x000010, "Member 'FSharkwormRoamSettings::m_MaximumDuration' has a wrong offset!");
static_assert(offsetof(FSharkwormRoamSettings, m_MinimumThreatBlobDistance) == 0x000014, "Member 'FSharkwormRoamSettings::m_MinimumThreatBlobDistance' has a wrong offset!");
static_assert(offsetof(FSharkwormRoamSettings, m_ThreatBlobValueThreshold) == 0x000018, "Member 'FSharkwormRoamSettings::m_ThreatBlobValueThreshold' has a wrong offset!");
static_assert(offsetof(FSharkwormRoamSettings, m_SafezoneSearchDistance) == 0x00001C, "Member 'FSharkwormRoamSettings::m_SafezoneSearchDistance' has a wrong offset!");
static_assert(offsetof(FSharkwormRoamSettings, m_SafezoneRoamingDistance) == 0x000020, "Member 'FSharkwormRoamSettings::m_SafezoneRoamingDistance' has a wrong offset!");

// ScriptStruct DuneSandbox.ThreatSettings
// 0x0010 (0x0010 - 0x0000)
struct FThreatSettings final
{
public:
	float                                         m_TeleportThresholdBlobValue;                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HidingThresholdBlobValue;                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RoamingThresholdBlobValue;                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinThreatBlobValue;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatSettings) == 0x000004, "Wrong alignment on FThreatSettings");
static_assert(sizeof(FThreatSettings) == 0x000010, "Wrong size on FThreatSettings");
static_assert(offsetof(FThreatSettings, m_TeleportThresholdBlobValue) == 0x000000, "Member 'FThreatSettings::m_TeleportThresholdBlobValue' has a wrong offset!");
static_assert(offsetof(FThreatSettings, m_HidingThresholdBlobValue) == 0x000004, "Member 'FThreatSettings::m_HidingThresholdBlobValue' has a wrong offset!");
static_assert(offsetof(FThreatSettings, m_RoamingThresholdBlobValue) == 0x000008, "Member 'FThreatSettings::m_RoamingThresholdBlobValue' has a wrong offset!");
static_assert(offsetof(FThreatSettings, m_MinThreatBlobValue) == 0x00000C, "Member 'FThreatSettings::m_MinThreatBlobValue' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormBoneOverlapPrimitive
// 0x0030 (0x0030 - 0x0000)
struct FSandwormBoneOverlapPrimitive final
{
public:
	class FName                                   m_BoneName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESandwormBoneOvelapPrimitiveType              m_OverlapShape;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_BoneRadius;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CapsuleHalfHeight;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_BoxHalfExtent;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandwormBoneOverlapPrimitive) == 0x000008, "Wrong alignment on FSandwormBoneOverlapPrimitive");
static_assert(sizeof(FSandwormBoneOverlapPrimitive) == 0x000030, "Wrong size on FSandwormBoneOverlapPrimitive");
static_assert(offsetof(FSandwormBoneOverlapPrimitive, m_BoneName) == 0x000000, "Member 'FSandwormBoneOverlapPrimitive::m_BoneName' has a wrong offset!");
static_assert(offsetof(FSandwormBoneOverlapPrimitive, m_OverlapShape) == 0x000008, "Member 'FSandwormBoneOverlapPrimitive::m_OverlapShape' has a wrong offset!");
static_assert(offsetof(FSandwormBoneOverlapPrimitive, m_BoneRadius) == 0x00000C, "Member 'FSandwormBoneOverlapPrimitive::m_BoneRadius' has a wrong offset!");
static_assert(offsetof(FSandwormBoneOverlapPrimitive, m_CapsuleHalfHeight) == 0x000010, "Member 'FSandwormBoneOverlapPrimitive::m_CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FSandwormBoneOverlapPrimitive, m_BoxHalfExtent) == 0x000018, "Member 'FSandwormBoneOverlapPrimitive::m_BoxHalfExtent' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormWeightedAnimation
// 0x0040 (0x0040 - 0x0000)
struct FSandwormWeightedAnimation final
{
public:
	TSoftObjectPtr<class UAnimMontage>            m_Animation;                                       // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsRootLocked;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_AnimationWeight;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EnragedAnimationWeight;                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandwormWeightedAnimation) == 0x000008, "Wrong alignment on FSandwormWeightedAnimation");
static_assert(sizeof(FSandwormWeightedAnimation) == 0x000040, "Wrong size on FSandwormWeightedAnimation");
static_assert(offsetof(FSandwormWeightedAnimation, m_Animation) == 0x000000, "Member 'FSandwormWeightedAnimation::m_Animation' has a wrong offset!");
static_assert(offsetof(FSandwormWeightedAnimation, m_bIsRootLocked) == 0x000030, "Member 'FSandwormWeightedAnimation::m_bIsRootLocked' has a wrong offset!");
static_assert(offsetof(FSandwormWeightedAnimation, m_AnimationWeight) == 0x000034, "Member 'FSandwormWeightedAnimation::m_AnimationWeight' has a wrong offset!");
static_assert(offsetof(FSandwormWeightedAnimation, m_EnragedAnimationWeight) == 0x000038, "Member 'FSandwormWeightedAnimation::m_EnragedAnimationWeight' has a wrong offset!");

// ScriptStruct DuneSandbox.TeleportLookupSettings
// 0x0008 (0x0008 - 0x0000)
struct FTeleportLookupSettings final
{
public:
	float                                         m_LookupDistance;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LocationChangeAngle;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeleportLookupSettings) == 0x000004, "Wrong alignment on FTeleportLookupSettings");
static_assert(sizeof(FTeleportLookupSettings) == 0x000008, "Wrong size on FTeleportLookupSettings");
static_assert(offsetof(FTeleportLookupSettings, m_LookupDistance) == 0x000000, "Member 'FTeleportLookupSettings::m_LookupDistance' has a wrong offset!");
static_assert(offsetof(FTeleportLookupSettings, m_LocationChangeAngle) == 0x000004, "Member 'FTeleportLookupSettings::m_LocationChangeAngle' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormVerticalAttackAnimationSettings
// 0x0060 (0x0060 - 0x0000)
struct FSandwormVerticalAttackAnimationSettings final
{
public:
	TArray<struct FSandwormWeightedAnimation>     m_VerticalAttackAnimations;                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bIsCloseRangeVerticalAttackEnabled;              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_MissedAttacksThreshold;                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_QuicksandVolumeClass;                            // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VerticalAttackDesiredElevation;                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VerticalAttackTeleportElevation;                 // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VerticalAttackAnimationMaximumTargetElevation;   // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseCloseRangeMovementPrediction;                // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CloseRangeMovementPredictionTimeframe;           // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandwormVerticalAttackAnimationSettings) == 0x000008, "Wrong alignment on FSandwormVerticalAttackAnimationSettings");
static_assert(sizeof(FSandwormVerticalAttackAnimationSettings) == 0x000060, "Wrong size on FSandwormVerticalAttackAnimationSettings");
static_assert(offsetof(FSandwormVerticalAttackAnimationSettings, m_VerticalAttackAnimations) == 0x000000, "Member 'FSandwormVerticalAttackAnimationSettings::m_VerticalAttackAnimations' has a wrong offset!");
static_assert(offsetof(FSandwormVerticalAttackAnimationSettings, m_bIsCloseRangeVerticalAttackEnabled) == 0x000010, "Member 'FSandwormVerticalAttackAnimationSettings::m_bIsCloseRangeVerticalAttackEnabled' has a wrong offset!");
static_assert(offsetof(FSandwormVerticalAttackAnimationSettings, m_MissedAttacksThreshold) == 0x000014, "Member 'FSandwormVerticalAttackAnimationSettings::m_MissedAttacksThreshold' has a wrong offset!");
static_assert(offsetof(FSandwormVerticalAttackAnimationSettings, m_QuicksandVolumeClass) == 0x000018, "Member 'FSandwormVerticalAttackAnimationSettings::m_QuicksandVolumeClass' has a wrong offset!");
static_assert(offsetof(FSandwormVerticalAttackAnimationSettings, m_VerticalAttackDesiredElevation) == 0x000048, "Member 'FSandwormVerticalAttackAnimationSettings::m_VerticalAttackDesiredElevation' has a wrong offset!");
static_assert(offsetof(FSandwormVerticalAttackAnimationSettings, m_VerticalAttackTeleportElevation) == 0x00004C, "Member 'FSandwormVerticalAttackAnimationSettings::m_VerticalAttackTeleportElevation' has a wrong offset!");
static_assert(offsetof(FSandwormVerticalAttackAnimationSettings, m_VerticalAttackAnimationMaximumTargetElevation) == 0x000050, "Member 'FSandwormVerticalAttackAnimationSettings::m_VerticalAttackAnimationMaximumTargetElevation' has a wrong offset!");
static_assert(offsetof(FSandwormVerticalAttackAnimationSettings, m_bUseCloseRangeMovementPrediction) == 0x000054, "Member 'FSandwormVerticalAttackAnimationSettings::m_bUseCloseRangeMovementPrediction' has a wrong offset!");
static_assert(offsetof(FSandwormVerticalAttackAnimationSettings, m_CloseRangeMovementPredictionTimeframe) == 0x000058, "Member 'FSandwormVerticalAttackAnimationSettings::m_CloseRangeMovementPredictionTimeframe' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormDangerZoneSettings
// 0x00C0 (0x00C0 - 0x0000)
struct FSandwormDangerZoneSettings final
{
public:
	class FName                                   m_DangerZoneType;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 m_DebugDrawColor;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSandwormBoneOverlapPrimitive>  m_BoneOverlapPrimitives;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_ForwardOffset;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HeightOffset;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsDssOffsetEnabled;                             // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsEnabled;                                      // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDealsDamage;                                    // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Damage;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDealsDamageToVehicles;                          // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVehicleModel, float>                    m_DamageToVehicles;                                // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage;                                     // 0x0088(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          m_bIsDestroyingVolume;                             // 0x0094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCauseSlow;                                      // 0x0095(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCauseKnockback;                                 // 0x0096(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_97[0x1];                                       // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_SandwormDirectionForceMagnitude;                 // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxRepulsionForceMagnitude;                      // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinRepulsionForceMagnitude;                      // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VehicleKnockbackScale;                           // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ShouldRagdollDuringKnockback;                    // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_KnockbackDuration;                               // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_KnockbackCooldoown;                              // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAppliesSandwormDeathCamSubstate;                // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_SandwormDeathSubstateDurationTimeInSeconds;      // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandwormDangerZoneSettings) == 0x000008, "Wrong alignment on FSandwormDangerZoneSettings");
static_assert(sizeof(FSandwormDangerZoneSettings) == 0x0000C0, "Wrong size on FSandwormDangerZoneSettings");
static_assert(offsetof(FSandwormDangerZoneSettings, m_DangerZoneType) == 0x000000, "Member 'FSandwormDangerZoneSettings::m_DangerZoneType' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_DebugDrawColor) == 0x000008, "Member 'FSandwormDangerZoneSettings::m_DebugDrawColor' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_BoneOverlapPrimitives) == 0x000010, "Member 'FSandwormDangerZoneSettings::m_BoneOverlapPrimitives' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_ForwardOffset) == 0x000020, "Member 'FSandwormDangerZoneSettings::m_ForwardOffset' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_HeightOffset) == 0x000024, "Member 'FSandwormDangerZoneSettings::m_HeightOffset' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_bIsDssOffsetEnabled) == 0x000028, "Member 'FSandwormDangerZoneSettings::m_bIsDssOffsetEnabled' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_bIsEnabled) == 0x000029, "Member 'FSandwormDangerZoneSettings::m_bIsEnabled' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_bDealsDamage) == 0x00002A, "Member 'FSandwormDangerZoneSettings::m_bDealsDamage' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_Damage) == 0x00002C, "Member 'FSandwormDangerZoneSettings::m_Damage' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_bDealsDamageToVehicles) == 0x000030, "Member 'FSandwormDangerZoneSettings::m_bDealsDamageToVehicles' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_DamageToVehicles) == 0x000038, "Member 'FSandwormDangerZoneSettings::m_DamageToVehicles' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_PoiseDamage) == 0x000088, "Member 'FSandwormDangerZoneSettings::m_PoiseDamage' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_bIsDestroyingVolume) == 0x000094, "Member 'FSandwormDangerZoneSettings::m_bIsDestroyingVolume' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_bCauseSlow) == 0x000095, "Member 'FSandwormDangerZoneSettings::m_bCauseSlow' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_bCauseKnockback) == 0x000096, "Member 'FSandwormDangerZoneSettings::m_bCauseKnockback' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_SandwormDirectionForceMagnitude) == 0x000098, "Member 'FSandwormDangerZoneSettings::m_SandwormDirectionForceMagnitude' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_MaxRepulsionForceMagnitude) == 0x00009C, "Member 'FSandwormDangerZoneSettings::m_MaxRepulsionForceMagnitude' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_MinRepulsionForceMagnitude) == 0x0000A0, "Member 'FSandwormDangerZoneSettings::m_MinRepulsionForceMagnitude' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_VehicleKnockbackScale) == 0x0000A4, "Member 'FSandwormDangerZoneSettings::m_VehicleKnockbackScale' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_ShouldRagdollDuringKnockback) == 0x0000A8, "Member 'FSandwormDangerZoneSettings::m_ShouldRagdollDuringKnockback' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_KnockbackDuration) == 0x0000AC, "Member 'FSandwormDangerZoneSettings::m_KnockbackDuration' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_KnockbackCooldoown) == 0x0000B0, "Member 'FSandwormDangerZoneSettings::m_KnockbackCooldoown' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_bAppliesSandwormDeathCamSubstate) == 0x0000B4, "Member 'FSandwormDangerZoneSettings::m_bAppliesSandwormDeathCamSubstate' has a wrong offset!");
static_assert(offsetof(FSandwormDangerZoneSettings, m_SandwormDeathSubstateDurationTimeInSeconds) == 0x0000B8, "Member 'FSandwormDangerZoneSettings::m_SandwormDeathSubstateDurationTimeInSeconds' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormAttackAnimationSettings
// 0x0070 (0x0070 - 0x0000)
struct FSandwormAttackAnimationSettings final
{
public:
	float                                         m_DesiredElevation;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinimumRequiredDistance;                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaximumRequiredDistance;                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTeleportLookupSettings>        m_TeleportLookupSettings;                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_MaximumTargetElevation;                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseCloseRangeMovementPrediction;                // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CloseRangeMovementPredictionTimeframe;           // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSandwormWeightedAnimation             m_WeightedAttackAnimation;                         // 0x0030(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandwormAttackAnimationSettings) == 0x000008, "Wrong alignment on FSandwormAttackAnimationSettings");
static_assert(sizeof(FSandwormAttackAnimationSettings) == 0x000070, "Wrong size on FSandwormAttackAnimationSettings");
static_assert(offsetof(FSandwormAttackAnimationSettings, m_DesiredElevation) == 0x000000, "Member 'FSandwormAttackAnimationSettings::m_DesiredElevation' has a wrong offset!");
static_assert(offsetof(FSandwormAttackAnimationSettings, m_MinimumRequiredDistance) == 0x000004, "Member 'FSandwormAttackAnimationSettings::m_MinimumRequiredDistance' has a wrong offset!");
static_assert(offsetof(FSandwormAttackAnimationSettings, m_MaximumRequiredDistance) == 0x000008, "Member 'FSandwormAttackAnimationSettings::m_MaximumRequiredDistance' has a wrong offset!");
static_assert(offsetof(FSandwormAttackAnimationSettings, m_TeleportLookupSettings) == 0x000010, "Member 'FSandwormAttackAnimationSettings::m_TeleportLookupSettings' has a wrong offset!");
static_assert(offsetof(FSandwormAttackAnimationSettings, m_MaximumTargetElevation) == 0x000020, "Member 'FSandwormAttackAnimationSettings::m_MaximumTargetElevation' has a wrong offset!");
static_assert(offsetof(FSandwormAttackAnimationSettings, m_bUseCloseRangeMovementPrediction) == 0x000024, "Member 'FSandwormAttackAnimationSettings::m_bUseCloseRangeMovementPrediction' has a wrong offset!");
static_assert(offsetof(FSandwormAttackAnimationSettings, m_CloseRangeMovementPredictionTimeframe) == 0x000028, "Member 'FSandwormAttackAnimationSettings::m_CloseRangeMovementPredictionTimeframe' has a wrong offset!");
static_assert(offsetof(FSandwormAttackAnimationSettings, m_WeightedAttackAnimation) == 0x000030, "Member 'FSandwormAttackAnimationSettings::m_WeightedAttackAnimation' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormAttackDifficultyGroupSettings
// 0x0020 (0x0020 - 0x0000)
struct FSandwormAttackDifficultyGroupSettings final
{
public:
	float                                         m_DifficultyGroupWeight;                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EnragedDifficultyGroupWeight;                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NumberOfAttacksThreshold;                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSandwormAttackAnimationSettings> m_AttackAnimations;                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandwormAttackDifficultyGroupSettings) == 0x000008, "Wrong alignment on FSandwormAttackDifficultyGroupSettings");
static_assert(sizeof(FSandwormAttackDifficultyGroupSettings) == 0x000020, "Wrong size on FSandwormAttackDifficultyGroupSettings");
static_assert(offsetof(FSandwormAttackDifficultyGroupSettings, m_DifficultyGroupWeight) == 0x000000, "Member 'FSandwormAttackDifficultyGroupSettings::m_DifficultyGroupWeight' has a wrong offset!");
static_assert(offsetof(FSandwormAttackDifficultyGroupSettings, m_EnragedDifficultyGroupWeight) == 0x000004, "Member 'FSandwormAttackDifficultyGroupSettings::m_EnragedDifficultyGroupWeight' has a wrong offset!");
static_assert(offsetof(FSandwormAttackDifficultyGroupSettings, m_NumberOfAttacksThreshold) == 0x000008, "Member 'FSandwormAttackDifficultyGroupSettings::m_NumberOfAttacksThreshold' has a wrong offset!");
static_assert(offsetof(FSandwormAttackDifficultyGroupSettings, m_AttackAnimations) == 0x000010, "Member 'FSandwormAttackDifficultyGroupSettings::m_AttackAnimations' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormConfigurationDataRowBase
// 0x0260 (0x0270 - 0x0010)
struct FSandwormConfigurationDataRowBase final : public FTableRowBase
{
public:
	class FString                                 m_SandwormName;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_LocalizedSandwormName;                           // 0x0020(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSandwormSpawnSettings>         m_SandwormIDsPerMap;                               // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_SandwormLength;                                  // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LoopingAnimationCooldown;                        // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RoamingDesiredElevation;                         // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HidingDepth;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSharkwormRoamSettings                 m_SharkwormSettings;                               // 0x0058(0x0024)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   m_RoamingForceFeedbackEffect;                      // 0x0080(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackAttenuation*              m_RoamingForceFeedbackAttenuation;                 // 0x0088(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MovementPredictionUpdateInterval;                // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsLongRangeMovementPredictionActive;            // 0x0094(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_MovementPredictionChangeOfDirectionLimit;        // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MovementPredictionChangeAngle;                   // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinimumLongRangeMovementPredictionDistance;      // 0x00A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaximumLongRangeMovementPredictionTimeframe;     // 0x00A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CloseRangeMovementPredictionRadius;              // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinimumCloseRangeMovementPredictionTimeframe;    // 0x00AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FThreatSettings                        m_ThreatSettings;                                  // 0x00B0(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSandwormWeightedAnimation>     m_BreachAnimations;                                // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_BreachDesiredElevation;                          // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BreachTeleportElevation;                         // 0x00D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTeleportLookupSettings>        m_BreachLookupSettings;                            // 0x00D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_BreachSafezoneDetectionDistance;                 // 0x00E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BreachAnimationCooldown;                         // 0x00EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RequiredDistanceFromPreviousBreachedBlob;        // 0x00F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BreachSkipChance;                                // 0x00F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAreIdleAnimationsEnabled;                       // 0x00F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSandwormWeightedAnimation>     m_IdleAnimations;                                  // 0x0100(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_MinSecondsBetweenIdleAnimations;                 // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxSecondsBetweenIdleAnimations;                 // 0x0114(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IdleAnimationDesiredElevation;                   // 0x0118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IdleAnimationElevationLeeway;                    // 0x011C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IdleAnimationRequiredAngle;                      // 0x0120(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IdleAnimationSafezoneBlockingDistance;           // 0x0124(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AttackAnimationCooldown;                         // 0x0128(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AttackAnimationVelocityZModifier;                // 0x012C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ObserveChance;                                   // 0x0130(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESandwormAttackDifficultyGroup                m_NearSafezoneDifficultyGroup;                     // 0x0134(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_NearSafezoneAnimationIndex;                      // 0x0138(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSandwormVerticalAttackAnimationSettings m_VerticalAttackSettings;                        // 0x0140(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         m_MinimumAttacksBeforeEnrage;                      // 0x01A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaximumAttacksBeforeEnrage;                      // 0x01A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EnragedMovementSpeedModifier;                    // 0x01A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HidingBeforeTeleportDuration;                    // 0x01AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AttackSpeedWhenHiding;                           // 0x01B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AttackSpeedWhenHidingEnraged;                    // 0x01B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinHidingBeforeAttackDelay;                      // 0x01B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxHidingBeforeAttackDelay;                      // 0x01BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NumberOfTeleportAttempts;                        // 0x01C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MinimumAttacksBeforeChangingTarget;              // 0x01C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaximumAttacksBeforeChangingTarget;              // 0x01C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MinimumAttacksBeforeDroppingTarget;              // 0x01CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaximumAttacksBeforeDroppingTarget;              // 0x01D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IgnoreListUpdateInterval;                        // 0x01D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IgnoreDuration;                                  // 0x01D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IgnoreRadius;                                    // 0x01DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SandwormMaxDistanceToFindCandidates;             // 0x01E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_CollisionElevationCurve;                         // 0x01E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DisplacementMapMaxHeight;                        // 0x01F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSandwormBoneOverlapPrimitive>  m_SandwormDebugOutlineShapes;                      // 0x01F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_UpdateOutlineAndDangerZoneDebugTimeSeconds;      // 0x0208(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSandwormDangerZoneSettings>    m_SandwormDangerZoneSettings;                      // 0x0210(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<ESandwormAttackDifficultyGroup, struct FSandwormAttackDifficultyGroupSettings> m_SandwormAttackDifficultyGroupSettings; // 0x0220(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSandwormConfigurationDataRowBase) == 0x000008, "Wrong alignment on FSandwormConfigurationDataRowBase");
static_assert(sizeof(FSandwormConfigurationDataRowBase) == 0x000270, "Wrong size on FSandwormConfigurationDataRowBase");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_SandwormName) == 0x000010, "Member 'FSandwormConfigurationDataRowBase::m_SandwormName' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_LocalizedSandwormName) == 0x000020, "Member 'FSandwormConfigurationDataRowBase::m_LocalizedSandwormName' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_SandwormIDsPerMap) == 0x000038, "Member 'FSandwormConfigurationDataRowBase::m_SandwormIDsPerMap' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_SandwormLength) == 0x000048, "Member 'FSandwormConfigurationDataRowBase::m_SandwormLength' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_LoopingAnimationCooldown) == 0x00004C, "Member 'FSandwormConfigurationDataRowBase::m_LoopingAnimationCooldown' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_RoamingDesiredElevation) == 0x000050, "Member 'FSandwormConfigurationDataRowBase::m_RoamingDesiredElevation' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_HidingDepth) == 0x000054, "Member 'FSandwormConfigurationDataRowBase::m_HidingDepth' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_SharkwormSettings) == 0x000058, "Member 'FSandwormConfigurationDataRowBase::m_SharkwormSettings' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_RoamingForceFeedbackEffect) == 0x000080, "Member 'FSandwormConfigurationDataRowBase::m_RoamingForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_RoamingForceFeedbackAttenuation) == 0x000088, "Member 'FSandwormConfigurationDataRowBase::m_RoamingForceFeedbackAttenuation' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MovementPredictionUpdateInterval) == 0x000090, "Member 'FSandwormConfigurationDataRowBase::m_MovementPredictionUpdateInterval' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_bIsLongRangeMovementPredictionActive) == 0x000094, "Member 'FSandwormConfigurationDataRowBase::m_bIsLongRangeMovementPredictionActive' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MovementPredictionChangeOfDirectionLimit) == 0x000098, "Member 'FSandwormConfigurationDataRowBase::m_MovementPredictionChangeOfDirectionLimit' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MovementPredictionChangeAngle) == 0x00009C, "Member 'FSandwormConfigurationDataRowBase::m_MovementPredictionChangeAngle' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MinimumLongRangeMovementPredictionDistance) == 0x0000A0, "Member 'FSandwormConfigurationDataRowBase::m_MinimumLongRangeMovementPredictionDistance' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MaximumLongRangeMovementPredictionTimeframe) == 0x0000A4, "Member 'FSandwormConfigurationDataRowBase::m_MaximumLongRangeMovementPredictionTimeframe' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_CloseRangeMovementPredictionRadius) == 0x0000A8, "Member 'FSandwormConfigurationDataRowBase::m_CloseRangeMovementPredictionRadius' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MinimumCloseRangeMovementPredictionTimeframe) == 0x0000AC, "Member 'FSandwormConfigurationDataRowBase::m_MinimumCloseRangeMovementPredictionTimeframe' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_ThreatSettings) == 0x0000B0, "Member 'FSandwormConfigurationDataRowBase::m_ThreatSettings' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_BreachAnimations) == 0x0000C0, "Member 'FSandwormConfigurationDataRowBase::m_BreachAnimations' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_BreachDesiredElevation) == 0x0000D0, "Member 'FSandwormConfigurationDataRowBase::m_BreachDesiredElevation' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_BreachTeleportElevation) == 0x0000D4, "Member 'FSandwormConfigurationDataRowBase::m_BreachTeleportElevation' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_BreachLookupSettings) == 0x0000D8, "Member 'FSandwormConfigurationDataRowBase::m_BreachLookupSettings' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_BreachSafezoneDetectionDistance) == 0x0000E8, "Member 'FSandwormConfigurationDataRowBase::m_BreachSafezoneDetectionDistance' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_BreachAnimationCooldown) == 0x0000EC, "Member 'FSandwormConfigurationDataRowBase::m_BreachAnimationCooldown' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_RequiredDistanceFromPreviousBreachedBlob) == 0x0000F0, "Member 'FSandwormConfigurationDataRowBase::m_RequiredDistanceFromPreviousBreachedBlob' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_BreachSkipChance) == 0x0000F4, "Member 'FSandwormConfigurationDataRowBase::m_BreachSkipChance' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_bAreIdleAnimationsEnabled) == 0x0000F8, "Member 'FSandwormConfigurationDataRowBase::m_bAreIdleAnimationsEnabled' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_IdleAnimations) == 0x000100, "Member 'FSandwormConfigurationDataRowBase::m_IdleAnimations' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MinSecondsBetweenIdleAnimations) == 0x000110, "Member 'FSandwormConfigurationDataRowBase::m_MinSecondsBetweenIdleAnimations' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MaxSecondsBetweenIdleAnimations) == 0x000114, "Member 'FSandwormConfigurationDataRowBase::m_MaxSecondsBetweenIdleAnimations' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_IdleAnimationDesiredElevation) == 0x000118, "Member 'FSandwormConfigurationDataRowBase::m_IdleAnimationDesiredElevation' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_IdleAnimationElevationLeeway) == 0x00011C, "Member 'FSandwormConfigurationDataRowBase::m_IdleAnimationElevationLeeway' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_IdleAnimationRequiredAngle) == 0x000120, "Member 'FSandwormConfigurationDataRowBase::m_IdleAnimationRequiredAngle' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_IdleAnimationSafezoneBlockingDistance) == 0x000124, "Member 'FSandwormConfigurationDataRowBase::m_IdleAnimationSafezoneBlockingDistance' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_AttackAnimationCooldown) == 0x000128, "Member 'FSandwormConfigurationDataRowBase::m_AttackAnimationCooldown' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_AttackAnimationVelocityZModifier) == 0x00012C, "Member 'FSandwormConfigurationDataRowBase::m_AttackAnimationVelocityZModifier' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_ObserveChance) == 0x000130, "Member 'FSandwormConfigurationDataRowBase::m_ObserveChance' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_NearSafezoneDifficultyGroup) == 0x000134, "Member 'FSandwormConfigurationDataRowBase::m_NearSafezoneDifficultyGroup' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_NearSafezoneAnimationIndex) == 0x000138, "Member 'FSandwormConfigurationDataRowBase::m_NearSafezoneAnimationIndex' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_VerticalAttackSettings) == 0x000140, "Member 'FSandwormConfigurationDataRowBase::m_VerticalAttackSettings' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MinimumAttacksBeforeEnrage) == 0x0001A0, "Member 'FSandwormConfigurationDataRowBase::m_MinimumAttacksBeforeEnrage' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MaximumAttacksBeforeEnrage) == 0x0001A4, "Member 'FSandwormConfigurationDataRowBase::m_MaximumAttacksBeforeEnrage' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_EnragedMovementSpeedModifier) == 0x0001A8, "Member 'FSandwormConfigurationDataRowBase::m_EnragedMovementSpeedModifier' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_HidingBeforeTeleportDuration) == 0x0001AC, "Member 'FSandwormConfigurationDataRowBase::m_HidingBeforeTeleportDuration' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_AttackSpeedWhenHiding) == 0x0001B0, "Member 'FSandwormConfigurationDataRowBase::m_AttackSpeedWhenHiding' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_AttackSpeedWhenHidingEnraged) == 0x0001B4, "Member 'FSandwormConfigurationDataRowBase::m_AttackSpeedWhenHidingEnraged' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MinHidingBeforeAttackDelay) == 0x0001B8, "Member 'FSandwormConfigurationDataRowBase::m_MinHidingBeforeAttackDelay' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MaxHidingBeforeAttackDelay) == 0x0001BC, "Member 'FSandwormConfigurationDataRowBase::m_MaxHidingBeforeAttackDelay' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_NumberOfTeleportAttempts) == 0x0001C0, "Member 'FSandwormConfigurationDataRowBase::m_NumberOfTeleportAttempts' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MinimumAttacksBeforeChangingTarget) == 0x0001C4, "Member 'FSandwormConfigurationDataRowBase::m_MinimumAttacksBeforeChangingTarget' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MaximumAttacksBeforeChangingTarget) == 0x0001C8, "Member 'FSandwormConfigurationDataRowBase::m_MaximumAttacksBeforeChangingTarget' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MinimumAttacksBeforeDroppingTarget) == 0x0001CC, "Member 'FSandwormConfigurationDataRowBase::m_MinimumAttacksBeforeDroppingTarget' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_MaximumAttacksBeforeDroppingTarget) == 0x0001D0, "Member 'FSandwormConfigurationDataRowBase::m_MaximumAttacksBeforeDroppingTarget' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_IgnoreListUpdateInterval) == 0x0001D4, "Member 'FSandwormConfigurationDataRowBase::m_IgnoreListUpdateInterval' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_IgnoreDuration) == 0x0001D8, "Member 'FSandwormConfigurationDataRowBase::m_IgnoreDuration' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_IgnoreRadius) == 0x0001DC, "Member 'FSandwormConfigurationDataRowBase::m_IgnoreRadius' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_SandwormMaxDistanceToFindCandidates) == 0x0001E0, "Member 'FSandwormConfigurationDataRowBase::m_SandwormMaxDistanceToFindCandidates' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_CollisionElevationCurve) == 0x0001E8, "Member 'FSandwormConfigurationDataRowBase::m_CollisionElevationCurve' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_DisplacementMapMaxHeight) == 0x0001F0, "Member 'FSandwormConfigurationDataRowBase::m_DisplacementMapMaxHeight' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_SandwormDebugOutlineShapes) == 0x0001F8, "Member 'FSandwormConfigurationDataRowBase::m_SandwormDebugOutlineShapes' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_UpdateOutlineAndDangerZoneDebugTimeSeconds) == 0x000208, "Member 'FSandwormConfigurationDataRowBase::m_UpdateOutlineAndDangerZoneDebugTimeSeconds' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_SandwormDangerZoneSettings) == 0x000210, "Member 'FSandwormConfigurationDataRowBase::m_SandwormDangerZoneSettings' has a wrong offset!");
static_assert(offsetof(FSandwormConfigurationDataRowBase, m_SandwormAttackDifficultyGroupSettings) == 0x000220, "Member 'FSandwormConfigurationDataRowBase::m_SandwormAttackDifficultyGroupSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimVariationsRowData
// 0x0038 (0x0038 - 0x0000)
struct FAnimVariationsRowData final
{
public:
	TSoftObjectPtr<class UAnimSequence>           AnimVariation;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChancePlayed;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimVariationsRowData) == 0x000008, "Wrong alignment on FAnimVariationsRowData");
static_assert(sizeof(FAnimVariationsRowData) == 0x000038, "Wrong size on FAnimVariationsRowData");
static_assert(offsetof(FAnimVariationsRowData, AnimVariation) == 0x000000, "Member 'FAnimVariationsRowData::AnimVariation' has a wrong offset!");
static_assert(offsetof(FAnimVariationsRowData, ChancePlayed) == 0x000030, "Member 'FAnimVariationsRowData::ChancePlayed' has a wrong offset!");

// ScriptStruct DuneSandbox.DirectionRange
// 0x0014 (0x0014 - 0x0000)
struct FDirectionRange final
{
public:
	EDirectionalMovement                          m_DirectionalMovement;                             // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_MinRange;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxRange;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinRangeOffset;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxRangeOffset;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectionRange) == 0x000004, "Wrong alignment on FDirectionRange");
static_assert(sizeof(FDirectionRange) == 0x000014, "Wrong size on FDirectionRange");
static_assert(offsetof(FDirectionRange, m_DirectionalMovement) == 0x000000, "Member 'FDirectionRange::m_DirectionalMovement' has a wrong offset!");
static_assert(offsetof(FDirectionRange, m_MinRange) == 0x000004, "Member 'FDirectionRange::m_MinRange' has a wrong offset!");
static_assert(offsetof(FDirectionRange, m_MaxRange) == 0x000008, "Member 'FDirectionRange::m_MaxRange' has a wrong offset!");
static_assert(offsetof(FDirectionRange, m_MinRangeOffset) == 0x00000C, "Member 'FDirectionRange::m_MinRangeOffset' has a wrong offset!");
static_assert(offsetof(FDirectionRange, m_MaxRangeOffset) == 0x000010, "Member 'FDirectionRange::m_MaxRangeOffset' has a wrong offset!");

// ScriptStruct DuneSandbox.HitBoneInfo
// 0x0020 (0x0020 - 0x0000)
struct FHitBoneInfo final
{
public:
	struct FVector                                ImpactVector;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBone;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitBoneInfo) == 0x000008, "Wrong alignment on FHitBoneInfo");
static_assert(sizeof(FHitBoneInfo) == 0x000020, "Wrong size on FHitBoneInfo");
static_assert(offsetof(FHitBoneInfo, ImpactVector) == 0x000000, "Member 'FHitBoneInfo::ImpactVector' has a wrong offset!");
static_assert(offsetof(FHitBoneInfo, HitBone) == 0x000018, "Member 'FHitBoneInfo::HitBone' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimModeRowBase
// 0x0070 (0x0080 - 0x0010)
struct FAnimModeRowBase final : public FTableRowBase
{
public:
	float                                         BlendSpeed;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAnimInstance>              LinkedAnimLayer;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           StandingToCrouchTransition;                        // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           CrouchToStandingTransition;                        // 0x0050(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimModeRowBase) == 0x000008, "Wrong alignment on FAnimModeRowBase");
static_assert(sizeof(FAnimModeRowBase) == 0x000080, "Wrong size on FAnimModeRowBase");
static_assert(offsetof(FAnimModeRowBase, BlendSpeed) == 0x000010, "Member 'FAnimModeRowBase::BlendSpeed' has a wrong offset!");
static_assert(offsetof(FAnimModeRowBase, LinkedAnimLayer) == 0x000018, "Member 'FAnimModeRowBase::LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(FAnimModeRowBase, StandingToCrouchTransition) == 0x000020, "Member 'FAnimModeRowBase::StandingToCrouchTransition' has a wrong offset!");
static_assert(offsetof(FAnimModeRowBase, CrouchToStandingTransition) == 0x000050, "Member 'FAnimModeRowBase::CrouchToStandingTransition' has a wrong offset!");

// ScriptStruct DuneSandbox.HazardZoneStatusEffect
// 0x0030 (0x0030 - 0x0000)
struct FHazardZoneStatusEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            m_EffectToApply;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NumEffectStacks;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneDamageType>            m_DamageTypeClass;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DamageAmount;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage;                                     // 0x001C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          m_bApplyOnInitialOverlap;                          // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHazardZoneStatusEffect) == 0x000008, "Wrong alignment on FHazardZoneStatusEffect");
static_assert(sizeof(FHazardZoneStatusEffect) == 0x000030, "Wrong size on FHazardZoneStatusEffect");
static_assert(offsetof(FHazardZoneStatusEffect, m_EffectToApply) == 0x000000, "Member 'FHazardZoneStatusEffect::m_EffectToApply' has a wrong offset!");
static_assert(offsetof(FHazardZoneStatusEffect, m_NumEffectStacks) == 0x000008, "Member 'FHazardZoneStatusEffect::m_NumEffectStacks' has a wrong offset!");
static_assert(offsetof(FHazardZoneStatusEffect, m_DamageTypeClass) == 0x000010, "Member 'FHazardZoneStatusEffect::m_DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FHazardZoneStatusEffect, m_DamageAmount) == 0x000018, "Member 'FHazardZoneStatusEffect::m_DamageAmount' has a wrong offset!");
static_assert(offsetof(FHazardZoneStatusEffect, m_PoiseDamage) == 0x00001C, "Member 'FHazardZoneStatusEffect::m_PoiseDamage' has a wrong offset!");
static_assert(offsetof(FHazardZoneStatusEffect, m_bApplyOnInitialOverlap) == 0x000028, "Member 'FHazardZoneStatusEffect::m_bApplyOnInitialOverlap' has a wrong offset!");

// ScriptStruct DuneSandbox.MeleeTargetTraceParams
// 0x0080 (0x0080 - 0x0000)
struct FMeleeTargetTraceParams final
{
public:
	struct FVector                                TraceAreaSize;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TraceOffsetTransform;                              // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeTargetTraceParams) == 0x000010, "Wrong alignment on FMeleeTargetTraceParams");
static_assert(sizeof(FMeleeTargetTraceParams) == 0x000080, "Wrong size on FMeleeTargetTraceParams");
static_assert(offsetof(FMeleeTargetTraceParams, TraceAreaSize) == 0x000000, "Member 'FMeleeTargetTraceParams::TraceAreaSize' has a wrong offset!");
static_assert(offsetof(FMeleeTargetTraceParams, TraceOffsetTransform) == 0x000020, "Member 'FMeleeTargetTraceParams::TraceOffsetTransform' has a wrong offset!");

// ScriptStruct DuneSandbox.ArmorItemStatsComponent_BlueprintWrapper
// 0x00F8 (0x00F8 - 0x0000)
struct alignas(0x08) FArmorItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArmorItemStats                        ArmorItemStats;                                    // 0x00B0(0x0048)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArmorItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FArmorItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FArmorItemStatsComponent_BlueprintWrapper) == 0x0000F8, "Wrong size on FArmorItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FArmorItemStatsComponent_BlueprintWrapper, ArmorItemStats) == 0x0000B0, "Member 'FArmorItemStatsComponent_BlueprintWrapper::ArmorItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.ETechTreeCategoryId
// 0x0000 (0x0008 - 0x0008)
struct FETechTreeCategoryId final : public FStringEnumValue
{
};
static_assert(alignof(FETechTreeCategoryId) == 0x000004, "Wrong alignment on FETechTreeCategoryId");
static_assert(sizeof(FETechTreeCategoryId) == 0x000008, "Wrong size on FETechTreeCategoryId");

// ScriptStruct DuneSandbox.DrinkStats
// 0x0004 (0x0004 - 0x0000)
struct FDrinkStats final
{
public:
	int32                                         DrinkAmount;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDrinkStats) == 0x000004, "Wrong alignment on FDrinkStats");
static_assert(sizeof(FDrinkStats) == 0x000004, "Wrong size on FDrinkStats");
static_assert(offsetof(FDrinkStats, DrinkAmount) == 0x000000, "Member 'FDrinkStats::DrinkAmount' has a wrong offset!");

// ScriptStruct DuneSandbox.EdibleItemTableRow
// 0x0008 (0x0018 - 0x0010)
struct FEdibleItemTableRow final : public FTableRowBase
{
public:
	struct FDrinkStats                            DrinkStats;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEdibleItemTableRow) == 0x000008, "Wrong alignment on FEdibleItemTableRow");
static_assert(sizeof(FEdibleItemTableRow) == 0x000018, "Wrong size on FEdibleItemTableRow");
static_assert(offsetof(FEdibleItemTableRow, DrinkStats) == 0x000010, "Member 'FEdibleItemTableRow::DrinkStats' has a wrong offset!");

// ScriptStruct DuneSandbox.MeleeActionMontageData
// 0x0018 (0x0018 - 0x0000)
struct FMeleeActionMontageData final
{
public:
	TArray<struct FPossibleMeleeAction>           m_PossibleMeleeActions;                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         m_AttackNotifyDelay;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeleeActionMontageData) == 0x000008, "Wrong alignment on FMeleeActionMontageData");
static_assert(sizeof(FMeleeActionMontageData) == 0x000018, "Wrong size on FMeleeActionMontageData");
static_assert(offsetof(FMeleeActionMontageData, m_PossibleMeleeActions) == 0x000000, "Member 'FMeleeActionMontageData::m_PossibleMeleeActions' has a wrong offset!");
static_assert(offsetof(FMeleeActionMontageData, m_AttackNotifyDelay) == 0x000010, "Member 'FMeleeActionMontageData::m_AttackNotifyDelay' has a wrong offset!");

// ScriptStruct DuneSandbox.EmoteItemTableRow
// 0x0090 (0x00A0 - 0x0010)
struct FEmoteItemTableRow final : public FTableRowBase
{
public:
	struct FEmoteItemStats                        EmoteStats;                                        // 0x0010(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteItemTableRow) == 0x000008, "Wrong alignment on FEmoteItemTableRow");
static_assert(sizeof(FEmoteItemTableRow) == 0x0000A0, "Wrong size on FEmoteItemTableRow");
static_assert(offsetof(FEmoteItemTableRow, EmoteStats) == 0x000010, "Member 'FEmoteItemTableRow::EmoteStats' has a wrong offset!");

// ScriptStruct DuneSandbox.AudioPlayerBaseEmitterComponent
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FAudioPlayerBaseEmitterComponent final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioPlayerBaseEmitterComponent) == 0x000004, "Wrong alignment on FAudioPlayerBaseEmitterComponent");
static_assert(sizeof(FAudioPlayerBaseEmitterComponent) == 0x00000C, "Wrong size on FAudioPlayerBaseEmitterComponent");

// ScriptStruct DuneSandbox.AudioRtpcNpcCounterComponent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAudioRtpcNpcCounterComponent final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioRtpcNpcCounterComponent) == 0x000008, "Wrong alignment on FAudioRtpcNpcCounterComponent");
static_assert(sizeof(FAudioRtpcNpcCounterComponent) == 0x000028, "Wrong size on FAudioRtpcNpcCounterComponent");

// ScriptStruct DuneSandbox.ELorePickup
// 0x0000 (0x0008 - 0x0008)
struct FELorePickup final : public FStringEnumValue
{
};
static_assert(alignof(FELorePickup) == 0x000004, "Wrong alignment on FELorePickup");
static_assert(sizeof(FELorePickup) == 0x000008, "Wrong size on FELorePickup");

// ScriptStruct DuneSandbox.AudioTotemPlaceablesInfoComponent
// 0x0006 (0x0006 - 0x0000)
struct FAudioTotemPlaceablesInfoComponent final
{
public:
	uint16                                        m_ActivePowerGeneratorCount;                       // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        m_ActiveFabricatorCount;                           // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        m_ActiveOreRefineryCount;                          // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioTotemPlaceablesInfoComponent) == 0x000002, "Wrong alignment on FAudioTotemPlaceablesInfoComponent");
static_assert(sizeof(FAudioTotemPlaceablesInfoComponent) == 0x000006, "Wrong size on FAudioTotemPlaceablesInfoComponent");
static_assert(offsetof(FAudioTotemPlaceablesInfoComponent, m_ActivePowerGeneratorCount) == 0x000000, "Member 'FAudioTotemPlaceablesInfoComponent::m_ActivePowerGeneratorCount' has a wrong offset!");
static_assert(offsetof(FAudioTotemPlaceablesInfoComponent, m_ActiveFabricatorCount) == 0x000002, "Member 'FAudioTotemPlaceablesInfoComponent::m_ActiveFabricatorCount' has a wrong offset!");
static_assert(offsetof(FAudioTotemPlaceablesInfoComponent, m_ActiveOreRefineryCount) == 0x000004, "Member 'FAudioTotemPlaceablesInfoComponent::m_ActiveOreRefineryCount' has a wrong offset!");

// ScriptStruct DuneSandbox.AudioWindSingletonComponent
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FAudioWindSingletonComponent final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioWindSingletonComponent) == 0x000008, "Wrong alignment on FAudioWindSingletonComponent");
static_assert(sizeof(FAudioWindSingletonComponent) == 0x000030, "Wrong size on FAudioWindSingletonComponent");

// ScriptStruct DuneSandbox.AuroraData
// 0x0008 (0x0008 - 0x0000)
struct FAuroraData final
{
public:
	float                                         m_Intensity;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ColorRarity;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuroraData) == 0x000004, "Wrong alignment on FAuroraData");
static_assert(sizeof(FAuroraData) == 0x000008, "Wrong size on FAuroraData");
static_assert(offsetof(FAuroraData, m_Intensity) == 0x000000, "Member 'FAuroraData::m_Intensity' has a wrong offset!");
static_assert(offsetof(FAuroraData, m_ColorRarity) == 0x000004, "Member 'FAuroraData::m_ColorRarity' has a wrong offset!");

// ScriptStruct DuneSandbox.MarkerFilterOptions
// 0x000C (0x000C - 0x0000)
struct FMarkerFilterOptions final
{
public:
	bool                                          bOverrideScannerDetectionRate;                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScannerDetectionRateOverride;                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncreaseCountWhenDiscovered;                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScannableLogicOverrideType                   ScannableLogic;                                    // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarkerFilterOptions) == 0x000004, "Wrong alignment on FMarkerFilterOptions");
static_assert(sizeof(FMarkerFilterOptions) == 0x00000C, "Wrong size on FMarkerFilterOptions");
static_assert(offsetof(FMarkerFilterOptions, bOverrideScannerDetectionRate) == 0x000000, "Member 'FMarkerFilterOptions::bOverrideScannerDetectionRate' has a wrong offset!");
static_assert(offsetof(FMarkerFilterOptions, ScannerDetectionRateOverride) == 0x000004, "Member 'FMarkerFilterOptions::ScannerDetectionRateOverride' has a wrong offset!");
static_assert(offsetof(FMarkerFilterOptions, bIncreaseCountWhenDiscovered) == 0x000008, "Member 'FMarkerFilterOptions::bIncreaseCountWhenDiscovered' has a wrong offset!");
static_assert(offsetof(FMarkerFilterOptions, ScannableLogic) == 0x000009, "Member 'FMarkerFilterOptions::ScannableLogic' has a wrong offset!");

// ScriptStruct DuneSandbox.BackendFilterTextResult
// 0x0028 (0x0028 - 0x0000)
struct FBackendFilterTextResult final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilteredText;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFilterTextError>               FilterErrors;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBackendFilterTextResult) == 0x000008, "Wrong alignment on FBackendFilterTextResult");
static_assert(sizeof(FBackendFilterTextResult) == 0x000028, "Wrong size on FBackendFilterTextResult");
static_assert(offsetof(FBackendFilterTextResult, bSucceeded) == 0x000000, "Member 'FBackendFilterTextResult::bSucceeded' has a wrong offset!");
static_assert(offsetof(FBackendFilterTextResult, FilteredText) == 0x000008, "Member 'FBackendFilterTextResult::FilteredText' has a wrong offset!");
static_assert(offsetof(FBackendFilterTextResult, FilterErrors) == 0x000018, "Member 'FBackendFilterTextResult::FilterErrors' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildDatabaseEventAddInvite
// 0x0068 (0x0068 - 0x0000)
struct FGuildDatabaseEventAddInvite final
{
public:
	int64                                         InviteId;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         GuildId;                                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildDescription;                                  // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SenderPlayerId;                                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderPlayerName;                                  // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InviteSentUniverseTime;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildDatabaseEventAddInvite) == 0x000008, "Wrong alignment on FGuildDatabaseEventAddInvite");
static_assert(sizeof(FGuildDatabaseEventAddInvite) == 0x000068, "Wrong size on FGuildDatabaseEventAddInvite");
static_assert(offsetof(FGuildDatabaseEventAddInvite, InviteId) == 0x000000, "Member 'FGuildDatabaseEventAddInvite::InviteId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddInvite, PlayerId) == 0x000008, "Member 'FGuildDatabaseEventAddInvite::PlayerId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddInvite, GuildId) == 0x000010, "Member 'FGuildDatabaseEventAddInvite::GuildId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddInvite, GuildName) == 0x000018, "Member 'FGuildDatabaseEventAddInvite::GuildName' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddInvite, PlayerName) == 0x000028, "Member 'FGuildDatabaseEventAddInvite::PlayerName' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddInvite, GuildDescription) == 0x000038, "Member 'FGuildDatabaseEventAddInvite::GuildDescription' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddInvite, SenderPlayerId) == 0x000048, "Member 'FGuildDatabaseEventAddInvite::SenderPlayerId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddInvite, SenderPlayerName) == 0x000050, "Member 'FGuildDatabaseEventAddInvite::SenderPlayerName' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventAddInvite, InviteSentUniverseTime) == 0x000060, "Member 'FGuildDatabaseEventAddInvite::InviteSentUniverseTime' has a wrong offset!");

// ScriptStruct DuneSandbox.MapZoomStepSettings
// 0x0018 (0x0018 - 0x0000)
struct FMapZoomStepSettings final
{
public:
	ECameraProjectionMode                         ProjectionMode;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CameraPitch;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalFoV;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomScale;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapZoomStepSettings) == 0x000008, "Wrong alignment on FMapZoomStepSettings");
static_assert(sizeof(FMapZoomStepSettings) == 0x000018, "Wrong size on FMapZoomStepSettings");
static_assert(offsetof(FMapZoomStepSettings, ProjectionMode) == 0x000000, "Member 'FMapZoomStepSettings::ProjectionMode' has a wrong offset!");
static_assert(offsetof(FMapZoomStepSettings, CameraPitch) == 0x000008, "Member 'FMapZoomStepSettings::CameraPitch' has a wrong offset!");
static_assert(offsetof(FMapZoomStepSettings, VerticalFoV) == 0x000010, "Member 'FMapZoomStepSettings::VerticalFoV' has a wrong offset!");
static_assert(offsetof(FMapZoomStepSettings, ZoomScale) == 0x000014, "Member 'FMapZoomStepSettings::ZoomScale' has a wrong offset!");

// ScriptStruct DuneSandbox.ENPCArchetypes
// 0x0000 (0x0008 - 0x0008)
struct FENPCArchetypes final : public FStringEnumValue
{
};
static_assert(alignof(FENPCArchetypes) == 0x000004, "Wrong alignment on FENPCArchetypes");
static_assert(sizeof(FENPCArchetypes) == 0x000008, "Wrong size on FENPCArchetypes");

// ScriptStruct DuneSandbox.AttractorAnimationOverride
// 0x0078 (0x0078 - 0x0000)
struct FAttractorAnimationOverride final
{
public:
	struct FENPCArchetypes                        m_Archetype;                                       // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttractorAnimationSet                 m_AnimationSet;                                    // 0x0008(0x0070)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttractorAnimationOverride) == 0x000008, "Wrong alignment on FAttractorAnimationOverride");
static_assert(sizeof(FAttractorAnimationOverride) == 0x000078, "Wrong size on FAttractorAnimationOverride");
static_assert(offsetof(FAttractorAnimationOverride, m_Archetype) == 0x000000, "Member 'FAttractorAnimationOverride::m_Archetype' has a wrong offset!");
static_assert(offsetof(FAttractorAnimationOverride, m_AnimationSet) == 0x000008, "Member 'FAttractorAnimationOverride::m_AnimationSet' has a wrong offset!");

// ScriptStruct DuneSandbox.BasePowerStateChangeEvent
// 0x0010 (0x0040 - 0x0030)
struct FBasePowerStateChangeEvent final : public FGameEvent
{
public:
	struct FUniqueID                              TotemId;                                           // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBasePowerStateChange                         m_StateChange;                                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBasePowerStateChangeEvent) == 0x000008, "Wrong alignment on FBasePowerStateChangeEvent");
static_assert(sizeof(FBasePowerStateChangeEvent) == 0x000040, "Wrong size on FBasePowerStateChangeEvent");
static_assert(offsetof(FBasePowerStateChangeEvent, TotemId) == 0x000030, "Member 'FBasePowerStateChangeEvent::TotemId' has a wrong offset!");
static_assert(offsetof(FBasePowerStateChangeEvent, m_StateChange) == 0x000038, "Member 'FBasePowerStateChangeEvent::m_StateChange' has a wrong offset!");

// ScriptStruct DuneSandbox.FuelContainerStats
// 0x0008 (0x0008 - 0x0000)
struct FFuelContainerStats final
{
public:
	float                                         CurrentFuelAmount;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FuelCapacity;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFuelContainerStats) == 0x000004, "Wrong alignment on FFuelContainerStats");
static_assert(sizeof(FFuelContainerStats) == 0x000008, "Wrong size on FFuelContainerStats");
static_assert(offsetof(FFuelContainerStats, CurrentFuelAmount) == 0x000000, "Member 'FFuelContainerStats::CurrentFuelAmount' has a wrong offset!");
static_assert(offsetof(FFuelContainerStats, FuelCapacity) == 0x000004, "Member 'FFuelContainerStats::FuelCapacity' has a wrong offset!");

// ScriptStruct DuneSandbox.BasicInventoryRowBase
// 0x0010 (0x0020 - 0x0010)
struct FBasicInventoryRowBase final : public FTableRowBase
{
public:
	TArray<struct FGameItemInfo>                  m_Items;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBasicInventoryRowBase) == 0x000008, "Wrong alignment on FBasicInventoryRowBase");
static_assert(sizeof(FBasicInventoryRowBase) == 0x000020, "Wrong size on FBasicInventoryRowBase");
static_assert(offsetof(FBasicInventoryRowBase, m_Items) == 0x000010, "Member 'FBasicInventoryRowBase::m_Items' has a wrong offset!");

// ScriptStruct DuneSandbox.FuelPoweredStateFuelData
// 0x0014 (0x0014 - 0x0000)
struct FFuelPoweredStateFuelData final
{
public:
	struct FEItemTemplateID                       m_FuelType;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_AmountInGenerator;                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_AmountInCircuit;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_AmountInBackpack;                                // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFuelPoweredStateFuelData) == 0x000004, "Wrong alignment on FFuelPoweredStateFuelData");
static_assert(sizeof(FFuelPoweredStateFuelData) == 0x000014, "Wrong size on FFuelPoweredStateFuelData");
static_assert(offsetof(FFuelPoweredStateFuelData, m_FuelType) == 0x000000, "Member 'FFuelPoweredStateFuelData::m_FuelType' has a wrong offset!");
static_assert(offsetof(FFuelPoweredStateFuelData, m_AmountInGenerator) == 0x000008, "Member 'FFuelPoweredStateFuelData::m_AmountInGenerator' has a wrong offset!");
static_assert(offsetof(FFuelPoweredStateFuelData, m_AmountInCircuit) == 0x00000C, "Member 'FFuelPoweredStateFuelData::m_AmountInCircuit' has a wrong offset!");
static_assert(offsetof(FFuelPoweredStateFuelData, m_AmountInBackpack) == 0x000010, "Member 'FFuelPoweredStateFuelData::m_AmountInBackpack' has a wrong offset!");

// ScriptStruct DuneSandbox.BattlegroupPopulationSetting
// 0x0028 (0x0028 - 0x0000)
struct FBattlegroupPopulationSetting final
{
public:
	float                                         m_MaxPercentValue;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_DisplayName;                                     // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           m_TextStyle;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlegroupPopulationSetting) == 0x000008, "Wrong alignment on FBattlegroupPopulationSetting");
static_assert(sizeof(FBattlegroupPopulationSetting) == 0x000028, "Wrong size on FBattlegroupPopulationSetting");
static_assert(offsetof(FBattlegroupPopulationSetting, m_MaxPercentValue) == 0x000000, "Member 'FBattlegroupPopulationSetting::m_MaxPercentValue' has a wrong offset!");
static_assert(offsetof(FBattlegroupPopulationSetting, m_DisplayName) == 0x000008, "Member 'FBattlegroupPopulationSetting::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FBattlegroupPopulationSetting, m_TextStyle) == 0x000020, "Member 'FBattlegroupPopulationSetting::m_TextStyle' has a wrong offset!");

// ScriptStruct DuneSandbox.BigMomentSequenceAdjustmentSettings
// 0x0060 (0x0060 - 0x0000)
struct FBigMomentSequenceAdjustmentSettings final
{
public:
	bool                                          bNeedsObstructionChecks;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DummyActorBindingTag;                              // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAdjustmentAttempts;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DesiredRelativeCameraStartLocation;                // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DesiredRelativeCameraEndLocation;                  // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredUnobstructedRadiusAroundCamera;             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineTraceScoreThreshold;                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LineTraceScoreCurve;                               // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineTraceBottomCornerOffset;                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBigMomentSequenceAdjustmentSettings) == 0x000008, "Wrong alignment on FBigMomentSequenceAdjustmentSettings");
static_assert(sizeof(FBigMomentSequenceAdjustmentSettings) == 0x000060, "Wrong size on FBigMomentSequenceAdjustmentSettings");
static_assert(offsetof(FBigMomentSequenceAdjustmentSettings, bNeedsObstructionChecks) == 0x000000, "Member 'FBigMomentSequenceAdjustmentSettings::bNeedsObstructionChecks' has a wrong offset!");
static_assert(offsetof(FBigMomentSequenceAdjustmentSettings, DummyActorBindingTag) == 0x000004, "Member 'FBigMomentSequenceAdjustmentSettings::DummyActorBindingTag' has a wrong offset!");
static_assert(offsetof(FBigMomentSequenceAdjustmentSettings, MaxAdjustmentAttempts) == 0x00000C, "Member 'FBigMomentSequenceAdjustmentSettings::MaxAdjustmentAttempts' has a wrong offset!");
static_assert(offsetof(FBigMomentSequenceAdjustmentSettings, DesiredRelativeCameraStartLocation) == 0x000010, "Member 'FBigMomentSequenceAdjustmentSettings::DesiredRelativeCameraStartLocation' has a wrong offset!");
static_assert(offsetof(FBigMomentSequenceAdjustmentSettings, DesiredRelativeCameraEndLocation) == 0x000028, "Member 'FBigMomentSequenceAdjustmentSettings::DesiredRelativeCameraEndLocation' has a wrong offset!");
static_assert(offsetof(FBigMomentSequenceAdjustmentSettings, DesiredUnobstructedRadiusAroundCamera) == 0x000040, "Member 'FBigMomentSequenceAdjustmentSettings::DesiredUnobstructedRadiusAroundCamera' has a wrong offset!");
static_assert(offsetof(FBigMomentSequenceAdjustmentSettings, TraceChannel) == 0x000044, "Member 'FBigMomentSequenceAdjustmentSettings::TraceChannel' has a wrong offset!");
static_assert(offsetof(FBigMomentSequenceAdjustmentSettings, LineTraceScoreThreshold) == 0x000048, "Member 'FBigMomentSequenceAdjustmentSettings::LineTraceScoreThreshold' has a wrong offset!");
static_assert(offsetof(FBigMomentSequenceAdjustmentSettings, LineTraceScoreCurve) == 0x000050, "Member 'FBigMomentSequenceAdjustmentSettings::LineTraceScoreCurve' has a wrong offset!");
static_assert(offsetof(FBigMomentSequenceAdjustmentSettings, LineTraceBottomCornerOffset) == 0x000058, "Member 'FBigMomentSequenceAdjustmentSettings::LineTraceBottomCornerOffset' has a wrong offset!");

// ScriptStruct DuneSandbox.GenericActorSpawnSettings
// 0x0004 (0x0004 - 0x0000)
struct FGenericActorSpawnSettings final
{
public:
	ESurfaceSnappingType                          SnappingType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSpawnOnServer;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSpawnOnAllServers;                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSpawnOnClient;                              // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenericActorSpawnSettings) == 0x000001, "Wrong alignment on FGenericActorSpawnSettings");
static_assert(sizeof(FGenericActorSpawnSettings) == 0x000004, "Wrong size on FGenericActorSpawnSettings");
static_assert(offsetof(FGenericActorSpawnSettings, SnappingType) == 0x000000, "Member 'FGenericActorSpawnSettings::SnappingType' has a wrong offset!");
static_assert(offsetof(FGenericActorSpawnSettings, bShouldSpawnOnServer) == 0x000001, "Member 'FGenericActorSpawnSettings::bShouldSpawnOnServer' has a wrong offset!");
static_assert(offsetof(FGenericActorSpawnSettings, bShouldSpawnOnAllServers) == 0x000002, "Member 'FGenericActorSpawnSettings::bShouldSpawnOnAllServers' has a wrong offset!");
static_assert(offsetof(FGenericActorSpawnSettings, bShouldSpawnOnClient) == 0x000003, "Member 'FGenericActorSpawnSettings::bShouldSpawnOnClient' has a wrong offset!");

// ScriptStruct DuneSandbox.GenericActorTemplateRowBase
// 0x00A8 (0x00B8 - 0x0010)
struct FGenericActorTemplateRowBase final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UGenericActorFactoryBase> Factory;                                          // 0x0040(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericActorSpawnSettings             SpawnSettings;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   OverallBounds;                                     // 0x0078(0x0038)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGizmoHiddenInEd;                                // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenericActorTemplateRowBase) == 0x000008, "Wrong alignment on FGenericActorTemplateRowBase");
static_assert(sizeof(FGenericActorTemplateRowBase) == 0x0000B8, "Wrong size on FGenericActorTemplateRowBase");
static_assert(offsetof(FGenericActorTemplateRowBase, ActorClass) == 0x000010, "Member 'FGenericActorTemplateRowBase::ActorClass' has a wrong offset!");
static_assert(offsetof(FGenericActorTemplateRowBase, Factory) == 0x000040, "Member 'FGenericActorTemplateRowBase::Factory' has a wrong offset!");
static_assert(offsetof(FGenericActorTemplateRowBase, SpawnSettings) == 0x000070, "Member 'FGenericActorTemplateRowBase::SpawnSettings' has a wrong offset!");
static_assert(offsetof(FGenericActorTemplateRowBase, OverallBounds) == 0x000078, "Member 'FGenericActorTemplateRowBase::OverallBounds' has a wrong offset!");
static_assert(offsetof(FGenericActorTemplateRowBase, Color) == 0x0000B0, "Member 'FGenericActorTemplateRowBase::Color' has a wrong offset!");
static_assert(offsetof(FGenericActorTemplateRowBase, bIsGizmoHiddenInEd) == 0x0000B4, "Member 'FGenericActorTemplateRowBase::bIsGizmoHiddenInEd' has a wrong offset!");

// ScriptStruct DuneSandbox.SequencePlaySettingsData
// 0x0020 (0x0020 - 0x0000)
struct FSequencePlaySettingsData final
{
public:
	struct FCinematicModeSettings                 m_CinematicModeSettings;                           // 0x0000(0x0005)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEInputContext>                 m_CinematicInputContextList;                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_bShouldBeSkippable;                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bEnableCinematicMode;                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSequencePlaySettingsData) == 0x000008, "Wrong alignment on FSequencePlaySettingsData");
static_assert(sizeof(FSequencePlaySettingsData) == 0x000020, "Wrong size on FSequencePlaySettingsData");
static_assert(offsetof(FSequencePlaySettingsData, m_CinematicModeSettings) == 0x000000, "Member 'FSequencePlaySettingsData::m_CinematicModeSettings' has a wrong offset!");
static_assert(offsetof(FSequencePlaySettingsData, m_CinematicInputContextList) == 0x000008, "Member 'FSequencePlaySettingsData::m_CinematicInputContextList' has a wrong offset!");
static_assert(offsetof(FSequencePlaySettingsData, m_bShouldBeSkippable) == 0x000018, "Member 'FSequencePlaySettingsData::m_bShouldBeSkippable' has a wrong offset!");
static_assert(offsetof(FSequencePlaySettingsData, m_bEnableCinematicMode) == 0x000019, "Member 'FSequencePlaySettingsData::m_bEnableCinematicMode' has a wrong offset!");

// ScriptStruct DuneSandbox.BigMomentData
// 0x0128 (0x0128 - 0x0000)
struct FBigMomentData final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  CinematicLevel;                                    // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequencePlaybackSettings    MovieScenePlaybackSettings;                        // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSequencePlaySettingsData              SequencePlaySettings;                              // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FBigMomentSequenceAdjustmentSettings   SequenceAdjustmentSettings;                        // 0x00A0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CompletedTag;                                      // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameItemInfo>                  ItemsToAward;                                      // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         PlayerImmunityDurationInSeconds;                   // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseNearestBuildingAsSequenceReference;      // 0x011C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NearestBuildingSearchRadius;                       // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUsePlayerAsSequenceReference;               // 0x0124(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUsePlayerTransformAsLevelOrigin;            // 0x0125(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUsePlayerBindingTag;                        // 0x0126(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_127[0x1];                                      // 0x0127(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBigMomentData) == 0x000008, "Wrong alignment on FBigMomentData");
static_assert(sizeof(FBigMomentData) == 0x000128, "Wrong size on FBigMomentData");
static_assert(offsetof(FBigMomentData, LevelSequence) == 0x000000, "Member 'FBigMomentData::LevelSequence' has a wrong offset!");
static_assert(offsetof(FBigMomentData, CinematicLevel) == 0x000030, "Member 'FBigMomentData::CinematicLevel' has a wrong offset!");
static_assert(offsetof(FBigMomentData, MovieScenePlaybackSettings) == 0x000060, "Member 'FBigMomentData::MovieScenePlaybackSettings' has a wrong offset!");
static_assert(offsetof(FBigMomentData, SequencePlaySettings) == 0x000080, "Member 'FBigMomentData::SequencePlaySettings' has a wrong offset!");
static_assert(offsetof(FBigMomentData, SequenceAdjustmentSettings) == 0x0000A0, "Member 'FBigMomentData::SequenceAdjustmentSettings' has a wrong offset!");
static_assert(offsetof(FBigMomentData, CompletedTag) == 0x000100, "Member 'FBigMomentData::CompletedTag' has a wrong offset!");
static_assert(offsetof(FBigMomentData, ItemsToAward) == 0x000108, "Member 'FBigMomentData::ItemsToAward' has a wrong offset!");
static_assert(offsetof(FBigMomentData, PlayerImmunityDurationInSeconds) == 0x000118, "Member 'FBigMomentData::PlayerImmunityDurationInSeconds' has a wrong offset!");
static_assert(offsetof(FBigMomentData, bShouldUseNearestBuildingAsSequenceReference) == 0x00011C, "Member 'FBigMomentData::bShouldUseNearestBuildingAsSequenceReference' has a wrong offset!");
static_assert(offsetof(FBigMomentData, NearestBuildingSearchRadius) == 0x000120, "Member 'FBigMomentData::NearestBuildingSearchRadius' has a wrong offset!");
static_assert(offsetof(FBigMomentData, bShouldUsePlayerAsSequenceReference) == 0x000124, "Member 'FBigMomentData::bShouldUsePlayerAsSequenceReference' has a wrong offset!");
static_assert(offsetof(FBigMomentData, bShouldUsePlayerTransformAsLevelOrigin) == 0x000125, "Member 'FBigMomentData::bShouldUsePlayerTransformAsLevelOrigin' has a wrong offset!");
static_assert(offsetof(FBigMomentData, bShouldUsePlayerBindingTag) == 0x000126, "Member 'FBigMomentData::bShouldUsePlayerBindingTag' has a wrong offset!");

// ScriptStruct DuneSandbox.BiomeConfigurationData
// 0x0030 (0x0030 - 0x0000)
struct FBiomeConfigurationData final
{
public:
	float                                         m_TemperatureModifier;                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BiomeHumidityModifier;                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SandwormThreatModifier;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CorrosionModifier;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_SandBuildUpDurationInSec;                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_SandCleanUpDurationInSec;                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SandBuildUpMaximum;                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_SandColorTransitionDurationInSec;                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_SandColor;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomeConfigurationData) == 0x000004, "Wrong alignment on FBiomeConfigurationData");
static_assert(sizeof(FBiomeConfigurationData) == 0x000030, "Wrong size on FBiomeConfigurationData");
static_assert(offsetof(FBiomeConfigurationData, m_TemperatureModifier) == 0x000000, "Member 'FBiomeConfigurationData::m_TemperatureModifier' has a wrong offset!");
static_assert(offsetof(FBiomeConfigurationData, m_BiomeHumidityModifier) == 0x000004, "Member 'FBiomeConfigurationData::m_BiomeHumidityModifier' has a wrong offset!");
static_assert(offsetof(FBiomeConfigurationData, m_SandwormThreatModifier) == 0x000008, "Member 'FBiomeConfigurationData::m_SandwormThreatModifier' has a wrong offset!");
static_assert(offsetof(FBiomeConfigurationData, m_CorrosionModifier) == 0x00000C, "Member 'FBiomeConfigurationData::m_CorrosionModifier' has a wrong offset!");
static_assert(offsetof(FBiomeConfigurationData, m_SandBuildUpDurationInSec) == 0x000010, "Member 'FBiomeConfigurationData::m_SandBuildUpDurationInSec' has a wrong offset!");
static_assert(offsetof(FBiomeConfigurationData, m_SandCleanUpDurationInSec) == 0x000014, "Member 'FBiomeConfigurationData::m_SandCleanUpDurationInSec' has a wrong offset!");
static_assert(offsetof(FBiomeConfigurationData, m_SandBuildUpMaximum) == 0x000018, "Member 'FBiomeConfigurationData::m_SandBuildUpMaximum' has a wrong offset!");
static_assert(offsetof(FBiomeConfigurationData, m_SandColorTransitionDurationInSec) == 0x00001C, "Member 'FBiomeConfigurationData::m_SandColorTransitionDurationInSec' has a wrong offset!");
static_assert(offsetof(FBiomeConfigurationData, m_SandColor) == 0x000020, "Member 'FBiomeConfigurationData::m_SandColor' has a wrong offset!");

// ScriptStruct DuneSandbox.Biome
// 0x0040 (0x0040 - 0x0000)
struct FBiome final
{
public:
	struct FBiomeConfigurationData                m_BiomeConfigurationData;                          // 0x0000(0x0030)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        m_Identifier;                                      // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Priority;                                        // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_Name;                                            // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiome) == 0x000004, "Wrong alignment on FBiome");
static_assert(sizeof(FBiome) == 0x000040, "Wrong size on FBiome");
static_assert(offsetof(FBiome, m_BiomeConfigurationData) == 0x000000, "Member 'FBiome::m_BiomeConfigurationData' has a wrong offset!");
static_assert(offsetof(FBiome, m_Identifier) == 0x000030, "Member 'FBiome::m_Identifier' has a wrong offset!");
static_assert(offsetof(FBiome, m_Priority) == 0x000034, "Member 'FBiome::m_Priority' has a wrong offset!");
static_assert(offsetof(FBiome, m_Name) == 0x000038, "Member 'FBiome::m_Name' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildingSubAction
// 0x0000 (0x0008 - 0x0008)
struct FEBuildingSubAction final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildingSubAction) == 0x000004, "Wrong alignment on FEBuildingSubAction");
static_assert(sizeof(FEBuildingSubAction) == 0x000008, "Wrong size on FEBuildingSubAction");

// ScriptStruct DuneSandbox.FogRevealZoneRowBase
// 0x0050 (0x0060 - 0x0010)
struct FFogRevealZoneRowBase final : public FTableRowBase
{
public:
	int32                                         m_RadiusMetres;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_InsideZoneHeaderText;                            // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_InsideZoneDescriptionText;                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_ZoneColor;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AudioFrequency;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ShowPopup;                                       // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFogRevealZoneRowBase) == 0x000008, "Wrong alignment on FFogRevealZoneRowBase");
static_assert(sizeof(FFogRevealZoneRowBase) == 0x000060, "Wrong size on FFogRevealZoneRowBase");
static_assert(offsetof(FFogRevealZoneRowBase, m_RadiusMetres) == 0x000010, "Member 'FFogRevealZoneRowBase::m_RadiusMetres' has a wrong offset!");
static_assert(offsetof(FFogRevealZoneRowBase, m_InsideZoneHeaderText) == 0x000018, "Member 'FFogRevealZoneRowBase::m_InsideZoneHeaderText' has a wrong offset!");
static_assert(offsetof(FFogRevealZoneRowBase, m_InsideZoneDescriptionText) == 0x000030, "Member 'FFogRevealZoneRowBase::m_InsideZoneDescriptionText' has a wrong offset!");
static_assert(offsetof(FFogRevealZoneRowBase, m_ZoneColor) == 0x000048, "Member 'FFogRevealZoneRowBase::m_ZoneColor' has a wrong offset!");
static_assert(offsetof(FFogRevealZoneRowBase, m_AudioFrequency) == 0x000058, "Member 'FFogRevealZoneRowBase::m_AudioFrequency' has a wrong offset!");
static_assert(offsetof(FFogRevealZoneRowBase, m_ShowPopup) == 0x00005C, "Member 'FFogRevealZoneRowBase::m_ShowPopup' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingFavoriteData
// 0x0004 (0x0010 - 0x000C)
struct FBuildingFavoriteData final : public FFastArraySerializerItem
{
public:
	EBuildingMode                                 Mode;                                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x1];                                        // 0x000D(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         Index;                                             // 0x000E(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingFavoriteData) == 0x000004, "Wrong alignment on FBuildingFavoriteData");
static_assert(sizeof(FBuildingFavoriteData) == 0x000010, "Wrong size on FBuildingFavoriteData");
static_assert(offsetof(FBuildingFavoriteData, Mode) == 0x00000C, "Member 'FBuildingFavoriteData::Mode' has a wrong offset!");
static_assert(offsetof(FBuildingFavoriteData, Index) == 0x00000E, "Member 'FBuildingFavoriteData::Index' has a wrong offset!");

// ScriptStruct DuneSandbox.MarkerUpdate
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FMarkerUpdate final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarkerUpdate) == 0x000008, "Wrong alignment on FMarkerUpdate");
static_assert(sizeof(FMarkerUpdate) == 0x000040, "Wrong size on FMarkerUpdate");

// ScriptStruct DuneSandbox.WorldLayoutSettings
// 0x00F0 (0x00F0 - 0x0000)
struct FWorldLayoutSettings final
{
public:
	TSoftObjectPtr<class UWorldLayoutDataAsset>   Content;                                           // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWorldLayoutHeatMapSettings            HeatMapSettings;                                   // 0x0030(0x00C0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldLayoutSettings) == 0x000008, "Wrong alignment on FWorldLayoutSettings");
static_assert(sizeof(FWorldLayoutSettings) == 0x0000F0, "Wrong size on FWorldLayoutSettings");
static_assert(offsetof(FWorldLayoutSettings, Content) == 0x000000, "Member 'FWorldLayoutSettings::Content' has a wrong offset!");
static_assert(offsetof(FWorldLayoutSettings, HeatMapSettings) == 0x000030, "Member 'FWorldLayoutSettings::HeatMapSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.BiomeDataComponent
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FBiomeDataComponent final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomeDataComponent) == 0x000010, "Wrong alignment on FBiomeDataComponent");
static_assert(sizeof(FBiomeDataComponent) == 0x000080, "Wrong size on FBiomeDataComponent");

// ScriptStruct DuneSandbox.BiomeDataSingletonComponent
// 0x0001 (0x0001 - 0x0000)
struct FBiomeDataSingletonComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomeDataSingletonComponent) == 0x000001, "Wrong alignment on FBiomeDataSingletonComponent");
static_assert(sizeof(FBiomeDataSingletonComponent) == 0x000001, "Wrong size on FBiomeDataSingletonComponent");

// ScriptStruct DuneSandbox.WeaponModStats
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FWeaponModStats final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RowName;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0xC];                                        // 0x000C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponModStats) == 0x000008, "Wrong alignment on FWeaponModStats");
static_assert(sizeof(FWeaponModStats) == 0x000018, "Wrong size on FWeaponModStats");
static_assert(offsetof(FWeaponModStats, RowName) == 0x000004, "Member 'FWeaponModStats::RowName' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponModStatsRow
// 0x0018 (0x0028 - 0x0010)
struct FWeaponModStatsRow final : public FTableRowBase
{
public:
	struct FWeaponModStats                        WeaponModStats;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponModStatsRow) == 0x000008, "Wrong alignment on FWeaponModStatsRow");
static_assert(sizeof(FWeaponModStatsRow) == 0x000028, "Wrong size on FWeaponModStatsRow");
static_assert(offsetof(FWeaponModStatsRow, WeaponModStats) == 0x000010, "Member 'FWeaponModStatsRow::WeaponModStats' has a wrong offset!");

// ScriptStruct DuneSandbox.DunePlayerCharacterRecoilParams
// 0x0008 (0x0008 - 0x0000)
struct FDunePlayerCharacterRecoilParams final
{
public:
	float                                         Factor;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ADSScalar;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDunePlayerCharacterRecoilParams) == 0x000004, "Wrong alignment on FDunePlayerCharacterRecoilParams");
static_assert(sizeof(FDunePlayerCharacterRecoilParams) == 0x000008, "Wrong size on FDunePlayerCharacterRecoilParams");
static_assert(offsetof(FDunePlayerCharacterRecoilParams, Factor) == 0x000000, "Member 'FDunePlayerCharacterRecoilParams::Factor' has a wrong offset!");
static_assert(offsetof(FDunePlayerCharacterRecoilParams, ADSScalar) == 0x000004, "Member 'FDunePlayerCharacterRecoilParams::ADSScalar' has a wrong offset!");

// ScriptStruct DuneSandbox.InteractionData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FInteractionData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractionData) == 0x000008, "Wrong alignment on FInteractionData");
static_assert(sizeof(FInteractionData) == 0x000030, "Wrong size on FInteractionData");

// ScriptStruct DuneSandbox.BiomeGlobalComponent
// 0x0001 (0x0001 - 0x0000)
struct FBiomeGlobalComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomeGlobalComponent) == 0x000001, "Wrong alignment on FBiomeGlobalComponent");
static_assert(sizeof(FBiomeGlobalComponent) == 0x000001, "Wrong size on FBiomeGlobalComponent");

// ScriptStruct DuneSandbox.EInteractionKeyCode
// 0x0000 (0x0008 - 0x0008)
struct FEInteractionKeyCode final : public FStringEnumValue
{
};
static_assert(alignof(FEInteractionKeyCode) == 0x000004, "Wrong alignment on FEInteractionKeyCode");
static_assert(sizeof(FEInteractionKeyCode) == 0x000008, "Wrong size on FEInteractionKeyCode");

// ScriptStruct DuneSandbox.BiomeMutators
// 0x0001 (0x0001 - 0x0000)
struct FBiomeMutators final
{
public:
	bool                                          m_bIgnoreParticlesOfLowerPriorityBiomes;           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomeMutators) == 0x000001, "Wrong alignment on FBiomeMutators");
static_assert(sizeof(FBiomeMutators) == 0x000001, "Wrong size on FBiomeMutators");
static_assert(offsetof(FBiomeMutators, m_bIgnoreParticlesOfLowerPriorityBiomes) == 0x000000, "Member 'FBiomeMutators::m_bIgnoreParticlesOfLowerPriorityBiomes' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadUIConditionInfo
// 0x0028 (0x0028 - 0x0000)
struct FLandsraadUIConditionInfo final
{
public:
	class FText                                   m_ConditionDescription;                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         m_ProgressAmount;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ContributionFactor;                              // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsTerritoryControlCondition;                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandsraadUIConditionInfo) == 0x000008, "Wrong alignment on FLandsraadUIConditionInfo");
static_assert(sizeof(FLandsraadUIConditionInfo) == 0x000028, "Wrong size on FLandsraadUIConditionInfo");
static_assert(offsetof(FLandsraadUIConditionInfo, m_ConditionDescription) == 0x000000, "Member 'FLandsraadUIConditionInfo::m_ConditionDescription' has a wrong offset!");
static_assert(offsetof(FLandsraadUIConditionInfo, m_ProgressAmount) == 0x000018, "Member 'FLandsraadUIConditionInfo::m_ProgressAmount' has a wrong offset!");
static_assert(offsetof(FLandsraadUIConditionInfo, m_ContributionFactor) == 0x00001C, "Member 'FLandsraadUIConditionInfo::m_ContributionFactor' has a wrong offset!");
static_assert(offsetof(FLandsraadUIConditionInfo, m_bIsTerritoryControlCondition) == 0x000020, "Member 'FLandsraadUIConditionInfo::m_bIsTerritoryControlCondition' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadUITaskInfo
// 0x0138 (0x0138 - 0x0000)
struct FLandsraadUITaskInfo final
{
public:
	class FName                                   m_TaskName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_HouseDisplayName;                                // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_HouseLocation;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_HouseIconBrush;                                  // 0x0038(0x0030)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_RewardAmount;                                    // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_CurrentAmount;                                   // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_GoalAmount;                                      // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_TaskShortName;                                   // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_TaskDescription;                                 // 0x0090(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          m_bRevealed;                                       // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bSysselraad;                                     // 0x00A9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_CurrentPlayerProgress;                           // 0x00AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandsraadUITaskState                         m_TaskState;                                       // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEFaction                              m_PlayersLandsraadFaction;                         // 0x00B4(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFaction                              m_TaskWonByFaction;                                // 0x00BC(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFaction                              m_ControlPointOwningFaction;                       // 0x00C4(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLandsraadUIConditionInfo> m_Conditions;                                // 0x00D0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FLandsraadTaskRewardData>       m_Rewards;                                         // 0x0120(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ULandsraadHouseDataAsset*               m_HouseDataAsset;                                  // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadUITaskInfo) == 0x000008, "Wrong alignment on FLandsraadUITaskInfo");
static_assert(sizeof(FLandsraadUITaskInfo) == 0x000138, "Wrong size on FLandsraadUITaskInfo");
static_assert(offsetof(FLandsraadUITaskInfo, m_TaskName) == 0x000000, "Member 'FLandsraadUITaskInfo::m_TaskName' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_HouseDisplayName) == 0x000008, "Member 'FLandsraadUITaskInfo::m_HouseDisplayName' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_HouseLocation) == 0x000020, "Member 'FLandsraadUITaskInfo::m_HouseLocation' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_HouseIconBrush) == 0x000038, "Member 'FLandsraadUITaskInfo::m_HouseIconBrush' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_RewardAmount) == 0x000068, "Member 'FLandsraadUITaskInfo::m_RewardAmount' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_CurrentAmount) == 0x00006C, "Member 'FLandsraadUITaskInfo::m_CurrentAmount' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_GoalAmount) == 0x000070, "Member 'FLandsraadUITaskInfo::m_GoalAmount' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_TaskShortName) == 0x000078, "Member 'FLandsraadUITaskInfo::m_TaskShortName' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_TaskDescription) == 0x000090, "Member 'FLandsraadUITaskInfo::m_TaskDescription' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_bRevealed) == 0x0000A8, "Member 'FLandsraadUITaskInfo::m_bRevealed' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_bSysselraad) == 0x0000A9, "Member 'FLandsraadUITaskInfo::m_bSysselraad' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_CurrentPlayerProgress) == 0x0000AC, "Member 'FLandsraadUITaskInfo::m_CurrentPlayerProgress' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_TaskState) == 0x0000B0, "Member 'FLandsraadUITaskInfo::m_TaskState' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_PlayersLandsraadFaction) == 0x0000B4, "Member 'FLandsraadUITaskInfo::m_PlayersLandsraadFaction' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_TaskWonByFaction) == 0x0000BC, "Member 'FLandsraadUITaskInfo::m_TaskWonByFaction' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_ControlPointOwningFaction) == 0x0000C4, "Member 'FLandsraadUITaskInfo::m_ControlPointOwningFaction' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_Conditions) == 0x0000D0, "Member 'FLandsraadUITaskInfo::m_Conditions' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_Rewards) == 0x000120, "Member 'FLandsraadUITaskInfo::m_Rewards' has a wrong offset!");
static_assert(offsetof(FLandsraadUITaskInfo, m_HouseDataAsset) == 0x000130, "Member 'FLandsraadUITaskInfo::m_HouseDataAsset' has a wrong offset!");

// ScriptStruct DuneSandbox.BiomeWeatherHelperSingletonComponent
// 0x0001 (0x0001 - 0x0000)
struct FBiomeWeatherHelperSingletonComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomeWeatherHelperSingletonComponent) == 0x000001, "Wrong alignment on FBiomeWeatherHelperSingletonComponent");
static_assert(sizeof(FBiomeWeatherHelperSingletonComponent) == 0x000001, "Wrong size on FBiomeWeatherHelperSingletonComponent");

// ScriptStruct DuneSandbox.BiomeWeatherModifierComponent
// 0x0048 (0x0048 - 0x0000)
struct FBiomeWeatherModifierComponent final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentTemperatureModifier;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentSandBuildupModifier;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x18];                                      // 0x0014(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           m_CurrentSandColor;                                // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0xC];                                       // 0x003C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomeWeatherModifierComponent) == 0x000004, "Wrong alignment on FBiomeWeatherModifierComponent");
static_assert(sizeof(FBiomeWeatherModifierComponent) == 0x000048, "Wrong size on FBiomeWeatherModifierComponent");
static_assert(offsetof(FBiomeWeatherModifierComponent, CurrentTemperatureModifier) == 0x000004, "Member 'FBiomeWeatherModifierComponent::CurrentTemperatureModifier' has a wrong offset!");
static_assert(offsetof(FBiomeWeatherModifierComponent, CurrentSandBuildupModifier) == 0x000010, "Member 'FBiomeWeatherModifierComponent::CurrentSandBuildupModifier' has a wrong offset!");
static_assert(offsetof(FBiomeWeatherModifierComponent, m_CurrentSandColor) == 0x00002C, "Member 'FBiomeWeatherModifierComponent::m_CurrentSandColor' has a wrong offset!");

// ScriptStruct DuneSandbox.BootLoadObjectData
// 0x0038 (0x0038 - 0x0000)
struct FBootLoadObjectData final
{
public:
	TSoftObjectPtr<class UObject>                 ObjectRef;                                         // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESyncLoadTarget                               LoadTarget;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncLoad;                                         // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBootLoadObjectData) == 0x000008, "Wrong alignment on FBootLoadObjectData");
static_assert(sizeof(FBootLoadObjectData) == 0x000038, "Wrong size on FBootLoadObjectData");
static_assert(offsetof(FBootLoadObjectData, ObjectRef) == 0x000000, "Member 'FBootLoadObjectData::ObjectRef' has a wrong offset!");
static_assert(offsetof(FBootLoadObjectData, LoadTarget) == 0x000030, "Member 'FBootLoadObjectData::LoadTarget' has a wrong offset!");
static_assert(offsetof(FBootLoadObjectData, bSyncLoad) == 0x000031, "Member 'FBootLoadObjectData::bSyncLoad' has a wrong offset!");

// ScriptStruct DuneSandbox.InventoriesList
// 0x0010 (0x0010 - 0x0000)
struct FInventoriesList final
{
public:
	TArray<class UItemInventory*>                 Inventories;                                       // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoriesList) == 0x000008, "Wrong alignment on FInventoriesList");
static_assert(sizeof(FInventoriesList) == 0x000010, "Wrong size on FInventoriesList");
static_assert(offsetof(FInventoriesList, Inventories) == 0x000000, "Member 'FInventoriesList::Inventories' has a wrong offset!");

// ScriptStruct DuneSandbox.FeatureRedirectInputBehaviourData
// 0x0002 (0x0002 - 0x0000)
struct FFeatureRedirectInputBehaviourData final
{
public:
	EFeatureRedirectInputBehaviour                Behaviour;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerMenuScreen                             PlayerMenu;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFeatureRedirectInputBehaviourData) == 0x000001, "Wrong alignment on FFeatureRedirectInputBehaviourData");
static_assert(sizeof(FFeatureRedirectInputBehaviourData) == 0x000002, "Wrong size on FFeatureRedirectInputBehaviourData");
static_assert(offsetof(FFeatureRedirectInputBehaviourData, Behaviour) == 0x000000, "Member 'FFeatureRedirectInputBehaviourData::Behaviour' has a wrong offset!");
static_assert(offsetof(FFeatureRedirectInputBehaviourData, PlayerMenu) == 0x000001, "Member 'FFeatureRedirectInputBehaviourData::PlayerMenu' has a wrong offset!");

// ScriptStruct DuneSandbox.FeatureRedirectInputHintData
// 0x0040 (0x0040 - 0x0000)
struct FFeatureRedirectInputHintData final
{
public:
	TSubclassOf<class UDuneUserWidget>            CustomInputHintWidgetClass;                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionHintData                   Action;                                            // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeatureRedirectInputBehaviourData     BehaviourOverride;                                 // 0x0018(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LabelOverride;                                     // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
	bool                                          IsEnabledForKeyboard;                              // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabledForController;                            // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CloseTutorialWhenTriggered;                        // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bForceShowHoldIcon;                              // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFeatureRedirectInputHintData) == 0x000008, "Wrong alignment on FFeatureRedirectInputHintData");
static_assert(sizeof(FFeatureRedirectInputHintData) == 0x000040, "Wrong size on FFeatureRedirectInputHintData");
static_assert(offsetof(FFeatureRedirectInputHintData, CustomInputHintWidgetClass) == 0x000000, "Member 'FFeatureRedirectInputHintData::CustomInputHintWidgetClass' has a wrong offset!");
static_assert(offsetof(FFeatureRedirectInputHintData, Action) == 0x000008, "Member 'FFeatureRedirectInputHintData::Action' has a wrong offset!");
static_assert(offsetof(FFeatureRedirectInputHintData, BehaviourOverride) == 0x000018, "Member 'FFeatureRedirectInputHintData::BehaviourOverride' has a wrong offset!");
static_assert(offsetof(FFeatureRedirectInputHintData, LabelOverride) == 0x000020, "Member 'FFeatureRedirectInputHintData::LabelOverride' has a wrong offset!");
static_assert(offsetof(FFeatureRedirectInputHintData, IsEnabledForKeyboard) == 0x000038, "Member 'FFeatureRedirectInputHintData::IsEnabledForKeyboard' has a wrong offset!");
static_assert(offsetof(FFeatureRedirectInputHintData, IsEnabledForController) == 0x000039, "Member 'FFeatureRedirectInputHintData::IsEnabledForController' has a wrong offset!");
static_assert(offsetof(FFeatureRedirectInputHintData, CloseTutorialWhenTriggered) == 0x00003A, "Member 'FFeatureRedirectInputHintData::CloseTutorialWhenTriggered' has a wrong offset!");
static_assert(offsetof(FFeatureRedirectInputHintData, m_bForceShowHoldIcon) == 0x00003B, "Member 'FFeatureRedirectInputHintData::m_bForceShowHoldIcon' has a wrong offset!");

// ScriptStruct DuneSandbox.ECutterayType
// 0x0000 (0x0008 - 0x0008)
struct FECutterayType final : public FStringEnumValue
{
};
static_assert(alignof(FECutterayType) == 0x000004, "Wrong alignment on FECutterayType");
static_assert(sizeof(FECutterayType) == 0x000008, "Wrong size on FECutterayType");

// ScriptStruct DuneSandbox.LandsraadTaskFactionProgress
// 0x000C (0x000C - 0x0000)
struct FLandsraadTaskFactionProgress final
{
public:
	struct FEFaction                              m_Faction;                                         // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ProgressAmount;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadTaskFactionProgress) == 0x000004, "Wrong alignment on FLandsraadTaskFactionProgress");
static_assert(sizeof(FLandsraadTaskFactionProgress) == 0x00000C, "Wrong size on FLandsraadTaskFactionProgress");
static_assert(offsetof(FLandsraadTaskFactionProgress, m_Faction) == 0x000000, "Member 'FLandsraadTaskFactionProgress::m_Faction' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskFactionProgress, m_ProgressAmount) == 0x000008, "Member 'FLandsraadTaskFactionProgress::m_ProgressAmount' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadConditionProgress
// 0x000C (0x000C - 0x0000)
struct FLandsraadConditionProgress final
{
public:
	class FName                                   m_ConditionName;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ProgressAmount;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadConditionProgress) == 0x000004, "Wrong alignment on FLandsraadConditionProgress");
static_assert(sizeof(FLandsraadConditionProgress) == 0x00000C, "Wrong size on FLandsraadConditionProgress");
static_assert(offsetof(FLandsraadConditionProgress, m_ConditionName) == 0x000000, "Member 'FLandsraadConditionProgress::m_ConditionName' has a wrong offset!");
static_assert(offsetof(FLandsraadConditionProgress, m_ProgressAmount) == 0x000008, "Member 'FLandsraadConditionProgress::m_ProgressAmount' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadTaskProgress
// 0x0028 (0x0028 - 0x0000)
struct FLandsraadTaskProgress final
{
public:
	int32                                         m_BoardIndex;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLandsraadTaskFactionProgress>  m_TaskProgressPerFaction;                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLandsraadConditionProgress>    m_ProgressPerCondition;                            // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadTaskProgress) == 0x000008, "Wrong alignment on FLandsraadTaskProgress");
static_assert(sizeof(FLandsraadTaskProgress) == 0x000028, "Wrong size on FLandsraadTaskProgress");
static_assert(offsetof(FLandsraadTaskProgress, m_BoardIndex) == 0x000000, "Member 'FLandsraadTaskProgress::m_BoardIndex' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskProgress, m_TaskProgressPerFaction) == 0x000008, "Member 'FLandsraadTaskProgress::m_TaskProgressPerFaction' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskProgress, m_ProgressPerCondition) == 0x000018, "Member 'FLandsraadTaskProgress::m_ProgressPerCondition' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadBoardTaskProgress
// 0x0010 (0x0010 - 0x0000)
struct FLandsraadBoardTaskProgress final
{
public:
	TArray<struct FLandsraadTaskProgress>         m_TaskProgresses;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadBoardTaskProgress) == 0x000008, "Wrong alignment on FLandsraadBoardTaskProgress");
static_assert(sizeof(FLandsraadBoardTaskProgress) == 0x000010, "Wrong size on FLandsraadBoardTaskProgress");
static_assert(offsetof(FLandsraadBoardTaskProgress, m_TaskProgresses) == 0x000000, "Member 'FLandsraadBoardTaskProgress::m_TaskProgresses' has a wrong offset!");

// ScriptStruct DuneSandbox.BoundsComponent
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FBoundsComponent final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoundsComponent) == 0x000008, "Wrong alignment on FBoundsComponent");
static_assert(sizeof(FBoundsComponent) == 0x000038, "Wrong size on FBoundsComponent");

// ScriptStruct DuneSandbox.BuildableAudioCategoryDataRow
// 0x0050 (0x0060 - 0x0010)
struct FBuildableAudioCategoryDataRow final : public FTableRowBase
{
public:
	TMap<EBuildingActionAudioType, TSoftObjectPtr<class UFcAudioEvent>> m_ActionAudioEvents;         // 0x0010(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableAudioCategoryDataRow) == 0x000008, "Wrong alignment on FBuildableAudioCategoryDataRow");
static_assert(sizeof(FBuildableAudioCategoryDataRow) == 0x000060, "Wrong size on FBuildableAudioCategoryDataRow");
static_assert(offsetof(FBuildableAudioCategoryDataRow, m_ActionAudioEvents) == 0x000010, "Member 'FBuildableAudioCategoryDataRow::m_ActionAudioEvents' has a wrong offset!");

// ScriptStruct DuneSandbox.RingAttackParameters
// 0x0038 (0x0038 - 0x0000)
struct FRingAttackParameters final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        StartLocations;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        DropLocations;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAIAttackTier                                 AttackLevel;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRingAttackParameters) == 0x000008, "Wrong alignment on FRingAttackParameters");
static_assert(sizeof(FRingAttackParameters) == 0x000038, "Wrong size on FRingAttackParameters");
static_assert(offsetof(FRingAttackParameters, Target) == 0x000000, "Member 'FRingAttackParameters::Target' has a wrong offset!");
static_assert(offsetof(FRingAttackParameters, StartLocations) == 0x000008, "Member 'FRingAttackParameters::StartLocations' has a wrong offset!");
static_assert(offsetof(FRingAttackParameters, Radius) == 0x000018, "Member 'FRingAttackParameters::Radius' has a wrong offset!");
static_assert(offsetof(FRingAttackParameters, DropLocations) == 0x000020, "Member 'FRingAttackParameters::DropLocations' has a wrong offset!");
static_assert(offsetof(FRingAttackParameters, AttackLevel) == 0x000030, "Member 'FRingAttackParameters::AttackLevel' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterSetting
// 0x0080 (0x00B0 - 0x0030)
struct FEncounterSetting final : public FContentBlockSetting
{
public:
	struct FGameplayTagQuery                      LocationPickQuery;                                 // 0x0030(0x0048)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMaxInstancesNumber;                            // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxInstancesNumber;                                // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMaxLifetime;                                   // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxLifetimeInMin;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSpawnCooldown;                                 // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnCooldownInMin;                                // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMaxHeightDifferenceLimit;                      // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxHeightDifference;                               // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDespawnDistanceOverride;                       // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DespawnDistanceOverride;                           // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFullCycleReset;                                // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FullCycleResetTimeSeconds;                         // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FullCycleResetTimeRetrySeconds;                    // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetWithPlayerLandclaims;                        // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPersistent;                                     // 0x00AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterSetting) == 0x000008, "Wrong alignment on FEncounterSetting");
static_assert(sizeof(FEncounterSetting) == 0x0000B0, "Wrong size on FEncounterSetting");
static_assert(offsetof(FEncounterSetting, LocationPickQuery) == 0x000030, "Member 'FEncounterSetting::LocationPickQuery' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, bHasMaxInstancesNumber) == 0x000078, "Member 'FEncounterSetting::bHasMaxInstancesNumber' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, MaxInstancesNumber) == 0x00007C, "Member 'FEncounterSetting::MaxInstancesNumber' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, bHasMaxLifetime) == 0x000080, "Member 'FEncounterSetting::bHasMaxLifetime' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, MaxLifetimeInMin) == 0x000084, "Member 'FEncounterSetting::MaxLifetimeInMin' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, bHasSpawnCooldown) == 0x000088, "Member 'FEncounterSetting::bHasSpawnCooldown' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, SpawnCooldownInMin) == 0x00008C, "Member 'FEncounterSetting::SpawnCooldownInMin' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, bHasMaxHeightDifferenceLimit) == 0x000090, "Member 'FEncounterSetting::bHasMaxHeightDifferenceLimit' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, MaxHeightDifference) == 0x000094, "Member 'FEncounterSetting::MaxHeightDifference' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, bHasDespawnDistanceOverride) == 0x000098, "Member 'FEncounterSetting::bHasDespawnDistanceOverride' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, DespawnDistanceOverride) == 0x00009C, "Member 'FEncounterSetting::DespawnDistanceOverride' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, bHasFullCycleReset) == 0x0000A0, "Member 'FEncounterSetting::bHasFullCycleReset' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, FullCycleResetTimeSeconds) == 0x0000A4, "Member 'FEncounterSetting::FullCycleResetTimeSeconds' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, FullCycleResetTimeRetrySeconds) == 0x0000A8, "Member 'FEncounterSetting::FullCycleResetTimeRetrySeconds' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, bResetWithPlayerLandclaims) == 0x0000AC, "Member 'FEncounterSetting::bResetWithPlayerLandclaims' has a wrong offset!");
static_assert(offsetof(FEncounterSetting, bIsPersistent) == 0x0000AD, "Member 'FEncounterSetting::bIsPersistent' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAudioMasteringMode
// 0x0020 (0x0020 - 0x0000)
struct FDuneAudioMasteringMode final
{
public:
	class FText                                   m_DisplayName;                                     // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_ActivateEvent;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAudioMasteringMode) == 0x000008, "Wrong alignment on FDuneAudioMasteringMode");
static_assert(sizeof(FDuneAudioMasteringMode) == 0x000020, "Wrong size on FDuneAudioMasteringMode");
static_assert(offsetof(FDuneAudioMasteringMode, m_DisplayName) == 0x000000, "Member 'FDuneAudioMasteringMode::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FDuneAudioMasteringMode, m_ActivateEvent) == 0x000018, "Member 'FDuneAudioMasteringMode::m_ActivateEvent' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableComponent
// 0x0001 (0x0001 - 0x0000)
struct FBuildableComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildableComponent) == 0x000001, "Wrong alignment on FBuildableComponent");
static_assert(sizeof(FBuildableComponent) == 0x000001, "Wrong size on FBuildableComponent");

// ScriptStruct DuneSandbox.SettlementNpcRow
// 0x0028 (0x0038 - 0x0010)
struct FSettlementNpcRow final : public FTableRowBase
{
public:
	struct FDataTableRowHandle                    m_NpcConfigRow;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   m_NpcConfigName;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bSelectByName;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_MinimumSpawnCount;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIncludeInRandomSelection;                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettlementNpcRow) == 0x000008, "Wrong alignment on FSettlementNpcRow");
static_assert(sizeof(FSettlementNpcRow) == 0x000038, "Wrong size on FSettlementNpcRow");
static_assert(offsetof(FSettlementNpcRow, m_NpcConfigRow) == 0x000010, "Member 'FSettlementNpcRow::m_NpcConfigRow' has a wrong offset!");
static_assert(offsetof(FSettlementNpcRow, m_NpcConfigName) == 0x000020, "Member 'FSettlementNpcRow::m_NpcConfigName' has a wrong offset!");
static_assert(offsetof(FSettlementNpcRow, m_bSelectByName) == 0x000028, "Member 'FSettlementNpcRow::m_bSelectByName' has a wrong offset!");
static_assert(offsetof(FSettlementNpcRow, m_MinimumSpawnCount) == 0x00002C, "Member 'FSettlementNpcRow::m_MinimumSpawnCount' has a wrong offset!");
static_assert(offsetof(FSettlementNpcRow, m_bIncludeInRandomSelection) == 0x000030, "Member 'FSettlementNpcRow::m_bIncludeInRandomSelection' has a wrong offset!");

// ScriptStruct DuneSandbox.FillableItemStats
// 0x0020 (0x0020 - 0x0000)
struct FFillableItemStats final
{
public:
	float                                         CurrentAmount;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAmount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FillableType;                                      // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FillableTypeRestriction;                           // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsContainer;                                      // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFillableItemStats) == 0x000004, "Wrong alignment on FFillableItemStats");
static_assert(sizeof(FFillableItemStats) == 0x000020, "Wrong size on FFillableItemStats");
static_assert(offsetof(FFillableItemStats, CurrentAmount) == 0x000000, "Member 'FFillableItemStats::CurrentAmount' has a wrong offset!");
static_assert(offsetof(FFillableItemStats, MaxAmount) == 0x000008, "Member 'FFillableItemStats::MaxAmount' has a wrong offset!");
static_assert(offsetof(FFillableItemStats, FillableType) == 0x00000C, "Member 'FFillableItemStats::FillableType' has a wrong offset!");
static_assert(offsetof(FFillableItemStats, FillableTypeRestriction) == 0x000014, "Member 'FFillableItemStats::FillableTypeRestriction' has a wrong offset!");
static_assert(offsetof(FFillableItemStats, bIsContainer) == 0x00001C, "Member 'FFillableItemStats::bIsContainer' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimNode_DMSequencePlayer
// 0x0010 (0x0058 - 0x0048)
struct FAnimNode_DMSequencePlayer final : public FAnimNode_SequencePlayer
{
public:
	float                                         InDistance;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCurveName;                                       // 0x004C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DMSequencePlayer) == 0x000008, "Wrong alignment on FAnimNode_DMSequencePlayer");
static_assert(sizeof(FAnimNode_DMSequencePlayer) == 0x000058, "Wrong size on FAnimNode_DMSequencePlayer");
static_assert(offsetof(FAnimNode_DMSequencePlayer, InDistance) == 0x000048, "Member 'FAnimNode_DMSequencePlayer::InDistance' has a wrong offset!");
static_assert(offsetof(FAnimNode_DMSequencePlayer, InCurveName) == 0x00004C, "Member 'FAnimNode_DMSequencePlayer::InCurveName' has a wrong offset!");

// ScriptStruct DuneSandbox.HearingSenseConfig
// 0x0010 (0x0010 - 0x0000)
struct FHearingSenseConfig final
{
public:
	float                                         m_HearingRange;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LosHearingRange;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDetectFlyBys;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDetectWeaponFire;                               // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDetectFootstep;                                 // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDetectBark;                                     // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FlyByRange;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHearingSenseConfig) == 0x000004, "Wrong alignment on FHearingSenseConfig");
static_assert(sizeof(FHearingSenseConfig) == 0x000010, "Wrong size on FHearingSenseConfig");
static_assert(offsetof(FHearingSenseConfig, m_HearingRange) == 0x000000, "Member 'FHearingSenseConfig::m_HearingRange' has a wrong offset!");
static_assert(offsetof(FHearingSenseConfig, m_LosHearingRange) == 0x000004, "Member 'FHearingSenseConfig::m_LosHearingRange' has a wrong offset!");
static_assert(offsetof(FHearingSenseConfig, m_bDetectFlyBys) == 0x000008, "Member 'FHearingSenseConfig::m_bDetectFlyBys' has a wrong offset!");
static_assert(offsetof(FHearingSenseConfig, m_bDetectWeaponFire) == 0x000009, "Member 'FHearingSenseConfig::m_bDetectWeaponFire' has a wrong offset!");
static_assert(offsetof(FHearingSenseConfig, m_bDetectFootstep) == 0x00000A, "Member 'FHearingSenseConfig::m_bDetectFootstep' has a wrong offset!");
static_assert(offsetof(FHearingSenseConfig, m_bDetectBark) == 0x00000B, "Member 'FHearingSenseConfig::m_bDetectBark' has a wrong offset!");
static_assert(offsetof(FHearingSenseConfig, m_FlyByRange) == 0x00000C, "Member 'FHearingSenseConfig::m_FlyByRange' has a wrong offset!");

// ScriptStruct DuneSandbox.EquippableItemStats
// 0x0020 (0x0020 - 0x0000)
struct FEquippableItemStats final
{
public:
	int32                                         EquipLocation;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MutableRowName;                                    // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemTier;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          GameplayEffectOnEquip;                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          GameplayEffectOnActivate;                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquippableItemStats) == 0x000008, "Wrong alignment on FEquippableItemStats");
static_assert(sizeof(FEquippableItemStats) == 0x000020, "Wrong size on FEquippableItemStats");
static_assert(offsetof(FEquippableItemStats, EquipLocation) == 0x000000, "Member 'FEquippableItemStats::EquipLocation' has a wrong offset!");
static_assert(offsetof(FEquippableItemStats, MutableRowName) == 0x000004, "Member 'FEquippableItemStats::MutableRowName' has a wrong offset!");
static_assert(offsetof(FEquippableItemStats, ItemTier) == 0x00000C, "Member 'FEquippableItemStats::ItemTier' has a wrong offset!");
static_assert(offsetof(FEquippableItemStats, GameplayEffectOnEquip) == 0x000010, "Member 'FEquippableItemStats::GameplayEffectOnEquip' has a wrong offset!");
static_assert(offsetof(FEquippableItemStats, GameplayEffectOnActivate) == 0x000018, "Member 'FEquippableItemStats::GameplayEffectOnActivate' has a wrong offset!");

// ScriptStruct DuneSandbox.EquippableItemStatsComponent_BlueprintWrapper
// 0x0080 (0x0080 - 0x0000)
struct FEquippableItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEquippableItemStats                   EquippableItemStats;                               // 0x0060(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquippableItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FEquippableItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FEquippableItemStatsComponent_BlueprintWrapper) == 0x000080, "Wrong size on FEquippableItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FEquippableItemStatsComponent_BlueprintWrapper, EquippableItemStats) == 0x000060, "Member 'FEquippableItemStatsComponent_BlueprintWrapper::EquippableItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableDebugData
// 0x0068 (0x0068 - 0x0000)
struct FBuildableDebugData
{
public:
	class FString                                 m_BuildableName;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_BuildableClass;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_DisplayName;                                     // 0x0020(0x0018)(NativeAccessSpecifierPublic)
	class FName                                   m_CategoryName;                                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEntityId                              m_BuildableEntityId;                               // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CurrentHealth;                                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxHealth;                                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ShelterPercentage;                               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          m_StabilizationState;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_StabilizationTimeLeft;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SmartRelevancyDistanceSquared;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BuildableBoundsSizeSquared;                      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bHasHologramFillStability;                       // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildableDebugData) == 0x000008, "Wrong alignment on FBuildableDebugData");
static_assert(sizeof(FBuildableDebugData) == 0x000068, "Wrong size on FBuildableDebugData");
static_assert(offsetof(FBuildableDebugData, m_BuildableName) == 0x000000, "Member 'FBuildableDebugData::m_BuildableName' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_BuildableClass) == 0x000010, "Member 'FBuildableDebugData::m_BuildableClass' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_DisplayName) == 0x000020, "Member 'FBuildableDebugData::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_CategoryName) == 0x000038, "Member 'FBuildableDebugData::m_CategoryName' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_BuildableEntityId) == 0x000040, "Member 'FBuildableDebugData::m_BuildableEntityId' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_CurrentHealth) == 0x000048, "Member 'FBuildableDebugData::m_CurrentHealth' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_MaxHealth) == 0x00004C, "Member 'FBuildableDebugData::m_MaxHealth' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_ShelterPercentage) == 0x000050, "Member 'FBuildableDebugData::m_ShelterPercentage' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_StabilizationState) == 0x000054, "Member 'FBuildableDebugData::m_StabilizationState' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_StabilizationTimeLeft) == 0x000058, "Member 'FBuildableDebugData::m_StabilizationTimeLeft' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_SmartRelevancyDistanceSquared) == 0x00005C, "Member 'FBuildableDebugData::m_SmartRelevancyDistanceSquared' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_BuildableBoundsSizeSquared) == 0x000060, "Member 'FBuildableDebugData::m_BuildableBoundsSizeSquared' has a wrong offset!");
static_assert(offsetof(FBuildableDebugData, m_bHasHologramFillStability) == 0x000064, "Member 'FBuildableDebugData::m_bHasHologramFillStability' has a wrong offset!");

// ScriptStruct DuneSandbox.LoreObjectHistory
// 0x0050 (0x0050 - 0x0000)
struct FLoreObjectHistory final
{
public:
	TSet<struct FGuid>                            m_Identifiers;                                     // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoreObjectHistory) == 0x000008, "Wrong alignment on FLoreObjectHistory");
static_assert(sizeof(FLoreObjectHistory) == 0x000050, "Wrong size on FLoreObjectHistory");
static_assert(offsetof(FLoreObjectHistory, m_Identifiers) == 0x000000, "Member 'FLoreObjectHistory::m_Identifiers' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingDebugData
// 0x0010 (0x0078 - 0x0068)
struct FBuildingDebugData final : public FBuildableDebugData
{
public:
	struct FEntityId                              m_TotemEntityId;                                   // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Stability;                                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingDebugData) == 0x000008, "Wrong alignment on FBuildingDebugData");
static_assert(sizeof(FBuildingDebugData) == 0x000078, "Wrong size on FBuildingDebugData");
static_assert(offsetof(FBuildingDebugData, m_TotemEntityId) == 0x000068, "Member 'FBuildingDebugData::m_TotemEntityId' has a wrong offset!");
static_assert(offsetof(FBuildingDebugData, m_Stability) == 0x000070, "Member 'FBuildingDebugData::m_Stability' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockTemplateSubLevelGroupSettings
// 0x0001 (0x0001 - 0x0000)
struct FTerrainBlockTemplateSubLevelGroupSettings final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockTemplateSubLevelGroupSettings) == 0x000001, "Wrong alignment on FTerrainBlockTemplateSubLevelGroupSettings");
static_assert(sizeof(FTerrainBlockTemplateSubLevelGroupSettings) == 0x000001, "Wrong size on FTerrainBlockTemplateSubLevelGroupSettings");
static_assert(offsetof(FTerrainBlockTemplateSubLevelGroupSettings, bIsEnabled) == 0x000000, "Member 'FTerrainBlockTemplateSubLevelGroupSettings::bIsEnabled' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockTemplateSubLevelGroupSettingsOverride
// 0x0028 (0x0028 - 0x0000)
struct FTerrainBlockTemplateSubLevelGroupSettingsOverride final
{
public:
	class FString                                 Alias;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoClear, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldOverrideIsEnabled;                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTerrainBlockTemplateSubLevelGroupSettingsOverride) == 0x000008, "Wrong alignment on FTerrainBlockTemplateSubLevelGroupSettingsOverride");
static_assert(sizeof(FTerrainBlockTemplateSubLevelGroupSettingsOverride) == 0x000028, "Wrong size on FTerrainBlockTemplateSubLevelGroupSettingsOverride");
static_assert(offsetof(FTerrainBlockTemplateSubLevelGroupSettingsOverride, Alias) == 0x000000, "Member 'FTerrainBlockTemplateSubLevelGroupSettingsOverride::Alias' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelGroupSettingsOverride, GroupName) == 0x000010, "Member 'FTerrainBlockTemplateSubLevelGroupSettingsOverride::GroupName' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelGroupSettingsOverride, bShouldOverrideIsEnabled) == 0x000020, "Member 'FTerrainBlockTemplateSubLevelGroupSettingsOverride::bShouldOverrideIsEnabled' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelGroupSettingsOverride, bIsEnabled) == 0x000021, "Member 'FTerrainBlockTemplateSubLevelGroupSettingsOverride::bIsEnabled' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockTemplateSubLevelContentBlockSettings
// 0x00A8 (0x00A8 - 0x0000)
struct FTerrainBlockTemplateSubLevelContentBlockSettings final
{
public:
	class FString                                 Alias;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoClear, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FString>                           GroupsNames;                                       // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoClear, RepSkip, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ContentBlockActor;                                 // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldOverrideIsEnabled;                          // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldOverrideTerrainBlockAsset;                  // 0x0082(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTerrainBlockDataAsset*                 TerrainBlockAsset;                                 // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldOverrideSubLevelsGroups;                    // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTerrainBlockTemplateSubLevelGroupSettingsOverride> SubLevelsGroupsOverride;       // 0x0098(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockTemplateSubLevelContentBlockSettings) == 0x000008, "Wrong alignment on FTerrainBlockTemplateSubLevelContentBlockSettings");
static_assert(sizeof(FTerrainBlockTemplateSubLevelContentBlockSettings) == 0x0000A8, "Wrong size on FTerrainBlockTemplateSubLevelContentBlockSettings");
static_assert(offsetof(FTerrainBlockTemplateSubLevelContentBlockSettings, Alias) == 0x000000, "Member 'FTerrainBlockTemplateSubLevelContentBlockSettings::Alias' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelContentBlockSettings, GroupsNames) == 0x000010, "Member 'FTerrainBlockTemplateSubLevelContentBlockSettings::GroupsNames' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelContentBlockSettings, ContentBlockActor) == 0x000060, "Member 'FTerrainBlockTemplateSubLevelContentBlockSettings::ContentBlockActor' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelContentBlockSettings, bShouldOverrideIsEnabled) == 0x000080, "Member 'FTerrainBlockTemplateSubLevelContentBlockSettings::bShouldOverrideIsEnabled' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelContentBlockSettings, bIsEnabled) == 0x000081, "Member 'FTerrainBlockTemplateSubLevelContentBlockSettings::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelContentBlockSettings, bShouldOverrideTerrainBlockAsset) == 0x000082, "Member 'FTerrainBlockTemplateSubLevelContentBlockSettings::bShouldOverrideTerrainBlockAsset' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelContentBlockSettings, TerrainBlockAsset) == 0x000088, "Member 'FTerrainBlockTemplateSubLevelContentBlockSettings::TerrainBlockAsset' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelContentBlockSettings, bShouldOverrideSubLevelsGroups) == 0x000090, "Member 'FTerrainBlockTemplateSubLevelContentBlockSettings::bShouldOverrideSubLevelsGroups' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelContentBlockSettings, SubLevelsGroupsOverride) == 0x000098, "Member 'FTerrainBlockTemplateSubLevelContentBlockSettings::SubLevelsGroupsOverride' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockSubLevelInstanceData
// 0x00E8 (0x00E8 - 0x0000)
struct FTerrainBlockSubLevelInstanceData final
{
public:
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   OriginalLevelBounds;                               // 0x0048(0x0038)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         StreamingDistance;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FString>                           GroupsNames;                                       // 0x0088(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FTerrainBlockSubLevelInstanceLodData> LodsData;                                    // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockSubLevelInstanceData) == 0x000008, "Wrong alignment on FTerrainBlockSubLevelInstanceData");
static_assert(sizeof(FTerrainBlockSubLevelInstanceData) == 0x0000E8, "Wrong size on FTerrainBlockSubLevelInstanceData");
static_assert(offsetof(FTerrainBlockSubLevelInstanceData, Level) == 0x000000, "Member 'FTerrainBlockSubLevelInstanceData::Level' has a wrong offset!");
static_assert(offsetof(FTerrainBlockSubLevelInstanceData, RelativeLocation) == 0x000030, "Member 'FTerrainBlockSubLevelInstanceData::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FTerrainBlockSubLevelInstanceData, OriginalLevelBounds) == 0x000048, "Member 'FTerrainBlockSubLevelInstanceData::OriginalLevelBounds' has a wrong offset!");
static_assert(offsetof(FTerrainBlockSubLevelInstanceData, StreamingDistance) == 0x000080, "Member 'FTerrainBlockSubLevelInstanceData::StreamingDistance' has a wrong offset!");
static_assert(offsetof(FTerrainBlockSubLevelInstanceData, GroupsNames) == 0x000088, "Member 'FTerrainBlockSubLevelInstanceData::GroupsNames' has a wrong offset!");
static_assert(offsetof(FTerrainBlockSubLevelInstanceData, LodsData) == 0x0000D8, "Member 'FTerrainBlockSubLevelInstanceData::LodsData' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockTemplateRowBase
// 0x00D8 (0x00E8 - 0x0010)
struct FTerrainBlockTemplateRowBase final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   OverallBounds;                                     // 0x0040(0x0038)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FTerrainBlockTemplateSubLevelGroupSettings> SubLevelsGroups;          // 0x0078(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FTerrainBlockTemplateSubLevelContentBlockSettings> SubContentBlocksSettings;       // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTerrainBlockSubLevelInstanceData> SubLevels;                                      // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockTemplateRowBase) == 0x000008, "Wrong alignment on FTerrainBlockTemplateRowBase");
static_assert(sizeof(FTerrainBlockTemplateRowBase) == 0x0000E8, "Wrong size on FTerrainBlockTemplateRowBase");
static_assert(offsetof(FTerrainBlockTemplateRowBase, Level) == 0x000010, "Member 'FTerrainBlockTemplateRowBase::Level' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateRowBase, OverallBounds) == 0x000040, "Member 'FTerrainBlockTemplateRowBase::OverallBounds' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateRowBase, SubLevelsGroups) == 0x000078, "Member 'FTerrainBlockTemplateRowBase::SubLevelsGroups' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateRowBase, SubContentBlocksSettings) == 0x0000C8, "Member 'FTerrainBlockTemplateRowBase::SubContentBlocksSettings' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateRowBase, SubLevels) == 0x0000D8, "Member 'FTerrainBlockTemplateRowBase::SubLevels' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterRowBase
// 0x00F0 (0x0100 - 0x0010)
struct FEncounterRowBase final : public FTableRowBase
{
public:
	struct FEncounterSetting                      Settings;                                          // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  BaseLevel;                                         // 0x00C0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTerrainBlockTemplateRowBase>   Versions;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterRowBase) == 0x000008, "Wrong alignment on FEncounterRowBase");
static_assert(sizeof(FEncounterRowBase) == 0x000100, "Wrong size on FEncounterRowBase");
static_assert(offsetof(FEncounterRowBase, Settings) == 0x000010, "Member 'FEncounterRowBase::Settings' has a wrong offset!");
static_assert(offsetof(FEncounterRowBase, BaseLevel) == 0x0000C0, "Member 'FEncounterRowBase::BaseLevel' has a wrong offset!");
static_assert(offsetof(FEncounterRowBase, Versions) == 0x0000F0, "Member 'FEncounterRowBase::Versions' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceableDebugData
// 0x0018 (0x0080 - 0x0068)
struct FPlaceableDebugData final : public FBuildableDebugData
{
public:
	bool                                          m_bIsPowerCircuitEnabled;                          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bInventoryCircuitHasPower;                       // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_PlaceablePowerCircuitId;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_PlaceablePowerProduction;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_PlaceablePowerConsumption;                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsPlaceableInventoryEnabled;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_PlaceableInventoryId;                            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableDebugData) == 0x000008, "Wrong alignment on FPlaceableDebugData");
static_assert(sizeof(FPlaceableDebugData) == 0x000080, "Wrong size on FPlaceableDebugData");
static_assert(offsetof(FPlaceableDebugData, m_bIsPowerCircuitEnabled) == 0x000068, "Member 'FPlaceableDebugData::m_bIsPowerCircuitEnabled' has a wrong offset!");
static_assert(offsetof(FPlaceableDebugData, m_bInventoryCircuitHasPower) == 0x000069, "Member 'FPlaceableDebugData::m_bInventoryCircuitHasPower' has a wrong offset!");
static_assert(offsetof(FPlaceableDebugData, m_PlaceablePowerCircuitId) == 0x00006C, "Member 'FPlaceableDebugData::m_PlaceablePowerCircuitId' has a wrong offset!");
static_assert(offsetof(FPlaceableDebugData, m_PlaceablePowerProduction) == 0x000070, "Member 'FPlaceableDebugData::m_PlaceablePowerProduction' has a wrong offset!");
static_assert(offsetof(FPlaceableDebugData, m_PlaceablePowerConsumption) == 0x000074, "Member 'FPlaceableDebugData::m_PlaceablePowerConsumption' has a wrong offset!");
static_assert(offsetof(FPlaceableDebugData, m_IsPlaceableInventoryEnabled) == 0x000078, "Member 'FPlaceableDebugData::m_IsPlaceableInventoryEnabled' has a wrong offset!");
static_assert(offsetof(FPlaceableDebugData, m_PlaceableInventoryId) == 0x00007C, "Member 'FPlaceableDebugData::m_PlaceableInventoryId' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableStabilizationGroupType
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableStabilizationGroupType final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableStabilizationGroupType) == 0x000004, "Wrong alignment on FEBuildableStabilizationGroupType");
static_assert(sizeof(FEBuildableStabilizationGroupType) == 0x000008, "Wrong size on FEBuildableStabilizationGroupType");

// ScriptStruct DuneSandbox.EBuildableDamageMitigationGroupType
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableDamageMitigationGroupType final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableDamageMitigationGroupType) == 0x000004, "Wrong alignment on FEBuildableDamageMitigationGroupType");
static_assert(sizeof(FEBuildableDamageMitigationGroupType) == 0x000008, "Wrong size on FEBuildableDamageMitigationGroupType");

// ScriptStruct DuneSandbox.BuildableTierData
// 0x0078 (0x0078 - 0x0000)
struct FBuildableTierData final
{
public:
	TMap<struct FEItemTemplateID, int32>          m_PlacementCosts;                                  // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FEItemTemplateID>               m_CostsToIgnoreOnRepair;                           // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_InitialHealth;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxHealth;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEBuildableStabilizationGroupType      m_StabilizationGroupType;                          // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEBuildableDamageMitigationGroupType   m_DamageMitigationGroup;                           // 0x0070(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableTierData) == 0x000008, "Wrong alignment on FBuildableTierData");
static_assert(sizeof(FBuildableTierData) == 0x000078, "Wrong size on FBuildableTierData");
static_assert(offsetof(FBuildableTierData, m_PlacementCosts) == 0x000000, "Member 'FBuildableTierData::m_PlacementCosts' has a wrong offset!");
static_assert(offsetof(FBuildableTierData, m_CostsToIgnoreOnRepair) == 0x000050, "Member 'FBuildableTierData::m_CostsToIgnoreOnRepair' has a wrong offset!");
static_assert(offsetof(FBuildableTierData, m_InitialHealth) == 0x000060, "Member 'FBuildableTierData::m_InitialHealth' has a wrong offset!");
static_assert(offsetof(FBuildableTierData, m_MaxHealth) == 0x000064, "Member 'FBuildableTierData::m_MaxHealth' has a wrong offset!");
static_assert(offsetof(FBuildableTierData, m_StabilizationGroupType) == 0x000068, "Member 'FBuildableTierData::m_StabilizationGroupType' has a wrong offset!");
static_assert(offsetof(FBuildableTierData, m_DamageMitigationGroup) == 0x000070, "Member 'FBuildableTierData::m_DamageMitigationGroup' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableGroupDataRowBase
// 0x00C8 (0x00D8 - 0x0010)
struct FBuildableGroupDataRowBase final : public FTableRowBase
{
public:
	TMap<struct FEBuildableTier, struct FBuildableTierData> m_BuildableTierData;                     // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEBuildableSocketSetup                 m_SocketSetup;                                     // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEBuildableGroupType>           m_IgnoreBuildableGroups;                           // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEBuildableType                        m_BlockoutBuildable;                               // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEBuildableStructureCategoryType       m_BuildableStructureCategory;                      // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEBuildableGroupType>           m_CanUpgradeFrom;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bShowBrushOrientation;                           // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShowBrushOrientationArrow;                      // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBrushPlacementSnapRotationType               m_BrushPlacementSnapRotation;                      // 0x009A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuildableBrushCornersShape                   m_BuildableBrushCornersShape;                      // 0x009B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_GhostScoreCenterOffset;                          // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GhostScoreCenterOffsetVerticalPercentage;        // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GhostFacingCameraAngleOffset;                    // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GhostScoreDotProductMultiplier;                  // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GhostScoreDistToLookPointMultiplier;             // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GhostScorePlayerProximityMultiplier;             // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GhostScoreFacingCameraMultiplier;                // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GhostScoreSameSnapMultiplier;                    // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GhostScoreRotationLockedSnapPointMultiplier;     // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableGroupDataRowBase) == 0x000008, "Wrong alignment on FBuildableGroupDataRowBase");
static_assert(sizeof(FBuildableGroupDataRowBase) == 0x0000D8, "Wrong size on FBuildableGroupDataRowBase");
static_assert(offsetof(FBuildableGroupDataRowBase, m_BuildableTierData) == 0x000010, "Member 'FBuildableGroupDataRowBase::m_BuildableTierData' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_SocketSetup) == 0x000060, "Member 'FBuildableGroupDataRowBase::m_SocketSetup' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_IgnoreBuildableGroups) == 0x000068, "Member 'FBuildableGroupDataRowBase::m_IgnoreBuildableGroups' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_BlockoutBuildable) == 0x000078, "Member 'FBuildableGroupDataRowBase::m_BlockoutBuildable' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_BuildableStructureCategory) == 0x000080, "Member 'FBuildableGroupDataRowBase::m_BuildableStructureCategory' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_CanUpgradeFrom) == 0x000088, "Member 'FBuildableGroupDataRowBase::m_CanUpgradeFrom' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_bShowBrushOrientation) == 0x000098, "Member 'FBuildableGroupDataRowBase::m_bShowBrushOrientation' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_bShowBrushOrientationArrow) == 0x000099, "Member 'FBuildableGroupDataRowBase::m_bShowBrushOrientationArrow' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_BrushPlacementSnapRotation) == 0x00009A, "Member 'FBuildableGroupDataRowBase::m_BrushPlacementSnapRotation' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_BuildableBrushCornersShape) == 0x00009B, "Member 'FBuildableGroupDataRowBase::m_BuildableBrushCornersShape' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_GhostScoreCenterOffset) == 0x0000A0, "Member 'FBuildableGroupDataRowBase::m_GhostScoreCenterOffset' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_GhostScoreCenterOffsetVerticalPercentage) == 0x0000B8, "Member 'FBuildableGroupDataRowBase::m_GhostScoreCenterOffsetVerticalPercentage' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_GhostFacingCameraAngleOffset) == 0x0000BC, "Member 'FBuildableGroupDataRowBase::m_GhostFacingCameraAngleOffset' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_GhostScoreDotProductMultiplier) == 0x0000C0, "Member 'FBuildableGroupDataRowBase::m_GhostScoreDotProductMultiplier' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_GhostScoreDistToLookPointMultiplier) == 0x0000C4, "Member 'FBuildableGroupDataRowBase::m_GhostScoreDistToLookPointMultiplier' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_GhostScorePlayerProximityMultiplier) == 0x0000C8, "Member 'FBuildableGroupDataRowBase::m_GhostScorePlayerProximityMultiplier' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_GhostScoreFacingCameraMultiplier) == 0x0000CC, "Member 'FBuildableGroupDataRowBase::m_GhostScoreFacingCameraMultiplier' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_GhostScoreSameSnapMultiplier) == 0x0000D0, "Member 'FBuildableGroupDataRowBase::m_GhostScoreSameSnapMultiplier' has a wrong offset!");
static_assert(offsetof(FBuildableGroupDataRowBase, m_GhostScoreRotationLockedSnapPointMultiplier) == 0x0000D4, "Member 'FBuildableGroupDataRowBase::m_GhostScoreRotationLockedSnapPointMultiplier' has a wrong offset!");

// ScriptStruct DuneSandbox.AudioThreatFlybyEvent
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FAudioThreatFlybyEvent final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioThreatFlybyEvent) == 0x000004, "Wrong alignment on FAudioThreatFlybyEvent");
static_assert(sizeof(FAudioThreatFlybyEvent) == 0x00000C, "Wrong size on FAudioThreatFlybyEvent");

// ScriptStruct DuneSandbox.LandsraadDecreeInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FLandsraadDecreeInfo final
{
public:
	class FName                                   m_DecreeName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_DecreeDisplayName;                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_DecreeDescription;                               // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_DecreIcon;                                       // 0x0038(0x0030)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_EffectText;                                      // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_EffectIcon;                                      // 0x0080(0x0030)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadDecreeInfo) == 0x000008, "Wrong alignment on FLandsraadDecreeInfo");
static_assert(sizeof(FLandsraadDecreeInfo) == 0x0000B0, "Wrong size on FLandsraadDecreeInfo");
static_assert(offsetof(FLandsraadDecreeInfo, m_DecreeName) == 0x000000, "Member 'FLandsraadDecreeInfo::m_DecreeName' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeInfo, m_DecreeDisplayName) == 0x000008, "Member 'FLandsraadDecreeInfo::m_DecreeDisplayName' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeInfo, m_DecreeDescription) == 0x000020, "Member 'FLandsraadDecreeInfo::m_DecreeDescription' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeInfo, m_DecreIcon) == 0x000038, "Member 'FLandsraadDecreeInfo::m_DecreIcon' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeInfo, m_EffectText) == 0x000068, "Member 'FLandsraadDecreeInfo::m_EffectText' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeInfo, m_EffectIcon) == 0x000080, "Member 'FLandsraadDecreeInfo::m_EffectIcon' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponHolsterSetterComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FWeaponHolsterSetterComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponHolsterSetterComponent) == 0x000008, "Wrong alignment on FWeaponHolsterSetterComponent");
static_assert(sizeof(FWeaponHolsterSetterComponent) == 0x000010, "Wrong size on FWeaponHolsterSetterComponent");

// ScriptStruct DuneSandbox.AnimWeaponRowBase
// 0x0050 (0x0060 - 0x0010)
struct FAnimWeaponRowBase final : public FTableRowBase
{
public:
	TMap<EAnimWeaponType, struct FWeaponAnimData> CharacterWeaponTemplates;                          // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimWeaponRowBase) == 0x000008, "Wrong alignment on FAnimWeaponRowBase");
static_assert(sizeof(FAnimWeaponRowBase) == 0x000060, "Wrong size on FAnimWeaponRowBase");
static_assert(offsetof(FAnimWeaponRowBase, CharacterWeaponTemplates) == 0x000010, "Member 'FAnimWeaponRowBase::CharacterWeaponTemplates' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableItemStatsComponent_BlueprintWrapper
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FBuildableItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBuildableItemStats                    BuildableItemStats;                                // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FBuildableItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FBuildableItemStatsComponent_BlueprintWrapper) == 0x000038, "Wrong size on FBuildableItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FBuildableItemStatsComponent_BlueprintWrapper, BuildableItemStats) == 0x000030, "Member 'FBuildableItemStatsComponent_BlueprintWrapper::BuildableItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.EWeaponModAudioRowName
// 0x0000 (0x0008 - 0x0008)
struct FEWeaponModAudioRowName final : public FStringEnumValue
{
};
static_assert(alignof(FEWeaponModAudioRowName) == 0x000004, "Wrong alignment on FEWeaponModAudioRowName");
static_assert(sizeof(FEWeaponModAudioRowName) == 0x000008, "Wrong size on FEWeaponModAudioRowName");

// ScriptStruct DuneSandbox.DunePlayerVoiceGrunt
// 0x0038 (0x0038 - 0x0000)
struct FDunePlayerVoiceGrunt final
{
public:
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEvent;                                      // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Probability;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDunePlayerVoiceGrunt) == 0x000008, "Wrong alignment on FDunePlayerVoiceGrunt");
static_assert(sizeof(FDunePlayerVoiceGrunt) == 0x000038, "Wrong size on FDunePlayerVoiceGrunt");
static_assert(offsetof(FDunePlayerVoiceGrunt, m_AudioEvent) == 0x000000, "Member 'FDunePlayerVoiceGrunt::m_AudioEvent' has a wrong offset!");
static_assert(offsetof(FDunePlayerVoiceGrunt, m_Probability) == 0x000030, "Member 'FDunePlayerVoiceGrunt::m_Probability' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterArea
// 0x0030 (0x0030 - 0x0000)
struct FEncounterArea final
{
public:
	int32                                         DiameterInMeters;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsTagsCheckRequired;                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0010(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterArea) == 0x000008, "Wrong alignment on FEncounterArea");
static_assert(sizeof(FEncounterArea) == 0x000030, "Wrong size on FEncounterArea");
static_assert(offsetof(FEncounterArea, DiameterInMeters) == 0x000000, "Member 'FEncounterArea::DiameterInMeters' has a wrong offset!");
static_assert(offsetof(FEncounterArea, bIsTagsCheckRequired) == 0x000008, "Member 'FEncounterArea::bIsTagsCheckRequired' has a wrong offset!");
static_assert(offsetof(FEncounterArea, Tags) == 0x000010, "Member 'FEncounterArea::Tags' has a wrong offset!");

// ScriptStruct DuneSandbox.MapAreaBuildableRestrictionData
// 0x0018 (0x0018 - 0x0000)
struct FMapAreaBuildableRestrictionData final
{
public:
	struct FMapAreaIdRef                          m_MapArea;                                         // 0x0000(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEBuildableGroupType>           m_BuildablesToBlockPlacement;                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapAreaBuildableRestrictionData) == 0x000008, "Wrong alignment on FMapAreaBuildableRestrictionData");
static_assert(sizeof(FMapAreaBuildableRestrictionData) == 0x000018, "Wrong size on FMapAreaBuildableRestrictionData");
static_assert(offsetof(FMapAreaBuildableRestrictionData, m_MapArea) == 0x000000, "Member 'FMapAreaBuildableRestrictionData::m_MapArea' has a wrong offset!");
static_assert(offsetof(FMapAreaBuildableRestrictionData, m_BuildablesToBlockPlacement) == 0x000008, "Member 'FMapAreaBuildableRestrictionData::m_BuildablesToBlockPlacement' has a wrong offset!");

// ScriptStruct DuneSandbox.MaterialParameterTotalData
// 0x00A8 (0x00A8 - 0x0000)
struct FMaterialParameterTotalData final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollectionInstance*   MaterialParameterCollectionInstance;               // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialParameterTotalData) == 0x000008, "Wrong alignment on FMaterialParameterTotalData");
static_assert(sizeof(FMaterialParameterTotalData) == 0x0000A8, "Wrong size on FMaterialParameterTotalData");
static_assert(offsetof(FMaterialParameterTotalData, MaterialParameterCollectionInstance) == 0x0000A0, "Member 'FMaterialParameterTotalData::MaterialParameterCollectionInstance' has a wrong offset!");

// ScriptStruct DuneSandbox.StoryManagerAlternateExitLocations
// 0x0010 (0x0010 - 0x0000)
struct FStoryManagerAlternateExitLocations final
{
public:
	struct FGameplayTag                           StoryEventUniqueIdTag;                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ExitLocationActor;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoryManagerAlternateExitLocations) == 0x000008, "Wrong alignment on FStoryManagerAlternateExitLocations");
static_assert(sizeof(FStoryManagerAlternateExitLocations) == 0x000010, "Wrong size on FStoryManagerAlternateExitLocations");
static_assert(offsetof(FStoryManagerAlternateExitLocations, StoryEventUniqueIdTag) == 0x000000, "Member 'FStoryManagerAlternateExitLocations::StoryEventUniqueIdTag' has a wrong offset!");
static_assert(offsetof(FStoryManagerAlternateExitLocations, ExitLocationActor) == 0x000008, "Member 'FStoryManagerAlternateExitLocations::ExitLocationActor' has a wrong offset!");

// ScriptStruct DuneSandbox.DestroyBuildableExtraData
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FDestroyBuildableExtraData final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDestroyBuildableExtraData) == 0x000008, "Wrong alignment on FDestroyBuildableExtraData");
static_assert(sizeof(FDestroyBuildableExtraData) == 0x000070, "Wrong size on FDestroyBuildableExtraData");

// ScriptStruct DuneSandbox.MapRegionBuildablesData
// 0x0028 (0x0028 - 0x0000)
struct FMapRegionBuildablesData final
{
public:
	struct FBuildableRegionModifers               m_DefaultModifiers;                                // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FMapAreaBuildableModifiersData> m_MapAreaModifiersData;                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FBuildableGroupsModifiersData>  m_BuildableGroupsModifiersData;                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapRegionBuildablesData) == 0x000008, "Wrong alignment on FMapRegionBuildablesData");
static_assert(sizeof(FMapRegionBuildablesData) == 0x000028, "Wrong size on FMapRegionBuildablesData");
static_assert(offsetof(FMapRegionBuildablesData, m_DefaultModifiers) == 0x000000, "Member 'FMapRegionBuildablesData::m_DefaultModifiers' has a wrong offset!");
static_assert(offsetof(FMapRegionBuildablesData, m_MapAreaModifiersData) == 0x000008, "Member 'FMapRegionBuildablesData::m_MapAreaModifiersData' has a wrong offset!");
static_assert(offsetof(FMapRegionBuildablesData, m_BuildableGroupsModifiersData) == 0x000018, "Member 'FMapRegionBuildablesData::m_BuildableGroupsModifiersData' has a wrong offset!");

// ScriptStruct DuneSandbox.RotationComponent
// 0x0018 (0x0018 - 0x0000)
struct FRotationComponent final
{
public:
	struct FRotator                               m_Rotation;                                        // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRotationComponent) == 0x000008, "Wrong alignment on FRotationComponent");
static_assert(sizeof(FRotationComponent) == 0x000018, "Wrong size on FRotationComponent");
static_assert(offsetof(FRotationComponent, m_Rotation) == 0x000000, "Member 'FRotationComponent::m_Rotation' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableMapRegionDataRow
// 0x0070 (0x0080 - 0x0010)
struct FBuildableMapRegionDataRow final : public FTableRowBase
{
public:
	struct FEDuneMapId                            m_Map;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMapAreaBuildableRestrictionData> m_MapAreaRestrictions;                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMapRegionBuildablesData               m_DefaultRegionData;                               // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bOverridePvpRegionData;                          // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapRegionBuildablesData               m_PvpRegionData;                                   // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableMapRegionDataRow) == 0x000008, "Wrong alignment on FBuildableMapRegionDataRow");
static_assert(sizeof(FBuildableMapRegionDataRow) == 0x000080, "Wrong size on FBuildableMapRegionDataRow");
static_assert(offsetof(FBuildableMapRegionDataRow, m_Map) == 0x000010, "Member 'FBuildableMapRegionDataRow::m_Map' has a wrong offset!");
static_assert(offsetof(FBuildableMapRegionDataRow, m_MapAreaRestrictions) == 0x000018, "Member 'FBuildableMapRegionDataRow::m_MapAreaRestrictions' has a wrong offset!");
static_assert(offsetof(FBuildableMapRegionDataRow, m_DefaultRegionData) == 0x000028, "Member 'FBuildableMapRegionDataRow::m_DefaultRegionData' has a wrong offset!");
static_assert(offsetof(FBuildableMapRegionDataRow, m_bOverridePvpRegionData) == 0x000050, "Member 'FBuildableMapRegionDataRow::m_bOverridePvpRegionData' has a wrong offset!");
static_assert(offsetof(FBuildableMapRegionDataRow, m_PvpRegionData) == 0x000058, "Member 'FBuildableMapRegionDataRow::m_PvpRegionData' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneVoiceSetVariation
// 0x0030 (0x0030 - 0x0000)
struct FDuneVoiceSetVariation final
{
public:
	TSoftObjectPtr<class UFcAudioEvent>           AllActionsAudioEvent;                              // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneVoiceSetVariation) == 0x000008, "Wrong alignment on FDuneVoiceSetVariation");
static_assert(sizeof(FDuneVoiceSetVariation) == 0x000030, "Wrong size on FDuneVoiceSetVariation");
static_assert(offsetof(FDuneVoiceSetVariation, AllActionsAudioEvent) == 0x000000, "Member 'FDuneVoiceSetVariation::AllActionsAudioEvent' has a wrong offset!");

// ScriptStruct DuneSandbox.HarvestEvent
// 0x0020 (0x0050 - 0x0030)
struct FHarvestEvent final : public FGameEvent
{
public:
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_Amount;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHandheldBase>              m_HarvestingTool;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarvestType                                  m_HarvestType;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHarvestEvent) == 0x000008, "Wrong alignment on FHarvestEvent");
static_assert(sizeof(FHarvestEvent) == 0x000050, "Wrong size on FHarvestEvent");
static_assert(offsetof(FHarvestEvent, m_ItemTemplateId) == 0x000030, "Member 'FHarvestEvent::m_ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FHarvestEvent, m_Amount) == 0x000038, "Member 'FHarvestEvent::m_Amount' has a wrong offset!");
static_assert(offsetof(FHarvestEvent, m_HarvestingTool) == 0x000040, "Member 'FHarvestEvent::m_HarvestingTool' has a wrong offset!");
static_assert(offsetof(FHarvestEvent, m_HarvestType) == 0x000048, "Member 'FHarvestEvent::m_HarvestType' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableOwnershipComponent
// 0x0008 (0x0008 - 0x0000)
struct FBuildableOwnershipComponent final
{
public:
	struct FEntityId                              m_TotemEntityId;                                   // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableOwnershipComponent) == 0x000008, "Wrong alignment on FBuildableOwnershipComponent");
static_assert(sizeof(FBuildableOwnershipComponent) == 0x000008, "Wrong size on FBuildableOwnershipComponent");
static_assert(offsetof(FBuildableOwnershipComponent, m_TotemEntityId) == 0x000000, "Member 'FBuildableOwnershipComponent::m_TotemEntityId' has a wrong offset!");

// ScriptStruct DuneSandbox.SocketStaticData
// 0x00B8 (0x00B8 - 0x0000)
struct FSocketStaticData final
{
public:
	TSet<TSubclassOf<class UBuildingSocketType>>  m_SocketTypes;                                     // 0x0000(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<TSubclassOf<class UBuildingSocketType>>  m_TargetSocketTypes;                               // 0x0050(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<ESocketConfiguration>                  m_OverrideSocketRotations;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEBuildableSocketCosts                 m_SocketCosts;                                     // 0x00B0(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocketStaticData) == 0x000008, "Wrong alignment on FSocketStaticData");
static_assert(sizeof(FSocketStaticData) == 0x0000B8, "Wrong size on FSocketStaticData");
static_assert(offsetof(FSocketStaticData, m_SocketTypes) == 0x000000, "Member 'FSocketStaticData::m_SocketTypes' has a wrong offset!");
static_assert(offsetof(FSocketStaticData, m_TargetSocketTypes) == 0x000050, "Member 'FSocketStaticData::m_TargetSocketTypes' has a wrong offset!");
static_assert(offsetof(FSocketStaticData, m_OverrideSocketRotations) == 0x0000A0, "Member 'FSocketStaticData::m_OverrideSocketRotations' has a wrong offset!");
static_assert(offsetof(FSocketStaticData, m_SocketCosts) == 0x0000B0, "Member 'FSocketStaticData::m_SocketCosts' has a wrong offset!");

// ScriptStruct DuneSandbox.SocketSetupData
// 0x0030 (0x0030 - 0x0000)
struct FSocketSetupData final
{
public:
	TArray<struct FSocketStaticData>              m_PerInstanceStaticSocketData;                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     m_SocketInstances;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ESocketConfiguration>                  m_ValidSocketRotations;                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocketSetupData) == 0x000008, "Wrong alignment on FSocketSetupData");
static_assert(sizeof(FSocketSetupData) == 0x000030, "Wrong size on FSocketSetupData");
static_assert(offsetof(FSocketSetupData, m_PerInstanceStaticSocketData) == 0x000000, "Member 'FSocketSetupData::m_PerInstanceStaticSocketData' has a wrong offset!");
static_assert(offsetof(FSocketSetupData, m_SocketInstances) == 0x000010, "Member 'FSocketSetupData::m_SocketInstances' has a wrong offset!");
static_assert(offsetof(FSocketSetupData, m_ValidSocketRotations) == 0x000020, "Member 'FSocketSetupData::m_ValidSocketRotations' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableSocketSetupDataRow
// 0x0030 (0x0040 - 0x0010)
struct FBuildableSocketSetupDataRow final : public FTableRowBase
{
public:
	struct FSocketSetupData                       m_SocketSetupData;                                 // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableSocketSetupDataRow) == 0x000008, "Wrong alignment on FBuildableSocketSetupDataRow");
static_assert(sizeof(FBuildableSocketSetupDataRow) == 0x000040, "Wrong size on FBuildableSocketSetupDataRow");
static_assert(offsetof(FBuildableSocketSetupDataRow, m_SocketSetupData) == 0x000010, "Member 'FBuildableSocketSetupDataRow::m_SocketSetupData' has a wrong offset!");

// ScriptStruct DuneSandbox.DEItemPriceStats
// 0x0010 (0x0010 - 0x0000)
struct FDEItemPriceStats final
{
public:
	int64                                         MinimumPrice;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AveragePrice;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDEItemPriceStats) == 0x000008, "Wrong alignment on FDEItemPriceStats");
static_assert(sizeof(FDEItemPriceStats) == 0x000010, "Wrong size on FDEItemPriceStats");
static_assert(offsetof(FDEItemPriceStats, MinimumPrice) == 0x000000, "Member 'FDEItemPriceStats::MinimumPrice' has a wrong offset!");
static_assert(offsetof(FDEItemPriceStats, AveragePrice) == 0x000008, "Member 'FDEItemPriceStats::AveragePrice' has a wrong offset!");

// ScriptStruct DuneSandbox.DewReaperSettings
// 0x0018 (0x0018 - 0x0000)
struct FDewReaperSettings final
{
public:
	float                                         HarvestRadius;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HarvestAngleDegrees;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HarvestHeight;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HarvestYield;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         m_ReapingEffect;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDewReaperSettings) == 0x000008, "Wrong alignment on FDewReaperSettings");
static_assert(sizeof(FDewReaperSettings) == 0x000018, "Wrong size on FDewReaperSettings");
static_assert(offsetof(FDewReaperSettings, HarvestRadius) == 0x000000, "Member 'FDewReaperSettings::HarvestRadius' has a wrong offset!");
static_assert(offsetof(FDewReaperSettings, HarvestAngleDegrees) == 0x000004, "Member 'FDewReaperSettings::HarvestAngleDegrees' has a wrong offset!");
static_assert(offsetof(FDewReaperSettings, HarvestHeight) == 0x000008, "Member 'FDewReaperSettings::HarvestHeight' has a wrong offset!");
static_assert(offsetof(FDewReaperSettings, HarvestYield) == 0x00000C, "Member 'FDewReaperSettings::HarvestYield' has a wrong offset!");
static_assert(offsetof(FDewReaperSettings, m_ReapingEffect) == 0x000010, "Member 'FDewReaperSettings::m_ReapingEffect' has a wrong offset!");

// ScriptStruct DuneSandbox.LandclaimVerticalRangeLevelData
// 0x0010 (0x0010 - 0x0000)
struct FLandclaimVerticalRangeLevelData final
{
public:
	struct FFloatRange                            m_VerticalRange;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandclaimVerticalRangeLevelData) == 0x000004, "Wrong alignment on FLandclaimVerticalRangeLevelData");
static_assert(sizeof(FLandclaimVerticalRangeLevelData) == 0x000010, "Wrong size on FLandclaimVerticalRangeLevelData");
static_assert(offsetof(FLandclaimVerticalRangeLevelData, m_VerticalRange) == 0x000000, "Member 'FLandclaimVerticalRangeLevelData::m_VerticalRange' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemDataRowBase
// 0x0018 (0x0028 - 0x0010)
struct FTotemDataRowBase final : public FTableRowBase
{
public:
	float                                         m_ClaimRadius;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanBeExtended;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanBeExtendedVertically;                        // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPermissionActorType                          m_PermissionActorType;                             // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLandclaimVerticalRangeLevelData> m_VerticalRangeLevels;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTotemDataRowBase) == 0x000008, "Wrong alignment on FTotemDataRowBase");
static_assert(sizeof(FTotemDataRowBase) == 0x000028, "Wrong size on FTotemDataRowBase");
static_assert(offsetof(FTotemDataRowBase, m_ClaimRadius) == 0x000010, "Member 'FTotemDataRowBase::m_ClaimRadius' has a wrong offset!");
static_assert(offsetof(FTotemDataRowBase, m_bCanBeExtended) == 0x000014, "Member 'FTotemDataRowBase::m_bCanBeExtended' has a wrong offset!");
static_assert(offsetof(FTotemDataRowBase, m_bCanBeExtendedVertically) == 0x000015, "Member 'FTotemDataRowBase::m_bCanBeExtendedVertically' has a wrong offset!");
static_assert(offsetof(FTotemDataRowBase, m_PermissionActorType) == 0x000016, "Member 'FTotemDataRowBase::m_PermissionActorType' has a wrong offset!");
static_assert(offsetof(FTotemDataRowBase, m_VerticalRangeLevels) == 0x000018, "Member 'FTotemDataRowBase::m_VerticalRangeLevels' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableStabilizationComponent
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FBuildableStabilizationComponent final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildableStabilizationComponent) == 0x000008, "Wrong alignment on FBuildableStabilizationComponent");
static_assert(sizeof(FBuildableStabilizationComponent) == 0x000018, "Wrong size on FBuildableStabilizationComponent");

// ScriptStruct DuneSandbox.BuildableStabilizationGroupDataRow
// 0x0068 (0x0078 - 0x0010)
struct FBuildableStabilizationGroupDataRow final : public FTableRowBase
{
public:
	double                                        m_StabilizationTimeSeconds;                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        m_DestabilizationTimeSeconds;                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StabilizationPercentageSetbackOnDamageTaken;     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FEDamageMitigationFloatStatID, float> m_StabilizationDamageMitigationStats;          // 0x0028(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableStabilizationGroupDataRow) == 0x000008, "Wrong alignment on FBuildableStabilizationGroupDataRow");
static_assert(sizeof(FBuildableStabilizationGroupDataRow) == 0x000078, "Wrong size on FBuildableStabilizationGroupDataRow");
static_assert(offsetof(FBuildableStabilizationGroupDataRow, m_StabilizationTimeSeconds) == 0x000010, "Member 'FBuildableStabilizationGroupDataRow::m_StabilizationTimeSeconds' has a wrong offset!");
static_assert(offsetof(FBuildableStabilizationGroupDataRow, m_DestabilizationTimeSeconds) == 0x000018, "Member 'FBuildableStabilizationGroupDataRow::m_DestabilizationTimeSeconds' has a wrong offset!");
static_assert(offsetof(FBuildableStabilizationGroupDataRow, m_StabilizationPercentageSetbackOnDamageTaken) == 0x000020, "Member 'FBuildableStabilizationGroupDataRow::m_StabilizationPercentageSetbackOnDamageTaken' has a wrong offset!");
static_assert(offsetof(FBuildableStabilizationGroupDataRow, m_StabilizationDamageMitigationStats) == 0x000028, "Member 'FBuildableStabilizationGroupDataRow::m_StabilizationDamageMitigationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableStructureCategoryDataRow
// 0x0030 (0x0040 - 0x0010)
struct FBuildableStructureCategoryDataRow final : public FTableRowBase
{
public:
	class FText                                   m_DisplayName;                                     // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FBuildableStructureLimitData>   m_BuildableStructureLimits;                        // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bUsePermissionActorType;                         // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPermissionActorType                          m_DeployablePermissionActorType;                   // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildableStructureCategoryDataRow) == 0x000008, "Wrong alignment on FBuildableStructureCategoryDataRow");
static_assert(sizeof(FBuildableStructureCategoryDataRow) == 0x000040, "Wrong size on FBuildableStructureCategoryDataRow");
static_assert(offsetof(FBuildableStructureCategoryDataRow, m_DisplayName) == 0x000010, "Member 'FBuildableStructureCategoryDataRow::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FBuildableStructureCategoryDataRow, m_BuildableStructureLimits) == 0x000028, "Member 'FBuildableStructureCategoryDataRow::m_BuildableStructureLimits' has a wrong offset!");
static_assert(offsetof(FBuildableStructureCategoryDataRow, m_bUsePermissionActorType) == 0x000038, "Member 'FBuildableStructureCategoryDataRow::m_bUsePermissionActorType' has a wrong offset!");
static_assert(offsetof(FBuildableStructureCategoryDataRow, m_DeployablePermissionActorType) == 0x000039, "Member 'FBuildableStructureCategoryDataRow::m_DeployablePermissionActorType' has a wrong offset!");

// ScriptStruct DuneSandbox.DynamicNavConfig
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FDynamicNavConfig final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicNavConfig) == 0x000008, "Wrong alignment on FDynamicNavConfig");
static_assert(sizeof(FDynamicNavConfig) == 0x000058, "Wrong size on FDynamicNavConfig");

// ScriptStruct DuneSandbox.SettingsEntryData
// 0x0020 (0x0020 - 0x0000)
struct FSettingsEntryData final
{
public:
	class USettingsEntryBase*                     Entry;                                             // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USettingsEntryWidget>       EntryWidget;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USettingsDescriptionBase*               Description;                                       // 0x0010(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USettingsDescriptionWidget> DescriptionWidget;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSettingsEntryData) == 0x000008, "Wrong alignment on FSettingsEntryData");
static_assert(sizeof(FSettingsEntryData) == 0x000020, "Wrong size on FSettingsEntryData");
static_assert(offsetof(FSettingsEntryData, Entry) == 0x000000, "Member 'FSettingsEntryData::Entry' has a wrong offset!");
static_assert(offsetof(FSettingsEntryData, EntryWidget) == 0x000008, "Member 'FSettingsEntryData::EntryWidget' has a wrong offset!");
static_assert(offsetof(FSettingsEntryData, Description) == 0x000010, "Member 'FSettingsEntryData::Description' has a wrong offset!");
static_assert(offsetof(FSettingsEntryData, DescriptionWidget) == 0x000018, "Member 'FSettingsEntryData::DescriptionWidget' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsCategoryData
// 0x0028 (0x0028 - 0x0000)
struct FSettingsCategoryData final
{
public:
	class FText                                   CategoryName;                                      // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FSettingsEntryData>             Entries;                                           // 0x0018(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSettingsCategoryData) == 0x000008, "Wrong alignment on FSettingsCategoryData");
static_assert(sizeof(FSettingsCategoryData) == 0x000028, "Wrong size on FSettingsCategoryData");
static_assert(offsetof(FSettingsCategoryData, CategoryName) == 0x000000, "Member 'FSettingsCategoryData::CategoryName' has a wrong offset!");
static_assert(offsetof(FSettingsCategoryData, Entries) == 0x000018, "Member 'FSettingsCategoryData::Entries' has a wrong offset!");

// ScriptStruct DuneSandbox.EquipEvent
// 0x0010 (0x0040 - 0x0030)
struct FEquipEvent final : public FGameEvent
{
public:
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bWasEquippedWhileInVehicle;                      // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEquipEvent) == 0x000008, "Wrong alignment on FEquipEvent");
static_assert(sizeof(FEquipEvent) == 0x000040, "Wrong size on FEquipEvent");
static_assert(offsetof(FEquipEvent, m_ItemTemplateId) == 0x000030, "Member 'FEquipEvent::m_ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FEquipEvent, m_bWasEquippedWhileInVehicle) == 0x000038, "Member 'FEquipEvent::m_bWasEquippedWhileInVehicle' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingStructureCategoryStatus
// 0x000C (0x000C - 0x0000)
struct FBuildingStructureCategoryStatus final
{
public:
	struct FEBuildableStructureCategoryType       BuildableStructureCategoryType;                    // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalBuildablesInCategory;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingStructureCategoryStatus) == 0x000004, "Wrong alignment on FBuildingStructureCategoryStatus");
static_assert(sizeof(FBuildingStructureCategoryStatus) == 0x00000C, "Wrong size on FBuildingStructureCategoryStatus");
static_assert(offsetof(FBuildingStructureCategoryStatus, BuildableStructureCategoryType) == 0x000000, "Member 'FBuildingStructureCategoryStatus::BuildableStructureCategoryType' has a wrong offset!");
static_assert(offsetof(FBuildingStructureCategoryStatus, TotalBuildablesInCategory) == 0x000008, "Member 'FBuildingStructureCategoryStatus::TotalBuildablesInCategory' has a wrong offset!");

// ScriptStruct DuneSandbox.DynamicNavGeneralConfig
// 0x0058 (0x0058 - 0x0000)
struct FDynamicNavGeneralConfig final
{
public:
	float                                         NavGridVolumeUpperLimit;                           // 0x0000(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavGridVolumeLowerLimit;                           // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AllowedAgentTypes;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   DefaultNPCAgentType;                               // 0x0018(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RetryInitializationIntervalSec;                    // 0x0020(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetryInitialization;                              // 0x0024(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NavInvokeCooldownTimeInSec;                        // 0x0028(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotemNavgridRadiusMultiplier;                      // 0x002C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavInvokerUpdateFrequency;                         // 0x0030(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavGridCellSize;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavOctreeCellSize;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BuildingRebuildBoxSize;                            // 0x0040(0x0018)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicNavGeneralConfig) == 0x000008, "Wrong alignment on FDynamicNavGeneralConfig");
static_assert(sizeof(FDynamicNavGeneralConfig) == 0x000058, "Wrong size on FDynamicNavGeneralConfig");
static_assert(offsetof(FDynamicNavGeneralConfig, NavGridVolumeUpperLimit) == 0x000000, "Member 'FDynamicNavGeneralConfig::NavGridVolumeUpperLimit' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, NavGridVolumeLowerLimit) == 0x000004, "Member 'FDynamicNavGeneralConfig::NavGridVolumeLowerLimit' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, AllowedAgentTypes) == 0x000008, "Member 'FDynamicNavGeneralConfig::AllowedAgentTypes' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, DefaultNPCAgentType) == 0x000018, "Member 'FDynamicNavGeneralConfig::DefaultNPCAgentType' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, RetryInitializationIntervalSec) == 0x000020, "Member 'FDynamicNavGeneralConfig::RetryInitializationIntervalSec' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, bRetryInitialization) == 0x000024, "Member 'FDynamicNavGeneralConfig::bRetryInitialization' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, NavInvokeCooldownTimeInSec) == 0x000028, "Member 'FDynamicNavGeneralConfig::NavInvokeCooldownTimeInSec' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, TotemNavgridRadiusMultiplier) == 0x00002C, "Member 'FDynamicNavGeneralConfig::TotemNavgridRadiusMultiplier' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, NavInvokerUpdateFrequency) == 0x000030, "Member 'FDynamicNavGeneralConfig::NavInvokerUpdateFrequency' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, NavGridCellSize) == 0x000034, "Member 'FDynamicNavGeneralConfig::NavGridCellSize' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, NavOctreeCellSize) == 0x000038, "Member 'FDynamicNavGeneralConfig::NavOctreeCellSize' has a wrong offset!");
static_assert(offsetof(FDynamicNavGeneralConfig, BuildingRebuildBoxSize) == 0x000040, "Member 'FDynamicNavGeneralConfig::BuildingRebuildBoxSize' has a wrong offset!");

// ScriptStruct DuneSandbox.SandStormDamageableComponent
// 0x0001 (0x0001 - 0x0000)
struct FSandStormDamageableComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandStormDamageableComponent) == 0x000001, "Wrong alignment on FSandStormDamageableComponent");
static_assert(sizeof(FSandStormDamageableComponent) == 0x000001, "Wrong size on FSandStormDamageableComponent");

// ScriptStruct DuneSandbox.HUDStateLink
// 0x000C (0x000C - 0x0000)
struct FHUDStateLink final
{
public:
	EHUDMode                                      m_HUDMode;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Opacity;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Duration;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDStateLink) == 0x000004, "Wrong alignment on FHUDStateLink");
static_assert(sizeof(FHUDStateLink) == 0x00000C, "Wrong size on FHUDStateLink");
static_assert(offsetof(FHUDStateLink, m_HUDMode) == 0x000000, "Member 'FHUDStateLink::m_HUDMode' has a wrong offset!");
static_assert(offsetof(FHUDStateLink, m_Opacity) == 0x000004, "Member 'FHUDStateLink::m_Opacity' has a wrong offset!");
static_assert(offsetof(FHUDStateLink, m_Duration) == 0x000008, "Member 'FHUDStateLink::m_Duration' has a wrong offset!");

// ScriptStruct DuneSandbox.HUDStateChain
// 0x0060 (0x0060 - 0x0000)
struct FHUDStateChain final
{
public:
	TSet<EHUDModeTrigger>                         m_Triggers;                                        // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FHUDStateLink>                  m_HUDStates;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDStateChain) == 0x000008, "Wrong alignment on FHUDStateChain");
static_assert(sizeof(FHUDStateChain) == 0x000060, "Wrong size on FHUDStateChain");
static_assert(offsetof(FHUDStateChain, m_Triggers) == 0x000000, "Member 'FHUDStateChain::m_Triggers' has a wrong offset!");
static_assert(offsetof(FHUDStateChain, m_HUDStates) == 0x000050, "Member 'FHUDStateChain::m_HUDStates' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingStructureCollectionBuildingPieceArrayElement
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBuildingStructureCollectionBuildingPieceArrayElement final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingStructureCollectionBuildingPieceArrayElement) == 0x000008, "Wrong alignment on FBuildingStructureCollectionBuildingPieceArrayElement");
static_assert(sizeof(FBuildingStructureCollectionBuildingPieceArrayElement) == 0x000010, "Wrong size on FBuildingStructureCollectionBuildingPieceArrayElement");

// ScriptStruct DuneSandbox.BuildingStructureCollectionPlaceableArray
// 0x0010 (0x0010 - 0x0000)
struct FBuildingStructureCollectionPlaceableArray final
{
public:
	TArray<class ADunePlaceableBase*>             Placeables;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingStructureCollectionPlaceableArray) == 0x000008, "Wrong alignment on FBuildingStructureCollectionPlaceableArray");
static_assert(sizeof(FBuildingStructureCollectionPlaceableArray) == 0x000010, "Wrong size on FBuildingStructureCollectionPlaceableArray");
static_assert(offsetof(FBuildingStructureCollectionPlaceableArray, Placeables) == 0x000000, "Member 'FBuildingStructureCollectionPlaceableArray::Placeables' has a wrong offset!");

// ScriptStruct DuneSandbox.PermissionMarkerSerializerItem
// 0x002C (0x0038 - 0x000C)
struct FPermissionMarkerSerializerItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              m_PersistenceId;                                   // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_AbsoluteWorldLocation;                           // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEMapMarker                            m_MarkerType;                                      // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermissionMarkerSerializerItem) == 0x000008, "Wrong alignment on FPermissionMarkerSerializerItem");
static_assert(sizeof(FPermissionMarkerSerializerItem) == 0x000038, "Wrong size on FPermissionMarkerSerializerItem");
static_assert(offsetof(FPermissionMarkerSerializerItem, m_PersistenceId) == 0x000010, "Member 'FPermissionMarkerSerializerItem::m_PersistenceId' has a wrong offset!");
static_assert(offsetof(FPermissionMarkerSerializerItem, m_AbsoluteWorldLocation) == 0x000018, "Member 'FPermissionMarkerSerializerItem::m_AbsoluteWorldLocation' has a wrong offset!");
static_assert(offsetof(FPermissionMarkerSerializerItem, m_MarkerType) == 0x000030, "Member 'FPermissionMarkerSerializerItem::m_MarkerType' has a wrong offset!");

// ScriptStruct DuneSandbox.ExtendedHitComponentAndSource
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FExtendedHitComponentAndSource final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExtendedHitComponentAndSource) == 0x000008, "Wrong alignment on FExtendedHitComponentAndSource");
static_assert(sizeof(FExtendedHitComponentAndSource) == 0x000018, "Wrong size on FExtendedHitComponentAndSource");

// ScriptStruct DuneSandbox.ExtendedHitComponentInfo
// 0x0118 (0x0118 - 0x0000)
struct FExtendedHitComponentInfo final
{
public:
	float                                         LifeTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageMultiplier;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShieldDepletionMultiplier;                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bForceCrit : 1;                                    // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDestroyOnDBNO : 1;                                // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyRelevantForInstigator : 1;                    // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyOnePerInstigatorPerSource : 1;                // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceName;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExtendedHitType                              HitType;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHitlocation                                  OverriddenHitLocation;                             // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OptionalHitResult;                                 // 0x0030(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExtendedHitComponentInfo) == 0x000008, "Wrong alignment on FExtendedHitComponentInfo");
static_assert(sizeof(FExtendedHitComponentInfo) == 0x000118, "Wrong size on FExtendedHitComponentInfo");
static_assert(offsetof(FExtendedHitComponentInfo, LifeTime) == 0x000000, "Member 'FExtendedHitComponentInfo::LifeTime' has a wrong offset!");
static_assert(offsetof(FExtendedHitComponentInfo, Radius) == 0x000004, "Member 'FExtendedHitComponentInfo::Radius' has a wrong offset!");
static_assert(offsetof(FExtendedHitComponentInfo, DamageMultiplier) == 0x000008, "Member 'FExtendedHitComponentInfo::DamageMultiplier' has a wrong offset!");
static_assert(offsetof(FExtendedHitComponentInfo, ShieldDepletionMultiplier) == 0x00000C, "Member 'FExtendedHitComponentInfo::ShieldDepletionMultiplier' has a wrong offset!");
static_assert(offsetof(FExtendedHitComponentInfo, SourceName) == 0x000018, "Member 'FExtendedHitComponentInfo::SourceName' has a wrong offset!");
static_assert(offsetof(FExtendedHitComponentInfo, HitType) == 0x000028, "Member 'FExtendedHitComponentInfo::HitType' has a wrong offset!");
static_assert(offsetof(FExtendedHitComponentInfo, OverriddenHitLocation) == 0x000029, "Member 'FExtendedHitComponentInfo::OverriddenHitLocation' has a wrong offset!");
static_assert(offsetof(FExtendedHitComponentInfo, OptionalHitResult) == 0x000030, "Member 'FExtendedHitComponentInfo::OptionalHitResult' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingStructureCollection
// 0x0060 (0x0060 - 0x0000)
struct FBuildingStructureCollection final
{
public:
	TArray<struct FBuildingStructureCollectionBuildingPieceArrayElement> BuildingPieces;             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FEBuildableStructureCategoryType, struct FBuildingStructureCollectionPlaceableArray> PlaceableCategories; // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingStructureCollection) == 0x000008, "Wrong alignment on FBuildingStructureCollection");
static_assert(sizeof(FBuildingStructureCollection) == 0x000060, "Wrong size on FBuildingStructureCollection");
static_assert(offsetof(FBuildingStructureCollection, BuildingPieces) == 0x000000, "Member 'FBuildingStructureCollection::BuildingPieces' has a wrong offset!");
static_assert(offsetof(FBuildingStructureCollection, PlaceableCategories) == 0x000010, "Member 'FBuildingStructureCollection::PlaceableCategories' has a wrong offset!");

// ScriptStruct DuneSandbox.CopyBaseEvent
// 0x0000 (0x0030 - 0x0030)
struct FCopyBaseEvent final : public FGameEvent
{
};
static_assert(alignof(FCopyBaseEvent) == 0x000008, "Wrong alignment on FCopyBaseEvent");
static_assert(sizeof(FCopyBaseEvent) == 0x000030, "Wrong size on FCopyBaseEvent");

// ScriptStruct DuneSandbox.BuildableTierDataRow
// 0x0018 (0x0028 - 0x0010)
struct FBuildableTierDataRow final : public FTableRowBase
{
public:
	class FText                                   m_DisplayName;                                     // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableTierDataRow) == 0x000008, "Wrong alignment on FBuildableTierDataRow");
static_assert(sizeof(FBuildableTierDataRow) == 0x000028, "Wrong size on FBuildableTierDataRow");
static_assert(offsetof(FBuildableTierDataRow, m_DisplayName) == 0x000010, "Member 'FBuildableTierDataRow::m_DisplayName' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableUiCategoryDataRow
// 0x0060 (0x0070 - 0x0010)
struct FBuildableUiCategoryDataRow final : public FTableRowBase
{
public:
	class FText                                   m_DisplayName;                                     // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FEBuildableUiSubcategory>       m_Subcategories;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_FactionIcon;                                     // 0x0038(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDebugOnly;                                      // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildableUiCategoryDataRow) == 0x000008, "Wrong alignment on FBuildableUiCategoryDataRow");
static_assert(sizeof(FBuildableUiCategoryDataRow) == 0x000070, "Wrong size on FBuildableUiCategoryDataRow");
static_assert(offsetof(FBuildableUiCategoryDataRow, m_DisplayName) == 0x000010, "Member 'FBuildableUiCategoryDataRow::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FBuildableUiCategoryDataRow, m_Subcategories) == 0x000028, "Member 'FBuildableUiCategoryDataRow::m_Subcategories' has a wrong offset!");
static_assert(offsetof(FBuildableUiCategoryDataRow, m_FactionIcon) == 0x000038, "Member 'FBuildableUiCategoryDataRow::m_FactionIcon' has a wrong offset!");
static_assert(offsetof(FBuildableUiCategoryDataRow, m_bDebugOnly) == 0x000068, "Member 'FBuildableUiCategoryDataRow::m_bDebugOnly' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleHarnessStaticData
// 0x0068 (0x0068 - 0x0000)
struct FVehicleHarnessStaticData final
{
public:
	struct FVector                                m_RelativeLocation;                                // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               m_RelativeRotation;                                // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                m_SweepExtents;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ECollisionChannel>                     m_SweepObjectTypes;                                // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ECollisionChannel                             m_CollisionChannel;                                // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_MaxLength;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LinearInterpSpeed;                               // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AngularInterpSpeed;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleHarnessStaticData) == 0x000008, "Wrong alignment on FVehicleHarnessStaticData");
static_assert(sizeof(FVehicleHarnessStaticData) == 0x000068, "Wrong size on FVehicleHarnessStaticData");
static_assert(offsetof(FVehicleHarnessStaticData, m_RelativeLocation) == 0x000000, "Member 'FVehicleHarnessStaticData::m_RelativeLocation' has a wrong offset!");
static_assert(offsetof(FVehicleHarnessStaticData, m_RelativeRotation) == 0x000018, "Member 'FVehicleHarnessStaticData::m_RelativeRotation' has a wrong offset!");
static_assert(offsetof(FVehicleHarnessStaticData, m_SweepExtents) == 0x000030, "Member 'FVehicleHarnessStaticData::m_SweepExtents' has a wrong offset!");
static_assert(offsetof(FVehicleHarnessStaticData, m_SweepObjectTypes) == 0x000048, "Member 'FVehicleHarnessStaticData::m_SweepObjectTypes' has a wrong offset!");
static_assert(offsetof(FVehicleHarnessStaticData, m_CollisionChannel) == 0x000058, "Member 'FVehicleHarnessStaticData::m_CollisionChannel' has a wrong offset!");
static_assert(offsetof(FVehicleHarnessStaticData, m_MaxLength) == 0x00005C, "Member 'FVehicleHarnessStaticData::m_MaxLength' has a wrong offset!");
static_assert(offsetof(FVehicleHarnessStaticData, m_LinearInterpSpeed) == 0x000060, "Member 'FVehicleHarnessStaticData::m_LinearInterpSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleHarnessStaticData, m_AngularInterpSpeed) == 0x000064, "Member 'FVehicleHarnessStaticData::m_AngularInterpSpeed' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleHarnessModuleTableRow
// 0x0068 (0x0078 - 0x0010)
struct FVehicleHarnessModuleTableRow final : public FTableRowBase
{
public:
	struct FVehicleHarnessStaticData              m_StaticData;                                      // 0x0010(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleHarnessModuleTableRow) == 0x000008, "Wrong alignment on FVehicleHarnessModuleTableRow");
static_assert(sizeof(FVehicleHarnessModuleTableRow) == 0x000078, "Wrong size on FVehicleHarnessModuleTableRow");
static_assert(offsetof(FVehicleHarnessModuleTableRow, m_StaticData) == 0x000010, "Member 'FVehicleHarnessModuleTableRow::m_StaticData' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockWorldmassEntry
// 0x0040 (0x0040 - 0x0000)
struct FTerrainBlockWorldmassEntry final
{
public:
	bool                                          bSnapSeaOfSand;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SnapTransition;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SnapBias;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SnapRoundness;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SnapOrder;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SnapHeightOffsetGizmo;                             // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockWorldmassEntry) == 0x000008, "Wrong alignment on FTerrainBlockWorldmassEntry");
static_assert(sizeof(FTerrainBlockWorldmassEntry) == 0x000040, "Wrong size on FTerrainBlockWorldmassEntry");
static_assert(offsetof(FTerrainBlockWorldmassEntry, bSnapSeaOfSand) == 0x000000, "Member 'FTerrainBlockWorldmassEntry::bSnapSeaOfSand' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldmassEntry, SnapTransition) == 0x000008, "Member 'FTerrainBlockWorldmassEntry::SnapTransition' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldmassEntry, SnapBias) == 0x000010, "Member 'FTerrainBlockWorldmassEntry::SnapBias' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldmassEntry, SnapRoundness) == 0x000018, "Member 'FTerrainBlockWorldmassEntry::SnapRoundness' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldmassEntry, SnapOrder) == 0x000020, "Member 'FTerrainBlockWorldmassEntry::SnapOrder' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldmassEntry, SnapHeightOffsetGizmo) == 0x000028, "Member 'FTerrainBlockWorldmassEntry::SnapHeightOffsetGizmo' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableUiSubcategoryDataRow
// 0x0028 (0x0038 - 0x0010)
struct FBuildableUiSubcategoryDataRow final : public FTableRowBase
{
public:
	class FText                                   m_DisplayName;                                     // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FEBuildableGroupType>           m_Buildables;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildableUiSubcategoryDataRow) == 0x000008, "Wrong alignment on FBuildableUiSubcategoryDataRow");
static_assert(sizeof(FBuildableUiSubcategoryDataRow) == 0x000038, "Wrong size on FBuildableUiSubcategoryDataRow");
static_assert(offsetof(FBuildableUiSubcategoryDataRow, m_DisplayName) == 0x000010, "Member 'FBuildableUiSubcategoryDataRow::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FBuildableUiSubcategoryDataRow, m_Buildables) == 0x000028, "Member 'FBuildableUiSubcategoryDataRow::m_Buildables' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableDestroyedDamageEvent
// 0x0000 (0x0058 - 0x0058)
struct FBuildableDestroyedDamageEvent final : public FBuildableEvent
{
};
static_assert(alignof(FBuildableDestroyedDamageEvent) == 0x000008, "Wrong alignment on FBuildableDestroyedDamageEvent");
static_assert(sizeof(FBuildableDestroyedDamageEvent) == 0x000058, "Wrong size on FBuildableDestroyedDamageEvent");

// ScriptStruct DuneSandbox.BuildingBlueprintBuildingItem
// 0x0070 (0x0070 - 0x0000)
struct FBuildingBlueprintBuildingItem final
{
public:
	struct FTransform                             m_SpawnLocalTransform;                             // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_BuildingFlags;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HealthOverride;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingBlueprintBuildingItem) == 0x000010, "Wrong alignment on FBuildingBlueprintBuildingItem");
static_assert(sizeof(FBuildingBlueprintBuildingItem) == 0x000070, "Wrong size on FBuildingBlueprintBuildingItem");
static_assert(offsetof(FBuildingBlueprintBuildingItem, m_SpawnLocalTransform) == 0x000000, "Member 'FBuildingBlueprintBuildingItem::m_SpawnLocalTransform' has a wrong offset!");
static_assert(offsetof(FBuildingBlueprintBuildingItem, m_BuildingFlags) == 0x000060, "Member 'FBuildingBlueprintBuildingItem::m_BuildingFlags' has a wrong offset!");
static_assert(offsetof(FBuildingBlueprintBuildingItem, m_HealthOverride) == 0x000064, "Member 'FBuildingBlueprintBuildingItem::m_HealthOverride' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingBlueprintBuildingItemContainer
// 0x0010 (0x0010 - 0x0000)
struct FBuildingBlueprintBuildingItemContainer final
{
public:
	TArray<struct FBuildingBlueprintBuildingItem> m_BuildingInstances;                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingBlueprintBuildingItemContainer) == 0x000008, "Wrong alignment on FBuildingBlueprintBuildingItemContainer");
static_assert(sizeof(FBuildingBlueprintBuildingItemContainer) == 0x000010, "Wrong size on FBuildingBlueprintBuildingItemContainer");
static_assert(offsetof(FBuildingBlueprintBuildingItemContainer, m_BuildingInstances) == 0x000000, "Member 'FBuildingBlueprintBuildingItemContainer::m_BuildingInstances' has a wrong offset!");

// ScriptStruct DuneSandbox.SurfaceSnappingProperties
// 0x0070 (0x0070 - 0x0000)
struct FSurfaceSnappingProperties final
{
public:
	ESurfaceSnappingType                          SurfaceSnappingType;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceStartOffset;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEndOffset;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FinalLocationOffset;                               // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClampAlignAngle;                            // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampAlignMinAngle;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampAlignMaxAngle;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurfaceSnappingProperties) == 0x000008, "Wrong alignment on FSurfaceSnappingProperties");
static_assert(sizeof(FSurfaceSnappingProperties) == 0x000070, "Wrong size on FSurfaceSnappingProperties");
static_assert(offsetof(FSurfaceSnappingProperties, SurfaceSnappingType) == 0x000000, "Member 'FSurfaceSnappingProperties::SurfaceSnappingType' has a wrong offset!");
static_assert(offsetof(FSurfaceSnappingProperties, TraceStartOffset) == 0x000008, "Member 'FSurfaceSnappingProperties::TraceStartOffset' has a wrong offset!");
static_assert(offsetof(FSurfaceSnappingProperties, TraceEndOffset) == 0x000020, "Member 'FSurfaceSnappingProperties::TraceEndOffset' has a wrong offset!");
static_assert(offsetof(FSurfaceSnappingProperties, FinalLocationOffset) == 0x000038, "Member 'FSurfaceSnappingProperties::FinalLocationOffset' has a wrong offset!");
static_assert(offsetof(FSurfaceSnappingProperties, bShouldClampAlignAngle) == 0x000050, "Member 'FSurfaceSnappingProperties::bShouldClampAlignAngle' has a wrong offset!");
static_assert(offsetof(FSurfaceSnappingProperties, ClampAlignMinAngle) == 0x000054, "Member 'FSurfaceSnappingProperties::ClampAlignMinAngle' has a wrong offset!");
static_assert(offsetof(FSurfaceSnappingProperties, ClampAlignMaxAngle) == 0x000058, "Member 'FSurfaceSnappingProperties::ClampAlignMaxAngle' has a wrong offset!");
static_assert(offsetof(FSurfaceSnappingProperties, IgnoreActors) == 0x000060, "Member 'FSurfaceSnappingProperties::IgnoreActors' has a wrong offset!");

// ScriptStruct DuneSandbox.GameplayTagEvent
// 0x0028 (0x0058 - 0x0030)
struct FGameplayTagEvent final : public FGameEvent
{
public:
	struct FGameplayTagContainer                  m_Tags;                                            // 0x0030(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
	bool                                          m_bIsAdded;                                        // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayTagEvent) == 0x000008, "Wrong alignment on FGameplayTagEvent");
static_assert(sizeof(FGameplayTagEvent) == 0x000058, "Wrong size on FGameplayTagEvent");
static_assert(offsetof(FGameplayTagEvent, m_Tags) == 0x000030, "Member 'FGameplayTagEvent::m_Tags' has a wrong offset!");
static_assert(offsetof(FGameplayTagEvent, m_bIsAdded) == 0x000050, "Member 'FGameplayTagEvent::m_bIsAdded' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingBlueprintItemStats
// 0x0058 (0x0058 - 0x0000)
struct FBuildingBlueprintItemStats final
{
public:
	TSoftObjectPtr<class UBuildingBlueprintDataAsset> BuildingBlueprintAsset;                        // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerBlueprint;                                // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              PlayerBlueprintId;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BuildingBlueprintName;                             // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingBlueprintItemStats) == 0x000008, "Wrong alignment on FBuildingBlueprintItemStats");
static_assert(sizeof(FBuildingBlueprintItemStats) == 0x000058, "Wrong size on FBuildingBlueprintItemStats");
static_assert(offsetof(FBuildingBlueprintItemStats, BuildingBlueprintAsset) == 0x000000, "Member 'FBuildingBlueprintItemStats::BuildingBlueprintAsset' has a wrong offset!");
static_assert(offsetof(FBuildingBlueprintItemStats, bIsPlayerBlueprint) == 0x000030, "Member 'FBuildingBlueprintItemStats::bIsPlayerBlueprint' has a wrong offset!");
static_assert(offsetof(FBuildingBlueprintItemStats, PlayerBlueprintId) == 0x000038, "Member 'FBuildingBlueprintItemStats::PlayerBlueprintId' has a wrong offset!");
static_assert(offsetof(FBuildingBlueprintItemStats, BuildingBlueprintName) == 0x000048, "Member 'FBuildingBlueprintItemStats::BuildingBlueprintName' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAudioGpmPreloadedEvents
// 0x0060 (0x0060 - 0x0000)
struct FDuneAudioGpmPreloadedEvents final
{
public:
	TSoftObjectPtr<class UFcAudioEvent>           Enter;                                             // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           Exit;                                              // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAudioGpmPreloadedEvents) == 0x000008, "Wrong alignment on FDuneAudioGpmPreloadedEvents");
static_assert(sizeof(FDuneAudioGpmPreloadedEvents) == 0x000060, "Wrong size on FDuneAudioGpmPreloadedEvents");
static_assert(offsetof(FDuneAudioGpmPreloadedEvents, Enter) == 0x000000, "Member 'FDuneAudioGpmPreloadedEvents::Enter' has a wrong offset!");
static_assert(offsetof(FDuneAudioGpmPreloadedEvents, Exit) == 0x000030, "Member 'FDuneAudioGpmPreloadedEvents::Exit' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAudioGpmPhasesPreloadedEventsWrapper
// 0x06C0 (0x06C0 - 0x0000)
struct FDuneAudioGpmPhasesPreloadedEventsWrapper final
{
public:
	struct FDuneAudioGpmPreloadedEvents           Phases[0x12];                                      // 0x0000(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAudioGpmPhasesPreloadedEventsWrapper) == 0x000008, "Wrong alignment on FDuneAudioGpmPhasesPreloadedEventsWrapper");
static_assert(sizeof(FDuneAudioGpmPhasesPreloadedEventsWrapper) == 0x0006C0, "Wrong size on FDuneAudioGpmPhasesPreloadedEventsWrapper");
static_assert(offsetof(FDuneAudioGpmPhasesPreloadedEventsWrapper, Phases) == 0x000000, "Member 'FDuneAudioGpmPhasesPreloadedEventsWrapper::Phases' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleAttachedEvent
// 0x0008 (0x0038 - 0x0030)
struct FVehicleAttachedEvent final : public FGameEvent
{
public:
	EVehicleModel                                 m_AttachedVehicleModel;                            // 0x0030(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleAttachedEvent) == 0x000008, "Wrong alignment on FVehicleAttachedEvent");
static_assert(sizeof(FVehicleAttachedEvent) == 0x000038, "Wrong size on FVehicleAttachedEvent");
static_assert(offsetof(FVehicleAttachedEvent, m_AttachedVehicleModel) == 0x000030, "Member 'FVehicleAttachedEvent::m_AttachedVehicleModel' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingBlueprintItemStatsComponent_BlueprintWrapper
// 0x0128 (0x0128 - 0x0000)
struct FBuildingBlueprintItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0xD0];                                       // 0x0000(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBuildingBlueprintItemStats            BuildingBlueprintItemStats;                        // 0x00D0(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingBlueprintItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FBuildingBlueprintItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FBuildingBlueprintItemStatsComponent_BlueprintWrapper) == 0x000128, "Wrong size on FBuildingBlueprintItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FBuildingBlueprintItemStatsComponent_BlueprintWrapper, BuildingBlueprintItemStats) == 0x0000D0, "Member 'FBuildingBlueprintItemStatsComponent_BlueprintWrapper::BuildingBlueprintItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.HarvestWaterPotentialRow
// 0x0020 (0x0030 - 0x0010)
struct FHarvestWaterPotentialRow final : public FTableRowBase
{
public:
	float                                         m_Threshold;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_Descriptor;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarvestWaterPotentialRow) == 0x000008, "Wrong alignment on FHarvestWaterPotentialRow");
static_assert(sizeof(FHarvestWaterPotentialRow) == 0x000030, "Wrong size on FHarvestWaterPotentialRow");
static_assert(offsetof(FHarvestWaterPotentialRow, m_Threshold) == 0x000010, "Member 'FHarvestWaterPotentialRow::m_Threshold' has a wrong offset!");
static_assert(offsetof(FHarvestWaterPotentialRow, m_Descriptor) == 0x000018, "Member 'FHarvestWaterPotentialRow::m_Descriptor' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingBlueprintItemTableRow
// 0x0058 (0x0068 - 0x0010)
struct FBuildingBlueprintItemTableRow final : public FTableRowBase
{
public:
	struct FBuildingBlueprintItemStats            BuildingBlueprintStats;                            // 0x0010(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingBlueprintItemTableRow) == 0x000008, "Wrong alignment on FBuildingBlueprintItemTableRow");
static_assert(sizeof(FBuildingBlueprintItemTableRow) == 0x000068, "Wrong size on FBuildingBlueprintItemTableRow");
static_assert(offsetof(FBuildingBlueprintItemTableRow, BuildingBlueprintStats) == 0x000010, "Member 'FBuildingBlueprintItemTableRow::BuildingBlueprintStats' has a wrong offset!");

// ScriptStruct DuneSandbox.ShieldItemStatsComponent_BlueprintWrapper
// 0x0050 (0x0050 - 0x0000)
struct FShieldItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShieldItemStats                       ShieldItemStats;                                   // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShieldItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FShieldItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FShieldItemStatsComponent_BlueprintWrapper) == 0x000050, "Wrong size on FShieldItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FShieldItemStatsComponent_BlueprintWrapper, ShieldItemStats) == 0x000040, "Member 'FShieldItemStatsComponent_BlueprintWrapper::ShieldItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingBlueprintPlaceableItem
// 0x0070 (0x0070 - 0x0000)
struct FBuildingBlueprintPlaceableItem final
{
public:
	struct FTransform                             m_SpawnLocalTransform;                             // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_HealthOverride;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingBlueprintPlaceableItem) == 0x000010, "Wrong alignment on FBuildingBlueprintPlaceableItem");
static_assert(sizeof(FBuildingBlueprintPlaceableItem) == 0x000070, "Wrong size on FBuildingBlueprintPlaceableItem");
static_assert(offsetof(FBuildingBlueprintPlaceableItem, m_SpawnLocalTransform) == 0x000000, "Member 'FBuildingBlueprintPlaceableItem::m_SpawnLocalTransform' has a wrong offset!");
static_assert(offsetof(FBuildingBlueprintPlaceableItem, m_HealthOverride) == 0x000060, "Member 'FBuildingBlueprintPlaceableItem::m_HealthOverride' has a wrong offset!");

// ScriptStruct DuneSandbox.ShelterDebugLineTraceData
// 0x0038 (0x0038 - 0x0000)
struct FShelterDebugLineTraceData final
{
public:
	struct FVector                                m_StartPosition;                                   // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_EndPosition;                                     // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bHit;                                            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShelterDebugLineTraceData) == 0x000008, "Wrong alignment on FShelterDebugLineTraceData");
static_assert(sizeof(FShelterDebugLineTraceData) == 0x000038, "Wrong size on FShelterDebugLineTraceData");
static_assert(offsetof(FShelterDebugLineTraceData, m_StartPosition) == 0x000000, "Member 'FShelterDebugLineTraceData::m_StartPosition' has a wrong offset!");
static_assert(offsetof(FShelterDebugLineTraceData, m_EndPosition) == 0x000018, "Member 'FShelterDebugLineTraceData::m_EndPosition' has a wrong offset!");
static_assert(offsetof(FShelterDebugLineTraceData, m_bHit) == 0x000030, "Member 'FShelterDebugLineTraceData::m_bHit' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneCameraContextPostProcessing
// 0x0700 (0x0700 - 0x0000)
struct FDuneCameraContextPostProcessing final
{
public:
	struct FPostProcessSettings                   Settings;                                          // 0x0000(0x06F0)(Edit, BlueprintVisible, SimpleDisplay, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F4[0xC];                                      // 0x06F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneCameraContextPostProcessing) == 0x000010, "Wrong alignment on FDuneCameraContextPostProcessing");
static_assert(sizeof(FDuneCameraContextPostProcessing) == 0x000700, "Wrong size on FDuneCameraContextPostProcessing");
static_assert(offsetof(FDuneCameraContextPostProcessing, Settings) == 0x000000, "Member 'FDuneCameraContextPostProcessing::Settings' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextPostProcessing, BlendWeight) == 0x0006F0, "Member 'FDuneCameraContextPostProcessing::BlendWeight' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsStreamlineReflexModeOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsStreamlineReflexModeOption final : public FSettingsEnumOptionBase
{
public:
	EStreamlineReflexMode                         Mode;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsStreamlineReflexModeOption) == 0x000008, "Wrong alignment on FSettingsStreamlineReflexModeOption");
static_assert(sizeof(FSettingsStreamlineReflexModeOption) == 0x000028, "Wrong size on FSettingsStreamlineReflexModeOption");
static_assert(offsetof(FSettingsStreamlineReflexModeOption, Mode) == 0x000020, "Member 'FSettingsStreamlineReflexModeOption::Mode' has a wrong offset!");

// ScriptStruct DuneSandbox.LocationCompactInfo
// 0x0020 (0x0020 - 0x0000)
struct FLocationCompactInfo final
{
public:
	struct FVector_NetQuantize10                  m_Location;                                        // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RotationDegreeYaw;                               // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocationCompactInfo) == 0x000008, "Wrong alignment on FLocationCompactInfo");
static_assert(sizeof(FLocationCompactInfo) == 0x000020, "Wrong size on FLocationCompactInfo");
static_assert(offsetof(FLocationCompactInfo, m_Location) == 0x000000, "Member 'FLocationCompactInfo::m_Location' has a wrong offset!");
static_assert(offsetof(FLocationCompactInfo, m_RotationDegreeYaw) == 0x000018, "Member 'FLocationCompactInfo::m_RotationDegreeYaw' has a wrong offset!");

// ScriptStruct DuneSandbox.SocialInfo
// 0x0040 (0x0040 - 0x0000)
struct FSocialInfo final
{
public:
	struct FUniqueID                              m_PlayerId;                                        // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLocationCompactInfo                   m_LocationInfo;                                    // 0x0008(0x0020)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EPlayerInVehicleStatus                        m_VehicleStatus;                                   // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerHealthStatus                           m_HealthStatus;                                    // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        m_LastTimePulseReceived;                           // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LinkProgress;                                    // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSocialInfo) == 0x000008, "Wrong alignment on FSocialInfo");
static_assert(sizeof(FSocialInfo) == 0x000040, "Wrong size on FSocialInfo");
static_assert(offsetof(FSocialInfo, m_PlayerId) == 0x000000, "Member 'FSocialInfo::m_PlayerId' has a wrong offset!");
static_assert(offsetof(FSocialInfo, m_LocationInfo) == 0x000008, "Member 'FSocialInfo::m_LocationInfo' has a wrong offset!");
static_assert(offsetof(FSocialInfo, m_VehicleStatus) == 0x000028, "Member 'FSocialInfo::m_VehicleStatus' has a wrong offset!");
static_assert(offsetof(FSocialInfo, m_HealthStatus) == 0x000029, "Member 'FSocialInfo::m_HealthStatus' has a wrong offset!");
static_assert(offsetof(FSocialInfo, m_LastTimePulseReceived) == 0x000030, "Member 'FSocialInfo::m_LastTimePulseReceived' has a wrong offset!");
static_assert(offsetof(FSocialInfo, m_LinkProgress) == 0x000038, "Member 'FSocialInfo::m_LinkProgress' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingBlueprintPlaceableItemContainer
// 0x0010 (0x0010 - 0x0000)
struct FBuildingBlueprintPlaceableItemContainer final
{
public:
	TArray<struct FBuildingBlueprintPlaceableItem> m_PlaceableInstances;                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingBlueprintPlaceableItemContainer) == 0x000008, "Wrong alignment on FBuildingBlueprintPlaceableItemContainer");
static_assert(sizeof(FBuildingBlueprintPlaceableItemContainer) == 0x000010, "Wrong size on FBuildingBlueprintPlaceableItemContainer");
static_assert(offsetof(FBuildingBlueprintPlaceableItemContainer, m_PlaceableInstances) == 0x000000, "Member 'FBuildingBlueprintPlaceableItemContainer::m_PlaceableInstances' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractWidgetLocationData
// 0x0028 (0x0028 - 0x0000)
struct FContractWidgetLocationData final
{
public:
	class FName                                   WidgetKey;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FirstObjectiveLocation;                            // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEDuneMapId                            FirstObjectiveMap;                                 // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractWidgetLocationData) == 0x000008, "Wrong alignment on FContractWidgetLocationData");
static_assert(sizeof(FContractWidgetLocationData) == 0x000028, "Wrong size on FContractWidgetLocationData");
static_assert(offsetof(FContractWidgetLocationData, WidgetKey) == 0x000000, "Member 'FContractWidgetLocationData::WidgetKey' has a wrong offset!");
static_assert(offsetof(FContractWidgetLocationData, FirstObjectiveLocation) == 0x000008, "Member 'FContractWidgetLocationData::FirstObjectiveLocation' has a wrong offset!");
static_assert(offsetof(FContractWidgetLocationData, FirstObjectiveMap) == 0x000020, "Member 'FContractWidgetLocationData::FirstObjectiveMap' has a wrong offset!");

// ScriptStruct DuneSandbox.CircuitElementBaseComponent
// 0x0008 (0x0008 - 0x0000)
struct FCircuitElementBaseComponent
{
public:
	int32                                         m_ConnectedCircuit;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsEnabled;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCircuitElementBaseComponent) == 0x000004, "Wrong alignment on FCircuitElementBaseComponent");
static_assert(sizeof(FCircuitElementBaseComponent) == 0x000008, "Wrong size on FCircuitElementBaseComponent");
static_assert(offsetof(FCircuitElementBaseComponent, m_ConnectedCircuit) == 0x000000, "Member 'FCircuitElementBaseComponent::m_ConnectedCircuit' has a wrong offset!");
static_assert(offsetof(FCircuitElementBaseComponent, m_bIsEnabled) == 0x000004, "Member 'FCircuitElementBaseComponent::m_bIsEnabled' has a wrong offset!");

// ScriptStruct DuneSandbox.PowerCircuitElementComponent
// 0x000C (0x0014 - 0x0008)
struct FPowerCircuitElementComponent final : public FCircuitElementBaseComponent
{
public:
	int32                                         m_PowerProduction;                                 // 0x0008(0x0004)(ZeroConstructor, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_PowerConsumption;                                // 0x000C(0x0004)(ZeroConstructor, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bHasPower;                                       // 0x0010(0x0001)(ZeroConstructor, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bForceOff;                                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerCircuitElementComponent) == 0x000004, "Wrong alignment on FPowerCircuitElementComponent");
static_assert(sizeof(FPowerCircuitElementComponent) == 0x000014, "Wrong size on FPowerCircuitElementComponent");
static_assert(offsetof(FPowerCircuitElementComponent, m_PowerProduction) == 0x000008, "Member 'FPowerCircuitElementComponent::m_PowerProduction' has a wrong offset!");
static_assert(offsetof(FPowerCircuitElementComponent, m_PowerConsumption) == 0x00000C, "Member 'FPowerCircuitElementComponent::m_PowerConsumption' has a wrong offset!");
static_assert(offsetof(FPowerCircuitElementComponent, m_bHasPower) == 0x000010, "Member 'FPowerCircuitElementComponent::m_bHasPower' has a wrong offset!");
static_assert(offsetof(FPowerCircuitElementComponent, m_bForceOff) == 0x000011, "Member 'FPowerCircuitElementComponent::m_bForceOff' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceablePowerCircuitSyncData
// 0x0024 (0x0024 - 0x0000)
struct FPlaceablePowerCircuitSyncData final
{
public:
	struct FEBuildableType                        m_PowerPlaceableType;                              // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPowerCircuitElementComponent          m_PowerCircuitElementComponent;                    // 0x0008(0x0014)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FCircuitElementBaseComponent           m_CircuitElementBaseComponent;                     // 0x001C(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlaceablePowerCircuitSyncData) == 0x000004, "Wrong alignment on FPlaceablePowerCircuitSyncData");
static_assert(sizeof(FPlaceablePowerCircuitSyncData) == 0x000024, "Wrong size on FPlaceablePowerCircuitSyncData");
static_assert(offsetof(FPlaceablePowerCircuitSyncData, m_PowerPlaceableType) == 0x000000, "Member 'FPlaceablePowerCircuitSyncData::m_PowerPlaceableType' has a wrong offset!");
static_assert(offsetof(FPlaceablePowerCircuitSyncData, m_PowerCircuitElementComponent) == 0x000008, "Member 'FPlaceablePowerCircuitSyncData::m_PowerCircuitElementComponent' has a wrong offset!");
static_assert(offsetof(FPlaceablePowerCircuitSyncData, m_CircuitElementBaseComponent) == 0x00001C, "Member 'FPlaceablePowerCircuitSyncData::m_CircuitElementBaseComponent' has a wrong offset!");

// ScriptStruct DuneSandbox.MTXEventDefinitionInfo
// 0x0038 (0x0038 - 0x0000)
struct FMTXEventDefinitionInfo final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         StartDate;                                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EndDate;                                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMTXEventDefinitionInfo) == 0x000008, "Wrong alignment on FMTXEventDefinitionInfo");
static_assert(sizeof(FMTXEventDefinitionInfo) == 0x000038, "Wrong size on FMTXEventDefinitionInfo");
static_assert(offsetof(FMTXEventDefinitionInfo, EventId) == 0x000000, "Member 'FMTXEventDefinitionInfo::EventId' has a wrong offset!");
static_assert(offsetof(FMTXEventDefinitionInfo, Tag) == 0x000010, "Member 'FMTXEventDefinitionInfo::Tag' has a wrong offset!");
static_assert(offsetof(FMTXEventDefinitionInfo, StartDate) == 0x000018, "Member 'FMTXEventDefinitionInfo::StartDate' has a wrong offset!");
static_assert(offsetof(FMTXEventDefinitionInfo, EndDate) == 0x000020, "Member 'FMTXEventDefinitionInfo::EndDate' has a wrong offset!");

// ScriptStruct DuneSandbox.DynamicFireModeComponent_BlueprintWrapper
// 0x00E8 (0x00E8 - 0x0000)
struct FDynamicFireModeComponent_BlueprintWrapper final
{
public:
	struct FFireMode                              FireMode;                                          // 0x0000(0x00E0)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicFireModeComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FDynamicFireModeComponent_BlueprintWrapper");
static_assert(sizeof(FDynamicFireModeComponent_BlueprintWrapper) == 0x0000E8, "Wrong size on FDynamicFireModeComponent_BlueprintWrapper");
static_assert(offsetof(FDynamicFireModeComponent_BlueprintWrapper, FireMode) == 0x000000, "Member 'FDynamicFireModeComponent_BlueprintWrapper::FireMode' has a wrong offset!");

// ScriptStruct DuneSandbox.PowerCircuitSyncData
// 0x0078 (0x0078 - 0x0000)
struct FPowerCircuitSyncData final
{
public:
	struct FTotemCircuitPower                     m_PowerCircuit;                                    // 0x0000(0x0068)(NativeAccessSpecifierPrivate)
	TArray<struct FPlaceablePowerCircuitSyncData> m_PowerPlaceablesCircuitData;                      // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPowerCircuitSyncData) == 0x000008, "Wrong alignment on FPowerCircuitSyncData");
static_assert(sizeof(FPowerCircuitSyncData) == 0x000078, "Wrong size on FPowerCircuitSyncData");
static_assert(offsetof(FPowerCircuitSyncData, m_PowerCircuit) == 0x000000, "Member 'FPowerCircuitSyncData::m_PowerCircuit' has a wrong offset!");
static_assert(offsetof(FPowerCircuitSyncData, m_PowerPlaceablesCircuitData) == 0x000068, "Member 'FPowerCircuitSyncData::m_PowerPlaceablesCircuitData' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableInfo
// 0x0020 (0x0020 - 0x0000)
struct FBuildableInfo final
{
public:
	uint64                                        m_PositionHash;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildableBase*                         m_BuildableActor;                                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInstancedBuildingComponent*            m_BuildingComponent;                               // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_BuildingComponentIndex;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildableInfo) == 0x000008, "Wrong alignment on FBuildableInfo");
static_assert(sizeof(FBuildableInfo) == 0x000020, "Wrong size on FBuildableInfo");
static_assert(offsetof(FBuildableInfo, m_PositionHash) == 0x000000, "Member 'FBuildableInfo::m_PositionHash' has a wrong offset!");
static_assert(offsetof(FBuildableInfo, m_BuildableActor) == 0x000008, "Member 'FBuildableInfo::m_BuildableActor' has a wrong offset!");
static_assert(offsetof(FBuildableInfo, m_BuildingComponent) == 0x000010, "Member 'FBuildableInfo::m_BuildingComponent' has a wrong offset!");
static_assert(offsetof(FBuildableInfo, m_BuildingComponentIndex) == 0x000018, "Member 'FBuildableInfo::m_BuildingComponentIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleHarnessComponent
// 0x0160 (0x0160 - 0x0000)
struct FVehicleHarnessComponent final
{
public:
	struct FVehicleHarnessStaticData              m_StaticData;                                      // 0x0000(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  m_AttachChild;                                     // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             m_SweepResult;                                     // 0x0070(0x00E8)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          m_SweepResultWasHarnessableAtSweep;                // 0x0158(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleHarnessComponent) == 0x000008, "Wrong alignment on FVehicleHarnessComponent");
static_assert(sizeof(FVehicleHarnessComponent) == 0x000160, "Wrong size on FVehicleHarnessComponent");
static_assert(offsetof(FVehicleHarnessComponent, m_StaticData) == 0x000000, "Member 'FVehicleHarnessComponent::m_StaticData' has a wrong offset!");
static_assert(offsetof(FVehicleHarnessComponent, m_AttachChild) == 0x000068, "Member 'FVehicleHarnessComponent::m_AttachChild' has a wrong offset!");
static_assert(offsetof(FVehicleHarnessComponent, m_SweepResult) == 0x000070, "Member 'FVehicleHarnessComponent::m_SweepResult' has a wrong offset!");
static_assert(offsetof(FVehicleHarnessComponent, m_SweepResultWasHarnessableAtSweep) == 0x000158, "Member 'FVehicleHarnessComponent::m_SweepResultWasHarnessableAtSweep' has a wrong offset!");

// ScriptStruct DuneSandbox.PowerCircuitsSyncData
// 0x0010 (0x0010 - 0x0000)
struct FPowerCircuitsSyncData final
{
public:
	TArray<struct FPowerCircuitSyncData>          m_PowerCircuitsData;                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPowerCircuitsSyncData) == 0x000008, "Wrong alignment on FPowerCircuitsSyncData");
static_assert(sizeof(FPowerCircuitsSyncData) == 0x000010, "Wrong size on FPowerCircuitsSyncData");
static_assert(offsetof(FPowerCircuitsSyncData, m_PowerCircuitsData) == 0x000000, "Member 'FPowerCircuitsSyncData::m_PowerCircuitsData' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableUnlockableSet
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableUnlockableSet final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableUnlockableSet) == 0x000004, "Wrong alignment on FEBuildableUnlockableSet");
static_assert(sizeof(FEBuildableUnlockableSet) == 0x000008, "Wrong size on FEBuildableUnlockableSet");

// ScriptStruct DuneSandbox.UnlockedBuildingSetData
// 0x0008 (0x0014 - 0x000C)
struct FUnlockedBuildingSetData final : public FFastArraySerializerItem
{
public:
	struct FEBuildableUnlockableSet               m_UnlockedBuildingSet;                             // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnlockedBuildingSetData) == 0x000004, "Wrong alignment on FUnlockedBuildingSetData");
static_assert(sizeof(FUnlockedBuildingSetData) == 0x000014, "Wrong size on FUnlockedBuildingSetData");
static_assert(offsetof(FUnlockedBuildingSetData, m_UnlockedBuildingSet) == 0x00000C, "Member 'FUnlockedBuildingSetData::m_UnlockedBuildingSet' has a wrong offset!");

// ScriptStruct DuneSandbox.FillableItemTableRow
// 0x0020 (0x0030 - 0x0010)
struct FFillableItemTableRow final : public FTableRowBase
{
public:
	struct FFillableItemStats                     FillableStats;                                     // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFillableItemTableRow) == 0x000008, "Wrong alignment on FFillableItemTableRow");
static_assert(sizeof(FFillableItemTableRow) == 0x000030, "Wrong size on FFillableItemTableRow");
static_assert(offsetof(FFillableItemTableRow, FillableStats) == 0x000010, "Member 'FFillableItemTableRow::FillableStats' has a wrong offset!");

// ScriptStruct DuneSandbox.WaterStorageComponent
// 0x000C (0x000C - 0x0000)
struct FWaterStorageComponent final
{
public:
	int32                                         m_WaterCapacity;                                   // 0x0000(0x0004)(ZeroConstructor, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_WaterStored;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        m_WaterStorageCircuitPriority;                     // 0x0008(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaterStorageComponent) == 0x000004, "Wrong alignment on FWaterStorageComponent");
static_assert(sizeof(FWaterStorageComponent) == 0x00000C, "Wrong size on FWaterStorageComponent");
static_assert(offsetof(FWaterStorageComponent, m_WaterCapacity) == 0x000000, "Member 'FWaterStorageComponent::m_WaterCapacity' has a wrong offset!");
static_assert(offsetof(FWaterStorageComponent, m_WaterStored) == 0x000004, "Member 'FWaterStorageComponent::m_WaterStored' has a wrong offset!");
static_assert(offsetof(FWaterStorageComponent, m_WaterStorageCircuitPriority) == 0x000008, "Member 'FWaterStorageComponent::m_WaterStorageCircuitPriority' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceableWaterCircuitSyncData
// 0x0014 (0x0014 - 0x0000)
struct FPlaceableWaterCircuitSyncData final
{
public:
	struct FEBuildableType                        m_WaterPlaceableType;                              // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FWaterStorageComponent                 m_WaterStorageComponent;                           // 0x0008(0x000C)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlaceableWaterCircuitSyncData) == 0x000004, "Wrong alignment on FPlaceableWaterCircuitSyncData");
static_assert(sizeof(FPlaceableWaterCircuitSyncData) == 0x000014, "Wrong size on FPlaceableWaterCircuitSyncData");
static_assert(offsetof(FPlaceableWaterCircuitSyncData, m_WaterPlaceableType) == 0x000000, "Member 'FPlaceableWaterCircuitSyncData::m_WaterPlaceableType' has a wrong offset!");
static_assert(offsetof(FPlaceableWaterCircuitSyncData, m_WaterStorageComponent) == 0x000008, "Member 'FPlaceableWaterCircuitSyncData::m_WaterStorageComponent' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleCollisionDamageInfo
// 0x0038 (0x0038 - 0x0000)
struct FVehicleCollisionDamageInfo final
{
public:
	class AActor*                                 m_DamagedActor;                                    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 m_DamageCauser;                                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            m_Instigator;                                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleCollisionDamageInfo) == 0x000008, "Wrong alignment on FVehicleCollisionDamageInfo");
static_assert(sizeof(FVehicleCollisionDamageInfo) == 0x000038, "Wrong size on FVehicleCollisionDamageInfo");
static_assert(offsetof(FVehicleCollisionDamageInfo, m_DamagedActor) == 0x000000, "Member 'FVehicleCollisionDamageInfo::m_DamagedActor' has a wrong offset!");
static_assert(offsetof(FVehicleCollisionDamageInfo, m_DamageCauser) == 0x000008, "Member 'FVehicleCollisionDamageInfo::m_DamageCauser' has a wrong offset!");
static_assert(offsetof(FVehicleCollisionDamageInfo, m_Instigator) == 0x000010, "Member 'FVehicleCollisionDamageInfo::m_Instigator' has a wrong offset!");

// ScriptStruct DuneSandbox.FlyingVehicleComponent
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FFlyingVehicleComponent final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlyingVehicleComponent) == 0x000008, "Wrong alignment on FFlyingVehicleComponent");
static_assert(sizeof(FFlyingVehicleComponent) == 0x000038, "Wrong size on FFlyingVehicleComponent");

// ScriptStruct DuneSandbox.PatrolShipSpawnerEntry
// 0x0028 (0x0028 - 0x0000)
struct FPatrolShipSpawnerEntry final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APatrolShipSpawner*>             ActiveSpawners;                                    // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class APatrolShipSpawner*>             InactiveSpawners;                                  // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolShipSpawnerEntry) == 0x000008, "Wrong alignment on FPatrolShipSpawnerEntry");
static_assert(sizeof(FPatrolShipSpawnerEntry) == 0x000028, "Wrong size on FPatrolShipSpawnerEntry");
static_assert(offsetof(FPatrolShipSpawnerEntry, ActiveSpawners) == 0x000008, "Member 'FPatrolShipSpawnerEntry::ActiveSpawners' has a wrong offset!");
static_assert(offsetof(FPatrolShipSpawnerEntry, InactiveSpawners) == 0x000018, "Member 'FPatrolShipSpawnerEntry::InactiveSpawners' has a wrong offset!");

// ScriptStruct DuneSandbox.FlyBySoundComponent
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FFlyBySoundComponent final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlyBySoundComponent) == 0x000008, "Wrong alignment on FFlyBySoundComponent");
static_assert(sizeof(FFlyBySoundComponent) == 0x000068, "Wrong size on FFlyBySoundComponent");

// ScriptStruct DuneSandbox.SettingFrameCapOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingFrameCapOption final : public FSettingsEnumOptionBase
{
public:
	EFrameCapOption                               FrameCapOption;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingFrameCapOption) == 0x000008, "Wrong alignment on FSettingFrameCapOption");
static_assert(sizeof(FSettingFrameCapOption) == 0x000028, "Wrong size on FSettingFrameCapOption");
static_assert(offsetof(FSettingFrameCapOption, FrameCapOption) == 0x000020, "Member 'FSettingFrameCapOption::FrameCapOption' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemCircuitWater
// 0x0010 (0x0070 - 0x0060)
struct FTotemCircuitWater final : public FTotemCircuit
{
public:
	int32                                         m_TotalWaterStored;                                // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_TotalWaterCapacity;                              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_WaterCarriedOver;                                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTotemCircuitWater) == 0x000008, "Wrong alignment on FTotemCircuitWater");
static_assert(sizeof(FTotemCircuitWater) == 0x000070, "Wrong size on FTotemCircuitWater");
static_assert(offsetof(FTotemCircuitWater, m_TotalWaterStored) == 0x000060, "Member 'FTotemCircuitWater::m_TotalWaterStored' has a wrong offset!");
static_assert(offsetof(FTotemCircuitWater, m_TotalWaterCapacity) == 0x000064, "Member 'FTotemCircuitWater::m_TotalWaterCapacity' has a wrong offset!");
static_assert(offsetof(FTotemCircuitWater, m_WaterCarriedOver) == 0x000068, "Member 'FTotemCircuitWater::m_WaterCarriedOver' has a wrong offset!");

// ScriptStruct DuneSandbox.WaterCircuitSyncData
// 0x0080 (0x0080 - 0x0000)
struct FWaterCircuitSyncData final
{
public:
	struct FTotemCircuitWater                     m_WaterCircuit;                                    // 0x0000(0x0070)(NativeAccessSpecifierPrivate)
	TArray<struct FPlaceableWaterCircuitSyncData> m_WaterPlaceablesCircuitData;                      // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FWaterCircuitSyncData) == 0x000008, "Wrong alignment on FWaterCircuitSyncData");
static_assert(sizeof(FWaterCircuitSyncData) == 0x000080, "Wrong size on FWaterCircuitSyncData");
static_assert(offsetof(FWaterCircuitSyncData, m_WaterCircuit) == 0x000000, "Member 'FWaterCircuitSyncData::m_WaterCircuit' has a wrong offset!");
static_assert(offsetof(FWaterCircuitSyncData, m_WaterPlaceablesCircuitData) == 0x000070, "Member 'FWaterCircuitSyncData::m_WaterPlaceablesCircuitData' has a wrong offset!");

// ScriptStruct DuneSandbox.NiagaraVFXMeshParticleSystem
// 0x0018 (0x0018 - 0x0000)
struct FNiagaraVFXMeshParticleSystem final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraParticleSystem;                             // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNiagaraVFXMeshParticleSystem) == 0x000008, "Wrong alignment on FNiagaraVFXMeshParticleSystem");
static_assert(sizeof(FNiagaraVFXMeshParticleSystem) == 0x000018, "Wrong size on FNiagaraVFXMeshParticleSystem");
static_assert(offsetof(FNiagaraVFXMeshParticleSystem, MeshComponent) == 0x000000, "Member 'FNiagaraVFXMeshParticleSystem::MeshComponent' has a wrong offset!");
static_assert(offsetof(FNiagaraVFXMeshParticleSystem, NiagaraParticleSystem) == 0x000008, "Member 'FNiagaraVFXMeshParticleSystem::NiagaraParticleSystem' has a wrong offset!");

// ScriptStruct DuneSandbox.DrinkStatsComponent_BlueprintWrapper
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FDrinkStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDrinkStats                            DrinkStats;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrinkStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FDrinkStatsComponent_BlueprintWrapper");
static_assert(sizeof(FDrinkStatsComponent_BlueprintWrapper) == 0x000030, "Wrong size on FDrinkStatsComponent_BlueprintWrapper");
static_assert(offsetof(FDrinkStatsComponent_BlueprintWrapper, DrinkStats) == 0x000028, "Member 'FDrinkStatsComponent_BlueprintWrapper::DrinkStats' has a wrong offset!");

// ScriptStruct DuneSandbox.PotentialBuildGhost
// 0x0120 (0x0120 - 0x0000)
struct alignas(0x10) FPotentialBuildGhost final
{
public:
	class ABuildingBase*                          TargetBuildable;                                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x111];                                      // 0x0008(0x0111)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsTierUpgrade;                                     // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPotentialBuildGhost) == 0x000010, "Wrong alignment on FPotentialBuildGhost");
static_assert(sizeof(FPotentialBuildGhost) == 0x000120, "Wrong size on FPotentialBuildGhost");
static_assert(offsetof(FPotentialBuildGhost, TargetBuildable) == 0x000000, "Member 'FPotentialBuildGhost::TargetBuildable' has a wrong offset!");
static_assert(offsetof(FPotentialBuildGhost, IsTierUpgrade) == 0x000119, "Member 'FPotentialBuildGhost::IsTierUpgrade' has a wrong offset!");

// ScriptStruct DuneSandbox.SimilarPositionBuildableGhostArray
// 0x0018 (0x0018 - 0x0000)
struct FSimilarPositionBuildableGhostArray final
{
public:
	TArray<struct FPotentialBuildGhost>           m_Ghosts;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimilarPositionBuildableGhostArray) == 0x000008, "Wrong alignment on FSimilarPositionBuildableGhostArray");
static_assert(sizeof(FSimilarPositionBuildableGhostArray) == 0x000018, "Wrong size on FSimilarPositionBuildableGhostArray");
static_assert(offsetof(FSimilarPositionBuildableGhostArray, m_Ghosts) == 0x000000, "Member 'FSimilarPositionBuildableGhostArray::m_Ghosts' has a wrong offset!");

// ScriptStruct DuneSandbox.WaterCircuitsSyncData
// 0x0010 (0x0010 - 0x0000)
struct FWaterCircuitsSyncData final
{
public:
	TArray<struct FWaterCircuitSyncData>          m_WaterCircuitsData;                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FWaterCircuitsSyncData) == 0x000008, "Wrong alignment on FWaterCircuitsSyncData");
static_assert(sizeof(FWaterCircuitsSyncData) == 0x000010, "Wrong size on FWaterCircuitsSyncData");
static_assert(offsetof(FWaterCircuitsSyncData, m_WaterCircuitsData) == 0x000000, "Member 'FWaterCircuitsSyncData::m_WaterCircuitsData' has a wrong offset!");

// ScriptStruct DuneSandbox.DoorDataRowBase
// 0x0008 (0x0018 - 0x0010)
struct FDoorDataRowBase final : public FTableRowBase
{
public:
	EDoorType                                     m_DoorType;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDoorDataRowBase) == 0x000008, "Wrong alignment on FDoorDataRowBase");
static_assert(sizeof(FDoorDataRowBase) == 0x000018, "Wrong size on FDoorDataRowBase");
static_assert(offsetof(FDoorDataRowBase, m_DoorType) == 0x000010, "Member 'FDoorDataRowBase::m_DoorType' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemProximityCheckComponent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTotemProximityCheckComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTotemProximityCheckComponent) == 0x000008, "Wrong alignment on FTotemProximityCheckComponent");
static_assert(sizeof(FTotemProximityCheckComponent) == 0x000008, "Wrong size on FTotemProximityCheckComponent");

// ScriptStruct DuneSandbox.BuildingComponent
// 0x0001 (0x0001 - 0x0000)
struct FBuildingComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingComponent) == 0x000001, "Wrong alignment on FBuildingComponent");
static_assert(sizeof(FBuildingComponent) == 0x000001, "Wrong size on FBuildingComponent");

// ScriptStruct DuneSandbox.SandwormTarget
// 0x0068 (0x0068 - 0x0000)
struct FSandwormTarget final
{
public:
	class USandwormThreatSourceComponent*         m_Target;                                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_TargetLocation;                                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_PredictedTargetLocation;                         // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_VerticalAttackTargetLocation;                    // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bHasDynamicTarget;                               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsDynamicTargetStationary;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsCloseRangeVerticalAttackActive;               // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bHasStaticTarget;                                // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x14];                                      // 0x0054(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandwormTarget) == 0x000008, "Wrong alignment on FSandwormTarget");
static_assert(sizeof(FSandwormTarget) == 0x000068, "Wrong size on FSandwormTarget");
static_assert(offsetof(FSandwormTarget, m_Target) == 0x000000, "Member 'FSandwormTarget::m_Target' has a wrong offset!");
static_assert(offsetof(FSandwormTarget, m_TargetLocation) == 0x000008, "Member 'FSandwormTarget::m_TargetLocation' has a wrong offset!");
static_assert(offsetof(FSandwormTarget, m_PredictedTargetLocation) == 0x000020, "Member 'FSandwormTarget::m_PredictedTargetLocation' has a wrong offset!");
static_assert(offsetof(FSandwormTarget, m_VerticalAttackTargetLocation) == 0x000038, "Member 'FSandwormTarget::m_VerticalAttackTargetLocation' has a wrong offset!");
static_assert(offsetof(FSandwormTarget, m_bHasDynamicTarget) == 0x000050, "Member 'FSandwormTarget::m_bHasDynamicTarget' has a wrong offset!");
static_assert(offsetof(FSandwormTarget, m_bIsDynamicTargetStationary) == 0x000051, "Member 'FSandwormTarget::m_bIsDynamicTargetStationary' has a wrong offset!");
static_assert(offsetof(FSandwormTarget, m_bIsCloseRangeVerticalAttackActive) == 0x000052, "Member 'FSandwormTarget::m_bIsCloseRangeVerticalAttackActive' has a wrong offset!");
static_assert(offsetof(FSandwormTarget, m_bHasStaticTarget) == 0x000053, "Member 'FSandwormTarget::m_bHasStaticTarget' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadControlPointSettings
// 0x0030 (0x0030 - 0x0000)
struct FLandsraadControlPointSettings final
{
public:
	TSoftObjectPtr<class ULandsraadHouseDataAsset> House;                                            // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadControlPointSettings) == 0x000008, "Wrong alignment on FLandsraadControlPointSettings");
static_assert(sizeof(FLandsraadControlPointSettings) == 0x000030, "Wrong size on FLandsraadControlPointSettings");
static_assert(offsetof(FLandsraadControlPointSettings, House) == 0x000000, "Member 'FLandsraadControlPointSettings::House' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadControlPointEntry
// 0x0030 (0x00D0 - 0x00A0)
struct FLandsraadControlPointEntry final : public FGenericActorWorldLayoutEntry
{
public:
	struct FLandsraadControlPointSettings         Settings;                                          // 0x00A0(0x0030)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadControlPointEntry) == 0x000010, "Wrong alignment on FLandsraadControlPointEntry");
static_assert(sizeof(FLandsraadControlPointEntry) == 0x0000D0, "Wrong size on FLandsraadControlPointEntry");
static_assert(offsetof(FLandsraadControlPointEntry, Settings) == 0x0000A0, "Member 'FLandsraadControlPointEntry::Settings' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingModuleComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBuildingModuleComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingModuleComponent) == 0x000008, "Wrong alignment on FBuildingModuleComponent");
static_assert(sizeof(FBuildingModuleComponent) == 0x000010, "Wrong size on FBuildingModuleComponent");

// ScriptStruct DuneSandbox.EActorDiegeticUi
// 0x0000 (0x0008 - 0x0008)
struct FEActorDiegeticUi final : public FStringEnumValue
{
};
static_assert(alignof(FEActorDiegeticUi) == 0x000004, "Wrong alignment on FEActorDiegeticUi");
static_assert(sizeof(FEActorDiegeticUi) == 0x000008, "Wrong size on FEActorDiegeticUi");

// ScriptStruct DuneSandbox.DiegeticGuiPointConfig
// 0x0070 (0x0070 - 0x0000)
struct FDiegeticGuiPointConfig final
{
public:
	struct FTransform                             m_WorldTransform;                                  // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxDistance;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAutoRotateToCharacter;                          // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEActorDiegeticUi                      m_DiegeticGuiType;                                 // 0x0068(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDiegeticGuiPointConfig) == 0x000010, "Wrong alignment on FDiegeticGuiPointConfig");
static_assert(sizeof(FDiegeticGuiPointConfig) == 0x000070, "Wrong size on FDiegeticGuiPointConfig");
static_assert(offsetof(FDiegeticGuiPointConfig, m_WorldTransform) == 0x000000, "Member 'FDiegeticGuiPointConfig::m_WorldTransform' has a wrong offset!");
static_assert(offsetof(FDiegeticGuiPointConfig, m_MaxDistance) == 0x000060, "Member 'FDiegeticGuiPointConfig::m_MaxDistance' has a wrong offset!");
static_assert(offsetof(FDiegeticGuiPointConfig, m_bAutoRotateToCharacter) == 0x000064, "Member 'FDiegeticGuiPointConfig::m_bAutoRotateToCharacter' has a wrong offset!");
static_assert(offsetof(FDiegeticGuiPointConfig, m_DiegeticGuiType) == 0x000068, "Member 'FDiegeticGuiPointConfig::m_DiegeticGuiType' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodeInfo
// 0x0020 (0x0020 - 0x0000)
struct FResourceNodeInfo final
{
public:
	class AResourceNode*                          ResourceNode;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceNodeInfo) == 0x000008, "Wrong alignment on FResourceNodeInfo");
static_assert(sizeof(FResourceNodeInfo) == 0x000020, "Wrong size on FResourceNodeInfo");
static_assert(offsetof(FResourceNodeInfo, ResourceNode) == 0x000000, "Member 'FResourceNodeInfo::ResourceNode' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingModuleOwnerComponent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FBuildingModuleOwnerComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingModuleOwnerComponent) == 0x000004, "Wrong alignment on FBuildingModuleOwnerComponent");
static_assert(sizeof(FBuildingModuleOwnerComponent) == 0x000008, "Wrong size on FBuildingModuleOwnerComponent");

// ScriptStruct DuneSandbox.DialogueNodeContext
// 0x0018 (0x0018 - 0x0000)
struct FDialogueNodeContext final
{
public:
	class ADunePlayerControllerBase*              PlayerController;                                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADuneNpcCharacter*                      NPC;                                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADuneCharacter*                         Speaker;                                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueNodeContext) == 0x000008, "Wrong alignment on FDialogueNodeContext");
static_assert(sizeof(FDialogueNodeContext) == 0x000018, "Wrong size on FDialogueNodeContext");
static_assert(offsetof(FDialogueNodeContext, PlayerController) == 0x000000, "Member 'FDialogueNodeContext::PlayerController' has a wrong offset!");
static_assert(offsetof(FDialogueNodeContext, NPC) == 0x000008, "Member 'FDialogueNodeContext::NPC' has a wrong offset!");
static_assert(offsetof(FDialogueNodeContext, Speaker) == 0x000010, "Member 'FDialogueNodeContext::Speaker' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadTask
// 0x0034 (0x0040 - 0x000C)
struct FLandsraadTask final : public FFastArraySerializerItem
{
public:
	int32                                         m_BoardIndex;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_HouseName;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCompleted;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bSysselraad;                                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEFaction                              m_WinningFaction;                                  // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFaction                              m_ControlPointOwningFaction;                       // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUniqueID>                      m_ControlPointOwningPlayers;                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadTask) == 0x000008, "Wrong alignment on FLandsraadTask");
static_assert(sizeof(FLandsraadTask) == 0x000040, "Wrong size on FLandsraadTask");
static_assert(offsetof(FLandsraadTask, m_BoardIndex) == 0x00000C, "Member 'FLandsraadTask::m_BoardIndex' has a wrong offset!");
static_assert(offsetof(FLandsraadTask, m_HouseName) == 0x000010, "Member 'FLandsraadTask::m_HouseName' has a wrong offset!");
static_assert(offsetof(FLandsraadTask, m_bCompleted) == 0x000018, "Member 'FLandsraadTask::m_bCompleted' has a wrong offset!");
static_assert(offsetof(FLandsraadTask, m_bSysselraad) == 0x000019, "Member 'FLandsraadTask::m_bSysselraad' has a wrong offset!");
static_assert(offsetof(FLandsraadTask, m_WinningFaction) == 0x00001C, "Member 'FLandsraadTask::m_WinningFaction' has a wrong offset!");
static_assert(offsetof(FLandsraadTask, m_ControlPointOwningFaction) == 0x000024, "Member 'FLandsraadTask::m_ControlPointOwningFaction' has a wrong offset!");
static_assert(offsetof(FLandsraadTask, m_ControlPointOwningPlayers) == 0x000030, "Member 'FLandsraadTask::m_ControlPointOwningPlayers' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadTaskContainer
// 0x0018 (0x0140 - 0x0128)
struct FLandsraadTaskContainer final : public FFastArraySerializer
{
public:
	TArray<struct FLandsraadTask>                 m_Items;                                           // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class ULandsraadStateComponent*               m_Owner;                                           // 0x0138(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadTaskContainer) == 0x000008, "Wrong alignment on FLandsraadTaskContainer");
static_assert(sizeof(FLandsraadTaskContainer) == 0x000140, "Wrong size on FLandsraadTaskContainer");
static_assert(offsetof(FLandsraadTaskContainer, m_Items) == 0x000128, "Member 'FLandsraadTaskContainer::m_Items' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskContainer, m_Owner) == 0x000138, "Member 'FLandsraadTaskContainer::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingSizeChangedComponent
// 0x0001 (0x0001 - 0x0000)
struct FBuildingSizeChangedComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingSizeChangedComponent) == 0x000001, "Wrong alignment on FBuildingSizeChangedComponent");
static_assert(sizeof(FBuildingSizeChangedComponent) == 0x000001, "Wrong size on FBuildingSizeChangedComponent");

// ScriptStruct DuneSandbox.CachedMeleeWeaponData
// 0x01B0 (0x01B0 - 0x0000)
struct FCachedMeleeWeaponData final
{
public:
	EMeleeType                                    m_CachedMeleeWeaponType;                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   m_CachedMeleeWeaponSocketNameStart;                // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_CachedMeleeWeaponSocketNameEnd;                  // 0x000C(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_CachedMeleeWeaponName;                           // 0x0014(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicalSurface, TSoftObjectPtr<class UNiagaraSystem>> m_ImpactFX;                         // 0x0020(0x0050)(Transient, RepSkip, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EDamageBlockType, TSoftObjectPtr<class UNiagaraSystem>> m_BlockedImpactFX;                  // 0x0070(0x0050)(Transient, RepSkip, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, TSoftClassPtr<class UClass>> m_ImpactDecals;                              // 0x00C0(0x0050)(Transient, RepSkip, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UDuneDamageType>            m_DamageTypeClass;                                 // 0x0110(0x0008)(BlueprintVisible, ZeroConstructor, Transient, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_DuneAudioEvent;                                  // 0x0118(0x0008)(BlueprintVisible, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApply;                          // 0x0120(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApplyToAttacker;                // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           m_CameraShakeFX;                                   // 0x0140(0x0008)(BlueprintVisible, ZeroConstructor, Transient, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   m_ForceFeedbackFX;                                 // 0x0148(0x0008)(BlueprintVisible, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           m_CameraShakeShieldedFX;                           // 0x0150(0x0008)(BlueprintVisible, ZeroConstructor, Transient, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   m_ForceFeedbackShieldedFX;                         // 0x0158(0x0008)(BlueprintVisible, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Damage;                                          // 0x0160(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StaminaBaseCost;                                 // 0x0164(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlockStaminaCost;                                // 0x0168(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage;                                     // 0x016C(0x000C)(BlueprintVisible, Transient, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_BlockPoiseDamage;                                // 0x0178(0x000C)(BlueprintVisible, Transient, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamageShielded;                             // 0x0184(0x000C)(BlueprintVisible, Transient, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_Damage_NPC;                                      // 0x0190(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage_NPC;                                 // 0x0194(0x000C)(BlueprintVisible, Transient, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_RangeEnd;                                        // 0x01A0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RangeStart;                                      // 0x01A4(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              m_MeleeWeaponItemId;                               // 0x01A8(0x0008)(Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedMeleeWeaponData) == 0x000008, "Wrong alignment on FCachedMeleeWeaponData");
static_assert(sizeof(FCachedMeleeWeaponData) == 0x0001B0, "Wrong size on FCachedMeleeWeaponData");
static_assert(offsetof(FCachedMeleeWeaponData, m_CachedMeleeWeaponType) == 0x000000, "Member 'FCachedMeleeWeaponData::m_CachedMeleeWeaponType' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_CachedMeleeWeaponSocketNameStart) == 0x000004, "Member 'FCachedMeleeWeaponData::m_CachedMeleeWeaponSocketNameStart' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_CachedMeleeWeaponSocketNameEnd) == 0x00000C, "Member 'FCachedMeleeWeaponData::m_CachedMeleeWeaponSocketNameEnd' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_CachedMeleeWeaponName) == 0x000014, "Member 'FCachedMeleeWeaponData::m_CachedMeleeWeaponName' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_ImpactFX) == 0x000020, "Member 'FCachedMeleeWeaponData::m_ImpactFX' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_BlockedImpactFX) == 0x000070, "Member 'FCachedMeleeWeaponData::m_BlockedImpactFX' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_ImpactDecals) == 0x0000C0, "Member 'FCachedMeleeWeaponData::m_ImpactDecals' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_DamageTypeClass) == 0x000110, "Member 'FCachedMeleeWeaponData::m_DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_DuneAudioEvent) == 0x000118, "Member 'FCachedMeleeWeaponData::m_DuneAudioEvent' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_GameplayEffectsToApply) == 0x000120, "Member 'FCachedMeleeWeaponData::m_GameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_GameplayEffectsToApplyToAttacker) == 0x000130, "Member 'FCachedMeleeWeaponData::m_GameplayEffectsToApplyToAttacker' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_CameraShakeFX) == 0x000140, "Member 'FCachedMeleeWeaponData::m_CameraShakeFX' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_ForceFeedbackFX) == 0x000148, "Member 'FCachedMeleeWeaponData::m_ForceFeedbackFX' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_CameraShakeShieldedFX) == 0x000150, "Member 'FCachedMeleeWeaponData::m_CameraShakeShieldedFX' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_ForceFeedbackShieldedFX) == 0x000158, "Member 'FCachedMeleeWeaponData::m_ForceFeedbackShieldedFX' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_Damage) == 0x000160, "Member 'FCachedMeleeWeaponData::m_Damage' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_StaminaBaseCost) == 0x000164, "Member 'FCachedMeleeWeaponData::m_StaminaBaseCost' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_BlockStaminaCost) == 0x000168, "Member 'FCachedMeleeWeaponData::m_BlockStaminaCost' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_PoiseDamage) == 0x00016C, "Member 'FCachedMeleeWeaponData::m_PoiseDamage' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_BlockPoiseDamage) == 0x000178, "Member 'FCachedMeleeWeaponData::m_BlockPoiseDamage' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_PoiseDamageShielded) == 0x000184, "Member 'FCachedMeleeWeaponData::m_PoiseDamageShielded' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_Damage_NPC) == 0x000190, "Member 'FCachedMeleeWeaponData::m_Damage_NPC' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_PoiseDamage_NPC) == 0x000194, "Member 'FCachedMeleeWeaponData::m_PoiseDamage_NPC' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_RangeEnd) == 0x0001A0, "Member 'FCachedMeleeWeaponData::m_RangeEnd' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_RangeStart) == 0x0001A4, "Member 'FCachedMeleeWeaponData::m_RangeStart' has a wrong offset!");
static_assert(offsetof(FCachedMeleeWeaponData, m_MeleeWeaponItemId) == 0x0001A8, "Member 'FCachedMeleeWeaponData::m_MeleeWeaponItemId' has a wrong offset!");

// ScriptStruct DuneSandbox.DebugSandstormManagerData
// 0x0008 (0x0008 - 0x0000)
struct FDebugSandstormManagerData final
{
public:
	int64                                         m_UnixTimestampOfWhenToSpawnNextSandstorm;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugSandstormManagerData) == 0x000008, "Wrong alignment on FDebugSandstormManagerData");
static_assert(sizeof(FDebugSandstormManagerData) == 0x000008, "Wrong size on FDebugSandstormManagerData");
static_assert(offsetof(FDebugSandstormManagerData, m_UnixTimestampOfWhenToSpawnNextSandstorm) == 0x000000, "Member 'FDebugSandstormManagerData::m_UnixTimestampOfWhenToSpawnNextSandstorm' has a wrong offset!");

// ScriptStruct DuneSandbox.LandclaimSegmentData
// 0x0008 (0x0014 - 0x000C)
struct FLandclaimSegmentData final : public FFastArraySerializerItem
{
public:
	struct FIntPoint                              m_GridLocation;                                    // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandclaimSegmentData) == 0x000004, "Wrong alignment on FLandclaimSegmentData");
static_assert(sizeof(FLandclaimSegmentData) == 0x000014, "Wrong size on FLandclaimSegmentData");
static_assert(offsetof(FLandclaimSegmentData, m_GridLocation) == 0x00000C, "Member 'FLandclaimSegmentData::m_GridLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.DistributeItemResultRemainingAmount
// 0x000C (0x000C - 0x0000)
struct FDistributeItemResultRemainingAmount final
{
public:
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0000(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Amount;                                          // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistributeItemResultRemainingAmount) == 0x000004, "Wrong alignment on FDistributeItemResultRemainingAmount");
static_assert(sizeof(FDistributeItemResultRemainingAmount) == 0x00000C, "Wrong size on FDistributeItemResultRemainingAmount");
static_assert(offsetof(FDistributeItemResultRemainingAmount, m_ItemTemplateId) == 0x000000, "Member 'FDistributeItemResultRemainingAmount::m_ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FDistributeItemResultRemainingAmount, m_Amount) == 0x000008, "Member 'FDistributeItemResultRemainingAmount::m_Amount' has a wrong offset!");

// ScriptStruct DuneSandbox.DistributeItemResultAction
// 0x0030 (0x0030 - 0x0000)
struct FDistributeItemResultAction final
{
public:
	EDistributeItemResultActionType               m_Type;                                            // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemInventory*                         m_Inventory;                                       // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameItemInfo                          m_GameItemInfo;                                    // 0x0018(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          m_bIsTargetInventory;                              // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bHasBeenUsed;                                    // 0x0029(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDistributeItemResultAction) == 0x000008, "Wrong alignment on FDistributeItemResultAction");
static_assert(sizeof(FDistributeItemResultAction) == 0x000030, "Wrong size on FDistributeItemResultAction");
static_assert(offsetof(FDistributeItemResultAction, m_Type) == 0x000000, "Member 'FDistributeItemResultAction::m_Type' has a wrong offset!");
static_assert(offsetof(FDistributeItemResultAction, m_Inventory) == 0x000008, "Member 'FDistributeItemResultAction::m_Inventory' has a wrong offset!");
static_assert(offsetof(FDistributeItemResultAction, m_GameItemInfo) == 0x000018, "Member 'FDistributeItemResultAction::m_GameItemInfo' has a wrong offset!");
static_assert(offsetof(FDistributeItemResultAction, m_bIsTargetInventory) == 0x000028, "Member 'FDistributeItemResultAction::m_bIsTargetInventory' has a wrong offset!");
static_assert(offsetof(FDistributeItemResultAction, m_bHasBeenUsed) == 0x000029, "Member 'FDistributeItemResultAction::m_bHasBeenUsed' has a wrong offset!");

// ScriptStruct DuneSandbox.DistributeItemResult
// 0x0028 (0x0028 - 0x0000)
struct FDistributeItemResult final
{
public:
	TArray<struct FDistributeItemResultRemainingAmount> m_RemainingAmounts;                          // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FDistributeItemResultAction>    m_Actions;                                         // 0x0010(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          m_bSuccess;                                        // 0x0020(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bEverythingFitInTargetInventories;               // 0x0021(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bItemsDroppedToGround;                           // 0x0022(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDistributeItemResult) == 0x000008, "Wrong alignment on FDistributeItemResult");
static_assert(sizeof(FDistributeItemResult) == 0x000028, "Wrong size on FDistributeItemResult");
static_assert(offsetof(FDistributeItemResult, m_RemainingAmounts) == 0x000000, "Member 'FDistributeItemResult::m_RemainingAmounts' has a wrong offset!");
static_assert(offsetof(FDistributeItemResult, m_Actions) == 0x000010, "Member 'FDistributeItemResult::m_Actions' has a wrong offset!");
static_assert(offsetof(FDistributeItemResult, m_bSuccess) == 0x000020, "Member 'FDistributeItemResult::m_bSuccess' has a wrong offset!");
static_assert(offsetof(FDistributeItemResult, m_bEverythingFitInTargetInventories) == 0x000021, "Member 'FDistributeItemResult::m_bEverythingFitInTargetInventories' has a wrong offset!");
static_assert(offsetof(FDistributeItemResult, m_bItemsDroppedToGround) == 0x000022, "Member 'FDistributeItemResult::m_bItemsDroppedToGround' has a wrong offset!");

// ScriptStruct DuneSandbox.LootContainerActorsTableRow
// 0x0050 (0x0060 - 0x0010)
struct FLootContainerActorsTableRow final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   LootContainerClass;                                // 0x0010(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShouldLoadClassImmediately;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LootDistributionSettingsOverride;                  // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShouldDecayIfEmpty;                             // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LifeSpanInSeconds;                                 // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasLifeSpanAfterInteraction;                      // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LifeSpanAfterInteractionInSeconds;                 // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootContainerActorsTableRow) == 0x000008, "Wrong alignment on FLootContainerActorsTableRow");
static_assert(sizeof(FLootContainerActorsTableRow) == 0x000060, "Wrong size on FLootContainerActorsTableRow");
static_assert(offsetof(FLootContainerActorsTableRow, LootContainerClass) == 0x000010, "Member 'FLootContainerActorsTableRow::LootContainerClass' has a wrong offset!");
static_assert(offsetof(FLootContainerActorsTableRow, m_bShouldLoadClassImmediately) == 0x000040, "Member 'FLootContainerActorsTableRow::m_bShouldLoadClassImmediately' has a wrong offset!");
static_assert(offsetof(FLootContainerActorsTableRow, LootDistributionSettingsOverride) == 0x000048, "Member 'FLootContainerActorsTableRow::LootDistributionSettingsOverride' has a wrong offset!");
static_assert(offsetof(FLootContainerActorsTableRow, m_bShouldDecayIfEmpty) == 0x000050, "Member 'FLootContainerActorsTableRow::m_bShouldDecayIfEmpty' has a wrong offset!");
static_assert(offsetof(FLootContainerActorsTableRow, LifeSpanInSeconds) == 0x000054, "Member 'FLootContainerActorsTableRow::LifeSpanInSeconds' has a wrong offset!");
static_assert(offsetof(FLootContainerActorsTableRow, bHasLifeSpanAfterInteraction) == 0x000058, "Member 'FLootContainerActorsTableRow::bHasLifeSpanAfterInteraction' has a wrong offset!");
static_assert(offsetof(FLootContainerActorsTableRow, LifeSpanAfterInteractionInSeconds) == 0x00005C, "Member 'FLootContainerActorsTableRow::LifeSpanAfterInteractionInSeconds' has a wrong offset!");

// ScriptStruct DuneSandbox.TravelDestinationSlot
// 0x0030 (0x0030 - 0x0000)
struct FTravelDestinationSlot final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              ReservingPlayerID;                                 // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOccupied;                                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTravelDestinationSlot) == 0x000008, "Wrong alignment on FTravelDestinationSlot");
static_assert(sizeof(FTravelDestinationSlot) == 0x000030, "Wrong size on FTravelDestinationSlot");
static_assert(offsetof(FTravelDestinationSlot, Location) == 0x000000, "Member 'FTravelDestinationSlot::Location' has a wrong offset!");
static_assert(offsetof(FTravelDestinationSlot, Yaw) == 0x000018, "Member 'FTravelDestinationSlot::Yaw' has a wrong offset!");
static_assert(offsetof(FTravelDestinationSlot, ReservingPlayerID) == 0x000020, "Member 'FTravelDestinationSlot::ReservingPlayerID' has a wrong offset!");
static_assert(offsetof(FTravelDestinationSlot, bIsOccupied) == 0x000028, "Member 'FTravelDestinationSlot::bIsOccupied' has a wrong offset!");

// ScriptStruct DuneSandbox.DrawDebugSphereProperties
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FDrawDebugSphereProperties final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrawDebugSphereProperties) == 0x000008, "Wrong alignment on FDrawDebugSphereProperties");
static_assert(sizeof(FDrawDebugSphereProperties) == 0x000030, "Wrong size on FDrawDebugSphereProperties");

// ScriptStruct DuneSandbox.SkillPerkTableRow
// 0x0078 (0x0088 - 0x0010)
struct FSkillPerkTableRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TrainingModuleTag;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0020(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LongDescription;                                   // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          BuffClass;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillPerkTableRow) == 0x000008, "Wrong alignment on FSkillPerkTableRow");
static_assert(sizeof(FSkillPerkTableRow) == 0x000088, "Wrong size on FSkillPerkTableRow");
static_assert(offsetof(FSkillPerkTableRow, Tag) == 0x000010, "Member 'FSkillPerkTableRow::Tag' has a wrong offset!");
static_assert(offsetof(FSkillPerkTableRow, TrainingModuleTag) == 0x000018, "Member 'FSkillPerkTableRow::TrainingModuleTag' has a wrong offset!");
static_assert(offsetof(FSkillPerkTableRow, Icon) == 0x000020, "Member 'FSkillPerkTableRow::Icon' has a wrong offset!");
static_assert(offsetof(FSkillPerkTableRow, Description) == 0x000050, "Member 'FSkillPerkTableRow::Description' has a wrong offset!");
static_assert(offsetof(FSkillPerkTableRow, LongDescription) == 0x000068, "Member 'FSkillPerkTableRow::LongDescription' has a wrong offset!");
static_assert(offsetof(FSkillPerkTableRow, BuffClass) == 0x000080, "Member 'FSkillPerkTableRow::BuffClass' has a wrong offset!");

// ScriptStruct DuneSandbox.ModuleTagRequirementTextRow
// 0x0020 (0x0030 - 0x0010)
struct FModuleTagRequirementTextRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0010(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PrereqFailureDescription;                          // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModuleTagRequirementTextRow) == 0x000008, "Wrong alignment on FModuleTagRequirementTextRow");
static_assert(sizeof(FModuleTagRequirementTextRow) == 0x000030, "Wrong size on FModuleTagRequirementTextRow");
static_assert(offsetof(FModuleTagRequirementTextRow, Tag) == 0x000010, "Member 'FModuleTagRequirementTextRow::Tag' has a wrong offset!");
static_assert(offsetof(FModuleTagRequirementTextRow, PrereqFailureDescription) == 0x000018, "Member 'FModuleTagRequirementTextRow::PrereqFailureDescription' has a wrong offset!");

// ScriptStruct DuneSandbox.ForceHasEventLogEvent
// 0x0000 (0x0030 - 0x0030)
struct FForceHasEventLogEvent final : public FGameEvent
{
};
static_assert(alignof(FForceHasEventLogEvent) == 0x000008, "Wrong alignment on FForceHasEventLogEvent");
static_assert(sizeof(FForceHasEventLogEvent) == 0x000030, "Wrong size on FForceHasEventLogEvent");

// ScriptStruct DuneSandbox.DiegeticGuiSetupDataRow
// 0x0010 (0x0020 - 0x0010)
struct FDiegeticGuiSetupDataRow final : public FTableRowBase
{
public:
	TArray<struct FDiegeticGuiPointConfig>        m_DiegeticGuiPoints;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDiegeticGuiSetupDataRow) == 0x000008, "Wrong alignment on FDiegeticGuiSetupDataRow");
static_assert(sizeof(FDiegeticGuiSetupDataRow) == 0x000020, "Wrong size on FDiegeticGuiSetupDataRow");
static_assert(offsetof(FDiegeticGuiSetupDataRow, m_DiegeticGuiPoints) == 0x000010, "Member 'FDiegeticGuiSetupDataRow::m_DiegeticGuiPoints' has a wrong offset!");

// ScriptStruct DuneSandbox.ModulePerk
// 0x000C (0x000C - 0x0000)
struct FModulePerk final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GrantedLevel;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModulePerk) == 0x000004, "Wrong alignment on FModulePerk");
static_assert(sizeof(FModulePerk) == 0x00000C, "Wrong size on FModulePerk");
static_assert(offsetof(FModulePerk, Tag) == 0x000000, "Member 'FModulePerk::Tag' has a wrong offset!");
static_assert(offsetof(FModulePerk, GrantedLevel) == 0x000008, "Member 'FModulePerk::GrantedLevel' has a wrong offset!");

// ScriptStruct DuneSandbox.GridPosition
// 0x0002 (0x0002 - 0x0000)
struct FGridPosition final
{
public:
	uint8                                         X;                                                 // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Y;                                                 // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGridPosition) == 0x000001, "Wrong alignment on FGridPosition");
static_assert(sizeof(FGridPosition) == 0x000002, "Wrong size on FGridPosition");
static_assert(offsetof(FGridPosition, X) == 0x000000, "Member 'FGridPosition::X' has a wrong offset!");
static_assert(offsetof(FGridPosition, Y) == 0x000001, "Member 'FGridPosition::Y' has a wrong offset!");

// ScriptStruct DuneSandbox.TrainingModuleTableRow
// 0x01E8 (0x01F8 - 0x0010)
struct FTrainingModuleTableRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          BuffClass;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       AbilityItemId;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxLevel;                                          // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresHeightenedSpiceState;                     // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SkillPointsPerLevel;                               // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESkillTree                                    SkillArea;                                         // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGridPosition                          GridPosition;                                      // 0x00A8(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint8, struct FModulePerk>               Perks;                                             // 0x00B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<uint8, struct FGameplayTagContainer>     PerLevelPrereqModuleTags;                          // 0x0100(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bExternal;                                         // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTarotBackground;                              // 0x0151(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FGameplayTag>                     PrereqModuleTags_And;                              // 0x0158(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<struct FGameplayTag>                     PrereqModuleTags_Or;                               // 0x01A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrainingModuleTableRow) == 0x000008, "Wrong alignment on FTrainingModuleTableRow");
static_assert(sizeof(FTrainingModuleTableRow) == 0x0001F8, "Wrong size on FTrainingModuleTableRow");
static_assert(offsetof(FTrainingModuleTableRow, Tag) == 0x000010, "Member 'FTrainingModuleTableRow::Tag' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, Icon) == 0x000018, "Member 'FTrainingModuleTableRow::Icon' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, BuffClass) == 0x000048, "Member 'FTrainingModuleTableRow::BuffClass' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, AbilityItemId) == 0x000050, "Member 'FTrainingModuleTableRow::AbilityItemId' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, MaxLevel) == 0x000058, "Member 'FTrainingModuleTableRow::MaxLevel' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, bRequiresHeightenedSpiceState) == 0x000059, "Member 'FTrainingModuleTableRow::bRequiresHeightenedSpiceState' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, SkillPointsPerLevel) == 0x000060, "Member 'FTrainingModuleTableRow::SkillPointsPerLevel' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, SkillArea) == 0x000088, "Member 'FTrainingModuleTableRow::SkillArea' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, DisplayName) == 0x000090, "Member 'FTrainingModuleTableRow::DisplayName' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, GridPosition) == 0x0000A8, "Member 'FTrainingModuleTableRow::GridPosition' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, Perks) == 0x0000B0, "Member 'FTrainingModuleTableRow::Perks' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, PerLevelPrereqModuleTags) == 0x000100, "Member 'FTrainingModuleTableRow::PerLevelPrereqModuleTags' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, bExternal) == 0x000150, "Member 'FTrainingModuleTableRow::bExternal' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, bShowTarotBackground) == 0x000151, "Member 'FTrainingModuleTableRow::bShowTarotBackground' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, PrereqModuleTags_And) == 0x000158, "Member 'FTrainingModuleTableRow::PrereqModuleTags_And' has a wrong offset!");
static_assert(offsetof(FTrainingModuleTableRow, PrereqModuleTags_Or) == 0x0001A8, "Member 'FTrainingModuleTableRow::PrereqModuleTags_Or' has a wrong offset!");

// ScriptStruct DuneSandbox.SandStormComponent
// 0x0001 (0x0001 - 0x0000)
struct FSandStormComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandStormComponent) == 0x000001, "Wrong alignment on FSandStormComponent");
static_assert(sizeof(FSandStormComponent) == 0x000001, "Wrong size on FSandStormComponent");

// ScriptStruct DuneSandbox.EItemUsageLimitationGroup
// 0x0000 (0x0008 - 0x0008)
struct FEItemUsageLimitationGroup final : public FStringEnumValue
{
};
static_assert(alignof(FEItemUsageLimitationGroup) == 0x000004, "Wrong alignment on FEItemUsageLimitationGroup");
static_assert(sizeof(FEItemUsageLimitationGroup) == 0x000008, "Wrong size on FEItemUsageLimitationGroup");

// ScriptStruct DuneSandbox.UsageLimitationItemStats
// 0x0008 (0x0008 - 0x0000)
struct FUsageLimitationItemStats final
{
public:
	struct FEItemUsageLimitationGroup             UsageLimitationGroupRowName;                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUsageLimitationItemStats) == 0x000004, "Wrong alignment on FUsageLimitationItemStats");
static_assert(sizeof(FUsageLimitationItemStats) == 0x000008, "Wrong size on FUsageLimitationItemStats");
static_assert(offsetof(FUsageLimitationItemStats, UsageLimitationGroupRowName) == 0x000000, "Member 'FUsageLimitationItemStats::UsageLimitationGroupRowName' has a wrong offset!");

// ScriptStruct DuneSandbox.UsageLimitationItemStatsComponent_BlueprintWrapper
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FUsageLimitationItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUsageLimitationItemStats              UsageLimitationItemStats;                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUsageLimitationItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FUsageLimitationItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FUsageLimitationItemStatsComponent_BlueprintWrapper) == 0x000038, "Wrong size on FUsageLimitationItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FUsageLimitationItemStatsComponent_BlueprintWrapper, UsageLimitationItemStats) == 0x000030, "Member 'FUsageLimitationItemStatsComponent_BlueprintWrapper::UsageLimitationItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.XPConstantTableRow
// 0x0008 (0x0018 - 0x0010)
struct FXPConstantTableRow final : public FTableRowBase
{
public:
	uint32                                        m_XPAwarded;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FXPConstantTableRow) == 0x000008, "Wrong alignment on FXPConstantTableRow");
static_assert(sizeof(FXPConstantTableRow) == 0x000018, "Wrong size on FXPConstantTableRow");
static_assert(offsetof(FXPConstantTableRow, m_XPAwarded) == 0x000010, "Member 'FXPConstantTableRow::m_XPAwarded' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillTreeBlockNameTableRow
// 0x0018 (0x0028 - 0x0010)
struct FSkillTreeBlockNameTableRow final : public FTableRowBase
{
public:
	ESkillTree                                    SkillArea;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           BlockNames;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillTreeBlockNameTableRow) == 0x000008, "Wrong alignment on FSkillTreeBlockNameTableRow");
static_assert(sizeof(FSkillTreeBlockNameTableRow) == 0x000028, "Wrong size on FSkillTreeBlockNameTableRow");
static_assert(offsetof(FSkillTreeBlockNameTableRow, SkillArea) == 0x000010, "Member 'FSkillTreeBlockNameTableRow::SkillArea' has a wrong offset!");
static_assert(offsetof(FSkillTreeBlockNameTableRow, BlockNames) == 0x000018, "Member 'FSkillTreeBlockNameTableRow::BlockNames' has a wrong offset!");

// ScriptStruct DuneSandbox.MapLayerDebugSettings
// 0x0060 (0x0060 - 0x0000)
struct FMapLayerDebugSettings final
{
public:
	struct FRotator                               m_CameraOrientation;                               // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECameraProjectionMode                         m_ProjectionMode;                                  // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CameraFoV;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CameraAspectRatio;                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CameraZoom;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_CameraMoveUnit;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_CameraOffset;                                    // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bZoomStepInterpolate;                            // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_ZoomStepInterpolation;                           // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACameraActor*                           m_CameraPreviewActor;                              // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapLayerDebugSettings) == 0x000008, "Wrong alignment on FMapLayerDebugSettings");
static_assert(sizeof(FMapLayerDebugSettings) == 0x000060, "Wrong size on FMapLayerDebugSettings");
static_assert(offsetof(FMapLayerDebugSettings, m_CameraOrientation) == 0x000000, "Member 'FMapLayerDebugSettings::m_CameraOrientation' has a wrong offset!");
static_assert(offsetof(FMapLayerDebugSettings, m_ProjectionMode) == 0x000018, "Member 'FMapLayerDebugSettings::m_ProjectionMode' has a wrong offset!");
static_assert(offsetof(FMapLayerDebugSettings, m_CameraFoV) == 0x00001C, "Member 'FMapLayerDebugSettings::m_CameraFoV' has a wrong offset!");
static_assert(offsetof(FMapLayerDebugSettings, m_CameraAspectRatio) == 0x000020, "Member 'FMapLayerDebugSettings::m_CameraAspectRatio' has a wrong offset!");
static_assert(offsetof(FMapLayerDebugSettings, m_CameraZoom) == 0x000024, "Member 'FMapLayerDebugSettings::m_CameraZoom' has a wrong offset!");
static_assert(offsetof(FMapLayerDebugSettings, m_CameraMoveUnit) == 0x000028, "Member 'FMapLayerDebugSettings::m_CameraMoveUnit' has a wrong offset!");
static_assert(offsetof(FMapLayerDebugSettings, m_CameraOffset) == 0x000038, "Member 'FMapLayerDebugSettings::m_CameraOffset' has a wrong offset!");
static_assert(offsetof(FMapLayerDebugSettings, m_bZoomStepInterpolate) == 0x000050, "Member 'FMapLayerDebugSettings::m_bZoomStepInterpolate' has a wrong offset!");
static_assert(offsetof(FMapLayerDebugSettings, m_ZoomStepInterpolation) == 0x000054, "Member 'FMapLayerDebugSettings::m_ZoomStepInterpolation' has a wrong offset!");
static_assert(offsetof(FMapLayerDebugSettings, m_CameraPreviewActor) == 0x000058, "Member 'FMapLayerDebugSettings::m_CameraPreviewActor' has a wrong offset!");

// ScriptStruct DuneSandbox.DecayLootContainerComponent
// 0x0001 (0x0001 - 0x0000)
struct FDecayLootContainerComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDecayLootContainerComponent) == 0x000001, "Wrong alignment on FDecayLootContainerComponent");
static_assert(sizeof(FDecayLootContainerComponent) == 0x000001, "Wrong size on FDecayLootContainerComponent");

// ScriptStruct DuneSandbox.HarvestOverTimeEvent
// 0x0068 (0x0068 - 0x0000)
struct FHarvestOverTimeEvent final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DistributionCurve;                                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HarvestingAmountCurve;                             // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASpiceLootContainer>     SpiceContainer;                                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarvestOverTimeEvent) == 0x000008, "Wrong alignment on FHarvestOverTimeEvent");
static_assert(sizeof(FHarvestOverTimeEvent) == 0x000068, "Wrong size on FHarvestOverTimeEvent");
static_assert(offsetof(FHarvestOverTimeEvent, DistributionCurve) == 0x000050, "Member 'FHarvestOverTimeEvent::DistributionCurve' has a wrong offset!");
static_assert(offsetof(FHarvestOverTimeEvent, HarvestingAmountCurve) == 0x000058, "Member 'FHarvestOverTimeEvent::HarvestingAmountCurve' has a wrong offset!");
static_assert(offsetof(FHarvestOverTimeEvent, SpiceContainer) == 0x000060, "Member 'FHarvestOverTimeEvent::SpiceContainer' has a wrong offset!");

// ScriptStruct DuneSandbox.CartographyMapMarkerSettings
// 0x0008 (0x0008 - 0x0000)
struct FCartographyMapMarkerSettings final
{
public:
	bool                                          m_bUseGlobalLodOverride;                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_GlobalLodOverride;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCartographyMapMarkerSettings) == 0x000004, "Wrong alignment on FCartographyMapMarkerSettings");
static_assert(sizeof(FCartographyMapMarkerSettings) == 0x000008, "Wrong size on FCartographyMapMarkerSettings");
static_assert(offsetof(FCartographyMapMarkerSettings, m_bUseGlobalLodOverride) == 0x000000, "Member 'FCartographyMapMarkerSettings::m_bUseGlobalLodOverride' has a wrong offset!");
static_assert(offsetof(FCartographyMapMarkerSettings, m_GlobalLodOverride) == 0x000004, "Member 'FCartographyMapMarkerSettings::m_GlobalLodOverride' has a wrong offset!");

// ScriptStruct DuneSandbox.PerMapCartographySettings
// 0x0080 (0x0080 - 0x0000)
struct FPerMapCartographySettings final
{
public:
	struct FCartographyMapLayerSettings           m_MapLayerSettings;                                // 0x0000(0x0068)(Edit, NativeAccessSpecifierPublic)
	struct FCartographyMapMarkerSettings          m_MapMarkerSettings;                               // 0x0068(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCartographyMapRevealConditions        m_MapRevealConditions;                             // 0x0070(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerMapCartographySettings) == 0x000008, "Wrong alignment on FPerMapCartographySettings");
static_assert(sizeof(FPerMapCartographySettings) == 0x000080, "Wrong size on FPerMapCartographySettings");
static_assert(offsetof(FPerMapCartographySettings, m_MapLayerSettings) == 0x000000, "Member 'FPerMapCartographySettings::m_MapLayerSettings' has a wrong offset!");
static_assert(offsetof(FPerMapCartographySettings, m_MapMarkerSettings) == 0x000068, "Member 'FPerMapCartographySettings::m_MapMarkerSettings' has a wrong offset!");
static_assert(offsetof(FPerMapCartographySettings, m_MapRevealConditions) == 0x000070, "Member 'FPerMapCartographySettings::m_MapRevealConditions' has a wrong offset!");

// ScriptStruct DuneSandbox.CutterayStats
// 0x0014 (0x0014 - 0x0000)
struct FCutterayStats final
{
public:
	float                                         TimeToMine;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HemYieldMultiplier;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LemYieldMultiplier;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       ItemId;                                            // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCutterayStats) == 0x000004, "Wrong alignment on FCutterayStats");
static_assert(sizeof(FCutterayStats) == 0x000014, "Wrong size on FCutterayStats");
static_assert(offsetof(FCutterayStats, TimeToMine) == 0x000000, "Member 'FCutterayStats::TimeToMine' has a wrong offset!");
static_assert(offsetof(FCutterayStats, HemYieldMultiplier) == 0x000004, "Member 'FCutterayStats::HemYieldMultiplier' has a wrong offset!");
static_assert(offsetof(FCutterayStats, LemYieldMultiplier) == 0x000008, "Member 'FCutterayStats::LemYieldMultiplier' has a wrong offset!");
static_assert(offsetof(FCutterayStats, ItemId) == 0x00000C, "Member 'FCutterayStats::ItemId' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractNotification
// 0x0014 (0x0014 - 0x0000)
struct FContractNotification final
{
public:
	EContractNotificationType                     Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEContractName                         ContractName;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bPendingClaim;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContractNotification) == 0x000004, "Wrong alignment on FContractNotification");
static_assert(sizeof(FContractNotification) == 0x000014, "Wrong size on FContractNotification");
static_assert(offsetof(FContractNotification, Type) == 0x000000, "Member 'FContractNotification::Type' has a wrong offset!");
static_assert(offsetof(FContractNotification, ContractName) == 0x000004, "Member 'FContractNotification::ContractName' has a wrong offset!");
static_assert(offsetof(FContractNotification, ConditionId) == 0x00000C, "Member 'FContractNotification::ConditionId' has a wrong offset!");
static_assert(offsetof(FContractNotification, m_bPendingClaim) == 0x000010, "Member 'FContractNotification::m_bPendingClaim' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponFiredEvent
// 0x0008 (0x0038 - 0x0030)
struct FWeaponFiredEvent final : public FGameEvent
{
public:
	TSubclassOf<class UHandheldBase>              m_HandheldClass;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponFiredEvent) == 0x000008, "Wrong alignment on FWeaponFiredEvent");
static_assert(sizeof(FWeaponFiredEvent) == 0x000038, "Wrong size on FWeaponFiredEvent");
static_assert(offsetof(FWeaponFiredEvent, m_HandheldClass) == 0x000030, "Member 'FWeaponFiredEvent::m_HandheldClass' has a wrong offset!");

// ScriptStruct DuneSandbox.PersistenceBuildingInstance
// 0x0120 (0x0120 - 0x0000)
struct FPersistenceBuildingInstance final
{
public:
	TSoftClassPtr<class UClass>                   m_Class;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEBuildableType                        m_BuildingType;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Health;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             m_SpawnTransform;                                  // 0x0040(0x0060)(Edit, BlueprintVisible, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             m_MeshTransform;                                   // 0x00A0(0x0060)(Edit, BlueprintVisible, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x18];                                     // 0x0100(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          m_bFoundationOrPillarThatHitGround;                // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsHologram;                                     // 0x0119(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersistenceBuildingInstance) == 0x000010, "Wrong alignment on FPersistenceBuildingInstance");
static_assert(sizeof(FPersistenceBuildingInstance) == 0x000120, "Wrong size on FPersistenceBuildingInstance");
static_assert(offsetof(FPersistenceBuildingInstance, m_Class) == 0x000000, "Member 'FPersistenceBuildingInstance::m_Class' has a wrong offset!");
static_assert(offsetof(FPersistenceBuildingInstance, m_BuildingType) == 0x000030, "Member 'FPersistenceBuildingInstance::m_BuildingType' has a wrong offset!");
static_assert(offsetof(FPersistenceBuildingInstance, m_Health) == 0x000038, "Member 'FPersistenceBuildingInstance::m_Health' has a wrong offset!");
static_assert(offsetof(FPersistenceBuildingInstance, m_SpawnTransform) == 0x000040, "Member 'FPersistenceBuildingInstance::m_SpawnTransform' has a wrong offset!");
static_assert(offsetof(FPersistenceBuildingInstance, m_MeshTransform) == 0x0000A0, "Member 'FPersistenceBuildingInstance::m_MeshTransform' has a wrong offset!");
static_assert(offsetof(FPersistenceBuildingInstance, m_bFoundationOrPillarThatHitGround) == 0x000118, "Member 'FPersistenceBuildingInstance::m_bFoundationOrPillarThatHitGround' has a wrong offset!");
static_assert(offsetof(FPersistenceBuildingInstance, m_bIsHologram) == 0x000119, "Member 'FPersistenceBuildingInstance::m_bIsHologram' has a wrong offset!");

// ScriptStruct DuneSandbox.DownButNotOutConfig
// 0x000C (0x000C - 0x0000)
struct FDownButNotOutConfig final
{
public:
	bool                                          m_bDieAtStateEnd;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_StateDuration;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAutoReviveOnStateElapsed;                       // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDownButNotOutConfig) == 0x000004, "Wrong alignment on FDownButNotOutConfig");
static_assert(sizeof(FDownButNotOutConfig) == 0x00000C, "Wrong size on FDownButNotOutConfig");
static_assert(offsetof(FDownButNotOutConfig, m_bDieAtStateEnd) == 0x000000, "Member 'FDownButNotOutConfig::m_bDieAtStateEnd' has a wrong offset!");
static_assert(offsetof(FDownButNotOutConfig, m_StateDuration) == 0x000004, "Member 'FDownButNotOutConfig::m_StateDuration' has a wrong offset!");
static_assert(offsetof(FDownButNotOutConfig, m_bAutoReviveOnStateElapsed) == 0x000008, "Member 'FDownButNotOutConfig::m_bAutoReviveOnStateElapsed' has a wrong offset!");

// ScriptStruct DuneSandbox.DelayedCommuninetMessage
// 0x0014 (0x0014 - 0x0000)
struct FDelayedCommuninetMessage final
{
public:
	float                                         m_TimeTillActivation;                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FECommuninetMessageId                  m_CommuninetMessageToTrigger;                      // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FECommuninetChannel                    m_Channel;                                         // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelayedCommuninetMessage) == 0x000004, "Wrong alignment on FDelayedCommuninetMessage");
static_assert(sizeof(FDelayedCommuninetMessage) == 0x000014, "Wrong size on FDelayedCommuninetMessage");
static_assert(offsetof(FDelayedCommuninetMessage, m_TimeTillActivation) == 0x000000, "Member 'FDelayedCommuninetMessage::m_TimeTillActivation' has a wrong offset!");
static_assert(offsetof(FDelayedCommuninetMessage, m_CommuninetMessageToTrigger) == 0x000004, "Member 'FDelayedCommuninetMessage::m_CommuninetMessageToTrigger' has a wrong offset!");
static_assert(offsetof(FDelayedCommuninetMessage, m_Channel) == 0x00000C, "Member 'FDelayedCommuninetMessage::m_Channel' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterActionContext
// 0x0020 (0x0020 - 0x0000)
struct FCharacterActionContext final
{
public:
	class FString                                 ExecuteFunctionName;                               // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbortFunctionName;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterActionContext) == 0x000008, "Wrong alignment on FCharacterActionContext");
static_assert(sizeof(FCharacterActionContext) == 0x000020, "Wrong size on FCharacterActionContext");
static_assert(offsetof(FCharacterActionContext, ExecuteFunctionName) == 0x000000, "Member 'FCharacterActionContext::ExecuteFunctionName' has a wrong offset!");
static_assert(offsetof(FCharacterActionContext, AbortFunctionName) == 0x000010, "Member 'FCharacterActionContext::AbortFunctionName' has a wrong offset!");

// ScriptStruct DuneSandbox.CCScreenAttire
// 0x0020 (0x0020 - 0x0000)
struct FCCScreenAttire final
{
public:
	class FString                                 m_Name;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCCScreenMutableParameter>      m_MutableParameters;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCCScreenAttire) == 0x000008, "Wrong alignment on FCCScreenAttire");
static_assert(sizeof(FCCScreenAttire) == 0x000020, "Wrong size on FCCScreenAttire");
static_assert(offsetof(FCCScreenAttire, m_Name) == 0x000000, "Member 'FCCScreenAttire::m_Name' has a wrong offset!");
static_assert(offsetof(FCCScreenAttire, m_MutableParameters) == 0x000010, "Member 'FCCScreenAttire::m_MutableParameters' has a wrong offset!");

// ScriptStruct DuneSandbox.CCScreenPresetList
// 0x0010 (0x0010 - 0x0000)
struct FCCScreenPresetList final
{
public:
	TArray<struct FCCScreenPreset>                m_Presets;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCCScreenPresetList) == 0x000008, "Wrong alignment on FCCScreenPresetList");
static_assert(sizeof(FCCScreenPresetList) == 0x000010, "Wrong size on FCCScreenPresetList");
static_assert(offsetof(FCCScreenPresetList, m_Presets) == 0x000000, "Member 'FCCScreenPresetList::m_Presets' has a wrong offset!");

// ScriptStruct DuneSandbox.ServerHealingInfo
// 0x0060 (0x0060 - 0x0000)
struct FServerHealingInfo final
{
public:
	class FString                                 m_HealingSourceName;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_AttackName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 m_HealedActor;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BaseHealing;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            m_EventInstigator;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 m_HealingCauser;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDuneDamageType>            m_HealingTypeClass;                                // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bMulticastHealing;                               // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApply;                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerHealingInfo) == 0x000008, "Wrong alignment on FServerHealingInfo");
static_assert(sizeof(FServerHealingInfo) == 0x000060, "Wrong size on FServerHealingInfo");
static_assert(offsetof(FServerHealingInfo, m_HealingSourceName) == 0x000000, "Member 'FServerHealingInfo::m_HealingSourceName' has a wrong offset!");
static_assert(offsetof(FServerHealingInfo, m_AttackName) == 0x000010, "Member 'FServerHealingInfo::m_AttackName' has a wrong offset!");
static_assert(offsetof(FServerHealingInfo, m_HealedActor) == 0x000020, "Member 'FServerHealingInfo::m_HealedActor' has a wrong offset!");
static_assert(offsetof(FServerHealingInfo, m_BaseHealing) == 0x000028, "Member 'FServerHealingInfo::m_BaseHealing' has a wrong offset!");
static_assert(offsetof(FServerHealingInfo, m_EventInstigator) == 0x000030, "Member 'FServerHealingInfo::m_EventInstigator' has a wrong offset!");
static_assert(offsetof(FServerHealingInfo, m_HealingCauser) == 0x000038, "Member 'FServerHealingInfo::m_HealingCauser' has a wrong offset!");
static_assert(offsetof(FServerHealingInfo, m_HealingTypeClass) == 0x000040, "Member 'FServerHealingInfo::m_HealingTypeClass' has a wrong offset!");
static_assert(offsetof(FServerHealingInfo, m_bMulticastHealing) == 0x000048, "Member 'FServerHealingInfo::m_bMulticastHealing' has a wrong offset!");
static_assert(offsetof(FServerHealingInfo, m_GameplayEffectsToApply) == 0x000050, "Member 'FServerHealingInfo::m_GameplayEffectsToApply' has a wrong offset!");

// ScriptStruct DuneSandbox.CCValidFloatValues
// 0x0008 (0x0008 - 0x0000)
struct FCCValidFloatValues final
{
public:
	float                                         m_MinValue;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxValue;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCCValidFloatValues) == 0x000004, "Wrong alignment on FCCValidFloatValues");
static_assert(sizeof(FCCValidFloatValues) == 0x000008, "Wrong size on FCCValidFloatValues");
static_assert(offsetof(FCCValidFloatValues, m_MinValue) == 0x000000, "Member 'FCCValidFloatValues::m_MinValue' has a wrong offset!");
static_assert(offsetof(FCCValidFloatValues, m_MaxValue) == 0x000004, "Member 'FCCValidFloatValues::m_MaxValue' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceAddictionStateConfig
// 0x0020 (0x0020 - 0x0000)
struct FSpiceAddictionStateConfig final
{
public:
	struct FFloatRange                            m_SpicePercentageRange;                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    m_GameplayEffects;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceAddictionStateConfig) == 0x000008, "Wrong alignment on FSpiceAddictionStateConfig");
static_assert(sizeof(FSpiceAddictionStateConfig) == 0x000020, "Wrong size on FSpiceAddictionStateConfig");
static_assert(offsetof(FSpiceAddictionStateConfig, m_SpicePercentageRange) == 0x000000, "Member 'FSpiceAddictionStateConfig::m_SpicePercentageRange' has a wrong offset!");
static_assert(offsetof(FSpiceAddictionStateConfig, m_GameplayEffects) == 0x000010, "Member 'FSpiceAddictionStateConfig::m_GameplayEffects' has a wrong offset!");

// ScriptStruct DuneSandbox.DelayedCommuninetMessageComponent
// 0x0010 (0x0010 - 0x0000)
struct FDelayedCommuninetMessageComponent final
{
public:
	TArray<struct FDelayedCommuninetMessage>      m_MessageQueue;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelayedCommuninetMessageComponent) == 0x000008, "Wrong alignment on FDelayedCommuninetMessageComponent");
static_assert(sizeof(FDelayedCommuninetMessageComponent) == 0x000010, "Wrong size on FDelayedCommuninetMessageComponent");
static_assert(offsetof(FDelayedCommuninetMessageComponent, m_MessageQueue) == 0x000000, "Member 'FDelayedCommuninetMessageComponent::m_MessageQueue' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterCreationQualitySettings
// 0x000C (0x000C - 0x0000)
struct FCharacterCreationQualitySettings final
{
public:
	int32                                         MaxShadowResolution;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowVirtualEnable;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContactShadows;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterCreationQualitySettings) == 0x000004, "Wrong alignment on FCharacterCreationQualitySettings");
static_assert(sizeof(FCharacterCreationQualitySettings) == 0x00000C, "Wrong size on FCharacterCreationQualitySettings");
static_assert(offsetof(FCharacterCreationQualitySettings, MaxShadowResolution) == 0x000000, "Member 'FCharacterCreationQualitySettings::MaxShadowResolution' has a wrong offset!");
static_assert(offsetof(FCharacterCreationQualitySettings, ShadowVirtualEnable) == 0x000004, "Member 'FCharacterCreationQualitySettings::ShadowVirtualEnable' has a wrong offset!");
static_assert(offsetof(FCharacterCreationQualitySettings, ContactShadows) == 0x000008, "Member 'FCharacterCreationQualitySettings::ContactShadows' has a wrong offset!");

// ScriptStruct DuneSandbox.ReferenceItemTableRow
// 0x0008 (0x0018 - 0x0010)
struct FReferenceItemTableRow final : public FTableRowBase
{
public:
	struct FReferenceItemStats                    ReferenceStats;                                    // 0x0010(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReferenceItemTableRow) == 0x000008, "Wrong alignment on FReferenceItemTableRow");
static_assert(sizeof(FReferenceItemTableRow) == 0x000018, "Wrong size on FReferenceItemTableRow");
static_assert(offsetof(FReferenceItemTableRow, ReferenceStats) == 0x000010, "Member 'FReferenceItemTableRow::ReferenceStats' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterDurabilityLossAttributesComponent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FCharacterDurabilityLossAttributesComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterDurabilityLossAttributesComponent) == 0x000004, "Wrong alignment on FCharacterDurabilityLossAttributesComponent");
static_assert(sizeof(FCharacterDurabilityLossAttributesComponent) == 0x000008, "Wrong size on FCharacterDurabilityLossAttributesComponent");

// ScriptStruct DuneSandbox.CutterayPulseComponent
// 0x01B8 (0x01B8 - 0x0000)
struct FCutterayPulseComponent final
{
public:
	bool                                          bShouldPulseDamage;                                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAlwaysSpawnPulseVfx;                        // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PulseInterval;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          PulseEffect;                                       // 0x0008(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, TSoftObjectPtr<class UNiagaraSystem>> PulseImpactEffects;                 // 0x0038(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           PulseAudioEvent;                                   // 0x0088(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseCooldown;                                     // 0x00B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayPulseEffects;                           // 0x00BC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             LastHitResult;                                     // 0x00C0(0x00E8)(Transient, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x10];                                     // 0x01A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCutterayPulseComponent) == 0x000008, "Wrong alignment on FCutterayPulseComponent");
static_assert(sizeof(FCutterayPulseComponent) == 0x0001B8, "Wrong size on FCutterayPulseComponent");
static_assert(offsetof(FCutterayPulseComponent, bShouldPulseDamage) == 0x000000, "Member 'FCutterayPulseComponent::bShouldPulseDamage' has a wrong offset!");
static_assert(offsetof(FCutterayPulseComponent, bShouldAlwaysSpawnPulseVfx) == 0x000001, "Member 'FCutterayPulseComponent::bShouldAlwaysSpawnPulseVfx' has a wrong offset!");
static_assert(offsetof(FCutterayPulseComponent, PulseInterval) == 0x000004, "Member 'FCutterayPulseComponent::PulseInterval' has a wrong offset!");
static_assert(offsetof(FCutterayPulseComponent, PulseEffect) == 0x000008, "Member 'FCutterayPulseComponent::PulseEffect' has a wrong offset!");
static_assert(offsetof(FCutterayPulseComponent, PulseImpactEffects) == 0x000038, "Member 'FCutterayPulseComponent::PulseImpactEffects' has a wrong offset!");
static_assert(offsetof(FCutterayPulseComponent, PulseAudioEvent) == 0x000088, "Member 'FCutterayPulseComponent::PulseAudioEvent' has a wrong offset!");
static_assert(offsetof(FCutterayPulseComponent, PulseCooldown) == 0x0000B8, "Member 'FCutterayPulseComponent::PulseCooldown' has a wrong offset!");
static_assert(offsetof(FCutterayPulseComponent, bShouldPlayPulseEffects) == 0x0000BC, "Member 'FCutterayPulseComponent::bShouldPlayPulseEffects' has a wrong offset!");
static_assert(offsetof(FCutterayPulseComponent, LastHitResult) == 0x0000C0, "Member 'FCutterayPulseComponent::LastHitResult' has a wrong offset!");

// ScriptStruct DuneSandbox.CutterayRowBase
// 0x0290 (0x02A0 - 0x0010)
struct FCutterayRowBase final : public FTableRowBase
{
public:
	bool                                          bCanTriggerHighEngagementMining;                   // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          ScanSucceedEffect;                                 // 0x0018(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          ScanFailEffect;                                    // 0x0048(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           ScanSucceedAudioEvent;                             // 0x0078(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           ScanFailAudioEvent;                                // 0x00A8(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScanSocketName;                                    // 0x00D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScanTime;                                          // 0x00E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScanCooldown;                                      // 0x00E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCutterayPulseComponent                PulseConfig;                                       // 0x00E8(0x01B8)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCutterayRowBase) == 0x000008, "Wrong alignment on FCutterayRowBase");
static_assert(sizeof(FCutterayRowBase) == 0x0002A0, "Wrong size on FCutterayRowBase");
static_assert(offsetof(FCutterayRowBase, bCanTriggerHighEngagementMining) == 0x000010, "Member 'FCutterayRowBase::bCanTriggerHighEngagementMining' has a wrong offset!");
static_assert(offsetof(FCutterayRowBase, ScanSucceedEffect) == 0x000018, "Member 'FCutterayRowBase::ScanSucceedEffect' has a wrong offset!");
static_assert(offsetof(FCutterayRowBase, ScanFailEffect) == 0x000048, "Member 'FCutterayRowBase::ScanFailEffect' has a wrong offset!");
static_assert(offsetof(FCutterayRowBase, ScanSucceedAudioEvent) == 0x000078, "Member 'FCutterayRowBase::ScanSucceedAudioEvent' has a wrong offset!");
static_assert(offsetof(FCutterayRowBase, ScanFailAudioEvent) == 0x0000A8, "Member 'FCutterayRowBase::ScanFailAudioEvent' has a wrong offset!");
static_assert(offsetof(FCutterayRowBase, ScanSocketName) == 0x0000D8, "Member 'FCutterayRowBase::ScanSocketName' has a wrong offset!");
static_assert(offsetof(FCutterayRowBase, ScanTime) == 0x0000E0, "Member 'FCutterayRowBase::ScanTime' has a wrong offset!");
static_assert(offsetof(FCutterayRowBase, ScanCooldown) == 0x0000E4, "Member 'FCutterayRowBase::ScanCooldown' has a wrong offset!");
static_assert(offsetof(FCutterayRowBase, PulseConfig) == 0x0000E8, "Member 'FCutterayRowBase::PulseConfig' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterLayoutComponent
// 0x0038 (0x0038 - 0x0000)
struct FCharacterLayoutComponent final
{
public:
	class FString                                 m_MutableDescriptorServer;                         // 0x0000(0x0010)(ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 m_MutableDescriptorReplication;                    // 0x0010(0x0010)(ZeroConstructor, SubobjectReference, NativeAccessSpecifierPublic)
	TArray<float>                                 m_BodyPartValues;                                  // 0x0020(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	EDuneGender                                   GenderVoice;                                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterLayoutComponent) == 0x000008, "Wrong alignment on FCharacterLayoutComponent");
static_assert(sizeof(FCharacterLayoutComponent) == 0x000038, "Wrong size on FCharacterLayoutComponent");
static_assert(offsetof(FCharacterLayoutComponent, m_MutableDescriptorServer) == 0x000000, "Member 'FCharacterLayoutComponent::m_MutableDescriptorServer' has a wrong offset!");
static_assert(offsetof(FCharacterLayoutComponent, m_MutableDescriptorReplication) == 0x000010, "Member 'FCharacterLayoutComponent::m_MutableDescriptorReplication' has a wrong offset!");
static_assert(offsetof(FCharacterLayoutComponent, m_BodyPartValues) == 0x000020, "Member 'FCharacterLayoutComponent::m_BodyPartValues' has a wrong offset!");
static_assert(offsetof(FCharacterLayoutComponent, GenderVoice) == 0x000030, "Member 'FCharacterLayoutComponent::GenderVoice' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemCraftingNotSleepingComponent
// 0x0001 (0x0001 - 0x0000)
struct FItemCraftingNotSleepingComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCraftingNotSleepingComponent) == 0x000001, "Wrong alignment on FItemCraftingNotSleepingComponent");
static_assert(sizeof(FItemCraftingNotSleepingComponent) == 0x000001, "Wrong size on FItemCraftingNotSleepingComponent");

// ScriptStruct DuneSandbox.CustomizationDataArray
// 0x0050 (0x0050 - 0x0000)
struct FCustomizationDataArray final
{
public:
	TSet<class UCustomizationData*>               m_Customizations;                                  // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationDataArray) == 0x000008, "Wrong alignment on FCustomizationDataArray");
static_assert(sizeof(FCustomizationDataArray) == 0x000050, "Wrong size on FCustomizationDataArray");
static_assert(offsetof(FCustomizationDataArray, m_Customizations) == 0x000000, "Member 'FCustomizationDataArray::m_Customizations' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterStatesRowBase
// 0x0090 (0x00A0 - 0x0010)
struct FCharacterStatesRowBase final : public FTableRowBase
{
public:
	struct FGameplayTag                           m_StateTag;                                        // 0x0010(0x0008)(Edit, DisableEditOnInstance, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCharacterStateBase>        m_StateClass;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      m_CanEnterQuery;                                   // 0x0020(0x0048)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   m_CanceledSubstates;                               // 0x0068(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FEInputContext>                 m_AddedInputContexts;                              // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FEInputContext>                 m_RemovedInputContexts;                            // 0x0088(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bClientControllable;                             // 0x0098(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterStatesRowBase) == 0x000008, "Wrong alignment on FCharacterStatesRowBase");
static_assert(sizeof(FCharacterStatesRowBase) == 0x0000A0, "Wrong size on FCharacterStatesRowBase");
static_assert(offsetof(FCharacterStatesRowBase, m_StateTag) == 0x000010, "Member 'FCharacterStatesRowBase::m_StateTag' has a wrong offset!");
static_assert(offsetof(FCharacterStatesRowBase, m_StateClass) == 0x000018, "Member 'FCharacterStatesRowBase::m_StateClass' has a wrong offset!");
static_assert(offsetof(FCharacterStatesRowBase, m_CanEnterQuery) == 0x000020, "Member 'FCharacterStatesRowBase::m_CanEnterQuery' has a wrong offset!");
static_assert(offsetof(FCharacterStatesRowBase, m_CanceledSubstates) == 0x000068, "Member 'FCharacterStatesRowBase::m_CanceledSubstates' has a wrong offset!");
static_assert(offsetof(FCharacterStatesRowBase, m_AddedInputContexts) == 0x000078, "Member 'FCharacterStatesRowBase::m_AddedInputContexts' has a wrong offset!");
static_assert(offsetof(FCharacterStatesRowBase, m_RemovedInputContexts) == 0x000088, "Member 'FCharacterStatesRowBase::m_RemovedInputContexts' has a wrong offset!");
static_assert(offsetof(FCharacterStatesRowBase, m_bClientControllable) == 0x000098, "Member 'FCharacterStatesRowBase::m_bClientControllable' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponCustomizationData
// 0x0080 (0x0080 - 0x0000)
struct FWeaponCustomizationData final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           MeshOverride;                                      // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UMaterialInterface>> Materials;                           // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponCustomizationData) == 0x000008, "Wrong alignment on FWeaponCustomizationData");
static_assert(sizeof(FWeaponCustomizationData) == 0x000080, "Wrong size on FWeaponCustomizationData");
static_assert(offsetof(FWeaponCustomizationData, MeshOverride) == 0x000000, "Member 'FWeaponCustomizationData::MeshOverride' has a wrong offset!");
static_assert(offsetof(FWeaponCustomizationData, Materials) == 0x000030, "Member 'FWeaponCustomizationData::Materials' has a wrong offset!");

// ScriptStruct DuneSandbox.DamageSystemStaticsRowBase
// 0x0008 (0x0018 - 0x0010)
struct FDamageSystemStaticsRowBase final : public FTableRowBase
{
public:
	TSubclassOf<class UDWGameplayEffect>          m_ApplyDamageMitigationGameplayEffect;             // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageSystemStaticsRowBase) == 0x000008, "Wrong alignment on FDamageSystemStaticsRowBase");
static_assert(sizeof(FDamageSystemStaticsRowBase) == 0x000018, "Wrong size on FDamageSystemStaticsRowBase");
static_assert(offsetof(FDamageSystemStaticsRowBase, m_ApplyDamageMitigationGameplayEffect) == 0x000010, "Member 'FDamageSystemStaticsRowBase::m_ApplyDamageMitigationGameplayEffect' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterSubstatesRowBase
// 0x0088 (0x0098 - 0x0010)
struct FCharacterSubstatesRowBase final : public FTableRowBase
{
public:
	struct FGameplayTag                           m_SubstateTag;                                     // 0x0010(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ServerControlledOnly;                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCharacterSubstateBase>     m_SubstateClass;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      m_CanEnterQuery;                                   // 0x0028(0x0048)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   m_CanceledSubstates;                               // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UDWGameplayEffect>>  m_GASEffectsToApplyOnEnter;                        // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          m_bClientControllable;                             // 0x0090(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterSubstatesRowBase) == 0x000008, "Wrong alignment on FCharacterSubstatesRowBase");
static_assert(sizeof(FCharacterSubstatesRowBase) == 0x000098, "Wrong size on FCharacterSubstatesRowBase");
static_assert(offsetof(FCharacterSubstatesRowBase, m_SubstateTag) == 0x000010, "Member 'FCharacterSubstatesRowBase::m_SubstateTag' has a wrong offset!");
static_assert(offsetof(FCharacterSubstatesRowBase, m_ServerControlledOnly) == 0x000018, "Member 'FCharacterSubstatesRowBase::m_ServerControlledOnly' has a wrong offset!");
static_assert(offsetof(FCharacterSubstatesRowBase, m_SubstateClass) == 0x000020, "Member 'FCharacterSubstatesRowBase::m_SubstateClass' has a wrong offset!");
static_assert(offsetof(FCharacterSubstatesRowBase, m_CanEnterQuery) == 0x000028, "Member 'FCharacterSubstatesRowBase::m_CanEnterQuery' has a wrong offset!");
static_assert(offsetof(FCharacterSubstatesRowBase, m_CanceledSubstates) == 0x000070, "Member 'FCharacterSubstatesRowBase::m_CanceledSubstates' has a wrong offset!");
static_assert(offsetof(FCharacterSubstatesRowBase, m_GASEffectsToApplyOnEnter) == 0x000080, "Member 'FCharacterSubstatesRowBase::m_GASEffectsToApplyOnEnter' has a wrong offset!");
static_assert(offsetof(FCharacterSubstatesRowBase, m_bClientControllable) == 0x000090, "Member 'FCharacterSubstatesRowBase::m_bClientControllable' has a wrong offset!");

// ScriptStruct DuneSandbox.TechTreeSubCategoryData
// 0x00B8 (0x00B8 - 0x0000)
struct FTechTreeSubCategoryData final
{
public:
	class FText                                   m_Name;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_Description;                                     // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_Icon;                                            // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UTechTreeNodeData*, bool>          m_ItemNodes;                                       // 0x0060(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         m_IntelSpentRequirement;                           // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTechTreeSubCategoryData) == 0x000008, "Wrong alignment on FTechTreeSubCategoryData");
static_assert(sizeof(FTechTreeSubCategoryData) == 0x0000B8, "Wrong size on FTechTreeSubCategoryData");
static_assert(offsetof(FTechTreeSubCategoryData, m_Name) == 0x000000, "Member 'FTechTreeSubCategoryData::m_Name' has a wrong offset!");
static_assert(offsetof(FTechTreeSubCategoryData, m_Description) == 0x000018, "Member 'FTechTreeSubCategoryData::m_Description' has a wrong offset!");
static_assert(offsetof(FTechTreeSubCategoryData, m_Icon) == 0x000030, "Member 'FTechTreeSubCategoryData::m_Icon' has a wrong offset!");
static_assert(offsetof(FTechTreeSubCategoryData, m_ItemNodes) == 0x000060, "Member 'FTechTreeSubCategoryData::m_ItemNodes' has a wrong offset!");
static_assert(offsetof(FTechTreeSubCategoryData, m_IntelSpentRequirement) == 0x0000B0, "Member 'FTechTreeSubCategoryData::m_IntelSpentRequirement' has a wrong offset!");

// ScriptStruct DuneSandbox.EScannerTypes
// 0x0000 (0x0008 - 0x0008)
struct FEScannerTypes final : public FStringEnumValue
{
};
static_assert(alignof(FEScannerTypes) == 0x000004, "Wrong alignment on FEScannerTypes");
static_assert(sizeof(FEScannerTypes) == 0x000008, "Wrong size on FEScannerTypes");

// ScriptStruct DuneSandbox.MeleeAnimSet
// 0x0010 (0x0010 - 0x0000)
struct FMeleeAnimSet final
{
public:
	TArray<TSoftObjectPtr<class UAnimMontage>>    Anims;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeAnimSet) == 0x000008, "Wrong alignment on FMeleeAnimSet");
static_assert(sizeof(FMeleeAnimSet) == 0x000010, "Wrong size on FMeleeAnimSet");
static_assert(offsetof(FMeleeAnimSet, Anims) == 0x000000, "Member 'FMeleeAnimSet::Anims' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterTemplateRow
// 0x05C8 (0x05D8 - 0x0010)
struct FCharacterTemplateRow final : public FTableRowBase
{
public:
	class FString                                 m_TemplateDescription;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_DefaultPassiveStaminaRegenEffect;                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_DefaultLightMeleeAbility;                        // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_DefaultHeavyMeleeAbility;                        // 0x0058(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_DefaultMeleeRootMotionAbility;                   // 0x0088(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_DefaultExecutionMeleeAbility;                    // 0x00B8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_DefaultSprintAttackMeleeAbility;                 // 0x00E8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_DefaultParryAbility;                             // 0x0118(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_DefaultDodgeAbility;                             // 0x0148(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_DefaultEmoteAbility;                             // 0x0178(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  m_DefaultEmoteLimitStateTags;                      // 0x01A8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SprintAbilityOverrideClass;                        // 0x01C8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CrouchAbilityOverrideClass;                        // 0x01F8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           m_DefaultOtherAbilities;                           // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UDWGameplayEffect>>  m_DefaultPassiveEffects;                           // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_RecentlyDamagedBySourceEffect;                   // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_RecentlySpentStaminaEffect;                      // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_StaminaSpendEffect;                              // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_SetMaxHealthEffect;                              // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_PassiveHealthRegenEffect;                        // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_SandwormDangerZoneEffect;                        // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_DefaultRunningAccuracyBuff;                      // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_BrokenEquippedWeaponEffect;                      // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_ShieldActiveDebuffEffect;                        // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          m_SprintBlockEffect;                               // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_AimAssistProfileName;                            // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_AimAssistAreaProfileName;                        // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_FallDamageProfileName;                           // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_ImpactDamageProfileName;                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterAnimationArchetype                  m_CharacterAnimationArchetype;                     // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   m_ClimbingLayerAB;                                 // 0x02C0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_CombatLayerAB;                                   // 0x02F0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_DisabledLayerAB;                                 // 0x0320(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_LocomotionLayerAB;                               // 0x0350(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_QuicksandLayerAB;                                // 0x0380(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_SuspensorLayerAB;                                // 0x03B0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_ServerAB;                                        // 0x03E0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VerticalInputAllowanceToDisableSprint;           // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HorizontalInputAllowanceToDisableSprint;         // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HarvestTraceRadius;                              // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HarvestCooldownInSeconds;                        // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxHealth;                                       // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PoiseResistance;                                 // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SlowDamageResistance;                            // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxSlowdownMultiplier;                           // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SlowdownRecoveryRate;                            // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SlowdownRecoveryDelay;                           // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             m_DefaultHydrationAttributeValues;                 // 0x0438(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_InteractionSensorDistance;                       // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_InteractionMaximumDistance;                      // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_InteractionRadius;                               // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_StartingInventoryProfile;                        // 0x044C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MouseBulletMagnetismArea;                        // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HeightScale;                                     // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         m_TeamId;                                          // 0x045C(0x0001)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45D[0x3];                                      // 0x045D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEScannerTypes                         m_EquippedScannerType;                             // 0x0460(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         m_ShieldHitFX;                                     // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BaseDetectionRange;                              // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BaseFogClearanceRange;                           // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ObservationTriggerRangeFraction;                 // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ObservationMinimumTimeDelta;                     // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ObservationMaximumTimeDelta;                     // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinStamina;                                      // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxStamina;                                      // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StaminaRegenRate;                                // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StaminaSprintDrainRate;                          // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StaminaRegenDelay;                               // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StaminaMeleeDrainAmount;                         // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlockStaminaRegenRate;                           // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DashStaminaCost;                                 // 0x04A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DashStaminaCostMultiplier;                       // 0x04A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PowerSuspensorUsage;                             // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PowerPercentageOnRespawn;                        // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_WeaponAttachPoint;                               // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_BarrelSocketName;                                // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_AmmoSocketName;                                  // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_ScopeSocketName;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHandheldBase>              m_DefaultHandheldBaseClass;                        // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FEDamageMitigationFloatStatID, float> m_DefaultDamageMitigation;                     // 0x04D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMeleeType, struct FMeleeAnimSet>        MeleeAnimSets;                                     // 0x0528(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_DownedStateMaxHealth;                            // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AutoReviveHealAmount;                            // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SelfReviveTimer;                                 // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ReviveOtherTimer;                                // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DownedStateInvulnerabilityDuration;              // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DownedStateExitedInvulnerabilityDuration;        // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SurrenderToDesertTriggerDelay;                   // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   m_ReviveGameplayAbility;                           // 0x0598(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_ReviveAbilityActivationTag;                      // 0x05C8(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_XPEventTriggeredOnKilled;                        // 0x05D0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterTemplateRow) == 0x000008, "Wrong alignment on FCharacterTemplateRow");
static_assert(sizeof(FCharacterTemplateRow) == 0x0005D8, "Wrong size on FCharacterTemplateRow");
static_assert(offsetof(FCharacterTemplateRow, m_TemplateDescription) == 0x000010, "Member 'FCharacterTemplateRow::m_TemplateDescription' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultPassiveStaminaRegenEffect) == 0x000020, "Member 'FCharacterTemplateRow::m_DefaultPassiveStaminaRegenEffect' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultLightMeleeAbility) == 0x000028, "Member 'FCharacterTemplateRow::m_DefaultLightMeleeAbility' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultHeavyMeleeAbility) == 0x000058, "Member 'FCharacterTemplateRow::m_DefaultHeavyMeleeAbility' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultMeleeRootMotionAbility) == 0x000088, "Member 'FCharacterTemplateRow::m_DefaultMeleeRootMotionAbility' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultExecutionMeleeAbility) == 0x0000B8, "Member 'FCharacterTemplateRow::m_DefaultExecutionMeleeAbility' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultSprintAttackMeleeAbility) == 0x0000E8, "Member 'FCharacterTemplateRow::m_DefaultSprintAttackMeleeAbility' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultParryAbility) == 0x000118, "Member 'FCharacterTemplateRow::m_DefaultParryAbility' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultDodgeAbility) == 0x000148, "Member 'FCharacterTemplateRow::m_DefaultDodgeAbility' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultEmoteAbility) == 0x000178, "Member 'FCharacterTemplateRow::m_DefaultEmoteAbility' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultEmoteLimitStateTags) == 0x0001A8, "Member 'FCharacterTemplateRow::m_DefaultEmoteLimitStateTags' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, SprintAbilityOverrideClass) == 0x0001C8, "Member 'FCharacterTemplateRow::SprintAbilityOverrideClass' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, CrouchAbilityOverrideClass) == 0x0001F8, "Member 'FCharacterTemplateRow::CrouchAbilityOverrideClass' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultOtherAbilities) == 0x000228, "Member 'FCharacterTemplateRow::m_DefaultOtherAbilities' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultPassiveEffects) == 0x000238, "Member 'FCharacterTemplateRow::m_DefaultPassiveEffects' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_RecentlyDamagedBySourceEffect) == 0x000248, "Member 'FCharacterTemplateRow::m_RecentlyDamagedBySourceEffect' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_RecentlySpentStaminaEffect) == 0x000250, "Member 'FCharacterTemplateRow::m_RecentlySpentStaminaEffect' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_StaminaSpendEffect) == 0x000258, "Member 'FCharacterTemplateRow::m_StaminaSpendEffect' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_SetMaxHealthEffect) == 0x000260, "Member 'FCharacterTemplateRow::m_SetMaxHealthEffect' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_PassiveHealthRegenEffect) == 0x000268, "Member 'FCharacterTemplateRow::m_PassiveHealthRegenEffect' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_SandwormDangerZoneEffect) == 0x000270, "Member 'FCharacterTemplateRow::m_SandwormDangerZoneEffect' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultRunningAccuracyBuff) == 0x000278, "Member 'FCharacterTemplateRow::m_DefaultRunningAccuracyBuff' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_BrokenEquippedWeaponEffect) == 0x000280, "Member 'FCharacterTemplateRow::m_BrokenEquippedWeaponEffect' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ShieldActiveDebuffEffect) == 0x000288, "Member 'FCharacterTemplateRow::m_ShieldActiveDebuffEffect' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_SprintBlockEffect) == 0x000290, "Member 'FCharacterTemplateRow::m_SprintBlockEffect' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_AimAssistProfileName) == 0x000298, "Member 'FCharacterTemplateRow::m_AimAssistProfileName' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_AimAssistAreaProfileName) == 0x0002A0, "Member 'FCharacterTemplateRow::m_AimAssistAreaProfileName' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_FallDamageProfileName) == 0x0002A8, "Member 'FCharacterTemplateRow::m_FallDamageProfileName' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ImpactDamageProfileName) == 0x0002B0, "Member 'FCharacterTemplateRow::m_ImpactDamageProfileName' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_CharacterAnimationArchetype) == 0x0002B8, "Member 'FCharacterTemplateRow::m_CharacterAnimationArchetype' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ClimbingLayerAB) == 0x0002C0, "Member 'FCharacterTemplateRow::m_ClimbingLayerAB' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_CombatLayerAB) == 0x0002F0, "Member 'FCharacterTemplateRow::m_CombatLayerAB' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DisabledLayerAB) == 0x000320, "Member 'FCharacterTemplateRow::m_DisabledLayerAB' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_LocomotionLayerAB) == 0x000350, "Member 'FCharacterTemplateRow::m_LocomotionLayerAB' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_QuicksandLayerAB) == 0x000380, "Member 'FCharacterTemplateRow::m_QuicksandLayerAB' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_SuspensorLayerAB) == 0x0003B0, "Member 'FCharacterTemplateRow::m_SuspensorLayerAB' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ServerAB) == 0x0003E0, "Member 'FCharacterTemplateRow::m_ServerAB' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_VerticalInputAllowanceToDisableSprint) == 0x000410, "Member 'FCharacterTemplateRow::m_VerticalInputAllowanceToDisableSprint' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_HorizontalInputAllowanceToDisableSprint) == 0x000414, "Member 'FCharacterTemplateRow::m_HorizontalInputAllowanceToDisableSprint' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_HarvestTraceRadius) == 0x000418, "Member 'FCharacterTemplateRow::m_HarvestTraceRadius' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_HarvestCooldownInSeconds) == 0x00041C, "Member 'FCharacterTemplateRow::m_HarvestCooldownInSeconds' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_MaxHealth) == 0x000420, "Member 'FCharacterTemplateRow::m_MaxHealth' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_PoiseResistance) == 0x000424, "Member 'FCharacterTemplateRow::m_PoiseResistance' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_SlowDamageResistance) == 0x000428, "Member 'FCharacterTemplateRow::m_SlowDamageResistance' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_MaxSlowdownMultiplier) == 0x00042C, "Member 'FCharacterTemplateRow::m_MaxSlowdownMultiplier' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_SlowdownRecoveryRate) == 0x000430, "Member 'FCharacterTemplateRow::m_SlowdownRecoveryRate' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_SlowdownRecoveryDelay) == 0x000434, "Member 'FCharacterTemplateRow::m_SlowdownRecoveryDelay' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultHydrationAttributeValues) == 0x000438, "Member 'FCharacterTemplateRow::m_DefaultHydrationAttributeValues' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_InteractionSensorDistance) == 0x000440, "Member 'FCharacterTemplateRow::m_InteractionSensorDistance' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_InteractionMaximumDistance) == 0x000444, "Member 'FCharacterTemplateRow::m_InteractionMaximumDistance' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_InteractionRadius) == 0x000448, "Member 'FCharacterTemplateRow::m_InteractionRadius' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_StartingInventoryProfile) == 0x00044C, "Member 'FCharacterTemplateRow::m_StartingInventoryProfile' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_MouseBulletMagnetismArea) == 0x000454, "Member 'FCharacterTemplateRow::m_MouseBulletMagnetismArea' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_HeightScale) == 0x000458, "Member 'FCharacterTemplateRow::m_HeightScale' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_TeamId) == 0x00045C, "Member 'FCharacterTemplateRow::m_TeamId' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_EquippedScannerType) == 0x000460, "Member 'FCharacterTemplateRow::m_EquippedScannerType' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ShieldHitFX) == 0x000468, "Member 'FCharacterTemplateRow::m_ShieldHitFX' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_BaseDetectionRange) == 0x000470, "Member 'FCharacterTemplateRow::m_BaseDetectionRange' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_BaseFogClearanceRange) == 0x000474, "Member 'FCharacterTemplateRow::m_BaseFogClearanceRange' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ObservationTriggerRangeFraction) == 0x000478, "Member 'FCharacterTemplateRow::m_ObservationTriggerRangeFraction' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ObservationMinimumTimeDelta) == 0x00047C, "Member 'FCharacterTemplateRow::m_ObservationMinimumTimeDelta' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ObservationMaximumTimeDelta) == 0x000480, "Member 'FCharacterTemplateRow::m_ObservationMaximumTimeDelta' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_MinStamina) == 0x000484, "Member 'FCharacterTemplateRow::m_MinStamina' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_MaxStamina) == 0x000488, "Member 'FCharacterTemplateRow::m_MaxStamina' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_StaminaRegenRate) == 0x00048C, "Member 'FCharacterTemplateRow::m_StaminaRegenRate' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_StaminaSprintDrainRate) == 0x000490, "Member 'FCharacterTemplateRow::m_StaminaSprintDrainRate' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_StaminaRegenDelay) == 0x000494, "Member 'FCharacterTemplateRow::m_StaminaRegenDelay' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_StaminaMeleeDrainAmount) == 0x000498, "Member 'FCharacterTemplateRow::m_StaminaMeleeDrainAmount' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_BlockStaminaRegenRate) == 0x00049C, "Member 'FCharacterTemplateRow::m_BlockStaminaRegenRate' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DashStaminaCost) == 0x0004A0, "Member 'FCharacterTemplateRow::m_DashStaminaCost' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DashStaminaCostMultiplier) == 0x0004A4, "Member 'FCharacterTemplateRow::m_DashStaminaCostMultiplier' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_PowerSuspensorUsage) == 0x0004A8, "Member 'FCharacterTemplateRow::m_PowerSuspensorUsage' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_PowerPercentageOnRespawn) == 0x0004AC, "Member 'FCharacterTemplateRow::m_PowerPercentageOnRespawn' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_WeaponAttachPoint) == 0x0004B0, "Member 'FCharacterTemplateRow::m_WeaponAttachPoint' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_BarrelSocketName) == 0x0004B8, "Member 'FCharacterTemplateRow::m_BarrelSocketName' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_AmmoSocketName) == 0x0004C0, "Member 'FCharacterTemplateRow::m_AmmoSocketName' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ScopeSocketName) == 0x0004C8, "Member 'FCharacterTemplateRow::m_ScopeSocketName' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultHandheldBaseClass) == 0x0004D0, "Member 'FCharacterTemplateRow::m_DefaultHandheldBaseClass' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DefaultDamageMitigation) == 0x0004D8, "Member 'FCharacterTemplateRow::m_DefaultDamageMitigation' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, MeleeAnimSets) == 0x000528, "Member 'FCharacterTemplateRow::MeleeAnimSets' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DownedStateMaxHealth) == 0x000578, "Member 'FCharacterTemplateRow::m_DownedStateMaxHealth' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_AutoReviveHealAmount) == 0x00057C, "Member 'FCharacterTemplateRow::m_AutoReviveHealAmount' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_SelfReviveTimer) == 0x000580, "Member 'FCharacterTemplateRow::m_SelfReviveTimer' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ReviveOtherTimer) == 0x000584, "Member 'FCharacterTemplateRow::m_ReviveOtherTimer' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DownedStateInvulnerabilityDuration) == 0x000588, "Member 'FCharacterTemplateRow::m_DownedStateInvulnerabilityDuration' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_DownedStateExitedInvulnerabilityDuration) == 0x00058C, "Member 'FCharacterTemplateRow::m_DownedStateExitedInvulnerabilityDuration' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_SurrenderToDesertTriggerDelay) == 0x000590, "Member 'FCharacterTemplateRow::m_SurrenderToDesertTriggerDelay' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ReviveGameplayAbility) == 0x000598, "Member 'FCharacterTemplateRow::m_ReviveGameplayAbility' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_ReviveAbilityActivationTag) == 0x0005C8, "Member 'FCharacterTemplateRow::m_ReviveAbilityActivationTag' has a wrong offset!");
static_assert(offsetof(FCharacterTemplateRow, m_XPEventTriggeredOnKilled) == 0x0005D0, "Member 'FCharacterTemplateRow::m_XPEventTriggeredOnKilled' has a wrong offset!");

// ScriptStruct DuneSandbox.ENPCGeneticsOutfitName
// 0x0000 (0x0008 - 0x0008)
struct FENPCGeneticsOutfitName final : public FStringEnumValue
{
};
static_assert(alignof(FENPCGeneticsOutfitName) == 0x000004, "Wrong alignment on FENPCGeneticsOutfitName");
static_assert(sizeof(FENPCGeneticsOutfitName) == 0x000008, "Wrong size on FENPCGeneticsOutfitName");

// ScriptStruct DuneSandbox.CustomizationMenuItemData
// 0x00D8 (0x00D8 - 0x0000)
struct alignas(0x08) FCustomizationMenuItemData final
{
public:
	uint8                                         Pad_0[0xD8];                                       // 0x0000(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationMenuItemData) == 0x000008, "Wrong alignment on FCustomizationMenuItemData");
static_assert(sizeof(FCustomizationMenuItemData) == 0x0000D8, "Wrong size on FCustomizationMenuItemData");

// ScriptStruct DuneSandbox.SpawnedSandstormData
// 0x0040 (0x0040 - 0x0000)
struct FSpawnedSandstormData final
{
public:
	uint64                                        UniqueID;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartLocation;                                     // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FinishLocation;                                    // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnedSandstormData) == 0x000008, "Wrong alignment on FSpawnedSandstormData");
static_assert(sizeof(FSpawnedSandstormData) == 0x000040, "Wrong size on FSpawnedSandstormData");
static_assert(offsetof(FSpawnedSandstormData, UniqueID) == 0x000000, "Member 'FSpawnedSandstormData::UniqueID' has a wrong offset!");
static_assert(offsetof(FSpawnedSandstormData, LifeTime) == 0x000008, "Member 'FSpawnedSandstormData::LifeTime' has a wrong offset!");
static_assert(offsetof(FSpawnedSandstormData, StartLocation) == 0x000010, "Member 'FSpawnedSandstormData::StartLocation' has a wrong offset!");
static_assert(offsetof(FSpawnedSandstormData, FinishLocation) == 0x000028, "Member 'FSpawnedSandstormData::FinishLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockRow
// 0x0080 (0x0090 - 0x0010)
struct FTerrainBlockRow final : public FTableRowBase
{
public:
	struct FTerrainBlockSetting                   Settings;                                          // 0x0010(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCanBeRotated;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFreeRotationAllowed;                            // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UWorld>                  BaseLevel;                                         // 0x0050(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTerrainBlockTemplateRowBase>   Versions;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockRow) == 0x000008, "Wrong alignment on FTerrainBlockRow");
static_assert(sizeof(FTerrainBlockRow) == 0x000090, "Wrong size on FTerrainBlockRow");
static_assert(offsetof(FTerrainBlockRow, Settings) == 0x000010, "Member 'FTerrainBlockRow::Settings' has a wrong offset!");
static_assert(offsetof(FTerrainBlockRow, bCanBeRotated) == 0x000048, "Member 'FTerrainBlockRow::bCanBeRotated' has a wrong offset!");
static_assert(offsetof(FTerrainBlockRow, bIsFreeRotationAllowed) == 0x000049, "Member 'FTerrainBlockRow::bIsFreeRotationAllowed' has a wrong offset!");
static_assert(offsetof(FTerrainBlockRow, BaseLevel) == 0x000050, "Member 'FTerrainBlockRow::BaseLevel' has a wrong offset!");
static_assert(offsetof(FTerrainBlockRow, Versions) == 0x000080, "Member 'FTerrainBlockRow::Versions' has a wrong offset!");

// ScriptStruct DuneSandbox.CheatEngineSpawnerRowBase
// 0x0030 (0x0040 - 0x0010)
struct FCheatEngineSpawnerRowBase final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   m_ActorToSpawn;                                    // 0x0010(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheatEngineSpawnerRowBase) == 0x000008, "Wrong alignment on FCheatEngineSpawnerRowBase");
static_assert(sizeof(FCheatEngineSpawnerRowBase) == 0x000040, "Wrong size on FCheatEngineSpawnerRowBase");
static_assert(offsetof(FCheatEngineSpawnerRowBase, m_ActorToSpawn) == 0x000010, "Member 'FCheatEngineSpawnerRowBase::m_ActorToSpawn' has a wrong offset!");

// ScriptStruct DuneSandbox.MTXEventZoneData
// 0x0030 (0x0030 - 0x0000)
struct FMTXEventZoneData final
{
public:
	class FString                                 m_ZoneLevelKey;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AMTXEventTerrainBlockActor>> ZoneTerrainBlockActors;                 // 0x0010(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FTimerHandle>                   SpawnTimerHandles;                                 // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMTXEventZoneData) == 0x000008, "Wrong alignment on FMTXEventZoneData");
static_assert(sizeof(FMTXEventZoneData) == 0x000030, "Wrong size on FMTXEventZoneData");
static_assert(offsetof(FMTXEventZoneData, m_ZoneLevelKey) == 0x000000, "Member 'FMTXEventZoneData::m_ZoneLevelKey' has a wrong offset!");
static_assert(offsetof(FMTXEventZoneData, ZoneTerrainBlockActors) == 0x000010, "Member 'FMTXEventZoneData::ZoneTerrainBlockActors' has a wrong offset!");
static_assert(offsetof(FMTXEventZoneData, SpawnTimerHandles) == 0x000020, "Member 'FMTXEventZoneData::SpawnTimerHandles' has a wrong offset!");

// ScriptStruct DuneSandbox.TaxInvoiceDataCompositePgNotify
// 0x0028 (0x0028 - 0x0000)
struct FTaxInvoiceDataCompositePgNotify final
{
public:
	int64                                         totem_id;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         reference_timespan;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         invoice_status;                                    // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 actor_name;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaxInvoiceDataCompositePgNotify) == 0x000008, "Wrong alignment on FTaxInvoiceDataCompositePgNotify");
static_assert(sizeof(FTaxInvoiceDataCompositePgNotify) == 0x000028, "Wrong size on FTaxInvoiceDataCompositePgNotify");
static_assert(offsetof(FTaxInvoiceDataCompositePgNotify, totem_id) == 0x000000, "Member 'FTaxInvoiceDataCompositePgNotify::totem_id' has a wrong offset!");
static_assert(offsetof(FTaxInvoiceDataCompositePgNotify, reference_timespan) == 0x000008, "Member 'FTaxInvoiceDataCompositePgNotify::reference_timespan' has a wrong offset!");
static_assert(offsetof(FTaxInvoiceDataCompositePgNotify, invoice_status) == 0x000010, "Member 'FTaxInvoiceDataCompositePgNotify::invoice_status' has a wrong offset!");
static_assert(offsetof(FTaxInvoiceDataCompositePgNotify, Amount) == 0x000014, "Member 'FTaxInvoiceDataCompositePgNotify::Amount' has a wrong offset!");
static_assert(offsetof(FTaxInvoiceDataCompositePgNotify, actor_name) == 0x000018, "Member 'FTaxInvoiceDataCompositePgNotify::actor_name' has a wrong offset!");

// ScriptStruct DuneSandbox.TaxationDatabaseEventEmitInvoices
// 0x0020 (0x0020 - 0x0000)
struct FTaxationDatabaseEventEmitInvoices final
{
public:
	TArray<int64>                                 InvoiceIds;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTaxInvoiceDataCompositePgNotify> InvoiceData;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaxationDatabaseEventEmitInvoices) == 0x000008, "Wrong alignment on FTaxationDatabaseEventEmitInvoices");
static_assert(sizeof(FTaxationDatabaseEventEmitInvoices) == 0x000020, "Wrong size on FTaxationDatabaseEventEmitInvoices");
static_assert(offsetof(FTaxationDatabaseEventEmitInvoices, InvoiceIds) == 0x000000, "Member 'FTaxationDatabaseEventEmitInvoices::InvoiceIds' has a wrong offset!");
static_assert(offsetof(FTaxationDatabaseEventEmitInvoices, InvoiceData) == 0x000010, "Member 'FTaxationDatabaseEventEmitInvoices::InvoiceData' has a wrong offset!");

// ScriptStruct DuneSandbox.ClothingDehydrationModifierChangeComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FClothingDehydrationModifierChangeComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClothingDehydrationModifierChangeComponent) == 0x000008, "Wrong alignment on FClothingDehydrationModifierChangeComponent");
static_assert(sizeof(FClothingDehydrationModifierChangeComponent) == 0x000010, "Wrong size on FClothingDehydrationModifierChangeComponent");

// ScriptStruct DuneSandbox.FractureLineSplinePointData
// 0x0030 (0x0030 - 0x0000)
struct FFractureLineSplinePointData final
{
public:
	struct FVector                                position;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Tangent;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFractureLineSplinePointData) == 0x000008, "Wrong alignment on FFractureLineSplinePointData");
static_assert(sizeof(FFractureLineSplinePointData) == 0x000030, "Wrong size on FFractureLineSplinePointData");
static_assert(offsetof(FFractureLineSplinePointData, position) == 0x000000, "Member 'FFractureLineSplinePointData::position' has a wrong offset!");
static_assert(offsetof(FFractureLineSplinePointData, Tangent) == 0x000018, "Member 'FFractureLineSplinePointData::Tangent' has a wrong offset!");

// ScriptStruct DuneSandbox.CombatWindowStats
// 0x00E8 (0x00E8 - 0x0000)
struct alignas(0x08) FCombatWindowStats final
{
public:
	uint8                                         Pad_0[0xE8];                                       // 0x0000(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCombatWindowStats) == 0x000008, "Wrong alignment on FCombatWindowStats");
static_assert(sizeof(FCombatWindowStats) == 0x0000E8, "Wrong size on FCombatWindowStats");

// ScriptStruct DuneSandbox.CommuninetChannelRowBase
// 0x0110 (0x0120 - 0x0010)
struct FCommuninetChannelRowBase final : public FTableRowBase
{
public:
	class FText                                   m_ChannelName;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         m_ChannelFrequency;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            m_ChannelIcon;                                     // 0x0030(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_TextColor;                                       // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bReadOnly;                                       // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0xF];                                      // 0x0111(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommuninetChannelRowBase) == 0x000010, "Wrong alignment on FCommuninetChannelRowBase");
static_assert(sizeof(FCommuninetChannelRowBase) == 0x000120, "Wrong size on FCommuninetChannelRowBase");
static_assert(offsetof(FCommuninetChannelRowBase, m_ChannelName) == 0x000010, "Member 'FCommuninetChannelRowBase::m_ChannelName' has a wrong offset!");
static_assert(offsetof(FCommuninetChannelRowBase, m_ChannelFrequency) == 0x000028, "Member 'FCommuninetChannelRowBase::m_ChannelFrequency' has a wrong offset!");
static_assert(offsetof(FCommuninetChannelRowBase, m_ChannelIcon) == 0x000030, "Member 'FCommuninetChannelRowBase::m_ChannelIcon' has a wrong offset!");
static_assert(offsetof(FCommuninetChannelRowBase, m_TextColor) == 0x000100, "Member 'FCommuninetChannelRowBase::m_TextColor' has a wrong offset!");
static_assert(offsetof(FCommuninetChannelRowBase, m_bReadOnly) == 0x000110, "Member 'FCommuninetChannelRowBase::m_bReadOnly' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerCellData
// 0x0098 (0x0098 - 0x0000)
struct alignas(0x08) FPlayerCellData final
{
public:
	uint8                                         Pad_0[0x98];                                       // 0x0000(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerCellData) == 0x000008, "Wrong alignment on FPlayerCellData");
static_assert(sizeof(FPlayerCellData) == 0x000098, "Wrong size on FPlayerCellData");

// ScriptStruct DuneSandbox.VehicleTemplateModules
// 0x0058 (0x0058 - 0x0000)
struct FVehicleTemplateModules final
{
public:
	bool                                          m_bShowInCheatMenu;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShowInSpawnerSelection;                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVehicleModuleType, struct FEVehicleModuleTemplateID> m_Modules;                            // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleTemplateModules) == 0x000008, "Wrong alignment on FVehicleTemplateModules");
static_assert(sizeof(FVehicleTemplateModules) == 0x000058, "Wrong size on FVehicleTemplateModules");
static_assert(offsetof(FVehicleTemplateModules, m_bShowInCheatMenu) == 0x000000, "Member 'FVehicleTemplateModules::m_bShowInCheatMenu' has a wrong offset!");
static_assert(offsetof(FVehicleTemplateModules, m_bShowInSpawnerSelection) == 0x000001, "Member 'FVehicleTemplateModules::m_bShowInSpawnerSelection' has a wrong offset!");
static_assert(offsetof(FVehicleTemplateModules, m_Modules) == 0x000008, "Member 'FVehicleTemplateModules::m_Modules' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleTemplateRow
// 0x0080 (0x0090 - 0x0010)
struct FVehicleTemplateRow final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   m_VehicleActorClass;                               // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVehicleTemplateModules> m_Templates;                                   // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleTemplateRow) == 0x000008, "Wrong alignment on FVehicleTemplateRow");
static_assert(sizeof(FVehicleTemplateRow) == 0x000090, "Wrong size on FVehicleTemplateRow");
static_assert(offsetof(FVehicleTemplateRow, m_VehicleActorClass) == 0x000010, "Member 'FVehicleTemplateRow::m_VehicleActorClass' has a wrong offset!");
static_assert(offsetof(FVehicleTemplateRow, m_Templates) == 0x000040, "Member 'FVehicleTemplateRow::m_Templates' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetMessageActionData
// 0x0030 (0x0030 - 0x0000)
struct FCommuninetMessageActionData final
{
public:
	TArray<uint8>                                 OnReceive;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OnAccept;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OnDecline;                                         // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommuninetMessageActionData) == 0x000008, "Wrong alignment on FCommuninetMessageActionData");
static_assert(sizeof(FCommuninetMessageActionData) == 0x000030, "Wrong size on FCommuninetMessageActionData");
static_assert(offsetof(FCommuninetMessageActionData, OnReceive) == 0x000000, "Member 'FCommuninetMessageActionData::OnReceive' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageActionData, OnAccept) == 0x000010, "Member 'FCommuninetMessageActionData::OnAccept' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageActionData, OnDecline) == 0x000020, "Member 'FCommuninetMessageActionData::OnDecline' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetMessageComponent
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FCommuninetMessageComponent final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommuninetMessageComponent) == 0x000008, "Wrong alignment on FCommuninetMessageComponent");
static_assert(sizeof(FCommuninetMessageComponent) == 0x000080, "Wrong size on FCommuninetMessageComponent");

// ScriptStruct DuneSandbox.CommuninetChannelState
// 0x000C (0x0018 - 0x000C)
struct FCommuninetChannelState final : public FFastArraySerializerItem
{
public:
	struct FECommuninetChannel                    m_Channel;                                         // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bTuned;                                          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommuninetChannelState) == 0x000004, "Wrong alignment on FCommuninetChannelState");
static_assert(sizeof(FCommuninetChannelState) == 0x000018, "Wrong size on FCommuninetChannelState");
static_assert(offsetof(FCommuninetChannelState, m_Channel) == 0x00000C, "Member 'FCommuninetChannelState::m_Channel' has a wrong offset!");
static_assert(offsetof(FCommuninetChannelState, m_bTuned) == 0x000014, "Member 'FCommuninetChannelState::m_bTuned' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerCommuninetInfoArray
// 0x0018 (0x0140 - 0x0128)
struct FPlayerCommuninetInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FCommuninetChannelState>        m_AvailableChannels;                               // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UCommuninetComponent*                   m_Owner;                                           // 0x0138(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayerCommuninetInfoArray) == 0x000008, "Wrong alignment on FPlayerCommuninetInfoArray");
static_assert(sizeof(FPlayerCommuninetInfoArray) == 0x000140, "Wrong size on FPlayerCommuninetInfoArray");
static_assert(offsetof(FPlayerCommuninetInfoArray, m_AvailableChannels) == 0x000128, "Member 'FPlayerCommuninetInfoArray::m_AvailableChannels' has a wrong offset!");
static_assert(offsetof(FPlayerCommuninetInfoArray, m_Owner) == 0x000138, "Member 'FPlayerCommuninetInfoArray::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiAttackSettingsRowBase
// 0x0100 (0x0110 - 0x0010)
struct FDuneAiAttackSettingsRowBase final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UEnvQuery>               LocationLookupQuery;                               // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvQueryRunMode                              QueryMode;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SearchRadiusPropertyName;                          // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CombatVolumeClass;                                 // 0x0050(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReinforcementLocationClass;                        // 0x0080(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EAIAttackTier, uint8>                    ReinforcementPointsNum;                            // 0x00B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EHateLevel                                    TargetHateLevel;                                   // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHateDuration                                 TargetHateDuration;                                // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccuracyDebuff;                                    // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccuracyDebuffDuration;                            // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneAiAttackSettingsRowBase) == 0x000008, "Wrong alignment on FDuneAiAttackSettingsRowBase");
static_assert(sizeof(FDuneAiAttackSettingsRowBase) == 0x000110, "Wrong size on FDuneAiAttackSettingsRowBase");
static_assert(offsetof(FDuneAiAttackSettingsRowBase, LocationLookupQuery) == 0x000010, "Member 'FDuneAiAttackSettingsRowBase::LocationLookupQuery' has a wrong offset!");
static_assert(offsetof(FDuneAiAttackSettingsRowBase, QueryMode) == 0x000040, "Member 'FDuneAiAttackSettingsRowBase::QueryMode' has a wrong offset!");
static_assert(offsetof(FDuneAiAttackSettingsRowBase, SearchRadiusPropertyName) == 0x000044, "Member 'FDuneAiAttackSettingsRowBase::SearchRadiusPropertyName' has a wrong offset!");
static_assert(offsetof(FDuneAiAttackSettingsRowBase, CombatVolumeClass) == 0x000050, "Member 'FDuneAiAttackSettingsRowBase::CombatVolumeClass' has a wrong offset!");
static_assert(offsetof(FDuneAiAttackSettingsRowBase, ReinforcementLocationClass) == 0x000080, "Member 'FDuneAiAttackSettingsRowBase::ReinforcementLocationClass' has a wrong offset!");
static_assert(offsetof(FDuneAiAttackSettingsRowBase, ReinforcementPointsNum) == 0x0000B0, "Member 'FDuneAiAttackSettingsRowBase::ReinforcementPointsNum' has a wrong offset!");
static_assert(offsetof(FDuneAiAttackSettingsRowBase, TargetHateLevel) == 0x000100, "Member 'FDuneAiAttackSettingsRowBase::TargetHateLevel' has a wrong offset!");
static_assert(offsetof(FDuneAiAttackSettingsRowBase, TargetHateDuration) == 0x000101, "Member 'FDuneAiAttackSettingsRowBase::TargetHateDuration' has a wrong offset!");
static_assert(offsetof(FDuneAiAttackSettingsRowBase, AccuracyDebuff) == 0x000104, "Member 'FDuneAiAttackSettingsRowBase::AccuracyDebuff' has a wrong offset!");
static_assert(offsetof(FDuneAiAttackSettingsRowBase, AccuracyDebuffDuration) == 0x000108, "Member 'FDuneAiAttackSettingsRowBase::AccuracyDebuffDuration' has a wrong offset!");

// ScriptStruct DuneSandbox.ClientCommuninetActionDataComponent
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FClientCommuninetActionDataComponent final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientCommuninetActionDataComponent) == 0x000004, "Wrong alignment on FClientCommuninetActionDataComponent");
static_assert(sizeof(FClientCommuninetActionDataComponent) == 0x000004, "Wrong size on FClientCommuninetActionDataComponent");

// ScriptStruct DuneSandbox.VehicleShieldModuleTableRow
// 0x0008 (0x0018 - 0x0010)
struct FVehicleShieldModuleTableRow final : public FTableRowBase
{
public:
	struct FVehicleShieldModuleStats              m_ShieldModuleStats;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleShieldModuleTableRow) == 0x000008, "Wrong alignment on FVehicleShieldModuleTableRow");
static_assert(sizeof(FVehicleShieldModuleTableRow) == 0x000018, "Wrong size on FVehicleShieldModuleTableRow");
static_assert(offsetof(FVehicleShieldModuleTableRow, m_ShieldModuleStats) == 0x000010, "Member 'FVehicleShieldModuleTableRow::m_ShieldModuleStats' has a wrong offset!");

// ScriptStruct DuneSandbox.PitchCurves
// 0x0028 (0x0028 - 0x0000)
struct FPitchCurves final
{
public:
	class UCurveFloat*                            PitchToSpringArmLength;                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           PitchToTargetOffset;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           PitchToSocketOffset;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchArmLengthInterpSpeed;                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchTargetOffsetInterpSpeed;                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchSocketOffsetInterpSpeed;                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPitchCurves) == 0x000008, "Wrong alignment on FPitchCurves");
static_assert(sizeof(FPitchCurves) == 0x000028, "Wrong size on FPitchCurves");
static_assert(offsetof(FPitchCurves, PitchToSpringArmLength) == 0x000000, "Member 'FPitchCurves::PitchToSpringArmLength' has a wrong offset!");
static_assert(offsetof(FPitchCurves, PitchToTargetOffset) == 0x000008, "Member 'FPitchCurves::PitchToTargetOffset' has a wrong offset!");
static_assert(offsetof(FPitchCurves, PitchToSocketOffset) == 0x000010, "Member 'FPitchCurves::PitchToSocketOffset' has a wrong offset!");
static_assert(offsetof(FPitchCurves, PitchArmLengthInterpSpeed) == 0x000018, "Member 'FPitchCurves::PitchArmLengthInterpSpeed' has a wrong offset!");
static_assert(offsetof(FPitchCurves, PitchTargetOffsetInterpSpeed) == 0x00001C, "Member 'FPitchCurves::PitchTargetOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FPitchCurves, PitchSocketOffsetInterpSpeed) == 0x000020, "Member 'FPitchCurves::PitchSocketOffsetInterpSpeed' has a wrong offset!");

// ScriptStruct DuneSandbox.EPlaceablePlacementGroupType
// 0x0000 (0x0008 - 0x0008)
struct FEPlaceablePlacementGroupType final : public FStringEnumValue
{
};
static_assert(alignof(FEPlaceablePlacementGroupType) == 0x000004, "Wrong alignment on FEPlaceablePlacementGroupType");
static_assert(sizeof(FEPlaceablePlacementGroupType) == 0x000008, "Wrong size on FEPlaceablePlacementGroupType");

// ScriptStruct DuneSandbox.CraftingProductionContextTypesRowBase
// 0x0018 (0x0028 - 0x0010)
struct FCraftingProductionContextTypesRowBase final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingProductionContextTypesRowBase) == 0x000008, "Wrong alignment on FCraftingProductionContextTypesRowBase");
static_assert(sizeof(FCraftingProductionContextTypesRowBase) == 0x000028, "Wrong size on FCraftingProductionContextTypesRowBase");
static_assert(offsetof(FCraftingProductionContextTypesRowBase, Name) == 0x000010, "Member 'FCraftingProductionContextTypesRowBase::Name' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerBaseTurnedOnEvent
// 0x0000 (0x0030 - 0x0030)
struct FPlayerBaseTurnedOnEvent final : public FGameEvent
{
};
static_assert(alignof(FPlayerBaseTurnedOnEvent) == 0x000008, "Wrong alignment on FPlayerBaseTurnedOnEvent");
static_assert(sizeof(FPlayerBaseTurnedOnEvent) == 0x000030, "Wrong size on FPlayerBaseTurnedOnEvent");

// ScriptStruct DuneSandbox.CommuninetSequenceRowBase
// 0x0018 (0x0028 - 0x0010)
struct FCommuninetSequenceRowBase final : public FTableRowBase
{
public:
	TArray<struct FECommuninetMessageId>          m_MessagesInSequence;                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         m_MinIntervalTime;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaxIntervalTime;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommuninetSequenceRowBase) == 0x000008, "Wrong alignment on FCommuninetSequenceRowBase");
static_assert(sizeof(FCommuninetSequenceRowBase) == 0x000028, "Wrong size on FCommuninetSequenceRowBase");
static_assert(offsetof(FCommuninetSequenceRowBase, m_MessagesInSequence) == 0x000010, "Member 'FCommuninetSequenceRowBase::m_MessagesInSequence' has a wrong offset!");
static_assert(offsetof(FCommuninetSequenceRowBase, m_MinIntervalTime) == 0x000020, "Member 'FCommuninetSequenceRowBase::m_MinIntervalTime' has a wrong offset!");
static_assert(offsetof(FCommuninetSequenceRowBase, m_MaxIntervalTime) == 0x000024, "Member 'FCommuninetSequenceRowBase::m_MaxIntervalTime' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractConditionProgress
// 0x0008 (0x0008 - 0x0000)
struct FContractConditionProgress final
{
public:
	int32                                         m_MaxProgress;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         m_Progress;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FContractConditionProgress) == 0x000004, "Wrong alignment on FContractConditionProgress");
static_assert(sizeof(FContractConditionProgress) == 0x000008, "Wrong size on FContractConditionProgress");
static_assert(offsetof(FContractConditionProgress, m_MaxProgress) == 0x000000, "Member 'FContractConditionProgress::m_MaxProgress' has a wrong offset!");
static_assert(offsetof(FContractConditionProgress, m_Progress) == 0x000004, "Member 'FContractConditionProgress::m_Progress' has a wrong offset!");

// ScriptStruct DuneSandbox.ActiveContractStateFastArrayItem
// 0x00D4 (0x00E0 - 0x000C)
struct FActiveContractStateFastArrayItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              ItemUid;                                           // 0x0010(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEContractName                         Name;                                              // 0x0018(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UContractDataAsset>      ContractData;                                      // 0x0020(0x0030)(BlueprintVisible, RepSkip, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FContractConditionProgress>     Progress;                                          // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FExternalContractConditionData> m_ExternalConditions;                         // 0x0068(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	struct FUniqueID                              UID;                                               // 0x00B8(0x0008)(RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerFlag;                                        // 0x00C0(0x0008)(RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActualConditionId;                                 // 0x00C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasNewProgress;                                   // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFailed;                                         // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarkerId>                      MapMarkers;                                        // 0x00D0(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveContractStateFastArrayItem) == 0x000008, "Wrong alignment on FActiveContractStateFastArrayItem");
static_assert(sizeof(FActiveContractStateFastArrayItem) == 0x0000E0, "Wrong size on FActiveContractStateFastArrayItem");
static_assert(offsetof(FActiveContractStateFastArrayItem, ItemUid) == 0x000010, "Member 'FActiveContractStateFastArrayItem::ItemUid' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, Name) == 0x000018, "Member 'FActiveContractStateFastArrayItem::Name' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, ContractData) == 0x000020, "Member 'FActiveContractStateFastArrayItem::ContractData' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, EndDate) == 0x000050, "Member 'FActiveContractStateFastArrayItem::EndDate' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, Progress) == 0x000058, "Member 'FActiveContractStateFastArrayItem::Progress' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, m_ExternalConditions) == 0x000068, "Member 'FActiveContractStateFastArrayItem::m_ExternalConditions' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, UID) == 0x0000B8, "Member 'FActiveContractStateFastArrayItem::UID' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, PlayerFlag) == 0x0000C0, "Member 'FActiveContractStateFastArrayItem::PlayerFlag' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, ActualConditionId) == 0x0000C8, "Member 'FActiveContractStateFastArrayItem::ActualConditionId' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, bHasNewProgress) == 0x0000CC, "Member 'FActiveContractStateFastArrayItem::bHasNewProgress' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, bIsFailed) == 0x0000CD, "Member 'FActiveContractStateFastArrayItem::bIsFailed' has a wrong offset!");
static_assert(offsetof(FActiveContractStateFastArrayItem, MapMarkers) == 0x0000D0, "Member 'FActiveContractStateFastArrayItem::MapMarkers' has a wrong offset!");

// ScriptStruct DuneSandbox.ActiveContractStateFastArray
// 0x0010 (0x0138 - 0x0128)
struct FActiveContractStateFastArray final : public FFastArraySerializer
{
public:
	TArray<struct FActiveContractStateFastArrayItem> Items;                                          // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FActiveContractStateFastArray) == 0x000008, "Wrong alignment on FActiveContractStateFastArray");
static_assert(sizeof(FActiveContractStateFastArray) == 0x000138, "Wrong size on FActiveContractStateFastArray");
static_assert(offsetof(FActiveContractStateFastArray, Items) == 0x000128, "Member 'FActiveContractStateFastArray::Items' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadDecreeEffectFloat
// 0x000C (0x000C - 0x0000)
struct FLandsraadDecreeEffectFloat final
{
public:
	struct FEFaction                              Faction;                                           // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Factor;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadDecreeEffectFloat) == 0x000004, "Wrong alignment on FLandsraadDecreeEffectFloat");
static_assert(sizeof(FLandsraadDecreeEffectFloat) == 0x00000C, "Wrong size on FLandsraadDecreeEffectFloat");
static_assert(offsetof(FLandsraadDecreeEffectFloat, Faction) == 0x000000, "Member 'FLandsraadDecreeEffectFloat::Faction' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeEffectFloat, Factor) == 0x000008, "Member 'FLandsraadDecreeEffectFloat::Factor' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetOpenMapActionData
// 0x0000 (0x0010 - 0x0010)
struct FCommuninetOpenMapActionData final : public FCommuninetActionDataBase
{
};
static_assert(alignof(FCommuninetOpenMapActionData) == 0x000008, "Wrong alignment on FCommuninetOpenMapActionData");
static_assert(sizeof(FCommuninetOpenMapActionData) == 0x000010, "Wrong size on FCommuninetOpenMapActionData");

// ScriptStruct DuneSandbox.CourierMessageContent
// 0x0018 (0x0018 - 0x0000)
struct FCourierMessageContent final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECourierMessageType                           Type;                                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCourierMessageContent) == 0x000008, "Wrong alignment on FCourierMessageContent");
static_assert(sizeof(FCourierMessageContent) == 0x000018, "Wrong size on FCourierMessageContent");
static_assert(offsetof(FCourierMessageContent, Content) == 0x000000, "Member 'FCourierMessageContent::Content' has a wrong offset!");
static_assert(offsetof(FCourierMessageContent, Type) == 0x000010, "Member 'FCourierMessageContent::Type' has a wrong offset!");

// ScriptStruct DuneSandbox.CompletionCount
// 0x0008 (0x0008 - 0x0000)
struct FCompletionCount final
{
public:
	int32                                         CompletedCount;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompletionCount) == 0x000004, "Wrong alignment on FCompletionCount");
static_assert(sizeof(FCompletionCount) == 0x000008, "Wrong size on FCompletionCount");
static_assert(offsetof(FCompletionCount, CompletedCount) == 0x000000, "Member 'FCompletionCount::CompletedCount' has a wrong offset!");
static_assert(offsetof(FCompletionCount, TotalCount) == 0x000004, "Member 'FCompletionCount::TotalCount' has a wrong offset!");

// ScriptStruct DuneSandbox.ContainerItemStats
// 0x0058 (0x0058 - 0x0000)
struct FContainerItemStats final
{
public:
	TSet<struct FEItemTemplateID>                 AllowedItems;                                      // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bInvertListLogic;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContainerItemStats) == 0x000008, "Wrong alignment on FContainerItemStats");
static_assert(sizeof(FContainerItemStats) == 0x000058, "Wrong size on FContainerItemStats");
static_assert(offsetof(FContainerItemStats, AllowedItems) == 0x000000, "Member 'FContainerItemStats::AllowedItems' has a wrong offset!");
static_assert(offsetof(FContainerItemStats, bInvertListLogic) == 0x000050, "Member 'FContainerItemStats::bInvertListLogic' has a wrong offset!");

// ScriptStruct DuneSandbox.CourierMessageRoutingInfo
// 0x0038 (0x0038 - 0x0000)
struct FCourierMessageRoutingInfo final
{
public:
	class FString                                 Exchange;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectExchange;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoutingKey;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECourierMessageRoutingType                    Type;                                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCourierMessageRoutingInfo) == 0x000008, "Wrong alignment on FCourierMessageRoutingInfo");
static_assert(sizeof(FCourierMessageRoutingInfo) == 0x000038, "Wrong size on FCourierMessageRoutingInfo");
static_assert(offsetof(FCourierMessageRoutingInfo, Exchange) == 0x000000, "Member 'FCourierMessageRoutingInfo::Exchange' has a wrong offset!");
static_assert(offsetof(FCourierMessageRoutingInfo, RedirectExchange) == 0x000010, "Member 'FCourierMessageRoutingInfo::RedirectExchange' has a wrong offset!");
static_assert(offsetof(FCourierMessageRoutingInfo, RoutingKey) == 0x000020, "Member 'FCourierMessageRoutingInfo::RoutingKey' has a wrong offset!");
static_assert(offsetof(FCourierMessageRoutingInfo, Type) == 0x000030, "Member 'FCourierMessageRoutingInfo::Type' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemTierData
// 0x0048 (0x0048 - 0x0000)
struct FItemTierData final
{
public:
	class FText                                   m_Name;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_Icon;                                            // 0x0018(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemTierData) == 0x000008, "Wrong alignment on FItemTierData");
static_assert(sizeof(FItemTierData) == 0x000048, "Wrong size on FItemTierData");
static_assert(offsetof(FItemTierData, m_Name) == 0x000000, "Member 'FItemTierData::m_Name' has a wrong offset!");
static_assert(offsetof(FItemTierData, m_Icon) == 0x000018, "Member 'FItemTierData::m_Icon' has a wrong offset!");

// ScriptStruct DuneSandbox.ContainerItemStatsComponent_BlueprintWrapper
// 0x0128 (0x0128 - 0x0000)
struct FContainerItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0xD0];                                       // 0x0000(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContainerItemStats                    ContainerItemStats;                                // 0x00D0(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContainerItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FContainerItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FContainerItemStatsComponent_BlueprintWrapper) == 0x000128, "Wrong size on FContainerItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FContainerItemStatsComponent_BlueprintWrapper, ContainerItemStats) == 0x0000D0, "Member 'FContainerItemStatsComponent_BlueprintWrapper::ContainerItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.StatBarGroup
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FStatBarGroup final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatBarGroup) == 0x000008, "Wrong alignment on FStatBarGroup");
static_assert(sizeof(FStatBarGroup) == 0x000010, "Wrong size on FStatBarGroup");

// ScriptStruct DuneSandbox.ContainerItemTableRow
// 0x0058 (0x0068 - 0x0010)
struct FContainerItemTableRow final : public FTableRowBase
{
public:
	struct FContainerItemStats                    ContainerItemStats;                                // 0x0010(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContainerItemTableRow) == 0x000008, "Wrong alignment on FContainerItemTableRow");
static_assert(sizeof(FContainerItemTableRow) == 0x000068, "Wrong size on FContainerItemTableRow");
static_assert(offsetof(FContainerItemTableRow, ContainerItemStats) == 0x000010, "Member 'FContainerItemTableRow::ContainerItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetRadioStationScheduledProgram
// 0x0088 (0x0088 - 0x0000)
struct FCommuninetRadioStationScheduledProgram final
{
public:
	bool                                          m_bEnabled;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_Name;                                            // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_ActivateAudioEvent;                              // 0x0020(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_DeactivateAudioEvent;                            // 0x0050(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ActivateAudioEventDuration;                      // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         m_StartTimeInSeconds;                              // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCommuninetRadioStationScheduledProgram) == 0x000008, "Wrong alignment on FCommuninetRadioStationScheduledProgram");
static_assert(sizeof(FCommuninetRadioStationScheduledProgram) == 0x000088, "Wrong size on FCommuninetRadioStationScheduledProgram");
static_assert(offsetof(FCommuninetRadioStationScheduledProgram, m_bEnabled) == 0x000000, "Member 'FCommuninetRadioStationScheduledProgram::m_bEnabled' has a wrong offset!");
static_assert(offsetof(FCommuninetRadioStationScheduledProgram, m_Name) == 0x000008, "Member 'FCommuninetRadioStationScheduledProgram::m_Name' has a wrong offset!");
static_assert(offsetof(FCommuninetRadioStationScheduledProgram, m_ActivateAudioEvent) == 0x000020, "Member 'FCommuninetRadioStationScheduledProgram::m_ActivateAudioEvent' has a wrong offset!");
static_assert(offsetof(FCommuninetRadioStationScheduledProgram, m_DeactivateAudioEvent) == 0x000050, "Member 'FCommuninetRadioStationScheduledProgram::m_DeactivateAudioEvent' has a wrong offset!");
static_assert(offsetof(FCommuninetRadioStationScheduledProgram, m_ActivateAudioEventDuration) == 0x000080, "Member 'FCommuninetRadioStationScheduledProgram::m_ActivateAudioEventDuration' has a wrong offset!");
static_assert(offsetof(FCommuninetRadioStationScheduledProgram, m_StartTimeInSeconds) == 0x000084, "Member 'FCommuninetRadioStationScheduledProgram::m_StartTimeInSeconds' has a wrong offset!");

// ScriptStruct DuneSandbox.CooldownStats
// 0x0018 (0x0018 - 0x0000)
struct FCooldownStats final
{
public:
	float                                         CooldownDuration;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          ReadyAudioEvent;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownTime;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCooldownStats) == 0x000008, "Wrong alignment on FCooldownStats");
static_assert(sizeof(FCooldownStats) == 0x000018, "Wrong size on FCooldownStats");
static_assert(offsetof(FCooldownStats, CooldownDuration) == 0x000000, "Member 'FCooldownStats::CooldownDuration' has a wrong offset!");
static_assert(offsetof(FCooldownStats, ReadyAudioEvent) == 0x000008, "Member 'FCooldownStats::ReadyAudioEvent' has a wrong offset!");
static_assert(offsetof(FCooldownStats, CooldownTime) == 0x000010, "Member 'FCooldownStats::CooldownTime' has a wrong offset!");

// ScriptStruct DuneSandbox.CooldownStatsComponent_BlueprintWrapper
// 0x0068 (0x0068 - 0x0000)
struct FCooldownStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCooldownStats                         CooldownStats;                                     // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCooldownStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FCooldownStatsComponent_BlueprintWrapper");
static_assert(sizeof(FCooldownStatsComponent_BlueprintWrapper) == 0x000068, "Wrong size on FCooldownStatsComponent_BlueprintWrapper");
static_assert(offsetof(FCooldownStatsComponent_BlueprintWrapper, CooldownStats) == 0x000050, "Member 'FCooldownStatsComponent_BlueprintWrapper::CooldownStats' has a wrong offset!");

// ScriptStruct DuneSandbox.ContainerLootRowBase
// 0x0060 (0x0070 - 0x0010)
struct FContainerLootRowBase final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UDataTable>              LootTable;                                         // 0x0010(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LootWeightedTable;                                 // 0x0040(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContainerLootRowBase) == 0x000008, "Wrong alignment on FContainerLootRowBase");
static_assert(sizeof(FContainerLootRowBase) == 0x000070, "Wrong size on FContainerLootRowBase");
static_assert(offsetof(FContainerLootRowBase, LootTable) == 0x000010, "Member 'FContainerLootRowBase::LootTable' has a wrong offset!");
static_assert(offsetof(FContainerLootRowBase, LootWeightedTable) == 0x000040, "Member 'FContainerLootRowBase::LootWeightedTable' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractNamesSet
// 0x0010 (0x0138 - 0x0128)
struct FContractNamesSet final : public FFastArraySerializer
{
public:
	TArray<struct FContractNameFastArrayItem>     Items;                                             // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FContractNamesSet) == 0x000008, "Wrong alignment on FContractNamesSet");
static_assert(sizeof(FContractNamesSet) == 0x000138, "Wrong size on FContractNamesSet");
static_assert(offsetof(FContractNamesSet, Items) == 0x000128, "Member 'FContractNamesSet::Items' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractConditionKillSettings
// 0x0018 (0x0018 - 0x0000)
struct FContractConditionKillSettings final
{
public:
	bool                                          bCanScoreKillByDamage;                             // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxDurationToScoreKillByDamageInSec;               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDistanceToScoreKillByDamage;                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanScoreKillByBeingInParty;                       // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxDistanceToScoreKillByBeingInParty;              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanScoreKillByBeingInVehicle;                     // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldConsiderPlayersAroundKiller;                // 0x0015(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContractConditionKillSettings) == 0x000004, "Wrong alignment on FContractConditionKillSettings");
static_assert(sizeof(FContractConditionKillSettings) == 0x000018, "Wrong size on FContractConditionKillSettings");
static_assert(offsetof(FContractConditionKillSettings, bCanScoreKillByDamage) == 0x000000, "Member 'FContractConditionKillSettings::bCanScoreKillByDamage' has a wrong offset!");
static_assert(offsetof(FContractConditionKillSettings, MaxDurationToScoreKillByDamageInSec) == 0x000004, "Member 'FContractConditionKillSettings::MaxDurationToScoreKillByDamageInSec' has a wrong offset!");
static_assert(offsetof(FContractConditionKillSettings, MaxDistanceToScoreKillByDamage) == 0x000008, "Member 'FContractConditionKillSettings::MaxDistanceToScoreKillByDamage' has a wrong offset!");
static_assert(offsetof(FContractConditionKillSettings, bCanScoreKillByBeingInParty) == 0x00000C, "Member 'FContractConditionKillSettings::bCanScoreKillByBeingInParty' has a wrong offset!");
static_assert(offsetof(FContractConditionKillSettings, MaxDistanceToScoreKillByBeingInParty) == 0x000010, "Member 'FContractConditionKillSettings::MaxDistanceToScoreKillByBeingInParty' has a wrong offset!");
static_assert(offsetof(FContractConditionKillSettings, bCanScoreKillByBeingInVehicle) == 0x000014, "Member 'FContractConditionKillSettings::bCanScoreKillByBeingInVehicle' has a wrong offset!");
static_assert(offsetof(FContractConditionKillSettings, bShouldConsiderPlayersAroundKiller) == 0x000015, "Member 'FContractConditionKillSettings::bShouldConsiderPlayersAroundKiller' has a wrong offset!");

// ScriptStruct DuneSandbox.CourierNotificationRoutingInfo
// 0x0010 (0x0010 - 0x0000)
struct FCourierNotificationRoutingInfo final
{
public:
	TArray<class FString>                         Keywords;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCourierNotificationRoutingInfo) == 0x000008, "Wrong alignment on FCourierNotificationRoutingInfo");
static_assert(sizeof(FCourierNotificationRoutingInfo) == 0x000010, "Wrong size on FCourierNotificationRoutingInfo");
static_assert(offsetof(FCourierNotificationRoutingInfo, Keywords) == 0x000000, "Member 'FCourierNotificationRoutingInfo::Keywords' has a wrong offset!");

// ScriptStruct DuneSandbox.CourierNotification
// 0x0028 (0x0028 - 0x0000)
struct FCourierNotification final
{
public:
	struct FCourierNotificationRoutingInfo        RoutingInfo;                                       // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              SenderId;                                          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCourierNotification) == 0x000008, "Wrong alignment on FCourierNotification");
static_assert(sizeof(FCourierNotification) == 0x000028, "Wrong size on FCourierNotification");
static_assert(offsetof(FCourierNotification, RoutingInfo) == 0x000000, "Member 'FCourierNotification::RoutingInfo' has a wrong offset!");
static_assert(offsetof(FCourierNotification, Content) == 0x000010, "Member 'FCourierNotification::Content' has a wrong offset!");
static_assert(offsetof(FCourierNotification, SenderId) == 0x000020, "Member 'FCourierNotification::SenderId' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneyNodeInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJourneyNodeInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJourneyNodeInfo) == 0x000008, "Wrong alignment on FJourneyNodeInfo");
static_assert(sizeof(FJourneyNodeInfo) == 0x000020, "Wrong size on FJourneyNodeInfo");

// ScriptStruct DuneSandbox.PendingConditionInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FPendingConditionInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPendingConditionInfo) == 0x000004, "Wrong alignment on FPendingConditionInfo");
static_assert(sizeof(FPendingConditionInfo) == 0x000008, "Wrong size on FPendingConditionInfo");

// ScriptStruct DuneSandbox.ContractCustomReward
// 0x0060 (0x0060 - 0x0000)
struct FContractCustomReward
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractCustomReward) == 0x000008, "Wrong alignment on FContractCustomReward");
static_assert(sizeof(FContractCustomReward) == 0x000060, "Wrong size on FContractCustomReward");
static_assert(offsetof(FContractCustomReward, Name) == 0x000000, "Member 'FContractCustomReward::Name' has a wrong offset!");
static_assert(offsetof(FContractCustomReward, Description) == 0x000018, "Member 'FContractCustomReward::Description' has a wrong offset!");
static_assert(offsetof(FContractCustomReward, Icon) == 0x000030, "Member 'FContractCustomReward::Icon' has a wrong offset!");

// ScriptStruct DuneSandbox.LevelSequenceData
// 0x0020 (0x0020 - 0x0000)
struct FLevelSequenceData final
{
public:
	ELevelSequenceState                           m_State;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         m_LevelSequence;                                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelSequenceData) == 0x000008, "Wrong alignment on FLevelSequenceData");
static_assert(sizeof(FLevelSequenceData) == 0x000020, "Wrong size on FLevelSequenceData");
static_assert(offsetof(FLevelSequenceData, m_State) == 0x000000, "Member 'FLevelSequenceData::m_State' has a wrong offset!");
static_assert(offsetof(FLevelSequenceData, m_LevelSequence) == 0x000008, "Member 'FLevelSequenceData::m_LevelSequence' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemIDAndInfoCardValuePair
// 0x0030 (0x0030 - 0x0000)
struct FItemIDAndInfoCardValuePair final
{
public:
	struct FEItemTemplateID                       ItemId;                                            // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ValueLocKey;                                       // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDecimals;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHigherIsBetter;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxStatValue;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemIDAndInfoCardValuePair) == 0x000008, "Wrong alignment on FItemIDAndInfoCardValuePair");
static_assert(sizeof(FItemIDAndInfoCardValuePair) == 0x000030, "Wrong size on FItemIDAndInfoCardValuePair");
static_assert(offsetof(FItemIDAndInfoCardValuePair, ItemId) == 0x000000, "Member 'FItemIDAndInfoCardValuePair::ItemId' has a wrong offset!");
static_assert(offsetof(FItemIDAndInfoCardValuePair, ValueLocKey) == 0x000008, "Member 'FItemIDAndInfoCardValuePair::ValueLocKey' has a wrong offset!");
static_assert(offsetof(FItemIDAndInfoCardValuePair, Value) == 0x000020, "Member 'FItemIDAndInfoCardValuePair::Value' has a wrong offset!");
static_assert(offsetof(FItemIDAndInfoCardValuePair, NumDecimals) == 0x000024, "Member 'FItemIDAndInfoCardValuePair::NumDecimals' has a wrong offset!");
static_assert(offsetof(FItemIDAndInfoCardValuePair, bHigherIsBetter) == 0x000028, "Member 'FItemIDAndInfoCardValuePair::bHigherIsBetter' has a wrong offset!");
static_assert(offsetof(FItemIDAndInfoCardValuePair, MaxStatValue) == 0x00002C, "Member 'FItemIDAndInfoCardValuePair::MaxStatValue' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractCustomItemReward
// 0x0050 (0x00B0 - 0x0060)
struct FContractCustomItemReward final : public FContractCustomReward
{
public:
	struct FGameplayTagQuery                      ItemTagsLookupQuery;                               // 0x0060(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Durability;                                        // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractCustomItemReward) == 0x000008, "Wrong alignment on FContractCustomItemReward");
static_assert(sizeof(FContractCustomItemReward) == 0x0000B0, "Wrong size on FContractCustomItemReward");
static_assert(offsetof(FContractCustomItemReward, ItemTagsLookupQuery) == 0x000060, "Member 'FContractCustomItemReward::ItemTagsLookupQuery' has a wrong offset!");
static_assert(offsetof(FContractCustomItemReward, Quantity) == 0x0000A8, "Member 'FContractCustomItemReward::Quantity' has a wrong offset!");
static_assert(offsetof(FContractCustomItemReward, Durability) == 0x0000AC, "Member 'FContractCustomItemReward::Durability' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractSkillReward
// 0x0010 (0x0070 - 0x0060)
struct FContractSkillReward final : public FContractCustomReward
{
public:
	struct FGameplayTag                           Module;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContractSkillReward) == 0x000008, "Wrong alignment on FContractSkillReward");
static_assert(sizeof(FContractSkillReward) == 0x000070, "Wrong size on FContractSkillReward");
static_assert(offsetof(FContractSkillReward, Module) == 0x000060, "Member 'FContractSkillReward::Module' has a wrong offset!");
static_assert(offsetof(FContractSkillReward, Level) == 0x000068, "Member 'FContractSkillReward::Level' has a wrong offset!");

// ScriptStruct DuneSandbox.TiledLandscapeEditorContext
// 0x0001 (0x0001 - 0x0000)
struct FTiledLandscapeEditorContext final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTiledLandscapeEditorContext) == 0x000001, "Wrong alignment on FTiledLandscapeEditorContext");
static_assert(sizeof(FTiledLandscapeEditorContext) == 0x000001, "Wrong size on FTiledLandscapeEditorContext");

// ScriptStruct DuneSandbox.ContractInfo
// 0x0060 (0x0060 - 0x0000)
struct FContractInfo final
{
public:
	int64                                         ServerUid;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              UID;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              ItemUid;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEContractName                         Name;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UContractDataAsset*                     ContractData;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Locations;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEDuneMapId>                    LocationsMaps;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Progress;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ConditionId;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContractStatus                               Status;                                            // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContractStatusReason                         StatusReason;                                      // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContractInfo) == 0x000008, "Wrong alignment on FContractInfo");
static_assert(sizeof(FContractInfo) == 0x000060, "Wrong size on FContractInfo");
static_assert(offsetof(FContractInfo, ServerUid) == 0x000000, "Member 'FContractInfo::ServerUid' has a wrong offset!");
static_assert(offsetof(FContractInfo, UID) == 0x000008, "Member 'FContractInfo::UID' has a wrong offset!");
static_assert(offsetof(FContractInfo, ItemUid) == 0x000010, "Member 'FContractInfo::ItemUid' has a wrong offset!");
static_assert(offsetof(FContractInfo, Name) == 0x000018, "Member 'FContractInfo::Name' has a wrong offset!");
static_assert(offsetof(FContractInfo, ContractData) == 0x000020, "Member 'FContractInfo::ContractData' has a wrong offset!");
static_assert(offsetof(FContractInfo, Locations) == 0x000028, "Member 'FContractInfo::Locations' has a wrong offset!");
static_assert(offsetof(FContractInfo, LocationsMaps) == 0x000038, "Member 'FContractInfo::LocationsMaps' has a wrong offset!");
static_assert(offsetof(FContractInfo, Progress) == 0x000048, "Member 'FContractInfo::Progress' has a wrong offset!");
static_assert(offsetof(FContractInfo, ConditionId) == 0x000058, "Member 'FContractInfo::ConditionId' has a wrong offset!");
static_assert(offsetof(FContractInfo, Status) == 0x00005C, "Member 'FContractInfo::Status' has a wrong offset!");
static_assert(offsetof(FContractInfo, StatusReason) == 0x00005D, "Member 'FContractInfo::StatusReason' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractInfoFastArrayItem
// 0x0064 (0x0070 - 0x000C)
struct FContractInfoFastArrayItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContractInfo                          Info;                                              // 0x0010(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractInfoFastArrayItem) == 0x000008, "Wrong alignment on FContractInfoFastArrayItem");
static_assert(sizeof(FContractInfoFastArrayItem) == 0x000070, "Wrong size on FContractInfoFastArrayItem");
static_assert(offsetof(FContractInfoFastArrayItem, Info) == 0x000010, "Member 'FContractInfoFastArrayItem::Info' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractInfoFastArray
// 0x0010 (0x0138 - 0x0128)
struct FContractInfoFastArray final : public FFastArraySerializer
{
public:
	TArray<struct FContractInfoFastArrayItem>     Items;                                             // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FContractInfoFastArray) == 0x000008, "Wrong alignment on FContractInfoFastArray");
static_assert(sizeof(FContractInfoFastArray) == 0x000138, "Wrong size on FContractInfoFastArray");
static_assert(offsetof(FContractInfoFastArray, Items) == 0x000128, "Member 'FContractInfoFastArray::Items' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractInfoSet
// 0x0010 (0x0138 - 0x0128)
struct FContractInfoSet final : public FFastArraySerializer
{
public:
	TArray<struct FContractInfoFastArrayItem>     Items;                                             // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FContractInfoSet) == 0x000008, "Wrong alignment on FContractInfoSet");
static_assert(sizeof(FContractInfoSet) == 0x000138, "Wrong size on FContractInfoSet");
static_assert(offsetof(FContractInfoSet, Items) == 0x000128, "Member 'FContractInfoSet::Items' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractFilterSettings
// 0x0088 (0x0088 - 0x0000)
struct FContractFilterSettings final
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ForbiddenTags;                                     // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFloatRange                            DistanceToContractSquared;                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookupAbsoluteLocation;                            // 0x0050(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ContentTags;                                       // 0x0068(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractFilterSettings) == 0x000008, "Wrong alignment on FContractFilterSettings");
static_assert(sizeof(FContractFilterSettings) == 0x000088, "Wrong size on FContractFilterSettings");
static_assert(offsetof(FContractFilterSettings, RequiredTags) == 0x000000, "Member 'FContractFilterSettings::RequiredTags' has a wrong offset!");
static_assert(offsetof(FContractFilterSettings, ForbiddenTags) == 0x000020, "Member 'FContractFilterSettings::ForbiddenTags' has a wrong offset!");
static_assert(offsetof(FContractFilterSettings, DistanceToContractSquared) == 0x000040, "Member 'FContractFilterSettings::DistanceToContractSquared' has a wrong offset!");
static_assert(offsetof(FContractFilterSettings, LookupAbsoluteLocation) == 0x000050, "Member 'FContractFilterSettings::LookupAbsoluteLocation' has a wrong offset!");
static_assert(offsetof(FContractFilterSettings, ContentTags) == 0x000068, "Member 'FContractFilterSettings::ContentTags' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractSettings
// 0x0350 (0x0350 - 0x0000)
struct FContractSettings final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContractSpawnPriority                        Priority;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGlobal;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisibleOnContractsBoard;                        // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ContractBoardDisplayOrder;                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeInContractsPool;                             // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ContractTags;                                      // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bHasPlayerFlagsRequirementsQuery;                  // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      PlayerFlagsRequirementsQuery;                      // 0x0040(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AddedFlagsOnAccept;                                // 0x0088(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RemovedFlagsOnAccept;                              // 0x00A8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AddedFlagsOnCompletion;                            // 0x00C8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RemovedFlagsOnCompletion;                          // 0x00E8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AddedFlagsOnCancel;                                // 0x0108(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RemovedFlagsOnCancel;                              // 0x0128(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FGameItemInfo>                  RemovedItemsOnCancel;                              // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0158(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TypeIcon;                                          // 0x0188(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x01B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ShortDescription;                                  // 0x01D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x01E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevel;                                   // 0x0200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDebriefDialog;                                 // 0x0204(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DebriefTitle;                                      // 0x0208(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DebriefText;                                       // 0x0220(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           DebriefAudioEvent;                                 // 0x0238(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UContractDataAsset>      NextContract;                                      // 0x0268(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldGiveRewardsOnCompletion;                    // 0x0298(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SuppressNotificationsFlags;                        // 0x0299(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A[0x2];                                      // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           XpEventReward;                                     // 0x029C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SolarisReward;                                     // 0x02A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KnowledgePointsReward;                             // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameItemInfo>                  ItemsRewards;                                      // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FContractCustomItemReward>      RandomItemsRewards;                                // 0x02C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FContractCustomReward>          CustomRewards;                                     // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FContractSkillReward>           SkillsKeyRewards;                                  // 0x02E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EContractLocationAnchorName, struct FGameplayTagQuery> ContractAnchors;                     // 0x02F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FContractCondition>             Conditions;                                        // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractSettings) == 0x000008, "Wrong alignment on FContractSettings");
static_assert(sizeof(FContractSettings) == 0x000350, "Wrong size on FContractSettings");
static_assert(offsetof(FContractSettings, bIsEnabled) == 0x000000, "Member 'FContractSettings::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FContractSettings, Version) == 0x000004, "Member 'FContractSettings::Version' has a wrong offset!");
static_assert(offsetof(FContractSettings, Priority) == 0x000008, "Member 'FContractSettings::Priority' has a wrong offset!");
static_assert(offsetof(FContractSettings, bIsGlobal) == 0x000009, "Member 'FContractSettings::bIsGlobal' has a wrong offset!");
static_assert(offsetof(FContractSettings, bIsVisibleOnContractsBoard) == 0x00000A, "Member 'FContractSettings::bIsVisibleOnContractsBoard' has a wrong offset!");
static_assert(offsetof(FContractSettings, ContractBoardDisplayOrder) == 0x00000C, "Member 'FContractSettings::ContractBoardDisplayOrder' has a wrong offset!");
static_assert(offsetof(FContractSettings, bCanBeInContractsPool) == 0x000010, "Member 'FContractSettings::bCanBeInContractsPool' has a wrong offset!");
static_assert(offsetof(FContractSettings, ContractTags) == 0x000018, "Member 'FContractSettings::ContractTags' has a wrong offset!");
static_assert(offsetof(FContractSettings, bHasPlayerFlagsRequirementsQuery) == 0x000038, "Member 'FContractSettings::bHasPlayerFlagsRequirementsQuery' has a wrong offset!");
static_assert(offsetof(FContractSettings, PlayerFlagsRequirementsQuery) == 0x000040, "Member 'FContractSettings::PlayerFlagsRequirementsQuery' has a wrong offset!");
static_assert(offsetof(FContractSettings, AddedFlagsOnAccept) == 0x000088, "Member 'FContractSettings::AddedFlagsOnAccept' has a wrong offset!");
static_assert(offsetof(FContractSettings, RemovedFlagsOnAccept) == 0x0000A8, "Member 'FContractSettings::RemovedFlagsOnAccept' has a wrong offset!");
static_assert(offsetof(FContractSettings, AddedFlagsOnCompletion) == 0x0000C8, "Member 'FContractSettings::AddedFlagsOnCompletion' has a wrong offset!");
static_assert(offsetof(FContractSettings, RemovedFlagsOnCompletion) == 0x0000E8, "Member 'FContractSettings::RemovedFlagsOnCompletion' has a wrong offset!");
static_assert(offsetof(FContractSettings, AddedFlagsOnCancel) == 0x000108, "Member 'FContractSettings::AddedFlagsOnCancel' has a wrong offset!");
static_assert(offsetof(FContractSettings, RemovedFlagsOnCancel) == 0x000128, "Member 'FContractSettings::RemovedFlagsOnCancel' has a wrong offset!");
static_assert(offsetof(FContractSettings, RemovedItemsOnCancel) == 0x000148, "Member 'FContractSettings::RemovedItemsOnCancel' has a wrong offset!");
static_assert(offsetof(FContractSettings, Icon) == 0x000158, "Member 'FContractSettings::Icon' has a wrong offset!");
static_assert(offsetof(FContractSettings, TypeIcon) == 0x000188, "Member 'FContractSettings::TypeIcon' has a wrong offset!");
static_assert(offsetof(FContractSettings, Title) == 0x0001B8, "Member 'FContractSettings::Title' has a wrong offset!");
static_assert(offsetof(FContractSettings, ShortDescription) == 0x0001D0, "Member 'FContractSettings::ShortDescription' has a wrong offset!");
static_assert(offsetof(FContractSettings, Description) == 0x0001E8, "Member 'FContractSettings::Description' has a wrong offset!");
static_assert(offsetof(FContractSettings, DifficultyLevel) == 0x000200, "Member 'FContractSettings::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FContractSettings, bHasDebriefDialog) == 0x000204, "Member 'FContractSettings::bHasDebriefDialog' has a wrong offset!");
static_assert(offsetof(FContractSettings, DebriefTitle) == 0x000208, "Member 'FContractSettings::DebriefTitle' has a wrong offset!");
static_assert(offsetof(FContractSettings, DebriefText) == 0x000220, "Member 'FContractSettings::DebriefText' has a wrong offset!");
static_assert(offsetof(FContractSettings, DebriefAudioEvent) == 0x000238, "Member 'FContractSettings::DebriefAudioEvent' has a wrong offset!");
static_assert(offsetof(FContractSettings, NextContract) == 0x000268, "Member 'FContractSettings::NextContract' has a wrong offset!");
static_assert(offsetof(FContractSettings, bShouldGiveRewardsOnCompletion) == 0x000298, "Member 'FContractSettings::bShouldGiveRewardsOnCompletion' has a wrong offset!");
static_assert(offsetof(FContractSettings, SuppressNotificationsFlags) == 0x000299, "Member 'FContractSettings::SuppressNotificationsFlags' has a wrong offset!");
static_assert(offsetof(FContractSettings, XpEventReward) == 0x00029C, "Member 'FContractSettings::XpEventReward' has a wrong offset!");
static_assert(offsetof(FContractSettings, SolarisReward) == 0x0002A4, "Member 'FContractSettings::SolarisReward' has a wrong offset!");
static_assert(offsetof(FContractSettings, KnowledgePointsReward) == 0x0002AC, "Member 'FContractSettings::KnowledgePointsReward' has a wrong offset!");
static_assert(offsetof(FContractSettings, ItemsRewards) == 0x0002B0, "Member 'FContractSettings::ItemsRewards' has a wrong offset!");
static_assert(offsetof(FContractSettings, RandomItemsRewards) == 0x0002C0, "Member 'FContractSettings::RandomItemsRewards' has a wrong offset!");
static_assert(offsetof(FContractSettings, CustomRewards) == 0x0002D0, "Member 'FContractSettings::CustomRewards' has a wrong offset!");
static_assert(offsetof(FContractSettings, SkillsKeyRewards) == 0x0002E0, "Member 'FContractSettings::SkillsKeyRewards' has a wrong offset!");
static_assert(offsetof(FContractSettings, ContractAnchors) == 0x0002F0, "Member 'FContractSettings::ContractAnchors' has a wrong offset!");
static_assert(offsetof(FContractSettings, Conditions) == 0x000340, "Member 'FContractSettings::Conditions' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractRowBase
// 0x0350 (0x0360 - 0x0010)
struct FContractRowBase final : public FTableRowBase
{
public:
	struct FContractSettings                      Settings;                                          // 0x0010(0x0350)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractRowBase) == 0x000008, "Wrong alignment on FContractRowBase");
static_assert(sizeof(FContractRowBase) == 0x000360, "Wrong size on FContractRowBase");
static_assert(offsetof(FContractRowBase, Settings) == 0x000010, "Member 'FContractRowBase::Settings' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetMessageRPCPayload
// 0x0058 (0x0058 - 0x0000)
struct FCommuninetMessageRPCPayload final
{
public:
	struct FUniqueID                              SenderUniqueId;                                    // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FECommuninetMessageId                  MessageId;                                         // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FECommuninetChannel                    Channel;                                           // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommuninetMessageActionData           ActionData;                                        // 0x0018(0x0030)(NativeAccessSpecifierPublic)
	TArray<class FString>                         MessageArgs;                                       // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommuninetMessageRPCPayload) == 0x000008, "Wrong alignment on FCommuninetMessageRPCPayload");
static_assert(sizeof(FCommuninetMessageRPCPayload) == 0x000058, "Wrong size on FCommuninetMessageRPCPayload");
static_assert(offsetof(FCommuninetMessageRPCPayload, SenderUniqueId) == 0x000000, "Member 'FCommuninetMessageRPCPayload::SenderUniqueId' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRPCPayload, MessageId) == 0x000008, "Member 'FCommuninetMessageRPCPayload::MessageId' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRPCPayload, Channel) == 0x000010, "Member 'FCommuninetMessageRPCPayload::Channel' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRPCPayload, ActionData) == 0x000018, "Member 'FCommuninetMessageRPCPayload::ActionData' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageRPCPayload, MessageArgs) == 0x000048, "Member 'FCommuninetMessageRPCPayload::MessageArgs' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockTemplateSubLevelSettings
// 0x0090 (0x0090 - 0x0000)
struct FTerrainBlockTemplateSubLevelSettings final
{
public:
	class FString                                 Alias;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0010(0x0030)(Edit, EditConst, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FString>                           GroupsNames;                                       // 0x0040(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockTemplateSubLevelSettings) == 0x000008, "Wrong alignment on FTerrainBlockTemplateSubLevelSettings");
static_assert(sizeof(FTerrainBlockTemplateSubLevelSettings) == 0x000090, "Wrong size on FTerrainBlockTemplateSubLevelSettings");
static_assert(offsetof(FTerrainBlockTemplateSubLevelSettings, Alias) == 0x000000, "Member 'FTerrainBlockTemplateSubLevelSettings::Alias' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelSettings, Level) == 0x000010, "Member 'FTerrainBlockTemplateSubLevelSettings::Level' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSubLevelSettings, GroupsNames) == 0x000040, "Member 'FTerrainBlockTemplateSubLevelSettings::GroupsNames' has a wrong offset!");

// ScriptStruct DuneSandbox.GameStateDynamicInventoryNode
// 0x0058 (0x0058 - 0x0000)
struct FGameStateDynamicInventoryNode final
{
public:
	class UDynamicActorInventory*                 Inventory;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x50];                                       // 0x0008(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameStateDynamicInventoryNode) == 0x000008, "Wrong alignment on FGameStateDynamicInventoryNode");
static_assert(sizeof(FGameStateDynamicInventoryNode) == 0x000058, "Wrong size on FGameStateDynamicInventoryNode");
static_assert(offsetof(FGameStateDynamicInventoryNode, Inventory) == 0x000000, "Member 'FGameStateDynamicInventoryNode::Inventory' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractPlayerInfo
// 0x0098 (0x0098 - 0x0000)
struct alignas(0x08) FContractPlayerInfo final
{
public:
	uint8                                         Pad_0[0x98];                                       // 0x0000(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContractPlayerInfo) == 0x000008, "Wrong alignment on FContractPlayerInfo");
static_assert(sizeof(FContractPlayerInfo) == 0x000098, "Wrong size on FContractPlayerInfo");

// ScriptStruct DuneSandbox.PerceivedActor
// 0x0050 (0x0050 - 0x0000)
struct FPerceivedActor final
{
public:
	TWeakObjectPtr<class AActor>                  Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SenseSet;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEntityId                              EntityId;                                          // 0x0010(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspicionScore;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecognitionScore;                                  // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastScore;                                         // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastDetectedGameTime;                              // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerceivedActor) == 0x000008, "Wrong alignment on FPerceivedActor");
static_assert(sizeof(FPerceivedActor) == 0x000050, "Wrong size on FPerceivedActor");
static_assert(offsetof(FPerceivedActor, Instigator) == 0x000000, "Member 'FPerceivedActor::Instigator' has a wrong offset!");
static_assert(offsetof(FPerceivedActor, SenseSet) == 0x000008, "Member 'FPerceivedActor::SenseSet' has a wrong offset!");
static_assert(offsetof(FPerceivedActor, EntityId) == 0x000010, "Member 'FPerceivedActor::EntityId' has a wrong offset!");
static_assert(offsetof(FPerceivedActor, SuspicionScore) == 0x000018, "Member 'FPerceivedActor::SuspicionScore' has a wrong offset!");
static_assert(offsetof(FPerceivedActor, RecognitionScore) == 0x00001C, "Member 'FPerceivedActor::RecognitionScore' has a wrong offset!");
static_assert(offsetof(FPerceivedActor, LastScore) == 0x000030, "Member 'FPerceivedActor::LastScore' has a wrong offset!");
static_assert(offsetof(FPerceivedActor, LastDetectedGameTime) == 0x000034, "Member 'FPerceivedActor::LastDetectedGameTime' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponData
// 0x0090 (0x0090 - 0x0000)
struct FWeaponData final
{
public:
	class FText                                   m_BarrelModName;                                   // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_BarrelModDescription;                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_AmmoModName;                                     // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_AmmoModDescription;                              // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_ScopeModName;                                    // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_ScopeModDescription;                             // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponData) == 0x000008, "Wrong alignment on FWeaponData");
static_assert(sizeof(FWeaponData) == 0x000090, "Wrong size on FWeaponData");
static_assert(offsetof(FWeaponData, m_BarrelModName) == 0x000000, "Member 'FWeaponData::m_BarrelModName' has a wrong offset!");
static_assert(offsetof(FWeaponData, m_BarrelModDescription) == 0x000018, "Member 'FWeaponData::m_BarrelModDescription' has a wrong offset!");
static_assert(offsetof(FWeaponData, m_AmmoModName) == 0x000030, "Member 'FWeaponData::m_AmmoModName' has a wrong offset!");
static_assert(offsetof(FWeaponData, m_AmmoModDescription) == 0x000048, "Member 'FWeaponData::m_AmmoModDescription' has a wrong offset!");
static_assert(offsetof(FWeaponData, m_ScopeModName) == 0x000060, "Member 'FWeaponData::m_ScopeModName' has a wrong offset!");
static_assert(offsetof(FWeaponData, m_ScopeModDescription) == 0x000078, "Member 'FWeaponData::m_ScopeModDescription' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractItemStats
// 0x0048 (0x0048 - 0x0000)
struct FContractItemStats final
{
public:
	struct FUniqueID                              ContractUid;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEContractName                         ContractName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContractVersion;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ContractLocations;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FEDuneMapId>                    ContractLocationsMaps;                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 ContractConditionsProgress;                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractItemStats) == 0x000008, "Wrong alignment on FContractItemStats");
static_assert(sizeof(FContractItemStats) == 0x000048, "Wrong size on FContractItemStats");
static_assert(offsetof(FContractItemStats, ContractUid) == 0x000000, "Member 'FContractItemStats::ContractUid' has a wrong offset!");
static_assert(offsetof(FContractItemStats, ContractName) == 0x000008, "Member 'FContractItemStats::ContractName' has a wrong offset!");
static_assert(offsetof(FContractItemStats, ContractVersion) == 0x000010, "Member 'FContractItemStats::ContractVersion' has a wrong offset!");
static_assert(offsetof(FContractItemStats, ContractLocations) == 0x000018, "Member 'FContractItemStats::ContractLocations' has a wrong offset!");
static_assert(offsetof(FContractItemStats, ContractLocationsMaps) == 0x000028, "Member 'FContractItemStats::ContractLocationsMaps' has a wrong offset!");
static_assert(offsetof(FContractItemStats, ContractConditionsProgress) == 0x000038, "Member 'FContractItemStats::ContractConditionsProgress' has a wrong offset!");

// ScriptStruct DuneSandbox.BeamReplicationData
// 0x0020 (0x0020 - 0x0000)
struct FBeamReplicationData final
{
public:
	struct FVector                                EndLocation;                                       // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceTypeIndex;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBeamReplicationData) == 0x000008, "Wrong alignment on FBeamReplicationData");
static_assert(sizeof(FBeamReplicationData) == 0x000020, "Wrong size on FBeamReplicationData");
static_assert(offsetof(FBeamReplicationData, EndLocation) == 0x000000, "Member 'FBeamReplicationData::EndLocation' has a wrong offset!");
static_assert(offsetof(FBeamReplicationData, SurfaceTypeIndex) == 0x000018, "Member 'FBeamReplicationData::SurfaceTypeIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractItemTableRow
// 0x0048 (0x0058 - 0x0010)
struct FContractItemTableRow final : public FTableRowBase
{
public:
	struct FContractItemStats                     ContractItemStats;                                 // 0x0010(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractItemTableRow) == 0x000008, "Wrong alignment on FContractItemTableRow");
static_assert(sizeof(FContractItemTableRow) == 0x000058, "Wrong size on FContractItemTableRow");
static_assert(offsetof(FContractItemTableRow, ContractItemStats) == 0x000010, "Member 'FContractItemTableRow::ContractItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterNodePoint
// 0x0040 (0x0040 - 0x0000)
struct FEncounterNodePoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterNodePoint) == 0x000010, "Wrong alignment on FEncounterNodePoint");
static_assert(sizeof(FEncounterNodePoint) == 0x000040, "Wrong size on FEncounterNodePoint");
static_assert(offsetof(FEncounterNodePoint, Location) == 0x000000, "Member 'FEncounterNodePoint::Location' has a wrong offset!");
static_assert(offsetof(FEncounterNodePoint, Rotation) == 0x000020, "Member 'FEncounterNodePoint::Rotation' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractConditionSet
// 0x0010 (0x0138 - 0x0128)
struct FContractConditionSet final : public FFastArraySerializer
{
public:
	TArray<struct FContractConditionFastArrayItem> Items;                                            // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FContractConditionSet) == 0x000008, "Wrong alignment on FContractConditionSet");
static_assert(sizeof(FContractConditionSet) == 0x000138, "Wrong size on FContractConditionSet");
static_assert(offsetof(FContractConditionSet, Items) == 0x000128, "Member 'FContractConditionSet::Items' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractContentFastArrayItem
// 0x0044 (0x0050 - 0x000C)
struct FContractContentFastArrayItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ServerSpecificUid;                                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ContentLocation;                                   // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ContentTags;                                       // 0x0030(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractContentFastArrayItem) == 0x000008, "Wrong alignment on FContractContentFastArrayItem");
static_assert(sizeof(FContractContentFastArrayItem) == 0x000050, "Wrong size on FContractContentFastArrayItem");
static_assert(offsetof(FContractContentFastArrayItem, ServerSpecificUid) == 0x000010, "Member 'FContractContentFastArrayItem::ServerSpecificUid' has a wrong offset!");
static_assert(offsetof(FContractContentFastArrayItem, ContentLocation) == 0x000018, "Member 'FContractContentFastArrayItem::ContentLocation' has a wrong offset!");
static_assert(offsetof(FContractContentFastArrayItem, ContentTags) == 0x000030, "Member 'FContractContentFastArrayItem::ContentTags' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractContentFastArray
// 0x0010 (0x0138 - 0x0128)
struct FContractContentFastArray final : public FFastArraySerializer
{
public:
	TArray<struct FContractContentFastArrayItem>  Items;                                             // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FContractContentFastArray) == 0x000008, "Wrong alignment on FContractContentFastArray");
static_assert(sizeof(FContractContentFastArray) == 0x000138, "Wrong size on FContractContentFastArray");
static_assert(offsetof(FContractContentFastArray, Items) == 0x000128, "Member 'FContractContentFastArray::Items' has a wrong offset!");

// ScriptStruct DuneSandbox.MulticastSpawnImpactFXData
// 0x0130 (0x0130 - 0x0000)
struct FMulticastSpawnImpactFXData final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         ImpactFX;                                          // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADecalActor>                ImpactDecal;                                       // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           ImpactAudioEvent;                                  // 0x00F8(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ImpactSurfaceType;                                 // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShielded;                                         // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMulticastSpawnImpactFXData) == 0x000008, "Wrong alignment on FMulticastSpawnImpactFXData");
static_assert(sizeof(FMulticastSpawnImpactFXData) == 0x000130, "Wrong size on FMulticastSpawnImpactFXData");
static_assert(offsetof(FMulticastSpawnImpactFXData, HitResult) == 0x000000, "Member 'FMulticastSpawnImpactFXData::HitResult' has a wrong offset!");
static_assert(offsetof(FMulticastSpawnImpactFXData, ImpactFX) == 0x0000E8, "Member 'FMulticastSpawnImpactFXData::ImpactFX' has a wrong offset!");
static_assert(offsetof(FMulticastSpawnImpactFXData, ImpactDecal) == 0x0000F0, "Member 'FMulticastSpawnImpactFXData::ImpactDecal' has a wrong offset!");
static_assert(offsetof(FMulticastSpawnImpactFXData, ImpactAudioEvent) == 0x0000F8, "Member 'FMulticastSpawnImpactFXData::ImpactAudioEvent' has a wrong offset!");
static_assert(offsetof(FMulticastSpawnImpactFXData, ImpactSurfaceType) == 0x000128, "Member 'FMulticastSpawnImpactFXData::ImpactSurfaceType' has a wrong offset!");
static_assert(offsetof(FMulticastSpawnImpactFXData, bShielded) == 0x000129, "Member 'FMulticastSpawnImpactFXData::bShielded' has a wrong offset!");

// ScriptStruct DuneSandbox.CourierMessage
// 0x0050 (0x0050 - 0x0000)
struct FCourierMessage final
{
public:
	struct FCourierMessageRoutingInfo             RoutingInfo;                                       // 0x0000(0x0038)(NativeAccessSpecifierPublic)
	struct FCourierMessageContent                 Content;                                           // 0x0038(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCourierMessage) == 0x000008, "Wrong alignment on FCourierMessage");
static_assert(sizeof(FCourierMessage) == 0x000050, "Wrong size on FCourierMessage");
static_assert(offsetof(FCourierMessage, RoutingInfo) == 0x000000, "Member 'FCourierMessage::RoutingInfo' has a wrong offset!");
static_assert(offsetof(FCourierMessage, Content) == 0x000038, "Member 'FCourierMessage::Content' has a wrong offset!");

// ScriptStruct DuneSandbox.CraftingIngredientResponseData
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FCraftingIngredientResponseData final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingIngredientResponseData) == 0x000008, "Wrong alignment on FCraftingIngredientResponseData");
static_assert(sizeof(FCraftingIngredientResponseData) == 0x000058, "Wrong size on FCraftingIngredientResponseData");

// ScriptStruct DuneSandbox.CommuninetSandstormMapMarkerActionData
// 0x0008 (0x0018 - 0x0010)
struct FCommuninetSandstormMapMarkerActionData final : public FCommuninetActionDataBase
{
public:
	struct FEMapMarker                            m_MapMarkerType;                                   // 0x0010(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommuninetSandstormMapMarkerActionData) == 0x000008, "Wrong alignment on FCommuninetSandstormMapMarkerActionData");
static_assert(sizeof(FCommuninetSandstormMapMarkerActionData) == 0x000018, "Wrong size on FCommuninetSandstormMapMarkerActionData");
static_assert(offsetof(FCommuninetSandstormMapMarkerActionData, m_MapMarkerType) == 0x000010, "Member 'FCommuninetSandstormMapMarkerActionData::m_MapMarkerType' has a wrong offset!");

// ScriptStruct DuneSandbox.ECraftingRecipeProductionContextType
// 0x0000 (0x0008 - 0x0008)
struct FECraftingRecipeProductionContextType final : public FStringEnumValue
{
};
static_assert(alignof(FECraftingRecipeProductionContextType) == 0x000004, "Wrong alignment on FECraftingRecipeProductionContextType");
static_assert(sizeof(FECraftingRecipeProductionContextType) == 0x000008, "Wrong size on FECraftingRecipeProductionContextType");

// ScriptStruct DuneSandbox.CraftingProductionTypesRowBase
// 0x0058 (0x0068 - 0x0010)
struct FCraftingProductionTypesRowBase final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FECraftingRecipeProductionContextType  ProductionContext;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemCategoryTree*                      ItemCategoryTreeData;                              // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingProductionTypesRowBase) == 0x000008, "Wrong alignment on FCraftingProductionTypesRowBase");
static_assert(sizeof(FCraftingProductionTypesRowBase) == 0x000068, "Wrong size on FCraftingProductionTypesRowBase");
static_assert(offsetof(FCraftingProductionTypesRowBase, Name) == 0x000010, "Member 'FCraftingProductionTypesRowBase::Name' has a wrong offset!");
static_assert(offsetof(FCraftingProductionTypesRowBase, Icon) == 0x000028, "Member 'FCraftingProductionTypesRowBase::Icon' has a wrong offset!");
static_assert(offsetof(FCraftingProductionTypesRowBase, ProductionContext) == 0x000058, "Member 'FCraftingProductionTypesRowBase::ProductionContext' has a wrong offset!");
static_assert(offsetof(FCraftingProductionTypesRowBase, ItemCategoryTreeData) == 0x000060, "Member 'FCraftingProductionTypesRowBase::ItemCategoryTreeData' has a wrong offset!");

// ScriptStruct DuneSandbox.BotConfigurationDataRowBase
// 0x0078 (0x0088 - 0x0010)
struct FBotConfigurationDataRowBase final : public FTableRowBase
{
public:
	class FName                                   m_NavAgentType;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bImmortal;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_RandomizedAppearance;                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBotAutoBorderCrossingConfig           m_AutoCrossBorderConfig;                           // 0x001C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_AIControllerClass;                               // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UBehaviorTree>           m_BehaviorTreeAsset;                               // 0x0058(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FBotConfigurationDataRowBase) == 0x000008, "Wrong alignment on FBotConfigurationDataRowBase");
static_assert(sizeof(FBotConfigurationDataRowBase) == 0x000088, "Wrong size on FBotConfigurationDataRowBase");
static_assert(offsetof(FBotConfigurationDataRowBase, m_NavAgentType) == 0x000010, "Member 'FBotConfigurationDataRowBase::m_NavAgentType' has a wrong offset!");
static_assert(offsetof(FBotConfigurationDataRowBase, m_bImmortal) == 0x000018, "Member 'FBotConfigurationDataRowBase::m_bImmortal' has a wrong offset!");
static_assert(offsetof(FBotConfigurationDataRowBase, m_RandomizedAppearance) == 0x000019, "Member 'FBotConfigurationDataRowBase::m_RandomizedAppearance' has a wrong offset!");
static_assert(offsetof(FBotConfigurationDataRowBase, m_AutoCrossBorderConfig) == 0x00001C, "Member 'FBotConfigurationDataRowBase::m_AutoCrossBorderConfig' has a wrong offset!");
static_assert(offsetof(FBotConfigurationDataRowBase, m_AIControllerClass) == 0x000028, "Member 'FBotConfigurationDataRowBase::m_AIControllerClass' has a wrong offset!");
static_assert(offsetof(FBotConfigurationDataRowBase, m_BehaviorTreeAsset) == 0x000058, "Member 'FBotConfigurationDataRowBase::m_BehaviorTreeAsset' has a wrong offset!");

// ScriptStruct DuneSandbox.CustomizableAssetsRow
// 0x0010 (0x0020 - 0x0010)
struct FCustomizableAssetsRow final : public FTableRowBase
{
public:
	TArray<TSoftObjectPtr<class USkeletalMesh>>   AssetList;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableAssetsRow) == 0x000008, "Wrong alignment on FCustomizableAssetsRow");
static_assert(sizeof(FCustomizableAssetsRow) == 0x000020, "Wrong size on FCustomizableAssetsRow");
static_assert(offsetof(FCustomizableAssetsRow, AssetList) == 0x000010, "Member 'FCustomizableAssetsRow::AssetList' has a wrong offset!");

// ScriptStruct DuneSandbox.CustomizationItemStats
// 0x0010 (0x0010 - 0x0000)
struct FCustomizationItemStats final
{
public:
	TArray<class FName>                           UnlockableCustomizations;                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationItemStats) == 0x000008, "Wrong alignment on FCustomizationItemStats");
static_assert(sizeof(FCustomizationItemStats) == 0x000010, "Wrong size on FCustomizationItemStats");
static_assert(offsetof(FCustomizationItemStats, UnlockableCustomizations) == 0x000000, "Member 'FCustomizationItemStats::UnlockableCustomizations' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcCombatBehaviorSetDataRowBase
// 0x0010 (0x0020 - 0x0010)
struct FNpcCombatBehaviorSetDataRowBase final : public FTableRowBase
{
public:
	TArray<TSoftObjectPtr<class UBehaviorSet>>    m_BehaviorSets;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcCombatBehaviorSetDataRowBase) == 0x000008, "Wrong alignment on FNpcCombatBehaviorSetDataRowBase");
static_assert(sizeof(FNpcCombatBehaviorSetDataRowBase) == 0x000020, "Wrong size on FNpcCombatBehaviorSetDataRowBase");
static_assert(offsetof(FNpcCombatBehaviorSetDataRowBase, m_BehaviorSets) == 0x000010, "Member 'FNpcCombatBehaviorSetDataRowBase::m_BehaviorSets' has a wrong offset!");

// ScriptStruct DuneSandbox.CustomizationItemStatsComponent_BlueprintWrapper
// 0x0050 (0x0050 - 0x0000)
struct FCustomizationItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomizationItemStats                CustomizationItemStats;                            // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FCustomizationItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FCustomizationItemStatsComponent_BlueprintWrapper) == 0x000050, "Wrong size on FCustomizationItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FCustomizationItemStatsComponent_BlueprintWrapper, CustomizationItemStats) == 0x000040, "Member 'FCustomizationItemStatsComponent_BlueprintWrapper::CustomizationItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.CustomizationItemTableRow
// 0x0010 (0x0020 - 0x0010)
struct FCustomizationItemTableRow final : public FTableRowBase
{
public:
	struct FCustomizationItemStats                CustomizationItemStats;                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationItemTableRow) == 0x000008, "Wrong alignment on FCustomizationItemTableRow");
static_assert(sizeof(FCustomizationItemTableRow) == 0x000020, "Wrong size on FCustomizationItemTableRow");
static_assert(offsetof(FCustomizationItemTableRow, CustomizationItemStats) == 0x000010, "Member 'FCustomizationItemTableRow::CustomizationItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.CustomizationComponent_BlueprintWrapper
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FCustomizationComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomizationStats                    CustomizationStats;                                // 0x0048(0x0014)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FCustomizationComponent_BlueprintWrapper");
static_assert(sizeof(FCustomizationComponent_BlueprintWrapper) == 0x000060, "Wrong size on FCustomizationComponent_BlueprintWrapper");
static_assert(offsetof(FCustomizationComponent_BlueprintWrapper, CustomizationStats) == 0x000048, "Member 'FCustomizationComponent_BlueprintWrapper::CustomizationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.DamageInfo
// 0x0290 (0x0290 - 0x0000)
struct FDamageInfo final
{
public:
	class AController*                            m_DamagingController;                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 m_DamagingActor;                                   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x248];                                     // 0x0048(0x0248)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageInfo) == 0x000008, "Wrong alignment on FDamageInfo");
static_assert(sizeof(FDamageInfo) == 0x000290, "Wrong size on FDamageInfo");
static_assert(offsetof(FDamageInfo, m_DamagingController) == 0x000000, "Member 'FDamageInfo::m_DamagingController' has a wrong offset!");
static_assert(offsetof(FDamageInfo, m_DamagingActor) == 0x000040, "Member 'FDamageInfo::m_DamagingActor' has a wrong offset!");

// ScriptStruct DuneSandbox.DeathAndDefeatComponent
// 0x0001 (0x0001 - 0x0000)
struct FDeathAndDefeatComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeathAndDefeatComponent) == 0x000001, "Wrong alignment on FDeathAndDefeatComponent");
static_assert(sizeof(FDeathAndDefeatComponent) == 0x000001, "Wrong size on FDeathAndDefeatComponent");

// ScriptStruct DuneSandbox.DehydrationDefinitionRow
// 0x0060 (0x0070 - 0x0010)
struct FDehydrationDefinitionRow final : public FTableRowBase
{
public:
	struct FGameplayTagQuery                      DehydrationCondition;                              // 0x0010(0x0048)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DehydrationAmount;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClothingCapturedAmount;                            // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Severity;                                          // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandGainThresholdAmount;                           // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandInteractionThresholdPercentage;                // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDehydrationDefinitionRow) == 0x000008, "Wrong alignment on FDehydrationDefinitionRow");
static_assert(sizeof(FDehydrationDefinitionRow) == 0x000070, "Wrong size on FDehydrationDefinitionRow");
static_assert(offsetof(FDehydrationDefinitionRow, DehydrationCondition) == 0x000010, "Member 'FDehydrationDefinitionRow::DehydrationCondition' has a wrong offset!");
static_assert(offsetof(FDehydrationDefinitionRow, DehydrationAmount) == 0x000058, "Member 'FDehydrationDefinitionRow::DehydrationAmount' has a wrong offset!");
static_assert(offsetof(FDehydrationDefinitionRow, ClothingCapturedAmount) == 0x00005C, "Member 'FDehydrationDefinitionRow::ClothingCapturedAmount' has a wrong offset!");
static_assert(offsetof(FDehydrationDefinitionRow, Severity) == 0x000060, "Member 'FDehydrationDefinitionRow::Severity' has a wrong offset!");
static_assert(offsetof(FDehydrationDefinitionRow, HandGainThresholdAmount) == 0x000064, "Member 'FDehydrationDefinitionRow::HandGainThresholdAmount' has a wrong offset!");
static_assert(offsetof(FDehydrationDefinitionRow, HandInteractionThresholdPercentage) == 0x000068, "Member 'FDehydrationDefinitionRow::HandInteractionThresholdPercentage' has a wrong offset!");

// ScriptStruct DuneSandbox.DEOrderDurationEntry
// 0x0028 (0x0028 - 0x0000)
struct FDEOrderDurationEntry final
{
public:
	class FText                                   m_Label;                                           // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	int32                                         m_Days;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Hours;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Minutes;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Seconds;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDEOrderDurationEntry) == 0x000008, "Wrong alignment on FDEOrderDurationEntry");
static_assert(sizeof(FDEOrderDurationEntry) == 0x000028, "Wrong size on FDEOrderDurationEntry");
static_assert(offsetof(FDEOrderDurationEntry, m_Label) == 0x000000, "Member 'FDEOrderDurationEntry::m_Label' has a wrong offset!");
static_assert(offsetof(FDEOrderDurationEntry, m_Days) == 0x000018, "Member 'FDEOrderDurationEntry::m_Days' has a wrong offset!");
static_assert(offsetof(FDEOrderDurationEntry, m_Hours) == 0x00001C, "Member 'FDEOrderDurationEntry::m_Hours' has a wrong offset!");
static_assert(offsetof(FDEOrderDurationEntry, m_Minutes) == 0x000020, "Member 'FDEOrderDurationEntry::m_Minutes' has a wrong offset!");
static_assert(offsetof(FDEOrderDurationEntry, m_Seconds) == 0x000024, "Member 'FDEOrderDurationEntry::m_Seconds' has a wrong offset!");

// ScriptStruct DuneSandbox.DERecurringOrderTableRow
// 0x0010 (0x0020 - 0x0010)
struct FDERecurringOrderTableRow final : public FTableRowBase
{
public:
	TArray<struct FDERecurringOrder>              Orders;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDERecurringOrderTableRow) == 0x000008, "Wrong alignment on FDERecurringOrderTableRow");
static_assert(sizeof(FDERecurringOrderTableRow) == 0x000020, "Wrong size on FDERecurringOrderTableRow");
static_assert(offsetof(FDERecurringOrderTableRow, Orders) == 0x000010, "Member 'FDERecurringOrderTableRow::Orders' has a wrong offset!");

// ScriptStruct DuneSandbox.DestroyBuildablePieceData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FDestroyBuildablePieceData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDestroyBuildablePieceData) == 0x000008, "Wrong alignment on FDestroyBuildablePieceData");
static_assert(sizeof(FDestroyBuildablePieceData) == 0x000030, "Wrong size on FDestroyBuildablePieceData");

// ScriptStruct DuneSandbox.EFillableType
// 0x0000 (0x0008 - 0x0008)
struct FEFillableType final : public FStringEnumValue
{
};
static_assert(alignof(FEFillableType) == 0x000004, "Wrong alignment on FEFillableType");
static_assert(sizeof(FEFillableType) == 0x000008, "Wrong size on FEFillableType");

// ScriptStruct DuneSandbox.DeteriorationStatsComponent_BlueprintWrapper
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FDeteriorationStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeteriorationStats                    DeteriorationStats;                                // 0x0078(0x002C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeteriorationStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FDeteriorationStatsComponent_BlueprintWrapper");
static_assert(sizeof(FDeteriorationStatsComponent_BlueprintWrapper) == 0x0000A8, "Wrong size on FDeteriorationStatsComponent_BlueprintWrapper");
static_assert(offsetof(FDeteriorationStatsComponent_BlueprintWrapper, DeteriorationStats) == 0x000078, "Member 'FDeteriorationStatsComponent_BlueprintWrapper::DeteriorationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.DewHarvestableTypeRowBase
// 0x0010 (0x0020 - 0x0010)
struct FDewHarvestableTypeRowBase final : public FTableRowBase
{
public:
	int32                                         m_WaterAmount;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MinDew;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaxDew;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DewPresenceThreshold;                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDewHarvestableTypeRowBase) == 0x000008, "Wrong alignment on FDewHarvestableTypeRowBase");
static_assert(sizeof(FDewHarvestableTypeRowBase) == 0x000020, "Wrong size on FDewHarvestableTypeRowBase");
static_assert(offsetof(FDewHarvestableTypeRowBase, m_WaterAmount) == 0x000010, "Member 'FDewHarvestableTypeRowBase::m_WaterAmount' has a wrong offset!");
static_assert(offsetof(FDewHarvestableTypeRowBase, m_MinDew) == 0x000014, "Member 'FDewHarvestableTypeRowBase::m_MinDew' has a wrong offset!");
static_assert(offsetof(FDewHarvestableTypeRowBase, m_MaxDew) == 0x000018, "Member 'FDewHarvestableTypeRowBase::m_MaxDew' has a wrong offset!");
static_assert(offsetof(FDewHarvestableTypeRowBase, m_DewPresenceThreshold) == 0x00001C, "Member 'FDewHarvestableTypeRowBase::m_DewPresenceThreshold' has a wrong offset!");

// ScriptStruct DuneSandbox.TravelDestinationItem
// 0x0044 (0x0050 - 0x000C)
struct FTravelDestinationItem final : public FFastArraySerializerItem
{
public:
	class FName                                   TravelDestinationName;                             // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEDuneMapId                            DuneMapId;                                         // 0x0014(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTravelDestinationSlot>         Slots;                                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTravelDestinationItem) == 0x000008, "Wrong alignment on FTravelDestinationItem");
static_assert(sizeof(FTravelDestinationItem) == 0x000050, "Wrong size on FTravelDestinationItem");
static_assert(offsetof(FTravelDestinationItem, TravelDestinationName) == 0x00000C, "Member 'FTravelDestinationItem::TravelDestinationName' has a wrong offset!");
static_assert(offsetof(FTravelDestinationItem, DuneMapId) == 0x000014, "Member 'FTravelDestinationItem::DuneMapId' has a wrong offset!");
static_assert(offsetof(FTravelDestinationItem, Location) == 0x000020, "Member 'FTravelDestinationItem::Location' has a wrong offset!");
static_assert(offsetof(FTravelDestinationItem, Yaw) == 0x000038, "Member 'FTravelDestinationItem::Yaw' has a wrong offset!");
static_assert(offsetof(FTravelDestinationItem, Slots) == 0x000040, "Member 'FTravelDestinationItem::Slots' has a wrong offset!");

// ScriptStruct DuneSandbox.TravelDestinationArray
// 0x0010 (0x0138 - 0x0128)
struct FTravelDestinationArray final : public FFastArraySerializer
{
public:
	TArray<struct FTravelDestinationItem>         m_Items;                                           // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTravelDestinationArray) == 0x000008, "Wrong alignment on FTravelDestinationArray");
static_assert(sizeof(FTravelDestinationArray) == 0x000138, "Wrong size on FTravelDestinationArray");
static_assert(offsetof(FTravelDestinationArray, m_Items) == 0x000128, "Member 'FTravelDestinationArray::m_Items' has a wrong offset!");

// ScriptStruct DuneSandbox.TiledLandscapeTileClusterEntry
// 0x0080 (0x0080 - 0x0000)
struct FTiledLandscapeTileClusterEntry final
{
public:
	struct FTiledLandscapeTileWithLODs            TileData;                                          // 0x0000(0x0078)(Edit, NativeAccessSpecifierPublic)
	struct FIntPoint                              TilePositionInClusterSpace;                        // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTiledLandscapeTileClusterEntry) == 0x000008, "Wrong alignment on FTiledLandscapeTileClusterEntry");
static_assert(sizeof(FTiledLandscapeTileClusterEntry) == 0x000080, "Wrong size on FTiledLandscapeTileClusterEntry");
static_assert(offsetof(FTiledLandscapeTileClusterEntry, TileData) == 0x000000, "Member 'FTiledLandscapeTileClusterEntry::TileData' has a wrong offset!");
static_assert(offsetof(FTiledLandscapeTileClusterEntry, TilePositionInClusterSpace) == 0x000078, "Member 'FTiledLandscapeTileClusterEntry::TilePositionInClusterSpace' has a wrong offset!");

// ScriptStruct DuneSandbox.DodgeEvent
// 0x0000 (0x0030 - 0x0030)
struct FDodgeEvent final : public FGameEvent
{
};
static_assert(alignof(FDodgeEvent) == 0x000008, "Wrong alignment on FDodgeEvent");
static_assert(sizeof(FDodgeEvent) == 0x000030, "Wrong size on FDodgeEvent");

// ScriptStruct DuneSandbox.ValidateTravelResponseMessage
// 0x0020 (0x0020 - 0x0000)
struct FValidateTravelResponseMessage final
{
public:
	int32                                         ReturnDimension;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValidateTravelResponseMessage) == 0x000008, "Wrong alignment on FValidateTravelResponseMessage");
static_assert(sizeof(FValidateTravelResponseMessage) == 0x000020, "Wrong size on FValidateTravelResponseMessage");
static_assert(offsetof(FValidateTravelResponseMessage, ReturnDimension) == 0x000000, "Member 'FValidateTravelResponseMessage::ReturnDimension' has a wrong offset!");
static_assert(offsetof(FValidateTravelResponseMessage, ErrorMessage) == 0x000008, "Member 'FValidateTravelResponseMessage::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FValidateTravelResponseMessage, Success) == 0x000018, "Member 'FValidateTravelResponseMessage::Success' has a wrong offset!");

// ScriptStruct DuneSandbox.DownedCharacterComponent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FDownedCharacterComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDownedCharacterComponent) == 0x000004, "Wrong alignment on FDownedCharacterComponent");
static_assert(sizeof(FDownedCharacterComponent) == 0x000008, "Wrong size on FDownedCharacterComponent");

// ScriptStruct DuneSandbox.WorldLayoutCollection
// 0x0010 (0x0010 - 0x0000)
struct FWorldLayoutCollection final
{
public:
	TArray<struct FWorldLayoutSettings>           WorldLayoutsSettingsList;                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldLayoutCollection) == 0x000008, "Wrong alignment on FWorldLayoutCollection");
static_assert(sizeof(FWorldLayoutCollection) == 0x000010, "Wrong size on FWorldLayoutCollection");
static_assert(offsetof(FWorldLayoutCollection, WorldLayoutsSettingsList) == 0x000000, "Member 'FWorldLayoutCollection::WorldLayoutsSettingsList' has a wrong offset!");

// ScriptStruct DuneSandbox.DrawDebugLineComponent
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FDrawDebugLineComponent final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrawDebugLineComponent) == 0x000008, "Wrong alignment on FDrawDebugLineComponent");
static_assert(sizeof(FDrawDebugLineComponent) == 0x000040, "Wrong size on FDrawDebugLineComponent");

// ScriptStruct DuneSandbox.DrawDebugSphereComponent
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FDrawDebugSphereComponent final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrawDebugSphereComponent) == 0x000008, "Wrong alignment on FDrawDebugSphereComponent");
static_assert(sizeof(FDrawDebugSphereComponent) == 0x000030, "Wrong size on FDrawDebugSphereComponent");

// ScriptStruct DuneSandbox.BuildingBlueprintSerializer
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x10) FBuildingBlueprintSerializer final
{
public:
	uint8                                         Pad_0[0xD0];                                       // 0x0000(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                m_WorldContextObject;                              // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingBlueprintSerializer) == 0x000010, "Wrong alignment on FBuildingBlueprintSerializer");
static_assert(sizeof(FBuildingBlueprintSerializer) == 0x0000E0, "Wrong size on FBuildingBlueprintSerializer");
static_assert(offsetof(FBuildingBlueprintSerializer, m_WorldContextObject) == 0x0000D0, "Member 'FBuildingBlueprintSerializer::m_WorldContextObject' has a wrong offset!");

// ScriptStruct DuneSandbox.DrawDebugCapsuleProperties
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FDrawDebugCapsuleProperties final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrawDebugCapsuleProperties) == 0x000008, "Wrong alignment on FDrawDebugCapsuleProperties");
static_assert(sizeof(FDrawDebugCapsuleProperties) == 0x000048, "Wrong size on FDrawDebugCapsuleProperties");

// ScriptStruct DuneSandbox.AbilityQueueData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FAbilityQueueData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityQueueData) == 0x000010, "Wrong alignment on FAbilityQueueData");
static_assert(sizeof(FAbilityQueueData) == 0x000050, "Wrong size on FAbilityQueueData");

// ScriptStruct DuneSandbox.DuneEditorVisSphere
// 0x0020 (0x0020 - 0x0000)
struct FDuneEditorVisSphere final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneEditorVisSphere) == 0x000008, "Wrong alignment on FDuneEditorVisSphere");
static_assert(sizeof(FDuneEditorVisSphere) == 0x000020, "Wrong size on FDuneEditorVisSphere");
static_assert(offsetof(FDuneEditorVisSphere, Location) == 0x000000, "Member 'FDuneEditorVisSphere::Location' has a wrong offset!");
static_assert(offsetof(FDuneEditorVisSphere, Radius) == 0x000018, "Member 'FDuneEditorVisSphere::Radius' has a wrong offset!");
static_assert(offsetof(FDuneEditorVisSphere, Color) == 0x00001C, "Member 'FDuneEditorVisSphere::Color' has a wrong offset!");

// ScriptStruct DuneSandbox.AbilityQueueInputData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FAbilityQueueInputData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityQueueInputData) == 0x000008, "Wrong alignment on FAbilityQueueInputData");
static_assert(sizeof(FAbilityQueueInputData) == 0x000018, "Wrong size on FAbilityQueueInputData");

// ScriptStruct DuneSandbox.DuneUserPrivileges
// 0x0018 (0x0018 - 0x0000)
struct FDuneUserPrivileges final
{
public:
	uint8                                         m_UserPrivilegeState;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         m_AllowedCommands;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneUserPrivileges) == 0x000008, "Wrong alignment on FDuneUserPrivileges");
static_assert(sizeof(FDuneUserPrivileges) == 0x000018, "Wrong size on FDuneUserPrivileges");
static_assert(offsetof(FDuneUserPrivileges, m_UserPrivilegeState) == 0x000000, "Member 'FDuneUserPrivileges::m_UserPrivilegeState' has a wrong offset!");
static_assert(offsetof(FDuneUserPrivileges, m_AllowedCommands) == 0x000008, "Member 'FDuneUserPrivileges::m_AllowedCommands' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneCameraContext
// 0x0060 (0x0060 - 0x0000)
struct FDuneCameraContext final
{
public:
	EDuneSpringArmModifierOperator                TargetOffsetModifierOperator;                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetOffsetModifier;                              // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOffsetModifySpeed;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDuneSpringArmModifierOperator                SocketOffsetModifierOperator;                      // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SocketOffsetModifier;                              // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SocketOffsetModifySpeed;                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDuneSpringArmModifierOperator                SpringArmLengthModifierOperator;                   // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpringArmLengthModifier;                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmLengthModifySpeed;                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDuneSpringArmModifierOperator                FOVModifierOperator;                               // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOVModifier;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVModifySpeed;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneCameraContext) == 0x000008, "Wrong alignment on FDuneCameraContext");
static_assert(sizeof(FDuneCameraContext) == 0x000060, "Wrong size on FDuneCameraContext");
static_assert(offsetof(FDuneCameraContext, TargetOffsetModifierOperator) == 0x000000, "Member 'FDuneCameraContext::TargetOffsetModifierOperator' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, TargetOffsetModifier) == 0x000008, "Member 'FDuneCameraContext::TargetOffsetModifier' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, TargetOffsetModifySpeed) == 0x000020, "Member 'FDuneCameraContext::TargetOffsetModifySpeed' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, SocketOffsetModifierOperator) == 0x000024, "Member 'FDuneCameraContext::SocketOffsetModifierOperator' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, SocketOffsetModifier) == 0x000028, "Member 'FDuneCameraContext::SocketOffsetModifier' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, SocketOffsetModifySpeed) == 0x000040, "Member 'FDuneCameraContext::SocketOffsetModifySpeed' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, SpringArmLengthModifierOperator) == 0x000044, "Member 'FDuneCameraContext::SpringArmLengthModifierOperator' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, SpringArmLengthModifier) == 0x000048, "Member 'FDuneCameraContext::SpringArmLengthModifier' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, SpringArmLengthModifySpeed) == 0x00004C, "Member 'FDuneCameraContext::SpringArmLengthModifySpeed' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, FOVModifierOperator) == 0x000050, "Member 'FDuneCameraContext::FOVModifierOperator' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, FOVModifier) == 0x000054, "Member 'FDuneCameraContext::FOVModifier' has a wrong offset!");
static_assert(offsetof(FDuneCameraContext, FOVModifySpeed) == 0x000058, "Member 'FDuneCameraContext::FOVModifySpeed' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneCameraLagSettings
// 0x0040 (0x0040 - 0x0000)
struct FDuneCameraLagSettings final
{
public:
	class FName                                   SettingsId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraLag;                                  // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PerAxisCameraLagSpeed;                             // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistance;                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraRotationLag;                          // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraRotationLagSpeed;                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeedCameraLagSpeed;                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeedCameraLagMaxDistance;                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeedCameraRotationLagSpeed;                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneCameraLagSettings) == 0x000008, "Wrong alignment on FDuneCameraLagSettings");
static_assert(sizeof(FDuneCameraLagSettings) == 0x000040, "Wrong size on FDuneCameraLagSettings");
static_assert(offsetof(FDuneCameraLagSettings, SettingsId) == 0x000000, "Member 'FDuneCameraLagSettings::SettingsId' has a wrong offset!");
static_assert(offsetof(FDuneCameraLagSettings, Priority) == 0x000008, "Member 'FDuneCameraLagSettings::Priority' has a wrong offset!");
static_assert(offsetof(FDuneCameraLagSettings, bEnableCameraLag) == 0x000009, "Member 'FDuneCameraLagSettings::bEnableCameraLag' has a wrong offset!");
static_assert(offsetof(FDuneCameraLagSettings, PerAxisCameraLagSpeed) == 0x000010, "Member 'FDuneCameraLagSettings::PerAxisCameraLagSpeed' has a wrong offset!");
static_assert(offsetof(FDuneCameraLagSettings, CameraLagMaxDistance) == 0x000028, "Member 'FDuneCameraLagSettings::CameraLagMaxDistance' has a wrong offset!");
static_assert(offsetof(FDuneCameraLagSettings, bEnableCameraRotationLag) == 0x00002C, "Member 'FDuneCameraLagSettings::bEnableCameraRotationLag' has a wrong offset!");
static_assert(offsetof(FDuneCameraLagSettings, CameraRotationLagSpeed) == 0x000030, "Member 'FDuneCameraLagSettings::CameraRotationLagSpeed' has a wrong offset!");
static_assert(offsetof(FDuneCameraLagSettings, InterpSpeedCameraLagSpeed) == 0x000034, "Member 'FDuneCameraLagSettings::InterpSpeedCameraLagSpeed' has a wrong offset!");
static_assert(offsetof(FDuneCameraLagSettings, InterpSpeedCameraLagMaxDistance) == 0x000038, "Member 'FDuneCameraLagSettings::InterpSpeedCameraLagMaxDistance' has a wrong offset!");
static_assert(offsetof(FDuneCameraLagSettings, InterpSpeedCameraRotationLagSpeed) == 0x00003C, "Member 'FDuneCameraLagSettings::InterpSpeedCameraRotationLagSpeed' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneCameraVehicleRoleTags
// 0x0018 (0x0018 - 0x0000)
struct FDuneCameraVehicleRoleTags final
{
public:
	struct FGameplayTag                           m_VehicleRoleTag_Seated;                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_VehicleRoleTag_Equipped;                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_VehicleRoleTag_ADS;                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneCameraVehicleRoleTags) == 0x000004, "Wrong alignment on FDuneCameraVehicleRoleTags");
static_assert(sizeof(FDuneCameraVehicleRoleTags) == 0x000018, "Wrong size on FDuneCameraVehicleRoleTags");
static_assert(offsetof(FDuneCameraVehicleRoleTags, m_VehicleRoleTag_Seated) == 0x000000, "Member 'FDuneCameraVehicleRoleTags::m_VehicleRoleTag_Seated' has a wrong offset!");
static_assert(offsetof(FDuneCameraVehicleRoleTags, m_VehicleRoleTag_Equipped) == 0x000008, "Member 'FDuneCameraVehicleRoleTags::m_VehicleRoleTag_Equipped' has a wrong offset!");
static_assert(offsetof(FDuneCameraVehicleRoleTags, m_VehicleRoleTag_ADS) == 0x000010, "Member 'FDuneCameraVehicleRoleTags::m_VehicleRoleTag_ADS' has a wrong offset!");

// ScriptStruct DuneSandbox.CraftingIngredientAllocatedItem
// 0x0010 (0x0010 - 0x0000)
struct FCraftingIngredientAllocatedItem final
{
public:
	struct FUniqueID                              ItemUniqueId;                                      // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingIngredientAllocatedItem) == 0x000008, "Wrong alignment on FCraftingIngredientAllocatedItem");
static_assert(sizeof(FCraftingIngredientAllocatedItem) == 0x000010, "Wrong size on FCraftingIngredientAllocatedItem");
static_assert(offsetof(FCraftingIngredientAllocatedItem, ItemUniqueId) == 0x000000, "Member 'FCraftingIngredientAllocatedItem::ItemUniqueId' has a wrong offset!");
static_assert(offsetof(FCraftingIngredientAllocatedItem, ItemAmount) == 0x000008, "Member 'FCraftingIngredientAllocatedItem::ItemAmount' has a wrong offset!");

// ScriptStruct DuneSandbox.CraftingIngredientItemAllocNode
// 0x0020 (0x0020 - 0x0000)
struct FCraftingIngredientItemAllocNode final
{
public:
	struct FEItemTemplateID                       ItemTemplateId;                                    // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestedTotalAmount;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCraftingIngredientAllocatedItem> AllocatedItems;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingIngredientItemAllocNode) == 0x000008, "Wrong alignment on FCraftingIngredientItemAllocNode");
static_assert(sizeof(FCraftingIngredientItemAllocNode) == 0x000020, "Wrong size on FCraftingIngredientItemAllocNode");
static_assert(offsetof(FCraftingIngredientItemAllocNode, ItemTemplateId) == 0x000000, "Member 'FCraftingIngredientItemAllocNode::ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FCraftingIngredientItemAllocNode, RequestedTotalAmount) == 0x000008, "Member 'FCraftingIngredientItemAllocNode::RequestedTotalAmount' has a wrong offset!");
static_assert(offsetof(FCraftingIngredientItemAllocNode, AllocatedItems) == 0x000010, "Member 'FCraftingIngredientItemAllocNode::AllocatedItems' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneCameraContextRowBase
// 0x1720 (0x1730 - 0x0010)
struct FDuneCameraContextRowBase final : public FTableRowBase
{
public:
	EDuneCameraContextState                       ContextState;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ActiveInState;                                     // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplySubStateCameraClamps;                        // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraClamps                          CameraClamps;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnablePitchCurves;                                // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPitchCurves                           PitchCurves;                                       // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsSubStateContext;                                // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ActiveInSubState;                                  // 0x006C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyRegardlessOfMainState;                       // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   ValidInStates;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EDuneCameraContexMode                         CameraContexMode;                                  // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartingPhaseDuration;                             // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDuneCameraContext                     StartingPhaseSettings;                             // 0x0090(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDuneCameraContextPostProcessing       StartingPhasePostProcessing;                       // 0x00F0(0x0700)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDuneCameraContext                     RunningPhaseSettings;                              // 0x07F0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDuneCameraContextPostProcessing       RunningPhasePostProcessing;                        // 0x0850(0x0700)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         RemovingPhaseDuration;                             // 0x0F50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F54[0x4];                                      // 0x0F54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDuneCameraContext                     RemovingPhaseSettings;                             // 0x0F58(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB8[0x8];                                      // 0x0FB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDuneCameraContextPostProcessing       RemovingPhasePostProcessing;                       // 0x0FC0(0x0700)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraLagSettings;                          // 0x16C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C1[0x7];                                     // 0x16C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDuneCameraLagSettings                 CameraLagSettings;                                 // 0x16C8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UDuneCameraModifier>> AdditionalCameraModifiers;                        // 0x1708(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UCameraShakeBase>>   CameraShakes;                                      // 0x1718(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bCanCameraShakeBeInterrupted;                      // 0x1728(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1729[0x7];                                     // 0x1729(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneCameraContextRowBase) == 0x000010, "Wrong alignment on FDuneCameraContextRowBase");
static_assert(sizeof(FDuneCameraContextRowBase) == 0x001730, "Wrong size on FDuneCameraContextRowBase");
static_assert(offsetof(FDuneCameraContextRowBase, ContextState) == 0x000010, "Member 'FDuneCameraContextRowBase::ContextState' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, ActiveInState) == 0x000014, "Member 'FDuneCameraContextRowBase::ActiveInState' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, bApplySubStateCameraClamps) == 0x00001C, "Member 'FDuneCameraContextRowBase::bApplySubStateCameraClamps' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, CameraClamps) == 0x000020, "Member 'FDuneCameraContextRowBase::CameraClamps' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, bEnablePitchCurves) == 0x000038, "Member 'FDuneCameraContextRowBase::bEnablePitchCurves' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, PitchCurves) == 0x000040, "Member 'FDuneCameraContextRowBase::PitchCurves' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, bIsSubStateContext) == 0x000068, "Member 'FDuneCameraContextRowBase::bIsSubStateContext' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, ActiveInSubState) == 0x00006C, "Member 'FDuneCameraContextRowBase::ActiveInSubState' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, bApplyRegardlessOfMainState) == 0x000074, "Member 'FDuneCameraContextRowBase::bApplyRegardlessOfMainState' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, ValidInStates) == 0x000078, "Member 'FDuneCameraContextRowBase::ValidInStates' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, CameraContexMode) == 0x000088, "Member 'FDuneCameraContextRowBase::CameraContexMode' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, Priority) == 0x000089, "Member 'FDuneCameraContextRowBase::Priority' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, StartingPhaseDuration) == 0x00008C, "Member 'FDuneCameraContextRowBase::StartingPhaseDuration' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, StartingPhaseSettings) == 0x000090, "Member 'FDuneCameraContextRowBase::StartingPhaseSettings' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, StartingPhasePostProcessing) == 0x0000F0, "Member 'FDuneCameraContextRowBase::StartingPhasePostProcessing' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, RunningPhaseSettings) == 0x0007F0, "Member 'FDuneCameraContextRowBase::RunningPhaseSettings' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, RunningPhasePostProcessing) == 0x000850, "Member 'FDuneCameraContextRowBase::RunningPhasePostProcessing' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, RemovingPhaseDuration) == 0x000F50, "Member 'FDuneCameraContextRowBase::RemovingPhaseDuration' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, RemovingPhaseSettings) == 0x000F58, "Member 'FDuneCameraContextRowBase::RemovingPhaseSettings' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, RemovingPhasePostProcessing) == 0x000FC0, "Member 'FDuneCameraContextRowBase::RemovingPhasePostProcessing' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, bEnableCameraLagSettings) == 0x0016C0, "Member 'FDuneCameraContextRowBase::bEnableCameraLagSettings' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, CameraLagSettings) == 0x0016C8, "Member 'FDuneCameraContextRowBase::CameraLagSettings' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, AdditionalCameraModifiers) == 0x001708, "Member 'FDuneCameraContextRowBase::AdditionalCameraModifiers' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, CameraShakes) == 0x001718, "Member 'FDuneCameraContextRowBase::CameraShakes' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextRowBase, bCanCameraShakeBeInterrupted) == 0x001728, "Member 'FDuneCameraContextRowBase::bCanCameraShakeBeInterrupted' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneCameraContextVehicleRowBase
// 0x0820 (0x0830 - 0x0010)
struct FDuneCameraContextVehicleRowBase final : public FTableRowBase
{
public:
	struct FGameplayTag                           RequiredTag;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableContext;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDuneCameraContexMode                         CameraContexMode;                                  // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraClamps                          CameraClamps;                                      // 0x001C(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnablePitchCurves;                                // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPitchCurves                           PitchCurves;                                       // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDuneCameraContext                     Settings;                                          // 0x0060(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDuneCameraContextPostProcessing       PostProcessing;                                    // 0x00C0(0x0700)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraLagSettings;                          // 0x07C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C1[0x7];                                      // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDuneCameraLagSettings                 CameraLagSettings;                                 // 0x07C8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UDuneCameraModifier>> AdditionalCameraModifiers;                        // 0x0808(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UCameraShakeBase>>   CameraShakes;                                      // 0x0818(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_828[0x8];                                      // 0x0828(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneCameraContextVehicleRowBase) == 0x000010, "Wrong alignment on FDuneCameraContextVehicleRowBase");
static_assert(sizeof(FDuneCameraContextVehicleRowBase) == 0x000830, "Wrong size on FDuneCameraContextVehicleRowBase");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, RequiredTag) == 0x000010, "Member 'FDuneCameraContextVehicleRowBase::RequiredTag' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, bDisableContext) == 0x000018, "Member 'FDuneCameraContextVehicleRowBase::bDisableContext' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, Priority) == 0x000019, "Member 'FDuneCameraContextVehicleRowBase::Priority' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, CameraContexMode) == 0x00001A, "Member 'FDuneCameraContextVehicleRowBase::CameraContexMode' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, CameraClamps) == 0x00001C, "Member 'FDuneCameraContextVehicleRowBase::CameraClamps' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, bEnablePitchCurves) == 0x000034, "Member 'FDuneCameraContextVehicleRowBase::bEnablePitchCurves' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, PitchCurves) == 0x000038, "Member 'FDuneCameraContextVehicleRowBase::PitchCurves' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, Settings) == 0x000060, "Member 'FDuneCameraContextVehicleRowBase::Settings' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, PostProcessing) == 0x0000C0, "Member 'FDuneCameraContextVehicleRowBase::PostProcessing' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, bEnableCameraLagSettings) == 0x0007C0, "Member 'FDuneCameraContextVehicleRowBase::bEnableCameraLagSettings' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, CameraLagSettings) == 0x0007C8, "Member 'FDuneCameraContextVehicleRowBase::CameraLagSettings' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, AdditionalCameraModifiers) == 0x000808, "Member 'FDuneCameraContextVehicleRowBase::AdditionalCameraModifiers' has a wrong offset!");
static_assert(offsetof(FDuneCameraContextVehicleRowBase, CameraShakes) == 0x000818, "Member 'FDuneCameraContextVehicleRowBase::CameraShakes' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneExchangeExpiredOrder
// 0x0020 (0x0020 - 0x0000)
struct FDuneExchangeExpiredOrder final
{
public:
	struct FDuneExchangeOrderId                   OrderId;                                           // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FUniqueID                              OwnerId;                                           // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDEOrderCompletionType                        CompletionType;                                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ItemPrice;                                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneExchangeExpiredOrder) == 0x000008, "Wrong alignment on FDuneExchangeExpiredOrder");
static_assert(sizeof(FDuneExchangeExpiredOrder) == 0x000020, "Wrong size on FDuneExchangeExpiredOrder");
static_assert(offsetof(FDuneExchangeExpiredOrder, OrderId) == 0x000000, "Member 'FDuneExchangeExpiredOrder::OrderId' has a wrong offset!");
static_assert(offsetof(FDuneExchangeExpiredOrder, OwnerId) == 0x000008, "Member 'FDuneExchangeExpiredOrder::OwnerId' has a wrong offset!");
static_assert(offsetof(FDuneExchangeExpiredOrder, CompletionType) == 0x000010, "Member 'FDuneExchangeExpiredOrder::CompletionType' has a wrong offset!");
static_assert(offsetof(FDuneExchangeExpiredOrder, Count) == 0x000014, "Member 'FDuneExchangeExpiredOrder::Count' has a wrong offset!");
static_assert(offsetof(FDuneExchangeExpiredOrder, ItemPrice) == 0x000018, "Member 'FDuneExchangeExpiredOrder::ItemPrice' has a wrong offset!");

// ScriptStruct DuneSandbox.MapFeaturesEntry
// 0x0009 (0x0009 - 0x0000)
struct FMapFeaturesEntry final
{
public:
	bool                                          m_Surveying;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_FogOfWar;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_Taxation;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_SocialOnly;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_DeepDesertGameplay;                              // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_Visitable;                                       // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ShiftingSands;                                   // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShareMapMarkersAcrossDimensions;                // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanBlockAuthorityTransfer;                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapFeaturesEntry) == 0x000001, "Wrong alignment on FMapFeaturesEntry");
static_assert(sizeof(FMapFeaturesEntry) == 0x000009, "Wrong size on FMapFeaturesEntry");
static_assert(offsetof(FMapFeaturesEntry, m_Surveying) == 0x000000, "Member 'FMapFeaturesEntry::m_Surveying' has a wrong offset!");
static_assert(offsetof(FMapFeaturesEntry, m_FogOfWar) == 0x000001, "Member 'FMapFeaturesEntry::m_FogOfWar' has a wrong offset!");
static_assert(offsetof(FMapFeaturesEntry, m_Taxation) == 0x000002, "Member 'FMapFeaturesEntry::m_Taxation' has a wrong offset!");
static_assert(offsetof(FMapFeaturesEntry, m_SocialOnly) == 0x000003, "Member 'FMapFeaturesEntry::m_SocialOnly' has a wrong offset!");
static_assert(offsetof(FMapFeaturesEntry, m_DeepDesertGameplay) == 0x000004, "Member 'FMapFeaturesEntry::m_DeepDesertGameplay' has a wrong offset!");
static_assert(offsetof(FMapFeaturesEntry, m_Visitable) == 0x000005, "Member 'FMapFeaturesEntry::m_Visitable' has a wrong offset!");
static_assert(offsetof(FMapFeaturesEntry, m_ShiftingSands) == 0x000006, "Member 'FMapFeaturesEntry::m_ShiftingSands' has a wrong offset!");
static_assert(offsetof(FMapFeaturesEntry, m_bShareMapMarkersAcrossDimensions) == 0x000007, "Member 'FMapFeaturesEntry::m_bShareMapMarkersAcrossDimensions' has a wrong offset!");
static_assert(offsetof(FMapFeaturesEntry, m_bCanBlockAuthorityTransfer) == 0x000008, "Member 'FMapFeaturesEntry::m_bCanBlockAuthorityTransfer' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneNiagaraVFXData
// 0x0048 (0x0048 - 0x0000)
struct FDuneNiagaraVFXData final
{
public:
	TSoftObjectPtr<class UNiagaraSystem>          NiagaraTemplateAsset;                              // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraTemplatePtr;                                // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0038(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachToSocket;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneNiagaraVFXData) == 0x000008, "Wrong alignment on FDuneNiagaraVFXData");
static_assert(sizeof(FDuneNiagaraVFXData) == 0x000048, "Wrong size on FDuneNiagaraVFXData");
static_assert(offsetof(FDuneNiagaraVFXData, NiagaraTemplateAsset) == 0x000000, "Member 'FDuneNiagaraVFXData::NiagaraTemplateAsset' has a wrong offset!");
static_assert(offsetof(FDuneNiagaraVFXData, NiagaraTemplatePtr) == 0x000030, "Member 'FDuneNiagaraVFXData::NiagaraTemplatePtr' has a wrong offset!");
static_assert(offsetof(FDuneNiagaraVFXData, NiagaraComponent) == 0x000038, "Member 'FDuneNiagaraVFXData::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(FDuneNiagaraVFXData, AttachToSocket) == 0x000040, "Member 'FDuneNiagaraVFXData::AttachToSocket' has a wrong offset!");

// ScriptStruct DuneSandbox.AbilityEventData
// 0x0018 (0x0048 - 0x0030)
struct FAbilityEventData final : public FGameEvent
{
public:
	EAbilityEventType                             m_EventType;                                       // 0x0030(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneGameplayAbility>       m_Ability;                                         // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_Unlock;                                          // 0x0040(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityEventData) == 0x000008, "Wrong alignment on FAbilityEventData");
static_assert(sizeof(FAbilityEventData) == 0x000048, "Wrong size on FAbilityEventData");
static_assert(offsetof(FAbilityEventData, m_EventType) == 0x000030, "Member 'FAbilityEventData::m_EventType' has a wrong offset!");
static_assert(offsetof(FAbilityEventData, m_Ability) == 0x000038, "Member 'FAbilityEventData::m_Ability' has a wrong offset!");
static_assert(offsetof(FAbilityEventData, m_Unlock) == 0x000040, "Member 'FAbilityEventData::m_Unlock' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneVehicleSpawnerVehicleTypeConfig
// 0x0018 (0x0018 - 0x0000)
struct FDuneVehicleSpawnerVehicleTypeConfig final
{
public:
	class FName                                   m_VehicleName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_TemplateName;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADuneVehicle>               m_VehicleClass;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneVehicleSpawnerVehicleTypeConfig) == 0x000008, "Wrong alignment on FDuneVehicleSpawnerVehicleTypeConfig");
static_assert(sizeof(FDuneVehicleSpawnerVehicleTypeConfig) == 0x000018, "Wrong size on FDuneVehicleSpawnerVehicleTypeConfig");
static_assert(offsetof(FDuneVehicleSpawnerVehicleTypeConfig, m_VehicleName) == 0x000000, "Member 'FDuneVehicleSpawnerVehicleTypeConfig::m_VehicleName' has a wrong offset!");
static_assert(offsetof(FDuneVehicleSpawnerVehicleTypeConfig, m_TemplateName) == 0x000008, "Member 'FDuneVehicleSpawnerVehicleTypeConfig::m_TemplateName' has a wrong offset!");
static_assert(offsetof(FDuneVehicleSpawnerVehicleTypeConfig, m_VehicleClass) == 0x000010, "Member 'FDuneVehicleSpawnerVehicleTypeConfig::m_VehicleClass' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneVoiceSetActionType
// 0x0050 (0x0050 - 0x0000)
struct FDuneVoiceSetActionType final
{
public:
	TMap<EDuneVoiceSetAction, class FName>        Map;                                               // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneVoiceSetActionType) == 0x000008, "Wrong alignment on FDuneVoiceSetActionType");
static_assert(sizeof(FDuneVoiceSetActionType) == 0x000050, "Wrong size on FDuneVoiceSetActionType");
static_assert(offsetof(FDuneVoiceSetActionType, Map) == 0x000000, "Member 'FDuneVoiceSetActionType::Map' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneVoiceSetGender
// 0x0010 (0x0010 - 0x0000)
struct FDuneVoiceSetGender final
{
public:
	TArray<struct FDuneVoiceSetVariation>         Variations;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneVoiceSetGender) == 0x000008, "Wrong alignment on FDuneVoiceSetGender");
static_assert(sizeof(FDuneVoiceSetGender) == 0x000010, "Wrong size on FDuneVoiceSetGender");
static_assert(offsetof(FDuneVoiceSetGender, Variations) == 0x000000, "Member 'FDuneVoiceSetGender::Variations' has a wrong offset!");

// ScriptStruct DuneSandbox.AudioThreatDamageEvent
// 0x0018 (0x0018 - 0x0000)
struct FAudioThreatDamageEvent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneDamageType>            DamageType;                                        // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioThreatDamageEvent) == 0x000008, "Wrong alignment on FAudioThreatDamageEvent");
static_assert(sizeof(FAudioThreatDamageEvent) == 0x000018, "Wrong size on FAudioThreatDamageEvent");
static_assert(offsetof(FAudioThreatDamageEvent, DamageType) == 0x000010, "Member 'FAudioThreatDamageEvent::DamageType' has a wrong offset!");

// ScriptStruct DuneSandbox.EconomyRewardsTableRow
// 0x0010 (0x0020 - 0x0010)
struct FEconomyRewardsTableRow final : public FTableRowBase
{
public:
	TArray<struct FEItemTemplateID>               m_RewardItemTemplateIds;                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRewardsTableRow) == 0x000008, "Wrong alignment on FEconomyRewardsTableRow");
static_assert(sizeof(FEconomyRewardsTableRow) == 0x000020, "Wrong size on FEconomyRewardsTableRow");
static_assert(offsetof(FEconomyRewardsTableRow, m_RewardItemTemplateIds) == 0x000010, "Member 'FEconomyRewardsTableRow::m_RewardItemTemplateIds' has a wrong offset!");

// ScriptStruct DuneSandbox.SurveyReportItemTarget
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FSurveyReportItemTarget final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSurveyReportItemTarget) == 0x000004, "Wrong alignment on FSurveyReportItemTarget");
static_assert(sizeof(FSurveyReportItemTarget) == 0x000010, "Wrong size on FSurveyReportItemTarget");

// ScriptStruct DuneSandbox.SurveyReportItem
// 0x0028 (0x0028 - 0x0000)
struct FSurveyReportItem final
{
public:
	int32                                         m_Amount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Discovered;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarkerId>                      m_ServerDiscovered;                                // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         m_Maximum;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEMapMarker                            m_MarkerType;                                      // 0x001C(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSurveyReportItem) == 0x000008, "Wrong alignment on FSurveyReportItem");
static_assert(sizeof(FSurveyReportItem) == 0x000028, "Wrong size on FSurveyReportItem");
static_assert(offsetof(FSurveyReportItem, m_Amount) == 0x000000, "Member 'FSurveyReportItem::m_Amount' has a wrong offset!");
static_assert(offsetof(FSurveyReportItem, m_Discovered) == 0x000004, "Member 'FSurveyReportItem::m_Discovered' has a wrong offset!");
static_assert(offsetof(FSurveyReportItem, m_ServerDiscovered) == 0x000008, "Member 'FSurveyReportItem::m_ServerDiscovered' has a wrong offset!");
static_assert(offsetof(FSurveyReportItem, m_Maximum) == 0x000018, "Member 'FSurveyReportItem::m_Maximum' has a wrong offset!");
static_assert(offsetof(FSurveyReportItem, m_MarkerType) == 0x00001C, "Member 'FSurveyReportItem::m_MarkerType' has a wrong offset!");

// ScriptStruct DuneSandbox.SurveyReportData
// 0x0104 (0x0110 - 0x000C)
struct FSurveyReportData final : public FFastArraySerializerItem
{
public:
	struct FMapAreaId                             m_ReportAreaId;                                    // 0x000C(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSurveyReportItem>              m_SurveyedItemsProgress;                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSurveyReportItemTarget>        m_SurveyedItemsTarget;                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_bFullSurvey;                                     // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarkerId                              m_SurveyPointMarkerId;                             // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurveyReportQuantityCategory                 m_SpiceYieldQuantity;                              // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USurveyingComponent>     m_OwningSurveyComponent;                           // 0x0040(0x0030)(BlueprintVisible, ExportObject, BlueprintReadOnly, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0xA0];                                      // 0x0070(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSurveyReportData) == 0x000008, "Wrong alignment on FSurveyReportData");
static_assert(sizeof(FSurveyReportData) == 0x000110, "Wrong size on FSurveyReportData");
static_assert(offsetof(FSurveyReportData, m_ReportAreaId) == 0x00000C, "Member 'FSurveyReportData::m_ReportAreaId' has a wrong offset!");
static_assert(offsetof(FSurveyReportData, m_SurveyedItemsProgress) == 0x000010, "Member 'FSurveyReportData::m_SurveyedItemsProgress' has a wrong offset!");
static_assert(offsetof(FSurveyReportData, m_SurveyedItemsTarget) == 0x000020, "Member 'FSurveyReportData::m_SurveyedItemsTarget' has a wrong offset!");
static_assert(offsetof(FSurveyReportData, m_bFullSurvey) == 0x000030, "Member 'FSurveyReportData::m_bFullSurvey' has a wrong offset!");
static_assert(offsetof(FSurveyReportData, m_SurveyPointMarkerId) == 0x000034, "Member 'FSurveyReportData::m_SurveyPointMarkerId' has a wrong offset!");
static_assert(offsetof(FSurveyReportData, m_SpiceYieldQuantity) == 0x000038, "Member 'FSurveyReportData::m_SpiceYieldQuantity' has a wrong offset!");
static_assert(offsetof(FSurveyReportData, m_OwningSurveyComponent) == 0x000040, "Member 'FSurveyReportData::m_OwningSurveyComponent' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterInstigatorComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEncounterInstigatorComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterInstigatorComponent) == 0x000008, "Wrong alignment on FEncounterInstigatorComponent");
static_assert(sizeof(FEncounterInstigatorComponent) == 0x000010, "Wrong size on FEncounterInstigatorComponent");

// ScriptStruct DuneSandbox.ColorParameterData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FColorParameterData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColorParameterData) == 0x000008, "Wrong alignment on FColorParameterData");
static_assert(sizeof(FColorParameterData) == 0x000020, "Wrong size on FColorParameterData");

// ScriptStruct DuneSandbox.EEncounterName
// 0x0000 (0x0008 - 0x0008)
struct FEEncounterName final : public FStringEnumValue
{
};
static_assert(alignof(FEEncounterName) == 0x000004, "Wrong alignment on FEEncounterName");
static_assert(sizeof(FEEncounterName) == 0x000008, "Wrong size on FEEncounterName");

// ScriptStruct DuneSandbox.EncounterLocationTemplate
// 0x00B0 (0x00B0 - 0x0000)
struct FEncounterLocationTemplate final
{
public:
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEEncounterName                        SupportedName;                                     // 0x0030(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SupportedTags;                                     // 0x0038(0x0048)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterArea                         SupportedArea;                                     // 0x0080(0x0030)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterLocationTemplate) == 0x000008, "Wrong alignment on FEncounterLocationTemplate");
static_assert(sizeof(FEncounterLocationTemplate) == 0x0000B0, "Wrong size on FEncounterLocationTemplate");
static_assert(offsetof(FEncounterLocationTemplate, Class) == 0x000000, "Member 'FEncounterLocationTemplate::Class' has a wrong offset!");
static_assert(offsetof(FEncounterLocationTemplate, SupportedName) == 0x000030, "Member 'FEncounterLocationTemplate::SupportedName' has a wrong offset!");
static_assert(offsetof(FEncounterLocationTemplate, SupportedTags) == 0x000038, "Member 'FEncounterLocationTemplate::SupportedTags' has a wrong offset!");
static_assert(offsetof(FEncounterLocationTemplate, SupportedArea) == 0x000080, "Member 'FEncounterLocationTemplate::SupportedArea' has a wrong offset!");

// ScriptStruct DuneSandbox.AccessCodeData
// 0x0008 (0x0014 - 0x000C)
struct FAccessCodeData final : public FFastArraySerializerItem
{
public:
	uint32                                        m_AccessCode;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccessCodeType                               m_AccessCodeType;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccessCodeData) == 0x000004, "Wrong alignment on FAccessCodeData");
static_assert(sizeof(FAccessCodeData) == 0x000014, "Wrong size on FAccessCodeData");
static_assert(offsetof(FAccessCodeData, m_AccessCode) == 0x00000C, "Member 'FAccessCodeData::m_AccessCode' has a wrong offset!");
static_assert(offsetof(FAccessCodeData, m_AccessCodeType) == 0x000010, "Member 'FAccessCodeData::m_AccessCodeType' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcWeaponStats
// 0x0008 (0x0008 - 0x0000)
struct FNpcWeaponStats final
{
public:
	float                                         PreferredDistanceToTargetMin;                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreferredDistanceToTargetMax;                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcWeaponStats) == 0x000004, "Wrong alignment on FNpcWeaponStats");
static_assert(sizeof(FNpcWeaponStats) == 0x000008, "Wrong size on FNpcWeaponStats");
static_assert(offsetof(FNpcWeaponStats, PreferredDistanceToTargetMin) == 0x000000, "Member 'FNpcWeaponStats::PreferredDistanceToTargetMin' has a wrong offset!");
static_assert(offsetof(FNpcWeaponStats, PreferredDistanceToTargetMax) == 0x000004, "Member 'FNpcWeaponStats::PreferredDistanceToTargetMax' has a wrong offset!");

// ScriptStruct DuneSandbox.FabricatorSettingsRowBase
// 0x0008 (0x0018 - 0x0010)
struct FFabricatorSettingsRowBase final : public FTableRowBase
{
public:
	class UItemCraftingActorComponentSettingsDataAsset* SettingsDataAsset;                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricatorSettingsRowBase) == 0x000008, "Wrong alignment on FFabricatorSettingsRowBase");
static_assert(sizeof(FFabricatorSettingsRowBase) == 0x000018, "Wrong size on FFabricatorSettingsRowBase");
static_assert(offsetof(FFabricatorSettingsRowBase, SettingsDataAsset) == 0x000010, "Member 'FFabricatorSettingsRowBase::SettingsDataAsset' has a wrong offset!");

// ScriptStruct DuneSandbox.EPainboxDialogueQuestion
// 0x0000 (0x0008 - 0x0008)
struct FEPainboxDialogueQuestion final : public FStringEnumValue
{
};
static_assert(alignof(FEPainboxDialogueQuestion) == 0x000004, "Wrong alignment on FEPainboxDialogueQuestion");
static_assert(sizeof(FEPainboxDialogueQuestion) == 0x000008, "Wrong size on FEPainboxDialogueQuestion");

// ScriptStruct DuneSandbox.FillableItemStatsComponent_BlueprintWrapper
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FFillableItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFillableItemStats                     FillableItemStats;                                 // 0x0060(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFillableItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FFillableItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FFillableItemStatsComponent_BlueprintWrapper) == 0x000080, "Wrong size on FFillableItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FFillableItemStatsComponent_BlueprintWrapper, FillableItemStats) == 0x000060, "Member 'FFillableItemStatsComponent_BlueprintWrapper::FillableItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.DroneFlyingVehicleComponent
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x10) FDroneFlyingVehicleComponent final
{
public:
	float                                         m_MaxSpeed;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LinearMovementDamping;                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DashDurationTime;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DashTranslation;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DashCooldownTime;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DashRotationRateMultiplier;                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           m_DashTranslationCurve;                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            m_MinHeight;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandByHeight;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StandByVelocityMultiplier;                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_YawMaxRotationRate;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_YawDamping;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PitchMax;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PitchMaxRotationRate;                            // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PitchDamping;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RelativeInputAxisScale;                          // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x80];                                      // 0x0050(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDroneFlyingVehicleComponent) == 0x000010, "Wrong alignment on FDroneFlyingVehicleComponent");
static_assert(sizeof(FDroneFlyingVehicleComponent) == 0x0000D0, "Wrong size on FDroneFlyingVehicleComponent");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_MaxSpeed) == 0x000000, "Member 'FDroneFlyingVehicleComponent::m_MaxSpeed' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_LinearMovementDamping) == 0x000004, "Member 'FDroneFlyingVehicleComponent::m_LinearMovementDamping' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_DashDurationTime) == 0x000008, "Member 'FDroneFlyingVehicleComponent::m_DashDurationTime' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_DashTranslation) == 0x00000C, "Member 'FDroneFlyingVehicleComponent::m_DashTranslation' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_DashCooldownTime) == 0x000010, "Member 'FDroneFlyingVehicleComponent::m_DashCooldownTime' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_DashRotationRateMultiplier) == 0x000014, "Member 'FDroneFlyingVehicleComponent::m_DashRotationRateMultiplier' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_DashTranslationCurve) == 0x000018, "Member 'FDroneFlyingVehicleComponent::m_DashTranslationCurve' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_MinHeight) == 0x000020, "Member 'FDroneFlyingVehicleComponent::m_MinHeight' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_StandByHeight) == 0x000030, "Member 'FDroneFlyingVehicleComponent::m_StandByHeight' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_StandByVelocityMultiplier) == 0x000034, "Member 'FDroneFlyingVehicleComponent::m_StandByVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_YawMaxRotationRate) == 0x000038, "Member 'FDroneFlyingVehicleComponent::m_YawMaxRotationRate' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_YawDamping) == 0x00003C, "Member 'FDroneFlyingVehicleComponent::m_YawDamping' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_PitchMax) == 0x000040, "Member 'FDroneFlyingVehicleComponent::m_PitchMax' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_PitchMaxRotationRate) == 0x000044, "Member 'FDroneFlyingVehicleComponent::m_PitchMaxRotationRate' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_PitchDamping) == 0x000048, "Member 'FDroneFlyingVehicleComponent::m_PitchDamping' has a wrong offset!");
static_assert(offsetof(FDroneFlyingVehicleComponent, m_RelativeInputAxisScale) == 0x00004C, "Member 'FDroneFlyingVehicleComponent::m_RelativeInputAxisScale' has a wrong offset!");

// ScriptStruct DuneSandbox.FilmbookRowBase
// 0x0008 (0x0018 - 0x0010)
struct FFilmbookRowBase final : public FTableRowBase
{
public:
	struct FEItemTemplateID                       m_AssociatedItemTemplateId;                        // 0x0010(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFilmbookRowBase) == 0x000008, "Wrong alignment on FFilmbookRowBase");
static_assert(sizeof(FFilmbookRowBase) == 0x000018, "Wrong size on FFilmbookRowBase");
static_assert(offsetof(FFilmbookRowBase, m_AssociatedItemTemplateId) == 0x000010, "Member 'FFilmbookRowBase::m_AssociatedItemTemplateId' has a wrong offset!");

// ScriptStruct DuneSandbox.FilterTabEntryData
// 0x0068 (0x0068 - 0x0000)
struct FFilterTabEntryData final
{
public:
	struct FGameplayTagContainer                  FilterTags;                                        // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FilterIcon;                                        // 0x0038(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFilterTabEntryData) == 0x000008, "Wrong alignment on FFilterTabEntryData");
static_assert(sizeof(FFilterTabEntryData) == 0x000068, "Wrong size on FFilterTabEntryData");
static_assert(offsetof(FFilterTabEntryData, FilterTags) == 0x000000, "Member 'FFilterTabEntryData::FilterTags' has a wrong offset!");
static_assert(offsetof(FFilterTabEntryData, DisplayName) == 0x000020, "Member 'FFilterTabEntryData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFilterTabEntryData, FilterIcon) == 0x000038, "Member 'FFilterTabEntryData::FilterIcon' has a wrong offset!");

// ScriptStruct DuneSandbox.FuelContainerComponent_BlueprintWrapper
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FFuelContainerComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFuelContainerStats                    FuelContainerStats;                                // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFuelContainerComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FFuelContainerComponent_BlueprintWrapper");
static_assert(sizeof(FFuelContainerComponent_BlueprintWrapper) == 0x000038, "Wrong size on FFuelContainerComponent_BlueprintWrapper");
static_assert(offsetof(FFuelContainerComponent_BlueprintWrapper, FuelContainerStats) == 0x000030, "Member 'FFuelContainerComponent_BlueprintWrapper::FuelContainerStats' has a wrong offset!");

// ScriptStruct DuneSandbox.ScopeZoomCameraProperties
// 0x0030 (0x0030 - 0x0000)
struct FScopeZoomCameraProperties final
{
public:
	float                                         FOVModifier;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVBlendTime;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchToScopedTime;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FadeColour;                                        // 0x000C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeToScopedDuration;                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeFromScopedDuration;                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterHideInTime;                               // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterHideOutTime;                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerspectiveTraceDistance;                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScopeZoomCameraProperties) == 0x000004, "Wrong alignment on FScopeZoomCameraProperties");
static_assert(sizeof(FScopeZoomCameraProperties) == 0x000030, "Wrong size on FScopeZoomCameraProperties");
static_assert(offsetof(FScopeZoomCameraProperties, FOVModifier) == 0x000000, "Member 'FScopeZoomCameraProperties::FOVModifier' has a wrong offset!");
static_assert(offsetof(FScopeZoomCameraProperties, FOVBlendTime) == 0x000004, "Member 'FScopeZoomCameraProperties::FOVBlendTime' has a wrong offset!");
static_assert(offsetof(FScopeZoomCameraProperties, SwitchToScopedTime) == 0x000008, "Member 'FScopeZoomCameraProperties::SwitchToScopedTime' has a wrong offset!");
static_assert(offsetof(FScopeZoomCameraProperties, FadeColour) == 0x00000C, "Member 'FScopeZoomCameraProperties::FadeColour' has a wrong offset!");
static_assert(offsetof(FScopeZoomCameraProperties, FadeToScopedDuration) == 0x00001C, "Member 'FScopeZoomCameraProperties::FadeToScopedDuration' has a wrong offset!");
static_assert(offsetof(FScopeZoomCameraProperties, FadeFromScopedDuration) == 0x000020, "Member 'FScopeZoomCameraProperties::FadeFromScopedDuration' has a wrong offset!");
static_assert(offsetof(FScopeZoomCameraProperties, CharacterHideInTime) == 0x000024, "Member 'FScopeZoomCameraProperties::CharacterHideInTime' has a wrong offset!");
static_assert(offsetof(FScopeZoomCameraProperties, CharacterHideOutTime) == 0x000028, "Member 'FScopeZoomCameraProperties::CharacterHideOutTime' has a wrong offset!");
static_assert(offsetof(FScopeZoomCameraProperties, PerspectiveTraceDistance) == 0x00002C, "Member 'FScopeZoomCameraProperties::PerspectiveTraceDistance' has a wrong offset!");

// ScriptStruct DuneSandbox.FuelContainerItemTableRow
// 0x0008 (0x0018 - 0x0010)
struct FFuelContainerItemTableRow final : public FTableRowBase
{
public:
	struct FFuelContainerStats                    FuelContainerStats;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFuelContainerItemTableRow) == 0x000008, "Wrong alignment on FFuelContainerItemTableRow");
static_assert(sizeof(FFuelContainerItemTableRow) == 0x000018, "Wrong size on FFuelContainerItemTableRow");
static_assert(offsetof(FFuelContainerItemTableRow, FuelContainerStats) == 0x000010, "Member 'FFuelContainerItemTableRow::FuelContainerStats' has a wrong offset!");

// ScriptStruct DuneSandbox.EVehicleModuleStatID
// 0x0000 (0x0008 - 0x0008)
struct FEVehicleModuleStatID final : public FStringEnumValue
{
};
static_assert(alignof(FEVehicleModuleStatID) == 0x000004, "Wrong alignment on FEVehicleModuleStatID");
static_assert(sizeof(FEVehicleModuleStatID) == 0x000008, "Wrong size on FEVehicleModuleStatID");

// ScriptStruct DuneSandbox.MapLevelData
// 0x0030 (0x0030 - 0x0000)
struct FMapLevelData final
{
public:
	struct FVector2D                              Extents;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Center;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Height;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapLevelData) == 0x000008, "Wrong alignment on FMapLevelData");
static_assert(sizeof(FMapLevelData) == 0x000030, "Wrong size on FMapLevelData");
static_assert(offsetof(FMapLevelData, Extents) == 0x000000, "Member 'FMapLevelData::Extents' has a wrong offset!");
static_assert(offsetof(FMapLevelData, Center) == 0x000010, "Member 'FMapLevelData::Center' has a wrong offset!");
static_assert(offsetof(FMapLevelData, Height) == 0x000020, "Member 'FMapLevelData::Height' has a wrong offset!");

// ScriptStruct DuneSandbox.FullscreenMapMarkerRowBase
// 0x0148 (0x0158 - 0x0010)
struct FFullscreenMapMarkerRowBase : public FTableRowBase
{
public:
	class FText                                   m_MarkerDisplayName;                               // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          m_bDisableOnFullscreenMap;                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_LOD;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_IconOrigin;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MapScale;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GroupingDistanceModifier;                        // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAllowGrouping;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_AllowGroupingOnMaxZoom;                          // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bHideWhenPlayerDead;                             // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShowDistanceToPlayer;                           // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bStickToCompassEdge;                             // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bFlashIconOnMap;                                 // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bFlashIconOnCompass;                             // 0x004E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShowRadius;                                     // 0x004F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_RenderZOrder;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bScaleWithMap;                                   // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsStatic;                                       // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsPersistent;                                   // 0x0056(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsDimensionBound;                               // 0x0057(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_CraftingValue;                                   // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAlwaysDiscoveredInsteadOfMysteriousOverride;    // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScannableType                                m_ScannableType;                                   // 0x005A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_VisibilityVerticalOffset;                        // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VisibilityTraceExtent;                           // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_MarkerFilterTag;                                 // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMapMarkerFilter>           m_MarkerFilterClass;                               // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_MarkerXPTag;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FText>        m_FactionTagToDisplayName;                         // 0x0080(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_IconTexture;                                     // 0x00D0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseDifferentPresetInAreaInformation;            // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEIconPresetWidgetName                 m_IconAppearance;                                  // 0x0104(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEIconPresetWidgetName                 m_AreaInformationAppearance;                       // 0x010C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_RadiusIndicatorColor;                            // 0x0114(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HighlightIconScale;                              // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_HighlightColor;                                  // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCompassMarkerContentWidgetBase> m_CompassWidgetClass;                         // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMapMarkerWidgetBase>       m_MarkerWidgetClass;                               // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMapMarkerTooltipWidget>    m_MarkerTooltipClass;                              // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UInWorldMarkerWidget>       m_InWorldMarkerWidget;                             // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFullscreenMapMarkerRowBase) == 0x000008, "Wrong alignment on FFullscreenMapMarkerRowBase");
static_assert(sizeof(FFullscreenMapMarkerRowBase) == 0x000158, "Wrong size on FFullscreenMapMarkerRowBase");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_MarkerDisplayName) == 0x000010, "Member 'FFullscreenMapMarkerRowBase::m_MarkerDisplayName' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bDisableOnFullscreenMap) == 0x000028, "Member 'FFullscreenMapMarkerRowBase::m_bDisableOnFullscreenMap' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_LOD) == 0x00002C, "Member 'FFullscreenMapMarkerRowBase::m_LOD' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_IconOrigin) == 0x000030, "Member 'FFullscreenMapMarkerRowBase::m_IconOrigin' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_MapScale) == 0x000040, "Member 'FFullscreenMapMarkerRowBase::m_MapScale' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_GroupingDistanceModifier) == 0x000044, "Member 'FFullscreenMapMarkerRowBase::m_GroupingDistanceModifier' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bAllowGrouping) == 0x000048, "Member 'FFullscreenMapMarkerRowBase::m_bAllowGrouping' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_AllowGroupingOnMaxZoom) == 0x000049, "Member 'FFullscreenMapMarkerRowBase::m_AllowGroupingOnMaxZoom' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bHideWhenPlayerDead) == 0x00004A, "Member 'FFullscreenMapMarkerRowBase::m_bHideWhenPlayerDead' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bShowDistanceToPlayer) == 0x00004B, "Member 'FFullscreenMapMarkerRowBase::m_bShowDistanceToPlayer' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bStickToCompassEdge) == 0x00004C, "Member 'FFullscreenMapMarkerRowBase::m_bStickToCompassEdge' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bFlashIconOnMap) == 0x00004D, "Member 'FFullscreenMapMarkerRowBase::m_bFlashIconOnMap' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bFlashIconOnCompass) == 0x00004E, "Member 'FFullscreenMapMarkerRowBase::m_bFlashIconOnCompass' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bShowRadius) == 0x00004F, "Member 'FFullscreenMapMarkerRowBase::m_bShowRadius' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_RenderZOrder) == 0x000050, "Member 'FFullscreenMapMarkerRowBase::m_RenderZOrder' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bScaleWithMap) == 0x000054, "Member 'FFullscreenMapMarkerRowBase::m_bScaleWithMap' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bIsStatic) == 0x000055, "Member 'FFullscreenMapMarkerRowBase::m_bIsStatic' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bIsPersistent) == 0x000056, "Member 'FFullscreenMapMarkerRowBase::m_bIsPersistent' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bIsDimensionBound) == 0x000057, "Member 'FFullscreenMapMarkerRowBase::m_bIsDimensionBound' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_CraftingValue) == 0x000058, "Member 'FFullscreenMapMarkerRowBase::m_CraftingValue' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bAlwaysDiscoveredInsteadOfMysteriousOverride) == 0x000059, "Member 'FFullscreenMapMarkerRowBase::m_bAlwaysDiscoveredInsteadOfMysteriousOverride' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_ScannableType) == 0x00005A, "Member 'FFullscreenMapMarkerRowBase::m_ScannableType' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_VisibilityVerticalOffset) == 0x00005C, "Member 'FFullscreenMapMarkerRowBase::m_VisibilityVerticalOffset' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_VisibilityTraceExtent) == 0x000060, "Member 'FFullscreenMapMarkerRowBase::m_VisibilityTraceExtent' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_MarkerFilterTag) == 0x000064, "Member 'FFullscreenMapMarkerRowBase::m_MarkerFilterTag' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_MarkerFilterClass) == 0x000070, "Member 'FFullscreenMapMarkerRowBase::m_MarkerFilterClass' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_MarkerXPTag) == 0x000078, "Member 'FFullscreenMapMarkerRowBase::m_MarkerXPTag' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_FactionTagToDisplayName) == 0x000080, "Member 'FFullscreenMapMarkerRowBase::m_FactionTagToDisplayName' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_IconTexture) == 0x0000D0, "Member 'FFullscreenMapMarkerRowBase::m_IconTexture' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_bUseDifferentPresetInAreaInformation) == 0x000100, "Member 'FFullscreenMapMarkerRowBase::m_bUseDifferentPresetInAreaInformation' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_IconAppearance) == 0x000104, "Member 'FFullscreenMapMarkerRowBase::m_IconAppearance' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_AreaInformationAppearance) == 0x00010C, "Member 'FFullscreenMapMarkerRowBase::m_AreaInformationAppearance' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_RadiusIndicatorColor) == 0x000114, "Member 'FFullscreenMapMarkerRowBase::m_RadiusIndicatorColor' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_HighlightIconScale) == 0x000124, "Member 'FFullscreenMapMarkerRowBase::m_HighlightIconScale' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_HighlightColor) == 0x000128, "Member 'FFullscreenMapMarkerRowBase::m_HighlightColor' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_CompassWidgetClass) == 0x000138, "Member 'FFullscreenMapMarkerRowBase::m_CompassWidgetClass' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_MarkerWidgetClass) == 0x000140, "Member 'FFullscreenMapMarkerRowBase::m_MarkerWidgetClass' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_MarkerTooltipClass) == 0x000148, "Member 'FFullscreenMapMarkerRowBase::m_MarkerTooltipClass' has a wrong offset!");
static_assert(offsetof(FFullscreenMapMarkerRowBase, m_InWorldMarkerWidget) == 0x000150, "Member 'FFullscreenMapMarkerRowBase::m_InWorldMarkerWidget' has a wrong offset!");

// ScriptStruct DuneSandbox.GameItemsGiverComponent
// 0x0018 (0x0018 - 0x0000)
struct FGameItemsGiverComponent final
{
public:
	TArray<struct FGameItemInfo>                  Items;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EGameItemGiverOptions                         Options;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameItemsGiverComponent) == 0x000008, "Wrong alignment on FGameItemsGiverComponent");
static_assert(sizeof(FGameItemsGiverComponent) == 0x000018, "Wrong size on FGameItemsGiverComponent");
static_assert(offsetof(FGameItemsGiverComponent, Items) == 0x000000, "Member 'FGameItemsGiverComponent::Items' has a wrong offset!");
static_assert(offsetof(FGameItemsGiverComponent, Options) == 0x000010, "Member 'FGameItemsGiverComponent::Options' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimNode_DragBoneByFrame
// 0x0048 (0x0058 - 0x0010)
struct FAnimNode_DragBoneByFrame final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePoseLink;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         bone;                                              // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FramesDelay;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationAlpha;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlpha;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x1C];                                      // 0x003C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DragBoneByFrame) == 0x000008, "Wrong alignment on FAnimNode_DragBoneByFrame");
static_assert(sizeof(FAnimNode_DragBoneByFrame) == 0x000058, "Wrong size on FAnimNode_DragBoneByFrame");
static_assert(offsetof(FAnimNode_DragBoneByFrame, BasePoseLink) == 0x000010, "Member 'FAnimNode_DragBoneByFrame::BasePoseLink' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragBoneByFrame, bone) == 0x000020, "Member 'FAnimNode_DragBoneByFrame::bone' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragBoneByFrame, FramesDelay) == 0x000030, "Member 'FAnimNode_DragBoneByFrame::FramesDelay' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragBoneByFrame, TranslationAlpha) == 0x000034, "Member 'FAnimNode_DragBoneByFrame::TranslationAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragBoneByFrame, RotationAlpha) == 0x000038, "Member 'FAnimNode_DragBoneByFrame::RotationAlpha' has a wrong offset!");

// ScriptStruct DuneSandbox.GenericActorRowBase
// 0x0098 (0x00A8 - 0x0010)
struct FGenericActorRowBase final : public FTableRowBase
{
public:
	bool                                          bIsPartOfWorldLayout;                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0018(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFactoryUsed;                                    // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UGenericActorFactoryBase> Factory;                                          // 0x0050(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRandomlyRotated;                                // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YawRotationInDegrees;                              // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericActorSpawnSettings             SpawnSettings;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRequiresSurfaceHeightDifference;                  // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGizmoHiddenInEd;                                // 0x00A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenericActorRowBase) == 0x000008, "Wrong alignment on FGenericActorRowBase");
static_assert(sizeof(FGenericActorRowBase) == 0x0000A8, "Wrong size on FGenericActorRowBase");
static_assert(offsetof(FGenericActorRowBase, bIsPartOfWorldLayout) == 0x000010, "Member 'FGenericActorRowBase::bIsPartOfWorldLayout' has a wrong offset!");
static_assert(offsetof(FGenericActorRowBase, ActorClass) == 0x000018, "Member 'FGenericActorRowBase::ActorClass' has a wrong offset!");
static_assert(offsetof(FGenericActorRowBase, bIsFactoryUsed) == 0x000048, "Member 'FGenericActorRowBase::bIsFactoryUsed' has a wrong offset!");
static_assert(offsetof(FGenericActorRowBase, Factory) == 0x000050, "Member 'FGenericActorRowBase::Factory' has a wrong offset!");
static_assert(offsetof(FGenericActorRowBase, bIsRandomlyRotated) == 0x000080, "Member 'FGenericActorRowBase::bIsRandomlyRotated' has a wrong offset!");
static_assert(offsetof(FGenericActorRowBase, YawRotationInDegrees) == 0x000084, "Member 'FGenericActorRowBase::YawRotationInDegrees' has a wrong offset!");
static_assert(offsetof(FGenericActorRowBase, LocationOffset) == 0x000088, "Member 'FGenericActorRowBase::LocationOffset' has a wrong offset!");
static_assert(offsetof(FGenericActorRowBase, SpawnSettings) == 0x0000A0, "Member 'FGenericActorRowBase::SpawnSettings' has a wrong offset!");
static_assert(offsetof(FGenericActorRowBase, bRequiresSurfaceHeightDifference) == 0x0000A4, "Member 'FGenericActorRowBase::bRequiresSurfaceHeightDifference' has a wrong offset!");
static_assert(offsetof(FGenericActorRowBase, bIsGizmoHiddenInEd) == 0x0000A5, "Member 'FGenericActorRowBase::bIsGizmoHiddenInEd' has a wrong offset!");

// ScriptStruct DuneSandbox.GEPersistenceData
// 0x0018 (0x0018 - 0x0000)
struct FGEPersistenceData final
{
public:
	TSubclassOf<class UGameplayEffect>            Class;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationRemaining;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGEPersistenceData) == 0x000008, "Wrong alignment on FGEPersistenceData");
static_assert(sizeof(FGEPersistenceData) == 0x000018, "Wrong size on FGEPersistenceData");
static_assert(offsetof(FGEPersistenceData, Class) == 0x000000, "Member 'FGEPersistenceData::Class' has a wrong offset!");
static_assert(offsetof(FGEPersistenceData, DurationRemaining) == 0x000008, "Member 'FGEPersistenceData::DurationRemaining' has a wrong offset!");
static_assert(offsetof(FGEPersistenceData, StackCount) == 0x00000C, "Member 'FGEPersistenceData::StackCount' has a wrong offset!");
static_assert(offsetof(FGEPersistenceData, Level) == 0x000010, "Member 'FGEPersistenceData::Level' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimNode_RigidBodyCustom
// 0x0010 (0x09D0 - 0x09C0)
struct FAnimNode_RigidBodyCustom final : public FAnimNode_RigidBody
{
public:
	class UPhysicsAsset*                          m_PhysicsAsset;                                    // 0x09C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C8[0x8];                                      // 0x09C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RigidBodyCustom) == 0x000010, "Wrong alignment on FAnimNode_RigidBodyCustom");
static_assert(sizeof(FAnimNode_RigidBodyCustom) == 0x0009D0, "Wrong size on FAnimNode_RigidBodyCustom");
static_assert(offsetof(FAnimNode_RigidBodyCustom, m_PhysicsAsset) == 0x0009C0, "Member 'FAnimNode_RigidBodyCustom::m_PhysicsAsset' has a wrong offset!");

// ScriptStruct DuneSandbox.GEPersistenceComponent
// 0x0050 (0x0050 - 0x0000)
struct FGEPersistenceComponent final
{
public:
	TSet<struct FGEPersistenceData>               PersistenceData;                                   // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGEPersistenceComponent) == 0x000008, "Wrong alignment on FGEPersistenceComponent");
static_assert(sizeof(FGEPersistenceComponent) == 0x000050, "Wrong size on FGEPersistenceComponent");
static_assert(offsetof(FGEPersistenceComponent, PersistenceData) == 0x000000, "Member 'FGEPersistenceComponent::PersistenceData' has a wrong offset!");

// ScriptStruct DuneSandbox.SurveyProgressRowBase
// 0x0080 (0x0090 - 0x0010)
struct FSurveyProgressRowBase final : public FTableRowBase
{
public:
	class FText                                   m_SurveyStateText;                                 // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bDisplayStateDescription;                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_StateDescription;                                // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bDisplayProbeDistance;                           // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LowProximityDistance;                            // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MedProximityDistance;                            // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HighProximityDistance;                           // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_LowProximityColor;                               // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_MedProximityColor;                               // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_HighProximityColor;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDisplayTimeRemaining;                           // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSurveyProgressRowBase) == 0x000008, "Wrong alignment on FSurveyProgressRowBase");
static_assert(sizeof(FSurveyProgressRowBase) == 0x000090, "Wrong size on FSurveyProgressRowBase");
static_assert(offsetof(FSurveyProgressRowBase, m_SurveyStateText) == 0x000010, "Member 'FSurveyProgressRowBase::m_SurveyStateText' has a wrong offset!");
static_assert(offsetof(FSurveyProgressRowBase, m_bDisplayStateDescription) == 0x000028, "Member 'FSurveyProgressRowBase::m_bDisplayStateDescription' has a wrong offset!");
static_assert(offsetof(FSurveyProgressRowBase, m_StateDescription) == 0x000030, "Member 'FSurveyProgressRowBase::m_StateDescription' has a wrong offset!");
static_assert(offsetof(FSurveyProgressRowBase, m_bDisplayProbeDistance) == 0x000048, "Member 'FSurveyProgressRowBase::m_bDisplayProbeDistance' has a wrong offset!");
static_assert(offsetof(FSurveyProgressRowBase, m_LowProximityDistance) == 0x00004C, "Member 'FSurveyProgressRowBase::m_LowProximityDistance' has a wrong offset!");
static_assert(offsetof(FSurveyProgressRowBase, m_MedProximityDistance) == 0x000050, "Member 'FSurveyProgressRowBase::m_MedProximityDistance' has a wrong offset!");
static_assert(offsetof(FSurveyProgressRowBase, m_HighProximityDistance) == 0x000054, "Member 'FSurveyProgressRowBase::m_HighProximityDistance' has a wrong offset!");
static_assert(offsetof(FSurveyProgressRowBase, m_LowProximityColor) == 0x000058, "Member 'FSurveyProgressRowBase::m_LowProximityColor' has a wrong offset!");
static_assert(offsetof(FSurveyProgressRowBase, m_MedProximityColor) == 0x000068, "Member 'FSurveyProgressRowBase::m_MedProximityColor' has a wrong offset!");
static_assert(offsetof(FSurveyProgressRowBase, m_HighProximityColor) == 0x000078, "Member 'FSurveyProgressRowBase::m_HighProximityColor' has a wrong offset!");
static_assert(offsetof(FSurveyProgressRowBase, m_bDisplayTimeRemaining) == 0x000088, "Member 'FSurveyProgressRowBase::m_bDisplayTimeRemaining' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildInvite
// 0x0068 (0x0068 - 0x0000)
struct FGuildInvite final
{
public:
	struct FUniqueID                              m_InviteId;                                        // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              m_GuildId;                                         // 0x0008(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              m_InvitedPlayerId;                                 // 0x0010(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              m_SenderPlayerId;                                  // 0x0018(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_GuildName;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_InvitedCharacterName;                            // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_SenderCharacterName;                             // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_GuildDescription;                                // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_InviteSentUniverseTime;                          // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildInvite) == 0x000008, "Wrong alignment on FGuildInvite");
static_assert(sizeof(FGuildInvite) == 0x000068, "Wrong size on FGuildInvite");
static_assert(offsetof(FGuildInvite, m_InviteId) == 0x000000, "Member 'FGuildInvite::m_InviteId' has a wrong offset!");
static_assert(offsetof(FGuildInvite, m_GuildId) == 0x000008, "Member 'FGuildInvite::m_GuildId' has a wrong offset!");
static_assert(offsetof(FGuildInvite, m_InvitedPlayerId) == 0x000010, "Member 'FGuildInvite::m_InvitedPlayerId' has a wrong offset!");
static_assert(offsetof(FGuildInvite, m_SenderPlayerId) == 0x000018, "Member 'FGuildInvite::m_SenderPlayerId' has a wrong offset!");
static_assert(offsetof(FGuildInvite, m_GuildName) == 0x000020, "Member 'FGuildInvite::m_GuildName' has a wrong offset!");
static_assert(offsetof(FGuildInvite, m_InvitedCharacterName) == 0x000030, "Member 'FGuildInvite::m_InvitedCharacterName' has a wrong offset!");
static_assert(offsetof(FGuildInvite, m_SenderCharacterName) == 0x000040, "Member 'FGuildInvite::m_SenderCharacterName' has a wrong offset!");
static_assert(offsetof(FGuildInvite, m_GuildDescription) == 0x000050, "Member 'FGuildInvite::m_GuildDescription' has a wrong offset!");
static_assert(offsetof(FGuildInvite, m_InviteSentUniverseTime) == 0x000060, "Member 'FGuildInvite::m_InviteSentUniverseTime' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildInvitesResponseData
// 0x00A0 (0x00A0 - 0x0000)
struct FGuildInvitesResponseData final
{
public:
	struct FGuildInvite                           m_InviteData;                                      // 0x0000(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerOnlineStateData                 m_PlayerOnlineStateData;                           // 0x0068(0x0038)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildInvitesResponseData) == 0x000008, "Wrong alignment on FGuildInvitesResponseData");
static_assert(sizeof(FGuildInvitesResponseData) == 0x0000A0, "Wrong size on FGuildInvitesResponseData");
static_assert(offsetof(FGuildInvitesResponseData, m_InviteData) == 0x000000, "Member 'FGuildInvitesResponseData::m_InviteData' has a wrong offset!");
static_assert(offsetof(FGuildInvitesResponseData, m_PlayerOnlineStateData) == 0x000068, "Member 'FGuildInvitesResponseData::m_PlayerOnlineStateData' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildMemberResponseData
// 0x0050 (0x0050 - 0x0000)
struct FGuildMemberResponseData final
{
public:
	struct FGuildMember                           m_MemberData;                                      // 0x0000(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPlayerOnlineStateData                 m_PlayerOnlineStateData;                           // 0x0018(0x0038)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildMemberResponseData) == 0x000008, "Wrong alignment on FGuildMemberResponseData");
static_assert(sizeof(FGuildMemberResponseData) == 0x000050, "Wrong size on FGuildMemberResponseData");
static_assert(offsetof(FGuildMemberResponseData, m_MemberData) == 0x000000, "Member 'FGuildMemberResponseData::m_MemberData' has a wrong offset!");
static_assert(offsetof(FGuildMemberResponseData, m_PlayerOnlineStateData) == 0x000018, "Member 'FGuildMemberResponseData::m_PlayerOnlineStateData' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildPlayerInvitesResponseData
// 0x00A0 (0x00A0 - 0x0000)
struct FGuildPlayerInvitesResponseData final
{
public:
	struct FGuildInvite                           m_InviteData;                                      // 0x0000(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerOnlineStateData                 m_PlayerOnlineStateData;                           // 0x0068(0x0038)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildPlayerInvitesResponseData) == 0x000008, "Wrong alignment on FGuildPlayerInvitesResponseData");
static_assert(sizeof(FGuildPlayerInvitesResponseData) == 0x0000A0, "Wrong size on FGuildPlayerInvitesResponseData");
static_assert(offsetof(FGuildPlayerInvitesResponseData, m_InviteData) == 0x000000, "Member 'FGuildPlayerInvitesResponseData::m_InviteData' has a wrong offset!");
static_assert(offsetof(FGuildPlayerInvitesResponseData, m_PlayerOnlineStateData) == 0x000068, "Member 'FGuildPlayerInvitesResponseData::m_PlayerOnlineStateData' has a wrong offset!");

// ScriptStruct DuneSandbox.CorrectionReportingSettings
// 0x0010 (0x0010 - 0x0000)
struct FCorrectionReportingSettings final
{
public:
	float                                         LowerBoundsDelta;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBoundsDelta;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxReportsPerHeartbeat;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDuneCorrectionSeverity                       MinLoggingSeverity;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCorrectionReportingSettings) == 0x000004, "Wrong alignment on FCorrectionReportingSettings");
static_assert(sizeof(FCorrectionReportingSettings) == 0x000010, "Wrong size on FCorrectionReportingSettings");
static_assert(offsetof(FCorrectionReportingSettings, LowerBoundsDelta) == 0x000000, "Member 'FCorrectionReportingSettings::LowerBoundsDelta' has a wrong offset!");
static_assert(offsetof(FCorrectionReportingSettings, UpperBoundsDelta) == 0x000004, "Member 'FCorrectionReportingSettings::UpperBoundsDelta' has a wrong offset!");
static_assert(offsetof(FCorrectionReportingSettings, MaxReportsPerHeartbeat) == 0x000008, "Member 'FCorrectionReportingSettings::MaxReportsPerHeartbeat' has a wrong offset!");
static_assert(offsetof(FCorrectionReportingSettings, MinLoggingSeverity) == 0x00000C, "Member 'FCorrectionReportingSettings::MinLoggingSeverity' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildDatabaseEventRejectInvite
// 0x0010 (0x0010 - 0x0000)
struct FGuildDatabaseEventRejectInvite final
{
public:
	int64                                         PlayerId;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         GuildId;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildDatabaseEventRejectInvite) == 0x000008, "Wrong alignment on FGuildDatabaseEventRejectInvite");
static_assert(sizeof(FGuildDatabaseEventRejectInvite) == 0x000010, "Wrong size on FGuildDatabaseEventRejectInvite");
static_assert(offsetof(FGuildDatabaseEventRejectInvite, PlayerId) == 0x000000, "Member 'FGuildDatabaseEventRejectInvite::PlayerId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventRejectInvite, GuildId) == 0x000008, "Member 'FGuildDatabaseEventRejectInvite::GuildId' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildDatabaseEventRemovePlayers
// 0x0030 (0x0030 - 0x0000)
struct FGuildDatabaseEventRemovePlayers final
{
public:
	TArray<int64>                                 PlayerIds;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         GuildId;                                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildRemoveReason                            GuildRemoveReason;                                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDatabaseEventRemovePlayers) == 0x000008, "Wrong alignment on FGuildDatabaseEventRemovePlayers");
static_assert(sizeof(FGuildDatabaseEventRemovePlayers) == 0x000030, "Wrong size on FGuildDatabaseEventRemovePlayers");
static_assert(offsetof(FGuildDatabaseEventRemovePlayers, PlayerIds) == 0x000000, "Member 'FGuildDatabaseEventRemovePlayers::PlayerIds' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventRemovePlayers, GuildId) == 0x000010, "Member 'FGuildDatabaseEventRemovePlayers::GuildId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventRemovePlayers, GuildName) == 0x000018, "Member 'FGuildDatabaseEventRemovePlayers::GuildName' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventRemovePlayers, GuildRemoveReason) == 0x000028, "Member 'FGuildDatabaseEventRemovePlayers::GuildRemoveReason' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildDatabaseEventPromotePlayer
// 0x0018 (0x0018 - 0x0000)
struct FGuildDatabaseEventPromotePlayer final
{
public:
	int64                                         PlayerId;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         GuildId;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         NewRole;                                           // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDatabaseEventPromotePlayer) == 0x000008, "Wrong alignment on FGuildDatabaseEventPromotePlayer");
static_assert(sizeof(FGuildDatabaseEventPromotePlayer) == 0x000018, "Wrong size on FGuildDatabaseEventPromotePlayer");
static_assert(offsetof(FGuildDatabaseEventPromotePlayer, PlayerId) == 0x000000, "Member 'FGuildDatabaseEventPromotePlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventPromotePlayer, GuildId) == 0x000008, "Member 'FGuildDatabaseEventPromotePlayer::GuildId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventPromotePlayer, NewRole) == 0x000010, "Member 'FGuildDatabaseEventPromotePlayer::NewRole' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildDatabaseEventDemotePlayer
// 0x0018 (0x0018 - 0x0000)
struct FGuildDatabaseEventDemotePlayer final
{
public:
	int64                                         PlayerId;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         GuildId;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         NewRole;                                           // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDatabaseEventDemotePlayer) == 0x000008, "Wrong alignment on FGuildDatabaseEventDemotePlayer");
static_assert(sizeof(FGuildDatabaseEventDemotePlayer) == 0x000018, "Wrong size on FGuildDatabaseEventDemotePlayer");
static_assert(offsetof(FGuildDatabaseEventDemotePlayer, PlayerId) == 0x000000, "Member 'FGuildDatabaseEventDemotePlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventDemotePlayer, GuildId) == 0x000008, "Member 'FGuildDatabaseEventDemotePlayer::GuildId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventDemotePlayer, NewRole) == 0x000010, "Member 'FGuildDatabaseEventDemotePlayer::NewRole' has a wrong offset!");

// ScriptStruct DuneSandbox.ENPCBarks
// 0x0000 (0x0008 - 0x0008)
struct FENPCBarks final : public FStringEnumValue
{
};
static_assert(alignof(FENPCBarks) == 0x000004, "Wrong alignment on FENPCBarks");
static_assert(sizeof(FENPCBarks) == 0x000008, "Wrong size on FENPCBarks");

// ScriptStruct DuneSandbox.GuildDatabaseEventGuildDisband
// 0x0028 (0x0028 - 0x0000)
struct FGuildDatabaseEventGuildDisband final
{
public:
	int64                                         GuildId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int64>                                 PlayerIds;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildDatabaseEventGuildDisband) == 0x000008, "Wrong alignment on FGuildDatabaseEventGuildDisband");
static_assert(sizeof(FGuildDatabaseEventGuildDisband) == 0x000028, "Wrong size on FGuildDatabaseEventGuildDisband");
static_assert(offsetof(FGuildDatabaseEventGuildDisband, GuildId) == 0x000000, "Member 'FGuildDatabaseEventGuildDisband::GuildId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventGuildDisband, GuildName) == 0x000008, "Member 'FGuildDatabaseEventGuildDisband::GuildName' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventGuildDisband, PlayerIds) == 0x000018, "Member 'FGuildDatabaseEventGuildDisband::PlayerIds' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildDatabaseEventEditGuildDescription
// 0x0008 (0x0008 - 0x0000)
struct FGuildDatabaseEventEditGuildDescription final
{
public:
	int64                                         GuildId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildDatabaseEventEditGuildDescription) == 0x000008, "Wrong alignment on FGuildDatabaseEventEditGuildDescription");
static_assert(sizeof(FGuildDatabaseEventEditGuildDescription) == 0x000008, "Wrong size on FGuildDatabaseEventEditGuildDescription");
static_assert(offsetof(FGuildDatabaseEventEditGuildDescription, GuildId) == 0x000000, "Member 'FGuildDatabaseEventEditGuildDescription::GuildId' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildDatabaseEventChangeFaction
// 0x0018 (0x0018 - 0x0000)
struct FGuildDatabaseEventChangeFaction
{
public:
	int64                                         GuildId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OldGuildFactionDbId;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         NewGuildFactionDbId;                               // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDatabaseEventChangeFaction) == 0x000008, "Wrong alignment on FGuildDatabaseEventChangeFaction");
static_assert(sizeof(FGuildDatabaseEventChangeFaction) == 0x000018, "Wrong size on FGuildDatabaseEventChangeFaction");
static_assert(offsetof(FGuildDatabaseEventChangeFaction, GuildId) == 0x000000, "Member 'FGuildDatabaseEventChangeFaction::GuildId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventChangeFaction, OldGuildFactionDbId) == 0x000008, "Member 'FGuildDatabaseEventChangeFaction::OldGuildFactionDbId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventChangeFaction, NewGuildFactionDbId) == 0x000010, "Member 'FGuildDatabaseEventChangeFaction::NewGuildFactionDbId' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildDatabaseEventPledgedAllegiance
// 0x0000 (0x0018 - 0x0018)
struct FGuildDatabaseEventPledgedAllegiance final : public FGuildDatabaseEventChangeFaction
{
};
static_assert(alignof(FGuildDatabaseEventPledgedAllegiance) == 0x000008, "Wrong alignment on FGuildDatabaseEventPledgedAllegiance");
static_assert(sizeof(FGuildDatabaseEventPledgedAllegiance) == 0x000018, "Wrong size on FGuildDatabaseEventPledgedAllegiance");

// ScriptStruct DuneSandbox.NpcWeaponChoice
// 0x000C (0x000C - 0x0000)
struct FNpcWeaponChoice final
{
public:
	struct FEItemTemplateID                       m_Name;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Weight;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcWeaponChoice) == 0x000004, "Wrong alignment on FNpcWeaponChoice");
static_assert(sizeof(FNpcWeaponChoice) == 0x00000C, "Wrong size on FNpcWeaponChoice");
static_assert(offsetof(FNpcWeaponChoice, m_Name) == 0x000000, "Member 'FNpcWeaponChoice::m_Name' has a wrong offset!");
static_assert(offsetof(FNpcWeaponChoice, m_Weight) == 0x000008, "Member 'FNpcWeaponChoice::m_Weight' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildDatabaseEventBreakAllegiance
// 0x0000 (0x0018 - 0x0018)
struct FGuildDatabaseEventBreakAllegiance final : public FGuildDatabaseEventChangeFaction
{
};
static_assert(alignof(FGuildDatabaseEventBreakAllegiance) == 0x000008, "Wrong alignment on FGuildDatabaseEventBreakAllegiance");
static_assert(sizeof(FGuildDatabaseEventBreakAllegiance) == 0x000018, "Wrong size on FGuildDatabaseEventBreakAllegiance");

// ScriptStruct DuneSandbox.GuildDatabaseEventPlayerGuildDataChanged
// 0x0018 (0x0018 - 0x0000)
struct FGuildDatabaseEventPlayerGuildDataChanged final
{
public:
	int64                                         GuildId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         FactionId;                                         // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDatabaseEventPlayerGuildDataChanged) == 0x000008, "Wrong alignment on FGuildDatabaseEventPlayerGuildDataChanged");
static_assert(sizeof(FGuildDatabaseEventPlayerGuildDataChanged) == 0x000018, "Wrong size on FGuildDatabaseEventPlayerGuildDataChanged");
static_assert(offsetof(FGuildDatabaseEventPlayerGuildDataChanged, GuildId) == 0x000000, "Member 'FGuildDatabaseEventPlayerGuildDataChanged::GuildId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventPlayerGuildDataChanged, PlayerId) == 0x000008, "Member 'FGuildDatabaseEventPlayerGuildDataChanged::PlayerId' has a wrong offset!");
static_assert(offsetof(FGuildDatabaseEventPlayerGuildDataChanged, FactionId) == 0x000010, "Member 'FGuildDatabaseEventPlayerGuildDataChanged::FactionId' has a wrong offset!");

// ScriptStruct DuneSandbox.GuildData
// 0x0030 (0x0030 - 0x0000)
struct FGuildData final
{
public:
	class FString                                 m_GuildName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_GuildDescription;                                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              m_GuildId;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFaction                              m_GuildFaction;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildData) == 0x000008, "Wrong alignment on FGuildData");
static_assert(sizeof(FGuildData) == 0x000030, "Wrong size on FGuildData");
static_assert(offsetof(FGuildData, m_GuildName) == 0x000000, "Member 'FGuildData::m_GuildName' has a wrong offset!");
static_assert(offsetof(FGuildData, m_GuildDescription) == 0x000010, "Member 'FGuildData::m_GuildDescription' has a wrong offset!");
static_assert(offsetof(FGuildData, m_GuildId) == 0x000020, "Member 'FGuildData::m_GuildId' has a wrong offset!");
static_assert(offsetof(FGuildData, m_GuildFaction) == 0x000028, "Member 'FGuildData::m_GuildFaction' has a wrong offset!");

// ScriptStruct DuneSandbox.HarvesterVehicleComponent
// 0x0040 (0x0040 - 0x0000)
struct FHarvesterVehicleComponent final
{
public:
	class FName                                   HarvestedResourceName;                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HarvestedAmountPerSecond;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HarvestTickTimeInSeconds;                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HarvestingSpeedMultiplier;                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeteriorationPerItemHarvested;                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ASpiceField*                            CurrentSpiceField;                                 // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHarvesterVehicleComponent) == 0x000008, "Wrong alignment on FHarvesterVehicleComponent");
static_assert(sizeof(FHarvesterVehicleComponent) == 0x000040, "Wrong size on FHarvesterVehicleComponent");
static_assert(offsetof(FHarvesterVehicleComponent, HarvestedResourceName) == 0x000000, "Member 'FHarvesterVehicleComponent::HarvestedResourceName' has a wrong offset!");
static_assert(offsetof(FHarvesterVehicleComponent, HarvestedAmountPerSecond) == 0x000008, "Member 'FHarvesterVehicleComponent::HarvestedAmountPerSecond' has a wrong offset!");
static_assert(offsetof(FHarvesterVehicleComponent, HarvestTickTimeInSeconds) == 0x00000C, "Member 'FHarvesterVehicleComponent::HarvestTickTimeInSeconds' has a wrong offset!");
static_assert(offsetof(FHarvesterVehicleComponent, HarvestingSpeedMultiplier) == 0x000010, "Member 'FHarvesterVehicleComponent::HarvestingSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FHarvesterVehicleComponent, DeteriorationPerItemHarvested) == 0x000014, "Member 'FHarvesterVehicleComponent::DeteriorationPerItemHarvested' has a wrong offset!");
static_assert(offsetof(FHarvesterVehicleComponent, CurrentSpiceField) == 0x000028, "Member 'FHarvesterVehicleComponent::CurrentSpiceField' has a wrong offset!");

// ScriptStruct DuneSandbox.HazardComponent
// 0x0140 (0x0140 - 0x0000)
struct alignas(0x08) FHazardComponent final
{
public:
	uint8                                         Pad_0[0x140];                                      // 0x0000(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHazardComponent) == 0x000008, "Wrong alignment on FHazardComponent");
static_assert(sizeof(FHazardComponent) == 0x000140, "Wrong size on FHazardComponent");

// ScriptStruct DuneSandbox.HazardZoneComponent
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x10) FHazardZoneComponent final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHazardZoneComponent) == 0x000010, "Wrong alignment on FHazardZoneComponent");
static_assert(sizeof(FHazardZoneComponent) == 0x0000A0, "Wrong size on FHazardZoneComponent");

// ScriptStruct DuneSandbox.HazardZoneSettings
// 0x0008 (0x0038 - 0x0030)
struct FHazardZoneSettings final : public FZoneBaseSettings
{
public:
	bool                                          bIsEnabled;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHazardZoneAudioType                          AudioType;                                         // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHazardZoneSettings) == 0x000008, "Wrong alignment on FHazardZoneSettings");
static_assert(sizeof(FHazardZoneSettings) == 0x000038, "Wrong size on FHazardZoneSettings");
static_assert(offsetof(FHazardZoneSettings, bIsEnabled) == 0x000030, "Member 'FHazardZoneSettings::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FHazardZoneSettings, AudioType) == 0x000031, "Member 'FHazardZoneSettings::AudioType' has a wrong offset!");

// ScriptStruct DuneSandbox.HydrationEnabledTagComponent
// 0x0001 (0x0001 - 0x0000)
struct FHydrationEnabledTagComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHydrationEnabledTagComponent) == 0x000001, "Wrong alignment on FHydrationEnabledTagComponent");
static_assert(sizeof(FHydrationEnabledTagComponent) == 0x000001, "Wrong size on FHydrationEnabledTagComponent");

// ScriptStruct DuneSandbox.HydrationStateRowBase
// 0x0030 (0x0040 - 0x0010)
struct FHydrationStateRowBase final : public FTableRowBase
{
public:
	float                                         m_HydrationTheshold;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bThresholdMustEqual;                             // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsFakeState;                                    // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDWGameplayEffect>          m_EffectToApply;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FErrorMessageNotificationDefinition    m_NotifyEnterStateByIncreasing;                    // 0x0020(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FErrorMessageNotificationDefinition    m_NotifyEnterStateByDecreasing;                    // 0x0030(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHydrationStateRowBase) == 0x000008, "Wrong alignment on FHydrationStateRowBase");
static_assert(sizeof(FHydrationStateRowBase) == 0x000040, "Wrong size on FHydrationStateRowBase");
static_assert(offsetof(FHydrationStateRowBase, m_HydrationTheshold) == 0x000010, "Member 'FHydrationStateRowBase::m_HydrationTheshold' has a wrong offset!");
static_assert(offsetof(FHydrationStateRowBase, m_bThresholdMustEqual) == 0x000014, "Member 'FHydrationStateRowBase::m_bThresholdMustEqual' has a wrong offset!");
static_assert(offsetof(FHydrationStateRowBase, m_bIsFakeState) == 0x000015, "Member 'FHydrationStateRowBase::m_bIsFakeState' has a wrong offset!");
static_assert(offsetof(FHydrationStateRowBase, m_EffectToApply) == 0x000018, "Member 'FHydrationStateRowBase::m_EffectToApply' has a wrong offset!");
static_assert(offsetof(FHydrationStateRowBase, m_NotifyEnterStateByIncreasing) == 0x000020, "Member 'FHydrationStateRowBase::m_NotifyEnterStateByIncreasing' has a wrong offset!");
static_assert(offsetof(FHydrationStateRowBase, m_NotifyEnterStateByDecreasing) == 0x000030, "Member 'FHydrationStateRowBase::m_NotifyEnterStateByDecreasing' has a wrong offset!");

// ScriptStruct DuneSandbox.HypersprintStats
// 0x00C0 (0x00C0 - 0x0000)
struct FHypersprintStats final
{
public:
	float                                         TurnRadius;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideLockoutTotalTime;                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlidePostLockOutTotalTime;                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideBrakingDeceleration;                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideStartVelocityScalar;                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpMultiplier;                                    // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stamina_StartCost;                                 // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeUpTime;                                      // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityLevel;                                      // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeUpTimeLeft;                                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKeyForStaminaGEs;                        // 0x0030(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SlideStartVelocity;                                // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastValidAcceleration;                             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastFrameVelocity;                                 // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastLocation;                                      // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideLockoutTimeLeft;                              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlidePostLockOutTimeLeft;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedJumpZVelocity;                               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedStepupHeight;                                // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTimeStuck;                                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAbilityCanceledFromGA : 1;                        // 0x00BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSlideIsCancel : 1;                                // 0x00BC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFirstFrame : 1;                                 // 0x00BC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDirectionalInputDetected : 1;                     // 0x00BC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAddedAndNotRemovedRotationMode : 1;               // 0x00BC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHypersprintStats) == 0x000008, "Wrong alignment on FHypersprintStats");
static_assert(sizeof(FHypersprintStats) == 0x0000C0, "Wrong size on FHypersprintStats");
static_assert(offsetof(FHypersprintStats, TurnRadius) == 0x000000, "Member 'FHypersprintStats::TurnRadius' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, SlideLockoutTotalTime) == 0x000004, "Member 'FHypersprintStats::SlideLockoutTotalTime' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, SlidePostLockOutTotalTime) == 0x000008, "Member 'FHypersprintStats::SlidePostLockOutTotalTime' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, Speed) == 0x00000C, "Member 'FHypersprintStats::Speed' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, BrakingDeceleration) == 0x000010, "Member 'FHypersprintStats::BrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, SlideBrakingDeceleration) == 0x000014, "Member 'FHypersprintStats::SlideBrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, SlideStartVelocityScalar) == 0x000018, "Member 'FHypersprintStats::SlideStartVelocityScalar' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, JumpMultiplier) == 0x00001C, "Member 'FHypersprintStats::JumpMultiplier' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, Stamina_StartCost) == 0x000020, "Member 'FHypersprintStats::Stamina_StartCost' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, ChargeUpTime) == 0x000024, "Member 'FHypersprintStats::ChargeUpTime' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, AbilityLevel) == 0x000028, "Member 'FHypersprintStats::AbilityLevel' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, ChargeUpTimeLeft) == 0x00002C, "Member 'FHypersprintStats::ChargeUpTimeLeft' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, PredictionKeyForStaminaGEs) == 0x000030, "Member 'FHypersprintStats::PredictionKeyForStaminaGEs' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, SlideStartVelocity) == 0x000048, "Member 'FHypersprintStats::SlideStartVelocity' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, LastValidAcceleration) == 0x000060, "Member 'FHypersprintStats::LastValidAcceleration' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, LastFrameVelocity) == 0x000078, "Member 'FHypersprintStats::LastFrameVelocity' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, LastLocation) == 0x000090, "Member 'FHypersprintStats::LastLocation' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, SlideLockoutTimeLeft) == 0x0000A8, "Member 'FHypersprintStats::SlideLockoutTimeLeft' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, SlidePostLockOutTimeLeft) == 0x0000AC, "Member 'FHypersprintStats::SlidePostLockOutTimeLeft' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, CachedJumpZVelocity) == 0x0000B0, "Member 'FHypersprintStats::CachedJumpZVelocity' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, CachedStepupHeight) == 0x0000B4, "Member 'FHypersprintStats::CachedStepupHeight' has a wrong offset!");
static_assert(offsetof(FHypersprintStats, StartTimeStuck) == 0x0000B8, "Member 'FHypersprintStats::StartTimeStuck' has a wrong offset!");

// ScriptStruct DuneSandbox.IconPresetWidgetDataRow
// 0x00C8 (0x00D8 - 0x0010)
struct FIconPresetWidgetDataRow final : public FTableRowBase
{
public:
	struct FVector2D                              m_IconSize;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_IconOffset;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsIconTinted;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ShouldKeepIconAspectRatio;                       // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_UseIconMaterial;                                 // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      m_IconMaterial;                                    // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            m_IconTint;                                        // 0x0068(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 m_Background;                                      // 0x0080(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_BackgroundSize;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            m_BackgroundTint;                                  // 0x00C0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          m_HorizontalAlignment;                             // 0x00D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            m_VerticalAlignment;                               // 0x00D5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIconPresetWidgetDataRow) == 0x000008, "Wrong alignment on FIconPresetWidgetDataRow");
static_assert(sizeof(FIconPresetWidgetDataRow) == 0x0000D8, "Wrong size on FIconPresetWidgetDataRow");
static_assert(offsetof(FIconPresetWidgetDataRow, m_IconSize) == 0x000010, "Member 'FIconPresetWidgetDataRow::m_IconSize' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_IconOffset) == 0x000020, "Member 'FIconPresetWidgetDataRow::m_IconOffset' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_IsIconTinted) == 0x000030, "Member 'FIconPresetWidgetDataRow::m_IsIconTinted' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_ShouldKeepIconAspectRatio) == 0x000031, "Member 'FIconPresetWidgetDataRow::m_ShouldKeepIconAspectRatio' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_UseIconMaterial) == 0x000032, "Member 'FIconPresetWidgetDataRow::m_UseIconMaterial' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_IconMaterial) == 0x000038, "Member 'FIconPresetWidgetDataRow::m_IconMaterial' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_IconTint) == 0x000068, "Member 'FIconPresetWidgetDataRow::m_IconTint' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_Background) == 0x000080, "Member 'FIconPresetWidgetDataRow::m_Background' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_BackgroundSize) == 0x0000B0, "Member 'FIconPresetWidgetDataRow::m_BackgroundSize' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_BackgroundTint) == 0x0000C0, "Member 'FIconPresetWidgetDataRow::m_BackgroundTint' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_HorizontalAlignment) == 0x0000D4, "Member 'FIconPresetWidgetDataRow::m_HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FIconPresetWidgetDataRow, m_VerticalAlignment) == 0x0000D5, "Member 'FIconPresetWidgetDataRow::m_VerticalAlignment' has a wrong offset!");

// ScriptStruct DuneSandbox.EDiegeticGuiSetupType
// 0x0000 (0x0008 - 0x0008)
struct FEDiegeticGuiSetupType final : public FStringEnumValue
{
};
static_assert(alignof(FEDiegeticGuiSetupType) == 0x000004, "Wrong alignment on FEDiegeticGuiSetupType");
static_assert(sizeof(FEDiegeticGuiSetupType) == 0x000008, "Wrong size on FEDiegeticGuiSetupType");

// ScriptStruct DuneSandbox.InfoCardComponentPair
// 0x0010 (0x0010 - 0x0000)
struct FInfoCardComponentPair final
{
public:
	TSubclassOf<class UInfoCardDataProvider>      DataClass;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UInfoCardComponentWidget>   WidgetClass;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInfoCardComponentPair) == 0x000008, "Wrong alignment on FInfoCardComponentPair");
static_assert(sizeof(FInfoCardComponentPair) == 0x000010, "Wrong size on FInfoCardComponentPair");
static_assert(offsetof(FInfoCardComponentPair, DataClass) == 0x000000, "Member 'FInfoCardComponentPair::DataClass' has a wrong offset!");
static_assert(offsetof(FInfoCardComponentPair, WidgetClass) == 0x000008, "Member 'FInfoCardComponentPair::WidgetClass' has a wrong offset!");

// ScriptStruct DuneSandbox.InfoRingErrorMessageDataRow
// 0x0080 (0x0090 - 0x0010)
struct FInfoRingErrorMessageDataRow final : public FTableRowBase
{
public:
	class FText                                   m_ErrorMessage;                                    // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_ErrorMessageIcon;                                // 0x0028(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Duration;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMessageNotificationPresetDataAsset> m_MessageNotificationPreset;           // 0x0060(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInfoRingErrorMessageDataRow) == 0x000008, "Wrong alignment on FInfoRingErrorMessageDataRow");
static_assert(sizeof(FInfoRingErrorMessageDataRow) == 0x000090, "Wrong size on FInfoRingErrorMessageDataRow");
static_assert(offsetof(FInfoRingErrorMessageDataRow, m_ErrorMessage) == 0x000010, "Member 'FInfoRingErrorMessageDataRow::m_ErrorMessage' has a wrong offset!");
static_assert(offsetof(FInfoRingErrorMessageDataRow, m_ErrorMessageIcon) == 0x000028, "Member 'FInfoRingErrorMessageDataRow::m_ErrorMessageIcon' has a wrong offset!");
static_assert(offsetof(FInfoRingErrorMessageDataRow, m_Duration) == 0x000058, "Member 'FInfoRingErrorMessageDataRow::m_Duration' has a wrong offset!");
static_assert(offsetof(FInfoRingErrorMessageDataRow, m_MessageNotificationPreset) == 0x000060, "Member 'FInfoRingErrorMessageDataRow::m_MessageNotificationPreset' has a wrong offset!");

// ScriptStruct DuneSandbox.InformationGatheredTelemetryData
// 0x0030 (0x0030 - 0x0000)
struct FInformationGatheredTelemetryData final
{
public:
	EMarkerDiscoveryMethod                        DiscoveryMethod;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessful;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfPermanentMarkers;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfCycleMarkers;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AreaNameRevealed;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExplorationItem;                                   // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInformationGatheredTelemetryData) == 0x000008, "Wrong alignment on FInformationGatheredTelemetryData");
static_assert(sizeof(FInformationGatheredTelemetryData) == 0x000030, "Wrong size on FInformationGatheredTelemetryData");
static_assert(offsetof(FInformationGatheredTelemetryData, DiscoveryMethod) == 0x000000, "Member 'FInformationGatheredTelemetryData::DiscoveryMethod' has a wrong offset!");
static_assert(offsetof(FInformationGatheredTelemetryData, bSuccessful) == 0x000001, "Member 'FInformationGatheredTelemetryData::bSuccessful' has a wrong offset!");
static_assert(offsetof(FInformationGatheredTelemetryData, NumberOfPermanentMarkers) == 0x000004, "Member 'FInformationGatheredTelemetryData::NumberOfPermanentMarkers' has a wrong offset!");
static_assert(offsetof(FInformationGatheredTelemetryData, NumberOfCycleMarkers) == 0x000008, "Member 'FInformationGatheredTelemetryData::NumberOfCycleMarkers' has a wrong offset!");
static_assert(offsetof(FInformationGatheredTelemetryData, Duration) == 0x00000C, "Member 'FInformationGatheredTelemetryData::Duration' has a wrong offset!");
static_assert(offsetof(FInformationGatheredTelemetryData, AreaNameRevealed) == 0x000010, "Member 'FInformationGatheredTelemetryData::AreaNameRevealed' has a wrong offset!");
static_assert(offsetof(FInformationGatheredTelemetryData, ExplorationItem) == 0x000020, "Member 'FInformationGatheredTelemetryData::ExplorationItem' has a wrong offset!");

// ScriptStruct DuneSandbox.InputActionTableRow
// 0x0028 (0x0038 - 0x0010)
struct FInputActionTableRow final : public FTableRowBase
{
public:
	class UInputAction*                           InputAction;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FriendlyName;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bAutoShowHint;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForMouseAndKeyboard;                          // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForGamepad;                                   // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputActionTableRow) == 0x000008, "Wrong alignment on FInputActionTableRow");
static_assert(sizeof(FInputActionTableRow) == 0x000038, "Wrong size on FInputActionTableRow");
static_assert(offsetof(FInputActionTableRow, InputAction) == 0x000010, "Member 'FInputActionTableRow::InputAction' has a wrong offset!");
static_assert(offsetof(FInputActionTableRow, FriendlyName) == 0x000018, "Member 'FInputActionTableRow::FriendlyName' has a wrong offset!");
static_assert(offsetof(FInputActionTableRow, bAutoShowHint) == 0x000030, "Member 'FInputActionTableRow::bAutoShowHint' has a wrong offset!");
static_assert(offsetof(FInputActionTableRow, bShowForMouseAndKeyboard) == 0x000031, "Member 'FInputActionTableRow::bShowForMouseAndKeyboard' has a wrong offset!");
static_assert(offsetof(FInputActionTableRow, bShowForGamepad) == 0x000032, "Member 'FInputActionTableRow::bShowForGamepad' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerSequenceInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FPlayerSequenceInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerSequenceInfo) == 0x000004, "Wrong alignment on FPlayerSequenceInfo");
static_assert(sizeof(FPlayerSequenceInfo) == 0x000010, "Wrong size on FPlayerSequenceInfo");

// ScriptStruct DuneSandbox.ActionMappingQueueEntry
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FActionMappingQueueEntry final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionMappingQueueEntry) == 0x000008, "Wrong alignment on FActionMappingQueueEntry");
static_assert(sizeof(FActionMappingQueueEntry) == 0x0000A0, "Wrong size on FActionMappingQueueEntry");

// ScriptStruct DuneSandbox.InputContextTableRow
// 0x0058 (0x0068 - 0x0010)
struct FInputContextTableRow final : public FTableRowBase
{
public:
	class UInputMappingContext*                   InputMappingContext;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_InputStartedTag;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_InputTriggeredTag;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_InputCancelledTag;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContextPriorityLevel                         PriorityType;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEInputContext>                 InputContextBlacklist;                             // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bExclusiveWithWhitelist;                           // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FriendlyName;                                      // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputContextTableRow) == 0x000008, "Wrong alignment on FInputContextTableRow");
static_assert(sizeof(FInputContextTableRow) == 0x000068, "Wrong size on FInputContextTableRow");
static_assert(offsetof(FInputContextTableRow, InputMappingContext) == 0x000010, "Member 'FInputContextTableRow::InputMappingContext' has a wrong offset!");
static_assert(offsetof(FInputContextTableRow, m_InputStartedTag) == 0x000018, "Member 'FInputContextTableRow::m_InputStartedTag' has a wrong offset!");
static_assert(offsetof(FInputContextTableRow, m_InputTriggeredTag) == 0x000020, "Member 'FInputContextTableRow::m_InputTriggeredTag' has a wrong offset!");
static_assert(offsetof(FInputContextTableRow, m_InputCancelledTag) == 0x000028, "Member 'FInputContextTableRow::m_InputCancelledTag' has a wrong offset!");
static_assert(offsetof(FInputContextTableRow, PriorityType) == 0x000030, "Member 'FInputContextTableRow::PriorityType' has a wrong offset!");
static_assert(offsetof(FInputContextTableRow, Priority) == 0x000034, "Member 'FInputContextTableRow::Priority' has a wrong offset!");
static_assert(offsetof(FInputContextTableRow, InputContextBlacklist) == 0x000038, "Member 'FInputContextTableRow::InputContextBlacklist' has a wrong offset!");
static_assert(offsetof(FInputContextTableRow, bExclusiveWithWhitelist) == 0x000048, "Member 'FInputContextTableRow::bExclusiveWithWhitelist' has a wrong offset!");
static_assert(offsetof(FInputContextTableRow, FriendlyName) == 0x000050, "Member 'FInputContextTableRow::FriendlyName' has a wrong offset!");

// ScriptStruct DuneSandbox.InputUIRowBase
// 0x00C0 (0x00D0 - 0x0010)
struct FInputUIRowBase final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              m_IconKeyboardAndMouse;                            // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_IconXboxController;                              // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_IconPlaystationController;                       // 0x0070(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_IconGenericController;                           // 0x00A0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputUIRowBase) == 0x000008, "Wrong alignment on FInputUIRowBase");
static_assert(sizeof(FInputUIRowBase) == 0x0000D0, "Wrong size on FInputUIRowBase");
static_assert(offsetof(FInputUIRowBase, m_IconKeyboardAndMouse) == 0x000010, "Member 'FInputUIRowBase::m_IconKeyboardAndMouse' has a wrong offset!");
static_assert(offsetof(FInputUIRowBase, m_IconXboxController) == 0x000040, "Member 'FInputUIRowBase::m_IconXboxController' has a wrong offset!");
static_assert(offsetof(FInputUIRowBase, m_IconPlaystationController) == 0x000070, "Member 'FInputUIRowBase::m_IconPlaystationController' has a wrong offset!");
static_assert(offsetof(FInputUIRowBase, m_IconGenericController) == 0x0000A0, "Member 'FInputUIRowBase::m_IconGenericController' has a wrong offset!");

// ScriptStruct DuneSandbox.InteractionKeyCodesDataRowBase
// 0x0028 (0x0038 - 0x0010)
struct FInteractionKeyCodesDataRowBase final : public FTableRowBase
{
public:
	int32                                         m_KeyCode;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_DisplayName;                                     // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FColor                                 m_KeyColor;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsResettable;                                   // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractionKeyCodesDataRowBase) == 0x000008, "Wrong alignment on FInteractionKeyCodesDataRowBase");
static_assert(sizeof(FInteractionKeyCodesDataRowBase) == 0x000038, "Wrong size on FInteractionKeyCodesDataRowBase");
static_assert(offsetof(FInteractionKeyCodesDataRowBase, m_KeyCode) == 0x000010, "Member 'FInteractionKeyCodesDataRowBase::m_KeyCode' has a wrong offset!");
static_assert(offsetof(FInteractionKeyCodesDataRowBase, m_DisplayName) == 0x000018, "Member 'FInteractionKeyCodesDataRowBase::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FInteractionKeyCodesDataRowBase, m_KeyColor) == 0x000030, "Member 'FInteractionKeyCodesDataRowBase::m_KeyColor' has a wrong offset!");
static_assert(offsetof(FInteractionKeyCodesDataRowBase, m_bIsResettable) == 0x000034, "Member 'FInteractionKeyCodesDataRowBase::m_bIsResettable' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerTradingParticipant
// 0x0010 (0x0010 - 0x0000)
struct FPlayerTradingParticipant final
{
public:
	class UP2pTradingComponent*                   TradingComponentPtr;                               // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReadyToCompleteTrade;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAcceptedTrade;                                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SolarisOffered;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerTradingParticipant) == 0x000008, "Wrong alignment on FPlayerTradingParticipant");
static_assert(sizeof(FPlayerTradingParticipant) == 0x000010, "Wrong size on FPlayerTradingParticipant");
static_assert(offsetof(FPlayerTradingParticipant, TradingComponentPtr) == 0x000000, "Member 'FPlayerTradingParticipant::TradingComponentPtr' has a wrong offset!");
static_assert(offsetof(FPlayerTradingParticipant, bIsReadyToCompleteTrade) == 0x000008, "Member 'FPlayerTradingParticipant::bIsReadyToCompleteTrade' has a wrong offset!");
static_assert(offsetof(FPlayerTradingParticipant, bHasAcceptedTrade) == 0x000009, "Member 'FPlayerTradingParticipant::bHasAcceptedTrade' has a wrong offset!");
static_assert(offsetof(FPlayerTradingParticipant, SolarisOffered) == 0x00000C, "Member 'FPlayerTradingParticipant::SolarisOffered' has a wrong offset!");

// ScriptStruct DuneSandbox.InventoryCircuitElementComponent
// 0x0004 (0x000C - 0x0008)
struct FInventoryCircuitElementComponent final : public FCircuitElementBaseComponent
{
public:
	int32                                         m_OutputCircuit;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryCircuitElementComponent) == 0x000004, "Wrong alignment on FInventoryCircuitElementComponent");
static_assert(sizeof(FInventoryCircuitElementComponent) == 0x00000C, "Wrong size on FInventoryCircuitElementComponent");
static_assert(offsetof(FInventoryCircuitElementComponent, m_OutputCircuit) == 0x000008, "Member 'FInventoryCircuitElementComponent::m_OutputCircuit' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemOriginGUIData
// 0x00F8 (0x00F8 - 0x0000)
struct FItemOriginGUIData final
{
public:
	TMap<class FString, class FText>              m_NameToDescTag;                                   // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_Color;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_RichTextTag;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_OriginIcon;                                      // 0x0070(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEIconPresetWidgetName                 m_PickupIconPresetWidgetName;                      // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEIconPresetWidgetName                 m_IconPresetWidgetName;                            // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEIconPresetWidgetName                 m_OriginIconPresetWidgetName;                      // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEIconPresetWidgetName                 m_ItemCardPresetWidgetName;                        // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEIconPresetWidgetName                 m_SchematicPresetWidgetName;                       // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      m_SchematicPreviewMaterial;                        // 0x00C8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemOriginGUIData) == 0x000008, "Wrong alignment on FItemOriginGUIData");
static_assert(sizeof(FItemOriginGUIData) == 0x0000F8, "Wrong size on FItemOriginGUIData");
static_assert(offsetof(FItemOriginGUIData, m_NameToDescTag) == 0x000000, "Member 'FItemOriginGUIData::m_NameToDescTag' has a wrong offset!");
static_assert(offsetof(FItemOriginGUIData, m_Color) == 0x000050, "Member 'FItemOriginGUIData::m_Color' has a wrong offset!");
static_assert(offsetof(FItemOriginGUIData, m_RichTextTag) == 0x000060, "Member 'FItemOriginGUIData::m_RichTextTag' has a wrong offset!");
static_assert(offsetof(FItemOriginGUIData, m_OriginIcon) == 0x000070, "Member 'FItemOriginGUIData::m_OriginIcon' has a wrong offset!");
static_assert(offsetof(FItemOriginGUIData, m_PickupIconPresetWidgetName) == 0x0000A0, "Member 'FItemOriginGUIData::m_PickupIconPresetWidgetName' has a wrong offset!");
static_assert(offsetof(FItemOriginGUIData, m_IconPresetWidgetName) == 0x0000A8, "Member 'FItemOriginGUIData::m_IconPresetWidgetName' has a wrong offset!");
static_assert(offsetof(FItemOriginGUIData, m_OriginIconPresetWidgetName) == 0x0000B0, "Member 'FItemOriginGUIData::m_OriginIconPresetWidgetName' has a wrong offset!");
static_assert(offsetof(FItemOriginGUIData, m_ItemCardPresetWidgetName) == 0x0000B8, "Member 'FItemOriginGUIData::m_ItemCardPresetWidgetName' has a wrong offset!");
static_assert(offsetof(FItemOriginGUIData, m_SchematicPresetWidgetName) == 0x0000C0, "Member 'FItemOriginGUIData::m_SchematicPresetWidgetName' has a wrong offset!");
static_assert(offsetof(FItemOriginGUIData, m_SchematicPreviewMaterial) == 0x0000C8, "Member 'FItemOriginGUIData::m_SchematicPreviewMaterial' has a wrong offset!");

// ScriptStruct DuneSandbox.InventoryTypeFilter
// 0x0050 (0x0050 - 0x0000)
struct FInventoryTypeFilter final
{
public:
	TSet<EInventoryType>                          InventoryFilter;                                   // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryTypeFilter) == 0x000008, "Wrong alignment on FInventoryTypeFilter");
static_assert(sizeof(FInventoryTypeFilter) == 0x000050, "Wrong size on FInventoryTypeFilter");
static_assert(offsetof(FInventoryTypeFilter, InventoryFilter) == 0x000000, "Member 'FInventoryTypeFilter::InventoryFilter' has a wrong offset!");

// ScriptStruct DuneSandbox.CraftingRecipeIngredient
// 0x0004 (0x0004 - 0x0000)
struct FCraftingRecipeIngredient final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingRecipeIngredient) == 0x000004, "Wrong alignment on FCraftingRecipeIngredient");
static_assert(sizeof(FCraftingRecipeIngredient) == 0x000004, "Wrong size on FCraftingRecipeIngredient");
static_assert(offsetof(FCraftingRecipeIngredient, Amount) == 0x000000, "Member 'FCraftingRecipeIngredient::Amount' has a wrong offset!");

// ScriptStruct DuneSandbox.Ingredients
// 0x0058 (0x0058 - 0x0000)
struct FIngredients final
{
public:
	TMap<struct FEItemTemplateID, struct FCraftingRecipeIngredient> Ingredients;                     // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         m_WaterIngredientAmount;                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIngredients) == 0x000008, "Wrong alignment on FIngredients");
static_assert(sizeof(FIngredients) == 0x000058, "Wrong size on FIngredients");
static_assert(offsetof(FIngredients, Ingredients) == 0x000000, "Member 'FIngredients::Ingredients' has a wrong offset!");
static_assert(offsetof(FIngredients, m_WaterIngredientAmount) == 0x000050, "Member 'FIngredients::m_WaterIngredientAmount' has a wrong offset!");

// ScriptStruct DuneSandbox.CraftingRecipeOutcome
// 0x0004 (0x0004 - 0x0000)
struct FCraftingRecipeOutcome final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingRecipeOutcome) == 0x000004, "Wrong alignment on FCraftingRecipeOutcome");
static_assert(sizeof(FCraftingRecipeOutcome) == 0x000004, "Wrong size on FCraftingRecipeOutcome");
static_assert(offsetof(FCraftingRecipeOutcome, Amount) == 0x000000, "Member 'FCraftingRecipeOutcome::Amount' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemCraftingRecipe
// 0x0068 (0x0068 - 0x0000)
struct FItemCraftingRecipe final
{
public:
	TArray<struct FIngredients>                   IngredientsPerQuality;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FEItemTemplateID, struct FCraftingRecipeOutcome> Outcome;                            // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CraftingTimeInSec;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCraftingRecipe) == 0x000008, "Wrong alignment on FItemCraftingRecipe");
static_assert(sizeof(FItemCraftingRecipe) == 0x000068, "Wrong size on FItemCraftingRecipe");
static_assert(offsetof(FItemCraftingRecipe, IngredientsPerQuality) == 0x000000, "Member 'FItemCraftingRecipe::IngredientsPerQuality' has a wrong offset!");
static_assert(offsetof(FItemCraftingRecipe, Outcome) == 0x000010, "Member 'FItemCraftingRecipe::Outcome' has a wrong offset!");
static_assert(offsetof(FItemCraftingRecipe, CraftingTimeInSec) == 0x000060, "Member 'FItemCraftingRecipe::CraftingTimeInSec' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemCraftingRecipeRowBase
// 0x00E8 (0x00F8 - 0x0010)
struct FItemCraftingRecipeRowBase final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FItemCraftingRecipe                    Recipe;                                            // 0x0040(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<struct FECraftingRecipeProductionType>   RequiredProductionTypes;                           // 0x00A8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCraftingRecipeRowBase) == 0x000008, "Wrong alignment on FItemCraftingRecipeRowBase");
static_assert(sizeof(FItemCraftingRecipeRowBase) == 0x0000F8, "Wrong size on FItemCraftingRecipeRowBase");
static_assert(offsetof(FItemCraftingRecipeRowBase, Name) == 0x000010, "Member 'FItemCraftingRecipeRowBase::Name' has a wrong offset!");
static_assert(offsetof(FItemCraftingRecipeRowBase, Description) == 0x000028, "Member 'FItemCraftingRecipeRowBase::Description' has a wrong offset!");
static_assert(offsetof(FItemCraftingRecipeRowBase, Recipe) == 0x000040, "Member 'FItemCraftingRecipeRowBase::Recipe' has a wrong offset!");
static_assert(offsetof(FItemCraftingRecipeRowBase, RequiredProductionTypes) == 0x0000A8, "Member 'FItemCraftingRecipeRowBase::RequiredProductionTypes' has a wrong offset!");

// ScriptStruct DuneSandbox.CinematicsBindings
// 0x0050 (0x0050 - 0x0000)
struct FCinematicsBindings final
{
public:
	TMap<class FName, class AActor*>              m_ActorsToPossess;                                 // 0x0000(0x0050)(Edit, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCinematicsBindings) == 0x000008, "Wrong alignment on FCinematicsBindings");
static_assert(sizeof(FCinematicsBindings) == 0x000050, "Wrong size on FCinematicsBindings");
static_assert(offsetof(FCinematicsBindings, m_ActorsToPossess) == 0x000000, "Member 'FCinematicsBindings::m_ActorsToPossess' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneSpringArmModifierBaseValues
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FDuneSpringArmModifierBaseValues final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneSpringArmModifierBaseValues) == 0x000008, "Wrong alignment on FDuneSpringArmModifierBaseValues");
static_assert(sizeof(FDuneSpringArmModifierBaseValues) == 0x000038, "Wrong size on FDuneSpringArmModifierBaseValues");

// ScriptStruct DuneSandbox.ItemDecayedMaxDeteriorationGameThreadUpdateComponent
// 0x0004 (0x0004 - 0x0000)
struct FItemDecayedMaxDeteriorationGameThreadUpdateComponent final
{
public:
	float                                         m_DeteriorationPercent;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDecayedMaxDeteriorationGameThreadUpdateComponent) == 0x000004, "Wrong alignment on FItemDecayedMaxDeteriorationGameThreadUpdateComponent");
static_assert(sizeof(FItemDecayedMaxDeteriorationGameThreadUpdateComponent) == 0x000004, "Wrong size on FItemDecayedMaxDeteriorationGameThreadUpdateComponent");
static_assert(offsetof(FItemDecayedMaxDeteriorationGameThreadUpdateComponent, m_DeteriorationPercent) == 0x000000, "Member 'FItemDecayedMaxDeteriorationGameThreadUpdateComponent::m_DeteriorationPercent' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemStackAndDurabilityComponent_BlueprintWrapper
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FItemStackAndDurabilityComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemStackAndDurabilityStats           ItemStackAndDurabilityStats;                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemStackAndDurabilityComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FItemStackAndDurabilityComponent_BlueprintWrapper");
static_assert(sizeof(FItemStackAndDurabilityComponent_BlueprintWrapper) == 0x000050, "Wrong size on FItemStackAndDurabilityComponent_BlueprintWrapper");
static_assert(offsetof(FItemStackAndDurabilityComponent_BlueprintWrapper, ItemStackAndDurabilityStats) == 0x000040, "Member 'FItemStackAndDurabilityComponent_BlueprintWrapper::ItemStackAndDurabilityStats' has a wrong offset!");

// ScriptStruct DuneSandbox.RotationSetWrapper
// 0x0010 (0x0010 - 0x0000)
struct FRotationSetWrapper final
{
public:
	TArray<class FName>                           RequestingSystems;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRotationSetWrapper) == 0x000008, "Wrong alignment on FRotationSetWrapper");
static_assert(sizeof(FRotationSetWrapper) == 0x000010, "Wrong size on FRotationSetWrapper");
static_assert(offsetof(FRotationSetWrapper, RequestingSystems) == 0x000000, "Member 'FRotationSetWrapper::RequestingSystems' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemVolumeColorTableRow
// 0x0020 (0x0030 - 0x0010)
struct FItemVolumeColorTableRow final : public FTableRowBase
{
public:
	float                                         FromVolume;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOfIconInGrid;                                // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOfIconInInfoCard;                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemVolumeColorTableRow) == 0x000008, "Wrong alignment on FItemVolumeColorTableRow");
static_assert(sizeof(FItemVolumeColorTableRow) == 0x000030, "Wrong size on FItemVolumeColorTableRow");
static_assert(offsetof(FItemVolumeColorTableRow, FromVolume) == 0x000010, "Member 'FItemVolumeColorTableRow::FromVolume' has a wrong offset!");
static_assert(offsetof(FItemVolumeColorTableRow, Color) == 0x000014, "Member 'FItemVolumeColorTableRow::Color' has a wrong offset!");
static_assert(offsetof(FItemVolumeColorTableRow, HeightOfIconInGrid) == 0x000024, "Member 'FItemVolumeColorTableRow::HeightOfIconInGrid' has a wrong offset!");
static_assert(offsetof(FItemVolumeColorTableRow, HeightOfIconInInfoCard) == 0x000028, "Member 'FItemVolumeColorTableRow::HeightOfIconInInfoCard' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneyCategory
// 0x0088 (0x0088 - 0x0000)
struct FJourneyCategory final
{
public:
	EJourneyCategory                              m_Category;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_DisplayName;                                     // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_Icon;                                            // 0x0020(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UJourneyStoryCollection> m_StoryCollection;                                 // 0x0050(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJourneyContentPanel                          m_ContentPanel;                                    // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJourneyCategory) == 0x000008, "Wrong alignment on FJourneyCategory");
static_assert(sizeof(FJourneyCategory) == 0x000088, "Wrong size on FJourneyCategory");
static_assert(offsetof(FJourneyCategory, m_Category) == 0x000000, "Member 'FJourneyCategory::m_Category' has a wrong offset!");
static_assert(offsetof(FJourneyCategory, m_DisplayName) == 0x000008, "Member 'FJourneyCategory::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FJourneyCategory, m_Icon) == 0x000020, "Member 'FJourneyCategory::m_Icon' has a wrong offset!");
static_assert(offsetof(FJourneyCategory, m_StoryCollection) == 0x000050, "Member 'FJourneyCategory::m_StoryCollection' has a wrong offset!");
static_assert(offsetof(FJourneyCategory, m_ContentPanel) == 0x000080, "Member 'FJourneyCategory::m_ContentPanel' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneyNodeEvent
// 0x0018 (0x0048 - 0x0030)
struct FJourneyNodeEvent final : public FGameEvent
{
public:
	class FString                                 m_JourneyStoryNodeFullPath;                        // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJourneyNodeEventState                        m_JourneyNodeState;                                // 0x0040(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJourneyNodeEvent) == 0x000008, "Wrong alignment on FJourneyNodeEvent");
static_assert(sizeof(FJourneyNodeEvent) == 0x000048, "Wrong size on FJourneyNodeEvent");
static_assert(offsetof(FJourneyNodeEvent, m_JourneyStoryNodeFullPath) == 0x000030, "Member 'FJourneyNodeEvent::m_JourneyStoryNodeFullPath' has a wrong offset!");
static_assert(offsetof(FJourneyNodeEvent, m_JourneyNodeState) == 0x000040, "Member 'FJourneyNodeEvent::m_JourneyNodeState' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneySetItem
// 0x0180 (0x0180 - 0x0000)
struct FJourneySetItem final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   UndiscoveredText;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DiscoveredText;                                    // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   OriginName;                                        // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              OriginIcon;                                        // 0x0078(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ListIconUndiscovered;                              // 0x00A8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ListIconDiscovered;                                // 0x00D8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RenderedIcon;                                      // 0x0108(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      DiscoverCondition;                                 // 0x0138(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJourneySetItem) == 0x000008, "Wrong alignment on FJourneySetItem");
static_assert(sizeof(FJourneySetItem) == 0x000180, "Wrong size on FJourneySetItem");
static_assert(offsetof(FJourneySetItem, Name) == 0x000000, "Member 'FJourneySetItem::Name' has a wrong offset!");
static_assert(offsetof(FJourneySetItem, Description) == 0x000018, "Member 'FJourneySetItem::Description' has a wrong offset!");
static_assert(offsetof(FJourneySetItem, UndiscoveredText) == 0x000030, "Member 'FJourneySetItem::UndiscoveredText' has a wrong offset!");
static_assert(offsetof(FJourneySetItem, DiscoveredText) == 0x000048, "Member 'FJourneySetItem::DiscoveredText' has a wrong offset!");
static_assert(offsetof(FJourneySetItem, OriginName) == 0x000060, "Member 'FJourneySetItem::OriginName' has a wrong offset!");
static_assert(offsetof(FJourneySetItem, OriginIcon) == 0x000078, "Member 'FJourneySetItem::OriginIcon' has a wrong offset!");
static_assert(offsetof(FJourneySetItem, ListIconUndiscovered) == 0x0000A8, "Member 'FJourneySetItem::ListIconUndiscovered' has a wrong offset!");
static_assert(offsetof(FJourneySetItem, ListIconDiscovered) == 0x0000D8, "Member 'FJourneySetItem::ListIconDiscovered' has a wrong offset!");
static_assert(offsetof(FJourneySetItem, RenderedIcon) == 0x000108, "Member 'FJourneySetItem::RenderedIcon' has a wrong offset!");
static_assert(offsetof(FJourneySetItem, DiscoverCondition) == 0x000138, "Member 'FJourneySetItem::DiscoverCondition' has a wrong offset!");

// ScriptStruct DuneSandbox.ENpcDialoguesRowID
// 0x0000 (0x0008 - 0x0008)
struct FENpcDialoguesRowID final : public FStringEnumValue
{
};
static_assert(alignof(FENpcDialoguesRowID) == 0x000004, "Wrong alignment on FENpcDialoguesRowID");
static_assert(sizeof(FENpcDialoguesRowID) == 0x000008, "Wrong size on FENpcDialoguesRowID");

// ScriptStruct DuneSandbox.JourneySetsTableRow
// 0x00B8 (0x00C8 - 0x0010)
struct FJourneySetsTableRow final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ListIcon;                                          // 0x0028(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SetIconBackground;                                 // 0x0058(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SetIcon;                                           // 0x0088(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJourneySetItem>                ItemList;                                          // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJourneySetsTableRow) == 0x000008, "Wrong alignment on FJourneySetsTableRow");
static_assert(sizeof(FJourneySetsTableRow) == 0x0000C8, "Wrong size on FJourneySetsTableRow");
static_assert(offsetof(FJourneySetsTableRow, Name) == 0x000010, "Member 'FJourneySetsTableRow::Name' has a wrong offset!");
static_assert(offsetof(FJourneySetsTableRow, ListIcon) == 0x000028, "Member 'FJourneySetsTableRow::ListIcon' has a wrong offset!");
static_assert(offsetof(FJourneySetsTableRow, SetIconBackground) == 0x000058, "Member 'FJourneySetsTableRow::SetIconBackground' has a wrong offset!");
static_assert(offsetof(FJourneySetsTableRow, SetIcon) == 0x000088, "Member 'FJourneySetsTableRow::SetIcon' has a wrong offset!");
static_assert(offsetof(FJourneySetsTableRow, ItemList) == 0x0000B8, "Member 'FJourneySetsTableRow::ItemList' has a wrong offset!");

// ScriptStruct DuneSandbox.ChallengeRoomAudioEventData
// 0x0060 (0x0060 - 0x0000)
struct FChallengeRoomAudioEventData final
{
public:
	TSoftObjectPtr<class UFcAudioEvent>           StartAudioEvent;                                   // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           StopAudioEvent;                                    // 0x0030(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeRoomAudioEventData) == 0x000008, "Wrong alignment on FChallengeRoomAudioEventData");
static_assert(sizeof(FChallengeRoomAudioEventData) == 0x000060, "Wrong size on FChallengeRoomAudioEventData");
static_assert(offsetof(FChallengeRoomAudioEventData, StartAudioEvent) == 0x000000, "Member 'FChallengeRoomAudioEventData::StartAudioEvent' has a wrong offset!");
static_assert(offsetof(FChallengeRoomAudioEventData, StopAudioEvent) == 0x000030, "Member 'FChallengeRoomAudioEventData::StopAudioEvent' has a wrong offset!");

// ScriptStruct DuneSandbox.ChallengeRoomData
// 0x00A0 (0x00A0 - 0x0000)
struct FChallengeRoomData final
{
public:
	TSoftObjectPtr<class UWorld>                  ChallengeRoomLevel;                                // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredJourneyNodeFullName;                       // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJourneyStoryNode*                      RequiredJourneyNode;                               // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EChallengeRoomAudioEvent, struct FChallengeRoomAudioEventData> ChallengeRoomAudioEvents;    // 0x0048(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint32                                        ExpectedPlaytimeSeconds;                           // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeRoomData) == 0x000008, "Wrong alignment on FChallengeRoomData");
static_assert(sizeof(FChallengeRoomData) == 0x0000A0, "Wrong size on FChallengeRoomData");
static_assert(offsetof(FChallengeRoomData, ChallengeRoomLevel) == 0x000000, "Member 'FChallengeRoomData::ChallengeRoomLevel' has a wrong offset!");
static_assert(offsetof(FChallengeRoomData, RequiredJourneyNodeFullName) == 0x000030, "Member 'FChallengeRoomData::RequiredJourneyNodeFullName' has a wrong offset!");
static_assert(offsetof(FChallengeRoomData, RequiredJourneyNode) == 0x000040, "Member 'FChallengeRoomData::RequiredJourneyNode' has a wrong offset!");
static_assert(offsetof(FChallengeRoomData, ChallengeRoomAudioEvents) == 0x000048, "Member 'FChallengeRoomData::ChallengeRoomAudioEvents' has a wrong offset!");
static_assert(offsetof(FChallengeRoomData, ExpectedPlaytimeSeconds) == 0x000098, "Member 'FChallengeRoomData::ExpectedPlaytimeSeconds' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormDeathLimboSettings
// 0x0048 (0x0048 - 0x0000)
struct FSandwormDeathLimboSettings final
{
public:
	int32                                         ChallengeRoomNumber;                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathTravelDelayInSeconds;                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JourneyStoryNodePrerequisiteFullName;              // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEDuneMapId>                    AllowedMaps;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       SandwormToothItemTemplateId;                       // 0x0028(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameItemInfo>                  ItemsToAwardOnPositiveOutcome;                     // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UJourneyStoryNode*                      JourneyStoryNodePrerequisite;                      // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandwormDeathLimboSettings) == 0x000008, "Wrong alignment on FSandwormDeathLimboSettings");
static_assert(sizeof(FSandwormDeathLimboSettings) == 0x000048, "Wrong size on FSandwormDeathLimboSettings");
static_assert(offsetof(FSandwormDeathLimboSettings, ChallengeRoomNumber) == 0x000000, "Member 'FSandwormDeathLimboSettings::ChallengeRoomNumber' has a wrong offset!");
static_assert(offsetof(FSandwormDeathLimboSettings, DeathTravelDelayInSeconds) == 0x000004, "Member 'FSandwormDeathLimboSettings::DeathTravelDelayInSeconds' has a wrong offset!");
static_assert(offsetof(FSandwormDeathLimboSettings, JourneyStoryNodePrerequisiteFullName) == 0x000008, "Member 'FSandwormDeathLimboSettings::JourneyStoryNodePrerequisiteFullName' has a wrong offset!");
static_assert(offsetof(FSandwormDeathLimboSettings, AllowedMaps) == 0x000018, "Member 'FSandwormDeathLimboSettings::AllowedMaps' has a wrong offset!");
static_assert(offsetof(FSandwormDeathLimboSettings, SandwormToothItemTemplateId) == 0x000028, "Member 'FSandwormDeathLimboSettings::SandwormToothItemTemplateId' has a wrong offset!");
static_assert(offsetof(FSandwormDeathLimboSettings, ItemsToAwardOnPositiveOutcome) == 0x000030, "Member 'FSandwormDeathLimboSettings::ItemsToAwardOnPositiveOutcome' has a wrong offset!");
static_assert(offsetof(FSandwormDeathLimboSettings, JourneyStoryNodePrerequisite) == 0x000040, "Member 'FSandwormDeathLimboSettings::JourneyStoryNodePrerequisite' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneySpiceDreamData
// 0x0070 (0x0070 - 0x0000)
struct FJourneySpiceDreamData final
{
public:
	EJourneyCinematicType                         CinematicType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UWorld>                  CinematicLevel;                                    // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TriggerTags;                                       // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CompletedTag;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PostSpiceDreamTrackedCard;                         // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJourneySpiceDreamData) == 0x000008, "Wrong alignment on FJourneySpiceDreamData");
static_assert(sizeof(FJourneySpiceDreamData) == 0x000070, "Wrong size on FJourneySpiceDreamData");
static_assert(offsetof(FJourneySpiceDreamData, CinematicType) == 0x000000, "Member 'FJourneySpiceDreamData::CinematicType' has a wrong offset!");
static_assert(offsetof(FJourneySpiceDreamData, CinematicLevel) == 0x000008, "Member 'FJourneySpiceDreamData::CinematicLevel' has a wrong offset!");
static_assert(offsetof(FJourneySpiceDreamData, TriggerTags) == 0x000038, "Member 'FJourneySpiceDreamData::TriggerTags' has a wrong offset!");
static_assert(offsetof(FJourneySpiceDreamData, CompletedTag) == 0x000058, "Member 'FJourneySpiceDreamData::CompletedTag' has a wrong offset!");
static_assert(offsetof(FJourneySpiceDreamData, PostSpiceDreamTrackedCard) == 0x000060, "Member 'FJourneySpiceDreamData::PostSpiceDreamTrackedCard' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneyStateRevealOrComplete
// 0x0018 (0x0018 - 0x0000)
struct FJourneyStateRevealOrComplete final
{
public:
	class FString                                 JourneyNodeFullName;                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevealOnly;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJourneyStateRevealOrComplete) == 0x000008, "Wrong alignment on FJourneyStateRevealOrComplete");
static_assert(sizeof(FJourneyStateRevealOrComplete) == 0x000018, "Wrong size on FJourneyStateRevealOrComplete");
static_assert(offsetof(FJourneyStateRevealOrComplete, JourneyNodeFullName) == 0x000000, "Member 'FJourneyStateRevealOrComplete::JourneyNodeFullName' has a wrong offset!");
static_assert(offsetof(FJourneyStateRevealOrComplete, bRevealOnly) == 0x000010, "Member 'FJourneyStateRevealOrComplete::bRevealOnly' has a wrong offset!");

// ScriptStruct DuneSandbox.CategoryData
// 0x0058 (0x0058 - 0x0000)
struct FCategoryData final
{
public:
	class FText                                   m_DisplayName;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_Icon;                                            // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSubCategoryData>               m_SubCategoriesData;                               // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCategoryData) == 0x000008, "Wrong alignment on FCategoryData");
static_assert(sizeof(FCategoryData) == 0x000058, "Wrong size on FCategoryData");
static_assert(offsetof(FCategoryData, m_DisplayName) == 0x000000, "Member 'FCategoryData::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FCategoryData, m_Icon) == 0x000018, "Member 'FCategoryData::m_Icon' has a wrong offset!");
static_assert(offsetof(FCategoryData, m_SubCategoriesData) == 0x000048, "Member 'FCategoryData::m_SubCategoriesData' has a wrong offset!");

// ScriptStruct DuneSandbox.KeybindNameList
// 0x0010 (0x0010 - 0x0000)
struct FKeybindNameList final
{
public:
	TArray<class FName>                           m_Keybinds;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeybindNameList) == 0x000008, "Wrong alignment on FKeybindNameList");
static_assert(sizeof(FKeybindNameList) == 0x000010, "Wrong size on FKeybindNameList");
static_assert(offsetof(FKeybindNameList, m_Keybinds) == 0x000000, "Member 'FKeybindNameList::m_Keybinds' has a wrong offset!");

// ScriptStruct DuneSandbox.PingData
// 0x0010 (0x0010 - 0x0000)
struct FPingData final
{
public:
	struct FMarkerId                              m_MarkerId;                                        // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              m_ExpirationTime;                                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPingData) == 0x000008, "Wrong alignment on FPingData");
static_assert(sizeof(FPingData) == 0x000010, "Wrong size on FPingData");
static_assert(offsetof(FPingData, m_MarkerId) == 0x000000, "Member 'FPingData::m_MarkerId' has a wrong offset!");
static_assert(offsetof(FPingData, m_ExpirationTime) == 0x000008, "Member 'FPingData::m_ExpirationTime' has a wrong offset!");

// ScriptStruct DuneSandbox.KeybindData
// 0x0020 (0x0020 - 0x0000)
struct FKeybindData final
{
public:
	class FName                                   m_Name;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_DisplayName;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeybindData) == 0x000008, "Wrong alignment on FKeybindData");
static_assert(sizeof(FKeybindData) == 0x000020, "Wrong size on FKeybindData");
static_assert(offsetof(FKeybindData, m_Name) == 0x000000, "Member 'FKeybindData::m_Name' has a wrong offset!");
static_assert(offsetof(FKeybindData, m_DisplayName) == 0x000008, "Member 'FKeybindData::m_DisplayName' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerDesyncInfo
// 0x0058 (0x0058 - 0x0000)
struct FPlayerDesyncInfo final
{
public:
	struct FUniqueNetIdRepl                       UniqueID;                                          // 0x0000(0x0038)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPresent;                                          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActualLocation;                                    // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerDesyncInfo) == 0x000008, "Wrong alignment on FPlayerDesyncInfo");
static_assert(sizeof(FPlayerDesyncInfo) == 0x000058, "Wrong size on FPlayerDesyncInfo");
static_assert(offsetof(FPlayerDesyncInfo, UniqueID) == 0x000000, "Member 'FPlayerDesyncInfo::UniqueID' has a wrong offset!");
static_assert(offsetof(FPlayerDesyncInfo, bPresent) == 0x000038, "Member 'FPlayerDesyncInfo::bPresent' has a wrong offset!");
static_assert(offsetof(FPlayerDesyncInfo, ActualLocation) == 0x000040, "Member 'FPlayerDesyncInfo::ActualLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadDecreeRowBase
// 0x00C0 (0x00D0 - 0x0010)
struct FLandsraadDecreeRowBase final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   NarrativeText;                                     // 0x0028(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   EffectText;                                        // 0x0040(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0058(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EffectIcon;                                        // 0x0088(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULandsraadDecreeBase>       LandsraadDecree;                                   // 0x00B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x00C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandsraadDecreeRowBase) == 0x000008, "Wrong alignment on FLandsraadDecreeRowBase");
static_assert(sizeof(FLandsraadDecreeRowBase) == 0x0000D0, "Wrong size on FLandsraadDecreeRowBase");
static_assert(offsetof(FLandsraadDecreeRowBase, Name) == 0x000010, "Member 'FLandsraadDecreeRowBase::Name' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeRowBase, NarrativeText) == 0x000028, "Member 'FLandsraadDecreeRowBase::NarrativeText' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeRowBase, EffectText) == 0x000040, "Member 'FLandsraadDecreeRowBase::EffectText' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeRowBase, Icon) == 0x000058, "Member 'FLandsraadDecreeRowBase::Icon' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeRowBase, EffectIcon) == 0x000088, "Member 'FLandsraadDecreeRowBase::EffectIcon' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeRowBase, LandsraadDecree) == 0x0000B8, "Member 'FLandsraadDecreeRowBase::LandsraadDecree' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeRowBase, Weight) == 0x0000C0, "Member 'FLandsraadDecreeRowBase::Weight' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeRowBase, bIsEnabled) == 0x0000C4, "Member 'FLandsraadDecreeRowBase::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FLandsraadDecreeRowBase, Version) == 0x0000C8, "Member 'FLandsraadDecreeRowBase::Version' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadRotationDecree
// 0x0010 (0x0010 - 0x0000)
struct FLandsraadRotationDecree final
{
public:
	class FName                                   DecreeName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReceivedVotes;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenVotes;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadRotationDecree) == 0x000004, "Wrong alignment on FLandsraadRotationDecree");
static_assert(sizeof(FLandsraadRotationDecree) == 0x000010, "Wrong size on FLandsraadRotationDecree");
static_assert(offsetof(FLandsraadRotationDecree, DecreeName) == 0x000000, "Member 'FLandsraadRotationDecree::DecreeName' has a wrong offset!");
static_assert(offsetof(FLandsraadRotationDecree, ReceivedVotes) == 0x000008, "Member 'FLandsraadRotationDecree::ReceivedVotes' has a wrong offset!");
static_assert(offsetof(FLandsraadRotationDecree, OpenVotes) == 0x00000C, "Member 'FLandsraadRotationDecree::OpenVotes' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorServerTrackingState
// 0x000C (0x0018 - 0x000C)
struct FActorServerTrackingState final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              m_ActorId;                                         // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorServerTrackingState) == 0x000008, "Wrong alignment on FActorServerTrackingState");
static_assert(sizeof(FActorServerTrackingState) == 0x000018, "Wrong size on FActorServerTrackingState");
static_assert(offsetof(FActorServerTrackingState, m_ActorId) == 0x000010, "Member 'FActorServerTrackingState::m_ActorId' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorServerTrackingStateList
// 0x0098 (0x01C0 - 0x0128)
struct alignas(0x10) FActorServerTrackingStateList final : public FFastArraySerializer
{
public:
	TArray<struct FActorServerTrackingState>      m_Actors;                                          // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x88];                                     // 0x0138(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorServerTrackingStateList) == 0x000010, "Wrong alignment on FActorServerTrackingStateList");
static_assert(sizeof(FActorServerTrackingStateList) == 0x0001C0, "Wrong size on FActorServerTrackingStateList");
static_assert(offsetof(FActorServerTrackingStateList, m_Actors) == 0x000128, "Member 'FActorServerTrackingStateList::m_Actors' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadProgressUpdatedPayload
// 0x0001 (0x0001 - 0x0000)
struct FLandsraadProgressUpdatedPayload final
{
public:
	bool                                          Changed;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadProgressUpdatedPayload) == 0x000001, "Wrong alignment on FLandsraadProgressUpdatedPayload");
static_assert(sizeof(FLandsraadProgressUpdatedPayload) == 0x000001, "Wrong size on FLandsraadProgressUpdatedPayload");
static_assert(offsetof(FLandsraadProgressUpdatedPayload, Changed) == 0x000000, "Member 'FLandsraadProgressUpdatedPayload::Changed' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadGuildVoteChangedPayload
// 0x0010 (0x0010 - 0x0000)
struct FLandsraadGuildVoteChangedPayload final
{
public:
	TArray<int64>                                 GuildIds;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadGuildVoteChangedPayload) == 0x000008, "Wrong alignment on FLandsraadGuildVoteChangedPayload");
static_assert(sizeof(FLandsraadGuildVoteChangedPayload) == 0x000010, "Wrong size on FLandsraadGuildVoteChangedPayload");
static_assert(offsetof(FLandsraadGuildVoteChangedPayload, GuildIds) == 0x000000, "Member 'FLandsraadGuildVoteChangedPayload::GuildIds' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadHouseRewardsChangedPayload
// 0x0008 (0x0008 - 0x0000)
struct FLandsraadHouseRewardsChangedPayload final
{
public:
	int64                                         PlayerId;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadHouseRewardsChangedPayload) == 0x000008, "Wrong alignment on FLandsraadHouseRewardsChangedPayload");
static_assert(sizeof(FLandsraadHouseRewardsChangedPayload) == 0x000008, "Wrong size on FLandsraadHouseRewardsChangedPayload");
static_assert(offsetof(FLandsraadHouseRewardsChangedPayload, PlayerId) == 0x000000, "Member 'FLandsraadHouseRewardsChangedPayload::PlayerId' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneSurveyProbeParameters
// 0x0038 (0x0038 - 0x0000)
struct FDuneSurveyProbeParameters final
{
public:
	struct FVector                                m_GoalLocation;                                    // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_StartLocation;                                   // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxDistanceToInstigator;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneSurveyProbeParameters) == 0x000008, "Wrong alignment on FDuneSurveyProbeParameters");
static_assert(sizeof(FDuneSurveyProbeParameters) == 0x000038, "Wrong size on FDuneSurveyProbeParameters");
static_assert(offsetof(FDuneSurveyProbeParameters, m_GoalLocation) == 0x000000, "Member 'FDuneSurveyProbeParameters::m_GoalLocation' has a wrong offset!");
static_assert(offsetof(FDuneSurveyProbeParameters, m_StartLocation) == 0x000018, "Member 'FDuneSurveyProbeParameters::m_StartLocation' has a wrong offset!");
static_assert(offsetof(FDuneSurveyProbeParameters, m_MaxDistanceToInstigator) == 0x000030, "Member 'FDuneSurveyProbeParameters::m_MaxDistanceToInstigator' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadState
// 0x0040 (0x0040 - 0x0000)
struct FLandsraadState final
{
public:
	int64                                         m_CurrentTermId;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              m_CurrentTermStart;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              m_CurrentTermEnd;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_ActiveDecreeName;                                // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFaction                              m_ReigningFaction;                                 // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFaction                              m_WinningFaction;                                  // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_ElectedDecreeName;                               // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandsraadPeriod                              m_CurrentPeriod;                                   // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandsraadStatus                              m_LandsraadStatus;                                 // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bTestTerm;                                       // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandsraadState) == 0x000008, "Wrong alignment on FLandsraadState");
static_assert(sizeof(FLandsraadState) == 0x000040, "Wrong size on FLandsraadState");
static_assert(offsetof(FLandsraadState, m_CurrentTermId) == 0x000000, "Member 'FLandsraadState::m_CurrentTermId' has a wrong offset!");
static_assert(offsetof(FLandsraadState, m_CurrentTermStart) == 0x000008, "Member 'FLandsraadState::m_CurrentTermStart' has a wrong offset!");
static_assert(offsetof(FLandsraadState, m_CurrentTermEnd) == 0x000010, "Member 'FLandsraadState::m_CurrentTermEnd' has a wrong offset!");
static_assert(offsetof(FLandsraadState, m_ActiveDecreeName) == 0x000018, "Member 'FLandsraadState::m_ActiveDecreeName' has a wrong offset!");
static_assert(offsetof(FLandsraadState, m_ReigningFaction) == 0x000020, "Member 'FLandsraadState::m_ReigningFaction' has a wrong offset!");
static_assert(offsetof(FLandsraadState, m_WinningFaction) == 0x000028, "Member 'FLandsraadState::m_WinningFaction' has a wrong offset!");
static_assert(offsetof(FLandsraadState, m_ElectedDecreeName) == 0x000030, "Member 'FLandsraadState::m_ElectedDecreeName' has a wrong offset!");
static_assert(offsetof(FLandsraadState, m_CurrentPeriod) == 0x000038, "Member 'FLandsraadState::m_CurrentPeriod' has a wrong offset!");
static_assert(offsetof(FLandsraadState, m_LandsraadStatus) == 0x000039, "Member 'FLandsraadState::m_LandsraadStatus' has a wrong offset!");
static_assert(offsetof(FLandsraadState, m_bTestTerm) == 0x00003A, "Member 'FLandsraadState::m_bTestTerm' has a wrong offset!");

// ScriptStruct DuneSandbox.ActionResult
// 0x0068 (0x0068 - 0x0000)
struct FActionResult final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerActionSystemMessage*             m_ExtraFailInfo;                                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x40];                                      // 0x0028(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionResult) == 0x000008, "Wrong alignment on FActionResult");
static_assert(sizeof(FActionResult) == 0x000068, "Wrong size on FActionResult");
static_assert(offsetof(FActionResult, m_ExtraFailInfo) == 0x000020, "Member 'FActionResult::m_ExtraFailInfo' has a wrong offset!");

// ScriptStruct DuneSandbox.ServerVerifyShotData
// 0x0040 (0x0040 - 0x0000)
struct FServerVerifyShotData final
{
public:
	TArray<struct FHitResult>                     m_HitResults;                                      // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FPredictionKey>                 m_HitResultPredictionKeys;                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                m_InstigatorActorLocation;                         // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsFireStart;                                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerVerifyShotData) == 0x000008, "Wrong alignment on FServerVerifyShotData");
static_assert(sizeof(FServerVerifyShotData) == 0x000040, "Wrong size on FServerVerifyShotData");
static_assert(offsetof(FServerVerifyShotData, m_HitResults) == 0x000000, "Member 'FServerVerifyShotData::m_HitResults' has a wrong offset!");
static_assert(offsetof(FServerVerifyShotData, m_HitResultPredictionKeys) == 0x000010, "Member 'FServerVerifyShotData::m_HitResultPredictionKeys' has a wrong offset!");
static_assert(offsetof(FServerVerifyShotData, m_InstigatorActorLocation) == 0x000020, "Member 'FServerVerifyShotData::m_InstigatorActorLocation' has a wrong offset!");
static_assert(offsetof(FServerVerifyShotData, m_bIsFireStart) == 0x000038, "Member 'FServerVerifyShotData::m_bIsFireStart' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneIgwServerConnectionTickFunction
// 0x0008 (0x0060 - 0x0058)
struct FDuneIgwServerConnectionTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneIgwServerConnectionTickFunction) == 0x000008, "Wrong alignment on FDuneIgwServerConnectionTickFunction");
static_assert(sizeof(FDuneIgwServerConnectionTickFunction) == 0x000060, "Wrong size on FDuneIgwServerConnectionTickFunction");

// ScriptStruct DuneSandbox.LandsraadConditionState
// 0x000C (0x000C - 0x0000)
struct FLandsraadConditionState final
{
public:
	class FName                                   m_ConditionName;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Factor;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadConditionState) == 0x000004, "Wrong alignment on FLandsraadConditionState");
static_assert(sizeof(FLandsraadConditionState) == 0x00000C, "Wrong size on FLandsraadConditionState");
static_assert(offsetof(FLandsraadConditionState, m_ConditionName) == 0x000000, "Member 'FLandsraadConditionState::m_ConditionName' has a wrong offset!");
static_assert(offsetof(FLandsraadConditionState, m_Factor) == 0x000008, "Member 'FLandsraadConditionState::m_Factor' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadTaskState
// 0x0040 (0x0040 - 0x0000)
struct FLandsraadTaskState final
{
public:
	int32                                         m_BoardIndex;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_TaskName;                                        // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bRevealed;                                       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_GoalAmount;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLandsraadConditionState>       m_ConditionStates;                                 // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLandsraadTaskRewardData>       m_Rewards;                                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              m_Timestamp;                                       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadTaskState) == 0x000008, "Wrong alignment on FLandsraadTaskState");
static_assert(sizeof(FLandsraadTaskState) == 0x000040, "Wrong size on FLandsraadTaskState");
static_assert(offsetof(FLandsraadTaskState, m_BoardIndex) == 0x000000, "Member 'FLandsraadTaskState::m_BoardIndex' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskState, m_TaskName) == 0x000004, "Member 'FLandsraadTaskState::m_TaskName' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskState, m_bRevealed) == 0x00000C, "Member 'FLandsraadTaskState::m_bRevealed' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskState, m_GoalAmount) == 0x000010, "Member 'FLandsraadTaskState::m_GoalAmount' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskState, m_ConditionStates) == 0x000018, "Member 'FLandsraadTaskState::m_ConditionStates' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskState, m_Rewards) == 0x000028, "Member 'FLandsraadTaskState::m_Rewards' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskState, m_Timestamp) == 0x000038, "Member 'FLandsraadTaskState::m_Timestamp' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponModAnimationsRowBase
// 0x0710 (0x0720 - 0x0010)
struct FWeaponModAnimationsRowBase final : public FTableRowBase
{
public:
	bool                                          bCanOverrideCalmTimeThreshold;                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOverrideMinFireTime;                           // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOverrideReloadTime;                            // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOverrideHolsterPosition;                       // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmTimeThreshold;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumFireTime;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadTime;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponHolsterPosition                        WeaponHolsterPostion;                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimSequence>           SprintAnimSequence;                                // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBlendSpace>             StandingHandPoseBlendspace;                        // 0x0058(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBlendSpace>             CrouchingHandPoseBlendspace;                       // 0x0088(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBlendSpace>             StandingWeaponHandPoseBlendspace;                  // 0x00B8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBlendSpace>             CrouchingWeaponHandPoseBlendspace;                 // 0x00E8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            UnholsterMontage;                                  // 0x0118(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            CrouchUnholsterMontage;                            // 0x0148(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            HolsterMontage;                                    // 0x0178(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            CrouchHolsterMontage;                              // 0x01A8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            FireMontage;                                       // 0x01D8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            FireMontageCrouching;                              // 0x0208(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            ReadyReloadMontage;                                // 0x0238(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            ReloadMontage;                                     // 0x0268(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            ReadyReloadMontageCrouching;                       // 0x0298(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            ReloadMontageCrouching;                            // 0x02C8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AltFireMontage;                                    // 0x02F8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AltFireMontageCrouching;                           // 0x0328(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            SpinupMontage;                                     // 0x0358(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            SpinupMontageCrouching;                            // 0x0388(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            WeaponSpinupMontage;                               // 0x03B8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            WeaponSpinupMontageCrouching;                      // 0x03E8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAimOffsetBlendSpace>    AO_Aim;                                            // 0x0418(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAimOffsetBlendSpace>    AO_Ready;                                          // 0x0448(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAimOffsetBlendSpace>    AO_Calm;                                           // 0x0478(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBlendSpace>             EquipBlendSpace;                                   // 0x04A8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBlendSpace>             CrouchEquipBlendSpace;                             // 0x04D8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideUseInSectionFromSecondaryOnStartSprint;   // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInSectionFromSecondaryOnStartSprint;           // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideUseOutSectionFromSecondaryOnStopSprint;   // 0x050A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOutSectionFromSecondaryOnStopSprint;           // 0x050B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            WeaponFireMontage;                                 // 0x0510(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            WeaponReadyReloadMontage;                          // 0x0540(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            WeaponReloadMontage;                               // 0x0570(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            CrouchWeaponFireMontage;                           // 0x05A0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            CrouchWeaponReadyReloadMontage;                    // 0x05D0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            CrouchWeaponReloadMontage;                         // 0x0600(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            WeaponHolsterPoseMontage;                          // 0x0630(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            WeaponUnholsterPoseMontage;                        // 0x0660(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            WeaponCrouchHolsterPoseMontage;                    // 0x0690(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            WeaponCrouchUnholsterPoseMontage;                  // 0x06C0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            WeaponSecondaryPoseMontage;                        // 0x06F0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponModAnimationsRowBase) == 0x000008, "Wrong alignment on FWeaponModAnimationsRowBase");
static_assert(sizeof(FWeaponModAnimationsRowBase) == 0x000720, "Wrong size on FWeaponModAnimationsRowBase");
static_assert(offsetof(FWeaponModAnimationsRowBase, bCanOverrideCalmTimeThreshold) == 0x000010, "Member 'FWeaponModAnimationsRowBase::bCanOverrideCalmTimeThreshold' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, bCanOverrideMinFireTime) == 0x000011, "Member 'FWeaponModAnimationsRowBase::bCanOverrideMinFireTime' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, bCanOverrideReloadTime) == 0x000012, "Member 'FWeaponModAnimationsRowBase::bCanOverrideReloadTime' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, bCanOverrideHolsterPosition) == 0x000013, "Member 'FWeaponModAnimationsRowBase::bCanOverrideHolsterPosition' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, CalmTimeThreshold) == 0x000014, "Member 'FWeaponModAnimationsRowBase::CalmTimeThreshold' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, MinimumFireTime) == 0x000018, "Member 'FWeaponModAnimationsRowBase::MinimumFireTime' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, ReloadTime) == 0x00001C, "Member 'FWeaponModAnimationsRowBase::ReloadTime' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponHolsterPostion) == 0x000020, "Member 'FWeaponModAnimationsRowBase::WeaponHolsterPostion' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, SprintAnimSequence) == 0x000028, "Member 'FWeaponModAnimationsRowBase::SprintAnimSequence' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, StandingHandPoseBlendspace) == 0x000058, "Member 'FWeaponModAnimationsRowBase::StandingHandPoseBlendspace' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, CrouchingHandPoseBlendspace) == 0x000088, "Member 'FWeaponModAnimationsRowBase::CrouchingHandPoseBlendspace' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, StandingWeaponHandPoseBlendspace) == 0x0000B8, "Member 'FWeaponModAnimationsRowBase::StandingWeaponHandPoseBlendspace' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, CrouchingWeaponHandPoseBlendspace) == 0x0000E8, "Member 'FWeaponModAnimationsRowBase::CrouchingWeaponHandPoseBlendspace' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, UnholsterMontage) == 0x000118, "Member 'FWeaponModAnimationsRowBase::UnholsterMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, CrouchUnholsterMontage) == 0x000148, "Member 'FWeaponModAnimationsRowBase::CrouchUnholsterMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, HolsterMontage) == 0x000178, "Member 'FWeaponModAnimationsRowBase::HolsterMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, CrouchHolsterMontage) == 0x0001A8, "Member 'FWeaponModAnimationsRowBase::CrouchHolsterMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, FireMontage) == 0x0001D8, "Member 'FWeaponModAnimationsRowBase::FireMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, FireMontageCrouching) == 0x000208, "Member 'FWeaponModAnimationsRowBase::FireMontageCrouching' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, ReadyReloadMontage) == 0x000238, "Member 'FWeaponModAnimationsRowBase::ReadyReloadMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, ReloadMontage) == 0x000268, "Member 'FWeaponModAnimationsRowBase::ReloadMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, ReadyReloadMontageCrouching) == 0x000298, "Member 'FWeaponModAnimationsRowBase::ReadyReloadMontageCrouching' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, ReloadMontageCrouching) == 0x0002C8, "Member 'FWeaponModAnimationsRowBase::ReloadMontageCrouching' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, AltFireMontage) == 0x0002F8, "Member 'FWeaponModAnimationsRowBase::AltFireMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, AltFireMontageCrouching) == 0x000328, "Member 'FWeaponModAnimationsRowBase::AltFireMontageCrouching' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, SpinupMontage) == 0x000358, "Member 'FWeaponModAnimationsRowBase::SpinupMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, SpinupMontageCrouching) == 0x000388, "Member 'FWeaponModAnimationsRowBase::SpinupMontageCrouching' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponSpinupMontage) == 0x0003B8, "Member 'FWeaponModAnimationsRowBase::WeaponSpinupMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponSpinupMontageCrouching) == 0x0003E8, "Member 'FWeaponModAnimationsRowBase::WeaponSpinupMontageCrouching' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, AO_Aim) == 0x000418, "Member 'FWeaponModAnimationsRowBase::AO_Aim' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, AO_Ready) == 0x000448, "Member 'FWeaponModAnimationsRowBase::AO_Ready' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, AO_Calm) == 0x000478, "Member 'FWeaponModAnimationsRowBase::AO_Calm' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, EquipBlendSpace) == 0x0004A8, "Member 'FWeaponModAnimationsRowBase::EquipBlendSpace' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, CrouchEquipBlendSpace) == 0x0004D8, "Member 'FWeaponModAnimationsRowBase::CrouchEquipBlendSpace' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, bOverrideUseInSectionFromSecondaryOnStartSprint) == 0x000508, "Member 'FWeaponModAnimationsRowBase::bOverrideUseInSectionFromSecondaryOnStartSprint' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, bUseInSectionFromSecondaryOnStartSprint) == 0x000509, "Member 'FWeaponModAnimationsRowBase::bUseInSectionFromSecondaryOnStartSprint' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, bOverrideUseOutSectionFromSecondaryOnStopSprint) == 0x00050A, "Member 'FWeaponModAnimationsRowBase::bOverrideUseOutSectionFromSecondaryOnStopSprint' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, bUseOutSectionFromSecondaryOnStopSprint) == 0x00050B, "Member 'FWeaponModAnimationsRowBase::bUseOutSectionFromSecondaryOnStopSprint' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponFireMontage) == 0x000510, "Member 'FWeaponModAnimationsRowBase::WeaponFireMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponReadyReloadMontage) == 0x000540, "Member 'FWeaponModAnimationsRowBase::WeaponReadyReloadMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponReloadMontage) == 0x000570, "Member 'FWeaponModAnimationsRowBase::WeaponReloadMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, CrouchWeaponFireMontage) == 0x0005A0, "Member 'FWeaponModAnimationsRowBase::CrouchWeaponFireMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, CrouchWeaponReadyReloadMontage) == 0x0005D0, "Member 'FWeaponModAnimationsRowBase::CrouchWeaponReadyReloadMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, CrouchWeaponReloadMontage) == 0x000600, "Member 'FWeaponModAnimationsRowBase::CrouchWeaponReloadMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponHolsterPoseMontage) == 0x000630, "Member 'FWeaponModAnimationsRowBase::WeaponHolsterPoseMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponUnholsterPoseMontage) == 0x000660, "Member 'FWeaponModAnimationsRowBase::WeaponUnholsterPoseMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponCrouchHolsterPoseMontage) == 0x000690, "Member 'FWeaponModAnimationsRowBase::WeaponCrouchHolsterPoseMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponCrouchUnholsterPoseMontage) == 0x0006C0, "Member 'FWeaponModAnimationsRowBase::WeaponCrouchUnholsterPoseMontage' has a wrong offset!");
static_assert(offsetof(FWeaponModAnimationsRowBase, WeaponSecondaryPoseMontage) == 0x0006F0, "Member 'FWeaponModAnimationsRowBase::WeaponSecondaryPoseMontage' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadBoardTaskState
// 0x0010 (0x0010 - 0x0000)
struct FLandsraadBoardTaskState final
{
public:
	TArray<struct FLandsraadTaskState>            m_TaskStates;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadBoardTaskState) == 0x000008, "Wrong alignment on FLandsraadBoardTaskState");
static_assert(sizeof(FLandsraadBoardTaskState) == 0x000010, "Wrong size on FLandsraadBoardTaskState");
static_assert(offsetof(FLandsraadBoardTaskState, m_TaskStates) == 0x000000, "Member 'FLandsraadBoardTaskState::m_TaskStates' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadGuildContribution
// 0x0014 (0x0014 - 0x0000)
struct FLandsraadGuildContribution final
{
public:
	struct FEFaction                              m_Faction;                                         // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_GuildName;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VotingInfluence;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadGuildContribution) == 0x000004, "Wrong alignment on FLandsraadGuildContribution");
static_assert(sizeof(FLandsraadGuildContribution) == 0x000014, "Wrong size on FLandsraadGuildContribution");
static_assert(offsetof(FLandsraadGuildContribution, m_Faction) == 0x000000, "Member 'FLandsraadGuildContribution::m_Faction' has a wrong offset!");
static_assert(offsetof(FLandsraadGuildContribution, m_GuildName) == 0x000008, "Member 'FLandsraadGuildContribution::m_GuildName' has a wrong offset!");
static_assert(offsetof(FLandsraadGuildContribution, m_VotingInfluence) == 0x000010, "Member 'FLandsraadGuildContribution::m_VotingInfluence' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadHouseReward
// 0x0014 (0x0014 - 0x0000)
struct FLandsraadHouseReward final
{
public:
	class FName                                   m_HouseName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Amount;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadHouseReward) == 0x000004, "Wrong alignment on FLandsraadHouseReward");
static_assert(sizeof(FLandsraadHouseReward) == 0x000014, "Wrong size on FLandsraadHouseReward");
static_assert(offsetof(FLandsraadHouseReward, m_HouseName) == 0x000000, "Member 'FLandsraadHouseReward::m_HouseName' has a wrong offset!");
static_assert(offsetof(FLandsraadHouseReward, m_ItemTemplateId) == 0x000008, "Member 'FLandsraadHouseReward::m_ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FLandsraadHouseReward, m_Amount) == 0x000010, "Member 'FLandsraadHouseReward::m_Amount' has a wrong offset!");

// ScriptStruct DuneSandbox.BattlegroupsMapSettings
// 0x0018 (0x0018 - 0x0000)
struct FBattlegroupsMapSettings final
{
public:
	class FString                                 SelectionRule;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayerCapacity;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStartingMap;                                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlegroupsMapSettings) == 0x000008, "Wrong alignment on FBattlegroupsMapSettings");
static_assert(sizeof(FBattlegroupsMapSettings) == 0x000018, "Wrong size on FBattlegroupsMapSettings");
static_assert(offsetof(FBattlegroupsMapSettings, SelectionRule) == 0x000000, "Member 'FBattlegroupsMapSettings::SelectionRule' has a wrong offset!");
static_assert(offsetof(FBattlegroupsMapSettings, MaxPlayerCapacity) == 0x000010, "Member 'FBattlegroupsMapSettings::MaxPlayerCapacity' has a wrong offset!");
static_assert(offsetof(FBattlegroupsMapSettings, IsStartingMap) == 0x000014, "Member 'FBattlegroupsMapSettings::IsStartingMap' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadTermTaskTelemetry
// 0x0014 (0x0014 - 0x0000)
struct FLandsraadTermTaskTelemetry final
{
public:
	class FName                                   m_TaskName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bRevealed;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCompleted;                                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_ParticipantCount;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_BoardIndex;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadTermTaskTelemetry) == 0x000004, "Wrong alignment on FLandsraadTermTaskTelemetry");
static_assert(sizeof(FLandsraadTermTaskTelemetry) == 0x000014, "Wrong size on FLandsraadTermTaskTelemetry");
static_assert(offsetof(FLandsraadTermTaskTelemetry, m_TaskName) == 0x000000, "Member 'FLandsraadTermTaskTelemetry::m_TaskName' has a wrong offset!");
static_assert(offsetof(FLandsraadTermTaskTelemetry, m_bRevealed) == 0x000008, "Member 'FLandsraadTermTaskTelemetry::m_bRevealed' has a wrong offset!");
static_assert(offsetof(FLandsraadTermTaskTelemetry, m_bCompleted) == 0x000009, "Member 'FLandsraadTermTaskTelemetry::m_bCompleted' has a wrong offset!");
static_assert(offsetof(FLandsraadTermTaskTelemetry, m_ParticipantCount) == 0x00000C, "Member 'FLandsraadTermTaskTelemetry::m_ParticipantCount' has a wrong offset!");
static_assert(offsetof(FLandsraadTermTaskTelemetry, m_BoardIndex) == 0x000010, "Member 'FLandsraadTermTaskTelemetry::m_BoardIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadReward
// 0x0010 (0x0010 - 0x0000)
struct FLandsraadReward final
{
public:
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Amount;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_RewardWeight;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadReward) == 0x000004, "Wrong alignment on FLandsraadReward");
static_assert(sizeof(FLandsraadReward) == 0x000010, "Wrong size on FLandsraadReward");
static_assert(offsetof(FLandsraadReward, m_ItemTemplateId) == 0x000000, "Member 'FLandsraadReward::m_ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FLandsraadReward, m_Amount) == 0x000008, "Member 'FLandsraadReward::m_Amount' has a wrong offset!");
static_assert(offsetof(FLandsraadReward, m_RewardWeight) == 0x00000C, "Member 'FLandsraadReward::m_RewardWeight' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadRewardTier
// 0x0018 (0x0018 - 0x0000)
struct FLandsraadRewardTier final
{
public:
	int32                                         m_Threshold;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLandsraadReward>               m_RewardPool;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadRewardTier) == 0x000008, "Wrong alignment on FLandsraadRewardTier");
static_assert(sizeof(FLandsraadRewardTier) == 0x000018, "Wrong size on FLandsraadRewardTier");
static_assert(offsetof(FLandsraadRewardTier, m_Threshold) == 0x000000, "Member 'FLandsraadRewardTier::m_Threshold' has a wrong offset!");
static_assert(offsetof(FLandsraadRewardTier, m_RewardPool) == 0x000008, "Member 'FLandsraadRewardTier::m_RewardPool' has a wrong offset!");

// ScriptStruct DuneSandbox.FillableUpdate
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FFillableUpdate final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFillableUpdate) == 0x000004, "Wrong alignment on FFillableUpdate");
static_assert(sizeof(FFillableUpdate) == 0x00000C, "Wrong size on FFillableUpdate");

// ScriptStruct DuneSandbox.LootContainerComponent
// 0x0078 (0x0078 - 0x0000)
struct FLootContainerComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeSpanInSeconds;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpanAfterInteractionInSeconds;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsSinceCreation;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsSinceLastInteraction;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPerPlayer;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FELootContainerType                    ContainerType;                                     // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FEntityId>                        CharactersInteracting;                             // 0x0028(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootContainerComponent) == 0x000008, "Wrong alignment on FLootContainerComponent");
static_assert(sizeof(FLootContainerComponent) == 0x000078, "Wrong size on FLootContainerComponent");
static_assert(offsetof(FLootContainerComponent, LifeSpanInSeconds) == 0x000008, "Member 'FLootContainerComponent::LifeSpanInSeconds' has a wrong offset!");
static_assert(offsetof(FLootContainerComponent, LifeSpanAfterInteractionInSeconds) == 0x00000C, "Member 'FLootContainerComponent::LifeSpanAfterInteractionInSeconds' has a wrong offset!");
static_assert(offsetof(FLootContainerComponent, SecondsSinceCreation) == 0x000010, "Member 'FLootContainerComponent::SecondsSinceCreation' has a wrong offset!");
static_assert(offsetof(FLootContainerComponent, SecondsSinceLastInteraction) == 0x000014, "Member 'FLootContainerComponent::SecondsSinceLastInteraction' has a wrong offset!");
static_assert(offsetof(FLootContainerComponent, bIsPerPlayer) == 0x000018, "Member 'FLootContainerComponent::bIsPerPlayer' has a wrong offset!");
static_assert(offsetof(FLootContainerComponent, bIsEnabled) == 0x000019, "Member 'FLootContainerComponent::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FLootContainerComponent, ContainerType) == 0x00001C, "Member 'FLootContainerComponent::ContainerType' has a wrong offset!");
static_assert(offsetof(FLootContainerComponent, CharactersInteracting) == 0x000028, "Member 'FLootContainerComponent::CharactersInteracting' has a wrong offset!");

// ScriptStruct DuneSandbox.LootDistributionSettingsRowBase
// 0x00F0 (0x0100 - 0x0010)
struct FLootDistributionSettingsRowBase final : public FTableRowBase
{
public:
	bool                                          bIsEnabled;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ForbiddenTags;                                     // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FELootContainerType                    LootContainerType;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LootTable;                                         // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LootWeightedTable;                                 // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumRespawnTimeInSec;                           // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumRespawnTimeInSec;                           // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLifespanAfterInteractionIfShared;         // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            LifespanAfterInteractionInSecOverrideIfShared;     // 0x00CC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLifespanAfterInteractionIfInstanced;      // 0x00DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            LifespanAfterInteractionInSecOverrideIfInstanced;  // 0x00E0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            ContainedWater;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootDistributionSettingsRowBase) == 0x000008, "Wrong alignment on FLootDistributionSettingsRowBase");
static_assert(sizeof(FLootDistributionSettingsRowBase) == 0x000100, "Wrong size on FLootDistributionSettingsRowBase");
static_assert(offsetof(FLootDistributionSettingsRowBase, bIsEnabled) == 0x000010, "Member 'FLootDistributionSettingsRowBase::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, Priority) == 0x000014, "Member 'FLootDistributionSettingsRowBase::Priority' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, RequiredTags) == 0x000018, "Member 'FLootDistributionSettingsRowBase::RequiredTags' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, ForbiddenTags) == 0x000038, "Member 'FLootDistributionSettingsRowBase::ForbiddenTags' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, LootContainerType) == 0x000058, "Member 'FLootDistributionSettingsRowBase::LootContainerType' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, LootTable) == 0x000060, "Member 'FLootDistributionSettingsRowBase::LootTable' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, LootWeightedTable) == 0x000090, "Member 'FLootDistributionSettingsRowBase::LootWeightedTable' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, MinimumRespawnTimeInSec) == 0x0000C0, "Member 'FLootDistributionSettingsRowBase::MinimumRespawnTimeInSec' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, MaximumRespawnTimeInSec) == 0x0000C4, "Member 'FLootDistributionSettingsRowBase::MaximumRespawnTimeInSec' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, bOverrideLifespanAfterInteractionIfShared) == 0x0000C8, "Member 'FLootDistributionSettingsRowBase::bOverrideLifespanAfterInteractionIfShared' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, LifespanAfterInteractionInSecOverrideIfShared) == 0x0000CC, "Member 'FLootDistributionSettingsRowBase::LifespanAfterInteractionInSecOverrideIfShared' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, bOverrideLifespanAfterInteractionIfInstanced) == 0x0000DC, "Member 'FLootDistributionSettingsRowBase::bOverrideLifespanAfterInteractionIfInstanced' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, LifespanAfterInteractionInSecOverrideIfInstanced) == 0x0000E0, "Member 'FLootDistributionSettingsRowBase::LifespanAfterInteractionInSecOverrideIfInstanced' has a wrong offset!");
static_assert(offsetof(FLootDistributionSettingsRowBase, ContainedWater) == 0x0000F0, "Member 'FLootDistributionSettingsRowBase::ContainedWater' has a wrong offset!");

// ScriptStruct DuneSandbox.CCVisibleScreenPresetTexture
// 0x0040 (0x0040 - 0x0000)
struct FCCVisibleScreenPresetTexture final
{
public:
	int32                                         PresetScreenDataIndex;                             // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BannerTexture;                                     // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BannerSoftTexture;                                 // 0x0010(0x0030)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCCVisibleScreenPresetTexture) == 0x000008, "Wrong alignment on FCCVisibleScreenPresetTexture");
static_assert(sizeof(FCCVisibleScreenPresetTexture) == 0x000040, "Wrong size on FCCVisibleScreenPresetTexture");
static_assert(offsetof(FCCVisibleScreenPresetTexture, PresetScreenDataIndex) == 0x000000, "Member 'FCCVisibleScreenPresetTexture::PresetScreenDataIndex' has a wrong offset!");
static_assert(offsetof(FCCVisibleScreenPresetTexture, BannerTexture) == 0x000008, "Member 'FCCVisibleScreenPresetTexture::BannerTexture' has a wrong offset!");
static_assert(offsetof(FCCVisibleScreenPresetTexture, BannerSoftTexture) == 0x000010, "Member 'FCCVisibleScreenPresetTexture::BannerSoftTexture' has a wrong offset!");

// ScriptStruct DuneSandbox.CCVisibleScreenPresetTextureArray
// 0x0010 (0x0010 - 0x0000)
struct FCCVisibleScreenPresetTextureArray final
{
public:
	TArray<struct FCCVisibleScreenPresetTexture>  VisiblePresetTextures;                             // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCCVisibleScreenPresetTextureArray) == 0x000008, "Wrong alignment on FCCVisibleScreenPresetTextureArray");
static_assert(sizeof(FCCVisibleScreenPresetTextureArray) == 0x000010, "Wrong size on FCCVisibleScreenPresetTextureArray");
static_assert(offsetof(FCCVisibleScreenPresetTextureArray, VisiblePresetTextures) == 0x000000, "Member 'FCCVisibleScreenPresetTextureArray::VisiblePresetTextures' has a wrong offset!");

// ScriptStruct DuneSandbox.FillableSpawnSettings
// 0x000C (0x000C - 0x0000)
struct FFillableSpawnSettings final
{
public:
	bool                                          bShouldFill;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinFillablePercent;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFillablePercent;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFillableSpawnSettings) == 0x000004, "Wrong alignment on FFillableSpawnSettings");
static_assert(sizeof(FFillableSpawnSettings) == 0x00000C, "Wrong size on FFillableSpawnSettings");
static_assert(offsetof(FFillableSpawnSettings, bShouldFill) == 0x000000, "Member 'FFillableSpawnSettings::bShouldFill' has a wrong offset!");
static_assert(offsetof(FFillableSpawnSettings, MinFillablePercent) == 0x000004, "Member 'FFillableSpawnSettings::MinFillablePercent' has a wrong offset!");
static_assert(offsetof(FFillableSpawnSettings, MaxFillablePercent) == 0x000008, "Member 'FFillableSpawnSettings::MaxFillablePercent' has a wrong offset!");

// ScriptStruct DuneSandbox.LootSpawnerComponent
// 0x00A0 (0x00A0 - 0x0000)
struct FLootSpawnerComponent final
{
public:
	struct FELootContainerType                    LootContainerType;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LootTable;                                         // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LootWeightedTable;                                 // 0x0038(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToSurface;                                    // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x2F];                                      // 0x0069(0x002F)(Fixing Size After Last Property [ Dumper-7 ])
	EActorLightingChannelOption                   UseLightingChannel1;                               // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLootSpawnerComponent) == 0x000008, "Wrong alignment on FLootSpawnerComponent");
static_assert(sizeof(FLootSpawnerComponent) == 0x0000A0, "Wrong size on FLootSpawnerComponent");
static_assert(offsetof(FLootSpawnerComponent, LootContainerType) == 0x000000, "Member 'FLootSpawnerComponent::LootContainerType' has a wrong offset!");
static_assert(offsetof(FLootSpawnerComponent, LootTable) == 0x000008, "Member 'FLootSpawnerComponent::LootTable' has a wrong offset!");
static_assert(offsetof(FLootSpawnerComponent, LootWeightedTable) == 0x000038, "Member 'FLootSpawnerComponent::LootWeightedTable' has a wrong offset!");
static_assert(offsetof(FLootSpawnerComponent, bSnapToSurface) == 0x000068, "Member 'FLootSpawnerComponent::bSnapToSurface' has a wrong offset!");
static_assert(offsetof(FLootSpawnerComponent, UseLightingChannel1) == 0x000098, "Member 'FLootSpawnerComponent::UseLightingChannel1' has a wrong offset!");

// ScriptStruct DuneSandbox.DimensionInfoContainer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDimensionInfoContainer final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDimensionInfoContainer) == 0x000008, "Wrong alignment on FDimensionInfoContainer");
static_assert(sizeof(FDimensionInfoContainer) == 0x000010, "Wrong size on FDimensionInfoContainer");

// ScriptStruct DuneSandbox.LootWeightedTableRow
// 0x0010 (0x0128 - 0x0118)
struct FLootWeightedTableRow final : public FBaseLootTableRow
{
public:
	int32                                         MinRolls;                                          // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRolls;                                          // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLootWeightedTableRow) == 0x000008, "Wrong alignment on FLootWeightedTableRow");
static_assert(sizeof(FLootWeightedTableRow) == 0x000128, "Wrong size on FLootWeightedTableRow");
static_assert(offsetof(FLootWeightedTableRow, MinRolls) == 0x000118, "Member 'FLootWeightedTableRow::MinRolls' has a wrong offset!");
static_assert(offsetof(FLootWeightedTableRow, MaxRolls) == 0x00011C, "Member 'FLootWeightedTableRow::MaxRolls' has a wrong offset!");
static_assert(offsetof(FLootWeightedTableRow, Weight) == 0x000120, "Member 'FLootWeightedTableRow::Weight' has a wrong offset!");

// ScriptStruct DuneSandbox.SinkchartCraftingStateRecipePiece
// 0x0008 (0x0008 - 0x0000)
struct FSinkchartCraftingStateRecipePiece final
{
public:
	int32                                         CurrentAmount;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredAmount;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSinkchartCraftingStateRecipePiece) == 0x000004, "Wrong alignment on FSinkchartCraftingStateRecipePiece");
static_assert(sizeof(FSinkchartCraftingStateRecipePiece) == 0x000008, "Wrong size on FSinkchartCraftingStateRecipePiece");
static_assert(offsetof(FSinkchartCraftingStateRecipePiece, CurrentAmount) == 0x000000, "Member 'FSinkchartCraftingStateRecipePiece::CurrentAmount' has a wrong offset!");
static_assert(offsetof(FSinkchartCraftingStateRecipePiece, RequiredAmount) == 0x000004, "Member 'FSinkchartCraftingStateRecipePiece::RequiredAmount' has a wrong offset!");

// ScriptStruct DuneSandbox.LoreObjectTableRow
// 0x0080 (0x0090 - 0x0010)
struct FLoreObjectTableRow final : public FTableRowBase
{
public:
	class FText                                   m_Name;                                            // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_ShortDescription;                                // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_LongDescription;                                 // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ELoreObjectType                               m_Type;                                            // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 m_FileToPlay;                                      // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoreObjectTableRow) == 0x000008, "Wrong alignment on FLoreObjectTableRow");
static_assert(sizeof(FLoreObjectTableRow) == 0x000090, "Wrong size on FLoreObjectTableRow");
static_assert(offsetof(FLoreObjectTableRow, m_Name) == 0x000010, "Member 'FLoreObjectTableRow::m_Name' has a wrong offset!");
static_assert(offsetof(FLoreObjectTableRow, m_ShortDescription) == 0x000028, "Member 'FLoreObjectTableRow::m_ShortDescription' has a wrong offset!");
static_assert(offsetof(FLoreObjectTableRow, m_LongDescription) == 0x000040, "Member 'FLoreObjectTableRow::m_LongDescription' has a wrong offset!");
static_assert(offsetof(FLoreObjectTableRow, m_Type) == 0x000058, "Member 'FLoreObjectTableRow::m_Type' has a wrong offset!");
static_assert(offsetof(FLoreObjectTableRow, m_FileToPlay) == 0x000060, "Member 'FLoreObjectTableRow::m_FileToPlay' has a wrong offset!");

// ScriptStruct DuneSandbox.LorePickupTableRow
// 0x0030 (0x0040 - 0x0010)
struct FLorePickupTableRow final : public FTableRowBase
{
public:
	class FText                                   m_Title;                                           // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_Description;                                     // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLorePickupTableRow) == 0x000008, "Wrong alignment on FLorePickupTableRow");
static_assert(sizeof(FLorePickupTableRow) == 0x000040, "Wrong size on FLorePickupTableRow");
static_assert(offsetof(FLorePickupTableRow, m_Title) == 0x000010, "Member 'FLorePickupTableRow::m_Title' has a wrong offset!");
static_assert(offsetof(FLorePickupTableRow, m_Description) == 0x000028, "Member 'FLorePickupTableRow::m_Description' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleComponent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FVehicleComponent final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentFuel;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingTimeUntilDespawn;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleComponent) == 0x000008, "Wrong alignment on FVehicleComponent");
static_assert(sizeof(FVehicleComponent) == 0x000028, "Wrong size on FVehicleComponent");
static_assert(offsetof(FVehicleComponent, CurrentFuel) == 0x000020, "Member 'FVehicleComponent::CurrentFuel' has a wrong offset!");
static_assert(offsetof(FVehicleComponent, RemainingTimeUntilDespawn) == 0x000024, "Member 'FVehicleComponent::RemainingTimeUntilDespawn' has a wrong offset!");

// ScriptStruct DuneSandbox.MapLegendRowBase
// 0x0068 (0x0078 - 0x0010)
struct FMapLegendRowBase final : public FTableRowBase
{
public:
	class FText                                   m_MarkerCategoryDisplayName;                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   m_MarkerDisplayName;                               // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_IconTexture;                                     // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEIconPresetWidgetName                 m_IconAppearance;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapLegendRowBase) == 0x000008, "Wrong alignment on FMapLegendRowBase");
static_assert(sizeof(FMapLegendRowBase) == 0x000078, "Wrong size on FMapLegendRowBase");
static_assert(offsetof(FMapLegendRowBase, m_MarkerCategoryDisplayName) == 0x000010, "Member 'FMapLegendRowBase::m_MarkerCategoryDisplayName' has a wrong offset!");
static_assert(offsetof(FMapLegendRowBase, m_MarkerDisplayName) == 0x000028, "Member 'FMapLegendRowBase::m_MarkerDisplayName' has a wrong offset!");
static_assert(offsetof(FMapLegendRowBase, m_IconTexture) == 0x000040, "Member 'FMapLegendRowBase::m_IconTexture' has a wrong offset!");
static_assert(offsetof(FMapLegendRowBase, m_IconAppearance) == 0x000070, "Member 'FMapLegendRowBase::m_IconAppearance' has a wrong offset!");

// ScriptStruct DuneSandbox.MapMarkerEvent
// 0x0010 (0x0040 - 0x0030)
struct FMapMarkerEvent final : public FGameEvent
{
public:
	struct FEMapMarker                            m_MapMarkerType;                                   // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarkerDiscoveryLevel                         m_MapMarkerDiscoveryLevel;                         // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarkerDiscoveryLevel                         m_PreviousMapMarkerDiscoveryLevel;                 // 0x0039(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarkerDiscoveryMethod                        m_MarkerDiscoveryMethod;                           // 0x003A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapMarkerEvent) == 0x000008, "Wrong alignment on FMapMarkerEvent");
static_assert(sizeof(FMapMarkerEvent) == 0x000040, "Wrong size on FMapMarkerEvent");
static_assert(offsetof(FMapMarkerEvent, m_MapMarkerType) == 0x000030, "Member 'FMapMarkerEvent::m_MapMarkerType' has a wrong offset!");
static_assert(offsetof(FMapMarkerEvent, m_MapMarkerDiscoveryLevel) == 0x000038, "Member 'FMapMarkerEvent::m_MapMarkerDiscoveryLevel' has a wrong offset!");
static_assert(offsetof(FMapMarkerEvent, m_PreviousMapMarkerDiscoveryLevel) == 0x000039, "Member 'FMapMarkerEvent::m_PreviousMapMarkerDiscoveryLevel' has a wrong offset!");
static_assert(offsetof(FMapMarkerEvent, m_MarkerDiscoveryMethod) == 0x00003A, "Member 'FMapMarkerEvent::m_MarkerDiscoveryMethod' has a wrong offset!");

// ScriptStruct DuneSandbox.MapMarkerGuiData
// 0x0098 (0x0098 - 0x0000)
struct FMapMarkerGuiData final
{
public:
	struct FEMapMarker                            MarkerType;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationRadians;                                   // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClientDynamicMarker;                            // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActorInstanceHandle                   ActorHandle;                                       // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MarkerFilterTag;                                   // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarkerId                              GroupID;                                           // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupSize;                                         // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentTweenPosition;                              // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRendered;                                      // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasVisibleLastGroupEra;                           // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapMarkerGuiData) == 0x000008, "Wrong alignment on FMapMarkerGuiData");
static_assert(sizeof(FMapMarkerGuiData) == 0x000098, "Wrong size on FMapMarkerGuiData");
static_assert(offsetof(FMapMarkerGuiData, MarkerType) == 0x000000, "Member 'FMapMarkerGuiData::MarkerType' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, WorldPosition) == 0x000008, "Member 'FMapMarkerGuiData::WorldPosition' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, RotationRadians) == 0x000020, "Member 'FMapMarkerGuiData::RotationRadians' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, bIsNew) == 0x000024, "Member 'FMapMarkerGuiData::bIsNew' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, bIsClientDynamicMarker) == 0x000025, "Member 'FMapMarkerGuiData::bIsClientDynamicMarker' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, ActorHandle) == 0x000028, "Member 'FMapMarkerGuiData::ActorHandle' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, MarkerFilterTag) == 0x000040, "Member 'FMapMarkerGuiData::MarkerFilterTag' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, GroupID) == 0x000058, "Member 'FMapMarkerGuiData::GroupID' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, GroupSize) == 0x00005C, "Member 'FMapMarkerGuiData::GroupSize' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, CurrentTweenPosition) == 0x000078, "Member 'FMapMarkerGuiData::CurrentTweenPosition' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, TimeRendered) == 0x000090, "Member 'FMapMarkerGuiData::TimeRendered' has a wrong offset!");
static_assert(offsetof(FMapMarkerGuiData, bWasVisibleLastGroupEra) == 0x000094, "Member 'FMapMarkerGuiData::bWasVisibleLastGroupEra' has a wrong offset!");

// ScriptStruct DuneSandbox.ConditionEvaluationResult
// 0x0048 (0x0048 - 0x0000)
struct FConditionEvaluationResult final
{
public:
	bool                                          bIsFulfilled;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPossibleMeleeAction                   MeleeAction;                                       // 0x0010(0x0038)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConditionEvaluationResult) == 0x000008, "Wrong alignment on FConditionEvaluationResult");
static_assert(sizeof(FConditionEvaluationResult) == 0x000048, "Wrong size on FConditionEvaluationResult");
static_assert(offsetof(FConditionEvaluationResult, bIsFulfilled) == 0x000000, "Member 'FConditionEvaluationResult::bIsFulfilled' has a wrong offset!");
static_assert(offsetof(FConditionEvaluationResult, TargetActor) == 0x000008, "Member 'FConditionEvaluationResult::TargetActor' has a wrong offset!");
static_assert(offsetof(FConditionEvaluationResult, MeleeAction) == 0x000010, "Member 'FConditionEvaluationResult::MeleeAction' has a wrong offset!");

// ScriptStruct DuneSandbox.TargetSelectionModeCurves
// 0x0010 (0x0010 - 0x0000)
struct FTargetSelectionModeCurves final
{
public:
	class UCurveFloat*                            DistanceScoreCurve;                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AngleScoreCurve;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetSelectionModeCurves) == 0x000008, "Wrong alignment on FTargetSelectionModeCurves");
static_assert(sizeof(FTargetSelectionModeCurves) == 0x000010, "Wrong size on FTargetSelectionModeCurves");
static_assert(offsetof(FTargetSelectionModeCurves, DistanceScoreCurve) == 0x000000, "Member 'FTargetSelectionModeCurves::DistanceScoreCurve' has a wrong offset!");
static_assert(offsetof(FTargetSelectionModeCurves, AngleScoreCurve) == 0x000008, "Member 'FTargetSelectionModeCurves::AngleScoreCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.PerPlayerDesyncValidationData
// 0x0018 (0x0018 - 0x0000)
struct FPerPlayerDesyncValidationData final
{
public:
	struct FVector_NetQuantize                    Location;                                          // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerPlayerDesyncValidationData) == 0x000008, "Wrong alignment on FPerPlayerDesyncValidationData");
static_assert(sizeof(FPerPlayerDesyncValidationData) == 0x000018, "Wrong size on FPerPlayerDesyncValidationData");
static_assert(offsetof(FPerPlayerDesyncValidationData, Location) == 0x000000, "Member 'FPerPlayerDesyncValidationData::Location' has a wrong offset!");

// ScriptStruct DuneSandbox.MeleeCombatSettings
// 0x0100 (0x0100 - 0x0000)
struct FMeleeCombatSettings final
{
public:
	struct FTargetSelectionModeCurves             DirectionalInputTargetSelection;                   // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTargetSelectionModeCurves             AimDirectionTargetSelection;                       // 0x0010(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SelectionModeBlendCurve;                           // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TargetOffscreenTimeWeightCurve;                    // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequiredStaminaToTriggerParry;                     // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParryStaminaCost;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockStaminaCost;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaminaBlockBreakThreshold;                        // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ParryDebuffEffectClass;                            // 0x0040(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SpiceBoostEffectClass;                             // 0x0070(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ParryDamageType;                                   // 0x00A0(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MeleeActionCostClass;                              // 0x00D0(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeCombatSettings) == 0x000008, "Wrong alignment on FMeleeCombatSettings");
static_assert(sizeof(FMeleeCombatSettings) == 0x000100, "Wrong size on FMeleeCombatSettings");
static_assert(offsetof(FMeleeCombatSettings, DirectionalInputTargetSelection) == 0x000000, "Member 'FMeleeCombatSettings::DirectionalInputTargetSelection' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, AimDirectionTargetSelection) == 0x000010, "Member 'FMeleeCombatSettings::AimDirectionTargetSelection' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, SelectionModeBlendCurve) == 0x000020, "Member 'FMeleeCombatSettings::SelectionModeBlendCurve' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, TargetOffscreenTimeWeightCurve) == 0x000028, "Member 'FMeleeCombatSettings::TargetOffscreenTimeWeightCurve' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, RequiredStaminaToTriggerParry) == 0x000030, "Member 'FMeleeCombatSettings::RequiredStaminaToTriggerParry' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, ParryStaminaCost) == 0x000034, "Member 'FMeleeCombatSettings::ParryStaminaCost' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, BlockStaminaCost) == 0x000038, "Member 'FMeleeCombatSettings::BlockStaminaCost' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, StaminaBlockBreakThreshold) == 0x00003C, "Member 'FMeleeCombatSettings::StaminaBlockBreakThreshold' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, ParryDebuffEffectClass) == 0x000040, "Member 'FMeleeCombatSettings::ParryDebuffEffectClass' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, SpiceBoostEffectClass) == 0x000070, "Member 'FMeleeCombatSettings::SpiceBoostEffectClass' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, ParryDamageType) == 0x0000A0, "Member 'FMeleeCombatSettings::ParryDamageType' has a wrong offset!");
static_assert(offsetof(FMeleeCombatSettings, MeleeActionCostClass) == 0x0000D0, "Member 'FMeleeCombatSettings::MeleeActionCostClass' has a wrong offset!");

// ScriptStruct DuneSandbox.PerPlayerLootContainerData
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FPerPlayerLootContainerData final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerPlayerLootContainerData) == 0x000010, "Wrong alignment on FPerPlayerLootContainerData");
static_assert(sizeof(FPerPlayerLootContainerData) == 0x0000F0, "Wrong size on FPerPlayerLootContainerData");

// ScriptStruct DuneSandbox.MeleeWeaponTableData
// 0x01D8 (0x01E8 - 0x0010)
struct FMeleeWeaponTableData final : public FTableRowBase
{
public:
	EMeleeType                                    WeaponType;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_SweepSocketNames;                                // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStreamableRenderAsset>  m_MeleeWeaponMesh;                                 // 0x0028(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDuneDamageType>            m_DamageTypeClass;                                 // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_MeleeDuneAudioEvent;                             // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_MeleeAttachPoint;                                // 0x0068(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApply;                          // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApplyToAttacker;                // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           m_CameraShakeFX;                                   // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   m_ForceFeedbackFX;                                 // 0x0098(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           m_CameraShakeShieldedFX;                           // 0x00A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   m_ForceFeedbackShieldedFX;                         // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MeleeDamage;                                     // 0x00B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage;                                     // 0x00B4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_BlockPoiseDamage;                                // 0x00C0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_AttackStaminaBaseCost;                           // 0x00CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlockStaminaCost;                                // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage_Shielded;                            // 0x00D4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_MeleeDamage_NPC;                                 // 0x00E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage_NPC;                                 // 0x00E4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_MeleeRangeStart;                                 // 0x00F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MeleeRangeEnd;                                   // 0x00F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, TSoftObjectPtr<class UNiagaraSystem>> m_ImpactFX;                         // 0x00F8(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EDamageBlockType, TSoftObjectPtr<class UNiagaraSystem>> m_BlockedImpactFX;                  // 0x0148(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, TSoftClassPtr<class UClass>> m_ImpactDecals;                              // 0x0198(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeWeaponTableData) == 0x000008, "Wrong alignment on FMeleeWeaponTableData");
static_assert(sizeof(FMeleeWeaponTableData) == 0x0001E8, "Wrong size on FMeleeWeaponTableData");
static_assert(offsetof(FMeleeWeaponTableData, WeaponType) == 0x000010, "Member 'FMeleeWeaponTableData::WeaponType' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_SweepSocketNames) == 0x000018, "Member 'FMeleeWeaponTableData::m_SweepSocketNames' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_MeleeWeaponMesh) == 0x000028, "Member 'FMeleeWeaponTableData::m_MeleeWeaponMesh' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_DamageTypeClass) == 0x000058, "Member 'FMeleeWeaponTableData::m_DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_MeleeDuneAudioEvent) == 0x000060, "Member 'FMeleeWeaponTableData::m_MeleeDuneAudioEvent' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_MeleeAttachPoint) == 0x000068, "Member 'FMeleeWeaponTableData::m_MeleeAttachPoint' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_GameplayEffectsToApply) == 0x000070, "Member 'FMeleeWeaponTableData::m_GameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_GameplayEffectsToApplyToAttacker) == 0x000080, "Member 'FMeleeWeaponTableData::m_GameplayEffectsToApplyToAttacker' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_CameraShakeFX) == 0x000090, "Member 'FMeleeWeaponTableData::m_CameraShakeFX' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_ForceFeedbackFX) == 0x000098, "Member 'FMeleeWeaponTableData::m_ForceFeedbackFX' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_CameraShakeShieldedFX) == 0x0000A0, "Member 'FMeleeWeaponTableData::m_CameraShakeShieldedFX' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_ForceFeedbackShieldedFX) == 0x0000A8, "Member 'FMeleeWeaponTableData::m_ForceFeedbackShieldedFX' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_MeleeDamage) == 0x0000B0, "Member 'FMeleeWeaponTableData::m_MeleeDamage' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_PoiseDamage) == 0x0000B4, "Member 'FMeleeWeaponTableData::m_PoiseDamage' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_BlockPoiseDamage) == 0x0000C0, "Member 'FMeleeWeaponTableData::m_BlockPoiseDamage' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_AttackStaminaBaseCost) == 0x0000CC, "Member 'FMeleeWeaponTableData::m_AttackStaminaBaseCost' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_BlockStaminaCost) == 0x0000D0, "Member 'FMeleeWeaponTableData::m_BlockStaminaCost' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_PoiseDamage_Shielded) == 0x0000D4, "Member 'FMeleeWeaponTableData::m_PoiseDamage_Shielded' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_MeleeDamage_NPC) == 0x0000E0, "Member 'FMeleeWeaponTableData::m_MeleeDamage_NPC' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_PoiseDamage_NPC) == 0x0000E4, "Member 'FMeleeWeaponTableData::m_PoiseDamage_NPC' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_MeleeRangeStart) == 0x0000F0, "Member 'FMeleeWeaponTableData::m_MeleeRangeStart' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_MeleeRangeEnd) == 0x0000F4, "Member 'FMeleeWeaponTableData::m_MeleeRangeEnd' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_ImpactFX) == 0x0000F8, "Member 'FMeleeWeaponTableData::m_ImpactFX' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_BlockedImpactFX) == 0x000148, "Member 'FMeleeWeaponTableData::m_BlockedImpactFX' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponTableData, m_ImpactDecals) == 0x000198, "Member 'FMeleeWeaponTableData::m_ImpactDecals' has a wrong offset!");

// ScriptStruct DuneSandbox.MeleeWeaponItemStats
// 0x000C (0x000C - 0x0000)
struct FMeleeWeaponItemStats final
{
public:
	class FName                                   MeleeWeaponName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestStat;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeWeaponItemStats) == 0x000004, "Wrong alignment on FMeleeWeaponItemStats");
static_assert(sizeof(FMeleeWeaponItemStats) == 0x00000C, "Wrong size on FMeleeWeaponItemStats");
static_assert(offsetof(FMeleeWeaponItemStats, MeleeWeaponName) == 0x000000, "Member 'FMeleeWeaponItemStats::MeleeWeaponName' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponItemStats, TestStat) == 0x000008, "Member 'FMeleeWeaponItemStats::TestStat' has a wrong offset!");

// ScriptStruct DuneSandbox.MeleeWeaponItemStatsComponent_BlueprintWrapper
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FMeleeWeaponItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMeleeWeaponItemStats                  MeleeWeaponItemStats;                              // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeleeWeaponItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FMeleeWeaponItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FMeleeWeaponItemStatsComponent_BlueprintWrapper) == 0x000048, "Wrong size on FMeleeWeaponItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FMeleeWeaponItemStatsComponent_BlueprintWrapper, MeleeWeaponItemStats) == 0x000038, "Member 'FMeleeWeaponItemStatsComponent_BlueprintWrapper::MeleeWeaponItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiCoverPlacementToolSettings
// 0x0014 (0x0014 - 0x0000)
struct FDuneAiCoverPlacementToolSettings final
{
public:
	float                                         m_WallStandoffDistance;                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_WallSearchTraces;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WallSearchDistance;                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CornerAvoidanceDistance;                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CoverVisibilityDistance;                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAiCoverPlacementToolSettings) == 0x000004, "Wrong alignment on FDuneAiCoverPlacementToolSettings");
static_assert(sizeof(FDuneAiCoverPlacementToolSettings) == 0x000014, "Wrong size on FDuneAiCoverPlacementToolSettings");
static_assert(offsetof(FDuneAiCoverPlacementToolSettings, m_WallStandoffDistance) == 0x000000, "Member 'FDuneAiCoverPlacementToolSettings::m_WallStandoffDistance' has a wrong offset!");
static_assert(offsetof(FDuneAiCoverPlacementToolSettings, m_WallSearchTraces) == 0x000004, "Member 'FDuneAiCoverPlacementToolSettings::m_WallSearchTraces' has a wrong offset!");
static_assert(offsetof(FDuneAiCoverPlacementToolSettings, m_WallSearchDistance) == 0x000008, "Member 'FDuneAiCoverPlacementToolSettings::m_WallSearchDistance' has a wrong offset!");
static_assert(offsetof(FDuneAiCoverPlacementToolSettings, m_CornerAvoidanceDistance) == 0x00000C, "Member 'FDuneAiCoverPlacementToolSettings::m_CornerAvoidanceDistance' has a wrong offset!");
static_assert(offsetof(FDuneAiCoverPlacementToolSettings, m_CoverVisibilityDistance) == 0x000010, "Member 'FDuneAiCoverPlacementToolSettings::m_CoverVisibilityDistance' has a wrong offset!");

// ScriptStruct DuneSandbox.MeleeWeaponItemTableRow
// 0x0030 (0x0040 - 0x0010)
struct FMeleeWeaponItemTableRow final : public FTableRowBase
{
public:
	struct FEquippableItemStats                   EquipableStats;                                    // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMeleeWeaponItemStats                  MeleeWeaponStats;                                  // 0x0030(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeleeWeaponItemTableRow) == 0x000008, "Wrong alignment on FMeleeWeaponItemTableRow");
static_assert(sizeof(FMeleeWeaponItemTableRow) == 0x000040, "Wrong size on FMeleeWeaponItemTableRow");
static_assert(offsetof(FMeleeWeaponItemTableRow, EquipableStats) == 0x000010, "Member 'FMeleeWeaponItemTableRow::EquipableStats' has a wrong offset!");
static_assert(offsetof(FMeleeWeaponItemTableRow, MeleeWeaponStats) == 0x000030, "Member 'FMeleeWeaponItemTableRow::MeleeWeaponStats' has a wrong offset!");

// ScriptStruct DuneSandbox.MentatVisionStartData
// 0x0038 (0x0038 - 0x0000)
struct FMentatVisionStartData final
{
public:
	float                                         m_DetectionRadius;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_InFocusRange;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FadeOutRange;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      m_ObjectTypes;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMentatWidget>              m_WidgetClass;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsClientSide;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           m_AbilityTag;                                      // 0x002C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bConsiderPingForAppearanceDelay;                 // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMentatVisionStartData) == 0x000008, "Wrong alignment on FMentatVisionStartData");
static_assert(sizeof(FMentatVisionStartData) == 0x000038, "Wrong size on FMentatVisionStartData");
static_assert(offsetof(FMentatVisionStartData, m_DetectionRadius) == 0x000000, "Member 'FMentatVisionStartData::m_DetectionRadius' has a wrong offset!");
static_assert(offsetof(FMentatVisionStartData, m_InFocusRange) == 0x000004, "Member 'FMentatVisionStartData::m_InFocusRange' has a wrong offset!");
static_assert(offsetof(FMentatVisionStartData, m_FadeOutRange) == 0x000008, "Member 'FMentatVisionStartData::m_FadeOutRange' has a wrong offset!");
static_assert(offsetof(FMentatVisionStartData, m_ObjectTypes) == 0x000010, "Member 'FMentatVisionStartData::m_ObjectTypes' has a wrong offset!");
static_assert(offsetof(FMentatVisionStartData, m_WidgetClass) == 0x000020, "Member 'FMentatVisionStartData::m_WidgetClass' has a wrong offset!");
static_assert(offsetof(FMentatVisionStartData, m_bIsClientSide) == 0x000028, "Member 'FMentatVisionStartData::m_bIsClientSide' has a wrong offset!");
static_assert(offsetof(FMentatVisionStartData, m_AbilityTag) == 0x00002C, "Member 'FMentatVisionStartData::m_AbilityTag' has a wrong offset!");
static_assert(offsetof(FMentatVisionStartData, m_bConsiderPingForAppearanceDelay) == 0x000034, "Member 'FMentatVisionStartData::m_bConsiderPingForAppearanceDelay' has a wrong offset!");

// ScriptStruct DuneSandbox.MiningSettings
// 0x0118 (0x0118 - 0x0000)
struct FMiningSettings final
{
public:
	float                                         CutterayMaxRangeServerLeniencyFactor;              // 0x0000(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveTable>             CutterayTimeToMinePerNodeTierTable;                // 0x0008(0x0030)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveTable>             CutterayLemMultiplierPerNodeTierTable;             // 0x0038(0x0030)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveTable>             CutterayHemMultiplierPerNodeTierTable;             // 0x0068(0x0030)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FEItemTemplateID, uint8>          ResourceTierMap;                                   // 0x0098(0x0050)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMiningYieldTiersInfoDataAsset> MiningTiersInfo;                            // 0x00E8(0x0030)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMiningSettings) == 0x000008, "Wrong alignment on FMiningSettings");
static_assert(sizeof(FMiningSettings) == 0x000118, "Wrong size on FMiningSettings");
static_assert(offsetof(FMiningSettings, CutterayMaxRangeServerLeniencyFactor) == 0x000000, "Member 'FMiningSettings::CutterayMaxRangeServerLeniencyFactor' has a wrong offset!");
static_assert(offsetof(FMiningSettings, CutterayTimeToMinePerNodeTierTable) == 0x000008, "Member 'FMiningSettings::CutterayTimeToMinePerNodeTierTable' has a wrong offset!");
static_assert(offsetof(FMiningSettings, CutterayLemMultiplierPerNodeTierTable) == 0x000038, "Member 'FMiningSettings::CutterayLemMultiplierPerNodeTierTable' has a wrong offset!");
static_assert(offsetof(FMiningSettings, CutterayHemMultiplierPerNodeTierTable) == 0x000068, "Member 'FMiningSettings::CutterayHemMultiplierPerNodeTierTable' has a wrong offset!");
static_assert(offsetof(FMiningSettings, ResourceTierMap) == 0x000098, "Member 'FMiningSettings::ResourceTierMap' has a wrong offset!");
static_assert(offsetof(FMiningSettings, MiningTiersInfo) == 0x0000E8, "Member 'FMiningSettings::MiningTiersInfo' has a wrong offset!");

// ScriptStruct DuneSandbox.DynamicVolumeState
// 0x0018 (0x0018 - 0x0000)
struct FDynamicVolumeState final
{
public:
	class ALandscapeProxy*                        m_pLandscape;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALandscapeDisplacementVolume*           m_pLDV;                                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicVolumeState) == 0x000008, "Wrong alignment on FDynamicVolumeState");
static_assert(sizeof(FDynamicVolumeState) == 0x000018, "Wrong size on FDynamicVolumeState");
static_assert(offsetof(FDynamicVolumeState, m_pLandscape) == 0x000000, "Member 'FDynamicVolumeState::m_pLandscape' has a wrong offset!");
static_assert(offsetof(FDynamicVolumeState, m_pLDV) == 0x000008, "Member 'FDynamicVolumeState::m_pLDV' has a wrong offset!");

// ScriptStruct DuneSandbox.NewMarkerScaleColorData
// 0x0010 (0x0010 - 0x0000)
struct FNewMarkerScaleColorData final
{
public:
	class UCurveFloat*                            ScaleCurve;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      ColorTintCurve;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewMarkerScaleColorData) == 0x000008, "Wrong alignment on FNewMarkerScaleColorData");
static_assert(sizeof(FNewMarkerScaleColorData) == 0x000010, "Wrong size on FNewMarkerScaleColorData");
static_assert(offsetof(FNewMarkerScaleColorData, ScaleCurve) == 0x000000, "Member 'FNewMarkerScaleColorData::ScaleCurve' has a wrong offset!");
static_assert(offsetof(FNewMarkerScaleColorData, ColorTintCurve) == 0x000008, "Member 'FNewMarkerScaleColorData::ColorTintCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.NotificationEntryWidgetData
// 0x0038 (0x0038 - 0x0000)
struct FNotificationEntryWidgetData final
{
public:
	struct FEIconPresetWidgetName                 m_IconPresetWidgetName;                            // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_Icon;                                            // 0x0008(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNotificationEntryWidgetData) == 0x000008, "Wrong alignment on FNotificationEntryWidgetData");
static_assert(sizeof(FNotificationEntryWidgetData) == 0x000038, "Wrong size on FNotificationEntryWidgetData");
static_assert(offsetof(FNotificationEntryWidgetData, m_IconPresetWidgetName) == 0x000000, "Member 'FNotificationEntryWidgetData::m_IconPresetWidgetName' has a wrong offset!");
static_assert(offsetof(FNotificationEntryWidgetData, m_Icon) == 0x000008, "Member 'FNotificationEntryWidgetData::m_Icon' has a wrong offset!");

// ScriptStruct DuneSandbox.AIFlyByNoiseEvent
// 0x0000 (0x0040 - 0x0040)
struct FAIFlyByNoiseEvent final : public FAINoiseEvent
{
};
static_assert(alignof(FAIFlyByNoiseEvent) == 0x000008, "Wrong alignment on FAIFlyByNoiseEvent");
static_assert(sizeof(FAIFlyByNoiseEvent) == 0x000040, "Wrong size on FAIFlyByNoiseEvent");

// ScriptStruct DuneSandbox.EVendorId
// 0x0000 (0x0008 - 0x0008)
struct FEVendorId final : public FStringEnumValue
{
};
static_assert(alignof(FEVendorId) == 0x000004, "Wrong alignment on FEVendorId");
static_assert(sizeof(FEVendorId) == 0x000008, "Wrong size on FEVendorId");

// ScriptStruct DuneSandbox.NpcDialogueData
// 0x0068 (0x0068 - 0x0000)
struct FNpcDialogueData final
{
public:
	TSoftObjectPtr<class UDialogue>               Dialogue;                                          // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEVendorId                             VendorId;                                          // 0x0030(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFaction                              Faction;                                           // 0x0038(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandsraadHouseDataAsset*               House;                                             // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LandsraadVehicleHandinLocationOffset;              // 0x0048(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandsraadVehicleHandinSphereRadius;                // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNpcDialogueData) == 0x000008, "Wrong alignment on FNpcDialogueData");
static_assert(sizeof(FNpcDialogueData) == 0x000068, "Wrong size on FNpcDialogueData");
static_assert(offsetof(FNpcDialogueData, Dialogue) == 0x000000, "Member 'FNpcDialogueData::Dialogue' has a wrong offset!");
static_assert(offsetof(FNpcDialogueData, VendorId) == 0x000030, "Member 'FNpcDialogueData::VendorId' has a wrong offset!");
static_assert(offsetof(FNpcDialogueData, Faction) == 0x000038, "Member 'FNpcDialogueData::Faction' has a wrong offset!");
static_assert(offsetof(FNpcDialogueData, House) == 0x000040, "Member 'FNpcDialogueData::House' has a wrong offset!");
static_assert(offsetof(FNpcDialogueData, LandsraadVehicleHandinLocationOffset) == 0x000048, "Member 'FNpcDialogueData::LandsraadVehicleHandinLocationOffset' has a wrong offset!");
static_assert(offsetof(FNpcDialogueData, LandsraadVehicleHandinSphereRadius) == 0x000060, "Member 'FNpcDialogueData::LandsraadVehicleHandinSphereRadius' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceFieldTypeSettings
// 0x0018 (0x0018 - 0x0000)
struct FSpiceFieldTypeSettings final
{
public:
	class UCurveFloat*                            SpawnRateMultiplierOverCoriolisCycle;              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseSpawnRateInSeconds;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGloballyPrimed;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGloballyActive;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiceFieldTypeSettings) == 0x000008, "Wrong alignment on FSpiceFieldTypeSettings");
static_assert(sizeof(FSpiceFieldTypeSettings) == 0x000018, "Wrong size on FSpiceFieldTypeSettings");
static_assert(offsetof(FSpiceFieldTypeSettings, SpawnRateMultiplierOverCoriolisCycle) == 0x000000, "Member 'FSpiceFieldTypeSettings::SpawnRateMultiplierOverCoriolisCycle' has a wrong offset!");
static_assert(offsetof(FSpiceFieldTypeSettings, BaseSpawnRateInSeconds) == 0x000008, "Member 'FSpiceFieldTypeSettings::BaseSpawnRateInSeconds' has a wrong offset!");
static_assert(offsetof(FSpiceFieldTypeSettings, MaxGloballyPrimed) == 0x00000C, "Member 'FSpiceFieldTypeSettings::MaxGloballyPrimed' has a wrong offset!");
static_assert(offsetof(FSpiceFieldTypeSettings, MaxGloballyActive) == 0x000010, "Member 'FSpiceFieldTypeSettings::MaxGloballyActive' has a wrong offset!");

// ScriptStruct DuneSandbox.BlendSpace1DHolder
// 0x0040 (0x0058 - 0x0018)
struct FBlendSpace1DHolder final : public FHolderBase
{
public:
	TSoftObjectPtr<class UBlendSpace1D>           m_BlendSpace1D;                                    // 0x0018(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          m_Holder;                                          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBlendSpace1D*                          m_DefaultBlendSpace;                               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FBlendSpace1DHolder) == 0x000008, "Wrong alignment on FBlendSpace1DHolder");
static_assert(sizeof(FBlendSpace1DHolder) == 0x000058, "Wrong size on FBlendSpace1DHolder");
static_assert(offsetof(FBlendSpace1DHolder, m_BlendSpace1D) == 0x000018, "Member 'FBlendSpace1DHolder::m_BlendSpace1D' has a wrong offset!");
static_assert(offsetof(FBlendSpace1DHolder, m_Holder) == 0x000048, "Member 'FBlendSpace1DHolder::m_Holder' has a wrong offset!");
static_assert(offsetof(FBlendSpace1DHolder, m_DefaultBlendSpace) == 0x000050, "Member 'FBlendSpace1DHolder::m_DefaultBlendSpace' has a wrong offset!");

// ScriptStruct DuneSandbox.ESpawnLocationGroup
// 0x0000 (0x0008 - 0x0008)
struct FESpawnLocationGroup final : public FStringEnumValue
{
};
static_assert(alignof(FESpawnLocationGroup) == 0x000004, "Wrong alignment on FESpawnLocationGroup");
static_assert(sizeof(FESpawnLocationGroup) == 0x000008, "Wrong size on FESpawnLocationGroup");

// ScriptStruct DuneSandbox.NPCMutableOptionList
// 0x0010 (0x0010 - 0x0000)
struct FNPCMutableOptionList final
{
public:
	TArray<struct FNPCMutableOptionParameter>     OptionValues;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCMutableOptionList) == 0x000008, "Wrong alignment on FNPCMutableOptionList");
static_assert(sizeof(FNPCMutableOptionList) == 0x000010, "Wrong size on FNPCMutableOptionList");
static_assert(offsetof(FNPCMutableOptionList, OptionValues) == 0x000000, "Member 'FNPCMutableOptionList::OptionValues' has a wrong offset!");

// ScriptStruct DuneSandbox.NPCGeneticsPartRowBase
// 0x0030 (0x0040 - 0x0010)
struct FNPCGeneticsPartRowBase final : public FTableRowBase
{
public:
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNPCMutableOptionList>          Parts;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FNPCMutableFloatList>           FloatParts;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCGeneticsPartRowBase) == 0x000008, "Wrong alignment on FNPCGeneticsPartRowBase");
static_assert(sizeof(FNPCGeneticsPartRowBase) == 0x000040, "Wrong size on FNPCGeneticsPartRowBase");
static_assert(offsetof(FNPCGeneticsPartRowBase, Description) == 0x000010, "Member 'FNPCGeneticsPartRowBase::Description' has a wrong offset!");
static_assert(offsetof(FNPCGeneticsPartRowBase, Parts) == 0x000020, "Member 'FNPCGeneticsPartRowBase::Parts' has a wrong offset!");
static_assert(offsetof(FNPCGeneticsPartRowBase, FloatParts) == 0x000030, "Member 'FNPCGeneticsPartRowBase::FloatParts' has a wrong offset!");

// ScriptStruct DuneSandbox.TrainingModuleSetterComponent
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTrainingModuleSetterComponent final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrainingModuleSetterComponent) == 0x000008, "Wrong alignment on FTrainingModuleSetterComponent");
static_assert(sizeof(FTrainingModuleSetterComponent) == 0x000018, "Wrong size on FTrainingModuleSetterComponent");

// ScriptStruct DuneSandbox.ENPCGeneticsLookPartName
// 0x0000 (0x0008 - 0x0008)
struct FENPCGeneticsLookPartName final : public FStringEnumValue
{
};
static_assert(alignof(FENPCGeneticsLookPartName) == 0x000004, "Wrong alignment on FENPCGeneticsLookPartName");
static_assert(sizeof(FENPCGeneticsLookPartName) == 0x000008, "Wrong size on FENPCGeneticsLookPartName");

// ScriptStruct DuneSandbox.NPCGeneticsLookPartList
// 0x0010 (0x0010 - 0x0000)
struct FNPCGeneticsLookPartList final
{
public:
	TArray<struct FENPCGeneticsLookPartName>      PartNames;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCGeneticsLookPartList) == 0x000008, "Wrong alignment on FNPCGeneticsLookPartList");
static_assert(sizeof(FNPCGeneticsLookPartList) == 0x000010, "Wrong size on FNPCGeneticsLookPartList");
static_assert(offsetof(FNPCGeneticsLookPartList, PartNames) == 0x000000, "Member 'FNPCGeneticsLookPartList::PartNames' has a wrong offset!");

// ScriptStruct DuneSandbox.TaxationDatabasePayInvoice
// 0x0008 (0x0008 - 0x0000)
struct FTaxationDatabasePayInvoice final
{
public:
	int64                                         InvoiceId;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaxationDatabasePayInvoice) == 0x000008, "Wrong alignment on FTaxationDatabasePayInvoice");
static_assert(sizeof(FTaxationDatabasePayInvoice) == 0x000008, "Wrong size on FTaxationDatabasePayInvoice");
static_assert(offsetof(FTaxationDatabasePayInvoice, InvoiceId) == 0x000000, "Member 'FTaxationDatabasePayInvoice::InvoiceId' has a wrong offset!");

// ScriptStruct DuneSandbox.CoverLocation
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCoverLocation final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AAttractorCoverPoint>    m_AttractorPoint;                                  // 0x001C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCoverLocation) == 0x000008, "Wrong alignment on FCoverLocation");
static_assert(sizeof(FCoverLocation) == 0x000028, "Wrong size on FCoverLocation");
static_assert(offsetof(FCoverLocation, m_AttractorPoint) == 0x00001C, "Member 'FCoverLocation::m_AttractorPoint' has a wrong offset!");

// ScriptStruct DuneSandbox.XPEvent
// 0x0014 (0x0014 - 0x0000)
struct FXPEvent final
{
public:
	struct FGameplayTag                           m_EventTag;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXPEarnArea                                   XPArea;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_XPAmount;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XPTier;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXPEvent) == 0x000004, "Wrong alignment on FXPEvent");
static_assert(sizeof(FXPEvent) == 0x000014, "Wrong size on FXPEvent");
static_assert(offsetof(FXPEvent, m_EventTag) == 0x000000, "Member 'FXPEvent::m_EventTag' has a wrong offset!");
static_assert(offsetof(FXPEvent, XPArea) == 0x000008, "Member 'FXPEvent::XPArea' has a wrong offset!");
static_assert(offsetof(FXPEvent, m_XPAmount) == 0x00000C, "Member 'FXPEvent::m_XPAmount' has a wrong offset!");
static_assert(offsetof(FXPEvent, XPTier) == 0x000010, "Member 'FXPEvent::XPTier' has a wrong offset!");

// ScriptStruct DuneSandbox.NPCGeneticsLookRowBase
// 0x0030 (0x0040 - 0x0010)
struct FNPCGeneticsLookRowBase final : public FTableRowBase
{
public:
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNPCGeneticsLookPartList               FixedLooks;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FNPCGeneticsLookPartList>       RandomLooks;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCGeneticsLookRowBase) == 0x000008, "Wrong alignment on FNPCGeneticsLookRowBase");
static_assert(sizeof(FNPCGeneticsLookRowBase) == 0x000040, "Wrong size on FNPCGeneticsLookRowBase");
static_assert(offsetof(FNPCGeneticsLookRowBase, Description) == 0x000010, "Member 'FNPCGeneticsLookRowBase::Description' has a wrong offset!");
static_assert(offsetof(FNPCGeneticsLookRowBase, FixedLooks) == 0x000020, "Member 'FNPCGeneticsLookRowBase::FixedLooks' has a wrong offset!");
static_assert(offsetof(FNPCGeneticsLookRowBase, RandomLooks) == 0x000030, "Member 'FNPCGeneticsLookRowBase::RandomLooks' has a wrong offset!");

// ScriptStruct DuneSandbox.GenericMeshDisplay
// 0x0010 (0x0100 - 0x00F0)
struct FGenericMeshDisplay final : public FItemMeshDisplayBase
{
public:
	class UStaticMeshComponent*                   m_GenericItemMeshComponent;                        // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenericMeshDisplay) == 0x000010, "Wrong alignment on FGenericMeshDisplay");
static_assert(sizeof(FGenericMeshDisplay) == 0x000100, "Wrong size on FGenericMeshDisplay");
static_assert(offsetof(FGenericMeshDisplay, m_GenericItemMeshComponent) == 0x0000F0, "Member 'FGenericMeshDisplay::m_GenericItemMeshComponent' has a wrong offset!");

// ScriptStruct DuneSandbox.TeamComponent
// 0x0001 (0x0001 - 0x0000)
struct FTeamComponent final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamComponent) == 0x000001, "Wrong alignment on FTeamComponent");
static_assert(sizeof(FTeamComponent) == 0x000001, "Wrong size on FTeamComponent");
static_assert(offsetof(FTeamComponent, TeamID) == 0x000000, "Member 'FTeamComponent::TeamID' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcSubGroupSpawnData
// 0x0018 (0x0028 - 0x0010)
struct FNpcSubGroupSpawnData final : public FTableRowBase
{
public:
	struct FDataTableRowHandle                    NPCType;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         m_Flags;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Weight;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcSubGroupSpawnData) == 0x000008, "Wrong alignment on FNpcSubGroupSpawnData");
static_assert(sizeof(FNpcSubGroupSpawnData) == 0x000028, "Wrong size on FNpcSubGroupSpawnData");
static_assert(offsetof(FNpcSubGroupSpawnData, NPCType) == 0x000010, "Member 'FNpcSubGroupSpawnData::NPCType' has a wrong offset!");
static_assert(offsetof(FNpcSubGroupSpawnData, m_Flags) == 0x000020, "Member 'FNpcSubGroupSpawnData::m_Flags' has a wrong offset!");
static_assert(offsetof(FNpcSubGroupSpawnData, m_Weight) == 0x000024, "Member 'FNpcSubGroupSpawnData::m_Weight' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcSubGroupData
// 0x0010 (0x0020 - 0x0010)
struct FNpcSubGroupData final : public FTableRowBase
{
public:
	uint8                                         m_MinSpawnCount;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_MaxSpawnCount;                                   // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_Flags;                                           // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Weight;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             m_SpawnDataTable;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcSubGroupData) == 0x000008, "Wrong alignment on FNpcSubGroupData");
static_assert(sizeof(FNpcSubGroupData) == 0x000020, "Wrong size on FNpcSubGroupData");
static_assert(offsetof(FNpcSubGroupData, m_MinSpawnCount) == 0x000010, "Member 'FNpcSubGroupData::m_MinSpawnCount' has a wrong offset!");
static_assert(offsetof(FNpcSubGroupData, m_MaxSpawnCount) == 0x000011, "Member 'FNpcSubGroupData::m_MaxSpawnCount' has a wrong offset!");
static_assert(offsetof(FNpcSubGroupData, m_Flags) == 0x000012, "Member 'FNpcSubGroupData::m_Flags' has a wrong offset!");
static_assert(offsetof(FNpcSubGroupData, m_Weight) == 0x000014, "Member 'FNpcSubGroupData::m_Weight' has a wrong offset!");
static_assert(offsetof(FNpcSubGroupData, m_SpawnDataTable) == 0x000018, "Member 'FNpcSubGroupData::m_SpawnDataTable' has a wrong offset!");

// ScriptStruct DuneSandbox.SandStormEffectOnSand
// 0x0008 (0x0008 - 0x0000)
struct FSandStormEffectOnSand final
{
public:
	bool                                          bShouldShiftSand;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESandStormSandShiftType                       SandShiftType;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PeakUnitsPerSecond;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandStormEffectOnSand) == 0x000004, "Wrong alignment on FSandStormEffectOnSand");
static_assert(sizeof(FSandStormEffectOnSand) == 0x000008, "Wrong size on FSandStormEffectOnSand");
static_assert(offsetof(FSandStormEffectOnSand, bShouldShiftSand) == 0x000000, "Member 'FSandStormEffectOnSand::bShouldShiftSand' has a wrong offset!");
static_assert(offsetof(FSandStormEffectOnSand, SandShiftType) == 0x000001, "Member 'FSandStormEffectOnSand::SandShiftType' has a wrong offset!");
static_assert(offsetof(FSandStormEffectOnSand, PeakUnitsPerSecond) == 0x000004, "Member 'FSandStormEffectOnSand::PeakUnitsPerSecond' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcGroupDataRow
// 0x0008 (0x0018 - 0x0010)
struct FNpcGroupDataRow final : public FTableRowBase
{
public:
	class UDataTable*                             m_SubGroupTable;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcGroupDataRow) == 0x000008, "Wrong alignment on FNpcGroupDataRow");
static_assert(sizeof(FNpcGroupDataRow) == 0x000018, "Wrong size on FNpcGroupDataRow");
static_assert(offsetof(FNpcGroupDataRow, m_SubGroupTable) == 0x000010, "Member 'FNpcGroupDataRow::m_SubGroupTable' has a wrong offset!");

// ScriptStruct DuneSandbox.TechTreeCategoryDataRow
// 0x0090 (0x00A0 - 0x0010)
struct FTechTreeCategoryDataRow final : public FTableRowBase
{
public:
	class FText                                   m_Name;                                            // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_Icon;                                            // 0x0028(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_SuggestedCategoryIcon;                           // 0x0058(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTechTreeSubCategoryData>       m_Subcategories;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bIncludeInSuggestedCategory;                     // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTechTreeCategoryDataRow) == 0x000008, "Wrong alignment on FTechTreeCategoryDataRow");
static_assert(sizeof(FTechTreeCategoryDataRow) == 0x0000A0, "Wrong size on FTechTreeCategoryDataRow");
static_assert(offsetof(FTechTreeCategoryDataRow, m_Name) == 0x000010, "Member 'FTechTreeCategoryDataRow::m_Name' has a wrong offset!");
static_assert(offsetof(FTechTreeCategoryDataRow, m_Icon) == 0x000028, "Member 'FTechTreeCategoryDataRow::m_Icon' has a wrong offset!");
static_assert(offsetof(FTechTreeCategoryDataRow, m_SuggestedCategoryIcon) == 0x000058, "Member 'FTechTreeCategoryDataRow::m_SuggestedCategoryIcon' has a wrong offset!");
static_assert(offsetof(FTechTreeCategoryDataRow, m_Subcategories) == 0x000088, "Member 'FTechTreeCategoryDataRow::m_Subcategories' has a wrong offset!");
static_assert(offsetof(FTechTreeCategoryDataRow, m_bIncludeInSuggestedCategory) == 0x000098, "Member 'FTechTreeCategoryDataRow::m_bIncludeInSuggestedCategory' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcObserver
// 0x000C (0x000C - 0x0000)
struct FNpcObserver final
{
public:
	TWeakObjectPtr<class ADuneNpcCharacter>       m_Npc;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_TargetFlags;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcObserver) == 0x000004, "Wrong alignment on FNpcObserver");
static_assert(sizeof(FNpcObserver) == 0x00000C, "Wrong size on FNpcObserver");
static_assert(offsetof(FNpcObserver, m_Npc) == 0x000000, "Member 'FNpcObserver::m_Npc' has a wrong offset!");
static_assert(offsetof(FNpcObserver, m_TargetFlags) == 0x000008, "Member 'FNpcObserver::m_TargetFlags' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillSpiceChangedComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSkillSpiceChangedComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillSpiceChangedComponent) == 0x000008, "Wrong alignment on FSkillSpiceChangedComponent");
static_assert(sizeof(FSkillSpiceChangedComponent) == 0x000010, "Wrong size on FSkillSpiceChangedComponent");

// ScriptStruct DuneSandbox.OrientedBoxData
// 0x0050 (0x0050 - 0x0000)
struct FOrientedBoxData final
{
public:
	struct FVector                                m_LocalOffset;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_Extent;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  m_LocalRotation;                                   // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrientedBoxData) == 0x000010, "Wrong alignment on FOrientedBoxData");
static_assert(sizeof(FOrientedBoxData) == 0x000050, "Wrong size on FOrientedBoxData");
static_assert(offsetof(FOrientedBoxData, m_LocalOffset) == 0x000000, "Member 'FOrientedBoxData::m_LocalOffset' has a wrong offset!");
static_assert(offsetof(FOrientedBoxData, m_Extent) == 0x000018, "Member 'FOrientedBoxData::m_Extent' has a wrong offset!");
static_assert(offsetof(FOrientedBoxData, m_LocalRotation) == 0x000030, "Member 'FOrientedBoxData::m_LocalRotation' has a wrong offset!");

// ScriptStruct DuneSandbox.OrnithopterEffectsDriverComponent
// 0x01C8 (0x01C8 - 0x0000)
struct FOrnithopterEffectsDriverComponent final
{
public:
	EOrnithopterFlightMode                        m_FlightMode;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bBoosting;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDashing;                                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_LocalMovement;                                   // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_MovementInput;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               m_MouseInput;                                      // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_SpeedRatio;                                      // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               m_TurnRate;                                        // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               m_ActorRotation;                                   // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               m_RelativeRotation;                                // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_RemainingTurn;                                   // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DistanceToGround;                                // 0x00A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WingOscillationAmount;                           // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BoostAmount;                                     // 0x00AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOutOfPower;                                     // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bExtendGears;                                    // 0x00B1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bSettleGears;                                    // 0x00B2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             GroundTraceResult;                                 // 0x00B8(0x00E8)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ControlVector;                                     // 0x01A0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x10];                                     // 0x01B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrnithopterEffectsDriverComponent) == 0x000008, "Wrong alignment on FOrnithopterEffectsDriverComponent");
static_assert(sizeof(FOrnithopterEffectsDriverComponent) == 0x0001C8, "Wrong size on FOrnithopterEffectsDriverComponent");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_FlightMode) == 0x000000, "Member 'FOrnithopterEffectsDriverComponent::m_FlightMode' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_bBoosting) == 0x000001, "Member 'FOrnithopterEffectsDriverComponent::m_bBoosting' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_bDashing) == 0x000002, "Member 'FOrnithopterEffectsDriverComponent::m_bDashing' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_LocalMovement) == 0x000008, "Member 'FOrnithopterEffectsDriverComponent::m_LocalMovement' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_MovementInput) == 0x000020, "Member 'FOrnithopterEffectsDriverComponent::m_MovementInput' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_MouseInput) == 0x000038, "Member 'FOrnithopterEffectsDriverComponent::m_MouseInput' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_SpeedRatio) == 0x000050, "Member 'FOrnithopterEffectsDriverComponent::m_SpeedRatio' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_TurnRate) == 0x000058, "Member 'FOrnithopterEffectsDriverComponent::m_TurnRate' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_ActorRotation) == 0x000070, "Member 'FOrnithopterEffectsDriverComponent::m_ActorRotation' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_RelativeRotation) == 0x000088, "Member 'FOrnithopterEffectsDriverComponent::m_RelativeRotation' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_RemainingTurn) == 0x0000A0, "Member 'FOrnithopterEffectsDriverComponent::m_RemainingTurn' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_DistanceToGround) == 0x0000A4, "Member 'FOrnithopterEffectsDriverComponent::m_DistanceToGround' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_WingOscillationAmount) == 0x0000A8, "Member 'FOrnithopterEffectsDriverComponent::m_WingOscillationAmount' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_BoostAmount) == 0x0000AC, "Member 'FOrnithopterEffectsDriverComponent::m_BoostAmount' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_bOutOfPower) == 0x0000B0, "Member 'FOrnithopterEffectsDriverComponent::m_bOutOfPower' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_bExtendGears) == 0x0000B1, "Member 'FOrnithopterEffectsDriverComponent::m_bExtendGears' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, m_bSettleGears) == 0x0000B2, "Member 'FOrnithopterEffectsDriverComponent::m_bSettleGears' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, GroundTraceResult) == 0x0000B8, "Member 'FOrnithopterEffectsDriverComponent::GroundTraceResult' has a wrong offset!");
static_assert(offsetof(FOrnithopterEffectsDriverComponent, ControlVector) == 0x0001A0, "Member 'FOrnithopterEffectsDriverComponent::ControlVector' has a wrong offset!");

// ScriptStruct DuneSandbox.DragItemToSlotOptions
// 0x0001 (0x0001 - 0x0000)
struct FDragItemToSlotOptions final
{
public:
	uint8                                         bCanSplitItemToFit : 1;                            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FDragItemToSlotOptions) == 0x000001, "Wrong alignment on FDragItemToSlotOptions");
static_assert(sizeof(FDragItemToSlotOptions) == 0x000001, "Wrong size on FDragItemToSlotOptions");

// ScriptStruct DuneSandbox.OrnithopterStateComponent
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FOrnithopterStateComponent final
{
public:
	EOrnithopterFlightMode                        CurrentFlightMode;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanTurnEngineOff;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0xA];                                        // 0x0002(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrnithopterStateComponent) == 0x000004, "Wrong alignment on FOrnithopterStateComponent");
static_assert(sizeof(FOrnithopterStateComponent) == 0x00000C, "Wrong size on FOrnithopterStateComponent");
static_assert(offsetof(FOrnithopterStateComponent, CurrentFlightMode) == 0x000000, "Member 'FOrnithopterStateComponent::CurrentFlightMode' has a wrong offset!");
static_assert(offsetof(FOrnithopterStateComponent, m_bCanTurnEngineOff) == 0x000001, "Member 'FOrnithopterStateComponent::m_bCanTurnEngineOff' has a wrong offset!");

// ScriptStruct DuneSandbox.PainboxDialogueAnswerModuleLevels
// 0x000C (0x000C - 0x0000)
struct FPainboxDialogueAnswerModuleLevels final
{
public:
	struct FGameplayTag                           m_Module;                                          // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_Level;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPainboxDialogueAnswerModuleLevels) == 0x000004, "Wrong alignment on FPainboxDialogueAnswerModuleLevels");
static_assert(sizeof(FPainboxDialogueAnswerModuleLevels) == 0x00000C, "Wrong size on FPainboxDialogueAnswerModuleLevels");
static_assert(offsetof(FPainboxDialogueAnswerModuleLevels, m_Module) == 0x000000, "Member 'FPainboxDialogueAnswerModuleLevels::m_Module' has a wrong offset!");
static_assert(offsetof(FPainboxDialogueAnswerModuleLevels, m_Level) == 0x000008, "Member 'FPainboxDialogueAnswerModuleLevels::m_Level' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponModComponentData
// 0x0018 (0x0018 - 0x0000)
struct FWeaponModComponentData final
{
public:
	class FName                                   WeaponModId;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VariantId;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwatchId;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponModComponentData) == 0x000004, "Wrong alignment on FWeaponModComponentData");
static_assert(sizeof(FWeaponModComponentData) == 0x000018, "Wrong size on FWeaponModComponentData");
static_assert(offsetof(FWeaponModComponentData, WeaponModId) == 0x000000, "Member 'FWeaponModComponentData::WeaponModId' has a wrong offset!");
static_assert(offsetof(FWeaponModComponentData, VariantId) == 0x000008, "Member 'FWeaponModComponentData::VariantId' has a wrong offset!");
static_assert(offsetof(FWeaponModComponentData, SwatchId) == 0x000010, "Member 'FWeaponModComponentData::SwatchId' has a wrong offset!");

// ScriptStruct DuneSandbox.InteractionWheelSlotData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FInteractionWheelSlotData
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractionWheelSlotData) == 0x000008, "Wrong alignment on FInteractionWheelSlotData");
static_assert(sizeof(FInteractionWheelSlotData) == 0x000008, "Wrong size on FInteractionWheelSlotData");

// ScriptStruct DuneSandbox.InteractionWheelSlotData_Player
// 0x0008 (0x0010 - 0x0008)
struct FInteractionWheelSlotData_Player final : public FInteractionWheelSlotData
{
public:
	TWeakObjectPtr<class UInteraction>            InteractionObject;                                 // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionWheelSlotData_Player) == 0x000008, "Wrong alignment on FInteractionWheelSlotData_Player");
static_assert(sizeof(FInteractionWheelSlotData_Player) == 0x000010, "Wrong size on FInteractionWheelSlotData_Player");
static_assert(offsetof(FInteractionWheelSlotData_Player, InteractionObject) == 0x000008, "Member 'FInteractionWheelSlotData_Player::InteractionObject' has a wrong offset!");

// ScriptStruct DuneSandbox.PainboxDialogueAnswerConfig
// 0x0038 (0x0038 - 0x0000)
struct FPainboxDialogueAnswerConfig final
{
public:
	class FString                                 m_AnswerId;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_GameplayTagApplied;                              // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameItemInfo>                  m_ItemsToAdd;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPainboxDialogueAnswerModuleLevels> m_ModuleLevelsToSet;                           // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPainboxDialogueAnswerConfig) == 0x000008, "Wrong alignment on FPainboxDialogueAnswerConfig");
static_assert(sizeof(FPainboxDialogueAnswerConfig) == 0x000038, "Wrong size on FPainboxDialogueAnswerConfig");
static_assert(offsetof(FPainboxDialogueAnswerConfig, m_AnswerId) == 0x000000, "Member 'FPainboxDialogueAnswerConfig::m_AnswerId' has a wrong offset!");
static_assert(offsetof(FPainboxDialogueAnswerConfig, m_GameplayTagApplied) == 0x000010, "Member 'FPainboxDialogueAnswerConfig::m_GameplayTagApplied' has a wrong offset!");
static_assert(offsetof(FPainboxDialogueAnswerConfig, m_ItemsToAdd) == 0x000018, "Member 'FPainboxDialogueAnswerConfig::m_ItemsToAdd' has a wrong offset!");
static_assert(offsetof(FPainboxDialogueAnswerConfig, m_ModuleLevelsToSet) == 0x000028, "Member 'FPainboxDialogueAnswerConfig::m_ModuleLevelsToSet' has a wrong offset!");

// ScriptStruct DuneSandbox.PainboxDialogueChoicesRow
// 0x0010 (0x0020 - 0x0010)
struct FPainboxDialogueChoicesRow final : public FTableRowBase
{
public:
	TArray<struct FPainboxDialogueAnswerConfig>   m_PainboxAnswers;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPainboxDialogueChoicesRow) == 0x000008, "Wrong alignment on FPainboxDialogueChoicesRow");
static_assert(sizeof(FPainboxDialogueChoicesRow) == 0x000020, "Wrong size on FPainboxDialogueChoicesRow");
static_assert(offsetof(FPainboxDialogueChoicesRow, m_PainboxAnswers) == 0x000010, "Member 'FPainboxDialogueChoicesRow::m_PainboxAnswers' has a wrong offset!");

// ScriptStruct DuneSandbox.PainboxEntryPerkInfo
// 0x0038 (0x0038 - 0x0000)
struct FPainboxEntryPerkInfo final
{
public:
	class FText                                   ItemType;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ItemName;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                             ItemIcon;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPainboxEntryPerkInfo) == 0x000008, "Wrong alignment on FPainboxEntryPerkInfo");
static_assert(sizeof(FPainboxEntryPerkInfo) == 0x000038, "Wrong size on FPainboxEntryPerkInfo");
static_assert(offsetof(FPainboxEntryPerkInfo, ItemType) == 0x000000, "Member 'FPainboxEntryPerkInfo::ItemType' has a wrong offset!");
static_assert(offsetof(FPainboxEntryPerkInfo, ItemName) == 0x000018, "Member 'FPainboxEntryPerkInfo::ItemName' has a wrong offset!");
static_assert(offsetof(FPainboxEntryPerkInfo, ItemIcon) == 0x000030, "Member 'FPainboxEntryPerkInfo::ItemIcon' has a wrong offset!");

// ScriptStruct DuneSandbox.PainboxEntryInfo
// 0x00D8 (0x00D8 - 0x0000)
struct FPainboxEntryInfo final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   MainTitle;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   MainText;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   AdditonalTitle;                                    // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   AdditionalText;                                    // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   SkillFocusTitle;                                   // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   SkillFocusText;                                    // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                             BannerImage;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             RevealedIcon;                                      // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             InactiveIcon;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPainboxEntryPerkInfo>          Perks;                                             // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPainboxEntryInfo) == 0x000008, "Wrong alignment on FPainboxEntryInfo");
static_assert(sizeof(FPainboxEntryInfo) == 0x0000D8, "Wrong size on FPainboxEntryInfo");
static_assert(offsetof(FPainboxEntryInfo, Key) == 0x000000, "Member 'FPainboxEntryInfo::Key' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, Title) == 0x000008, "Member 'FPainboxEntryInfo::Title' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, MainTitle) == 0x000020, "Member 'FPainboxEntryInfo::MainTitle' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, MainText) == 0x000038, "Member 'FPainboxEntryInfo::MainText' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, AdditonalTitle) == 0x000050, "Member 'FPainboxEntryInfo::AdditonalTitle' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, AdditionalText) == 0x000068, "Member 'FPainboxEntryInfo::AdditionalText' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, SkillFocusTitle) == 0x000080, "Member 'FPainboxEntryInfo::SkillFocusTitle' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, SkillFocusText) == 0x000098, "Member 'FPainboxEntryInfo::SkillFocusText' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, BannerImage) == 0x0000B0, "Member 'FPainboxEntryInfo::BannerImage' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, RevealedIcon) == 0x0000B8, "Member 'FPainboxEntryInfo::RevealedIcon' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, InactiveIcon) == 0x0000C0, "Member 'FPainboxEntryInfo::InactiveIcon' has a wrong offset!");
static_assert(offsetof(FPainboxEntryInfo, Perks) == 0x0000C8, "Member 'FPainboxEntryInfo::Perks' has a wrong offset!");

// ScriptStruct DuneSandbox.WearableItemTableRow
// 0x0038 (0x0048 - 0x0010)
struct FWearableItemTableRow final : public FTableRowBase
{
public:
	struct FEquippableItemStats                   EquipableStats;                                    // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCustomizationStats                    CustomizationStats;                                // 0x0030(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWearableItemTableRow) == 0x000008, "Wrong alignment on FWearableItemTableRow");
static_assert(sizeof(FWearableItemTableRow) == 0x000048, "Wrong size on FWearableItemTableRow");
static_assert(offsetof(FWearableItemTableRow, EquipableStats) == 0x000010, "Member 'FWearableItemTableRow::EquipableStats' has a wrong offset!");
static_assert(offsetof(FWearableItemTableRow, CustomizationStats) == 0x000030, "Member 'FWearableItemTableRow::CustomizationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.ParryEvent
// 0x0000 (0x0030 - 0x0030)
struct FParryEvent final : public FGameEvent
{
};
static_assert(alignof(FParryEvent) == 0x000008, "Wrong alignment on FParryEvent");
static_assert(sizeof(FParryEvent) == 0x000030, "Wrong size on FParryEvent");

// ScriptStruct DuneSandbox.PartyDatabaseEventAddInvite
// 0x0040 (0x0040 - 0x0000)
struct FPartyDatabaseEventAddInvite final
{
public:
	int64                                         InviteId;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SenderId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderName;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerId;                                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InviteSentUniverseTime;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyDatabaseEventAddInvite) == 0x000008, "Wrong alignment on FPartyDatabaseEventAddInvite");
static_assert(sizeof(FPartyDatabaseEventAddInvite) == 0x000040, "Wrong size on FPartyDatabaseEventAddInvite");
static_assert(offsetof(FPartyDatabaseEventAddInvite, InviteId) == 0x000000, "Member 'FPartyDatabaseEventAddInvite::InviteId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventAddInvite, SenderId) == 0x000008, "Member 'FPartyDatabaseEventAddInvite::SenderId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventAddInvite, SenderName) == 0x000010, "Member 'FPartyDatabaseEventAddInvite::SenderName' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventAddInvite, PlayerId) == 0x000020, "Member 'FPartyDatabaseEventAddInvite::PlayerId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventAddInvite, PlayerName) == 0x000028, "Member 'FPartyDatabaseEventAddInvite::PlayerName' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventAddInvite, InviteSentUniverseTime) == 0x000038, "Member 'FPartyDatabaseEventAddInvite::InviteSentUniverseTime' has a wrong offset!");

// ScriptStruct DuneSandbox.SimProxyItemReferencerRecord
// 0x0018 (0x0018 - 0x0000)
struct FSimProxyItemReferencerRecord final
{
public:
	class UObjectReferencer*                      m_ObjectReferencer;                                // 0x0000(0x0008)(ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimProxyItemReferencerRecord) == 0x000008, "Wrong alignment on FSimProxyItemReferencerRecord");
static_assert(sizeof(FSimProxyItemReferencerRecord) == 0x000018, "Wrong size on FSimProxyItemReferencerRecord");
static_assert(offsetof(FSimProxyItemReferencerRecord, m_ObjectReferencer) == 0x000000, "Member 'FSimProxyItemReferencerRecord::m_ObjectReferencer' has a wrong offset!");
static_assert(offsetof(FSimProxyItemReferencerRecord, m_ItemTemplateId) == 0x000008, "Member 'FSimProxyItemReferencerRecord::m_ItemTemplateId' has a wrong offset!");

// ScriptStruct DuneSandbox.PartyDatabaseEventRemoveInvite
// 0x0020 (0x0020 - 0x0000)
struct FPartyDatabaseEventRemoveInvite final
{
public:
	int64                                         InviteId;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInviteRemoveReason                           InviteRemoveReason;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SenderId;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerId;                                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyDatabaseEventRemoveInvite) == 0x000008, "Wrong alignment on FPartyDatabaseEventRemoveInvite");
static_assert(sizeof(FPartyDatabaseEventRemoveInvite) == 0x000020, "Wrong size on FPartyDatabaseEventRemoveInvite");
static_assert(offsetof(FPartyDatabaseEventRemoveInvite, InviteId) == 0x000000, "Member 'FPartyDatabaseEventRemoveInvite::InviteId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventRemoveInvite, InviteRemoveReason) == 0x000008, "Member 'FPartyDatabaseEventRemoveInvite::InviteRemoveReason' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventRemoveInvite, SenderId) == 0x000010, "Member 'FPartyDatabaseEventRemoveInvite::SenderId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventRemoveInvite, PlayerId) == 0x000018, "Member 'FPartyDatabaseEventRemoveInvite::PlayerId' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemTableSourceNode
// 0x0010 (0x0010 - 0x0000)
struct FItemTableSourceNode final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStruct*                                RowStruct;                                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemTableSourceNode) == 0x000008, "Wrong alignment on FItemTableSourceNode");
static_assert(sizeof(FItemTableSourceNode) == 0x000010, "Wrong size on FItemTableSourceNode");
static_assert(offsetof(FItemTableSourceNode, DataTable) == 0x000000, "Member 'FItemTableSourceNode::DataTable' has a wrong offset!");
static_assert(offsetof(FItemTableSourceNode, RowStruct) == 0x000008, "Member 'FItemTableSourceNode::RowStruct' has a wrong offset!");

// ScriptStruct DuneSandbox.PartyDatabaseEventAddPartyMember
// 0x0020 (0x0020 - 0x0000)
struct FPartyDatabaseEventAddPartyMember final
{
public:
	int64                                         PartyId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyDatabaseEventAddPartyMember) == 0x000008, "Wrong alignment on FPartyDatabaseEventAddPartyMember");
static_assert(sizeof(FPartyDatabaseEventAddPartyMember) == 0x000020, "Wrong size on FPartyDatabaseEventAddPartyMember");
static_assert(offsetof(FPartyDatabaseEventAddPartyMember, PartyId) == 0x000000, "Member 'FPartyDatabaseEventAddPartyMember::PartyId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventAddPartyMember, PlayerId) == 0x000008, "Member 'FPartyDatabaseEventAddPartyMember::PlayerId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventAddPartyMember, PlayerName) == 0x000010, "Member 'FPartyDatabaseEventAddPartyMember::PlayerName' has a wrong offset!");

// ScriptStruct DuneSandbox.PartyDatabaseEventRemovePartyMember
// 0x0018 (0x0018 - 0x0000)
struct FPartyDatabaseEventRemovePartyMember final
{
public:
	int64                                         PartyId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyRemoveReason                            PartyRemoveReason;                                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyDatabaseEventRemovePartyMember) == 0x000008, "Wrong alignment on FPartyDatabaseEventRemovePartyMember");
static_assert(sizeof(FPartyDatabaseEventRemovePartyMember) == 0x000018, "Wrong size on FPartyDatabaseEventRemovePartyMember");
static_assert(offsetof(FPartyDatabaseEventRemovePartyMember, PartyId) == 0x000000, "Member 'FPartyDatabaseEventRemovePartyMember::PartyId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventRemovePartyMember, PlayerId) == 0x000008, "Member 'FPartyDatabaseEventRemovePartyMember::PlayerId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventRemovePartyMember, PartyRemoveReason) == 0x000010, "Member 'FPartyDatabaseEventRemovePartyMember::PartyRemoveReason' has a wrong offset!");

// ScriptStruct DuneSandbox.PartyDatabaseEventPromotePartyLeader
// 0x0010 (0x0010 - 0x0000)
struct FPartyDatabaseEventPromotePartyLeader final
{
public:
	int64                                         PartyId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyDatabaseEventPromotePartyLeader) == 0x000008, "Wrong alignment on FPartyDatabaseEventPromotePartyLeader");
static_assert(sizeof(FPartyDatabaseEventPromotePartyLeader) == 0x000010, "Wrong size on FPartyDatabaseEventPromotePartyLeader");
static_assert(offsetof(FPartyDatabaseEventPromotePartyLeader, PartyId) == 0x000000, "Member 'FPartyDatabaseEventPromotePartyLeader::PartyId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventPromotePartyLeader, PlayerId) == 0x000008, "Member 'FPartyDatabaseEventPromotePartyLeader::PlayerId' has a wrong offset!");

// ScriptStruct DuneSandbox.NPCSpawnIngredient
// 0x0060 (0x0060 - 0x0000)
struct FNPCSpawnIngredient final
{
public:
	struct FGameplayTagQuery                      m_NPCTagQuery;                                     // 0x0000(0x0048)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTagQuery>              m_FallbackTagQueries;                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         m_MinSpawnCount;                                   // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_MaxSpawnCount;                                   // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_SpawnWeight;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCSpawnIngredient) == 0x000008, "Wrong alignment on FNPCSpawnIngredient");
static_assert(sizeof(FNPCSpawnIngredient) == 0x000060, "Wrong size on FNPCSpawnIngredient");
static_assert(offsetof(FNPCSpawnIngredient, m_NPCTagQuery) == 0x000000, "Member 'FNPCSpawnIngredient::m_NPCTagQuery' has a wrong offset!");
static_assert(offsetof(FNPCSpawnIngredient, m_FallbackTagQueries) == 0x000048, "Member 'FNPCSpawnIngredient::m_FallbackTagQueries' has a wrong offset!");
static_assert(offsetof(FNPCSpawnIngredient, m_MinSpawnCount) == 0x000058, "Member 'FNPCSpawnIngredient::m_MinSpawnCount' has a wrong offset!");
static_assert(offsetof(FNPCSpawnIngredient, m_MaxSpawnCount) == 0x000059, "Member 'FNPCSpawnIngredient::m_MaxSpawnCount' has a wrong offset!");
static_assert(offsetof(FNPCSpawnIngredient, m_SpawnWeight) == 0x00005C, "Member 'FNPCSpawnIngredient::m_SpawnWeight' has a wrong offset!");

// ScriptStruct DuneSandbox.PartyDatabaseEventDisbandParty
// 0x0038 (0x0038 - 0x0000)
struct FPartyDatabaseEventDisbandParty final
{
public:
	int64                                         PartyId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int64>                                 InviteIds;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int64>                                 SenderIds;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int64>                                 PlayerIds;                                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyDatabaseEventDisbandParty) == 0x000008, "Wrong alignment on FPartyDatabaseEventDisbandParty");
static_assert(sizeof(FPartyDatabaseEventDisbandParty) == 0x000038, "Wrong size on FPartyDatabaseEventDisbandParty");
static_assert(offsetof(FPartyDatabaseEventDisbandParty, PartyId) == 0x000000, "Member 'FPartyDatabaseEventDisbandParty::PartyId' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventDisbandParty, InviteIds) == 0x000008, "Member 'FPartyDatabaseEventDisbandParty::InviteIds' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventDisbandParty, SenderIds) == 0x000018, "Member 'FPartyDatabaseEventDisbandParty::SenderIds' has a wrong offset!");
static_assert(offsetof(FPartyDatabaseEventDisbandParty, PlayerIds) == 0x000028, "Member 'FPartyDatabaseEventDisbandParty::PlayerIds' has a wrong offset!");

// ScriptStruct DuneSandbox.PartyMemberLocation
// 0x0004 (0x0004 - 0x0000)
struct FPartyMemberLocation final
{
public:
	int16                                         LocationX;                                         // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         LocationY;                                         // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyMemberLocation) == 0x000002, "Wrong alignment on FPartyMemberLocation");
static_assert(sizeof(FPartyMemberLocation) == 0x000004, "Wrong size on FPartyMemberLocation");
static_assert(offsetof(FPartyMemberLocation, LocationX) == 0x000000, "Member 'FPartyMemberLocation::LocationX' has a wrong offset!");
static_assert(offsetof(FPartyMemberLocation, LocationY) == 0x000002, "Member 'FPartyMemberLocation::LocationY' has a wrong offset!");

// ScriptStruct DuneSandbox.PatrolShipBehaviorSettings
// 0x0010 (0x0010 - 0x0000)
struct FPatrolShipBehaviorSettings final
{
public:
	EPatrolShipMovementMode                       MovementMode;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolShipBehaviorSettings) == 0x000004, "Wrong alignment on FPatrolShipBehaviorSettings");
static_assert(sizeof(FPatrolShipBehaviorSettings) == 0x000010, "Wrong size on FPatrolShipBehaviorSettings");
static_assert(offsetof(FPatrolShipBehaviorSettings, MovementMode) == 0x000000, "Member 'FPatrolShipBehaviorSettings::MovementMode' has a wrong offset!");
static_assert(offsetof(FPatrolShipBehaviorSettings, MovementSpeed) == 0x000004, "Member 'FPatrolShipBehaviorSettings::MovementSpeed' has a wrong offset!");
static_assert(offsetof(FPatrolShipBehaviorSettings, Acceleration) == 0x000008, "Member 'FPatrolShipBehaviorSettings::Acceleration' has a wrong offset!");
static_assert(offsetof(FPatrolShipBehaviorSettings, Deceleration) == 0x00000C, "Member 'FPatrolShipBehaviorSettings::Deceleration' has a wrong offset!");

// ScriptStruct DuneSandbox.ThreatBlob
// 0x0040 (0x0040 - 0x0000)
struct FThreatBlob final
{
public:
	struct FVector                                m_Location;                                        // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Radius;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Value;                                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EThreatBlobType                               m_ThreatBlobType;                                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x1F];                                      // 0x0021(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatBlob) == 0x000008, "Wrong alignment on FThreatBlob");
static_assert(sizeof(FThreatBlob) == 0x000040, "Wrong size on FThreatBlob");
static_assert(offsetof(FThreatBlob, m_Location) == 0x000000, "Member 'FThreatBlob::m_Location' has a wrong offset!");
static_assert(offsetof(FThreatBlob, m_Radius) == 0x000018, "Member 'FThreatBlob::m_Radius' has a wrong offset!");
static_assert(offsetof(FThreatBlob, m_Value) == 0x00001C, "Member 'FThreatBlob::m_Value' has a wrong offset!");
static_assert(offsetof(FThreatBlob, m_ThreatBlobType) == 0x000020, "Member 'FThreatBlob::m_ThreatBlobType' has a wrong offset!");

// ScriptStruct DuneSandbox.PatrolShipDebugSettings
// 0x0008 (0x0008 - 0x0000)
struct FPatrolShipDebugSettings final
{
public:
	bool                                          bEnableTraceDebugDraw;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugDrawInterval;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolShipDebugSettings) == 0x000004, "Wrong alignment on FPatrolShipDebugSettings");
static_assert(sizeof(FPatrolShipDebugSettings) == 0x000008, "Wrong size on FPatrolShipDebugSettings");
static_assert(offsetof(FPatrolShipDebugSettings, bEnableTraceDebugDraw) == 0x000000, "Member 'FPatrolShipDebugSettings::bEnableTraceDebugDraw' has a wrong offset!");
static_assert(offsetof(FPatrolShipDebugSettings, DebugDrawInterval) == 0x000004, "Member 'FPatrolShipDebugSettings::DebugDrawInterval' has a wrong offset!");

// ScriptStruct DuneSandbox.TargetingRuleClassWeight
// 0x0038 (0x0038 - 0x0000)
struct FTargetingRuleClassWeight final
{
public:
	TSoftClassPtr<class UClass>                   TargetClass;                                       // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildClasses;                               // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetingRuleClassWeight) == 0x000008, "Wrong alignment on FTargetingRuleClassWeight");
static_assert(sizeof(FTargetingRuleClassWeight) == 0x000038, "Wrong size on FTargetingRuleClassWeight");
static_assert(offsetof(FTargetingRuleClassWeight, TargetClass) == 0x000000, "Member 'FTargetingRuleClassWeight::TargetClass' has a wrong offset!");
static_assert(offsetof(FTargetingRuleClassWeight, bAffectChildClasses) == 0x000030, "Member 'FTargetingRuleClassWeight::bAffectChildClasses' has a wrong offset!");
static_assert(offsetof(FTargetingRuleClassWeight, Weight) == 0x000034, "Member 'FTargetingRuleClassWeight::Weight' has a wrong offset!");

// ScriptStruct DuneSandbox.EDuneAiAttackName
// 0x0000 (0x0008 - 0x0008)
struct FEDuneAiAttackName final : public FStringEnumValue
{
};
static_assert(alignof(FEDuneAiAttackName) == 0x000004, "Wrong alignment on FEDuneAiAttackName");
static_assert(sizeof(FEDuneAiAttackName) == 0x000008, "Wrong size on FEDuneAiAttackName");

// ScriptStruct DuneSandbox.PatrolShipAttackSettings
// 0x0048 (0x0048 - 0x0000)
struct FPatrolShipAttackSettings final
{
public:
	float                                         SpotlightDetectionToleranceDistance;               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEDuneAiAttackName                     AttackName;                                        // 0x0004(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIAttackTier                                 AttackTier;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackRadiusToConsider;                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectionIntervalSeconds;                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectionCooldownSeconds;                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineOfSightTestIntervalSeconds;                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldEnterCooldownWhenNpcSpawns;                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CooldownStartDelaySeconds;                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpotlightShouldTrackTarget;                       // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrackedTargetPositionUpdateRate;                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetTrackingDisengageDistanceAddition;           // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NpcLod0DistanceSquared;                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldApplySuspensorFieldOnDetection;             // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuspensorFieldDuration;                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensorFieldRadius;                              // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldEnterCooldownIfTargetTrackingStopped;       // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDeSpawnNpcOnTargetTrackingStopped;          // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPatrolShipAttackSettings) == 0x000004, "Wrong alignment on FPatrolShipAttackSettings");
static_assert(sizeof(FPatrolShipAttackSettings) == 0x000048, "Wrong size on FPatrolShipAttackSettings");
static_assert(offsetof(FPatrolShipAttackSettings, SpotlightDetectionToleranceDistance) == 0x000000, "Member 'FPatrolShipAttackSettings::SpotlightDetectionToleranceDistance' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, AttackName) == 0x000004, "Member 'FPatrolShipAttackSettings::AttackName' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, AttackTier) == 0x00000C, "Member 'FPatrolShipAttackSettings::AttackTier' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, AttackRadiusToConsider) == 0x000010, "Member 'FPatrolShipAttackSettings::AttackRadiusToConsider' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, DetectionIntervalSeconds) == 0x000014, "Member 'FPatrolShipAttackSettings::DetectionIntervalSeconds' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, DetectionCooldownSeconds) == 0x000018, "Member 'FPatrolShipAttackSettings::DetectionCooldownSeconds' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, LineOfSightTestIntervalSeconds) == 0x00001C, "Member 'FPatrolShipAttackSettings::LineOfSightTestIntervalSeconds' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, bShouldEnterCooldownWhenNpcSpawns) == 0x000020, "Member 'FPatrolShipAttackSettings::bShouldEnterCooldownWhenNpcSpawns' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, CooldownStartDelaySeconds) == 0x000024, "Member 'FPatrolShipAttackSettings::CooldownStartDelaySeconds' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, bSpotlightShouldTrackTarget) == 0x000028, "Member 'FPatrolShipAttackSettings::bSpotlightShouldTrackTarget' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, TrackedTargetPositionUpdateRate) == 0x00002C, "Member 'FPatrolShipAttackSettings::TrackedTargetPositionUpdateRate' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, TargetTrackingDisengageDistanceAddition) == 0x000030, "Member 'FPatrolShipAttackSettings::TargetTrackingDisengageDistanceAddition' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, NpcLod0DistanceSquared) == 0x000034, "Member 'FPatrolShipAttackSettings::NpcLod0DistanceSquared' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, bShouldApplySuspensorFieldOnDetection) == 0x000038, "Member 'FPatrolShipAttackSettings::bShouldApplySuspensorFieldOnDetection' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, SuspensorFieldDuration) == 0x00003C, "Member 'FPatrolShipAttackSettings::SuspensorFieldDuration' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, SuspensorFieldRadius) == 0x000040, "Member 'FPatrolShipAttackSettings::SuspensorFieldRadius' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, bShouldEnterCooldownIfTargetTrackingStopped) == 0x000044, "Member 'FPatrolShipAttackSettings::bShouldEnterCooldownIfTargetTrackingStopped' has a wrong offset!");
static_assert(offsetof(FPatrolShipAttackSettings, bShouldDeSpawnNpcOnTargetTrackingStopped) == 0x000045, "Member 'FPatrolShipAttackSettings::bShouldDeSpawnNpcOnTargetTrackingStopped' has a wrong offset!");

// ScriptStruct DuneSandbox.DisplacementUpdateData
// 0x0128 (0x0128 - 0x0000)
struct FDisplacementUpdateData final
{
public:
	class UNiagaraSystem*                         m_EnterSurfaceNiagaraSystem;                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeDisplacementMap*              m_HorizontalAttackDisplacementMap1;                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeDisplacementMap*              m_HorizontalAttackDisplacementMap2;                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeDisplacementMap*              m_VerticalAttackDisplacementMap1;                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeDisplacementMap*              m_VerticalAttackDisplacementMap2;                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeDisplacementMap*              m_BreachDisplacementMap1;                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeDisplacementMap*              m_BreachDisplacementMap2;                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_ExitFalloff;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_ReEntryFalloff;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_ReEntryDelay;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_VerticalAttackRisingCurve;                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_VerticalAttackFallingCurve;                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_VerticalAttackDisplacementBlendCurve;            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_BreachPositionCurve;                             // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_DisplacementAlphaCurve;                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_BreachAttackDisplacementBlendCurve;              // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESandwormAnimationType                        m_ECurrentAnimation;                               // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_OffsetsInitialized;                              // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_MouthSocketsOffset;                              // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MouthSocket03T;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MouthSocket03L;                                  // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MouthSocket03R;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxMouthJawDistance;                             // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BodySocketRadius;                                // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MouthSocketRadius;                               // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TopMouthSocketRadius;                            // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        m_SocketsLastFrame;                                // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TMap<int32, struct FVector>                   m_IntersectingIndices;                             // 0x00B8(0x0050)(Edit, BlueprintVisible, Transient, EditConst, NativeAccessSpecifierPublic)
	float                                         m_ReEntryMultiplier;                               // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      m_DisplacementValues;                              // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	float                                         m_OpenMouthLerpValue;                              // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDisplacementUpdateData) == 0x000008, "Wrong alignment on FDisplacementUpdateData");
static_assert(sizeof(FDisplacementUpdateData) == 0x000128, "Wrong size on FDisplacementUpdateData");
static_assert(offsetof(FDisplacementUpdateData, m_EnterSurfaceNiagaraSystem) == 0x000000, "Member 'FDisplacementUpdateData::m_EnterSurfaceNiagaraSystem' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_HorizontalAttackDisplacementMap1) == 0x000008, "Member 'FDisplacementUpdateData::m_HorizontalAttackDisplacementMap1' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_HorizontalAttackDisplacementMap2) == 0x000010, "Member 'FDisplacementUpdateData::m_HorizontalAttackDisplacementMap2' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_VerticalAttackDisplacementMap1) == 0x000018, "Member 'FDisplacementUpdateData::m_VerticalAttackDisplacementMap1' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_VerticalAttackDisplacementMap2) == 0x000020, "Member 'FDisplacementUpdateData::m_VerticalAttackDisplacementMap2' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_BreachDisplacementMap1) == 0x000028, "Member 'FDisplacementUpdateData::m_BreachDisplacementMap1' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_BreachDisplacementMap2) == 0x000030, "Member 'FDisplacementUpdateData::m_BreachDisplacementMap2' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_ExitFalloff) == 0x000038, "Member 'FDisplacementUpdateData::m_ExitFalloff' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_ReEntryFalloff) == 0x000040, "Member 'FDisplacementUpdateData::m_ReEntryFalloff' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_ReEntryDelay) == 0x000048, "Member 'FDisplacementUpdateData::m_ReEntryDelay' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_VerticalAttackRisingCurve) == 0x000050, "Member 'FDisplacementUpdateData::m_VerticalAttackRisingCurve' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_VerticalAttackFallingCurve) == 0x000058, "Member 'FDisplacementUpdateData::m_VerticalAttackFallingCurve' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_VerticalAttackDisplacementBlendCurve) == 0x000060, "Member 'FDisplacementUpdateData::m_VerticalAttackDisplacementBlendCurve' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_BreachPositionCurve) == 0x000068, "Member 'FDisplacementUpdateData::m_BreachPositionCurve' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_DisplacementAlphaCurve) == 0x000070, "Member 'FDisplacementUpdateData::m_DisplacementAlphaCurve' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_BreachAttackDisplacementBlendCurve) == 0x000078, "Member 'FDisplacementUpdateData::m_BreachAttackDisplacementBlendCurve' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_ECurrentAnimation) == 0x000080, "Member 'FDisplacementUpdateData::m_ECurrentAnimation' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_OffsetsInitialized) == 0x000081, "Member 'FDisplacementUpdateData::m_OffsetsInitialized' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_MouthSocketsOffset) == 0x000084, "Member 'FDisplacementUpdateData::m_MouthSocketsOffset' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_MouthSocket03T) == 0x000088, "Member 'FDisplacementUpdateData::m_MouthSocket03T' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_MouthSocket03L) == 0x00008C, "Member 'FDisplacementUpdateData::m_MouthSocket03L' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_MouthSocket03R) == 0x000090, "Member 'FDisplacementUpdateData::m_MouthSocket03R' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_MaxMouthJawDistance) == 0x000094, "Member 'FDisplacementUpdateData::m_MaxMouthJawDistance' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_BodySocketRadius) == 0x000098, "Member 'FDisplacementUpdateData::m_BodySocketRadius' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_MouthSocketRadius) == 0x00009C, "Member 'FDisplacementUpdateData::m_MouthSocketRadius' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_TopMouthSocketRadius) == 0x0000A0, "Member 'FDisplacementUpdateData::m_TopMouthSocketRadius' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_SocketsLastFrame) == 0x0000A8, "Member 'FDisplacementUpdateData::m_SocketsLastFrame' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_IntersectingIndices) == 0x0000B8, "Member 'FDisplacementUpdateData::m_IntersectingIndices' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_ReEntryMultiplier) == 0x000108, "Member 'FDisplacementUpdateData::m_ReEntryMultiplier' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_DisplacementValues) == 0x000110, "Member 'FDisplacementUpdateData::m_DisplacementValues' has a wrong offset!");
static_assert(offsetof(FDisplacementUpdateData, m_OpenMouthLerpValue) == 0x000120, "Member 'FDisplacementUpdateData::m_OpenMouthLerpValue' has a wrong offset!");

// ScriptStruct DuneSandbox.PatrolShipLightSettings
// 0x0094 (0x0094 - 0x0000)
struct FPatrolShipLightSettings final
{
public:
	float                                         DetectionRadius;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpotLightReachDistance;                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StartingColor;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultLightColor;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultLightIntensityMultiplier;                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightIntensityMultiplierWhenTrackingTarget;        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightConeIntensityMultiplier;                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightConeMeshFadeDistance;                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightConeMeshFadeHardness;                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AlertedLightColor;                                 // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DetectionLightColor;                               // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CooldownLightColor;                                // 0x005C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFadeTimeSeconds;                              // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownLightIntensity;                            // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSweepDuringCooldown;                        // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpotlightRadiusWhenTrackingTarget;                 // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeRadiusShrinkFactor;                            // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpotlightSweepSpeedMultiplier;                     // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpotlightLerpSpeed;                                // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpotLightAngleMagnitudeMultiplier;                 // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpotLightTrackingSpeedMultiplier;                  // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpotLightRadiusLerpSpeed;                          // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolShipLightSettings) == 0x000004, "Wrong alignment on FPatrolShipLightSettings");
static_assert(sizeof(FPatrolShipLightSettings) == 0x000094, "Wrong size on FPatrolShipLightSettings");
static_assert(offsetof(FPatrolShipLightSettings, DetectionRadius) == 0x000000, "Member 'FPatrolShipLightSettings::DetectionRadius' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, SpotLightReachDistance) == 0x000004, "Member 'FPatrolShipLightSettings::SpotLightReachDistance' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, StartingColor) == 0x000008, "Member 'FPatrolShipLightSettings::StartingColor' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, DefaultLightColor) == 0x000018, "Member 'FPatrolShipLightSettings::DefaultLightColor' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, DefaultLightIntensityMultiplier) == 0x000028, "Member 'FPatrolShipLightSettings::DefaultLightIntensityMultiplier' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, LightIntensityMultiplierWhenTrackingTarget) == 0x00002C, "Member 'FPatrolShipLightSettings::LightIntensityMultiplierWhenTrackingTarget' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, LightConeIntensityMultiplier) == 0x000030, "Member 'FPatrolShipLightSettings::LightConeIntensityMultiplier' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, LightConeMeshFadeDistance) == 0x000034, "Member 'FPatrolShipLightSettings::LightConeMeshFadeDistance' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, LightConeMeshFadeHardness) == 0x000038, "Member 'FPatrolShipLightSettings::LightConeMeshFadeHardness' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, AlertedLightColor) == 0x00003C, "Member 'FPatrolShipLightSettings::AlertedLightColor' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, DetectionLightColor) == 0x00004C, "Member 'FPatrolShipLightSettings::DetectionLightColor' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, CooldownLightColor) == 0x00005C, "Member 'FPatrolShipLightSettings::CooldownLightColor' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, LightFadeTimeSeconds) == 0x00006C, "Member 'FPatrolShipLightSettings::LightFadeTimeSeconds' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, CooldownLightIntensity) == 0x000070, "Member 'FPatrolShipLightSettings::CooldownLightIntensity' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, bShouldSweepDuringCooldown) == 0x000074, "Member 'FPatrolShipLightSettings::bShouldSweepDuringCooldown' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, SpotlightRadiusWhenTrackingTarget) == 0x000078, "Member 'FPatrolShipLightSettings::SpotlightRadiusWhenTrackingTarget' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, ConeRadiusShrinkFactor) == 0x00007C, "Member 'FPatrolShipLightSettings::ConeRadiusShrinkFactor' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, SpotlightSweepSpeedMultiplier) == 0x000080, "Member 'FPatrolShipLightSettings::SpotlightSweepSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, SpotlightLerpSpeed) == 0x000084, "Member 'FPatrolShipLightSettings::SpotlightLerpSpeed' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, SpotLightAngleMagnitudeMultiplier) == 0x000088, "Member 'FPatrolShipLightSettings::SpotLightAngleMagnitudeMultiplier' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, SpotLightTrackingSpeedMultiplier) == 0x00008C, "Member 'FPatrolShipLightSettings::SpotLightTrackingSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FPatrolShipLightSettings, SpotLightRadiusLerpSpeed) == 0x000090, "Member 'FPatrolShipLightSettings::SpotLightRadiusLerpSpeed' has a wrong offset!");

// ScriptStruct DuneSandbox.PatrolShipCollisionSettings
// 0x0040 (0x0040 - 0x0000)
struct FPatrolShipCollisionSettings final
{
public:
	bool                                          bEnableFlyingVehicleKnockback;                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlyingVehicleKnockBackRange;                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlyingVehicleKnockBackStrength;                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePlayerKnockBack;                            // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerKnockBackRange;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerKnockBackStrength;                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBuildingPieceDestruction;                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OvelapTestInterval;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ColliderRelativeCenter;                            // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColliderCapsuleRadius;                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColliderCapsuleHalfLength;                         // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolShipCollisionSettings) == 0x000008, "Wrong alignment on FPatrolShipCollisionSettings");
static_assert(sizeof(FPatrolShipCollisionSettings) == 0x000040, "Wrong size on FPatrolShipCollisionSettings");
static_assert(offsetof(FPatrolShipCollisionSettings, bEnableFlyingVehicleKnockback) == 0x000000, "Member 'FPatrolShipCollisionSettings::bEnableFlyingVehicleKnockback' has a wrong offset!");
static_assert(offsetof(FPatrolShipCollisionSettings, FlyingVehicleKnockBackRange) == 0x000004, "Member 'FPatrolShipCollisionSettings::FlyingVehicleKnockBackRange' has a wrong offset!");
static_assert(offsetof(FPatrolShipCollisionSettings, FlyingVehicleKnockBackStrength) == 0x000008, "Member 'FPatrolShipCollisionSettings::FlyingVehicleKnockBackStrength' has a wrong offset!");
static_assert(offsetof(FPatrolShipCollisionSettings, bEnablePlayerKnockBack) == 0x00000C, "Member 'FPatrolShipCollisionSettings::bEnablePlayerKnockBack' has a wrong offset!");
static_assert(offsetof(FPatrolShipCollisionSettings, PlayerKnockBackRange) == 0x000010, "Member 'FPatrolShipCollisionSettings::PlayerKnockBackRange' has a wrong offset!");
static_assert(offsetof(FPatrolShipCollisionSettings, PlayerKnockBackStrength) == 0x000014, "Member 'FPatrolShipCollisionSettings::PlayerKnockBackStrength' has a wrong offset!");
static_assert(offsetof(FPatrolShipCollisionSettings, bEnableBuildingPieceDestruction) == 0x000018, "Member 'FPatrolShipCollisionSettings::bEnableBuildingPieceDestruction' has a wrong offset!");
static_assert(offsetof(FPatrolShipCollisionSettings, OvelapTestInterval) == 0x00001C, "Member 'FPatrolShipCollisionSettings::OvelapTestInterval' has a wrong offset!");
static_assert(offsetof(FPatrolShipCollisionSettings, ColliderRelativeCenter) == 0x000020, "Member 'FPatrolShipCollisionSettings::ColliderRelativeCenter' has a wrong offset!");
static_assert(offsetof(FPatrolShipCollisionSettings, ColliderCapsuleRadius) == 0x000038, "Member 'FPatrolShipCollisionSettings::ColliderCapsuleRadius' has a wrong offset!");
static_assert(offsetof(FPatrolShipCollisionSettings, ColliderCapsuleHalfLength) == 0x00003C, "Member 'FPatrolShipCollisionSettings::ColliderCapsuleHalfLength' has a wrong offset!");

// ScriptStruct DuneSandbox.TimerIntervalPerLod
// 0x0050 (0x0050 - 0x0000)
struct FTimerIntervalPerLod final
{
public:
	TMap<ELodLevel, float>                        m_Intervals;                                       // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimerIntervalPerLod) == 0x000008, "Wrong alignment on FTimerIntervalPerLod");
static_assert(sizeof(FTimerIntervalPerLod) == 0x000050, "Wrong size on FTimerIntervalPerLod");
static_assert(offsetof(FTimerIntervalPerLod, m_Intervals) == 0x000000, "Member 'FTimerIntervalPerLod::m_Intervals' has a wrong offset!");

// ScriptStruct DuneSandbox.PatrolShipTrackedTargetData
// 0x0030 (0x0030 - 0x0000)
struct FPatrolShipTrackedTargetData final
{
public:
	struct FVector                                TrackedTargetPosition;                             // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TrackedTargetVelocity;                             // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolShipTrackedTargetData) == 0x000008, "Wrong alignment on FPatrolShipTrackedTargetData");
static_assert(sizeof(FPatrolShipTrackedTargetData) == 0x000030, "Wrong size on FPatrolShipTrackedTargetData");
static_assert(offsetof(FPatrolShipTrackedTargetData, TrackedTargetPosition) == 0x000000, "Member 'FPatrolShipTrackedTargetData::TrackedTargetPosition' has a wrong offset!");
static_assert(offsetof(FPatrolShipTrackedTargetData, TrackedTargetVelocity) == 0x000018, "Member 'FPatrolShipTrackedTargetData::TrackedTargetVelocity' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAIWeaponAccuracyConfig
// 0x00A0 (0x00A0 - 0x0000)
struct FDuneAIWeaponAccuracyConfig final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             m_DistanceCurve;                                   // 0x0008(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             m_LosModifierCurve;                                // 0x0038(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             m_SpeedModifierCurve;                              // 0x0068(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AccuracyModifierOnCombatStart;                   // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AccuracyModifierResetTime;                       // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAIWeaponAccuracyConfig) == 0x000008, "Wrong alignment on FDuneAIWeaponAccuracyConfig");
static_assert(sizeof(FDuneAIWeaponAccuracyConfig) == 0x0000A0, "Wrong size on FDuneAIWeaponAccuracyConfig");
static_assert(offsetof(FDuneAIWeaponAccuracyConfig, Tier) == 0x000000, "Member 'FDuneAIWeaponAccuracyConfig::Tier' has a wrong offset!");
static_assert(offsetof(FDuneAIWeaponAccuracyConfig, m_DistanceCurve) == 0x000008, "Member 'FDuneAIWeaponAccuracyConfig::m_DistanceCurve' has a wrong offset!");
static_assert(offsetof(FDuneAIWeaponAccuracyConfig, m_LosModifierCurve) == 0x000038, "Member 'FDuneAIWeaponAccuracyConfig::m_LosModifierCurve' has a wrong offset!");
static_assert(offsetof(FDuneAIWeaponAccuracyConfig, m_SpeedModifierCurve) == 0x000068, "Member 'FDuneAIWeaponAccuracyConfig::m_SpeedModifierCurve' has a wrong offset!");
static_assert(offsetof(FDuneAIWeaponAccuracyConfig, m_AccuracyModifierOnCombatStart) == 0x000098, "Member 'FDuneAIWeaponAccuracyConfig::m_AccuracyModifierOnCombatStart' has a wrong offset!");
static_assert(offsetof(FDuneAIWeaponAccuracyConfig, m_AccuracyModifierResetTime) == 0x00009C, "Member 'FDuneAIWeaponAccuracyConfig::m_AccuracyModifierResetTime' has a wrong offset!");

// ScriptStruct DuneSandbox.PentashieldAndDoorComponent
// 0x0001 (0x0001 - 0x0000)
struct FPentashieldAndDoorComponent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPentashieldAndDoorComponent) == 0x000001, "Wrong alignment on FPentashieldAndDoorComponent");
static_assert(sizeof(FPentashieldAndDoorComponent) == 0x000001, "Wrong size on FPentashieldAndDoorComponent");

// ScriptStruct DuneSandbox.PerceivedSourceData
// 0x0030 (0x0030 - 0x0000)
struct FPerceivedSourceData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGenericTeamId                         TeamID;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Instigator;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerceivedSourceData) == 0x000008, "Wrong alignment on FPerceivedSourceData");
static_assert(sizeof(FPerceivedSourceData) == 0x000030, "Wrong size on FPerceivedSourceData");
static_assert(offsetof(FPerceivedSourceData, TeamID) == 0x000008, "Member 'FPerceivedSourceData::TeamID' has a wrong offset!");
static_assert(offsetof(FPerceivedSourceData, Location) == 0x000010, "Member 'FPerceivedSourceData::Location' has a wrong offset!");
static_assert(offsetof(FPerceivedSourceData, Instigator) == 0x000028, "Member 'FPerceivedSourceData::Instigator' has a wrong offset!");

// ScriptStruct DuneSandbox.PerServerSetRankBulkData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPerServerSetRankBulkData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerServerSetRankBulkData) == 0x000008, "Wrong alignment on FPerServerSetRankBulkData");
static_assert(sizeof(FPerServerSetRankBulkData) == 0x000010, "Wrong size on FPerServerSetRankBulkData");

// ScriptStruct DuneSandbox.PermissionLevelSettings
// 0x0050 (0x0050 - 0x0000)
struct FPermissionLevelSettings final
{
public:
	EPermissionLevel                              m_PermissionLevel;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_PermissionName;                                  // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_PermissionIcon;                                  // 0x0020(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermissionLevelSettings) == 0x000008, "Wrong alignment on FPermissionLevelSettings");
static_assert(sizeof(FPermissionLevelSettings) == 0x000050, "Wrong size on FPermissionLevelSettings");
static_assert(offsetof(FPermissionLevelSettings, m_PermissionLevel) == 0x000000, "Member 'FPermissionLevelSettings::m_PermissionLevel' has a wrong offset!");
static_assert(offsetof(FPermissionLevelSettings, m_PermissionName) == 0x000008, "Member 'FPermissionLevelSettings::m_PermissionName' has a wrong offset!");
static_assert(offsetof(FPermissionLevelSettings, m_PermissionIcon) == 0x000020, "Member 'FPermissionLevelSettings::m_PermissionIcon' has a wrong offset!");

// ScriptStruct DuneSandbox.PermissionDatabaseEventTakeover
// 0x0018 (0x0018 - 0x0000)
struct FPermissionDatabaseEventTakeover final
{
public:
	int64                                         ActorId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerGuildId;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermissionDatabaseEventTakeover) == 0x000008, "Wrong alignment on FPermissionDatabaseEventTakeover");
static_assert(sizeof(FPermissionDatabaseEventTakeover) == 0x000018, "Wrong size on FPermissionDatabaseEventTakeover");
static_assert(offsetof(FPermissionDatabaseEventTakeover, ActorId) == 0x000000, "Member 'FPermissionDatabaseEventTakeover::ActorId' has a wrong offset!");
static_assert(offsetof(FPermissionDatabaseEventTakeover, PlayerId) == 0x000008, "Member 'FPermissionDatabaseEventTakeover::PlayerId' has a wrong offset!");
static_assert(offsetof(FPermissionDatabaseEventTakeover, PlayerGuildId) == 0x000010, "Member 'FPermissionDatabaseEventTakeover::PlayerGuildId' has a wrong offset!");

// ScriptStruct DuneSandbox.StatusEffectInfoText
// 0x0030 (0x0030 - 0x0000)
struct FStatusEffectInfoText final
{
public:
	class FText                                   m_Value;                                           // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   m_DescriptorFormat;                                // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatusEffectInfoText) == 0x000008, "Wrong alignment on FStatusEffectInfoText");
static_assert(sizeof(FStatusEffectInfoText) == 0x000030, "Wrong size on FStatusEffectInfoText");
static_assert(offsetof(FStatusEffectInfoText, m_Value) == 0x000000, "Member 'FStatusEffectInfoText::m_Value' has a wrong offset!");
static_assert(offsetof(FStatusEffectInfoText, m_DescriptorFormat) == 0x000018, "Member 'FStatusEffectInfoText::m_DescriptorFormat' has a wrong offset!");

// ScriptStruct DuneSandbox.PermissionDatabaseEventSetName
// 0x0018 (0x0018 - 0x0000)
struct FPermissionDatabaseEventSetName final
{
public:
	int64                                         ActorId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermissionDatabaseEventSetName) == 0x000008, "Wrong alignment on FPermissionDatabaseEventSetName");
static_assert(sizeof(FPermissionDatabaseEventSetName) == 0x000018, "Wrong size on FPermissionDatabaseEventSetName");
static_assert(offsetof(FPermissionDatabaseEventSetName, ActorId) == 0x000000, "Member 'FPermissionDatabaseEventSetName::ActorId' has a wrong offset!");
static_assert(offsetof(FPermissionDatabaseEventSetName, Name) == 0x000008, "Member 'FPermissionDatabaseEventSetName::Name' has a wrong offset!");

// ScriptStruct DuneSandbox.PermissionDatabaseEventSetAccessLevel
// 0x0010 (0x0010 - 0x0000)
struct FPermissionDatabaseEventSetAccessLevel final
{
public:
	int64                                         ActorId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         AccessLevel;                                       // 0x0008(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPermissionDatabaseEventSetAccessLevel) == 0x000008, "Wrong alignment on FPermissionDatabaseEventSetAccessLevel");
static_assert(sizeof(FPermissionDatabaseEventSetAccessLevel) == 0x000010, "Wrong size on FPermissionDatabaseEventSetAccessLevel");
static_assert(offsetof(FPermissionDatabaseEventSetAccessLevel, ActorId) == 0x000000, "Member 'FPermissionDatabaseEventSetAccessLevel::ActorId' has a wrong offset!");
static_assert(offsetof(FPermissionDatabaseEventSetAccessLevel, AccessLevel) == 0x000008, "Member 'FPermissionDatabaseEventSetAccessLevel::AccessLevel' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemShieldStateChangeEvent
// 0x0008 (0x0038 - 0x0030)
struct FTotemShieldStateChangeEvent final : public FGameEvent
{
public:
	ETotemShieldState                             m_TotemShieldState;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTotemShieldStateChangeEvent) == 0x000008, "Wrong alignment on FTotemShieldStateChangeEvent");
static_assert(sizeof(FTotemShieldStateChangeEvent) == 0x000038, "Wrong size on FTotemShieldStateChangeEvent");
static_assert(offsetof(FTotemShieldStateChangeEvent, m_TotemShieldState) == 0x000030, "Member 'FTotemShieldStateChangeEvent::m_TotemShieldState' has a wrong offset!");

// ScriptStruct DuneSandbox.PermissionDatabaseEventSetRank
// 0x0020 (0x0020 - 0x0000)
struct FPermissionDatabaseEventSetRank final
{
public:
	int64                                         ActorId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PlayerGuildId;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Rank;                                              // 0x0018(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPermissionDatabaseEventSetRank) == 0x000008, "Wrong alignment on FPermissionDatabaseEventSetRank");
static_assert(sizeof(FPermissionDatabaseEventSetRank) == 0x000020, "Wrong size on FPermissionDatabaseEventSetRank");
static_assert(offsetof(FPermissionDatabaseEventSetRank, ActorId) == 0x000000, "Member 'FPermissionDatabaseEventSetRank::ActorId' has a wrong offset!");
static_assert(offsetof(FPermissionDatabaseEventSetRank, PlayerId) == 0x000008, "Member 'FPermissionDatabaseEventSetRank::PlayerId' has a wrong offset!");
static_assert(offsetof(FPermissionDatabaseEventSetRank, PlayerGuildId) == 0x000010, "Member 'FPermissionDatabaseEventSetRank::PlayerGuildId' has a wrong offset!");
static_assert(offsetof(FPermissionDatabaseEventSetRank, Rank) == 0x000018, "Member 'FPermissionDatabaseEventSetRank::Rank' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildablesInCategoryData
// 0x0008 (0x0008 - 0x0000)
struct FBuildablesInCategoryData final
{
public:
	EPermissionActorType                          m_BuildablesInCategoryActorType;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_TotalBuildablesInCategory;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildablesInCategoryData) == 0x000004, "Wrong alignment on FBuildablesInCategoryData");
static_assert(sizeof(FBuildablesInCategoryData) == 0x000008, "Wrong size on FBuildablesInCategoryData");
static_assert(offsetof(FBuildablesInCategoryData, m_BuildablesInCategoryActorType) == 0x000000, "Member 'FBuildablesInCategoryData::m_BuildablesInCategoryActorType' has a wrong offset!");
static_assert(offsetof(FBuildablesInCategoryData, m_TotalBuildablesInCategory) == 0x000004, "Member 'FBuildablesInCategoryData::m_TotalBuildablesInCategory' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorPermissionRankData
// 0x0018 (0x0018 - 0x0000)
struct FActorPermissionRankData final
{
public:
	struct FUniqueID                              m_PlayerId;                                        // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPermissionLevel                              m_Rank;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              m_PlayerGuildId;                                   // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorPermissionRankData) == 0x000008, "Wrong alignment on FActorPermissionRankData");
static_assert(sizeof(FActorPermissionRankData) == 0x000018, "Wrong size on FActorPermissionRankData");
static_assert(offsetof(FActorPermissionRankData, m_PlayerId) == 0x000000, "Member 'FActorPermissionRankData::m_PlayerId' has a wrong offset!");
static_assert(offsetof(FActorPermissionRankData, m_Rank) == 0x000008, "Member 'FActorPermissionRankData::m_Rank' has a wrong offset!");
static_assert(offsetof(FActorPermissionRankData, m_PlayerGuildId) == 0x000010, "Member 'FActorPermissionRankData::m_PlayerGuildId' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorPermissionData
// 0x0028 (0x0028 - 0x0000)
struct FActorPermissionData final
{
public:
	TArray<struct FActorPermissionRankData>       m_Ranks;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FUniqueID                              m_ActorId;                                         // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_ActorName;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPermissionActorType                          m_ActorType;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPermissionLevel                              m_AccessLevel;                                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsChild;                                        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsPartialData;                                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorPermissionData) == 0x000008, "Wrong alignment on FActorPermissionData");
static_assert(sizeof(FActorPermissionData) == 0x000028, "Wrong size on FActorPermissionData");
static_assert(offsetof(FActorPermissionData, m_Ranks) == 0x000000, "Member 'FActorPermissionData::m_Ranks' has a wrong offset!");
static_assert(offsetof(FActorPermissionData, m_ActorId) == 0x000010, "Member 'FActorPermissionData::m_ActorId' has a wrong offset!");
static_assert(offsetof(FActorPermissionData, m_ActorName) == 0x000018, "Member 'FActorPermissionData::m_ActorName' has a wrong offset!");
static_assert(offsetof(FActorPermissionData, m_ActorType) == 0x000020, "Member 'FActorPermissionData::m_ActorType' has a wrong offset!");
static_assert(offsetof(FActorPermissionData, m_AccessLevel) == 0x000021, "Member 'FActorPermissionData::m_AccessLevel' has a wrong offset!");
static_assert(offsetof(FActorPermissionData, m_bIsChild) == 0x000022, "Member 'FActorPermissionData::m_bIsChild' has a wrong offset!");
static_assert(offsetof(FActorPermissionData, m_bIsPartialData) == 0x000023, "Member 'FActorPermissionData::m_bIsPartialData' has a wrong offset!");

// ScriptStruct DuneSandbox.PermissionTypeConfiguration
// 0x0028 (0x0028 - 0x0000)
struct FPermissionTypeConfiguration final
{
public:
	EPermissionLevel                              m_NeededLevel;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_PermissionTypeName;                              // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	bool                                          m_bAllowedIfActorNotRegistered;                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPermissionTypeConfiguration) == 0x000008, "Wrong alignment on FPermissionTypeConfiguration");
static_assert(sizeof(FPermissionTypeConfiguration) == 0x000028, "Wrong size on FPermissionTypeConfiguration");
static_assert(offsetof(FPermissionTypeConfiguration, m_NeededLevel) == 0x000000, "Member 'FPermissionTypeConfiguration::m_NeededLevel' has a wrong offset!");
static_assert(offsetof(FPermissionTypeConfiguration, m_PermissionTypeName) == 0x000008, "Member 'FPermissionTypeConfiguration::m_PermissionTypeName' has a wrong offset!");
static_assert(offsetof(FPermissionTypeConfiguration, m_bAllowedIfActorNotRegistered) == 0x000020, "Member 'FPermissionTypeConfiguration::m_bAllowedIfActorNotRegistered' has a wrong offset!");

// ScriptStruct DuneSandbox.PingMarkerRowBase
// 0x0000 (0x0158 - 0x0158)
struct FPingMarkerRowBase final : public FFullscreenMapMarkerRowBase
{
};
static_assert(alignof(FPingMarkerRowBase) == 0x000008, "Wrong alignment on FPingMarkerRowBase");
static_assert(sizeof(FPingMarkerRowBase) == 0x000158, "Wrong size on FPingMarkerRowBase");

// ScriptStruct DuneSandbox.VehicleModuleDurabilityComponent_BlueprintWrapper
// 0x0140 (0x0140 - 0x0000)
struct FVehicleModuleDurabilityComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleModuleDurabilityStats          VehicleModuleDurabilityStats;                      // 0x00E0(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleDurabilityComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FVehicleModuleDurabilityComponent_BlueprintWrapper");
static_assert(sizeof(FVehicleModuleDurabilityComponent_BlueprintWrapper) == 0x000140, "Wrong size on FVehicleModuleDurabilityComponent_BlueprintWrapper");
static_assert(offsetof(FVehicleModuleDurabilityComponent_BlueprintWrapper, VehicleModuleDurabilityStats) == 0x0000E0, "Member 'FVehicleModuleDurabilityComponent_BlueprintWrapper::VehicleModuleDurabilityStats' has a wrong offset!");

// ScriptStruct DuneSandbox.EHarvestWaterPotential
// 0x0000 (0x0008 - 0x0008)
struct FEHarvestWaterPotential final : public FStringEnumValue
{
};
static_assert(alignof(FEHarvestWaterPotential) == 0x000004, "Wrong alignment on FEHarvestWaterPotential");
static_assert(sizeof(FEHarvestWaterPotential) == 0x000008, "Wrong size on FEHarvestWaterPotential");

// ScriptStruct DuneSandbox.HarvestWaterNotificationUpdateData
// 0x000C (0x000C - 0x0000)
struct FHarvestWaterNotificationUpdateData final
{
public:
	int32                                         m_Quantity;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEHarvestWaterPotential                m_HarvestWaterPotential;                           // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarvestWaterNotificationUpdateData) == 0x000004, "Wrong alignment on FHarvestWaterNotificationUpdateData");
static_assert(sizeof(FHarvestWaterNotificationUpdateData) == 0x00000C, "Wrong size on FHarvestWaterNotificationUpdateData");
static_assert(offsetof(FHarvestWaterNotificationUpdateData, m_Quantity) == 0x000000, "Member 'FHarvestWaterNotificationUpdateData::m_Quantity' has a wrong offset!");
static_assert(offsetof(FHarvestWaterNotificationUpdateData, m_HarvestWaterPotential) == 0x000004, "Member 'FHarvestWaterNotificationUpdateData::m_HarvestWaterPotential' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceableBloodDataRow
// 0x0020 (0x0030 - 0x0010)
struct FPlaceableBloodDataRow final : public FTableRowBase
{
public:
	float                                         m_BloodWaterExtractionRate;                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BloodWaterExtractionEfficiency;                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_CorpseExtractionTimeSeconds;                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_CorpseBloodYield;                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_OnProcessingStartedAudioEvent;                   // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_OnProcessingStopedAudioEvent;                    // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableBloodDataRow) == 0x000008, "Wrong alignment on FPlaceableBloodDataRow");
static_assert(sizeof(FPlaceableBloodDataRow) == 0x000030, "Wrong size on FPlaceableBloodDataRow");
static_assert(offsetof(FPlaceableBloodDataRow, m_BloodWaterExtractionRate) == 0x000010, "Member 'FPlaceableBloodDataRow::m_BloodWaterExtractionRate' has a wrong offset!");
static_assert(offsetof(FPlaceableBloodDataRow, m_BloodWaterExtractionEfficiency) == 0x000014, "Member 'FPlaceableBloodDataRow::m_BloodWaterExtractionEfficiency' has a wrong offset!");
static_assert(offsetof(FPlaceableBloodDataRow, m_CorpseExtractionTimeSeconds) == 0x000018, "Member 'FPlaceableBloodDataRow::m_CorpseExtractionTimeSeconds' has a wrong offset!");
static_assert(offsetof(FPlaceableBloodDataRow, m_CorpseBloodYield) == 0x00001C, "Member 'FPlaceableBloodDataRow::m_CorpseBloodYield' has a wrong offset!");
static_assert(offsetof(FPlaceableBloodDataRow, m_OnProcessingStartedAudioEvent) == 0x000020, "Member 'FPlaceableBloodDataRow::m_OnProcessingStartedAudioEvent' has a wrong offset!");
static_assert(offsetof(FPlaceableBloodDataRow, m_OnProcessingStopedAudioEvent) == 0x000028, "Member 'FPlaceableBloodDataRow::m_OnProcessingStopedAudioEvent' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceableBoxesData
// 0x0060 (0x0060 - 0x0000)
struct FPlaceableBoxesData final
{
public:
	struct FOrientedBoxData                       m_PlacementCheckBox;                               // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FOrientedBoxData>               m_Corners;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableBoxesData) == 0x000010, "Wrong alignment on FPlaceableBoxesData");
static_assert(sizeof(FPlaceableBoxesData) == 0x000060, "Wrong size on FPlaceableBoxesData");
static_assert(offsetof(FPlaceableBoxesData, m_PlacementCheckBox) == 0x000000, "Member 'FPlaceableBoxesData::m_PlacementCheckBox' has a wrong offset!");
static_assert(offsetof(FPlaceableBoxesData, m_Corners) == 0x000050, "Member 'FPlaceableBoxesData::m_Corners' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceableComponent
// 0x0001 (0x0001 - 0x0000)
struct FPlaceableComponent final
{
public:
	bool                                          m_bHasSocketlessConnections;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableComponent) == 0x000001, "Wrong alignment on FPlaceableComponent");
static_assert(sizeof(FPlaceableComponent) == 0x000001, "Wrong size on FPlaceableComponent");
static_assert(offsetof(FPlaceableComponent, m_bHasSocketlessConnections) == 0x000000, "Member 'FPlaceableComponent::m_bHasSocketlessConnections' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceableDataRowBase
// 0x0130 (0x0390 - 0x0260)
struct FPlaceableDataRowBase final : public FBuildableDataRowBase
{
public:
	struct FPlaceableBoxesData                    m_PlaceableBoxesData;                              // 0x0260(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_Placeable;                                       // 0x02C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDestroyActorOnZeroHealth;                       // 0x02F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bMustBeAttachedToSocket;                         // 0x02F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bGeneratesSandwormThreat;                        // 0x02F2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F3[0x1];                                      // 0x02F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_SandwormThreatDelay;                             // 0x02F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_PowerOnAudioEvent;                               // 0x02F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_PowerOffAudioEvent;                              // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bForceAutoAlign;                                 // 0x0308(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bRequiresUnshelterToPower;                       // 0x0309(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_AllowRotationByPlayer;                           // 0x030A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCompatibleWithRelativeToPlayerFacingRotation;   // 0x030B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_PlaceableNormal;                                 // 0x0310(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               m_MaxAutoAlignRotation;                            // 0x0328(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         m_PowerProduction;                                 // 0x0340(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_PowerConsumption;                                // 0x0344(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_InventoryMaxItemCount;                           // 0x0348(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_InventoryMaxItemVolume;                          // 0x034C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanConnectToPowerCircuit;                       // 0x0350(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanConnectToInventoryCircuit;                   // 0x0351(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanConnectToWaterCircuit;                       // 0x0352(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanStoreWater;                                  // 0x0353(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_StoragePriority;                                 // 0x0354(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        m_WaterStorageCircuitPriority;                     // 0x0358(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35A[0x2];                                      // 0x035A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_WaterCapacity;                                   // 0x035C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_WaterGenerationAmountPerUpdate;                  // 0x0360(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaterGenerationRateInSecs;                       // 0x0364(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_WaterStartingAmount;                             // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaterBaseEvaporationRate;                        // 0x036C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaterEvaporationModifier;                        // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PowerProductionShelterThreshold;                 // 0x0374(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaterProductionShelterThreshold;                 // 0x0378(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlaceableAudioGroup                          m_AudioGroup;                                      // 0x037C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlaceableMenuTabs                            m_InteractFocusTab;                                // 0x037D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlaceableMenuTabs                            m_InteractSecondaryFocusTab;                       // 0x037E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAllowDrinkingFromPlaceable;                     // 0x037F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bHasWorkState;                                   // 0x0380(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCanQuickDeposit;                                // 0x0381(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAllowsVehicleDeposit;                           // 0x0382(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIgnoreTerrainOverlap;                           // 0x0383(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_384[0xC];                                      // 0x0384(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaceableDataRowBase) == 0x000010, "Wrong alignment on FPlaceableDataRowBase");
static_assert(sizeof(FPlaceableDataRowBase) == 0x000390, "Wrong size on FPlaceableDataRowBase");
static_assert(offsetof(FPlaceableDataRowBase, m_PlaceableBoxesData) == 0x000260, "Member 'FPlaceableDataRowBase::m_PlaceableBoxesData' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_Placeable) == 0x0002C0, "Member 'FPlaceableDataRowBase::m_Placeable' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bDestroyActorOnZeroHealth) == 0x0002F0, "Member 'FPlaceableDataRowBase::m_bDestroyActorOnZeroHealth' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bMustBeAttachedToSocket) == 0x0002F1, "Member 'FPlaceableDataRowBase::m_bMustBeAttachedToSocket' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bGeneratesSandwormThreat) == 0x0002F2, "Member 'FPlaceableDataRowBase::m_bGeneratesSandwormThreat' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_SandwormThreatDelay) == 0x0002F4, "Member 'FPlaceableDataRowBase::m_SandwormThreatDelay' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_PowerOnAudioEvent) == 0x0002F8, "Member 'FPlaceableDataRowBase::m_PowerOnAudioEvent' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_PowerOffAudioEvent) == 0x000300, "Member 'FPlaceableDataRowBase::m_PowerOffAudioEvent' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bForceAutoAlign) == 0x000308, "Member 'FPlaceableDataRowBase::m_bForceAutoAlign' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bRequiresUnshelterToPower) == 0x000309, "Member 'FPlaceableDataRowBase::m_bRequiresUnshelterToPower' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_AllowRotationByPlayer) == 0x00030A, "Member 'FPlaceableDataRowBase::m_AllowRotationByPlayer' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bCompatibleWithRelativeToPlayerFacingRotation) == 0x00030B, "Member 'FPlaceableDataRowBase::m_bCompatibleWithRelativeToPlayerFacingRotation' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_PlaceableNormal) == 0x000310, "Member 'FPlaceableDataRowBase::m_PlaceableNormal' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_MaxAutoAlignRotation) == 0x000328, "Member 'FPlaceableDataRowBase::m_MaxAutoAlignRotation' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_PowerProduction) == 0x000340, "Member 'FPlaceableDataRowBase::m_PowerProduction' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_PowerConsumption) == 0x000344, "Member 'FPlaceableDataRowBase::m_PowerConsumption' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_InventoryMaxItemCount) == 0x000348, "Member 'FPlaceableDataRowBase::m_InventoryMaxItemCount' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_InventoryMaxItemVolume) == 0x00034C, "Member 'FPlaceableDataRowBase::m_InventoryMaxItemVolume' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bCanConnectToPowerCircuit) == 0x000350, "Member 'FPlaceableDataRowBase::m_bCanConnectToPowerCircuit' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bCanConnectToInventoryCircuit) == 0x000351, "Member 'FPlaceableDataRowBase::m_bCanConnectToInventoryCircuit' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bCanConnectToWaterCircuit) == 0x000352, "Member 'FPlaceableDataRowBase::m_bCanConnectToWaterCircuit' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bCanStoreWater) == 0x000353, "Member 'FPlaceableDataRowBase::m_bCanStoreWater' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_StoragePriority) == 0x000354, "Member 'FPlaceableDataRowBase::m_StoragePriority' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_WaterStorageCircuitPriority) == 0x000358, "Member 'FPlaceableDataRowBase::m_WaterStorageCircuitPriority' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_WaterCapacity) == 0x00035C, "Member 'FPlaceableDataRowBase::m_WaterCapacity' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_WaterGenerationAmountPerUpdate) == 0x000360, "Member 'FPlaceableDataRowBase::m_WaterGenerationAmountPerUpdate' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_WaterGenerationRateInSecs) == 0x000364, "Member 'FPlaceableDataRowBase::m_WaterGenerationRateInSecs' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_WaterStartingAmount) == 0x000368, "Member 'FPlaceableDataRowBase::m_WaterStartingAmount' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_WaterBaseEvaporationRate) == 0x00036C, "Member 'FPlaceableDataRowBase::m_WaterBaseEvaporationRate' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_WaterEvaporationModifier) == 0x000370, "Member 'FPlaceableDataRowBase::m_WaterEvaporationModifier' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_PowerProductionShelterThreshold) == 0x000374, "Member 'FPlaceableDataRowBase::m_PowerProductionShelterThreshold' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_WaterProductionShelterThreshold) == 0x000378, "Member 'FPlaceableDataRowBase::m_WaterProductionShelterThreshold' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_AudioGroup) == 0x00037C, "Member 'FPlaceableDataRowBase::m_AudioGroup' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_InteractFocusTab) == 0x00037D, "Member 'FPlaceableDataRowBase::m_InteractFocusTab' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_InteractSecondaryFocusTab) == 0x00037E, "Member 'FPlaceableDataRowBase::m_InteractSecondaryFocusTab' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bAllowDrinkingFromPlaceable) == 0x00037F, "Member 'FPlaceableDataRowBase::m_bAllowDrinkingFromPlaceable' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bHasWorkState) == 0x000380, "Member 'FPlaceableDataRowBase::m_bHasWorkState' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bCanQuickDeposit) == 0x000381, "Member 'FPlaceableDataRowBase::m_bCanQuickDeposit' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bAllowsVehicleDeposit) == 0x000382, "Member 'FPlaceableDataRowBase::m_bAllowsVehicleDeposit' has a wrong offset!");
static_assert(offsetof(FPlaceableDataRowBase, m_bIgnoreTerrainOverlap) == 0x000383, "Member 'FPlaceableDataRowBase::m_bIgnoreTerrainOverlap' has a wrong offset!");

// ScriptStruct DuneSandbox.VehiclePowerModuleTableRow
// 0x01A0 (0x01B0 - 0x0010)
struct FVehiclePowerModuleTableRow final : public FTableRowBase
{
public:
	struct FVehiclePowerStats                     m_PowerModuleStats;                                // 0x0010(0x01A0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehiclePowerModuleTableRow) == 0x000008, "Wrong alignment on FVehiclePowerModuleTableRow");
static_assert(sizeof(FVehiclePowerModuleTableRow) == 0x0001B0, "Wrong size on FVehiclePowerModuleTableRow");
static_assert(offsetof(FVehiclePowerModuleTableRow, m_PowerModuleStats) == 0x000010, "Member 'FVehiclePowerModuleTableRow::m_PowerModuleStats' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceablePlacementGroupDataRow
// 0x00A0 (0x00B0 - 0x0010)
struct FPlaceablePlacementGroupDataRow final : public FTableRowBase
{
public:
	TSet<struct FEBuildableType>                  m_Placeables;                                      // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	TSet<struct FEPlaceablePlacementGroupType>    m_ValidContactGroups;                              // 0x0060(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceablePlacementGroupDataRow) == 0x000008, "Wrong alignment on FPlaceablePlacementGroupDataRow");
static_assert(sizeof(FPlaceablePlacementGroupDataRow) == 0x0000B0, "Wrong size on FPlaceablePlacementGroupDataRow");
static_assert(offsetof(FPlaceablePlacementGroupDataRow, m_Placeables) == 0x000010, "Member 'FPlaceablePlacementGroupDataRow::m_Placeables' has a wrong offset!");
static_assert(offsetof(FPlaceablePlacementGroupDataRow, m_ValidContactGroups) == 0x000060, "Member 'FPlaceablePlacementGroupDataRow::m_ValidContactGroups' has a wrong offset!");

// ScriptStruct DuneSandbox.SubCategoryContent
// 0x0018 (0x0018 - 0x0000)
struct FSubCategoryContent final
{
public:
	class UTriangleHeaderListEntryData*           m_HeaderData;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UKeybindCellData*>               m_KeybindCellsData;                                // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubCategoryContent) == 0x000008, "Wrong alignment on FSubCategoryContent");
static_assert(sizeof(FSubCategoryContent) == 0x000018, "Wrong size on FSubCategoryContent");
static_assert(offsetof(FSubCategoryContent, m_HeaderData) == 0x000000, "Member 'FSubCategoryContent::m_HeaderData' has a wrong offset!");
static_assert(offsetof(FSubCategoryContent, m_KeybindCellsData) == 0x000008, "Member 'FSubCategoryContent::m_KeybindCellsData' has a wrong offset!");

// ScriptStruct DuneSandbox.CategoryContent
// 0x0078 (0x0078 - 0x0000)
struct FCategoryContent final
{
public:
	struct FCategoryData                          m_Data;                                            // 0x0000(0x0058)(NativeAccessSpecifierPublic)
	TArray<struct FSubCategoryContent>            m_MKB_SubCategoriesContent;                        // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSubCategoryContent>            m_PAD_SubCategoriesContent;                        // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCategoryContent) == 0x000008, "Wrong alignment on FCategoryContent");
static_assert(sizeof(FCategoryContent) == 0x000078, "Wrong size on FCategoryContent");
static_assert(offsetof(FCategoryContent, m_Data) == 0x000000, "Member 'FCategoryContent::m_Data' has a wrong offset!");
static_assert(offsetof(FCategoryContent, m_MKB_SubCategoriesContent) == 0x000058, "Member 'FCategoryContent::m_MKB_SubCategoriesContent' has a wrong offset!");
static_assert(offsetof(FCategoryContent, m_PAD_SubCategoriesContent) == 0x000068, "Member 'FCategoryContent::m_PAD_SubCategoriesContent' has a wrong offset!");

// ScriptStruct DuneSandbox.PlaceableWorkStateComponent
// 0x0001 (0x0001 - 0x0000)
struct FPlaceableWorkStateComponent final
{
public:
	bool                                          m_bIsWorking;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableWorkStateComponent) == 0x000001, "Wrong alignment on FPlaceableWorkStateComponent");
static_assert(sizeof(FPlaceableWorkStateComponent) == 0x000001, "Wrong size on FPlaceableWorkStateComponent");
static_assert(offsetof(FPlaceableWorkStateComponent, m_bIsWorking) == 0x000000, "Member 'FPlaceableWorkStateComponent::m_bIsWorking' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerActionBucketTypeInfo
// 0x000C (0x000C - 0x0000)
struct FPlayerActionBucketTypeInfo final
{
public:
	float                                         ValidationWindowSeconds;                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMessagesPerWindow;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerActionFloodControlBucketFailMode       FailMode;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerActionBucketTypeInfo) == 0x000004, "Wrong alignment on FPlayerActionBucketTypeInfo");
static_assert(sizeof(FPlayerActionBucketTypeInfo) == 0x00000C, "Wrong size on FPlayerActionBucketTypeInfo");
static_assert(offsetof(FPlayerActionBucketTypeInfo, ValidationWindowSeconds) == 0x000000, "Member 'FPlayerActionBucketTypeInfo::ValidationWindowSeconds' has a wrong offset!");
static_assert(offsetof(FPlayerActionBucketTypeInfo, MaxMessagesPerWindow) == 0x000004, "Member 'FPlayerActionBucketTypeInfo::MaxMessagesPerWindow' has a wrong offset!");
static_assert(offsetof(FPlayerActionBucketTypeInfo, FailMode) == 0x000008, "Member 'FPlayerActionBucketTypeInfo::FailMode' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerCommuninetAudioComponent
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FPlayerCommuninetAudioComponent final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerCommuninetAudioComponent) == 0x000008, "Wrong alignment on FPlayerCommuninetAudioComponent");
static_assert(sizeof(FPlayerCommuninetAudioComponent) == 0x000078, "Wrong size on FPlayerCommuninetAudioComponent");

// ScriptStruct DuneSandbox.TeleportLocationRow
// 0x0018 (0x0028 - 0x0010)
struct FTeleportLocationRow final : public FTableRowBase
{
public:
	struct FVector                                Location;                                          // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeleportLocationRow) == 0x000008, "Wrong alignment on FTeleportLocationRow");
static_assert(sizeof(FTeleportLocationRow) == 0x000028, "Wrong size on FTeleportLocationRow");
static_assert(offsetof(FTeleportLocationRow, Location) == 0x000010, "Member 'FTeleportLocationRow::Location' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodeCluster
// 0x0018 (0x0018 - 0x0000)
struct FResourceNodeCluster final
{
public:
	TArray<struct FResourceNodePoint>             Points;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceNodeCluster) == 0x000008, "Wrong alignment on FResourceNodeCluster");
static_assert(sizeof(FResourceNodeCluster) == 0x000018, "Wrong size on FResourceNodeCluster");
static_assert(offsetof(FResourceNodeCluster, Points) == 0x000000, "Member 'FResourceNodeCluster::Points' has a wrong offset!");
static_assert(offsetof(FResourceNodeCluster, Score) == 0x000010, "Member 'FResourceNodeCluster::Score' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodePointGroup
// 0x0028 (0x0028 - 0x0000)
struct FResourceNodePointGroup final
{
public:
	struct FVector                                CenterPoint;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FResourceNodeCluster>           Clusters;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceNodePointGroup) == 0x000008, "Wrong alignment on FResourceNodePointGroup");
static_assert(sizeof(FResourceNodePointGroup) == 0x000028, "Wrong size on FResourceNodePointGroup");
static_assert(offsetof(FResourceNodePointGroup, CenterPoint) == 0x000000, "Member 'FResourceNodePointGroup::CenterPoint' has a wrong offset!");
static_assert(offsetof(FResourceNodePointGroup, Clusters) == 0x000018, "Member 'FResourceNodePointGroup::Clusters' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodeZone
// 0x0050 (0x0050 - 0x0000)
struct FResourceNodeZone final
{
public:
	TMap<class FName, struct FResourceNodePointGroup> Groups;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceNodeZone) == 0x000008, "Wrong alignment on FResourceNodeZone");
static_assert(sizeof(FResourceNodeZone) == 0x000050, "Wrong size on FResourceNodeZone");
static_assert(offsetof(FResourceNodeZone, Groups) == 0x000000, "Member 'FResourceNodeZone::Groups' has a wrong offset!");

// ScriptStruct DuneSandbox.ConsiderationContext
// 0x0018 (0x0018 - 0x0000)
struct FConsiderationContext final
{
public:
	class UObject*                                m_Owner;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            m_Controller;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  m_Pawn;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsiderationContext) == 0x000008, "Wrong alignment on FConsiderationContext");
static_assert(sizeof(FConsiderationContext) == 0x000018, "Wrong size on FConsiderationContext");
static_assert(offsetof(FConsiderationContext, m_Owner) == 0x000000, "Member 'FConsiderationContext::m_Owner' has a wrong offset!");
static_assert(offsetof(FConsiderationContext, m_Controller) == 0x000008, "Member 'FConsiderationContext::m_Controller' has a wrong offset!");
static_assert(offsetof(FConsiderationContext, m_Pawn) == 0x000010, "Member 'FConsiderationContext::m_Pawn' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerCommuninetComponent
// 0x00D0 (0x00D0 - 0x0000)
struct FPlayerCommuninetComponent final
{
public:
	TArray<struct FECommuninetChannel>            m_AvailableChannels;                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FECommuninetChannel>            m_CurrentlyTunedChannels;                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0xA0];                                      // 0x0020(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FECommuninetChannel                    m_SelectedChannel;                                 // 0x00C0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bSignalAvailable;                                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsCommuninetActive;                             // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerCommuninetComponent) == 0x000008, "Wrong alignment on FPlayerCommuninetComponent");
static_assert(sizeof(FPlayerCommuninetComponent) == 0x0000D0, "Wrong size on FPlayerCommuninetComponent");
static_assert(offsetof(FPlayerCommuninetComponent, m_AvailableChannels) == 0x000000, "Member 'FPlayerCommuninetComponent::m_AvailableChannels' has a wrong offset!");
static_assert(offsetof(FPlayerCommuninetComponent, m_CurrentlyTunedChannels) == 0x000010, "Member 'FPlayerCommuninetComponent::m_CurrentlyTunedChannels' has a wrong offset!");
static_assert(offsetof(FPlayerCommuninetComponent, m_SelectedChannel) == 0x0000C0, "Member 'FPlayerCommuninetComponent::m_SelectedChannel' has a wrong offset!");
static_assert(offsetof(FPlayerCommuninetComponent, m_bSignalAvailable) == 0x0000C8, "Member 'FPlayerCommuninetComponent::m_bSignalAvailable' has a wrong offset!");
static_assert(offsetof(FPlayerCommuninetComponent, m_bIsCommuninetActive) == 0x0000C9, "Member 'FPlayerCommuninetComponent::m_bIsCommuninetActive' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerControllerAudioComponent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FPlayerControllerAudioComponent final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerControllerAudioComponent) == 0x000008, "Wrong alignment on FPlayerControllerAudioComponent");
static_assert(sizeof(FPlayerControllerAudioComponent) == 0x000028, "Wrong size on FPlayerControllerAudioComponent");

// ScriptStruct DuneSandbox.PlayerDialogueStateComponent
// 0x0001 (0x0001 - 0x0000)
struct FPlayerDialogueStateComponent final
{
public:
	bool                                          IsTalking;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerDialogueStateComponent) == 0x000001, "Wrong alignment on FPlayerDialogueStateComponent");
static_assert(sizeof(FPlayerDialogueStateComponent) == 0x000001, "Wrong size on FPlayerDialogueStateComponent");
static_assert(offsetof(FPlayerDialogueStateComponent, IsTalking) == 0x000000, "Member 'FPlayerDialogueStateComponent::IsTalking' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerEnteredMapAreaEvent
// 0x0010 (0x0040 - 0x0030)
struct FPlayerEnteredMapAreaEvent final : public FGameEvent
{
public:
	struct FMapAreaId                             m_MapAreaId;                                       // 0x0030(0x0002)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ADunePlayerController>   m_PlayerController;                                // 0x0034(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerEnteredMapAreaEvent) == 0x000008, "Wrong alignment on FPlayerEnteredMapAreaEvent");
static_assert(sizeof(FPlayerEnteredMapAreaEvent) == 0x000040, "Wrong size on FPlayerEnteredMapAreaEvent");
static_assert(offsetof(FPlayerEnteredMapAreaEvent, m_MapAreaId) == 0x000030, "Member 'FPlayerEnteredMapAreaEvent::m_MapAreaId' has a wrong offset!");
static_assert(offsetof(FPlayerEnteredMapAreaEvent, m_PlayerController) == 0x000034, "Member 'FPlayerEnteredMapAreaEvent::m_PlayerController' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockInstanceRowBase
// 0x0048 (0x0058 - 0x0010)
struct FTerrainBlockInstanceRowBase : public FTableRowBase
{
public:
	class FName                                   TemplateName;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTerrainBlockDataAsset*                 TerrainBlockAsset;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         VistaOnly : 1;                                     // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTerrainBlockInstanceRowBase) == 0x000008, "Wrong alignment on FTerrainBlockInstanceRowBase");
static_assert(sizeof(FTerrainBlockInstanceRowBase) == 0x000058, "Wrong size on FTerrainBlockInstanceRowBase");
static_assert(offsetof(FTerrainBlockInstanceRowBase, TemplateName) == 0x000010, "Member 'FTerrainBlockInstanceRowBase::TemplateName' has a wrong offset!");
static_assert(offsetof(FTerrainBlockInstanceRowBase, TerrainBlockAsset) == 0x000018, "Member 'FTerrainBlockInstanceRowBase::TerrainBlockAsset' has a wrong offset!");
static_assert(offsetof(FTerrainBlockInstanceRowBase, Location) == 0x000020, "Member 'FTerrainBlockInstanceRowBase::Location' has a wrong offset!");
static_assert(offsetof(FTerrainBlockInstanceRowBase, Rotation) == 0x000038, "Member 'FTerrainBlockInstanceRowBase::Rotation' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockInstance
// 0x0068 (0x00C0 - 0x0058)
struct FTerrainBlockInstance final : public FTerrainBlockInstanceRowBase
{
public:
	TArray<struct FTerrainBlockSubLevelInstance>  SubLevels;                                         // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FSoftObjectPath, struct FTerrainBlockTemplateSubLevelContentBlockSettings> SubContentBlocksSettings; // 0x0068(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bIsLodOnly;                                        // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTerrainBlockInstance) == 0x000008, "Wrong alignment on FTerrainBlockInstance");
static_assert(sizeof(FTerrainBlockInstance) == 0x0000C0, "Wrong size on FTerrainBlockInstance");
static_assert(offsetof(FTerrainBlockInstance, SubLevels) == 0x000058, "Member 'FTerrainBlockInstance::SubLevels' has a wrong offset!");
static_assert(offsetof(FTerrainBlockInstance, SubContentBlocksSettings) == 0x000068, "Member 'FTerrainBlockInstance::SubContentBlocksSettings' has a wrong offset!");
static_assert(offsetof(FTerrainBlockInstance, bIsLodOnly) == 0x0000B8, "Member 'FTerrainBlockInstance::bIsLodOnly' has a wrong offset!");

// ScriptStruct DuneSandbox.DynamicBTMap
// 0x0050 (0x0050 - 0x0000)
struct FDynamicBTMap final
{
public:
	TMap<struct FGameplayTag, class UBehaviorTree*> m_DynamicBTs;                                    // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicBTMap) == 0x000008, "Wrong alignment on FDynamicBTMap");
static_assert(sizeof(FDynamicBTMap) == 0x000050, "Wrong size on FDynamicBTMap");
static_assert(offsetof(FDynamicBTMap, m_DynamicBTs) == 0x000000, "Member 'FDynamicBTMap::m_DynamicBTs' has a wrong offset!");

// ScriptStruct DuneSandbox.StaggerAnimationData
// 0x0040 (0x0040 - 0x0000)
struct FStaggerAnimationData final
{
public:
	TArray<class UAnimMontage*>                   m_BackwardMontages;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   m_ForwardMontages;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   m_LeftMontages;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   m_RightMontages;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaggerAnimationData) == 0x000008, "Wrong alignment on FStaggerAnimationData");
static_assert(sizeof(FStaggerAnimationData) == 0x000040, "Wrong size on FStaggerAnimationData");
static_assert(offsetof(FStaggerAnimationData, m_BackwardMontages) == 0x000000, "Member 'FStaggerAnimationData::m_BackwardMontages' has a wrong offset!");
static_assert(offsetof(FStaggerAnimationData, m_ForwardMontages) == 0x000010, "Member 'FStaggerAnimationData::m_ForwardMontages' has a wrong offset!");
static_assert(offsetof(FStaggerAnimationData, m_LeftMontages) == 0x000020, "Member 'FStaggerAnimationData::m_LeftMontages' has a wrong offset!");
static_assert(offsetof(FStaggerAnimationData, m_RightMontages) == 0x000030, "Member 'FStaggerAnimationData::m_RightMontages' has a wrong offset!");

// ScriptStruct DuneSandbox.CrashSiteLinkedPlayer
// 0x0010 (0x0010 - 0x0000)
struct FCrashSiteLinkedPlayer final
{
public:
	class ADunePlayerCharacter*                   m_LinkedPlayer;                                    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bHasLeftCrashSite;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrashSiteLinkedPlayer) == 0x000008, "Wrong alignment on FCrashSiteLinkedPlayer");
static_assert(sizeof(FCrashSiteLinkedPlayer) == 0x000010, "Wrong size on FCrashSiteLinkedPlayer");
static_assert(offsetof(FCrashSiteLinkedPlayer, m_LinkedPlayer) == 0x000000, "Member 'FCrashSiteLinkedPlayer::m_LinkedPlayer' has a wrong offset!");
static_assert(offsetof(FCrashSiteLinkedPlayer, m_bHasLeftCrashSite) == 0x000008, "Member 'FCrashSiteLinkedPlayer::m_bHasLeftCrashSite' has a wrong offset!");

// ScriptStruct DuneSandbox.GameplayAbilityTargetData_Stagger
// 0x0108 (0x0110 - 0x0008)
struct FGameplayAbilityTargetData_Stagger final : public FGameplayAbilityTargetData
{
public:
	struct FKnockbackInfo                         m_KnockbackInfo;                                   // 0x0008(0x0108)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityTargetData_Stagger) == 0x000008, "Wrong alignment on FGameplayAbilityTargetData_Stagger");
static_assert(sizeof(FGameplayAbilityTargetData_Stagger) == 0x000110, "Wrong size on FGameplayAbilityTargetData_Stagger");
static_assert(offsetof(FGameplayAbilityTargetData_Stagger, m_KnockbackInfo) == 0x000008, "Member 'FGameplayAbilityTargetData_Stagger::m_KnockbackInfo' has a wrong offset!");

// ScriptStruct DuneSandbox.PopupWidgetTableRow
// 0x00B8 (0x00C8 - 0x0010)
struct FPopupWidgetTableRow final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   m_Widget;                                          // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_Image;                                           // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       m_ItemTemplate;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_Title;                                           // 0x0078(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_Header;                                          // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_Footer;                                          // 0x00A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UFont*                                  m_Font;                                            // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPopupWidgetTableRow) == 0x000008, "Wrong alignment on FPopupWidgetTableRow");
static_assert(sizeof(FPopupWidgetTableRow) == 0x0000C8, "Wrong size on FPopupWidgetTableRow");
static_assert(offsetof(FPopupWidgetTableRow, m_Widget) == 0x000010, "Member 'FPopupWidgetTableRow::m_Widget' has a wrong offset!");
static_assert(offsetof(FPopupWidgetTableRow, m_Image) == 0x000040, "Member 'FPopupWidgetTableRow::m_Image' has a wrong offset!");
static_assert(offsetof(FPopupWidgetTableRow, m_ItemTemplate) == 0x000070, "Member 'FPopupWidgetTableRow::m_ItemTemplate' has a wrong offset!");
static_assert(offsetof(FPopupWidgetTableRow, m_Title) == 0x000078, "Member 'FPopupWidgetTableRow::m_Title' has a wrong offset!");
static_assert(offsetof(FPopupWidgetTableRow, m_Header) == 0x000090, "Member 'FPopupWidgetTableRow::m_Header' has a wrong offset!");
static_assert(offsetof(FPopupWidgetTableRow, m_Footer) == 0x0000A8, "Member 'FPopupWidgetTableRow::m_Footer' has a wrong offset!");
static_assert(offsetof(FPopupWidgetTableRow, m_Font) == 0x0000C0, "Member 'FPopupWidgetTableRow::m_Font' has a wrong offset!");

// ScriptStruct DuneSandbox.PositionComponent
// 0x0018 (0x0018 - 0x0000)
struct FPositionComponent final
{
public:
	struct FVector                                m_Position;                                        // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPositionComponent) == 0x000008, "Wrong alignment on FPositionComponent");
static_assert(sizeof(FPositionComponent) == 0x000018, "Wrong size on FPositionComponent");
static_assert(offsetof(FPositionComponent, m_Position) == 0x000000, "Member 'FPositionComponent::m_Position' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockTemplateSettings
// 0x0070 (0x0070 - 0x0000)
struct FTerrainBlockTemplateSettings final
{
public:
	bool                                          bCanBeRotated;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFreeRotationAllowed;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultStreamingDistance;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWorldCompositionStreamingDistance;             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FTerrainBlockTemplateSubLevelGroupSettings> SubLevelsGroups;          // 0x0010(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTerrainBlockTemplateSubLevelSettings> SubLevelsSettings;                          // 0x0060(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockTemplateSettings) == 0x000008, "Wrong alignment on FTerrainBlockTemplateSettings");
static_assert(sizeof(FTerrainBlockTemplateSettings) == 0x000070, "Wrong size on FTerrainBlockTemplateSettings");
static_assert(offsetof(FTerrainBlockTemplateSettings, bCanBeRotated) == 0x000000, "Member 'FTerrainBlockTemplateSettings::bCanBeRotated' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSettings, bIsFreeRotationAllowed) == 0x000001, "Member 'FTerrainBlockTemplateSettings::bIsFreeRotationAllowed' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSettings, DefaultStreamingDistance) == 0x000004, "Member 'FTerrainBlockTemplateSettings::DefaultStreamingDistance' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSettings, bUseWorldCompositionStreamingDistance) == 0x000008, "Member 'FTerrainBlockTemplateSettings::bUseWorldCompositionStreamingDistance' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSettings, SubLevelsGroups) == 0x000010, "Member 'FTerrainBlockTemplateSettings::SubLevelsGroups' has a wrong offset!");
static_assert(offsetof(FTerrainBlockTemplateSettings, SubLevelsSettings) == 0x000060, "Member 'FTerrainBlockTemplateSettings::SubLevelsSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsGraphicQualityOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsGraphicQualityOption final : public FSettingsEnumOptionBase
{
public:
	EGraphicsQuality                              m_Quality;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsGraphicQualityOption) == 0x000008, "Wrong alignment on FSettingsGraphicQualityOption");
static_assert(sizeof(FSettingsGraphicQualityOption) == 0x000028, "Wrong size on FSettingsGraphicQualityOption");
static_assert(offsetof(FSettingsGraphicQualityOption, m_Quality) == 0x000020, "Member 'FSettingsGraphicQualityOption::m_Quality' has a wrong offset!");

// ScriptStruct DuneSandbox.LoadedAiDifficultyConfig
// 0x0008 (0x0008 - 0x0000)
struct FLoadedAiDifficultyConfig final
{
public:
	class UAiDifficultyConfig*                    m_DifficultyConfigAsset;                           // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadedAiDifficultyConfig) == 0x000008, "Wrong alignment on FLoadedAiDifficultyConfig");
static_assert(sizeof(FLoadedAiDifficultyConfig) == 0x000008, "Wrong size on FLoadedAiDifficultyConfig");
static_assert(offsetof(FLoadedAiDifficultyConfig, m_DifficultyConfigAsset) == 0x000000, "Member 'FLoadedAiDifficultyConfig::m_DifficultyConfigAsset' has a wrong offset!");

// ScriptStruct DuneSandbox.ProximityChatOutgoingComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FProximityChatOutgoingComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProximityChatOutgoingComponent) == 0x000008, "Wrong alignment on FProximityChatOutgoingComponent");
static_assert(sizeof(FProximityChatOutgoingComponent) == 0x000010, "Wrong size on FProximityChatOutgoingComponent");

// ScriptStruct DuneSandbox.SandwormDisplacementSocket
// 0x000C (0x000C - 0x0000)
struct FSandwormDisplacementSocket final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SocketRadius;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandwormDisplacementSocket) == 0x000004, "Wrong alignment on FSandwormDisplacementSocket");
static_assert(sizeof(FSandwormDisplacementSocket) == 0x00000C, "Wrong size on FSandwormDisplacementSocket");
static_assert(offsetof(FSandwormDisplacementSocket, SocketName) == 0x000000, "Member 'FSandwormDisplacementSocket::SocketName' has a wrong offset!");
static_assert(offsetof(FSandwormDisplacementSocket, SocketRadius) == 0x000008, "Member 'FSandwormDisplacementSocket::SocketRadius' has a wrong offset!");

// ScriptStruct DuneSandbox.RecyclerComponent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FRecyclerComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecyclerComponent) == 0x000004, "Wrong alignment on FRecyclerComponent");
static_assert(sizeof(FRecyclerComponent) == 0x000008, "Wrong size on FRecyclerComponent");

// ScriptStruct DuneSandbox.TimeOfDayLightComponent
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FTimeOfDayLightComponent final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeOfDayLightComponent) == 0x000004, "Wrong alignment on FTimeOfDayLightComponent");
static_assert(sizeof(FTimeOfDayLightComponent) == 0x00001C, "Wrong size on FTimeOfDayLightComponent");

// ScriptStruct DuneSandbox.SettingsVoiceChatModeOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsVoiceChatModeOption final : public FSettingsEnumOptionBase
{
public:
	EVoiceChatInputMethod                         Method;                                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsVoiceChatModeOption) == 0x000008, "Wrong alignment on FSettingsVoiceChatModeOption");
static_assert(sizeof(FSettingsVoiceChatModeOption) == 0x000028, "Wrong size on FSettingsVoiceChatModeOption");
static_assert(offsetof(FSettingsVoiceChatModeOption, Method) == 0x000020, "Member 'FSettingsVoiceChatModeOption::Method' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorNetCullDistOverride
// 0x0038 (0x0038 - 0x0000)
struct FActorNetCullDistOverride final
{
public:
	TSoftClassPtr<class UClass>                   m_ActorClass;                                      // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_NetCullDstSqrd;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorNetCullDistOverride) == 0x000008, "Wrong alignment on FActorNetCullDistOverride");
static_assert(sizeof(FActorNetCullDistOverride) == 0x000038, "Wrong size on FActorNetCullDistOverride");
static_assert(offsetof(FActorNetCullDistOverride, m_ActorClass) == 0x000000, "Member 'FActorNetCullDistOverride::m_ActorClass' has a wrong offset!");
static_assert(offsetof(FActorNetCullDistOverride, m_NetCullDstSqrd) == 0x000030, "Member 'FActorNetCullDistOverride::m_NetCullDstSqrd' has a wrong offset!");

// ScriptStruct DuneSandbox.RequestGenNavGrid
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FRequestGenNavGrid final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestGenNavGrid) == 0x000008, "Wrong alignment on FRequestGenNavGrid");
static_assert(sizeof(FRequestGenNavGrid) == 0x000038, "Wrong size on FRequestGenNavGrid");

// ScriptStruct DuneSandbox.SpiceAddictionComponent
// 0x0002 (0x0002 - 0x0000)
struct FSpiceAddictionComponent final
{
public:
	ESpiceAddictionSystemStatus                   SystemStatus;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpiceVisionEnabledStatus                     SpiceVisionEnabledStatus;                          // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceAddictionComponent) == 0x000001, "Wrong alignment on FSpiceAddictionComponent");
static_assert(sizeof(FSpiceAddictionComponent) == 0x000002, "Wrong size on FSpiceAddictionComponent");
static_assert(offsetof(FSpiceAddictionComponent, SystemStatus) == 0x000000, "Member 'FSpiceAddictionComponent::SystemStatus' has a wrong offset!");
static_assert(offsetof(FSpiceAddictionComponent, SpiceVisionEnabledStatus) == 0x000001, "Member 'FSpiceAddictionComponent::SpiceVisionEnabledStatus' has a wrong offset!");

// ScriptStruct DuneSandbox.EVehicleCraftingSchematicId
// 0x0000 (0x0008 - 0x0008)
struct FEVehicleCraftingSchematicId final : public FStringEnumValue
{
};
static_assert(alignof(FEVehicleCraftingSchematicId) == 0x000004, "Wrong alignment on FEVehicleCraftingSchematicId");
static_assert(sizeof(FEVehicleCraftingSchematicId) == 0x000008, "Wrong size on FEVehicleCraftingSchematicId");

// ScriptStruct DuneSandbox.RequestInstallNavGrid
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FRequestInstallNavGrid final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestInstallNavGrid) == 0x000008, "Wrong alignment on FRequestInstallNavGrid");
static_assert(sizeof(FRequestInstallNavGrid) == 0x000028, "Wrong size on FRequestInstallNavGrid");

// ScriptStruct DuneSandbox.ResourceNodeDamageData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FResourceNodeDamageData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceNodeDamageData) == 0x000008, "Wrong alignment on FResourceNodeDamageData");
static_assert(sizeof(FResourceNodeDamageData) == 0x000028, "Wrong size on FResourceNodeDamageData");

// ScriptStruct DuneSandbox.FractureLineSplineData
// 0x0020 (0x0020 - 0x0000)
struct FFractureLineSplineData final
{
public:
	TArray<struct FFractureLineSplinePointData>   Points;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFractureLineSplineData) == 0x000008, "Wrong alignment on FFractureLineSplineData");
static_assert(sizeof(FFractureLineSplineData) == 0x000020, "Wrong size on FFractureLineSplineData");
static_assert(offsetof(FFractureLineSplineData, Points) == 0x000000, "Member 'FFractureLineSplineData::Points' has a wrong offset!");
static_assert(offsetof(FFractureLineSplineData, Tags) == 0x000010, "Member 'FFractureLineSplineData::Tags' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadTaskContributionEvent
// 0x0008 (0x0038 - 0x0030)
struct FLandsraadTaskContributionEvent final : public FGameEvent
{
public:
	uint32                                        m_LandsraadTaskContribution;                       // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandsraadTaskType                            m_LandsraadTaskType;                               // 0x0034(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandsraadTaskContributionEvent) == 0x000008, "Wrong alignment on FLandsraadTaskContributionEvent");
static_assert(sizeof(FLandsraadTaskContributionEvent) == 0x000038, "Wrong size on FLandsraadTaskContributionEvent");
static_assert(offsetof(FLandsraadTaskContributionEvent, m_LandsraadTaskContribution) == 0x000030, "Member 'FLandsraadTaskContributionEvent::m_LandsraadTaskContribution' has a wrong offset!");
static_assert(offsetof(FLandsraadTaskContributionEvent, m_LandsraadTaskType) == 0x000034, "Member 'FLandsraadTaskContributionEvent::m_LandsraadTaskType' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodeSparseClassData
// 0x0010 (0x0010 - 0x0000)
struct FResourceNodeSparseClassData final
{
public:
	TArray<struct FFractureLineSplineData>        FractureLineSplineData;                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceNodeSparseClassData) == 0x000008, "Wrong alignment on FResourceNodeSparseClassData");
static_assert(sizeof(FResourceNodeSparseClassData) == 0x000010, "Wrong size on FResourceNodeSparseClassData");
static_assert(offsetof(FResourceNodeSparseClassData, FractureLineSplineData) == 0x000000, "Member 'FResourceNodeSparseClassData::FractureLineSplineData' has a wrong offset!");

// ScriptStruct DuneSandbox.FractureLineRuntimeData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFractureLineRuntimeData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFractureLineRuntimeData) == 0x000008, "Wrong alignment on FFractureLineRuntimeData");
static_assert(sizeof(FFractureLineRuntimeData) == 0x000020, "Wrong size on FFractureLineRuntimeData");

// ScriptStruct DuneSandbox.SpiceVisionActorTuningArray
// 0x0010 (0x0010 - 0x0000)
struct FSpiceVisionActorTuningArray final
{
public:
	TArray<struct FSpiceVisionActorTuning>        m_WeightedVariations;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceVisionActorTuningArray) == 0x000008, "Wrong alignment on FSpiceVisionActorTuningArray");
static_assert(sizeof(FSpiceVisionActorTuningArray) == 0x000010, "Wrong size on FSpiceVisionActorTuningArray");
static_assert(offsetof(FSpiceVisionActorTuningArray, m_WeightedVariations) == 0x000000, "Member 'FSpiceVisionActorTuningArray::m_WeightedVariations' has a wrong offset!");

// ScriptStruct DuneSandbox.RecycleItemEvent
// 0x0010 (0x0040 - 0x0030)
struct FRecycleItemEvent final : public FGameEvent
{
public:
	struct FEItemTemplateID                       m_RecycledItemTemplateId;                          // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_AmountRecycled;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecycleItemEvent) == 0x000008, "Wrong alignment on FRecycleItemEvent");
static_assert(sizeof(FRecycleItemEvent) == 0x000040, "Wrong size on FRecycleItemEvent");
static_assert(offsetof(FRecycleItemEvent, m_RecycledItemTemplateId) == 0x000030, "Member 'FRecycleItemEvent::m_RecycledItemTemplateId' has a wrong offset!");
static_assert(offsetof(FRecycleItemEvent, m_AmountRecycled) == 0x000038, "Member 'FRecycleItemEvent::m_AmountRecycled' has a wrong offset!");

// ScriptStruct DuneSandbox.FractureLineGroup
// 0x0020 (0x0020 - 0x0000)
struct FFractureLineGroup final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialised;                                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 FractureLineIndices;                               // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                           DeactivateTimerHandle;                             // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFractureLineGroup) == 0x000008, "Wrong alignment on FFractureLineGroup");
static_assert(sizeof(FFractureLineGroup) == 0x000020, "Wrong size on FFractureLineGroup");
static_assert(offsetof(FFractureLineGroup, bIsEnabled) == 0x000000, "Member 'FFractureLineGroup::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FFractureLineGroup, bIsInitialised) == 0x000001, "Member 'FFractureLineGroup::bIsInitialised' has a wrong offset!");
static_assert(offsetof(FFractureLineGroup, FractureLineIndices) == 0x000008, "Member 'FFractureLineGroup::FractureLineIndices' has a wrong offset!");
static_assert(offsetof(FFractureLineGroup, DeactivateTimerHandle) == 0x000018, "Member 'FFractureLineGroup::DeactivateTimerHandle' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodeDamageInfo
// 0x0040 (0x0040 - 0x0000)
struct FResourceNodeDamageInfo final
{
public:
	TSoftClassPtr<class UClass>                   AcceptedHarvestDamageType;                         // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageMultiplierNotFollowingSpline;                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageMultiplierFollowingSpline;                   // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsToExplodeAfterHarvested;                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceNodeDamageInfo) == 0x000008, "Wrong alignment on FResourceNodeDamageInfo");
static_assert(sizeof(FResourceNodeDamageInfo) == 0x000040, "Wrong size on FResourceNodeDamageInfo");
static_assert(offsetof(FResourceNodeDamageInfo, AcceptedHarvestDamageType) == 0x000000, "Member 'FResourceNodeDamageInfo::AcceptedHarvestDamageType' has a wrong offset!");
static_assert(offsetof(FResourceNodeDamageInfo, DamageMultiplierNotFollowingSpline) == 0x000030, "Member 'FResourceNodeDamageInfo::DamageMultiplierNotFollowingSpline' has a wrong offset!");
static_assert(offsetof(FResourceNodeDamageInfo, DamageMultiplierFollowingSpline) == 0x000034, "Member 'FResourceNodeDamageInfo::DamageMultiplierFollowingSpline' has a wrong offset!");
static_assert(offsetof(FResourceNodeDamageInfo, SecondsToExplodeAfterHarvested) == 0x000038, "Member 'FResourceNodeDamageInfo::SecondsToExplodeAfterHarvested' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodeBuildData
// 0x00A0 (0x00A0 - 0x0000)
struct FResourceNodeBuildData final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UResourceNodeComponent*                 ResourceNodeComponent;                             // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  ResourceSpawner;                                   // 0x0010(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FResourceNodeDamageInfo                DamageInfo;                                        // 0x0048(0x0040)(NativeAccessSpecifierPublic)
	int32                                         InstanceIndex;                                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasScanned;                                       // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ScanInstigator;                                    // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDespawn;                                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceNodeBuildData) == 0x000008, "Wrong alignment on FResourceNodeBuildData");
static_assert(sizeof(FResourceNodeBuildData) == 0x0000A0, "Wrong size on FResourceNodeBuildData");
static_assert(offsetof(FResourceNodeBuildData, bIsValid) == 0x000000, "Member 'FResourceNodeBuildData::bIsValid' has a wrong offset!");
static_assert(offsetof(FResourceNodeBuildData, ResourceNodeComponent) == 0x000008, "Member 'FResourceNodeBuildData::ResourceNodeComponent' has a wrong offset!");
static_assert(offsetof(FResourceNodeBuildData, ResourceSpawner) == 0x000010, "Member 'FResourceNodeBuildData::ResourceSpawner' has a wrong offset!");
static_assert(offsetof(FResourceNodeBuildData, Health) == 0x000040, "Member 'FResourceNodeBuildData::Health' has a wrong offset!");
static_assert(offsetof(FResourceNodeBuildData, DamageInfo) == 0x000048, "Member 'FResourceNodeBuildData::DamageInfo' has a wrong offset!");
static_assert(offsetof(FResourceNodeBuildData, InstanceIndex) == 0x000088, "Member 'FResourceNodeBuildData::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FResourceNodeBuildData, bWasScanned) == 0x00008C, "Member 'FResourceNodeBuildData::bWasScanned' has a wrong offset!");
static_assert(offsetof(FResourceNodeBuildData, ScanInstigator) == 0x000090, "Member 'FResourceNodeBuildData::ScanInstigator' has a wrong offset!");
static_assert(offsetof(FResourceNodeBuildData, bShouldDespawn) == 0x000098, "Member 'FResourceNodeBuildData::bShouldDespawn' has a wrong offset!");

// ScriptStruct DuneSandbox.StakingUnitComponent
// 0x0018 (0x0018 - 0x0000)
struct FStakingUnitComponent final
{
public:
	double                                        m_TargetClaimServerTimestamp;                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TotalClaimTime;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEntityId                              m_TotemToExtend;                                   // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStakingUnitComponent) == 0x000008, "Wrong alignment on FStakingUnitComponent");
static_assert(sizeof(FStakingUnitComponent) == 0x000018, "Wrong size on FStakingUnitComponent");
static_assert(offsetof(FStakingUnitComponent, m_TargetClaimServerTimestamp) == 0x000000, "Member 'FStakingUnitComponent::m_TargetClaimServerTimestamp' has a wrong offset!");
static_assert(offsetof(FStakingUnitComponent, m_TotalClaimTime) == 0x000008, "Member 'FStakingUnitComponent::m_TotalClaimTime' has a wrong offset!");
static_assert(offsetof(FStakingUnitComponent, m_TotemToExtend) == 0x000010, "Member 'FStakingUnitComponent::m_TotemToExtend' has a wrong offset!");

// ScriptStruct DuneSandbox.HarvesterInfo
// 0x0070 (0x0070 - 0x0000)
struct FHarvesterInfo final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCutterayStats                         CutterayStats;                                     // 0x0010(0x0014)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DamagingActorDps;                                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PulseInterval;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScanCooldown;                                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageTolerance;                                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastDamageTime;                                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastServerHitTime;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDamageDone;                                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XpTriggerDamageThreshold;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PendingResources;                                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFractureLinesDestroyed;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalResourcesGained;                              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DamageIndex;                                       // 0x0050(0x0002)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActiveGroupIds;                                    // 0x0058(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	struct FTimerHandle                           ForgetHarvesterTimerHandle;                        // 0x0068(0x0008)(RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarvesterInfo) == 0x000008, "Wrong alignment on FHarvesterInfo");
static_assert(sizeof(FHarvesterInfo) == 0x000070, "Wrong size on FHarvesterInfo");
static_assert(offsetof(FHarvesterInfo, Controller) == 0x000000, "Member 'FHarvesterInfo::Controller' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, DamageCauser) == 0x000008, "Member 'FHarvesterInfo::DamageCauser' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, CutterayStats) == 0x000010, "Member 'FHarvesterInfo::CutterayStats' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, DamagingActorDps) == 0x000024, "Member 'FHarvesterInfo::DamagingActorDps' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, PulseInterval) == 0x000028, "Member 'FHarvesterInfo::PulseInterval' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, ScanCooldown) == 0x00002C, "Member 'FHarvesterInfo::ScanCooldown' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, DamageTolerance) == 0x000030, "Member 'FHarvesterInfo::DamageTolerance' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, LastDamageTime) == 0x000034, "Member 'FHarvesterInfo::LastDamageTime' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, LastServerHitTime) == 0x000038, "Member 'FHarvesterInfo::LastServerHitTime' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, TotalDamageDone) == 0x00003C, "Member 'FHarvesterInfo::TotalDamageDone' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, XpTriggerDamageThreshold) == 0x000040, "Member 'FHarvesterInfo::XpTriggerDamageThreshold' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, PendingResources) == 0x000044, "Member 'FHarvesterInfo::PendingResources' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, TotalFractureLinesDestroyed) == 0x000048, "Member 'FHarvesterInfo::TotalFractureLinesDestroyed' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, TotalResourcesGained) == 0x00004C, "Member 'FHarvesterInfo::TotalResourcesGained' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, DamageIndex) == 0x000050, "Member 'FHarvesterInfo::DamageIndex' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, ActiveGroupIds) == 0x000058, "Member 'FHarvesterInfo::ActiveGroupIds' has a wrong offset!");
static_assert(offsetof(FHarvesterInfo, ForgetHarvesterTimerHandle) == 0x000068, "Member 'FHarvesterInfo::ForgetHarvesterTimerHandle' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceTypeDefinition
// 0x0068 (0x0068 - 0x0000)
struct FResourceTypeDefinition final
{
public:
	class FName                                   ResourcePointGroupName;                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ResourceNodeSpawnerClass;                          // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ResourceNodeSpawnerAuxClass;                       // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceTypeDefinition) == 0x000008, "Wrong alignment on FResourceTypeDefinition");
static_assert(sizeof(FResourceTypeDefinition) == 0x000068, "Wrong size on FResourceTypeDefinition");
static_assert(offsetof(FResourceTypeDefinition, ResourcePointGroupName) == 0x000000, "Member 'FResourceTypeDefinition::ResourcePointGroupName' has a wrong offset!");
static_assert(offsetof(FResourceTypeDefinition, ResourceNodeSpawnerClass) == 0x000008, "Member 'FResourceTypeDefinition::ResourceNodeSpawnerClass' has a wrong offset!");
static_assert(offsetof(FResourceTypeDefinition, ResourceNodeSpawnerAuxClass) == 0x000038, "Member 'FResourceTypeDefinition::ResourceNodeSpawnerAuxClass' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerShelterStateChangeEventData
// 0x0008 (0x0038 - 0x0030)
struct FPlayerShelterStateChangeEventData final : public FGameEvent
{
public:
	EShelterState                                 m_ShelterState;                                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerShelterStateChangeEventData) == 0x000008, "Wrong alignment on FPlayerShelterStateChangeEventData");
static_assert(sizeof(FPlayerShelterStateChangeEventData) == 0x000038, "Wrong size on FPlayerShelterStateChangeEventData");
static_assert(offsetof(FPlayerShelterStateChangeEventData, m_ShelterState) == 0x000030, "Member 'FPlayerShelterStateChangeEventData::m_ShelterState' has a wrong offset!");

// ScriptStruct DuneSandbox.SpawnerVariant
// 0x0068 (0x0068 - 0x0000)
struct FSpawnerVariant final
{
public:
	TSoftClassPtr<class UClass>                   ResourceSpawnerClassCore;                          // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ResourceSpawnerClassAux;                           // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeatmapName;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnerVariant) == 0x000008, "Wrong alignment on FSpawnerVariant");
static_assert(sizeof(FSpawnerVariant) == 0x000068, "Wrong size on FSpawnerVariant");
static_assert(offsetof(FSpawnerVariant, ResourceSpawnerClassCore) == 0x000000, "Member 'FSpawnerVariant::ResourceSpawnerClassCore' has a wrong offset!");
static_assert(offsetof(FSpawnerVariant, ResourceSpawnerClassAux) == 0x000030, "Member 'FSpawnerVariant::ResourceSpawnerClassAux' has a wrong offset!");
static_assert(offsetof(FSpawnerVariant, HeatmapName) == 0x000060, "Member 'FSpawnerVariant::HeatmapName' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceTypeRow
// 0x0030 (0x0040 - 0x0010)
struct FResourceTypeRow final : public FTableRowBase
{
public:
	TArray<struct FSpawnerVariant>                SpawnerVariants;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ResourcePointGroupName;                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreExclusionZones;                             // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseScore;                                         // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxScore;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResourcePointTrace                           ResourcePointTrace;                                // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveUpwardsThreshold;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MoveUpwardsSlopeThreshold;                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceTypeRow) == 0x000008, "Wrong alignment on FResourceTypeRow");
static_assert(sizeof(FResourceTypeRow) == 0x000040, "Wrong size on FResourceTypeRow");
static_assert(offsetof(FResourceTypeRow, SpawnerVariants) == 0x000010, "Member 'FResourceTypeRow::SpawnerVariants' has a wrong offset!");
static_assert(offsetof(FResourceTypeRow, ResourcePointGroupName) == 0x000020, "Member 'FResourceTypeRow::ResourcePointGroupName' has a wrong offset!");
static_assert(offsetof(FResourceTypeRow, Priority) == 0x000028, "Member 'FResourceTypeRow::Priority' has a wrong offset!");
static_assert(offsetof(FResourceTypeRow, bIgnoreExclusionZones) == 0x00002C, "Member 'FResourceTypeRow::bIgnoreExclusionZones' has a wrong offset!");
static_assert(offsetof(FResourceTypeRow, bUseScore) == 0x00002D, "Member 'FResourceTypeRow::bUseScore' has a wrong offset!");
static_assert(offsetof(FResourceTypeRow, MaxScore) == 0x000030, "Member 'FResourceTypeRow::MaxScore' has a wrong offset!");
static_assert(offsetof(FResourceTypeRow, ResourcePointTrace) == 0x000034, "Member 'FResourceTypeRow::ResourcePointTrace' has a wrong offset!");
static_assert(offsetof(FResourceTypeRow, MoveUpwardsThreshold) == 0x000038, "Member 'FResourceTypeRow::MoveUpwardsThreshold' has a wrong offset!");
static_assert(offsetof(FResourceTypeRow, m_MoveUpwardsSlopeThreshold) == 0x00003C, "Member 'FResourceTypeRow::m_MoveUpwardsSlopeThreshold' has a wrong offset!");

// ScriptStruct DuneSandbox.UpdateFillableItemComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FUpdateFillableItemComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUpdateFillableItemComponent) == 0x000008, "Wrong alignment on FUpdateFillableItemComponent");
static_assert(sizeof(FUpdateFillableItemComponent) == 0x000010, "Wrong size on FUpdateFillableItemComponent");

// ScriptStruct DuneSandbox.CheckpointZoneComponent
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FCheckpointZoneComponent final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCheckpointZoneComponent) == 0x000010, "Wrong alignment on FCheckpointZoneComponent");
static_assert(sizeof(FCheckpointZoneComponent) == 0x000090, "Wrong size on FCheckpointZoneComponent");

// ScriptStruct DuneSandbox.CheckpointComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FCheckpointComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCheckpointComponent) == 0x000008, "Wrong alignment on FCheckpointComponent");
static_assert(sizeof(FCheckpointComponent) == 0x000010, "Wrong size on FCheckpointComponent");

// ScriptStruct DuneSandbox.CategoryGridViewVehicleItemData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FCategoryGridViewVehicleItemData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCategoryGridViewVehicleItemData) == 0x000008, "Wrong alignment on FCategoryGridViewVehicleItemData");
static_assert(sizeof(FCategoryGridViewVehicleItemData) == 0x000018, "Wrong size on FCategoryGridViewVehicleItemData");

// ScriptStruct DuneSandbox.DebugSandstormData
// 0x0010 (0x0010 - 0x0000)
struct FDebugSandstormData final
{
public:
	TArray<struct FDebugSandstormLocationData>    m_SandstormLocationData;                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugSandstormData) == 0x000008, "Wrong alignment on FDebugSandstormData");
static_assert(sizeof(FDebugSandstormData) == 0x000010, "Wrong size on FDebugSandstormData");
static_assert(offsetof(FDebugSandstormData, m_SandstormLocationData) == 0x000000, "Member 'FDebugSandstormData::m_SandstormLocationData' has a wrong offset!");

// ScriptStruct DuneSandbox.DebugMarkerContext
// 0x0020 (0x0020 - 0x0000)
struct FDebugMarkerContext final
{
public:
	class UMarkerOverlayWidget*                   MarkerOverlayWidget;                               // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugMarkerContext) == 0x000008, "Wrong alignment on FDebugMarkerContext");
static_assert(sizeof(FDebugMarkerContext) == 0x000020, "Wrong size on FDebugMarkerContext");
static_assert(offsetof(FDebugMarkerContext, MarkerOverlayWidget) == 0x000000, "Member 'FDebugMarkerContext::MarkerOverlayWidget' has a wrong offset!");

// ScriptStruct DuneSandbox.DebugSandstormPathData
// 0x0020 (0x0020 - 0x0000)
struct FDebugSandstormPathData final
{
public:
	TArray<struct FDebugNodePath>                 m_NodePaths;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         m_UnixTimestampOfWhenToSpawnNextSandstorm;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_CurrentPathIndex;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugSandstormPathData) == 0x000008, "Wrong alignment on FDebugSandstormPathData");
static_assert(sizeof(FDebugSandstormPathData) == 0x000020, "Wrong size on FDebugSandstormPathData");
static_assert(offsetof(FDebugSandstormPathData, m_NodePaths) == 0x000000, "Member 'FDebugSandstormPathData::m_NodePaths' has a wrong offset!");
static_assert(offsetof(FDebugSandstormPathData, m_UnixTimestampOfWhenToSpawnNextSandstorm) == 0x000010, "Member 'FDebugSandstormPathData::m_UnixTimestampOfWhenToSpawnNextSandstorm' has a wrong offset!");
static_assert(offsetof(FDebugSandstormPathData, m_CurrentPathIndex) == 0x000018, "Member 'FDebugSandstormPathData::m_CurrentPathIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.DebugCoriolisData
// 0x0010 (0x0010 - 0x0000)
struct FDebugCoriolisData final
{
public:
	struct FDateTime                              m_ThisCoriolisEndTime;                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              m_NextCoriolisEndTime;                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugCoriolisData) == 0x000008, "Wrong alignment on FDebugCoriolisData");
static_assert(sizeof(FDebugCoriolisData) == 0x000010, "Wrong size on FDebugCoriolisData");
static_assert(offsetof(FDebugCoriolisData, m_ThisCoriolisEndTime) == 0x000000, "Member 'FDebugCoriolisData::m_ThisCoriolisEndTime' has a wrong offset!");
static_assert(offsetof(FDebugCoriolisData, m_NextCoriolisEndTime) == 0x000008, "Member 'FDebugCoriolisData::m_NextCoriolisEndTime' has a wrong offset!");

// ScriptStruct DuneSandbox.SandStormOverlapComponent
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x08) FSandStormOverlapComponent final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandStormOverlapComponent) == 0x000008, "Wrong alignment on FSandStormOverlapComponent");
static_assert(sizeof(FSandStormOverlapComponent) == 0x0000F0, "Wrong size on FSandStormOverlapComponent");

// ScriptStruct DuneSandbox.VehicleEffectsDriverComponent
// 0x00D8 (0x00D8 - 0x0000)
struct FVehicleEffectsDriverComponent final
{
public:
	struct FVector                                m_MovementInput;                                   // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HorizontalSpeed;                                 // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HorizontalDirection;                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EVehicleModuleType, float>               m_DistanceTravelled;                               // 0x0020(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EVehicleModuleType, float>               m_ModuleDurabilities;                              // 0x0070(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         m_SpeedRatio;                                      // 0x00C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TurnRate;                                        // 0x00C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAreAllWheelsGrounded;                           // 0x00C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_BoostAmount;                                     // 0x00CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsBoosting;                                     // 0x00D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsOutOfPower;                                   // 0x00D1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsHarvesting;                                   // 0x00D2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsFilterClogged;                                // 0x00D3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleEffectsDriverComponent) == 0x000008, "Wrong alignment on FVehicleEffectsDriverComponent");
static_assert(sizeof(FVehicleEffectsDriverComponent) == 0x0000D8, "Wrong size on FVehicleEffectsDriverComponent");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_MovementInput) == 0x000000, "Member 'FVehicleEffectsDriverComponent::m_MovementInput' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_HorizontalSpeed) == 0x000018, "Member 'FVehicleEffectsDriverComponent::m_HorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_HorizontalDirection) == 0x00001C, "Member 'FVehicleEffectsDriverComponent::m_HorizontalDirection' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_DistanceTravelled) == 0x000020, "Member 'FVehicleEffectsDriverComponent::m_DistanceTravelled' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_ModuleDurabilities) == 0x000070, "Member 'FVehicleEffectsDriverComponent::m_ModuleDurabilities' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_SpeedRatio) == 0x0000C0, "Member 'FVehicleEffectsDriverComponent::m_SpeedRatio' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_TurnRate) == 0x0000C4, "Member 'FVehicleEffectsDriverComponent::m_TurnRate' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_bAreAllWheelsGrounded) == 0x0000C8, "Member 'FVehicleEffectsDriverComponent::m_bAreAllWheelsGrounded' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_BoostAmount) == 0x0000CC, "Member 'FVehicleEffectsDriverComponent::m_BoostAmount' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_bIsBoosting) == 0x0000D0, "Member 'FVehicleEffectsDriverComponent::m_bIsBoosting' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_bIsOutOfPower) == 0x0000D1, "Member 'FVehicleEffectsDriverComponent::m_bIsOutOfPower' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_bIsHarvesting) == 0x0000D2, "Member 'FVehicleEffectsDriverComponent::m_bIsHarvesting' has a wrong offset!");
static_assert(offsetof(FVehicleEffectsDriverComponent, m_bIsFilterClogged) == 0x0000D3, "Member 'FVehicleEffectsDriverComponent::m_bIsFilterClogged' has a wrong offset!");

// ScriptStruct DuneSandbox.SandStormRouteSettings
// 0x0040 (0x0040 - 0x0000)
struct FSandStormRouteSettings final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FinishLocation;                                    // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStormLarge;                                       // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStormDebug;                                       // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipBuildup;                                      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipToFade;                                       // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMultiplier;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMultiplier;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandStormRouteSettings) == 0x000008, "Wrong alignment on FSandStormRouteSettings");
static_assert(sizeof(FSandStormRouteSettings) == 0x000040, "Wrong size on FSandStormRouteSettings");
static_assert(offsetof(FSandStormRouteSettings, StartLocation) == 0x000000, "Member 'FSandStormRouteSettings::StartLocation' has a wrong offset!");
static_assert(offsetof(FSandStormRouteSettings, FinishLocation) == 0x000018, "Member 'FSandStormRouteSettings::FinishLocation' has a wrong offset!");
static_assert(offsetof(FSandStormRouteSettings, bStormLarge) == 0x000030, "Member 'FSandStormRouteSettings::bStormLarge' has a wrong offset!");
static_assert(offsetof(FSandStormRouteSettings, bStormDebug) == 0x000031, "Member 'FSandStormRouteSettings::bStormDebug' has a wrong offset!");
static_assert(offsetof(FSandStormRouteSettings, bSkipBuildup) == 0x000032, "Member 'FSandStormRouteSettings::bSkipBuildup' has a wrong offset!");
static_assert(offsetof(FSandStormRouteSettings, bSkipToFade) == 0x000033, "Member 'FSandStormRouteSettings::bSkipToFade' has a wrong offset!");
static_assert(offsetof(FSandStormRouteSettings, SpeedMultiplier) == 0x000034, "Member 'FSandStormRouteSettings::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FSandStormRouteSettings, ScaleMultiplier) == 0x000038, "Member 'FSandStormRouteSettings::ScaleMultiplier' has a wrong offset!");

// ScriptStruct DuneSandbox.ReplyData
// 0x0168 (0x0168 - 0x0000)
struct FReplyData final
{
public:
	int32                                         m_NodeReplyIndex;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDialogueNode                          m_DialogueNode;                                    // 0x0008(0x0138)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UInteractableWidget*                    m_ReplyWidget;                                     // 0x0140(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_ProcessedText;                                   // 0x0148(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          m_bNodeTaken;                                      // 0x0160(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplyData) == 0x000008, "Wrong alignment on FReplyData");
static_assert(sizeof(FReplyData) == 0x000168, "Wrong size on FReplyData");
static_assert(offsetof(FReplyData, m_NodeReplyIndex) == 0x000000, "Member 'FReplyData::m_NodeReplyIndex' has a wrong offset!");
static_assert(offsetof(FReplyData, m_DialogueNode) == 0x000008, "Member 'FReplyData::m_DialogueNode' has a wrong offset!");
static_assert(offsetof(FReplyData, m_ReplyWidget) == 0x000140, "Member 'FReplyData::m_ReplyWidget' has a wrong offset!");
static_assert(offsetof(FReplyData, m_ProcessedText) == 0x000148, "Member 'FReplyData::m_ProcessedText' has a wrong offset!");
static_assert(offsetof(FReplyData, m_bNodeTaken) == 0x000160, "Member 'FReplyData::m_bNodeTaken' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormRoamingTarget
// 0x0028 (0x0028 - 0x0000)
struct FSandwormRoamingTarget final
{
public:
	float                                         EndTime;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    TargetPosition;                                    // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Heading;                                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandwormRoamingTarget) == 0x000008, "Wrong alignment on FSandwormRoamingTarget");
static_assert(sizeof(FSandwormRoamingTarget) == 0x000028, "Wrong size on FSandwormRoamingTarget");
static_assert(offsetof(FSandwormRoamingTarget, EndTime) == 0x000000, "Member 'FSandwormRoamingTarget::EndTime' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingTarget, TargetPosition) == 0x000008, "Member 'FSandwormRoamingTarget::TargetPosition' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingTarget, Heading) == 0x000020, "Member 'FSandwormRoamingTarget::Heading' has a wrong offset!");

// ScriptStruct DuneSandbox.EScannableTypes
// 0x0000 (0x0008 - 0x0008)
struct FEScannableTypes final : public FStringEnumValue
{
};
static_assert(alignof(FEScannableTypes) == 0x000004, "Wrong alignment on FEScannableTypes");
static_assert(sizeof(FEScannableTypes) == 0x000008, "Wrong size on FEScannableTypes");

// ScriptStruct DuneSandbox.ScannableComponentRowBase
// 0x0040 (0x0050 - 0x0010)
struct FScannableComponentRowBase final : public FTableRowBase
{
public:
	struct FEScannableTypes                       m_ScannableType;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_DetailText;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         m_RadialScanWidgetVerticalOffset;                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LongRangeScanInViewWidgetVerticalOffset;         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_DirectionalScanWidgetOffsets;                    // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScannableComponentRowBase) == 0x000008, "Wrong alignment on FScannableComponentRowBase");
static_assert(sizeof(FScannableComponentRowBase) == 0x000050, "Wrong size on FScannableComponentRowBase");
static_assert(offsetof(FScannableComponentRowBase, m_ScannableType) == 0x000010, "Member 'FScannableComponentRowBase::m_ScannableType' has a wrong offset!");
static_assert(offsetof(FScannableComponentRowBase, m_DetailText) == 0x000018, "Member 'FScannableComponentRowBase::m_DetailText' has a wrong offset!");
static_assert(offsetof(FScannableComponentRowBase, m_RadialScanWidgetVerticalOffset) == 0x000030, "Member 'FScannableComponentRowBase::m_RadialScanWidgetVerticalOffset' has a wrong offset!");
static_assert(offsetof(FScannableComponentRowBase, m_LongRangeScanInViewWidgetVerticalOffset) == 0x000034, "Member 'FScannableComponentRowBase::m_LongRangeScanInViewWidgetVerticalOffset' has a wrong offset!");
static_assert(offsetof(FScannableComponentRowBase, m_DirectionalScanWidgetOffsets) == 0x000038, "Member 'FScannableComponentRowBase::m_DirectionalScanWidgetOffsets' has a wrong offset!");

// ScriptStruct DuneSandbox.ScannableTypesRowBase
// 0x0018 (0x0028 - 0x0010)
struct FScannableTypesRowBase final : public FTableRowBase
{
public:
	class FText                                   m_TypeDisplayText;                                 // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScannableTypesRowBase) == 0x000008, "Wrong alignment on FScannableTypesRowBase");
static_assert(sizeof(FScannableTypesRowBase) == 0x000028, "Wrong size on FScannableTypesRowBase");
static_assert(offsetof(FScannableTypesRowBase, m_TypeDisplayText) == 0x000010, "Member 'FScannableTypesRowBase::m_TypeDisplayText' has a wrong offset!");

// ScriptStruct DuneSandbox.WorldLayoutTerrainBlockArrayItem
// 0x0064 (0x0070 - 0x000C)
struct FWorldLayoutTerrainBlockArrayItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NameIndex;                                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AssetName;                                         // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTerrainBlockTemplateSubLevelGroupSettingsOverride> SubLevelGroupsSettings;        // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTerrainBlockTemplateSubLevelContentBlockSettings> SubContentBlocksSettings;       // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldLayoutTerrainBlockArrayItem) == 0x000008, "Wrong alignment on FWorldLayoutTerrainBlockArrayItem");
static_assert(sizeof(FWorldLayoutTerrainBlockArrayItem) == 0x000070, "Wrong size on FWorldLayoutTerrainBlockArrayItem");
static_assert(offsetof(FWorldLayoutTerrainBlockArrayItem, Location) == 0x000010, "Member 'FWorldLayoutTerrainBlockArrayItem::Location' has a wrong offset!");
static_assert(offsetof(FWorldLayoutTerrainBlockArrayItem, Rotation) == 0x000028, "Member 'FWorldLayoutTerrainBlockArrayItem::Rotation' has a wrong offset!");
static_assert(offsetof(FWorldLayoutTerrainBlockArrayItem, NameIndex) == 0x000040, "Member 'FWorldLayoutTerrainBlockArrayItem::NameIndex' has a wrong offset!");
static_assert(offsetof(FWorldLayoutTerrainBlockArrayItem, AssetName) == 0x000044, "Member 'FWorldLayoutTerrainBlockArrayItem::AssetName' has a wrong offset!");
static_assert(offsetof(FWorldLayoutTerrainBlockArrayItem, SubLevelGroupsSettings) == 0x000050, "Member 'FWorldLayoutTerrainBlockArrayItem::SubLevelGroupsSettings' has a wrong offset!");
static_assert(offsetof(FWorldLayoutTerrainBlockArrayItem, SubContentBlocksSettings) == 0x000060, "Member 'FWorldLayoutTerrainBlockArrayItem::SubContentBlocksSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.ScannerModRowBase
// 0x0010 (0x0020 - 0x0010)
struct FScannerModRowBase final : public FTableRowBase
{
public:
	float                                         BioDetectionRating;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChemDetectionRating;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TechDetectionRating;                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScannerAnalysisType                          AnalysisType;                                      // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsSurveyProbeLaunching;                       // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScannerModRowBase) == 0x000008, "Wrong alignment on FScannerModRowBase");
static_assert(sizeof(FScannerModRowBase) == 0x000020, "Wrong size on FScannerModRowBase");
static_assert(offsetof(FScannerModRowBase, BioDetectionRating) == 0x000010, "Member 'FScannerModRowBase::BioDetectionRating' has a wrong offset!");
static_assert(offsetof(FScannerModRowBase, ChemDetectionRating) == 0x000014, "Member 'FScannerModRowBase::ChemDetectionRating' has a wrong offset!");
static_assert(offsetof(FScannerModRowBase, TechDetectionRating) == 0x000018, "Member 'FScannerModRowBase::TechDetectionRating' has a wrong offset!");
static_assert(offsetof(FScannerModRowBase, AnalysisType) == 0x00001C, "Member 'FScannerModRowBase::AnalysisType' has a wrong offset!");
static_assert(offsetof(FScannerModRowBase, bAllowsSurveyProbeLaunching) == 0x00001D, "Member 'FScannerModRowBase::bAllowsSurveyProbeLaunching' has a wrong offset!");

// ScriptStruct DuneSandbox.ScannerRowBase
// 0x0068 (0x0078 - 0x0010)
struct FScannerRowBase final : public FTableRowBase
{
public:
	class FText                                   FriendlyName;                                      // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
	EScannerMountingType                          MountingType;                                      // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysDetectWithinLineOfSight;                    // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DetectionRate;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiscoverDetectedScannablesRange;                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMineableScan;                                   // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarkerDiscoveryMethod                        DiscoveryMethodUsed;                               // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_SpatialMapFlags;                                 // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        ScanArc;                                           // 0x0038(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ScanRange;                                         // 0x003A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ScanPulseSpeed;                                    // 0x003C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToShowInWorldMarkers;                          // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      ScanPostProcessMaterialInterface;                  // 0x0048(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScannerRowBase) == 0x000008, "Wrong alignment on FScannerRowBase");
static_assert(sizeof(FScannerRowBase) == 0x000078, "Wrong size on FScannerRowBase");
static_assert(offsetof(FScannerRowBase, FriendlyName) == 0x000010, "Member 'FScannerRowBase::FriendlyName' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, MountingType) == 0x000028, "Member 'FScannerRowBase::MountingType' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, bAlwaysDetectWithinLineOfSight) == 0x000029, "Member 'FScannerRowBase::bAlwaysDetectWithinLineOfSight' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, DetectionRate) == 0x00002C, "Member 'FScannerRowBase::DetectionRate' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, DiscoverDetectedScannablesRange) == 0x000030, "Member 'FScannerRowBase::DiscoverDetectedScannablesRange' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, bIsMineableScan) == 0x000034, "Member 'FScannerRowBase::bIsMineableScan' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, DiscoveryMethodUsed) == 0x000035, "Member 'FScannerRowBase::DiscoveryMethodUsed' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, m_SpatialMapFlags) == 0x000036, "Member 'FScannerRowBase::m_SpatialMapFlags' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, ScanArc) == 0x000038, "Member 'FScannerRowBase::ScanArc' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, ScanRange) == 0x00003A, "Member 'FScannerRowBase::ScanRange' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, ScanPulseSpeed) == 0x00003C, "Member 'FScannerRowBase::ScanPulseSpeed' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, TimeToShowInWorldMarkers) == 0x000040, "Member 'FScannerRowBase::TimeToShowInWorldMarkers' has a wrong offset!");
static_assert(offsetof(FScannerRowBase, ScanPostProcessMaterialInterface) == 0x000048, "Member 'FScannerRowBase::ScanPostProcessMaterialInterface' has a wrong offset!");

// ScriptStruct DuneSandbox.ControlPointAudio
// 0x0058 (0x0058 - 0x0000)
struct FControlPointAudio final
{
public:
	class UFcAudioEvent*                          m_LandsraadControlPointCapturingLoop;              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandsraadControlPointCapturingLoopStop;          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandsraadControlPointCapturedAtreides;           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandsraadControlPointCapturedHarkonnen;          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandsraadControlPointContestedLoop;              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandsraadControlPointContestedLoopStop;          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandsraadControlPointLoosingLoop;                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandsraadControlPointLoosingLoopStop;            // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandsraadControlPointLostAtreides;               // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandsraadControlPointLostHarkonnen;              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlPointAudio) == 0x000008, "Wrong alignment on FControlPointAudio");
static_assert(sizeof(FControlPointAudio) == 0x000058, "Wrong size on FControlPointAudio");
static_assert(offsetof(FControlPointAudio, m_LandsraadControlPointCapturingLoop) == 0x000000, "Member 'FControlPointAudio::m_LandsraadControlPointCapturingLoop' has a wrong offset!");
static_assert(offsetof(FControlPointAudio, m_LandsraadControlPointCapturingLoopStop) == 0x000008, "Member 'FControlPointAudio::m_LandsraadControlPointCapturingLoopStop' has a wrong offset!");
static_assert(offsetof(FControlPointAudio, m_LandsraadControlPointCapturedAtreides) == 0x000010, "Member 'FControlPointAudio::m_LandsraadControlPointCapturedAtreides' has a wrong offset!");
static_assert(offsetof(FControlPointAudio, m_LandsraadControlPointCapturedHarkonnen) == 0x000018, "Member 'FControlPointAudio::m_LandsraadControlPointCapturedHarkonnen' has a wrong offset!");
static_assert(offsetof(FControlPointAudio, m_LandsraadControlPointContestedLoop) == 0x000020, "Member 'FControlPointAudio::m_LandsraadControlPointContestedLoop' has a wrong offset!");
static_assert(offsetof(FControlPointAudio, m_LandsraadControlPointContestedLoopStop) == 0x000028, "Member 'FControlPointAudio::m_LandsraadControlPointContestedLoopStop' has a wrong offset!");
static_assert(offsetof(FControlPointAudio, m_LandsraadControlPointLoosingLoop) == 0x000030, "Member 'FControlPointAudio::m_LandsraadControlPointLoosingLoop' has a wrong offset!");
static_assert(offsetof(FControlPointAudio, m_LandsraadControlPointLoosingLoopStop) == 0x000038, "Member 'FControlPointAudio::m_LandsraadControlPointLoosingLoopStop' has a wrong offset!");
static_assert(offsetof(FControlPointAudio, m_LandsraadControlPointLostAtreides) == 0x000040, "Member 'FControlPointAudio::m_LandsraadControlPointLostAtreides' has a wrong offset!");
static_assert(offsetof(FControlPointAudio, m_LandsraadControlPointLostHarkonnen) == 0x000048, "Member 'FControlPointAudio::m_LandsraadControlPointLostHarkonnen' has a wrong offset!");

// ScriptStruct DuneSandbox.ScannerTypesRowBase
// 0x00C8 (0x00D8 - 0x0010)
struct FScannerTypesRowBase final : public FTableRowBase
{
public:
	TArray<struct FEScannableTypes>               m_SupportedScannableTypes;                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ULongRangeScanInViewWidget> m_LongRangeScanInViewWidgetClass;                  // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDirectionalScanWidget>     m_DirectionalScanWidgetClass;                      // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_OuterLongRangeScanDistance;                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LongRangeScanAngleInDeg;                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LongRangeScanDistance;                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DirectionalScanCooldownTime;                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DirectionalScanSpeed;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DirectionalScanDecalBoxHeight;                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      m_DirectionalScanMaterial;                         // 0x0048(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DirectionalScanWidgetTimeOnScreen;               // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DirectionalScanThresholdRadius;                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URadialScanWidget>          m_RadialScanWidgetClass;                           // 0x0080(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RadialScanWidgetTimeOnScreen;                    // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RadialScanRadius;                                // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RadialScanDetailRadius;                          // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RadialScanSpeed;                                 // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RadialScanCooldownTime;                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      m_RadialScanEffectMaterial;                        // 0x00A0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RadialScanDecalBoxHeight;                        // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScannerTypesRowBase) == 0x000008, "Wrong alignment on FScannerTypesRowBase");
static_assert(sizeof(FScannerTypesRowBase) == 0x0000D8, "Wrong size on FScannerTypesRowBase");
static_assert(offsetof(FScannerTypesRowBase, m_SupportedScannableTypes) == 0x000010, "Member 'FScannerTypesRowBase::m_SupportedScannableTypes' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_LongRangeScanInViewWidgetClass) == 0x000020, "Member 'FScannerTypesRowBase::m_LongRangeScanInViewWidgetClass' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_DirectionalScanWidgetClass) == 0x000028, "Member 'FScannerTypesRowBase::m_DirectionalScanWidgetClass' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_OuterLongRangeScanDistance) == 0x000030, "Member 'FScannerTypesRowBase::m_OuterLongRangeScanDistance' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_LongRangeScanAngleInDeg) == 0x000034, "Member 'FScannerTypesRowBase::m_LongRangeScanAngleInDeg' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_LongRangeScanDistance) == 0x000038, "Member 'FScannerTypesRowBase::m_LongRangeScanDistance' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_DirectionalScanCooldownTime) == 0x00003C, "Member 'FScannerTypesRowBase::m_DirectionalScanCooldownTime' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_DirectionalScanSpeed) == 0x000040, "Member 'FScannerTypesRowBase::m_DirectionalScanSpeed' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_DirectionalScanDecalBoxHeight) == 0x000044, "Member 'FScannerTypesRowBase::m_DirectionalScanDecalBoxHeight' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_DirectionalScanMaterial) == 0x000048, "Member 'FScannerTypesRowBase::m_DirectionalScanMaterial' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_DirectionalScanWidgetTimeOnScreen) == 0x000078, "Member 'FScannerTypesRowBase::m_DirectionalScanWidgetTimeOnScreen' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_DirectionalScanThresholdRadius) == 0x00007C, "Member 'FScannerTypesRowBase::m_DirectionalScanThresholdRadius' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_RadialScanWidgetClass) == 0x000080, "Member 'FScannerTypesRowBase::m_RadialScanWidgetClass' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_RadialScanWidgetTimeOnScreen) == 0x000088, "Member 'FScannerTypesRowBase::m_RadialScanWidgetTimeOnScreen' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_RadialScanRadius) == 0x00008C, "Member 'FScannerTypesRowBase::m_RadialScanRadius' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_RadialScanDetailRadius) == 0x000090, "Member 'FScannerTypesRowBase::m_RadialScanDetailRadius' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_RadialScanSpeed) == 0x000094, "Member 'FScannerTypesRowBase::m_RadialScanSpeed' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_RadialScanCooldownTime) == 0x000098, "Member 'FScannerTypesRowBase::m_RadialScanCooldownTime' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_RadialScanEffectMaterial) == 0x0000A0, "Member 'FScannerTypesRowBase::m_RadialScanEffectMaterial' has a wrong offset!");
static_assert(offsetof(FScannerTypesRowBase, m_RadialScanDecalBoxHeight) == 0x0000D0, "Member 'FScannerTypesRowBase::m_RadialScanDecalBoxHeight' has a wrong offset!");

// ScriptStruct DuneSandbox.MultiSchematicStats
// 0x0060 (0x0060 - 0x0000)
struct FMultiSchematicStats final
{
public:
	bool                                          bIsDefaultSchematic;                               // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSchematicStats>                SchematicRecipes;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SchematicMasterUseCountModifier;                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SchematicMasterUseCount;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUnique;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UContractDataAsset>      RequiredContract;                                  // 0x0028(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomizationItemListData*             CustomizationItemsToGiveOnFirstConsumption;        // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiSchematicStats) == 0x000008, "Wrong alignment on FMultiSchematicStats");
static_assert(sizeof(FMultiSchematicStats) == 0x000060, "Wrong size on FMultiSchematicStats");
static_assert(offsetof(FMultiSchematicStats, bIsDefaultSchematic) == 0x000000, "Member 'FMultiSchematicStats::bIsDefaultSchematic' has a wrong offset!");
static_assert(offsetof(FMultiSchematicStats, SchematicRecipes) == 0x000008, "Member 'FMultiSchematicStats::SchematicRecipes' has a wrong offset!");
static_assert(offsetof(FMultiSchematicStats, SchematicMasterUseCountModifier) == 0x000018, "Member 'FMultiSchematicStats::SchematicMasterUseCountModifier' has a wrong offset!");
static_assert(offsetof(FMultiSchematicStats, SchematicMasterUseCount) == 0x00001C, "Member 'FMultiSchematicStats::SchematicMasterUseCount' has a wrong offset!");
static_assert(offsetof(FMultiSchematicStats, bIsUnique) == 0x000020, "Member 'FMultiSchematicStats::bIsUnique' has a wrong offset!");
static_assert(offsetof(FMultiSchematicStats, RequiredContract) == 0x000028, "Member 'FMultiSchematicStats::RequiredContract' has a wrong offset!");
static_assert(offsetof(FMultiSchematicStats, CustomizationItemsToGiveOnFirstConsumption) == 0x000058, "Member 'FMultiSchematicStats::CustomizationItemsToGiveOnFirstConsumption' has a wrong offset!");

// ScriptStruct DuneSandbox.SchematicItemTableRow
// 0x0060 (0x0070 - 0x0010)
struct FSchematicItemTableRow final : public FTableRowBase
{
public:
	struct FMultiSchematicStats                   MultiSchematicStat;                                // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSchematicItemTableRow) == 0x000008, "Wrong alignment on FSchematicItemTableRow");
static_assert(sizeof(FSchematicItemTableRow) == 0x000070, "Wrong size on FSchematicItemTableRow");
static_assert(offsetof(FSchematicItemTableRow, MultiSchematicStat) == 0x000010, "Member 'FSchematicItemTableRow::MultiSchematicStat' has a wrong offset!");

// ScriptStruct DuneSandbox.AbilityDisplayData
// 0x00A0 (0x00A0 - 0x0000)
struct FAbilityDisplayData final
{
public:
	EAbilityState                                 State;                                             // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeRemainingInState;                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StatePayload;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0010(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<struct FGameplayAttribute>               FailedCostAttributes;                              // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bShowReactivation;                                 // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCustomText;                                   // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DynamicText;                                       // 0x0088(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityDisplayData) == 0x000008, "Wrong alignment on FAbilityDisplayData");
static_assert(sizeof(FAbilityDisplayData) == 0x0000A0, "Wrong size on FAbilityDisplayData");
static_assert(offsetof(FAbilityDisplayData, State) == 0x000000, "Member 'FAbilityDisplayData::State' has a wrong offset!");
static_assert(offsetof(FAbilityDisplayData, TimeRemainingInState) == 0x000004, "Member 'FAbilityDisplayData::TimeRemainingInState' has a wrong offset!");
static_assert(offsetof(FAbilityDisplayData, StatePayload) == 0x000008, "Member 'FAbilityDisplayData::StatePayload' has a wrong offset!");
static_assert(offsetof(FAbilityDisplayData, RelevantTags) == 0x000010, "Member 'FAbilityDisplayData::RelevantTags' has a wrong offset!");
static_assert(offsetof(FAbilityDisplayData, FailedCostAttributes) == 0x000030, "Member 'FAbilityDisplayData::FailedCostAttributes' has a wrong offset!");
static_assert(offsetof(FAbilityDisplayData, bShowReactivation) == 0x000080, "Member 'FAbilityDisplayData::bShowReactivation' has a wrong offset!");
static_assert(offsetof(FAbilityDisplayData, bShowCustomText) == 0x000081, "Member 'FAbilityDisplayData::bShowCustomText' has a wrong offset!");
static_assert(offsetof(FAbilityDisplayData, DynamicText) == 0x000088, "Member 'FAbilityDisplayData::DynamicText' has a wrong offset!");

// ScriptStruct DuneSandbox.RepBucketThreshold
// 0x0008 (0x0008 - 0x0000)
struct FRepBucketThreshold final
{
public:
	int32                                         MaxActors;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBuckets;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRepBucketThreshold) == 0x000004, "Wrong alignment on FRepBucketThreshold");
static_assert(sizeof(FRepBucketThreshold) == 0x000008, "Wrong size on FRepBucketThreshold");
static_assert(offsetof(FRepBucketThreshold, MaxActors) == 0x000000, "Member 'FRepBucketThreshold::MaxActors' has a wrong offset!");
static_assert(offsetof(FRepBucketThreshold, NumBuckets) == 0x000004, "Member 'FRepBucketThreshold::NumBuckets' has a wrong offset!");

// ScriptStruct DuneSandbox.SecurityZoneGroupRowBase
// 0x0008 (0x0018 - 0x0010)
struct FSecurityZoneGroupRowBase final : public FTableRowBase
{
public:
	struct FESecurityZoneType                     DefaultSecurityZoneType;                           // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSecurityZoneGroupRowBase) == 0x000008, "Wrong alignment on FSecurityZoneGroupRowBase");
static_assert(sizeof(FSecurityZoneGroupRowBase) == 0x000018, "Wrong size on FSecurityZoneGroupRowBase");
static_assert(offsetof(FSecurityZoneGroupRowBase, DefaultSecurityZoneType) == 0x000010, "Member 'FSecurityZoneGroupRowBase::DefaultSecurityZoneType' has a wrong offset!");

// ScriptStruct DuneSandbox.SecurityZoneDamageSettings
// 0x0001 (0x0001 - 0x0000)
struct FSecurityZoneDamageSettings final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSecurityZoneDamageSettings) == 0x000001, "Wrong alignment on FSecurityZoneDamageSettings");
static_assert(sizeof(FSecurityZoneDamageSettings) == 0x000001, "Wrong size on FSecurityZoneDamageSettings");

// ScriptStruct DuneSandbox.SecurityZoneMovementFilteringMaskMapping
// 0x0010 (0x0010 - 0x0000)
struct FSecurityZoneMovementFilteringMaskMapping final
{
public:
	TSubclassOf<class APawn>                      PawnClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MovementIgnoreMaskFlags;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSecurityZoneMovementFilteringMaskMapping) == 0x000008, "Wrong alignment on FSecurityZoneMovementFilteringMaskMapping");
static_assert(sizeof(FSecurityZoneMovementFilteringMaskMapping) == 0x000010, "Wrong size on FSecurityZoneMovementFilteringMaskMapping");
static_assert(offsetof(FSecurityZoneMovementFilteringMaskMapping, PawnClass) == 0x000000, "Member 'FSecurityZoneMovementFilteringMaskMapping::PawnClass' has a wrong offset!");
static_assert(offsetof(FSecurityZoneMovementFilteringMaskMapping, MovementIgnoreMaskFlags) == 0x000008, "Member 'FSecurityZoneMovementFilteringMaskMapping::MovementIgnoreMaskFlags' has a wrong offset!");

// ScriptStruct DuneSandbox.SecurityZoneRowBase
// 0x00A0 (0x00B0 - 0x0010)
struct FSecurityZoneRowBase final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0028(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSecurityZoneMovementFilteringMaskMapping> MoveFilterMaskMapping;                  // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAllowCombat;                                      // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZoneEnterDelayInSec;                               // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoneExitDelayInSec;                                // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageReceivedFromPlayerToPlayerMultiplier;        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageSentFromPlayerToPlayerMultiplier;            // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageReceivedFromNPCMultiplier;                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFromAOEInFriendlyPvPMultiplier;              // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UDWGameplayEffect>>  m_ZoneEffects;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	ESecurityZoneRulesType                        m_SecurityZoneRulesType;                           // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          m_EnterZoneSound;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSecurityZoneRowBase) == 0x000008, "Wrong alignment on FSecurityZoneRowBase");
static_assert(sizeof(FSecurityZoneRowBase) == 0x0000B0, "Wrong size on FSecurityZoneRowBase");
static_assert(offsetof(FSecurityZoneRowBase, Name) == 0x000010, "Member 'FSecurityZoneRowBase::Name' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, Icon) == 0x000028, "Member 'FSecurityZoneRowBase::Icon' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, Color) == 0x000058, "Member 'FSecurityZoneRowBase::Color' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, Priority) == 0x00005C, "Member 'FSecurityZoneRowBase::Priority' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, MoveFilterMaskMapping) == 0x000060, "Member 'FSecurityZoneRowBase::MoveFilterMaskMapping' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, bAllowCombat) == 0x000070, "Member 'FSecurityZoneRowBase::bAllowCombat' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, ZoneEnterDelayInSec) == 0x000074, "Member 'FSecurityZoneRowBase::ZoneEnterDelayInSec' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, ZoneExitDelayInSec) == 0x000078, "Member 'FSecurityZoneRowBase::ZoneExitDelayInSec' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, DamageReceivedFromPlayerToPlayerMultiplier) == 0x00007C, "Member 'FSecurityZoneRowBase::DamageReceivedFromPlayerToPlayerMultiplier' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, DamageSentFromPlayerToPlayerMultiplier) == 0x000080, "Member 'FSecurityZoneRowBase::DamageSentFromPlayerToPlayerMultiplier' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, DamageReceivedFromNPCMultiplier) == 0x000084, "Member 'FSecurityZoneRowBase::DamageReceivedFromNPCMultiplier' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, DamageFromAOEInFriendlyPvPMultiplier) == 0x000088, "Member 'FSecurityZoneRowBase::DamageFromAOEInFriendlyPvPMultiplier' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, m_ZoneEffects) == 0x000090, "Member 'FSecurityZoneRowBase::m_ZoneEffects' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, m_SecurityZoneRulesType) == 0x0000A0, "Member 'FSecurityZoneRowBase::m_SecurityZoneRulesType' has a wrong offset!");
static_assert(offsetof(FSecurityZoneRowBase, m_EnterZoneSound) == 0x0000A8, "Member 'FSecurityZoneRowBase::m_EnterZoneSound' has a wrong offset!");

// ScriptStruct DuneSandbox.ServerData
// 0x00A0 (0x00A0 - 0x0000)
struct FServerData final
{
public:
	class FString                                 m_IPAddress;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ServerName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_Region;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Changelist;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Snapshot;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_DimensionIndex;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_MapName;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerData) == 0x000008, "Wrong alignment on FServerData");
static_assert(sizeof(FServerData) == 0x0000A0, "Wrong size on FServerData");
static_assert(offsetof(FServerData, m_IPAddress) == 0x000000, "Member 'FServerData::m_IPAddress' has a wrong offset!");
static_assert(offsetof(FServerData, m_ServerName) == 0x000010, "Member 'FServerData::m_ServerName' has a wrong offset!");
static_assert(offsetof(FServerData, m_Region) == 0x000020, "Member 'FServerData::m_Region' has a wrong offset!");
static_assert(offsetof(FServerData, m_Changelist) == 0x000030, "Member 'FServerData::m_Changelist' has a wrong offset!");
static_assert(offsetof(FServerData, m_Snapshot) == 0x000034, "Member 'FServerData::m_Snapshot' has a wrong offset!");
static_assert(offsetof(FServerData, m_DimensionIndex) == 0x000038, "Member 'FServerData::m_DimensionIndex' has a wrong offset!");
static_assert(offsetof(FServerData, m_MapName) == 0x000040, "Member 'FServerData::m_MapName' has a wrong offset!");

// ScriptStruct DuneSandbox.ShelterComponent
// 0x0020 (0x0020 - 0x0000)
struct FShelterComponent
{
public:
	TArray<bool>                                  m_IsShelteredTraceResults;                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_ShelteredPercentage;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShelterComponent) == 0x000008, "Wrong alignment on FShelterComponent");
static_assert(sizeof(FShelterComponent) == 0x000020, "Wrong size on FShelterComponent");
static_assert(offsetof(FShelterComponent, m_IsShelteredTraceResults) == 0x000000, "Member 'FShelterComponent::m_IsShelteredTraceResults' has a wrong offset!");
static_assert(offsetof(FShelterComponent, m_ShelteredPercentage) == 0x000010, "Member 'FShelterComponent::m_ShelteredPercentage' has a wrong offset!");

// ScriptStruct DuneSandbox.VelocityDamageTableRow
// 0x0028 (0x0038 - 0x0010)
struct FVelocityDamageTableRow final : public FTableRowBase
{
public:
	class UCurveFloat*                            m_FallDamageCurve;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDuneDamageType>            m_DamageType;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_MaxPoiseDamage;                                  // 0x0020(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_OneHPRecoveryVelocity;                           // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DBNOVelocity;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVelocityDamageTableRow) == 0x000008, "Wrong alignment on FVelocityDamageTableRow");
static_assert(sizeof(FVelocityDamageTableRow) == 0x000038, "Wrong size on FVelocityDamageTableRow");
static_assert(offsetof(FVelocityDamageTableRow, m_FallDamageCurve) == 0x000010, "Member 'FVelocityDamageTableRow::m_FallDamageCurve' has a wrong offset!");
static_assert(offsetof(FVelocityDamageTableRow, m_DamageType) == 0x000018, "Member 'FVelocityDamageTableRow::m_DamageType' has a wrong offset!");
static_assert(offsetof(FVelocityDamageTableRow, m_MaxPoiseDamage) == 0x000020, "Member 'FVelocityDamageTableRow::m_MaxPoiseDamage' has a wrong offset!");
static_assert(offsetof(FVelocityDamageTableRow, m_OneHPRecoveryVelocity) == 0x00002C, "Member 'FVelocityDamageTableRow::m_OneHPRecoveryVelocity' has a wrong offset!");
static_assert(offsetof(FVelocityDamageTableRow, m_DBNOVelocity) == 0x000030, "Member 'FVelocityDamageTableRow::m_DBNOVelocity' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerInfoEntries
// 0x0010 (0x0010 - 0x0000)
struct FPlayerInfoEntries final
{
public:
	TArray<class UPlayerInfoListEntryData*>       m_PlayerInfoEntries;                               // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerInfoEntries) == 0x000008, "Wrong alignment on FPlayerInfoEntries");
static_assert(sizeof(FPlayerInfoEntries) == 0x000010, "Wrong size on FPlayerInfoEntries");
static_assert(offsetof(FPlayerInfoEntries, m_PlayerInfoEntries) == 0x000000, "Member 'FPlayerInfoEntries::m_PlayerInfoEntries' has a wrong offset!");

// ScriptStruct DuneSandbox.ShelterDebugComponent
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FShelterDebugComponent final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShelterDebugComponent) == 0x000008, "Wrong alignment on FShelterDebugComponent");
static_assert(sizeof(FShelterDebugComponent) == 0x000020, "Wrong size on FShelterDebugComponent");

// ScriptStruct DuneSandbox.ShelterMetricsComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FShelterMetricsComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShelterMetricsComponent) == 0x000008, "Wrong alignment on FShelterMetricsComponent");
static_assert(sizeof(FShelterMetricsComponent) == 0x000010, "Wrong size on FShelterMetricsComponent");

// ScriptStruct DuneSandbox.ShelterSchedulerComponent
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FShelterSchedulerComponent final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShelterSchedulerComponent) == 0x000008, "Wrong alignment on FShelterSchedulerComponent");
static_assert(sizeof(FShelterSchedulerComponent) == 0x000050, "Wrong size on FShelterSchedulerComponent");

// ScriptStruct DuneSandbox.VendorItemConfig
// 0x0098 (0x0098 - 0x0000)
struct FVendorItemConfig final
{
public:
	struct FGameplayTagQuery                      ItemTags;                                          // 0x0000(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentToApplyOnBaseItemPrice;                     // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      RequiredPlayerTags;                                // 0x0050(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendorItemConfig) == 0x000008, "Wrong alignment on FVendorItemConfig");
static_assert(sizeof(FVendorItemConfig) == 0x000098, "Wrong size on FVendorItemConfig");
static_assert(offsetof(FVendorItemConfig, ItemTags) == 0x000000, "Member 'FVendorItemConfig::ItemTags' has a wrong offset!");
static_assert(offsetof(FVendorItemConfig, PercentToApplyOnBaseItemPrice) == 0x000048, "Member 'FVendorItemConfig::PercentToApplyOnBaseItemPrice' has a wrong offset!");
static_assert(offsetof(FVendorItemConfig, RequiredPlayerTags) == 0x000050, "Member 'FVendorItemConfig::RequiredPlayerTags' has a wrong offset!");

// ScriptStruct DuneSandbox.ShieldStats
// 0x0020 (0x0020 - 0x0000)
struct FShieldStats final
{
public:
	float                                         ActivationDelay;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeactivationDelay;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactivationAfterADSDelay;                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageMitigationFactor;                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyRechargeDuration;                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyRechargeDrainRate;                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEnergy;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentEnergy;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShieldStats) == 0x000004, "Wrong alignment on FShieldStats");
static_assert(sizeof(FShieldStats) == 0x000020, "Wrong size on FShieldStats");
static_assert(offsetof(FShieldStats, ActivationDelay) == 0x000000, "Member 'FShieldStats::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FShieldStats, DeactivationDelay) == 0x000004, "Member 'FShieldStats::DeactivationDelay' has a wrong offset!");
static_assert(offsetof(FShieldStats, ReactivationAfterADSDelay) == 0x000008, "Member 'FShieldStats::ReactivationAfterADSDelay' has a wrong offset!");
static_assert(offsetof(FShieldStats, DamageMitigationFactor) == 0x00000C, "Member 'FShieldStats::DamageMitigationFactor' has a wrong offset!");
static_assert(offsetof(FShieldStats, EnergyRechargeDuration) == 0x000010, "Member 'FShieldStats::EnergyRechargeDuration' has a wrong offset!");
static_assert(offsetof(FShieldStats, EnergyRechargeDrainRate) == 0x000014, "Member 'FShieldStats::EnergyRechargeDrainRate' has a wrong offset!");
static_assert(offsetof(FShieldStats, MaxEnergy) == 0x000018, "Member 'FShieldStats::MaxEnergy' has a wrong offset!");
static_assert(offsetof(FShieldStats, CurrentEnergy) == 0x00001C, "Member 'FShieldStats::CurrentEnergy' has a wrong offset!");

// ScriptStruct DuneSandbox.ShieldState
// 0x0002 (0x0002 - 0x0000)
struct FShieldState final
{
public:
	EShieldState                                  State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShieldStateChangeReason                      ChangeReason;                                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShieldState) == 0x000001, "Wrong alignment on FShieldState");
static_assert(sizeof(FShieldState) == 0x000002, "Wrong size on FShieldState");
static_assert(offsetof(FShieldState, State) == 0x000000, "Member 'FShieldState::State' has a wrong offset!");
static_assert(offsetof(FShieldState, ChangeReason) == 0x000001, "Member 'FShieldState::ChangeReason' has a wrong offset!");

// ScriptStruct DuneSandbox.ModulePerkUIData
// 0x0040 (0x0040 - 0x0000)
struct FModulePerkUIData final
{
public:
	TSubclassOf<class UDWGameplayEffect>          BuffClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   LongDescription;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         GrantedLevel;                                      // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModulePerkUIData) == 0x000008, "Wrong alignment on FModulePerkUIData");
static_assert(sizeof(FModulePerkUIData) == 0x000040, "Wrong size on FModulePerkUIData");
static_assert(offsetof(FModulePerkUIData, BuffClass) == 0x000000, "Member 'FModulePerkUIData::BuffClass' has a wrong offset!");
static_assert(offsetof(FModulePerkUIData, Description) == 0x000008, "Member 'FModulePerkUIData::Description' has a wrong offset!");
static_assert(offsetof(FModulePerkUIData, LongDescription) == 0x000020, "Member 'FModulePerkUIData::LongDescription' has a wrong offset!");
static_assert(offsetof(FModulePerkUIData, GrantedLevel) == 0x000038, "Member 'FModulePerkUIData::GrantedLevel' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillBuffLevelData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSkillBuffLevelData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillBuffLevelData) == 0x000008, "Wrong alignment on FSkillBuffLevelData");
static_assert(sizeof(FSkillBuffLevelData) == 0x000010, "Wrong size on FSkillBuffLevelData");

// ScriptStruct DuneSandbox.TrainingModuleUIData
// 0x0290 (0x0290 - 0x0000)
struct FTrainingModuleUIData final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGridPosition                          GridPosition;                                      // 0x0030(0x0002)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           FailureReasons;                                    // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<EConnectionDirection>                    Connections;                                       // 0x0048(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<struct FGameplayTag>                     PrereqModuleTags_And;                              // 0x0098(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<struct FGameplayTag>                     PrereqModuleTags_Or;                               // 0x00E8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<uint8, struct FModulePerkUIData>         PerkUnlocks;                                       // 0x0138(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ESkillTree                                    SkillArea;                                         // 0x0188(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0190(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UDWGameplayEffect>          BuffClass;                                         // 0x01A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSkillBuffLevelData>            BuffsPerLevel;                                     // 0x01B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 GrantedPerkLevels;                                 // 0x01C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentLevelSkillPointCost;                        // 0x01D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAbility;                                        // 0x01D4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AbilityDescription;                                // 0x01D8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AbilityName;                                       // 0x01F0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         CurrentLevel;                                      // 0x0208(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxLevel;                                          // 0x0209(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A[0x6];                                      // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SkillPointsPerLevel;                               // 0x0210(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bComplete;                                         // 0x0238(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnlocked;                                         // 0x0239(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnlocksNextModule;                                // 0x023A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x023B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x023C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExternal;                                         // 0x023D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTarotBackground;                              // 0x023E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanLevelUp;                                       // 0x023F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<EConnectionDirection>                    PrereqModuleConnections;                           // 0x0240(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrainingModuleUIData) == 0x000008, "Wrong alignment on FTrainingModuleUIData");
static_assert(sizeof(FTrainingModuleUIData) == 0x000290, "Wrong size on FTrainingModuleUIData");
static_assert(offsetof(FTrainingModuleUIData, Icon) == 0x000000, "Member 'FTrainingModuleUIData::Icon' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, GridPosition) == 0x000030, "Member 'FTrainingModuleUIData::GridPosition' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, FailureReasons) == 0x000038, "Member 'FTrainingModuleUIData::FailureReasons' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, Connections) == 0x000048, "Member 'FTrainingModuleUIData::Connections' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, PrereqModuleTags_And) == 0x000098, "Member 'FTrainingModuleUIData::PrereqModuleTags_And' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, PrereqModuleTags_Or) == 0x0000E8, "Member 'FTrainingModuleUIData::PrereqModuleTags_Or' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, PerkUnlocks) == 0x000138, "Member 'FTrainingModuleUIData::PerkUnlocks' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, SkillArea) == 0x000188, "Member 'FTrainingModuleUIData::SkillArea' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, Description) == 0x000190, "Member 'FTrainingModuleUIData::Description' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, BuffClass) == 0x0001A8, "Member 'FTrainingModuleUIData::BuffClass' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, BuffsPerLevel) == 0x0001B0, "Member 'FTrainingModuleUIData::BuffsPerLevel' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, GrantedPerkLevels) == 0x0001C0, "Member 'FTrainingModuleUIData::GrantedPerkLevels' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, CurrentLevelSkillPointCost) == 0x0001D0, "Member 'FTrainingModuleUIData::CurrentLevelSkillPointCost' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, bIsAbility) == 0x0001D4, "Member 'FTrainingModuleUIData::bIsAbility' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, AbilityDescription) == 0x0001D8, "Member 'FTrainingModuleUIData::AbilityDescription' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, AbilityName) == 0x0001F0, "Member 'FTrainingModuleUIData::AbilityName' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, CurrentLevel) == 0x000208, "Member 'FTrainingModuleUIData::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, MaxLevel) == 0x000209, "Member 'FTrainingModuleUIData::MaxLevel' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, SkillPointsPerLevel) == 0x000210, "Member 'FTrainingModuleUIData::SkillPointsPerLevel' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, bComplete) == 0x000238, "Member 'FTrainingModuleUIData::bComplete' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, bUnlocked) == 0x000239, "Member 'FTrainingModuleUIData::bUnlocked' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, bUnlocksNextModule) == 0x00023A, "Member 'FTrainingModuleUIData::bUnlocksNextModule' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, bActive) == 0x00023B, "Member 'FTrainingModuleUIData::bActive' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, bIsNew) == 0x00023C, "Member 'FTrainingModuleUIData::bIsNew' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, bExternal) == 0x00023D, "Member 'FTrainingModuleUIData::bExternal' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, bShowTarotBackground) == 0x00023E, "Member 'FTrainingModuleUIData::bShowTarotBackground' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, bCanLevelUp) == 0x00023F, "Member 'FTrainingModuleUIData::bCanLevelUp' has a wrong offset!");
static_assert(offsetof(FTrainingModuleUIData, PrereqModuleConnections) == 0x000240, "Member 'FTrainingModuleUIData::PrereqModuleConnections' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillTreeNode
// 0x0298 (0x0298 - 0x0000)
struct FSkillTreeNode final
{
public:
	struct FTrainingModuleUIData                  ModuleData;                                        // 0x0000(0x0290)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillTreeNode) == 0x000008, "Wrong alignment on FSkillTreeNode");
static_assert(sizeof(FSkillTreeNode) == 0x000298, "Wrong size on FSkillTreeNode");
static_assert(offsetof(FSkillTreeNode, ModuleData) == 0x000000, "Member 'FSkillTreeNode::ModuleData' has a wrong offset!");
static_assert(offsetof(FSkillTreeNode, Tag) == 0x000290, "Member 'FSkillTreeNode::Tag' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillTreeRow
// 0x0010 (0x0010 - 0x0000)
struct FSkillTreeRow final
{
public:
	TArray<struct FSkillTreeNode>                 OrderedModules;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillTreeRow) == 0x000008, "Wrong alignment on FSkillTreeRow");
static_assert(sizeof(FSkillTreeRow) == 0x000010, "Wrong size on FSkillTreeRow");
static_assert(offsetof(FSkillTreeRow, OrderedModules) == 0x000000, "Member 'FSkillTreeRow::OrderedModules' has a wrong offset!");

// ScriptStruct DuneSandbox.ShieldComponent_BlueprintWrapper
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x08) FShieldComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShieldStats                           ShieldStats;                                       // 0x00A8(0x0020)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShieldComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FShieldComponent_BlueprintWrapper");
static_assert(sizeof(FShieldComponent_BlueprintWrapper) == 0x0000C8, "Wrong size on FShieldComponent_BlueprintWrapper");
static_assert(offsetof(FShieldComponent_BlueprintWrapper, ShieldStats) == 0x0000A8, "Member 'FShieldComponent_BlueprintWrapper::ShieldStats' has a wrong offset!");

// ScriptStruct DuneSandbox.ShieldItemTableRow
// 0x0010 (0x0020 - 0x0010)
struct FShieldItemTableRow final : public FTableRowBase
{
public:
	struct FShieldItemStats                       ShieldStats;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShieldItemTableRow) == 0x000008, "Wrong alignment on FShieldItemTableRow");
static_assert(sizeof(FShieldItemTableRow) == 0x000020, "Wrong size on FShieldItemTableRow");
static_assert(offsetof(FShieldItemTableRow, ShieldStats) == 0x000010, "Member 'FShieldItemTableRow::ShieldStats' has a wrong offset!");

// ScriptStruct DuneSandbox.ShieldPenetrationEvent
// 0x0000 (0x0030 - 0x0030)
struct FShieldPenetrationEvent final : public FGameEvent
{
};
static_assert(alignof(FShieldPenetrationEvent) == 0x000008, "Wrong alignment on FShieldPenetrationEvent");
static_assert(sizeof(FShieldPenetrationEvent) == 0x000030, "Wrong size on FShieldPenetrationEvent");

// ScriptStruct DuneSandbox.PenetrationInfo
// 0x0018 (0x0018 - 0x0000)
struct FPenetrationInfo final
{
public:
	EPenetrationType                              Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneCharacter*                         Instigator;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPenetrationInfo) == 0x000008, "Wrong alignment on FPenetrationInfo");
static_assert(sizeof(FPenetrationInfo) == 0x000018, "Wrong size on FPenetrationInfo");
static_assert(offsetof(FPenetrationInfo, Type) == 0x000000, "Member 'FPenetrationInfo::Type' has a wrong offset!");
static_assert(offsetof(FPenetrationInfo, Instigator) == 0x000008, "Member 'FPenetrationInfo::Instigator' has a wrong offset!");
static_assert(offsetof(FPenetrationInfo, StartTime) == 0x000010, "Member 'FPenetrationInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FPenetrationInfo, Duration) == 0x000014, "Member 'FPenetrationInfo::Duration' has a wrong offset!");

// ScriptStruct DuneSandbox.CompressedFireTimer
// 0x0002 (0x0002 - 0x0000)
struct alignas(0x02) FCompressedFireTimer final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCompressedFireTimer) == 0x000002, "Wrong alignment on FCompressedFireTimer");
static_assert(sizeof(FCompressedFireTimer) == 0x000002, "Wrong size on FCompressedFireTimer");

// ScriptStruct DuneSandbox.ShortCircuitComponent
// 0x0008 (0x0008 - 0x0000)
struct FShortCircuitComponent final
{
public:
	int64                                         m_ShortCircuitEndUniverseTime;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShortCircuitComponent) == 0x000008, "Wrong alignment on FShortCircuitComponent");
static_assert(sizeof(FShortCircuitComponent) == 0x000008, "Wrong size on FShortCircuitComponent");
static_assert(offsetof(FShortCircuitComponent, m_ShortCircuitEndUniverseTime) == 0x000000, "Member 'FShortCircuitComponent::m_ShortCircuitEndUniverseTime' has a wrong offset!");

// ScriptStruct DuneSandbox.ShortCommandsDataTableRowBase
// 0x0038 (0x0048 - 0x0010)
struct FShortCommandsDataTableRowBase final : public FTableRowBase
{
public:
	TArray<TSubclassOf<class UShortCommandsExecutionBase>> m_ShortCommandAssets;                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FString>                         m_ShortCommandExecutions;                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETextChatChannelType                          m_Type;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_RequireInstanceId;                               // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_OptionalAdditionalTextData;                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShortCommandsDataTableRowBase) == 0x000008, "Wrong alignment on FShortCommandsDataTableRowBase");
static_assert(sizeof(FShortCommandsDataTableRowBase) == 0x000048, "Wrong size on FShortCommandsDataTableRowBase");
static_assert(offsetof(FShortCommandsDataTableRowBase, m_ShortCommandAssets) == 0x000010, "Member 'FShortCommandsDataTableRowBase::m_ShortCommandAssets' has a wrong offset!");
static_assert(offsetof(FShortCommandsDataTableRowBase, m_ShortCommandExecutions) == 0x000020, "Member 'FShortCommandsDataTableRowBase::m_ShortCommandExecutions' has a wrong offset!");
static_assert(offsetof(FShortCommandsDataTableRowBase, m_Type) == 0x000030, "Member 'FShortCommandsDataTableRowBase::m_Type' has a wrong offset!");
static_assert(offsetof(FShortCommandsDataTableRowBase, m_RequireInstanceId) == 0x000031, "Member 'FShortCommandsDataTableRowBase::m_RequireInstanceId' has a wrong offset!");
static_assert(offsetof(FShortCommandsDataTableRowBase, m_OptionalAdditionalTextData) == 0x000038, "Member 'FShortCommandsDataTableRowBase::m_OptionalAdditionalTextData' has a wrong offset!");

// ScriptStruct DuneSandbox.EHarvestNodeEfficiency
// 0x0000 (0x0008 - 0x0008)
struct FEHarvestNodeEfficiency final : public FStringEnumValue
{
};
static_assert(alignof(FEHarvestNodeEfficiency) == 0x000004, "Wrong alignment on FEHarvestNodeEfficiency");
static_assert(sizeof(FEHarvestNodeEfficiency) == 0x000008, "Wrong size on FEHarvestNodeEfficiency");

// ScriptStruct DuneSandbox.SinkchartsStats
// 0x0058 (0x0058 - 0x0000)
struct FSinkchartsStats final
{
public:
	struct FUniqueID                              CreatorPlayerId;                                   // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MapCreator;                                        // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FEDuneMapId                            Map;                                               // 0x0020(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMapAreaId                             AreaId;                                            // 0x0028(0x0002)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AreaName;                                          // 0x0030(0x0018)(Edit, NativeAccessSpecifierPublic)
	int64                                         CreationTime;                                      // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MarkerSumValue;                                    // 0x0050(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSinkchartsStats) == 0x000008, "Wrong alignment on FSinkchartsStats");
static_assert(sizeof(FSinkchartsStats) == 0x000058, "Wrong size on FSinkchartsStats");
static_assert(offsetof(FSinkchartsStats, CreatorPlayerId) == 0x000000, "Member 'FSinkchartsStats::CreatorPlayerId' has a wrong offset!");
static_assert(offsetof(FSinkchartsStats, MapCreator) == 0x000008, "Member 'FSinkchartsStats::MapCreator' has a wrong offset!");
static_assert(offsetof(FSinkchartsStats, Map) == 0x000020, "Member 'FSinkchartsStats::Map' has a wrong offset!");
static_assert(offsetof(FSinkchartsStats, AreaId) == 0x000028, "Member 'FSinkchartsStats::AreaId' has a wrong offset!");
static_assert(offsetof(FSinkchartsStats, AreaName) == 0x000030, "Member 'FSinkchartsStats::AreaName' has a wrong offset!");
static_assert(offsetof(FSinkchartsStats, CreationTime) == 0x000048, "Member 'FSinkchartsStats::CreationTime' has a wrong offset!");
static_assert(offsetof(FSinkchartsStats, MarkerSumValue) == 0x000050, "Member 'FSinkchartsStats::MarkerSumValue' has a wrong offset!");

// ScriptStruct DuneSandbox.SinkchartsItemTableRow
// 0x0058 (0x0068 - 0x0010)
struct FSinkchartsItemTableRow final : public FTableRowBase
{
public:
	struct FSinkchartsStats                       SinkchartStats;                                    // 0x0010(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSinkchartsItemTableRow) == 0x000008, "Wrong alignment on FSinkchartsItemTableRow");
static_assert(sizeof(FSinkchartsItemTableRow) == 0x000068, "Wrong size on FSinkchartsItemTableRow");
static_assert(offsetof(FSinkchartsItemTableRow, SinkchartStats) == 0x000010, "Member 'FSinkchartsItemTableRow::SinkchartStats' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemCircuitStaticData
// 0x0020 (0x0020 - 0x0000)
struct FTotemCircuitStaticData final
{
public:
	int32                                         m_CircuitId;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_CircuitName;                                     // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTotemCircuitStaticData) == 0x000008, "Wrong alignment on FTotemCircuitStaticData");
static_assert(sizeof(FTotemCircuitStaticData) == 0x000020, "Wrong size on FTotemCircuitStaticData");
static_assert(offsetof(FTotemCircuitStaticData, m_CircuitId) == 0x000000, "Member 'FTotemCircuitStaticData::m_CircuitId' has a wrong offset!");
static_assert(offsetof(FTotemCircuitStaticData, m_CircuitName) == 0x000008, "Member 'FTotemCircuitStaticData::m_CircuitName' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsSubtitlesFontSizeOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsSubtitlesFontSizeOption final : public FSettingsEnumOptionBase
{
public:
	ESubtitlesFontSize                            Mode;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsSubtitlesFontSizeOption) == 0x000008, "Wrong alignment on FSettingsSubtitlesFontSizeOption");
static_assert(sizeof(FSettingsSubtitlesFontSizeOption) == 0x000028, "Wrong size on FSettingsSubtitlesFontSizeOption");
static_assert(offsetof(FSettingsSubtitlesFontSizeOption, Mode) == 0x000020, "Member 'FSettingsSubtitlesFontSizeOption::Mode' has a wrong offset!");

// ScriptStruct DuneSandbox.SinkchartsStatsComponent_BlueprintWrapper
// 0x0128 (0x0128 - 0x0000)
struct FSinkchartsStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0xD0];                                       // 0x0000(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSinkchartsStats                       SinkchartsStats;                                   // 0x00D0(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSinkchartsStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FSinkchartsStatsComponent_BlueprintWrapper");
static_assert(sizeof(FSinkchartsStatsComponent_BlueprintWrapper) == 0x000128, "Wrong size on FSinkchartsStatsComponent_BlueprintWrapper");
static_assert(offsetof(FSinkchartsStatsComponent_BlueprintWrapper, SinkchartsStats) == 0x0000D0, "Member 'FSinkchartsStatsComponent_BlueprintWrapper::SinkchartsStats' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillEquippedEvent
// 0x0000 (0x0030 - 0x0030)
struct FSkillEquippedEvent final : public FGameEvent
{
};
static_assert(alignof(FSkillEquippedEvent) == 0x000008, "Wrong alignment on FSkillEquippedEvent");
static_assert(sizeof(FSkillEquippedEvent) == 0x000030, "Wrong size on FSkillEquippedEvent");

// ScriptStruct DuneSandbox.SkillBuffUIData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSkillBuffUIData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillBuffUIData) == 0x000008, "Wrong alignment on FSkillBuffUIData");
static_assert(sizeof(FSkillBuffUIData) == 0x000020, "Wrong size on FSkillBuffUIData");

// ScriptStruct DuneSandbox.SocialFriendsListCategorySetupData
// 0x0028 (0x0028 - 0x0000)
struct FSocialFriendsListCategorySetupData final
{
public:
	TArray<ESocialMenuFriendsListButtonTypes>     m_Buttons;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   CategoryName;                                      // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocialFriendsListCategorySetupData) == 0x000008, "Wrong alignment on FSocialFriendsListCategorySetupData");
static_assert(sizeof(FSocialFriendsListCategorySetupData) == 0x000028, "Wrong size on FSocialFriendsListCategorySetupData");
static_assert(offsetof(FSocialFriendsListCategorySetupData, m_Buttons) == 0x000000, "Member 'FSocialFriendsListCategorySetupData::m_Buttons' has a wrong offset!");
static_assert(offsetof(FSocialFriendsListCategorySetupData, CategoryName) == 0x000010, "Member 'FSocialFriendsListCategorySetupData::CategoryName' has a wrong offset!");

// ScriptStruct DuneSandbox.SocketlessConnection
// 0x0008 (0x0008 - 0x0000)
struct FSocketlessConnection final
{
public:
	class APlaceableBase*                         Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocketlessConnection) == 0x000008, "Wrong alignment on FSocketlessConnection");
static_assert(sizeof(FSocketlessConnection) == 0x000008, "Wrong size on FSocketlessConnection");
static_assert(offsetof(FSocketlessConnection, Actor) == 0x000000, "Member 'FSocketlessConnection::Actor' has a wrong offset!");

// ScriptStruct DuneSandbox.TravelRequirement
// 0x0040 (0x0040 - 0x0000)
struct FTravelRequirement final
{
public:
	ETravelRequirementType                        Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayFailReason;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FailReason;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         RequiredAmount;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AllowedNavigationTypes;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelHarnessedVehicleType                   AllowedHarnessedVehicle;                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JourneyNodeName;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTravelRequirement) == 0x000008, "Wrong alignment on FTravelRequirement");
static_assert(sizeof(FTravelRequirement) == 0x000040, "Wrong size on FTravelRequirement");
static_assert(offsetof(FTravelRequirement, Type) == 0x000000, "Member 'FTravelRequirement::Type' has a wrong offset!");
static_assert(offsetof(FTravelRequirement, bDisplayFailReason) == 0x000001, "Member 'FTravelRequirement::bDisplayFailReason' has a wrong offset!");
static_assert(offsetof(FTravelRequirement, FailReason) == 0x000008, "Member 'FTravelRequirement::FailReason' has a wrong offset!");
static_assert(offsetof(FTravelRequirement, RequiredAmount) == 0x000020, "Member 'FTravelRequirement::RequiredAmount' has a wrong offset!");
static_assert(offsetof(FTravelRequirement, AllowedNavigationTypes) == 0x000024, "Member 'FTravelRequirement::AllowedNavigationTypes' has a wrong offset!");
static_assert(offsetof(FTravelRequirement, AllowedHarnessedVehicle) == 0x000028, "Member 'FTravelRequirement::AllowedHarnessedVehicle' has a wrong offset!");
static_assert(offsetof(FTravelRequirement, JourneyNodeName) == 0x000030, "Member 'FTravelRequirement::JourneyNodeName' has a wrong offset!");

// ScriptStruct DuneSandbox.SolidFuelItemStatsComponent_BlueprintWrapper
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSolidFuelItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSolidFuelItemStats                    SolidFuelItemStats;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolidFuelItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FSolidFuelItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FSolidFuelItemStatsComponent_BlueprintWrapper) == 0x000030, "Wrong size on FSolidFuelItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FSolidFuelItemStatsComponent_BlueprintWrapper, SolidFuelItemStats) == 0x000028, "Member 'FSolidFuelItemStatsComponent_BlueprintWrapper::SolidFuelItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.SolidFuelItemTableRow
// 0x0008 (0x0018 - 0x0010)
struct FSolidFuelItemTableRow final : public FTableRowBase
{
public:
	struct FSolidFuelItemStats                    SolidFuelStats;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolidFuelItemTableRow) == 0x000008, "Wrong alignment on FSolidFuelItemTableRow");
static_assert(sizeof(FSolidFuelItemTableRow) == 0x000018, "Wrong size on FSolidFuelItemTableRow");
static_assert(offsetof(FSolidFuelItemTableRow, SolidFuelStats) == 0x000010, "Member 'FSolidFuelItemTableRow::SolidFuelStats' has a wrong offset!");

// ScriptStruct DuneSandbox.SpawnAIRequest
// 0x001C (0x001C - 0x0000)
struct FSpawnAIRequest final
{
public:
	TWeakObjectPtr<class AAISpawnManager>         m_SpawnManager;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AAIBaseSpawnLocation>    m_SpawnLocation;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_NpcConfigName;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnAIRequest) == 0x000004, "Wrong alignment on FSpawnAIRequest");
static_assert(sizeof(FSpawnAIRequest) == 0x00001C, "Wrong size on FSpawnAIRequest");
static_assert(offsetof(FSpawnAIRequest, m_SpawnManager) == 0x000000, "Member 'FSpawnAIRequest::m_SpawnManager' has a wrong offset!");
static_assert(offsetof(FSpawnAIRequest, m_SpawnLocation) == 0x000008, "Member 'FSpawnAIRequest::m_SpawnLocation' has a wrong offset!");
static_assert(offsetof(FSpawnAIRequest, m_NpcConfigName) == 0x000010, "Member 'FSpawnAIRequest::m_NpcConfigName' has a wrong offset!");

// ScriptStruct DuneSandbox.TutorialData
// 0x0010 (0x0010 - 0x0000)
struct FTutorialData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTutorialBaseData*                      m_Data;                                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialData) == 0x000008, "Wrong alignment on FTutorialData");
static_assert(sizeof(FTutorialData) == 0x000010, "Wrong size on FTutorialData");
static_assert(offsetof(FTutorialData, m_Data) == 0x000008, "Member 'FTutorialData::m_Data' has a wrong offset!");

// ScriptStruct DuneSandbox.InfoCardInputHandlerGroup
// 0x0010 (0x0010 - 0x0000)
struct FInfoCardInputHandlerGroup final
{
public:
	TArray<class UInfoCardInputHandler*>          m_Handlers;                                        // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FInfoCardInputHandlerGroup) == 0x000008, "Wrong alignment on FInfoCardInputHandlerGroup");
static_assert(sizeof(FInfoCardInputHandlerGroup) == 0x000010, "Wrong size on FInfoCardInputHandlerGroup");
static_assert(offsetof(FInfoCardInputHandlerGroup, m_Handlers) == 0x000000, "Member 'FInfoCardInputHandlerGroup::m_Handlers' has a wrong offset!");

// ScriptStruct DuneSandbox.SpawnTransform
// 0x0020 (0x0020 - 0x0000)
struct FSpawnTransform final
{
public:
	struct FVector_NetQuantize                    Location;                                          // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnTransform) == 0x000008, "Wrong alignment on FSpawnTransform");
static_assert(sizeof(FSpawnTransform) == 0x000020, "Wrong size on FSpawnTransform");
static_assert(offsetof(FSpawnTransform, Location) == 0x000000, "Member 'FSpawnTransform::Location' has a wrong offset!");
static_assert(offsetof(FSpawnTransform, Yaw) == 0x000018, "Member 'FSpawnTransform::Yaw' has a wrong offset!");

// ScriptStruct DuneSandbox.SpecialReferenceItemCostsTableRow
// 0x0058 (0x0068 - 0x0010)
struct FSpecialReferenceItemCostsTableRow final : public FTableRowBase
{
public:
	struct FEItemTemplateID                       ItemTemplateId;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FEItemTemplateID, int32>          ItemCosts;                                         // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialReferenceItemCostsTableRow) == 0x000008, "Wrong alignment on FSpecialReferenceItemCostsTableRow");
static_assert(sizeof(FSpecialReferenceItemCostsTableRow) == 0x000068, "Wrong size on FSpecialReferenceItemCostsTableRow");
static_assert(offsetof(FSpecialReferenceItemCostsTableRow, ItemTemplateId) == 0x000010, "Member 'FSpecialReferenceItemCostsTableRow::ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FSpecialReferenceItemCostsTableRow, ItemCosts) == 0x000018, "Member 'FSpecialReferenceItemCostsTableRow::ItemCosts' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceFieldTypeRowBase
// 0x0008 (0x0018 - 0x0010)
struct FSpiceFieldTypeRowBase final : public FTableRowBase
{
public:
	bool                                          bDummy;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiceFieldTypeRowBase) == 0x000008, "Wrong alignment on FSpiceFieldTypeRowBase");
static_assert(sizeof(FSpiceFieldTypeRowBase) == 0x000018, "Wrong size on FSpiceFieldTypeRowBase");
static_assert(offsetof(FSpiceFieldTypeRowBase, bDummy) == 0x000010, "Member 'FSpiceFieldTypeRowBase::bDummy' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceRemaining
// 0x0018 (0x0018 - 0x0000)
struct FSpiceRemaining final
{
public:
	struct FActiveGameplayEffectHandle            m_SpiceSource;                                     // 0x0000(0x0010)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SpiceAmount;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsDurationOver;                                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiceRemaining) == 0x000004, "Wrong alignment on FSpiceRemaining");
static_assert(sizeof(FSpiceRemaining) == 0x000018, "Wrong size on FSpiceRemaining");
static_assert(offsetof(FSpiceRemaining, m_SpiceSource) == 0x000000, "Member 'FSpiceRemaining::m_SpiceSource' has a wrong offset!");
static_assert(offsetof(FSpiceRemaining, m_SpiceAmount) == 0x000010, "Member 'FSpiceRemaining::m_SpiceAmount' has a wrong offset!");
static_assert(offsetof(FSpiceRemaining, m_bIsDurationOver) == 0x000014, "Member 'FSpiceRemaining::m_bIsDurationOver' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceVisionVFXTuning
// 0x0040 (0x0040 - 0x0000)
struct FSpiceVisionVFXTuning final
{
public:
	TSoftObjectPtr<class UNiagaraSystem>          m_VFXToSpawn;                                      // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ProbabilityToSpawn;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaximumAmountAtOnce;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinSpawnTimeRange;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxSpawnTimeRange;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceVisionVFXTuning) == 0x000008, "Wrong alignment on FSpiceVisionVFXTuning");
static_assert(sizeof(FSpiceVisionVFXTuning) == 0x000040, "Wrong size on FSpiceVisionVFXTuning");
static_assert(offsetof(FSpiceVisionVFXTuning, m_VFXToSpawn) == 0x000000, "Member 'FSpiceVisionVFXTuning::m_VFXToSpawn' has a wrong offset!");
static_assert(offsetof(FSpiceVisionVFXTuning, m_ProbabilityToSpawn) == 0x000030, "Member 'FSpiceVisionVFXTuning::m_ProbabilityToSpawn' has a wrong offset!");
static_assert(offsetof(FSpiceVisionVFXTuning, m_MaximumAmountAtOnce) == 0x000034, "Member 'FSpiceVisionVFXTuning::m_MaximumAmountAtOnce' has a wrong offset!");
static_assert(offsetof(FSpiceVisionVFXTuning, m_MinSpawnTimeRange) == 0x000038, "Member 'FSpiceVisionVFXTuning::m_MinSpawnTimeRange' has a wrong offset!");
static_assert(offsetof(FSpiceVisionVFXTuning, m_MaxSpawnTimeRange) == 0x00003C, "Member 'FSpiceVisionVFXTuning::m_MaxSpawnTimeRange' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceVisionVFXTuningArray
// 0x0010 (0x0010 - 0x0000)
struct FSpiceVisionVFXTuningArray final
{
public:
	TArray<struct FSpiceVisionVFXTuning>          m_VFXToSpawn;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceVisionVFXTuningArray) == 0x000008, "Wrong alignment on FSpiceVisionVFXTuningArray");
static_assert(sizeof(FSpiceVisionVFXTuningArray) == 0x000010, "Wrong size on FSpiceVisionVFXTuningArray");
static_assert(offsetof(FSpiceVisionVFXTuningArray, m_VFXToSpawn) == 0x000000, "Member 'FSpiceVisionVFXTuningArray::m_VFXToSpawn' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceVisionAddictionLevelData
// 0x0140 (0x0140 - 0x0000)
struct FSpiceVisionAddictionLevelData final
{
public:
	float                                         m_SpiceVisionIntroDuration;                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SpiceVisionDuration;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_SpiceVisionBackgroundSFXStart;                   // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_SpiceVisionBackgroundSFXEnd;                     // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SpawnConeAngle;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinSpawnDistance;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxSpawnDistance;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaximumActorAmount;                              // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaximumVFXAmount;                                // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_ActorSpawnFrequency;                             // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            m_VFXSpawnFrequency;                               // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESpiceState, struct FSpiceVisionActorTuningArray> m_ActorToSpawn;                           // 0x0090(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ESpiceState, struct FSpiceVisionVFXTuningArray> m_VFXToSpawn;                               // 0x00E0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UNiagaraSystem>>  m_IntroVFXToSpawn;                                 // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceVisionAddictionLevelData) == 0x000008, "Wrong alignment on FSpiceVisionAddictionLevelData");
static_assert(sizeof(FSpiceVisionAddictionLevelData) == 0x000140, "Wrong size on FSpiceVisionAddictionLevelData");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_SpiceVisionIntroDuration) == 0x000000, "Member 'FSpiceVisionAddictionLevelData::m_SpiceVisionIntroDuration' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_SpiceVisionDuration) == 0x000004, "Member 'FSpiceVisionAddictionLevelData::m_SpiceVisionDuration' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_SpiceVisionBackgroundSFXStart) == 0x000008, "Member 'FSpiceVisionAddictionLevelData::m_SpiceVisionBackgroundSFXStart' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_SpiceVisionBackgroundSFXEnd) == 0x000038, "Member 'FSpiceVisionAddictionLevelData::m_SpiceVisionBackgroundSFXEnd' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_SpawnConeAngle) == 0x000068, "Member 'FSpiceVisionAddictionLevelData::m_SpawnConeAngle' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_MinSpawnDistance) == 0x00006C, "Member 'FSpiceVisionAddictionLevelData::m_MinSpawnDistance' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_MaxSpawnDistance) == 0x000070, "Member 'FSpiceVisionAddictionLevelData::m_MaxSpawnDistance' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_MaximumActorAmount) == 0x000074, "Member 'FSpiceVisionAddictionLevelData::m_MaximumActorAmount' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_MaximumVFXAmount) == 0x000078, "Member 'FSpiceVisionAddictionLevelData::m_MaximumVFXAmount' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_ActorSpawnFrequency) == 0x000080, "Member 'FSpiceVisionAddictionLevelData::m_ActorSpawnFrequency' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_VFXSpawnFrequency) == 0x000088, "Member 'FSpiceVisionAddictionLevelData::m_VFXSpawnFrequency' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_ActorToSpawn) == 0x000090, "Member 'FSpiceVisionAddictionLevelData::m_ActorToSpawn' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_VFXToSpawn) == 0x0000E0, "Member 'FSpiceVisionAddictionLevelData::m_VFXToSpawn' has a wrong offset!");
static_assert(offsetof(FSpiceVisionAddictionLevelData, m_IntroVFXToSpawn) == 0x000130, "Member 'FSpiceVisionAddictionLevelData::m_IntroVFXToSpawn' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceVisionData
// 0x0010 (0x0010 - 0x0000)
struct FSpiceVisionData final
{
public:
	class UCurveTable*                            m_PostProcessingCurveTable;                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TransitionModifier;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiceVisionData) == 0x000008, "Wrong alignment on FSpiceVisionData");
static_assert(sizeof(FSpiceVisionData) == 0x000010, "Wrong size on FSpiceVisionData");
static_assert(offsetof(FSpiceVisionData, m_PostProcessingCurveTable) == 0x000000, "Member 'FSpiceVisionData::m_PostProcessingCurveTable' has a wrong offset!");
static_assert(offsetof(FSpiceVisionData, m_TransitionModifier) == 0x000008, "Member 'FSpiceVisionData::m_TransitionModifier' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceVisionTuning
// 0x0010 (0x0020 - 0x0010)
struct FSpiceVisionTuning final : public FTableRowBase
{
public:
	TArray<struct FSpiceVisionAddictionLevelData> m_AddictionLevelsToSpiceVisionData;                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceVisionTuning) == 0x000008, "Wrong alignment on FSpiceVisionTuning");
static_assert(sizeof(FSpiceVisionTuning) == 0x000020, "Wrong size on FSpiceVisionTuning");
static_assert(offsetof(FSpiceVisionTuning, m_AddictionLevelsToSpiceVisionData) == 0x000010, "Member 'FSpiceVisionTuning::m_AddictionLevelsToSpiceVisionData' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceVisionVariationRetrievalData
// 0x0020 (0x0020 - 0x0000)
struct FSpiceVisionVariationRetrievalData final
{
public:
	struct FDataTableRowHandle                    SpiceVisionTuningRowHandle;                        // 0x0000(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SpiceAddictionLevel;                               // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpiceState                                   SpiceState;                                        // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VisionVariationIdx;                                // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiceVisionVariationRetrievalData) == 0x000008, "Wrong alignment on FSpiceVisionVariationRetrievalData");
static_assert(sizeof(FSpiceVisionVariationRetrievalData) == 0x000020, "Wrong size on FSpiceVisionVariationRetrievalData");
static_assert(offsetof(FSpiceVisionVariationRetrievalData, SpiceVisionTuningRowHandle) == 0x000000, "Member 'FSpiceVisionVariationRetrievalData::SpiceVisionTuningRowHandle' has a wrong offset!");
static_assert(offsetof(FSpiceVisionVariationRetrievalData, SpiceAddictionLevel) == 0x000010, "Member 'FSpiceVisionVariationRetrievalData::SpiceAddictionLevel' has a wrong offset!");
static_assert(offsetof(FSpiceVisionVariationRetrievalData, SpiceState) == 0x000014, "Member 'FSpiceVisionVariationRetrievalData::SpiceState' has a wrong offset!");
static_assert(offsetof(FSpiceVisionVariationRetrievalData, VisionVariationIdx) == 0x000018, "Member 'FSpiceVisionVariationRetrievalData::VisionVariationIdx' has a wrong offset!");

// ScriptStruct DuneSandbox.StaticLocationRowBase
// 0x0030 (0x0040 - 0x0010)
struct FStaticLocationRowBase final : public FTableRowBase
{
public:
	class FName                                   m_PackageName;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  m_StaticLocationTags;                              // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EDataChangeHandlingPolicy                     m_DataChangePolicy;                                // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaticLocationRowBase) == 0x000008, "Wrong alignment on FStaticLocationRowBase");
static_assert(sizeof(FStaticLocationRowBase) == 0x000040, "Wrong size on FStaticLocationRowBase");
static_assert(offsetof(FStaticLocationRowBase, m_PackageName) == 0x000010, "Member 'FStaticLocationRowBase::m_PackageName' has a wrong offset!");
static_assert(offsetof(FStaticLocationRowBase, m_StaticLocationTags) == 0x000018, "Member 'FStaticLocationRowBase::m_StaticLocationTags' has a wrong offset!");
static_assert(offsetof(FStaticLocationRowBase, m_DataChangePolicy) == 0x000038, "Member 'FStaticLocationRowBase::m_DataChangePolicy' has a wrong offset!");

// ScriptStruct DuneSandbox.StatBarData
// 0x00B8 (0x00B8 - 0x0000)
struct alignas(0x08) FStatBarData final
{
public:
	uint8                                         Pad_0[0xB8];                                       // 0x0000(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatBarData) == 0x000008, "Wrong alignment on FStatBarData");
static_assert(sizeof(FStatBarData) == 0x0000B8, "Wrong size on FStatBarData");

// ScriptStruct DuneSandbox.SkillStatBarData
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FSkillStatBarData final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillStatBarData) == 0x000008, "Wrong alignment on FSkillStatBarData");
static_assert(sizeof(FSkillStatBarData) == 0x000048, "Wrong size on FSkillStatBarData");

// ScriptStruct DuneSandbox.SteeringOwnerAgent
// 0x0078 (0x0078 - 0x0000)
struct FSteeringOwnerAgent final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowRadius;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMaxSpeed;                                   // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalSpeed;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxForce;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothTimeToTargetInSec;                           // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteeringOwnerAgent) == 0x000008, "Wrong alignment on FSteeringOwnerAgent");
static_assert(sizeof(FSteeringOwnerAgent) == 0x000078, "Wrong size on FSteeringOwnerAgent");
static_assert(offsetof(FSteeringOwnerAgent, Mass) == 0x000048, "Member 'FSteeringOwnerAgent::Mass' has a wrong offset!");
static_assert(offsetof(FSteeringOwnerAgent, Radius) == 0x00004C, "Member 'FSteeringOwnerAgent::Radius' has a wrong offset!");
static_assert(offsetof(FSteeringOwnerAgent, SlowRadius) == 0x000050, "Member 'FSteeringOwnerAgent::SlowRadius' has a wrong offset!");
static_assert(offsetof(FSteeringOwnerAgent, MaxSpeed) == 0x000054, "Member 'FSteeringOwnerAgent::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FSteeringOwnerAgent, CurrentMaxSpeed) == 0x000058, "Member 'FSteeringOwnerAgent::CurrentMaxSpeed' has a wrong offset!");
static_assert(offsetof(FSteeringOwnerAgent, MaxVerticalSpeed) == 0x00005C, "Member 'FSteeringOwnerAgent::MaxVerticalSpeed' has a wrong offset!");
static_assert(offsetof(FSteeringOwnerAgent, MaxForce) == 0x000060, "Member 'FSteeringOwnerAgent::MaxForce' has a wrong offset!");
static_assert(offsetof(FSteeringOwnerAgent, SmoothTimeToTargetInSec) == 0x000070, "Member 'FSteeringOwnerAgent::SmoothTimeToTargetInSec' has a wrong offset!");

// ScriptStruct DuneSandbox.SteeringTargetAgent
// 0x0020 (0x0020 - 0x0000)
struct FSteeringTargetAgent final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTarget;                                        // 0x001C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSteeringTargetAgent) == 0x000008, "Wrong alignment on FSteeringTargetAgent");
static_assert(sizeof(FSteeringTargetAgent) == 0x000020, "Wrong size on FSteeringTargetAgent");
static_assert(offsetof(FSteeringTargetAgent, Location) == 0x000000, "Member 'FSteeringTargetAgent::Location' has a wrong offset!");
static_assert(offsetof(FSteeringTargetAgent, Radius) == 0x000018, "Member 'FSteeringTargetAgent::Radius' has a wrong offset!");
static_assert(offsetof(FSteeringTargetAgent, bHasTarget) == 0x00001C, "Member 'FSteeringTargetAgent::bHasTarget' has a wrong offset!");

// ScriptStruct DuneSandbox.SuccessfulStaggerEvent
// 0x0000 (0x0030 - 0x0030)
struct FSuccessfulStaggerEvent final : public FGameEvent
{
};
static_assert(alignof(FSuccessfulStaggerEvent) == 0x000008, "Wrong alignment on FSuccessfulStaggerEvent");
static_assert(sizeof(FSuccessfulStaggerEvent) == 0x000030, "Wrong size on FSuccessfulStaggerEvent");

// ScriptStruct DuneSandbox.CanSuspendData
// 0x0028 (0x0028 - 0x0000)
struct FCanSuspendData final
{
public:
	struct FGameplayTagContainer                  FailureReason;                                     // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bCanSuspend;                                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCanSuspendData) == 0x000008, "Wrong alignment on FCanSuspendData");
static_assert(sizeof(FCanSuspendData) == 0x000028, "Wrong size on FCanSuspendData");
static_assert(offsetof(FCanSuspendData, FailureReason) == 0x000000, "Member 'FCanSuspendData::FailureReason' has a wrong offset!");
static_assert(offsetof(FCanSuspendData, bCanSuspend) == 0x000020, "Member 'FCanSuspendData::bCanSuspend' has a wrong offset!");

// ScriptStruct DuneSandbox.WidgetSwitcherSlotPropertiesNew
// 0x0014 (0x0014 - 0x0000)
struct FWidgetSwitcherSlotPropertiesNew final
{
public:
	struct FMargin                                Padding;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetSwitcherSlotPropertiesNew) == 0x000004, "Wrong alignment on FWidgetSwitcherSlotPropertiesNew");
static_assert(sizeof(FWidgetSwitcherSlotPropertiesNew) == 0x000014, "Wrong size on FWidgetSwitcherSlotPropertiesNew");
static_assert(offsetof(FWidgetSwitcherSlotPropertiesNew, Padding) == 0x000000, "Member 'FWidgetSwitcherSlotPropertiesNew::Padding' has a wrong offset!");
static_assert(offsetof(FWidgetSwitcherSlotPropertiesNew, HorizontalAlignment) == 0x000010, "Member 'FWidgetSwitcherSlotPropertiesNew::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FWidgetSwitcherSlotPropertiesNew, VerticalAlignment) == 0x000011, "Member 'FWidgetSwitcherSlotPropertiesNew::VerticalAlignment' has a wrong offset!");

// ScriptStruct DuneSandbox.TabbedMenuTabEntry
// 0x0108 (0x0108 - 0x0000)
struct FTabbedMenuTabEntry final
{
public:
	class FName                                   m_TabId;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_DisplayName;                                     // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_ContentWidget;                                   // 0x0020(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ShouldContentUse16By9;                           // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputActionHintData>           m_InputHintsData;                                  // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FWidgetSwitcherSlotPropertiesNew       m_SlotProperties;                                  // 0x0068(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTabEntryVisibilityConditions          m_VisibilityConditions;                            // 0x0080(0x0040)(Edit, NativeAccessSpecifierPublic)
	struct FTabEntryPlayerMenu                    m_PlayerMenuData;                                  // 0x00C0(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTabbedMenuTabEntry) == 0x000008, "Wrong alignment on FTabbedMenuTabEntry");
static_assert(sizeof(FTabbedMenuTabEntry) == 0x000108, "Wrong size on FTabbedMenuTabEntry");
static_assert(offsetof(FTabbedMenuTabEntry, m_TabId) == 0x000000, "Member 'FTabbedMenuTabEntry::m_TabId' has a wrong offset!");
static_assert(offsetof(FTabbedMenuTabEntry, m_DisplayName) == 0x000008, "Member 'FTabbedMenuTabEntry::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FTabbedMenuTabEntry, m_ContentWidget) == 0x000020, "Member 'FTabbedMenuTabEntry::m_ContentWidget' has a wrong offset!");
static_assert(offsetof(FTabbedMenuTabEntry, m_ShouldContentUse16By9) == 0x000050, "Member 'FTabbedMenuTabEntry::m_ShouldContentUse16By9' has a wrong offset!");
static_assert(offsetof(FTabbedMenuTabEntry, m_InputHintsData) == 0x000058, "Member 'FTabbedMenuTabEntry::m_InputHintsData' has a wrong offset!");
static_assert(offsetof(FTabbedMenuTabEntry, m_SlotProperties) == 0x000068, "Member 'FTabbedMenuTabEntry::m_SlotProperties' has a wrong offset!");
static_assert(offsetof(FTabbedMenuTabEntry, m_VisibilityConditions) == 0x000080, "Member 'FTabbedMenuTabEntry::m_VisibilityConditions' has a wrong offset!");
static_assert(offsetof(FTabbedMenuTabEntry, m_PlayerMenuData) == 0x0000C0, "Member 'FTabbedMenuTabEntry::m_PlayerMenuData' has a wrong offset!");

// ScriptStruct DuneSandbox.TechKnowledgeEntry
// 0x000C (0x0018 - 0x000C)
struct FTechKnowledgeEntry final : public FFastArraySerializerItem
{
public:
	class FName                                   ItemKey;                                           // 0x000C(0x0008)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnlocked;                                         // 0x0014(0x0001)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNewEntry;                                       // 0x0015(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTechKnowledgeEntry) == 0x000004, "Wrong alignment on FTechKnowledgeEntry");
static_assert(sizeof(FTechKnowledgeEntry) == 0x000018, "Wrong size on FTechKnowledgeEntry");
static_assert(offsetof(FTechKnowledgeEntry, ItemKey) == 0x00000C, "Member 'FTechKnowledgeEntry::ItemKey' has a wrong offset!");
static_assert(offsetof(FTechKnowledgeEntry, bUnlocked) == 0x000014, "Member 'FTechKnowledgeEntry::bUnlocked' has a wrong offset!");
static_assert(offsetof(FTechKnowledgeEntry, bIsNewEntry) == 0x000015, "Member 'FTechKnowledgeEntry::bIsNewEntry' has a wrong offset!");

// ScriptStruct DuneSandbox.LastTechKnowledgeChanged
// 0x001C (0x001C - 0x0000)
struct FLastTechKnowledgeChanged final
{
public:
	struct FTechKnowledgeEntry                    KnowledgeChanged;                                  // 0x0000(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUnlocked;                                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnowledgeInfoSource                          KnowledgeInfoSource;                               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLastTechKnowledgeChanged) == 0x000004, "Wrong alignment on FLastTechKnowledgeChanged");
static_assert(sizeof(FLastTechKnowledgeChanged) == 0x00001C, "Wrong size on FLastTechKnowledgeChanged");
static_assert(offsetof(FLastTechKnowledgeChanged, KnowledgeChanged) == 0x000000, "Member 'FLastTechKnowledgeChanged::KnowledgeChanged' has a wrong offset!");
static_assert(offsetof(FLastTechKnowledgeChanged, bUnlocked) == 0x000018, "Member 'FLastTechKnowledgeChanged::bUnlocked' has a wrong offset!");
static_assert(offsetof(FLastTechKnowledgeChanged, KnowledgeInfoSource) == 0x000019, "Member 'FLastTechKnowledgeChanged::KnowledgeInfoSource' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillPerkSetterComponent
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSkillPerkSetterComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DesiredPerkTag;                                    // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TargetPerkTag;                                     // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetSlot;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPerkSetterOp                                 Op;                                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillPerkSetterComponent) == 0x000008, "Wrong alignment on FSkillPerkSetterComponent");
static_assert(sizeof(FSkillPerkSetterComponent) == 0x000020, "Wrong size on FSkillPerkSetterComponent");
static_assert(offsetof(FSkillPerkSetterComponent, DesiredPerkTag) == 0x000008, "Member 'FSkillPerkSetterComponent::DesiredPerkTag' has a wrong offset!");
static_assert(offsetof(FSkillPerkSetterComponent, TargetPerkTag) == 0x000010, "Member 'FSkillPerkSetterComponent::TargetPerkTag' has a wrong offset!");
static_assert(offsetof(FSkillPerkSetterComponent, TargetSlot) == 0x000018, "Member 'FSkillPerkSetterComponent::TargetSlot' has a wrong offset!");
static_assert(offsetof(FSkillPerkSetterComponent, Op) == 0x000019, "Member 'FSkillPerkSetterComponent::Op' has a wrong offset!");

// ScriptStruct DuneSandbox.TechTreeRecipeRowData
// 0x0050 (0x0050 - 0x0000)
struct FTechTreeRecipeRowData final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         OwnedAmount;                                       // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredAmount;                                    // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTechTreeRecipeRowData) == 0x000008, "Wrong alignment on FTechTreeRecipeRowData");
static_assert(sizeof(FTechTreeRecipeRowData) == 0x000050, "Wrong size on FTechTreeRecipeRowData");
static_assert(offsetof(FTechTreeRecipeRowData, Icon) == 0x000000, "Member 'FTechTreeRecipeRowData::Icon' has a wrong offset!");
static_assert(offsetof(FTechTreeRecipeRowData, Name) == 0x000030, "Member 'FTechTreeRecipeRowData::Name' has a wrong offset!");
static_assert(offsetof(FTechTreeRecipeRowData, OwnedAmount) == 0x000048, "Member 'FTechTreeRecipeRowData::OwnedAmount' has a wrong offset!");
static_assert(offsetof(FTechTreeRecipeRowData, RequiredAmount) == 0x00004C, "Member 'FTechTreeRecipeRowData::RequiredAmount' has a wrong offset!");

// ScriptStruct DuneSandbox.TemporaryLootSpawnerComponent
// 0x0210 (0x0210 - 0x0000)
struct alignas(0x10) FTemporaryLootSpawnerComponent final
{
public:
	ETemporaryLootSpawnerSettingsSource           SettingsSource;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ForbiddenTags;                                     // 0x0048(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideLootContainerType;                      // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FELootContainerType                    LootContainerType;                                 // 0x006C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideLootTables;                             // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              LootTable;                                         // 0x0078(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LootWeightedTable;                                 // 0x00A8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            ContainedWater;                                    // 0x00D8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideRespawnTime;                            // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            RespawnTimeInSeconds;                              // 0x00EC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLifespanAfterInteractionIfShared;         // 0x00FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            LifespanAfterInteractionInSecOverrideIfShared;     // 0x0100(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLifespanAfterInteractionIfInstanced;      // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            LifespanAfterInteractionInSecOverrideIfInstanced;  // 0x0114(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsPerPlayerLootForced;                          // 0x0124(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideInteractionArea;                        // 0x0125(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_126[0xDA];                                     // 0x0126(0x00DA)(Fixing Size After Last Property [ Dumper-7 ])
	EActorLightingChannelOption                   m_UseLightingChannel1;                             // 0x0200(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0xF];                                      // 0x0201(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTemporaryLootSpawnerComponent) == 0x000010, "Wrong alignment on FTemporaryLootSpawnerComponent");
static_assert(sizeof(FTemporaryLootSpawnerComponent) == 0x000210, "Wrong size on FTemporaryLootSpawnerComponent");
static_assert(offsetof(FTemporaryLootSpawnerComponent, SettingsSource) == 0x000000, "Member 'FTemporaryLootSpawnerComponent::SettingsSource' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, RequiredTags) == 0x000008, "Member 'FTemporaryLootSpawnerComponent::RequiredTags' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, ForbiddenTags) == 0x000048, "Member 'FTemporaryLootSpawnerComponent::ForbiddenTags' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, m_bOverrideLootContainerType) == 0x000068, "Member 'FTemporaryLootSpawnerComponent::m_bOverrideLootContainerType' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, LootContainerType) == 0x00006C, "Member 'FTemporaryLootSpawnerComponent::LootContainerType' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, m_bOverrideLootTables) == 0x000074, "Member 'FTemporaryLootSpawnerComponent::m_bOverrideLootTables' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, LootTable) == 0x000078, "Member 'FTemporaryLootSpawnerComponent::LootTable' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, LootWeightedTable) == 0x0000A8, "Member 'FTemporaryLootSpawnerComponent::LootWeightedTable' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, ContainedWater) == 0x0000D8, "Member 'FTemporaryLootSpawnerComponent::ContainedWater' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, m_bOverrideRespawnTime) == 0x0000E8, "Member 'FTemporaryLootSpawnerComponent::m_bOverrideRespawnTime' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, RespawnTimeInSeconds) == 0x0000EC, "Member 'FTemporaryLootSpawnerComponent::RespawnTimeInSeconds' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, bOverrideLifespanAfterInteractionIfShared) == 0x0000FC, "Member 'FTemporaryLootSpawnerComponent::bOverrideLifespanAfterInteractionIfShared' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, LifespanAfterInteractionInSecOverrideIfShared) == 0x000100, "Member 'FTemporaryLootSpawnerComponent::LifespanAfterInteractionInSecOverrideIfShared' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, bOverrideLifespanAfterInteractionIfInstanced) == 0x000110, "Member 'FTemporaryLootSpawnerComponent::bOverrideLifespanAfterInteractionIfInstanced' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, LifespanAfterInteractionInSecOverrideIfInstanced) == 0x000114, "Member 'FTemporaryLootSpawnerComponent::LifespanAfterInteractionInSecOverrideIfInstanced' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, m_bIsPerPlayerLootForced) == 0x000124, "Member 'FTemporaryLootSpawnerComponent::m_bIsPerPlayerLootForced' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, m_bOverrideInteractionArea) == 0x000125, "Member 'FTemporaryLootSpawnerComponent::m_bOverrideInteractionArea' has a wrong offset!");
static_assert(offsetof(FTemporaryLootSpawnerComponent, m_UseLightingChannel1) == 0x000200, "Member 'FTemporaryLootSpawnerComponent::m_UseLightingChannel1' has a wrong offset!");

// ScriptStruct DuneSandbox.ThreatScoreComponent
// 0x0028 (0x0028 - 0x0000)
struct FThreatScoreComponent final
{
public:
	class ASplineSafezone*                        m_Safezone;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_ThreatScore;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_UncappedThreatScore;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ESandowmTargetPriority                        m_SandowmTargetPriority;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatScoreComponent) == 0x000008, "Wrong alignment on FThreatScoreComponent");
static_assert(sizeof(FThreatScoreComponent) == 0x000028, "Wrong size on FThreatScoreComponent");
static_assert(offsetof(FThreatScoreComponent, m_Safezone) == 0x000000, "Member 'FThreatScoreComponent::m_Safezone' has a wrong offset!");
static_assert(offsetof(FThreatScoreComponent, m_ThreatScore) == 0x000010, "Member 'FThreatScoreComponent::m_ThreatScore' has a wrong offset!");
static_assert(offsetof(FThreatScoreComponent, m_UncappedThreatScore) == 0x000014, "Member 'FThreatScoreComponent::m_UncappedThreatScore' has a wrong offset!");
static_assert(offsetof(FThreatScoreComponent, m_SandowmTargetPriority) == 0x000020, "Member 'FThreatScoreComponent::m_SandowmTargetPriority' has a wrong offset!");

// ScriptStruct DuneSandbox.ThreatScoreSettings
// 0x0318 (0x0318 - 0x0000)
struct alignas(0x08) FThreatScoreSettings final
{
public:
	uint8                                         Pad_0[0x318];                                      // 0x0000(0x0318)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatScoreSettings) == 0x000008, "Wrong alignment on FThreatScoreSettings");
static_assert(sizeof(FThreatScoreSettings) == 0x000318, "Wrong size on FThreatScoreSettings");

// ScriptStruct DuneSandbox.TierReferenceItemCostsTableRow
// 0x0058 (0x0068 - 0x0010)
struct FTierReferenceItemCostsTableRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           TierTag;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FEItemTemplateID, int32>          ItemCosts;                                         // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTierReferenceItemCostsTableRow) == 0x000008, "Wrong alignment on FTierReferenceItemCostsTableRow");
static_assert(sizeof(FTierReferenceItemCostsTableRow) == 0x000068, "Wrong size on FTierReferenceItemCostsTableRow");
static_assert(offsetof(FTierReferenceItemCostsTableRow, TierTag) == 0x000010, "Member 'FTierReferenceItemCostsTableRow::TierTag' has a wrong offset!");
static_assert(offsetof(FTierReferenceItemCostsTableRow, ItemCosts) == 0x000018, "Member 'FTierReferenceItemCostsTableRow::ItemCosts' has a wrong offset!");

// ScriptStruct DuneSandbox.DailyGlobalBiome
// 0x0038 (0x0038 - 0x0000)
struct FDailyGlobalBiome final
{
public:
	TSoftObjectPtr<class ULevelSequence>          m_BiomeSequence;                                   // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_WeightPercentage;                                // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDailyGlobalBiome) == 0x000008, "Wrong alignment on FDailyGlobalBiome");
static_assert(sizeof(FDailyGlobalBiome) == 0x000038, "Wrong size on FDailyGlobalBiome");
static_assert(offsetof(FDailyGlobalBiome, m_BiomeSequence) == 0x000000, "Member 'FDailyGlobalBiome::m_BiomeSequence' has a wrong offset!");
static_assert(offsetof(FDailyGlobalBiome, m_WeightPercentage) == 0x000030, "Member 'FDailyGlobalBiome::m_WeightPercentage' has a wrong offset!");

// ScriptStruct DuneSandbox.TimeSpeedScale
// 0x000C (0x000C - 0x0000)
struct FTimeSpeedScale final
{
public:
	float                                         m_TimeStart;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TimeEnd;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TimeScale;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeSpeedScale) == 0x000004, "Wrong alignment on FTimeSpeedScale");
static_assert(sizeof(FTimeSpeedScale) == 0x00000C, "Wrong size on FTimeSpeedScale");
static_assert(offsetof(FTimeSpeedScale, m_TimeStart) == 0x000000, "Member 'FTimeSpeedScale::m_TimeStart' has a wrong offset!");
static_assert(offsetof(FTimeSpeedScale, m_TimeEnd) == 0x000004, "Member 'FTimeSpeedScale::m_TimeEnd' has a wrong offset!");
static_assert(offsetof(FTimeSpeedScale, m_TimeScale) == 0x000008, "Member 'FTimeSpeedScale::m_TimeScale' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemBuildablesComponent
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FTotemBuildablesComponent final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTotemBuildablesComponent) == 0x000008, "Wrong alignment on FTotemBuildablesComponent");
static_assert(sizeof(FTotemBuildablesComponent) == 0x0000A0, "Wrong size on FTotemBuildablesComponent");

// ScriptStruct DuneSandbox.TotemCircuitPowerPendingRecalculation
// 0x0001 (0x0001 - 0x0000)
struct FTotemCircuitPowerPendingRecalculation final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTotemCircuitPowerPendingRecalculation) == 0x000001, "Wrong alignment on FTotemCircuitPowerPendingRecalculation");
static_assert(sizeof(FTotemCircuitPowerPendingRecalculation) == 0x000001, "Wrong size on FTotemCircuitPowerPendingRecalculation");

// ScriptStruct DuneSandbox.TotemComponent
// 0x0004 (0x0004 - 0x0000)
struct FTotemComponent final
{
public:
	int32                                         m_VerticalRangeLevel;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTotemComponent) == 0x000004, "Wrong alignment on FTotemComponent");
static_assert(sizeof(FTotemComponent) == 0x000004, "Wrong size on FTotemComponent");
static_assert(offsetof(FTotemComponent, m_VerticalRangeLevel) == 0x000000, "Member 'FTotemComponent::m_VerticalRangeLevel' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemLandclaimComponent
// 0x00D8 (0x00D8 - 0x0000)
struct FTotemLandclaimComponent final
{
public:
	struct FVector                                m_GlobalCoordinateLocation;                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x18];                                      // 0x0018(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_YawRotation;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BoundingCircleRadius;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FEntityId>                        m_PendingStakingUnitsEntityIds;                    // 0x0038(0x0050)(NativeAccessSpecifierPublic)
	TSet<struct FEntityId>                        m_PendingVerticalStakingUnitsEntityIds;            // 0x0088(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTotemLandclaimComponent) == 0x000008, "Wrong alignment on FTotemLandclaimComponent");
static_assert(sizeof(FTotemLandclaimComponent) == 0x0000D8, "Wrong size on FTotemLandclaimComponent");
static_assert(offsetof(FTotemLandclaimComponent, m_GlobalCoordinateLocation) == 0x000000, "Member 'FTotemLandclaimComponent::m_GlobalCoordinateLocation' has a wrong offset!");
static_assert(offsetof(FTotemLandclaimComponent, m_YawRotation) == 0x000030, "Member 'FTotemLandclaimComponent::m_YawRotation' has a wrong offset!");
static_assert(offsetof(FTotemLandclaimComponent, m_BoundingCircleRadius) == 0x000034, "Member 'FTotemLandclaimComponent::m_BoundingCircleRadius' has a wrong offset!");
static_assert(offsetof(FTotemLandclaimComponent, m_PendingStakingUnitsEntityIds) == 0x000038, "Member 'FTotemLandclaimComponent::m_PendingStakingUnitsEntityIds' has a wrong offset!");
static_assert(offsetof(FTotemLandclaimComponent, m_PendingVerticalStakingUnitsEntityIds) == 0x000088, "Member 'FTotemLandclaimComponent::m_PendingVerticalStakingUnitsEntityIds' has a wrong offset!");

// ScriptStruct DuneSandbox.TraversableSurfaceSettings
// 0x0028 (0x0028 - 0x0000)
struct FTraversableSurfaceSettings final
{
public:
	ECollisionChannel                             BlockingChannel;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     IgnoredChannels;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           DecorativeActors;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTraversableSurfaceSettings) == 0x000008, "Wrong alignment on FTraversableSurfaceSettings");
static_assert(sizeof(FTraversableSurfaceSettings) == 0x000028, "Wrong size on FTraversableSurfaceSettings");
static_assert(offsetof(FTraversableSurfaceSettings, BlockingChannel) == 0x000000, "Member 'FTraversableSurfaceSettings::BlockingChannel' has a wrong offset!");
static_assert(offsetof(FTraversableSurfaceSettings, IgnoredChannels) == 0x000008, "Member 'FTraversableSurfaceSettings::IgnoredChannels' has a wrong offset!");
static_assert(offsetof(FTraversableSurfaceSettings, DecorativeActors) == 0x000018, "Member 'FTraversableSurfaceSettings::DecorativeActors' has a wrong offset!");

// ScriptStruct DuneSandbox.TutorialRowBase
// 0x0080 (0x0090 - 0x0010)
struct FTutorialRowBase final : public FTableRowBase
{
public:
	bool                                          bUseSimpleVersion;                                 // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayProgress;                                  // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ProgressText;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EGameEventType                                ProgressEvent;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProgressCompletionCount;                           // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialVisualStyle                          VisualStyle;                                       // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0040(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   BodyText;                                          // 0x0058(0x0018)(Edit, NativeAccessSpecifierPublic)
	class UTexture2D*                             Image;                                             // 0x0070(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFeatureRedirectInputHintData>  InputHints;                                        // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DisplayDuration;                                   // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanDismiss;                                       // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTutorialRowBase) == 0x000008, "Wrong alignment on FTutorialRowBase");
static_assert(sizeof(FTutorialRowBase) == 0x000090, "Wrong size on FTutorialRowBase");
static_assert(offsetof(FTutorialRowBase, bUseSimpleVersion) == 0x000010, "Member 'FTutorialRowBase::bUseSimpleVersion' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, bDisplayProgress) == 0x000011, "Member 'FTutorialRowBase::bDisplayProgress' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, ProgressText) == 0x000018, "Member 'FTutorialRowBase::ProgressText' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, ProgressEvent) == 0x000030, "Member 'FTutorialRowBase::ProgressEvent' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, ProgressCompletionCount) == 0x000034, "Member 'FTutorialRowBase::ProgressCompletionCount' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, VisualStyle) == 0x000038, "Member 'FTutorialRowBase::VisualStyle' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, TitleText) == 0x000040, "Member 'FTutorialRowBase::TitleText' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, BodyText) == 0x000058, "Member 'FTutorialRowBase::BodyText' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, Image) == 0x000070, "Member 'FTutorialRowBase::Image' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, InputHints) == 0x000078, "Member 'FTutorialRowBase::InputHints' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, DisplayDuration) == 0x000088, "Member 'FTutorialRowBase::DisplayDuration' has a wrong offset!");
static_assert(offsetof(FTutorialRowBase, bCanDismiss) == 0x00008C, "Member 'FTutorialRowBase::bCanDismiss' has a wrong offset!");

// ScriptStruct DuneSandbox.UIMapTerrainDataRow
// 0x0090 (0x00A0 - 0x0010)
struct FUIMapTerrainDataRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UStaticMesh>             Mesh;                                              // 0x0010(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Offset;                                            // 0x0040(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIMapTerrainDataRow) == 0x000010, "Wrong alignment on FUIMapTerrainDataRow");
static_assert(sizeof(FUIMapTerrainDataRow) == 0x0000A0, "Wrong size on FUIMapTerrainDataRow");
static_assert(offsetof(FUIMapTerrainDataRow, Mesh) == 0x000010, "Member 'FUIMapTerrainDataRow::Mesh' has a wrong offset!");
static_assert(offsetof(FUIMapTerrainDataRow, Offset) == 0x000040, "Member 'FUIMapTerrainDataRow::Offset' has a wrong offset!");

// ScriptStruct DuneSandbox.UniqueVersionId
// 0x0010 (0x0010 - 0x0000)
struct FUniqueVersionId final
{
public:
	struct FUniqueID                              m_Uid;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         m_Version;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUniqueVersionId) == 0x000008, "Wrong alignment on FUniqueVersionId");
static_assert(sizeof(FUniqueVersionId) == 0x000010, "Wrong size on FUniqueVersionId");
static_assert(offsetof(FUniqueVersionId, m_Uid) == 0x000000, "Member 'FUniqueVersionId::m_Uid' has a wrong offset!");
static_assert(offsetof(FUniqueVersionId, m_Version) == 0x000008, "Member 'FUniqueVersionId::m_Version' has a wrong offset!");

// ScriptStruct DuneSandbox.UsageLimitationItemTableRow
// 0x0008 (0x0018 - 0x0010)
struct FUsageLimitationItemTableRow final : public FTableRowBase
{
public:
	struct FUsageLimitationItemStats              UsageLimitationsStats;                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUsageLimitationItemTableRow) == 0x000008, "Wrong alignment on FUsageLimitationItemTableRow");
static_assert(sizeof(FUsageLimitationItemTableRow) == 0x000018, "Wrong size on FUsageLimitationItemTableRow");
static_assert(offsetof(FUsageLimitationItemTableRow, UsageLimitationsStats) == 0x000010, "Member 'FUsageLimitationItemTableRow::UsageLimitationsStats' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleAbilityItemTableRow
// 0x0048 (0x0058 - 0x0010)
struct FVehicleAbilityItemTableRow final : public FTableRowBase
{
public:
	struct FVehicleAbilityStats                   AbilityStats;                                      // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCooldownStats                         CooldownStats;                                     // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleAbilityItemTableRow) == 0x000008, "Wrong alignment on FVehicleAbilityItemTableRow");
static_assert(sizeof(FVehicleAbilityItemTableRow) == 0x000058, "Wrong size on FVehicleAbilityItemTableRow");
static_assert(offsetof(FVehicleAbilityItemTableRow, AbilityStats) == 0x000010, "Member 'FVehicleAbilityItemTableRow::AbilityStats' has a wrong offset!");
static_assert(offsetof(FVehicleAbilityItemTableRow, CooldownStats) == 0x000040, "Member 'FVehicleAbilityItemTableRow::CooldownStats' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneEditorVisLine
// 0x0038 (0x0038 - 0x0000)
struct FDuneEditorVisLine final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneEditorVisLine) == 0x000008, "Wrong alignment on FDuneEditorVisLine");
static_assert(sizeof(FDuneEditorVisLine) == 0x000038, "Wrong size on FDuneEditorVisLine");
static_assert(offsetof(FDuneEditorVisLine, Start) == 0x000000, "Member 'FDuneEditorVisLine::Start' has a wrong offset!");
static_assert(offsetof(FDuneEditorVisLine, End) == 0x000018, "Member 'FDuneEditorVisLine::End' has a wrong offset!");
static_assert(offsetof(FDuneEditorVisLine, Color) == 0x000030, "Member 'FDuneEditorVisLine::Color' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleBoostComponent
// 0x0048 (0x0048 - 0x0000)
struct FVehicleBoostComponent final
{
public:
	struct FVehicleBoostStaticData                m_StaticData;                                      // 0x0000(0x0040)(NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleBoostComponent) == 0x000008, "Wrong alignment on FVehicleBoostComponent");
static_assert(sizeof(FVehicleBoostComponent) == 0x000048, "Wrong size on FVehicleBoostComponent");
static_assert(offsetof(FVehicleBoostComponent, m_StaticData) == 0x000000, "Member 'FVehicleBoostComponent::m_StaticData' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleClientInputComponent
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FVehicleClientInputComponent final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleClientInputComponent) == 0x000008, "Wrong alignment on FVehicleClientInputComponent");
static_assert(sizeof(FVehicleClientInputComponent) == 0x000020, "Wrong size on FVehicleClientInputComponent");

// ScriptStruct DuneSandbox.VehicleModuleInfoCardsTableRow
// 0x0010 (0x0020 - 0x0010)
struct FVehicleModuleInfoCardsTableRow final : public FTableRowBase
{
public:
	int32                                         m_NumUtilitySlots;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NumTurretSlots;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SteeringSpeedCurveLookup;                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleAccelerationType                      m_VehicleAccelerationType;                         // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleWingsType                             m_WingsType;                                       // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleModuleInfoCardsTableRow) == 0x000008, "Wrong alignment on FVehicleModuleInfoCardsTableRow");
static_assert(sizeof(FVehicleModuleInfoCardsTableRow) == 0x000020, "Wrong size on FVehicleModuleInfoCardsTableRow");
static_assert(offsetof(FVehicleModuleInfoCardsTableRow, m_NumUtilitySlots) == 0x000010, "Member 'FVehicleModuleInfoCardsTableRow::m_NumUtilitySlots' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfoCardsTableRow, m_NumTurretSlots) == 0x000014, "Member 'FVehicleModuleInfoCardsTableRow::m_NumTurretSlots' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfoCardsTableRow, m_SteeringSpeedCurveLookup) == 0x000018, "Member 'FVehicleModuleInfoCardsTableRow::m_SteeringSpeedCurveLookup' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfoCardsTableRow, m_VehicleAccelerationType) == 0x00001C, "Member 'FVehicleModuleInfoCardsTableRow::m_VehicleAccelerationType' has a wrong offset!");
static_assert(offsetof(FVehicleModuleInfoCardsTableRow, m_WingsType) == 0x00001D, "Member 'FVehicleModuleInfoCardsTableRow::m_WingsType' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleSubTypesTableRow
// 0x0018 (0x0028 - 0x0010)
struct FVehicleModuleSubTypesTableRow final : public FTableRowBase
{
public:
	class FText                                   m_DisplayName;                                     // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleSubTypesTableRow) == 0x000008, "Wrong alignment on FVehicleModuleSubTypesTableRow");
static_assert(sizeof(FVehicleModuleSubTypesTableRow) == 0x000028, "Wrong size on FVehicleModuleSubTypesTableRow");
static_assert(offsetof(FVehicleModuleSubTypesTableRow, m_DisplayName) == 0x000010, "Member 'FVehicleModuleSubTypesTableRow::m_DisplayName' has a wrong offset!");

// ScriptStruct DuneSandbox.VehiclePowerComponent_BlueprintWrapper
// 0x0500 (0x0500 - 0x0000)
struct FVehiclePowerComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x360];                                      // 0x0000(0x0360)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehiclePowerStats                     VehiclePowerStats;                                 // 0x0360(0x01A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehiclePowerComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FVehiclePowerComponent_BlueprintWrapper");
static_assert(sizeof(FVehiclePowerComponent_BlueprintWrapper) == 0x000500, "Wrong size on FVehiclePowerComponent_BlueprintWrapper");
static_assert(offsetof(FVehiclePowerComponent_BlueprintWrapper, VehiclePowerStats) == 0x000360, "Member 'FVehiclePowerComponent_BlueprintWrapper::VehiclePowerStats' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleProtectionComponent
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FVehicleProtectionComponent final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleProtectionComponent) == 0x000008, "Wrong alignment on FVehicleProtectionComponent");
static_assert(sizeof(FVehicleProtectionComponent) == 0x000010, "Wrong size on FVehicleProtectionComponent");

// ScriptStruct DuneSandbox.VehicleServerMetricsComponent
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FVehicleServerMetricsComponent final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleServerMetricsComponent) == 0x000008, "Wrong alignment on FVehicleServerMetricsComponent");
static_assert(sizeof(FVehicleServerMetricsComponent) == 0x000038, "Wrong size on FVehicleServerMetricsComponent");

// ScriptStruct DuneSandbox.VehicleStatBarColors
// 0x0064 (0x0064 - 0x0000)
struct FVehicleStatBarColors final
{
public:
	struct FLinearColor                           m_StartColor;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_EndColor;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_BackgroundColor;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_BorderColor;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShouldChangeLineColors;                         // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           m_LineFillColor;                                   // 0x0044(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_LineBackgroundColor;                             // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleStatBarColors) == 0x000004, "Wrong alignment on FVehicleStatBarColors");
static_assert(sizeof(FVehicleStatBarColors) == 0x000064, "Wrong size on FVehicleStatBarColors");
static_assert(offsetof(FVehicleStatBarColors, m_StartColor) == 0x000000, "Member 'FVehicleStatBarColors::m_StartColor' has a wrong offset!");
static_assert(offsetof(FVehicleStatBarColors, m_EndColor) == 0x000010, "Member 'FVehicleStatBarColors::m_EndColor' has a wrong offset!");
static_assert(offsetof(FVehicleStatBarColors, m_BackgroundColor) == 0x000020, "Member 'FVehicleStatBarColors::m_BackgroundColor' has a wrong offset!");
static_assert(offsetof(FVehicleStatBarColors, m_BorderColor) == 0x000030, "Member 'FVehicleStatBarColors::m_BorderColor' has a wrong offset!");
static_assert(offsetof(FVehicleStatBarColors, m_bShouldChangeLineColors) == 0x000040, "Member 'FVehicleStatBarColors::m_bShouldChangeLineColors' has a wrong offset!");
static_assert(offsetof(FVehicleStatBarColors, m_LineFillColor) == 0x000044, "Member 'FVehicleStatBarColors::m_LineFillColor' has a wrong offset!");
static_assert(offsetof(FVehicleStatBarColors, m_LineBackgroundColor) == 0x000054, "Member 'FVehicleStatBarColors::m_LineBackgroundColor' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleWeaponModuleTableRow
// 0x00B0 (0x00C0 - 0x0010)
struct FVehicleWeaponModuleTableRow final : public FTableRowBase
{
public:
	struct FVehicleWeaponModuleStats              m_WeaponModuleStats;                               // 0x0010(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleWeaponModuleTableRow) == 0x000008, "Wrong alignment on FVehicleWeaponModuleTableRow");
static_assert(sizeof(FVehicleWeaponModuleTableRow) == 0x0000C0, "Wrong size on FVehicleWeaponModuleTableRow");
static_assert(offsetof(FVehicleWeaponModuleTableRow, m_WeaponModuleStats) == 0x000010, "Member 'FVehicleWeaponModuleTableRow::m_WeaponModuleStats' has a wrong offset!");

// ScriptStruct DuneSandbox.VendorComponent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FVendorComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVendorComponent) == 0x000004, "Wrong alignment on FVendorComponent");
static_assert(sizeof(FVendorComponent) == 0x000008, "Wrong size on FVendorComponent");

// ScriptStruct DuneSandbox.VendorStockData
// 0x0058 (0x0058 - 0x0000)
struct FVendorStockData final
{
public:
	TMap<struct FEItemTemplateID, uint32>         PurchasedLimitedItemAmounts;                       // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	int64                                         LastInteractedTimestamp;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendorStockData) == 0x000008, "Wrong alignment on FVendorStockData");
static_assert(sizeof(FVendorStockData) == 0x000058, "Wrong size on FVendorStockData");
static_assert(offsetof(FVendorStockData, PurchasedLimitedItemAmounts) == 0x000000, "Member 'FVendorStockData::PurchasedLimitedItemAmounts' has a wrong offset!");
static_assert(offsetof(FVendorStockData, LastInteractedTimestamp) == 0x000050, "Member 'FVendorStockData::LastInteractedTimestamp' has a wrong offset!");

// ScriptStruct DuneSandbox.VendorIndividualItemData
// 0x0008 (0x0008 - 0x0000)
struct FVendorIndividualItemData final
{
public:
	float                                         PercentToApplyOnBaseItemPrice;                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StockAmount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendorIndividualItemData) == 0x000004, "Wrong alignment on FVendorIndividualItemData");
static_assert(sizeof(FVendorIndividualItemData) == 0x000008, "Wrong size on FVendorIndividualItemData");
static_assert(offsetof(FVendorIndividualItemData, PercentToApplyOnBaseItemPrice) == 0x000000, "Member 'FVendorIndividualItemData::PercentToApplyOnBaseItemPrice' has a wrong offset!");
static_assert(offsetof(FVendorIndividualItemData, StockAmount) == 0x000004, "Member 'FVendorIndividualItemData::StockAmount' has a wrong offset!");

// ScriptStruct DuneSandbox.VendorTableRow
// 0x00D8 (0x00E8 - 0x0010)
struct FVendorTableRow final : public FTableRowBase
{
public:
	TArray<struct FVendorItemConfig>              ItemTagsThatPlayerCanBuy;                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVendorItemConfig>              ItemTagsThatPlayerCanSell;                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FEItemTemplateID, struct FVendorIndividualItemData> SpecificItemsThatPlayerCanBuy;   // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FEItemTemplateID, struct FVendorIndividualItemData> SpecificItemsThatPlayerCanSell;  // 0x0080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          m_bUseLandsraadCycle;                              // 0x00D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         m_CycleStartReferenceSeconds;                      // 0x00D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         m_CycleLengthSeconds;                              // 0x00E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVendorTableRow) == 0x000008, "Wrong alignment on FVendorTableRow");
static_assert(sizeof(FVendorTableRow) == 0x0000E8, "Wrong size on FVendorTableRow");
static_assert(offsetof(FVendorTableRow, ItemTagsThatPlayerCanBuy) == 0x000010, "Member 'FVendorTableRow::ItemTagsThatPlayerCanBuy' has a wrong offset!");
static_assert(offsetof(FVendorTableRow, ItemTagsThatPlayerCanSell) == 0x000020, "Member 'FVendorTableRow::ItemTagsThatPlayerCanSell' has a wrong offset!");
static_assert(offsetof(FVendorTableRow, SpecificItemsThatPlayerCanBuy) == 0x000030, "Member 'FVendorTableRow::SpecificItemsThatPlayerCanBuy' has a wrong offset!");
static_assert(offsetof(FVendorTableRow, SpecificItemsThatPlayerCanSell) == 0x000080, "Member 'FVendorTableRow::SpecificItemsThatPlayerCanSell' has a wrong offset!");
static_assert(offsetof(FVendorTableRow, m_bUseLandsraadCycle) == 0x0000D0, "Member 'FVendorTableRow::m_bUseLandsraadCycle' has a wrong offset!");
static_assert(offsetof(FVendorTableRow, m_CycleStartReferenceSeconds) == 0x0000D8, "Member 'FVendorTableRow::m_CycleStartReferenceSeconds' has a wrong offset!");
static_assert(offsetof(FVendorTableRow, m_CycleLengthSeconds) == 0x0000E0, "Member 'FVendorTableRow::m_CycleLengthSeconds' has a wrong offset!");

// ScriptStruct DuneSandbox.VoiceChatIndicatorEntryWithHideTimer
// 0x0010 (0x0010 - 0x0000)
struct FVoiceChatIndicatorEntryWithHideTimer final
{
public:
	class UVoiceChatTxIndicatorEntryWidget*       m_VoiceChatTxIndicatorEntryWidget;                 // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoiceChatIndicatorEntryWithHideTimer) == 0x000008, "Wrong alignment on FVoiceChatIndicatorEntryWithHideTimer");
static_assert(sizeof(FVoiceChatIndicatorEntryWithHideTimer) == 0x000010, "Wrong size on FVoiceChatIndicatorEntryWithHideTimer");
static_assert(offsetof(FVoiceChatIndicatorEntryWithHideTimer, m_VoiceChatTxIndicatorEntryWidget) == 0x000000, "Member 'FVoiceChatIndicatorEntryWithHideTimer::m_VoiceChatTxIndicatorEntryWidget' has a wrong offset!");

// ScriptStruct DuneSandbox.WaterCircuitElementComponent
// 0x0000 (0x0008 - 0x0008)
struct FWaterCircuitElementComponent final : public FCircuitElementBaseComponent
{
};
static_assert(alignof(FWaterCircuitElementComponent) == 0x000004, "Wrong alignment on FWaterCircuitElementComponent");
static_assert(sizeof(FWaterCircuitElementComponent) == 0x000008, "Wrong size on FWaterCircuitElementComponent");

// ScriptStruct DuneSandbox.WaterGeneratorComponent
// 0x0010 (0x0010 - 0x0000)
struct FWaterGeneratorComponent final
{
public:
	int64                                         m_LastWaterUpdateTimeStampUnixInSecs;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_WaterGenerationAmountPerUpdate;                  // 0x0008(0x0004)(ZeroConstructor, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaterGenerationRateInSecs;                       // 0x000C(0x0004)(ZeroConstructor, SubobjectReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterGeneratorComponent) == 0x000008, "Wrong alignment on FWaterGeneratorComponent");
static_assert(sizeof(FWaterGeneratorComponent) == 0x000010, "Wrong size on FWaterGeneratorComponent");
static_assert(offsetof(FWaterGeneratorComponent, m_LastWaterUpdateTimeStampUnixInSecs) == 0x000000, "Member 'FWaterGeneratorComponent::m_LastWaterUpdateTimeStampUnixInSecs' has a wrong offset!");
static_assert(offsetof(FWaterGeneratorComponent, m_WaterGenerationAmountPerUpdate) == 0x000008, "Member 'FWaterGeneratorComponent::m_WaterGenerationAmountPerUpdate' has a wrong offset!");
static_assert(offsetof(FWaterGeneratorComponent, m_WaterGenerationRateInSecs) == 0x00000C, "Member 'FWaterGeneratorComponent::m_WaterGenerationRateInSecs' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponVFXComponent
// 0x0030 (0x0030 - 0x0000)
struct FWeaponVFXComponent final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         m_bIsLastShotBeforeBreak : 1;                      // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         m_bIsFireStart : 1;                                // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ECollisionChannel                             m_TraceChannel;                                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  m_StartLocation;                                   // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWeaponVFXData>                 m_WeaponVFXData;                                   // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponVFXComponent) == 0x000008, "Wrong alignment on FWeaponVFXComponent");
static_assert(sizeof(FWeaponVFXComponent) == 0x000030, "Wrong size on FWeaponVFXComponent");
static_assert(offsetof(FWeaponVFXComponent, m_TraceChannel) == 0x000005, "Member 'FWeaponVFXComponent::m_TraceChannel' has a wrong offset!");
static_assert(offsetof(FWeaponVFXComponent, m_StartLocation) == 0x000008, "Member 'FWeaponVFXComponent::m_StartLocation' has a wrong offset!");
static_assert(offsetof(FWeaponVFXComponent, m_WeaponVFXData) == 0x000020, "Member 'FWeaponVFXComponent::m_WeaponVFXData' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponItemStats
// 0x0010 (0x0010 - 0x0000)
struct FWeaponItemStats final
{
public:
	TSubclassOf<class UObject>                    HandheldRef;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CurrentAmmo;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponItemStats) == 0x000008, "Wrong alignment on FWeaponItemStats");
static_assert(sizeof(FWeaponItemStats) == 0x000010, "Wrong size on FWeaponItemStats");
static_assert(offsetof(FWeaponItemStats, HandheldRef) == 0x000000, "Member 'FWeaponItemStats::HandheldRef' has a wrong offset!");
static_assert(offsetof(FWeaponItemStats, CurrentAmmo) == 0x000008, "Member 'FWeaponItemStats::CurrentAmmo' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponItemStatsComponent_BlueprintWrapper
// 0x0050 (0x0050 - 0x0000)
struct FWeaponItemStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponItemStats                       WeaponItemStats;                                   // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponItemStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FWeaponItemStatsComponent_BlueprintWrapper");
static_assert(sizeof(FWeaponItemStatsComponent_BlueprintWrapper) == 0x000050, "Wrong size on FWeaponItemStatsComponent_BlueprintWrapper");
static_assert(offsetof(FWeaponItemStatsComponent_BlueprintWrapper, WeaponItemStats) == 0x000040, "Member 'FWeaponItemStatsComponent_BlueprintWrapper::WeaponItemStats' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponItemTableRow
// 0x0050 (0x0060 - 0x0010)
struct FWeaponItemTableRow final : public FTableRowBase
{
public:
	struct FWeaponItemStats                       WeaponStats;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCustomizationStats                    CustomizationStats;                                // 0x0020(0x0014)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDeteriorationStats                    DeteriorationStats;                                // 0x0034(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponItemTableRow) == 0x000008, "Wrong alignment on FWeaponItemTableRow");
static_assert(sizeof(FWeaponItemTableRow) == 0x000060, "Wrong size on FWeaponItemTableRow");
static_assert(offsetof(FWeaponItemTableRow, WeaponStats) == 0x000010, "Member 'FWeaponItemTableRow::WeaponStats' has a wrong offset!");
static_assert(offsetof(FWeaponItemTableRow, CustomizationStats) == 0x000020, "Member 'FWeaponItemTableRow::CustomizationStats' has a wrong offset!");
static_assert(offsetof(FWeaponItemTableRow, DeteriorationStats) == 0x000034, "Member 'FWeaponItemTableRow::DeteriorationStats' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponModAudioDataRow
// 0x04E8 (0x04F8 - 0x0010)
struct FWeaponModAudioDataRow final : public FTableRowBase
{
public:
	bool                                          m_bLoopingFireAudio;                               // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventEquipped;                              // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventHolstered;                             // 0x0048(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventOnFire;                                // 0x0078(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventOnFireStop;                            // 0x00A8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventWeaponDryFire;                         // 0x00D8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventOnActivated;                           // 0x0108(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventReload;                                // 0x0138(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventReloadCancelled;                       // 0x0168(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventWeaponBreak;                           // 0x0198(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_CombatWeaponsAdsOn;                              // 0x01C8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_CombatWeaponsAdsOff;                             // 0x01F8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_CombatWeaponsBulletFlyby;                        // 0x0228(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventImpact;                                // 0x0258(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventImpactStop;                            // 0x0288(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventBeamHitShield;                         // 0x02B8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventBeamMisfire;                           // 0x02E8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventSpinupActive;                          // 0x0318(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_AudioEventSpinCancel;                            // 0x0348(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_CombatWeaponsTurretShoot;                        // 0x0378(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_CombatWeaponsTurretShotImpact;                   // 0x03A8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_CombatWeaponsTurretShotShieldImpact;             // 0x03D8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_CombatWeaponsTurretCharge;                       // 0x0408(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_CombatWeaponsTurretRotate;                       // 0x0438(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_PoweredChargeUp;                                 // 0x0468(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_PoweredChargeInterrupt;                          // 0x0498(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_PoweredChargeDone;                               // 0x04C8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponModAudioDataRow) == 0x000008, "Wrong alignment on FWeaponModAudioDataRow");
static_assert(sizeof(FWeaponModAudioDataRow) == 0x0004F8, "Wrong size on FWeaponModAudioDataRow");
static_assert(offsetof(FWeaponModAudioDataRow, m_bLoopingFireAudio) == 0x000010, "Member 'FWeaponModAudioDataRow::m_bLoopingFireAudio' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventEquipped) == 0x000018, "Member 'FWeaponModAudioDataRow::m_AudioEventEquipped' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventHolstered) == 0x000048, "Member 'FWeaponModAudioDataRow::m_AudioEventHolstered' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventOnFire) == 0x000078, "Member 'FWeaponModAudioDataRow::m_AudioEventOnFire' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventOnFireStop) == 0x0000A8, "Member 'FWeaponModAudioDataRow::m_AudioEventOnFireStop' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventWeaponDryFire) == 0x0000D8, "Member 'FWeaponModAudioDataRow::m_AudioEventWeaponDryFire' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventOnActivated) == 0x000108, "Member 'FWeaponModAudioDataRow::m_AudioEventOnActivated' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventReload) == 0x000138, "Member 'FWeaponModAudioDataRow::m_AudioEventReload' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventReloadCancelled) == 0x000168, "Member 'FWeaponModAudioDataRow::m_AudioEventReloadCancelled' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventWeaponBreak) == 0x000198, "Member 'FWeaponModAudioDataRow::m_AudioEventWeaponBreak' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_CombatWeaponsAdsOn) == 0x0001C8, "Member 'FWeaponModAudioDataRow::m_CombatWeaponsAdsOn' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_CombatWeaponsAdsOff) == 0x0001F8, "Member 'FWeaponModAudioDataRow::m_CombatWeaponsAdsOff' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_CombatWeaponsBulletFlyby) == 0x000228, "Member 'FWeaponModAudioDataRow::m_CombatWeaponsBulletFlyby' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventImpact) == 0x000258, "Member 'FWeaponModAudioDataRow::m_AudioEventImpact' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventImpactStop) == 0x000288, "Member 'FWeaponModAudioDataRow::m_AudioEventImpactStop' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventBeamHitShield) == 0x0002B8, "Member 'FWeaponModAudioDataRow::m_AudioEventBeamHitShield' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventBeamMisfire) == 0x0002E8, "Member 'FWeaponModAudioDataRow::m_AudioEventBeamMisfire' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventSpinupActive) == 0x000318, "Member 'FWeaponModAudioDataRow::m_AudioEventSpinupActive' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_AudioEventSpinCancel) == 0x000348, "Member 'FWeaponModAudioDataRow::m_AudioEventSpinCancel' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_CombatWeaponsTurretShoot) == 0x000378, "Member 'FWeaponModAudioDataRow::m_CombatWeaponsTurretShoot' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_CombatWeaponsTurretShotImpact) == 0x0003A8, "Member 'FWeaponModAudioDataRow::m_CombatWeaponsTurretShotImpact' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_CombatWeaponsTurretShotShieldImpact) == 0x0003D8, "Member 'FWeaponModAudioDataRow::m_CombatWeaponsTurretShotShieldImpact' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_CombatWeaponsTurretCharge) == 0x000408, "Member 'FWeaponModAudioDataRow::m_CombatWeaponsTurretCharge' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_CombatWeaponsTurretRotate) == 0x000438, "Member 'FWeaponModAudioDataRow::m_CombatWeaponsTurretRotate' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_PoweredChargeUp) == 0x000468, "Member 'FWeaponModAudioDataRow::m_PoweredChargeUp' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_PoweredChargeInterrupt) == 0x000498, "Member 'FWeaponModAudioDataRow::m_PoweredChargeInterrupt' has a wrong offset!");
static_assert(offsetof(FWeaponModAudioDataRow, m_PoweredChargeDone) == 0x0004C8, "Member 'FWeaponModAudioDataRow::m_PoweredChargeDone' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponModBase
// 0x0EC8 (0x0ED8 - 0x0010)
struct FWeaponModBase final : public FTableRowBase
{
public:
	class FText                                   FriendlyName;                                      // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
	TArray<EWeaponModFrame>                       SupportedFrameTypes;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SupportedFrames;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EWeaponModType                                ModSlot;                                           // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   GameplayAbilityGranted;                            // 0x0050(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStaticWeaponDataComponent             StaticWeaponData;                                  // 0x0080(0x0B18)(Edit, NativeAccessSpecifierPublic)
	struct FFireMode                              PrimaryFireModeData;                               // 0x0B98(0x00E0)(Edit, NativeAccessSpecifierPublic)
	struct FFireMode                              ADSFireModeData;                                   // 0x0C78(0x00E0)(Edit, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DefaultAccuracyGE;                                 // 0x0D58(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ADSAccuracyGE;                                     // 0x0D88(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MiscGE;                                            // 0x0DB8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStreamableRenderAsset>  Mesh;                                              // 0x0DE8(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketOverride;                              // 0x0E18(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> MaterialOverrides;                              // 0x0E20(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EAnimWeaponType                               m_AnimationWeaponType;                             // 0x0E30(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E31[0x7];                                      // 0x0E31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CrosshairWidgetClass;                              // 0x0E38(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              WeaponIcon;                                        // 0x0E68(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEvent>           m_DuneAudioEventOnActivated;                       // 0x0E98(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEWeaponModAudioRowName                m_WeaponModAudioRowName;                           // 0x0EC8(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ThreatAmount;                                    // 0x0ED0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED4[0x4];                                      // 0x0ED4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponModBase) == 0x000008, "Wrong alignment on FWeaponModBase");
static_assert(sizeof(FWeaponModBase) == 0x000ED8, "Wrong size on FWeaponModBase");
static_assert(offsetof(FWeaponModBase, FriendlyName) == 0x000010, "Member 'FWeaponModBase::FriendlyName' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, SupportedFrameTypes) == 0x000028, "Member 'FWeaponModBase::SupportedFrameTypes' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, SupportedFrames) == 0x000038, "Member 'FWeaponModBase::SupportedFrames' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, ModSlot) == 0x000048, "Member 'FWeaponModBase::ModSlot' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, GameplayAbilityGranted) == 0x000050, "Member 'FWeaponModBase::GameplayAbilityGranted' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, StaticWeaponData) == 0x000080, "Member 'FWeaponModBase::StaticWeaponData' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, PrimaryFireModeData) == 0x000B98, "Member 'FWeaponModBase::PrimaryFireModeData' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, ADSFireModeData) == 0x000C78, "Member 'FWeaponModBase::ADSFireModeData' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, DefaultAccuracyGE) == 0x000D58, "Member 'FWeaponModBase::DefaultAccuracyGE' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, ADSAccuracyGE) == 0x000D88, "Member 'FWeaponModBase::ADSAccuracyGE' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, MiscGE) == 0x000DB8, "Member 'FWeaponModBase::MiscGE' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, Mesh) == 0x000DE8, "Member 'FWeaponModBase::Mesh' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, AttachSocketOverride) == 0x000E18, "Member 'FWeaponModBase::AttachSocketOverride' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, MaterialOverrides) == 0x000E20, "Member 'FWeaponModBase::MaterialOverrides' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, m_AnimationWeaponType) == 0x000E30, "Member 'FWeaponModBase::m_AnimationWeaponType' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, CrosshairWidgetClass) == 0x000E38, "Member 'FWeaponModBase::CrosshairWidgetClass' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, WeaponIcon) == 0x000E68, "Member 'FWeaponModBase::WeaponIcon' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, m_DuneAudioEventOnActivated) == 0x000E98, "Member 'FWeaponModBase::m_DuneAudioEventOnActivated' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, m_WeaponModAudioRowName) == 0x000EC8, "Member 'FWeaponModBase::m_WeaponModAudioRowName' has a wrong offset!");
static_assert(offsetof(FWeaponModBase, m_ThreatAmount) == 0x000ED0, "Member 'FWeaponModBase::m_ThreatAmount' has a wrong offset!");

// ScriptStruct DuneSandbox.ColorParameterTotalData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FColorParameterTotalData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColorParameterTotalData) == 0x000004, "Wrong alignment on FColorParameterTotalData");
static_assert(sizeof(FColorParameterTotalData) == 0x000020, "Wrong size on FColorParameterTotalData");

// ScriptStruct DuneSandbox.WeaponMovementAccuracyMultipliers
// 0x0010 (0x0010 - 0x0000)
struct FWeaponMovementAccuracyMultipliers final
{
public:
	float                                         RecoilYawMul;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilPitchMul;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccuracyMul;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccuracyRecoveryMul;                               // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponMovementAccuracyMultipliers) == 0x000004, "Wrong alignment on FWeaponMovementAccuracyMultipliers");
static_assert(sizeof(FWeaponMovementAccuracyMultipliers) == 0x000010, "Wrong size on FWeaponMovementAccuracyMultipliers");
static_assert(offsetof(FWeaponMovementAccuracyMultipliers, RecoilYawMul) == 0x000000, "Member 'FWeaponMovementAccuracyMultipliers::RecoilYawMul' has a wrong offset!");
static_assert(offsetof(FWeaponMovementAccuracyMultipliers, RecoilPitchMul) == 0x000004, "Member 'FWeaponMovementAccuracyMultipliers::RecoilPitchMul' has a wrong offset!");
static_assert(offsetof(FWeaponMovementAccuracyMultipliers, AccuracyMul) == 0x000008, "Member 'FWeaponMovementAccuracyMultipliers::AccuracyMul' has a wrong offset!");
static_assert(offsetof(FWeaponMovementAccuracyMultipliers, AccuracyRecoveryMul) == 0x00000C, "Member 'FWeaponMovementAccuracyMultipliers::AccuracyRecoveryMul' has a wrong offset!");

// ScriptStruct DuneSandbox.WheelComponent
// 0x0130 (0x0130 - 0x0000)
struct FWheelComponent final
{
public:
	uint8                                         Pad_0[0xB4];                                       // 0x0000(0x00B4)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_DampedSuspensionCompression;                     // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_WheelConfigIdentifier;                           // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWheelShape                                   m_WheelShape;                                      // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_WheelRadius;                                     // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WheelLength;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_WheelExtent;                                     // 0x00D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxSteeringAngle;                                // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CurrentSteeringAngle;                            // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SuspensionHeight;                                // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SuspensionStiffness;                             // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SuspensionDamping;                               // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_SuspensionForceOffset;                           // 0x0100(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RollingGrip;                                     // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LateralGrip;                                     // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BrokenModuleRollingGrip;                         // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BrokenModuleLateralGrip;                         // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsTouchingGround;                               // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWheelComponent) == 0x000008, "Wrong alignment on FWheelComponent");
static_assert(sizeof(FWheelComponent) == 0x000130, "Wrong size on FWheelComponent");
static_assert(offsetof(FWheelComponent, m_DampedSuspensionCompression) == 0x0000B4, "Member 'FWheelComponent::m_DampedSuspensionCompression' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_WheelConfigIdentifier) == 0x0000B8, "Member 'FWheelComponent::m_WheelConfigIdentifier' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_WheelShape) == 0x0000C0, "Member 'FWheelComponent::m_WheelShape' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_WheelRadius) == 0x0000C4, "Member 'FWheelComponent::m_WheelRadius' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_WheelLength) == 0x0000C8, "Member 'FWheelComponent::m_WheelLength' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_WheelExtent) == 0x0000D0, "Member 'FWheelComponent::m_WheelExtent' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_MaxSteeringAngle) == 0x0000E8, "Member 'FWheelComponent::m_MaxSteeringAngle' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_CurrentSteeringAngle) == 0x0000EC, "Member 'FWheelComponent::m_CurrentSteeringAngle' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_SuspensionHeight) == 0x0000F0, "Member 'FWheelComponent::m_SuspensionHeight' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_SuspensionStiffness) == 0x0000F4, "Member 'FWheelComponent::m_SuspensionStiffness' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_SuspensionDamping) == 0x0000F8, "Member 'FWheelComponent::m_SuspensionDamping' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_SuspensionForceOffset) == 0x000100, "Member 'FWheelComponent::m_SuspensionForceOffset' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_RollingGrip) == 0x000118, "Member 'FWheelComponent::m_RollingGrip' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_LateralGrip) == 0x00011C, "Member 'FWheelComponent::m_LateralGrip' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_BrokenModuleRollingGrip) == 0x000120, "Member 'FWheelComponent::m_BrokenModuleRollingGrip' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_BrokenModuleLateralGrip) == 0x000124, "Member 'FWheelComponent::m_BrokenModuleLateralGrip' has a wrong offset!");
static_assert(offsetof(FWheelComponent, m_bIsTouchingGround) == 0x000128, "Member 'FWheelComponent::m_bIsTouchingGround' has a wrong offset!");

// ScriptStruct DuneSandbox.WheeledVehicleComponent
// 0x02E0 (0x02E0 - 0x0000)
struct FWheeledVehicleComponent final
{
public:
	float                                         m_MaxSpeed;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseSeparateMaxBackwardSpeed;                    // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_MaxBackwardSpeed;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DragCoefficient;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RollingResistance;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AutoLevelForce;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AutoLevelAngle;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AutoLevelDirectionOffset;                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_AutoLevelMaxWheelsTouchingGround;                // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_AutoLevelLinearVelocityTreshold;                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AutoLevelAngularVelocityTreshold;                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AutoLevelDelay;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BoostForce;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DecelerationScale;                               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BrakeVelocityLimit;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ChangeDriveDirectionSpeedThreshold;              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CriticalStateMaxSpeedFactor;                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SandwormDangerZoneMaxSpeedFactor;                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SandwormEngineThreatPerSecond;                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SandwormVehicleThreatPerSecond;                  // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DrumsandSandwormVehicleThreatPerSecond;          // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_NumWheels;                                       // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_NumWheelsTouchingGround;                         // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Acceleration;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EnginePower;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxEnginePower;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseSeparateMaxBackwardEnginePower;              // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_MaxBackwardEnginePower;                          // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EnginePowerConsumption;                          // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinEnginePowerConsumption;                       // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BrokenEnginePowerModifier;                       // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Throttle;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Brake;                                           // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Steering;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bApplyBoostMovement;                             // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CruiseModeThrottle;                              // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCruiseModeEnabled;                              // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0xF];                                       // 0x008D(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          m_bBrakeOnReverse;                                 // 0x009C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseAccelerationCurve;                           // 0x009D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     m_AccelerationCurve;                               // 0x00A0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bUseEnginePowerCurve;                            // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     m_EnginePowerSpeedCurve;                           // 0x0130(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     m_EnginePowerSlopeCurve;                           // 0x01B8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     m_SteeringSpeedModifierCurve;                      // 0x0240(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          m_bApplyThrottleOnSteering;                        // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GravityHackMaxAngle;                             // 0x02CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GravityHackMaxSpeed;                             // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DownhillEnginePowerCurveSpeedThreshold;          // 0x02D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_UphillEnginePowerCurveSpeedThreshold;            // 0x02D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWheeledVehicleComponent) == 0x000008, "Wrong alignment on FWheeledVehicleComponent");
static_assert(sizeof(FWheeledVehicleComponent) == 0x0002E0, "Wrong size on FWheeledVehicleComponent");
static_assert(offsetof(FWheeledVehicleComponent, m_MaxSpeed) == 0x000000, "Member 'FWheeledVehicleComponent::m_MaxSpeed' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_bUseSeparateMaxBackwardSpeed) == 0x000004, "Member 'FWheeledVehicleComponent::m_bUseSeparateMaxBackwardSpeed' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_MaxBackwardSpeed) == 0x000008, "Member 'FWheeledVehicleComponent::m_MaxBackwardSpeed' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_DragCoefficient) == 0x00000C, "Member 'FWheeledVehicleComponent::m_DragCoefficient' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_RollingResistance) == 0x000010, "Member 'FWheeledVehicleComponent::m_RollingResistance' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_AutoLevelForce) == 0x000014, "Member 'FWheeledVehicleComponent::m_AutoLevelForce' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_AutoLevelAngle) == 0x000018, "Member 'FWheeledVehicleComponent::m_AutoLevelAngle' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_AutoLevelDirectionOffset) == 0x00001C, "Member 'FWheeledVehicleComponent::m_AutoLevelDirectionOffset' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_AutoLevelMaxWheelsTouchingGround) == 0x000020, "Member 'FWheeledVehicleComponent::m_AutoLevelMaxWheelsTouchingGround' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_AutoLevelLinearVelocityTreshold) == 0x000024, "Member 'FWheeledVehicleComponent::m_AutoLevelLinearVelocityTreshold' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_AutoLevelAngularVelocityTreshold) == 0x000028, "Member 'FWheeledVehicleComponent::m_AutoLevelAngularVelocityTreshold' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_AutoLevelDelay) == 0x00002C, "Member 'FWheeledVehicleComponent::m_AutoLevelDelay' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_BoostForce) == 0x000030, "Member 'FWheeledVehicleComponent::m_BoostForce' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_DecelerationScale) == 0x000034, "Member 'FWheeledVehicleComponent::m_DecelerationScale' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_BrakeVelocityLimit) == 0x000038, "Member 'FWheeledVehicleComponent::m_BrakeVelocityLimit' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_ChangeDriveDirectionSpeedThreshold) == 0x00003C, "Member 'FWheeledVehicleComponent::m_ChangeDriveDirectionSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_CriticalStateMaxSpeedFactor) == 0x000040, "Member 'FWheeledVehicleComponent::m_CriticalStateMaxSpeedFactor' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_SandwormDangerZoneMaxSpeedFactor) == 0x000044, "Member 'FWheeledVehicleComponent::m_SandwormDangerZoneMaxSpeedFactor' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_SandwormEngineThreatPerSecond) == 0x000048, "Member 'FWheeledVehicleComponent::m_SandwormEngineThreatPerSecond' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_SandwormVehicleThreatPerSecond) == 0x00004C, "Member 'FWheeledVehicleComponent::m_SandwormVehicleThreatPerSecond' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_DrumsandSandwormVehicleThreatPerSecond) == 0x000050, "Member 'FWheeledVehicleComponent::m_DrumsandSandwormVehicleThreatPerSecond' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_NumWheels) == 0x000054, "Member 'FWheeledVehicleComponent::m_NumWheels' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_NumWheelsTouchingGround) == 0x000055, "Member 'FWheeledVehicleComponent::m_NumWheelsTouchingGround' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_Acceleration) == 0x000058, "Member 'FWheeledVehicleComponent::m_Acceleration' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_EnginePower) == 0x00005C, "Member 'FWheeledVehicleComponent::m_EnginePower' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_MaxEnginePower) == 0x000060, "Member 'FWheeledVehicleComponent::m_MaxEnginePower' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_bUseSeparateMaxBackwardEnginePower) == 0x000064, "Member 'FWheeledVehicleComponent::m_bUseSeparateMaxBackwardEnginePower' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_MaxBackwardEnginePower) == 0x000068, "Member 'FWheeledVehicleComponent::m_MaxBackwardEnginePower' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_EnginePowerConsumption) == 0x00006C, "Member 'FWheeledVehicleComponent::m_EnginePowerConsumption' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_MinEnginePowerConsumption) == 0x000070, "Member 'FWheeledVehicleComponent::m_MinEnginePowerConsumption' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_BrokenEnginePowerModifier) == 0x000074, "Member 'FWheeledVehicleComponent::m_BrokenEnginePowerModifier' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_Throttle) == 0x000078, "Member 'FWheeledVehicleComponent::m_Throttle' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_Brake) == 0x00007C, "Member 'FWheeledVehicleComponent::m_Brake' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_Steering) == 0x000080, "Member 'FWheeledVehicleComponent::m_Steering' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_bApplyBoostMovement) == 0x000084, "Member 'FWheeledVehicleComponent::m_bApplyBoostMovement' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_CruiseModeThrottle) == 0x000088, "Member 'FWheeledVehicleComponent::m_CruiseModeThrottle' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_bCruiseModeEnabled) == 0x00008C, "Member 'FWheeledVehicleComponent::m_bCruiseModeEnabled' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_bBrakeOnReverse) == 0x00009C, "Member 'FWheeledVehicleComponent::m_bBrakeOnReverse' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_bUseAccelerationCurve) == 0x00009D, "Member 'FWheeledVehicleComponent::m_bUseAccelerationCurve' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_AccelerationCurve) == 0x0000A0, "Member 'FWheeledVehicleComponent::m_AccelerationCurve' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_bUseEnginePowerCurve) == 0x000128, "Member 'FWheeledVehicleComponent::m_bUseEnginePowerCurve' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_EnginePowerSpeedCurve) == 0x000130, "Member 'FWheeledVehicleComponent::m_EnginePowerSpeedCurve' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_EnginePowerSlopeCurve) == 0x0001B8, "Member 'FWheeledVehicleComponent::m_EnginePowerSlopeCurve' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_SteeringSpeedModifierCurve) == 0x000240, "Member 'FWheeledVehicleComponent::m_SteeringSpeedModifierCurve' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_bApplyThrottleOnSteering) == 0x0002C8, "Member 'FWheeledVehicleComponent::m_bApplyThrottleOnSteering' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_GravityHackMaxAngle) == 0x0002CC, "Member 'FWheeledVehicleComponent::m_GravityHackMaxAngle' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_GravityHackMaxSpeed) == 0x0002D0, "Member 'FWheeledVehicleComponent::m_GravityHackMaxSpeed' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_DownhillEnginePowerCurveSpeedThreshold) == 0x0002D4, "Member 'FWheeledVehicleComponent::m_DownhillEnginePowerCurveSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FWheeledVehicleComponent, m_UphillEnginePowerCurveSpeedThreshold) == 0x0002D8, "Member 'FWheeledVehicleComponent::m_UphillEnginePowerCurveSpeedThreshold' has a wrong offset!");

// ScriptStruct DuneSandbox.WindShelterComponent
// 0x0000 (0x0020 - 0x0020)
struct FWindShelterComponent final : public FShelterComponent
{
};
static_assert(alignof(FWindShelterComponent) == 0x000008, "Wrong alignment on FWindShelterComponent");
static_assert(sizeof(FWindShelterComponent) == 0x000020, "Wrong size on FWindShelterComponent");

// ScriptStruct DuneSandbox.WorldGeneratorLayerRowBase
// 0x0008 (0x0018 - 0x0010)
struct FWorldGeneratorLayerRowBase final : public FTableRowBase
{
public:
	float                                         CellSizeInMeters;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldGeneratorLayerRowBase) == 0x000008, "Wrong alignment on FWorldGeneratorLayerRowBase");
static_assert(sizeof(FWorldGeneratorLayerRowBase) == 0x000018, "Wrong size on FWorldGeneratorLayerRowBase");
static_assert(offsetof(FWorldGeneratorLayerRowBase, CellSizeInMeters) == 0x000010, "Member 'FWorldGeneratorLayerRowBase::CellSizeInMeters' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockWorldLayoutEntry
// 0x00B0 (0x00B0 - 0x0000)
struct FTerrainBlockWorldLayoutEntry final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ClusterHash;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   TerrainBlockActorName;                             // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 TerrainBlockActorClass;                            // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTerrainBlockDataAsset*                 TerrainBlockDataAsset;                             // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FTerrainBlockTemplateSubLevelGroupSettings> SubLevelGroupsSettings;   // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FTerrainBlockTemplateSubLevelContentBlockSettings> SubContentBlocksSettings;       // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockWorldLayoutEntry) == 0x000008, "Wrong alignment on FTerrainBlockWorldLayoutEntry");
static_assert(sizeof(FTerrainBlockWorldLayoutEntry) == 0x0000B0, "Wrong size on FTerrainBlockWorldLayoutEntry");
static_assert(offsetof(FTerrainBlockWorldLayoutEntry, bIsEnabled) == 0x000000, "Member 'FTerrainBlockWorldLayoutEntry::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldLayoutEntry, ClusterHash) == 0x000004, "Member 'FTerrainBlockWorldLayoutEntry::ClusterHash' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldLayoutEntry, Location) == 0x000008, "Member 'FTerrainBlockWorldLayoutEntry::Location' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldLayoutEntry, Rotation) == 0x000020, "Member 'FTerrainBlockWorldLayoutEntry::Rotation' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldLayoutEntry, TerrainBlockActorName) == 0x000038, "Member 'FTerrainBlockWorldLayoutEntry::TerrainBlockActorName' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldLayoutEntry, TerrainBlockActorClass) == 0x000040, "Member 'FTerrainBlockWorldLayoutEntry::TerrainBlockActorClass' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldLayoutEntry, TerrainBlockDataAsset) == 0x000048, "Member 'FTerrainBlockWorldLayoutEntry::TerrainBlockDataAsset' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldLayoutEntry, SubLevelGroupsSettings) == 0x000050, "Member 'FTerrainBlockWorldLayoutEntry::SubLevelGroupsSettings' has a wrong offset!");
static_assert(offsetof(FTerrainBlockWorldLayoutEntry, SubContentBlocksSettings) == 0x0000A0, "Member 'FTerrainBlockWorldLayoutEntry::SubContentBlocksSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleCustomizationInfo
// 0x0148 (0x0148 - 0x0000)
struct FVehicleCustomizationInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleModulesContainer               m_VehicleModulesContainer;                         // 0x0008(0x0140)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCustomizationInfo) == 0x000008, "Wrong alignment on FVehicleCustomizationInfo");
static_assert(sizeof(FVehicleCustomizationInfo) == 0x000148, "Wrong size on FVehicleCustomizationInfo");
static_assert(offsetof(FVehicleCustomizationInfo, m_VehicleModulesContainer) == 0x000008, "Member 'FVehicleCustomizationInfo::m_VehicleModulesContainer' has a wrong offset!");

// ScriptStruct DuneSandbox.HazardZoneWorldLayoutEntry
// 0x0040 (0x00E0 - 0x00A0)
struct FHazardZoneWorldLayoutEntry final : public FGenericActorWorldLayoutEntry
{
public:
	struct FHazardZoneSettings                    Settings;                                          // 0x00A0(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHazardZoneWorldLayoutEntry) == 0x000010, "Wrong alignment on FHazardZoneWorldLayoutEntry");
static_assert(sizeof(FHazardZoneWorldLayoutEntry) == 0x0000E0, "Wrong size on FHazardZoneWorldLayoutEntry");
static_assert(offsetof(FHazardZoneWorldLayoutEntry, Settings) == 0x0000A0, "Member 'FHazardZoneWorldLayoutEntry::Settings' has a wrong offset!");

// ScriptStruct DuneSandbox.WorldLayoutTerrainBlocksContainer
// 0x0058 (0x0180 - 0x0128)
struct FWorldLayoutTerrainBlocksContainer final : public FFastArraySerializer
{
public:
	TArray<struct FWorldLayoutTerrainBlockArrayItem> Items;                                          // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x48];                                     // 0x0138(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldLayoutTerrainBlocksContainer) == 0x000008, "Wrong alignment on FWorldLayoutTerrainBlocksContainer");
static_assert(sizeof(FWorldLayoutTerrainBlocksContainer) == 0x000180, "Wrong size on FWorldLayoutTerrainBlocksContainer");
static_assert(offsetof(FWorldLayoutTerrainBlocksContainer, Items) == 0x000128, "Member 'FWorldLayoutTerrainBlocksContainer::Items' has a wrong offset!");

// ScriptStruct DuneSandbox.AbilityCancelWindowTriggeredData
// 0x0010 (0x0010 - 0x0000)
struct FAbilityCancelWindowTriggeredData final
{
public:
	class UGameplayAbility*                       Ability;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             AbilitySpecHandle;                                 // 0x0008(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicateNotifyBroadcast;                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityCancelWindowTriggeredData) == 0x000008, "Wrong alignment on FAbilityCancelWindowTriggeredData");
static_assert(sizeof(FAbilityCancelWindowTriggeredData) == 0x000010, "Wrong size on FAbilityCancelWindowTriggeredData");
static_assert(offsetof(FAbilityCancelWindowTriggeredData, Ability) == 0x000000, "Member 'FAbilityCancelWindowTriggeredData::Ability' has a wrong offset!");
static_assert(offsetof(FAbilityCancelWindowTriggeredData, AbilitySpecHandle) == 0x000008, "Member 'FAbilityCancelWindowTriggeredData::AbilitySpecHandle' has a wrong offset!");
static_assert(offsetof(FAbilityCancelWindowTriggeredData, bReplicateNotifyBroadcast) == 0x00000C, "Member 'FAbilityCancelWindowTriggeredData::bReplicateNotifyBroadcast' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleTableSourceNode
// 0x0010 (0x0010 - 0x0000)
struct FVehicleModuleTableSourceNode final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStruct*                                RowStruct;                                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleTableSourceNode) == 0x000008, "Wrong alignment on FVehicleModuleTableSourceNode");
static_assert(sizeof(FVehicleModuleTableSourceNode) == 0x000010, "Wrong size on FVehicleModuleTableSourceNode");
static_assert(offsetof(FVehicleModuleTableSourceNode, DataTable) == 0x000000, "Member 'FVehicleModuleTableSourceNode::DataTable' has a wrong offset!");
static_assert(offsetof(FVehicleModuleTableSourceNode, RowStruct) == 0x000008, "Member 'FVehicleModuleTableSourceNode::RowStruct' has a wrong offset!");

// ScriptStruct DuneSandbox.AbilityUIEventComponent
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FAbilityUIEventComponent final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityUIEventComponent) == 0x000008, "Wrong alignment on FAbilityUIEventComponent");
static_assert(sizeof(FAbilityUIEventComponent) == 0x000068, "Wrong size on FAbilityUIEventComponent");

// ScriptStruct DuneSandbox.RootMotionSource_FollowPath_VectorCurve
// 0x0010 (0x0120 - 0x0110)
struct FRootMotionSource_FollowPath_VectorCurve final : public FRootMotionSource_FollowPathBase
{
public:
	class UCurveVector*                           PathVectorCurve;                                   // 0x0110(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_FollowPath_VectorCurve) == 0x000010, "Wrong alignment on FRootMotionSource_FollowPath_VectorCurve");
static_assert(sizeof(FRootMotionSource_FollowPath_VectorCurve) == 0x000120, "Wrong size on FRootMotionSource_FollowPath_VectorCurve");
static_assert(offsetof(FRootMotionSource_FollowPath_VectorCurve, PathVectorCurve) == 0x000110, "Member 'FRootMotionSource_FollowPath_VectorCurve::PathVectorCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.AchievementConditionState
// 0x0028 (0x0028 - 0x0000)
struct FAchievementConditionState final
{
public:
	class UConditionData*                         ConditionData;                                     // 0x0000(0x0008)(ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ConditionListenerHandleIds;                        // 0x0018(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementConditionState) == 0x000008, "Wrong alignment on FAchievementConditionState");
static_assert(sizeof(FAchievementConditionState) == 0x000028, "Wrong size on FAchievementConditionState");
static_assert(offsetof(FAchievementConditionState, ConditionData) == 0x000000, "Member 'FAchievementConditionState::ConditionData' has a wrong offset!");
static_assert(offsetof(FAchievementConditionState, ConditionListenerHandleIds) == 0x000018, "Member 'FAchievementConditionState::ConditionListenerHandleIds' has a wrong offset!");

// ScriptStruct DuneSandbox.ServerSpiceFieldManifest
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FServerSpiceFieldManifest final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerSpiceFieldManifest) == 0x000008, "Wrong alignment on FServerSpiceFieldManifest");
static_assert(sizeof(FServerSpiceFieldManifest) == 0x000060, "Wrong size on FServerSpiceFieldManifest");

// ScriptStruct DuneSandbox.AchievementProgressData
// 0x0018 (0x0018 - 0x0000)
struct FAchievementProgressData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Progress;                                          // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementProgressData) == 0x000008, "Wrong alignment on FAchievementProgressData");
static_assert(sizeof(FAchievementProgressData) == 0x000018, "Wrong size on FAchievementProgressData");
static_assert(offsetof(FAchievementProgressData, ID) == 0x000000, "Member 'FAchievementProgressData::ID' has a wrong offset!");
static_assert(offsetof(FAchievementProgressData, Progress) == 0x000010, "Member 'FAchievementProgressData::Progress' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorServerTrackingLocation
// 0x0024 (0x0030 - 0x000C)
struct FActorServerTrackingLocation final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              m_ActorId;                                         // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    m_Location;                                        // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorServerTrackingLocation) == 0x000008, "Wrong alignment on FActorServerTrackingLocation");
static_assert(sizeof(FActorServerTrackingLocation) == 0x000030, "Wrong size on FActorServerTrackingLocation");
static_assert(offsetof(FActorServerTrackingLocation, m_ActorId) == 0x000010, "Member 'FActorServerTrackingLocation::m_ActorId' has a wrong offset!");
static_assert(offsetof(FActorServerTrackingLocation, m_Location) == 0x000018, "Member 'FActorServerTrackingLocation::m_Location' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorServerTrackingLocationList
// 0x0058 (0x0180 - 0x0128)
struct alignas(0x10) FActorServerTrackingLocationList final : public FFastArraySerializer
{
public:
	TArray<struct FActorServerTrackingLocation>   m_Actors;                                          // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x48];                                     // 0x0138(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorServerTrackingLocationList) == 0x000010, "Wrong alignment on FActorServerTrackingLocationList");
static_assert(sizeof(FActorServerTrackingLocationList) == 0x000180, "Wrong size on FActorServerTrackingLocationList");
static_assert(offsetof(FActorServerTrackingLocationList, m_Actors) == 0x000128, "Member 'FActorServerTrackingLocationList::m_Actors' has a wrong offset!");

// ScriptStruct DuneSandbox.AreaAttractorPoint
// 0x0020 (0x0020 - 0x0000)
struct FAreaAttractorPoint final
{
public:
	struct FVector                                RelativeLocation;                                  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAreaAttractorPoint) == 0x000008, "Wrong alignment on FAreaAttractorPoint");
static_assert(sizeof(FAreaAttractorPoint) == 0x000020, "Wrong size on FAreaAttractorPoint");
static_assert(offsetof(FAreaAttractorPoint, RelativeLocation) == 0x000000, "Member 'FAreaAttractorPoint::RelativeLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.LoadedAttractorAnimation
// 0x0010 (0x0010 - 0x0000)
struct FLoadedAttractorAnimation final
{
public:
	class UAnimMontage*                           m_LoadedAnimation;                                 // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadedAttractorAnimation) == 0x000008, "Wrong alignment on FLoadedAttractorAnimation");
static_assert(sizeof(FLoadedAttractorAnimation) == 0x000010, "Wrong size on FLoadedAttractorAnimation");
static_assert(offsetof(FLoadedAttractorAnimation, m_LoadedAnimation) == 0x000000, "Member 'FLoadedAttractorAnimation::m_LoadedAnimation' has a wrong offset!");

// ScriptStruct DuneSandbox.RangeEnumValuePair
// 0x0008 (0x0008 - 0x0000)
struct FRangeEnumValuePair final
{
public:
	EAIRange                                      EnumKey;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRangeEnumValuePair) == 0x000004, "Wrong alignment on FRangeEnumValuePair");
static_assert(sizeof(FRangeEnumValuePair) == 0x000008, "Wrong size on FRangeEnumValuePair");
static_assert(offsetof(FRangeEnumValuePair, EnumKey) == 0x000000, "Member 'FRangeEnumValuePair::EnumKey' has a wrong offset!");
static_assert(offsetof(FRangeEnumValuePair, Value) == 0x000004, "Member 'FRangeEnumValuePair::Value' has a wrong offset!");

// ScriptStruct DuneSandbox.BTTaskMemory_LeanOutOfCover
// 0x0050 (0x0050 - 0x0000)
struct FBTTaskMemory_LeanOutOfCover final
{
public:
	struct FTimerHandle                           m_TimerHandle;                                     // 0x0000(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           m_CurrentMontage;                                  // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LoopSectionIndex;                                // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_IdleSectionIndex;                                // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NextSectionIndex;                                // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_CoverLocation;                                   // 0x0020(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_CoverStepOutLocation;                            // 0x0038(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBTTaskMemory_LeanOutOfCover) == 0x000008, "Wrong alignment on FBTTaskMemory_LeanOutOfCover");
static_assert(sizeof(FBTTaskMemory_LeanOutOfCover) == 0x000050, "Wrong size on FBTTaskMemory_LeanOutOfCover");
static_assert(offsetof(FBTTaskMemory_LeanOutOfCover, m_TimerHandle) == 0x000000, "Member 'FBTTaskMemory_LeanOutOfCover::m_TimerHandle' has a wrong offset!");
static_assert(offsetof(FBTTaskMemory_LeanOutOfCover, m_CurrentMontage) == 0x000008, "Member 'FBTTaskMemory_LeanOutOfCover::m_CurrentMontage' has a wrong offset!");
static_assert(offsetof(FBTTaskMemory_LeanOutOfCover, m_LoopSectionIndex) == 0x000010, "Member 'FBTTaskMemory_LeanOutOfCover::m_LoopSectionIndex' has a wrong offset!");
static_assert(offsetof(FBTTaskMemory_LeanOutOfCover, m_IdleSectionIndex) == 0x000014, "Member 'FBTTaskMemory_LeanOutOfCover::m_IdleSectionIndex' has a wrong offset!");
static_assert(offsetof(FBTTaskMemory_LeanOutOfCover, m_NextSectionIndex) == 0x000018, "Member 'FBTTaskMemory_LeanOutOfCover::m_NextSectionIndex' has a wrong offset!");
static_assert(offsetof(FBTTaskMemory_LeanOutOfCover, m_CoverLocation) == 0x000020, "Member 'FBTTaskMemory_LeanOutOfCover::m_CoverLocation' has a wrong offset!");
static_assert(offsetof(FBTTaskMemory_LeanOutOfCover, m_CoverStepOutLocation) == 0x000038, "Member 'FBTTaskMemory_LeanOutOfCover::m_CoverStepOutLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.NPCBarkMemory
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FNPCBarkMemory final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCBarkMemory) == 0x000004, "Wrong alignment on FNPCBarkMemory");
static_assert(sizeof(FNPCBarkMemory) == 0x000010, "Wrong size on FNPCBarkMemory");

// ScriptStruct DuneSandbox.DuneSquadTimer
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FDuneSquadTimer final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneSquadTimer) == 0x000008, "Wrong alignment on FDuneSquadTimer");
static_assert(sizeof(FDuneSquadTimer) == 0x000028, "Wrong size on FDuneSquadTimer");

// ScriptStruct DuneSandbox.LodChangeInfo
// 0x0010 (0x0010 - 0x0000)
struct FLodChangeInfo final
{
public:
	class ADuneNpcCharacter*                      m_NpcCharacter;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLodChangeInfo) == 0x000008, "Wrong alignment on FLodChangeInfo");
static_assert(sizeof(FLodChangeInfo) == 0x000010, "Wrong size on FLodChangeInfo");
static_assert(offsetof(FLodChangeInfo, m_NpcCharacter) == 0x000000, "Member 'FLodChangeInfo::m_NpcCharacter' has a wrong offset!");

// ScriptStruct DuneSandbox.LodEntityInfo
// 0x0018 (0x0018 - 0x0000)
struct FLodEntityInfo final
{
public:
	class ADuneNpcCharacter*                      m_NpcCharacter;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLodEntityInfo) == 0x000008, "Wrong alignment on FLodEntityInfo");
static_assert(sizeof(FLodEntityInfo) == 0x000018, "Wrong size on FLodEntityInfo");
static_assert(offsetof(FLodEntityInfo, m_NpcCharacter) == 0x000000, "Member 'FLodEntityInfo::m_NpcCharacter' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemMeshDisplayContainer
// 0x0010 (0x0100 - 0x00F0)
struct FItemMeshDisplayContainer final : public FItemMeshDisplayBase
{
public:
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMeshDisplayContainer) == 0x000010, "Wrong alignment on FItemMeshDisplayContainer");
static_assert(sizeof(FItemMeshDisplayContainer) == 0x000100, "Wrong size on FItemMeshDisplayContainer");

// ScriptStruct DuneSandbox.AICombatData
// 0x0050 (0x0050 - 0x0000)
struct FAICombatData final
{
public:
	TMulticastInlineDelegate<void()>              UpdatedDelegator;                                  // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     BaseAttribute;                                     // 0x0010(0x0038)(BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAICombatData) == 0x000008, "Wrong alignment on FAICombatData");
static_assert(sizeof(FAICombatData) == 0x000050, "Wrong size on FAICombatData");
static_assert(offsetof(FAICombatData, UpdatedDelegator) == 0x000000, "Member 'FAICombatData::UpdatedDelegator' has a wrong offset!");
static_assert(offsetof(FAICombatData, BaseAttribute) == 0x000010, "Member 'FAICombatData::BaseAttribute' has a wrong offset!");

// ScriptStruct DuneSandbox.ENPCCombatBehaviorSetName
// 0x0000 (0x0008 - 0x0008)
struct FENPCCombatBehaviorSetName final : public FStringEnumValue
{
};
static_assert(alignof(FENPCCombatBehaviorSetName) == 0x000004, "Wrong alignment on FENPCCombatBehaviorSetName");
static_assert(sizeof(FENPCCombatBehaviorSetName) == 0x000008, "Wrong size on FENPCCombatBehaviorSetName");

// ScriptStruct DuneSandbox.NpcAbilitySet
// 0x0060 (0x0060 - 0x0000)
struct FNpcAbilitySet final
{
public:
	struct FENPCCombatBehaviorSetName             m_Name;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FENpcCombatAbilityName, struct FNpcAbilityInfo> m_Abilities;                         // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNpcAbilitySet) == 0x000008, "Wrong alignment on FNpcAbilitySet");
static_assert(sizeof(FNpcAbilitySet) == 0x000060, "Wrong size on FNpcAbilitySet");
static_assert(offsetof(FNpcAbilitySet, m_Name) == 0x000000, "Member 'FNpcAbilitySet::m_Name' has a wrong offset!");
static_assert(offsetof(FNpcAbilitySet, m_Abilities) == 0x000008, "Member 'FNpcAbilitySet::m_Abilities' has a wrong offset!");

// ScriptStruct DuneSandbox.ModularAiBehaviorInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FModularAiBehaviorInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModularAiBehaviorInfo) == 0x000004, "Wrong alignment on FModularAiBehaviorInfo");
static_assert(sizeof(FModularAiBehaviorInfo) == 0x000008, "Wrong size on FModularAiBehaviorInfo");

// ScriptStruct DuneSandbox.TargetWrapper
// 0x0010 (0x0010 - 0x0000)
struct FTargetWrapper final
{
public:
	TScriptInterface<class IAITargetableInterface> RawTarget;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetWrapper) == 0x000008, "Wrong alignment on FTargetWrapper");
static_assert(sizeof(FTargetWrapper) == 0x000010, "Wrong size on FTargetWrapper");
static_assert(offsetof(FTargetWrapper, RawTarget) == 0x000000, "Member 'FTargetWrapper::RawTarget' has a wrong offset!");

// ScriptStruct DuneSandbox.TargetData
// 0x0018 (0x0018 - 0x0000)
struct FTargetData final
{
public:
	struct FTargetWrapper                         Target;                                            // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetData) == 0x000008, "Wrong alignment on FTargetData");
static_assert(sizeof(FTargetData) == 0x000018, "Wrong size on FTargetData");
static_assert(offsetof(FTargetData, Target) == 0x000000, "Member 'FTargetData::Target' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcTargetData
// 0x0028 (0x0028 - 0x0000)
struct FNpcTargetData final
{
public:
	struct FEntityId                              m_EntityId;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  m_Instigator;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_Location;                                        // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcTargetData) == 0x000008, "Wrong alignment on FNpcTargetData");
static_assert(sizeof(FNpcTargetData) == 0x000028, "Wrong size on FNpcTargetData");
static_assert(offsetof(FNpcTargetData, m_EntityId) == 0x000000, "Member 'FNpcTargetData::m_EntityId' has a wrong offset!");
static_assert(offsetof(FNpcTargetData, m_Instigator) == 0x000008, "Member 'FNpcTargetData::m_Instigator' has a wrong offset!");
static_assert(offsetof(FNpcTargetData, m_Location) == 0x000010, "Member 'FNpcTargetData::m_Location' has a wrong offset!");

// ScriptStruct DuneSandbox.ConsiderationParam_Float
// 0x0010 (0x0010 - 0x0000)
struct FConsiderationParam_Float final
{
public:
	EConsiderationParamType                       m_ParamType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Value;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_BBKey;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsiderationParam_Float) == 0x000004, "Wrong alignment on FConsiderationParam_Float");
static_assert(sizeof(FConsiderationParam_Float) == 0x000010, "Wrong size on FConsiderationParam_Float");
static_assert(offsetof(FConsiderationParam_Float, m_ParamType) == 0x000000, "Member 'FConsiderationParam_Float::m_ParamType' has a wrong offset!");
static_assert(offsetof(FConsiderationParam_Float, m_Value) == 0x000004, "Member 'FConsiderationParam_Float::m_Value' has a wrong offset!");
static_assert(offsetof(FConsiderationParam_Float, m_BBKey) == 0x000008, "Member 'FConsiderationParam_Float::m_BBKey' has a wrong offset!");

// ScriptStruct DuneSandbox.ConsiderationScoringSettings
// 0x0030 (0x0030 - 0x0000)
struct FConsiderationScoringSettings final
{
public:
	EConsiderationTestType                        m_TestType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConsiderationFilterType                      m_FilterType;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConsiderationParam_Float              m_MinRange;                                        // 0x0004(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FConsiderationParam_Float              m_MaxRange;                                        // 0x0014(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_Curve;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsiderationScoringSettings) == 0x000008, "Wrong alignment on FConsiderationScoringSettings");
static_assert(sizeof(FConsiderationScoringSettings) == 0x000030, "Wrong size on FConsiderationScoringSettings");
static_assert(offsetof(FConsiderationScoringSettings, m_TestType) == 0x000000, "Member 'FConsiderationScoringSettings::m_TestType' has a wrong offset!");
static_assert(offsetof(FConsiderationScoringSettings, m_FilterType) == 0x000001, "Member 'FConsiderationScoringSettings::m_FilterType' has a wrong offset!");
static_assert(offsetof(FConsiderationScoringSettings, m_MinRange) == 0x000004, "Member 'FConsiderationScoringSettings::m_MinRange' has a wrong offset!");
static_assert(offsetof(FConsiderationScoringSettings, m_MaxRange) == 0x000014, "Member 'FConsiderationScoringSettings::m_MaxRange' has a wrong offset!");
static_assert(offsetof(FConsiderationScoringSettings, m_Curve) == 0x000028, "Member 'FConsiderationScoringSettings::m_Curve' has a wrong offset!");

// ScriptStruct DuneSandbox.DecisionEvaluator
// 0x0020 (0x0020 - 0x0000)
struct FDecisionEvaluator final
{
public:
	struct FConsiderationContext                  m_Context;                                         // 0x0000(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UDecisionSetBase*                       m_DecisionSet;                                     // 0x0018(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDecisionEvaluator) == 0x000008, "Wrong alignment on FDecisionEvaluator");
static_assert(sizeof(FDecisionEvaluator) == 0x000020, "Wrong size on FDecisionEvaluator");
static_assert(offsetof(FDecisionEvaluator, m_Context) == 0x000000, "Member 'FDecisionEvaluator::m_Context' has a wrong offset!");
static_assert(offsetof(FDecisionEvaluator, m_DecisionSet) == 0x000018, "Member 'FDecisionEvaluator::m_DecisionSet' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcAbilitySetData
// 0x0028 (0x0028 - 0x0000)
struct FNpcAbilitySetData final
{
public:
	TArray<struct FENpcCombatAbilityName>         m_Abilities;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UDecisionSet_NpcAbilities*              m_DecisionSet;                                     // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           m_RequiredGameplayAbilityClasses;                  // 0x0018(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcAbilitySetData) == 0x000008, "Wrong alignment on FNpcAbilitySetData");
static_assert(sizeof(FNpcAbilitySetData) == 0x000028, "Wrong size on FNpcAbilitySetData");
static_assert(offsetof(FNpcAbilitySetData, m_Abilities) == 0x000000, "Member 'FNpcAbilitySetData::m_Abilities' has a wrong offset!");
static_assert(offsetof(FNpcAbilitySetData, m_DecisionSet) == 0x000010, "Member 'FNpcAbilitySetData::m_DecisionSet' has a wrong offset!");
static_assert(offsetof(FNpcAbilitySetData, m_RequiredGameplayAbilityClasses) == 0x000018, "Member 'FNpcAbilitySetData::m_RequiredGameplayAbilityClasses' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcAbilityData
// 0x0010 (0x0010 - 0x0000)
struct FNpcAbilityData final
{
public:
	class UBehaviorTree*                          m_BehaviorTreeAsset;                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 m_AbilityTargetFinderClass;                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcAbilityData) == 0x000008, "Wrong alignment on FNpcAbilityData");
static_assert(sizeof(FNpcAbilityData) == 0x000010, "Wrong size on FNpcAbilityData");
static_assert(offsetof(FNpcAbilityData, m_BehaviorTreeAsset) == 0x000000, "Member 'FNpcAbilityData::m_BehaviorTreeAsset' has a wrong offset!");
static_assert(offsetof(FNpcAbilityData, m_AbilityTargetFinderClass) == 0x000008, "Member 'FNpcAbilityData::m_AbilityTargetFinderClass' has a wrong offset!");

// ScriptStruct DuneSandbox.LoadedModularAIBehavior
// 0x0018 (0x0018 - 0x0000)
struct FLoadedModularAIBehavior final
{
public:
	class UModularAiBehaviorAsset*                m_BehaviorAsset;                                   // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          m_BehaviorTreeAsset;                               // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 m_PlayerAbilityClass;                              // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadedModularAIBehavior) == 0x000008, "Wrong alignment on FLoadedModularAIBehavior");
static_assert(sizeof(FLoadedModularAIBehavior) == 0x000018, "Wrong size on FLoadedModularAIBehavior");
static_assert(offsetof(FLoadedModularAIBehavior, m_BehaviorAsset) == 0x000000, "Member 'FLoadedModularAIBehavior::m_BehaviorAsset' has a wrong offset!");
static_assert(offsetof(FLoadedModularAIBehavior, m_BehaviorTreeAsset) == 0x000008, "Member 'FLoadedModularAIBehavior::m_BehaviorTreeAsset' has a wrong offset!");
static_assert(offsetof(FLoadedModularAIBehavior, m_PlayerAbilityClass) == 0x000010, "Member 'FLoadedModularAIBehavior::m_PlayerAbilityClass' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAILogTracker
// 0x0020 (0x0020 - 0x0000)
struct FDuneAILogTracker final
{
public:
	class AActor*                                 m_OwnerActor;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneAILogTracker) == 0x000008, "Wrong alignment on FDuneAILogTracker");
static_assert(sizeof(FDuneAILogTracker) == 0x000020, "Wrong size on FDuneAILogTracker");
static_assert(offsetof(FDuneAILogTracker, m_OwnerActor) == 0x000000, "Member 'FDuneAILogTracker::m_OwnerActor' has a wrong offset!");

// ScriptStruct DuneSandbox.AvailableNpc
// 0x00A8 (0x00A8 - 0x0000)
struct FAvailableNpc final
{
public:
	struct FDataTableRowHandle                    Type;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RelativeFrequency;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      SpawningMetadataTagQuery;                          // 0x0018(0x0048)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SpawningLocationMetadataTagQuery;                  // 0x0060(0x0048)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAvailableNpc) == 0x000008, "Wrong alignment on FAvailableNpc");
static_assert(sizeof(FAvailableNpc) == 0x0000A8, "Wrong size on FAvailableNpc");
static_assert(offsetof(FAvailableNpc, Type) == 0x000000, "Member 'FAvailableNpc::Type' has a wrong offset!");
static_assert(offsetof(FAvailableNpc, RelativeFrequency) == 0x000010, "Member 'FAvailableNpc::RelativeFrequency' has a wrong offset!");
static_assert(offsetof(FAvailableNpc, SpawningMetadataTagQuery) == 0x000018, "Member 'FAvailableNpc::SpawningMetadataTagQuery' has a wrong offset!");
static_assert(offsetof(FAvailableNpc, SpawningLocationMetadataTagQuery) == 0x000060, "Member 'FAvailableNpc::SpawningLocationMetadataTagQuery' has a wrong offset!");

// ScriptStruct DuneSandbox.AiSpawningRequest
// 0x0008 (0x0008 - 0x0000)
struct FAiSpawningRequest final
{
public:
	EAiSpawningType                               SpawningType;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfSpawns;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAiSpawningRequest) == 0x000004, "Wrong alignment on FAiSpawningRequest");
static_assert(sizeof(FAiSpawningRequest) == 0x000008, "Wrong size on FAiSpawningRequest");
static_assert(offsetof(FAiSpawningRequest, SpawningType) == 0x000000, "Member 'FAiSpawningRequest::SpawningType' has a wrong offset!");
static_assert(offsetof(FAiSpawningRequest, NumOfSpawns) == 0x000004, "Member 'FAiSpawningRequest::NumOfSpawns' has a wrong offset!");

// ScriptStruct DuneSandbox.SpawnNpcConfig
// 0x0120 (0x0120 - 0x0000)
struct FSpawnNpcConfig final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AAISpawnManager>         ManagerOwner;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CallingFrom;                                       // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SpawnTags;                                         // 0x0080(0x0020)(NativeAccessSpecifierPublic)
	struct FAISpawnAnimation                      SpawnAnimation;                                    // 0x00A0(0x0038)(NativeAccessSpecifierPublic)
	bool                                          bCanSnapToGroundOnSpawn;                           // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x47];                                      // 0x00D9(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnNpcConfig) == 0x000010, "Wrong alignment on FSpawnNpcConfig");
static_assert(sizeof(FSpawnNpcConfig) == 0x000120, "Wrong size on FSpawnNpcConfig");
static_assert(offsetof(FSpawnNpcConfig, World) == 0x000000, "Member 'FSpawnNpcConfig::World' has a wrong offset!");
static_assert(offsetof(FSpawnNpcConfig, ManagerOwner) == 0x000008, "Member 'FSpawnNpcConfig::ManagerOwner' has a wrong offset!");
static_assert(offsetof(FSpawnNpcConfig, Transform) == 0x000010, "Member 'FSpawnNpcConfig::Transform' has a wrong offset!");
static_assert(offsetof(FSpawnNpcConfig, CallingFrom) == 0x000070, "Member 'FSpawnNpcConfig::CallingFrom' has a wrong offset!");
static_assert(offsetof(FSpawnNpcConfig, SpawnTags) == 0x000080, "Member 'FSpawnNpcConfig::SpawnTags' has a wrong offset!");
static_assert(offsetof(FSpawnNpcConfig, SpawnAnimation) == 0x0000A0, "Member 'FSpawnNpcConfig::SpawnAnimation' has a wrong offset!");
static_assert(offsetof(FSpawnNpcConfig, bCanSnapToGroundOnSpawn) == 0x0000D8, "Member 'FSpawnNpcConfig::bCanSnapToGroundOnSpawn' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcSquadSpawnData
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FNpcSquadSpawnData final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNpcSquadSpawnData) == 0x000010, "Wrong alignment on FNpcSquadSpawnData");
static_assert(sizeof(FNpcSquadSpawnData) == 0x000070, "Wrong size on FNpcSquadSpawnData");

// ScriptStruct DuneSandbox.SettingsBuildingRotationModeOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsBuildingRotationModeOption final : public FSettingsEnumOptionBase
{
public:
	EPlaceableRotationBuildingMode                Mode;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsBuildingRotationModeOption) == 0x000008, "Wrong alignment on FSettingsBuildingRotationModeOption");
static_assert(sizeof(FSettingsBuildingRotationModeOption) == 0x000028, "Wrong size on FSettingsBuildingRotationModeOption");
static_assert(offsetof(FSettingsBuildingRotationModeOption, Mode) == 0x000020, "Member 'FSettingsBuildingRotationModeOption::Mode' has a wrong offset!");

// ScriptStruct DuneSandbox.NPCSpawnListData
// 0x0000 (0x0010 - 0x0010)
struct FNPCSpawnListData final : public FTableRowBase
{
};
static_assert(alignof(FNPCSpawnListData) == 0x000008, "Wrong alignment on FNPCSpawnListData");
static_assert(sizeof(FNPCSpawnListData) == 0x000010, "Wrong size on FNPCSpawnListData");

// ScriptStruct DuneSandbox.NPCSpawnRecipeData
// 0x0038 (0x0048 - 0x0010)
struct FNPCSpawnRecipeData final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  m_RoomDescriptionTags;                             // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         m_MinSpawnCount;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_MaxSpawnCount;                                   // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Weight;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNPCSpawnIngredient>            m_Ingredients;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCSpawnRecipeData) == 0x000008, "Wrong alignment on FNPCSpawnRecipeData");
static_assert(sizeof(FNPCSpawnRecipeData) == 0x000048, "Wrong size on FNPCSpawnRecipeData");
static_assert(offsetof(FNPCSpawnRecipeData, m_RoomDescriptionTags) == 0x000010, "Member 'FNPCSpawnRecipeData::m_RoomDescriptionTags' has a wrong offset!");
static_assert(offsetof(FNPCSpawnRecipeData, m_MinSpawnCount) == 0x000030, "Member 'FNPCSpawnRecipeData::m_MinSpawnCount' has a wrong offset!");
static_assert(offsetof(FNPCSpawnRecipeData, m_MaxSpawnCount) == 0x000031, "Member 'FNPCSpawnRecipeData::m_MaxSpawnCount' has a wrong offset!");
static_assert(offsetof(FNPCSpawnRecipeData, m_Weight) == 0x000034, "Member 'FNPCSpawnRecipeData::m_Weight' has a wrong offset!");
static_assert(offsetof(FNPCSpawnRecipeData, m_Ingredients) == 0x000038, "Member 'FNPCSpawnRecipeData::m_Ingredients' has a wrong offset!");

// ScriptStruct DuneSandbox.HazardArea
// 0x0028 (0x0028 - 0x0000)
struct FHazardArea final
{
public:
	TWeakObjectPtr<class AActor>                  m_SourceActor;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_Center;                                          // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Radius;                                          // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHazardArea) == 0x000008, "Wrong alignment on FHazardArea");
static_assert(sizeof(FHazardArea) == 0x000028, "Wrong size on FHazardArea");
static_assert(offsetof(FHazardArea, m_SourceActor) == 0x000000, "Member 'FHazardArea::m_SourceActor' has a wrong offset!");
static_assert(offsetof(FHazardArea, m_Center) == 0x000008, "Member 'FHazardArea::m_Center' has a wrong offset!");
static_assert(offsetof(FHazardArea, m_Radius) == 0x000020, "Member 'FHazardArea::m_Radius' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiCombatSettings
// 0x0048 (0x0048 - 0x0000)
struct FDuneAiCombatSettings final
{
public:
	struct FCurveTableRowHandle                   m_MeleeEngagementLimitCurve;                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   m_MeleeAttackLimitCurve;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   m_RangedEngagementLimitCurve;                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   m_RangedAttackLimitCurve;                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ThreatDecayPerSecond;                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ThreatDecayCooldown;                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAiCombatSettings) == 0x000008, "Wrong alignment on FDuneAiCombatSettings");
static_assert(sizeof(FDuneAiCombatSettings) == 0x000048, "Wrong size on FDuneAiCombatSettings");
static_assert(offsetof(FDuneAiCombatSettings, m_MeleeEngagementLimitCurve) == 0x000000, "Member 'FDuneAiCombatSettings::m_MeleeEngagementLimitCurve' has a wrong offset!");
static_assert(offsetof(FDuneAiCombatSettings, m_MeleeAttackLimitCurve) == 0x000010, "Member 'FDuneAiCombatSettings::m_MeleeAttackLimitCurve' has a wrong offset!");
static_assert(offsetof(FDuneAiCombatSettings, m_RangedEngagementLimitCurve) == 0x000020, "Member 'FDuneAiCombatSettings::m_RangedEngagementLimitCurve' has a wrong offset!");
static_assert(offsetof(FDuneAiCombatSettings, m_RangedAttackLimitCurve) == 0x000030, "Member 'FDuneAiCombatSettings::m_RangedAttackLimitCurve' has a wrong offset!");
static_assert(offsetof(FDuneAiCombatSettings, m_ThreatDecayPerSecond) == 0x000040, "Member 'FDuneAiCombatSettings::m_ThreatDecayPerSecond' has a wrong offset!");
static_assert(offsetof(FDuneAiCombatSettings, m_ThreatDecayCooldown) == 0x000044, "Member 'FDuneAiCombatSettings::m_ThreatDecayCooldown' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiLODSettings
// 0x0100 (0x0100 - 0x0000)
struct FDuneAiLODSettings final
{
public:
	float                                         m_EntityLod0Radius;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EntityLod1Radius;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EntityLod2Radius;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELodLevel, float>                        m_MovementTickRates;                               // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ELodLevel, float>                        m_SquadTickRates;                                  // 0x0060(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ELodLevel, float>                        m_ControllerTickRates;                             // 0x00B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAiLODSettings) == 0x000008, "Wrong alignment on FDuneAiLODSettings");
static_assert(sizeof(FDuneAiLODSettings) == 0x000100, "Wrong size on FDuneAiLODSettings");
static_assert(offsetof(FDuneAiLODSettings, m_EntityLod0Radius) == 0x000000, "Member 'FDuneAiLODSettings::m_EntityLod0Radius' has a wrong offset!");
static_assert(offsetof(FDuneAiLODSettings, m_EntityLod1Radius) == 0x000004, "Member 'FDuneAiLODSettings::m_EntityLod1Radius' has a wrong offset!");
static_assert(offsetof(FDuneAiLODSettings, m_EntityLod2Radius) == 0x000008, "Member 'FDuneAiLODSettings::m_EntityLod2Radius' has a wrong offset!");
static_assert(offsetof(FDuneAiLODSettings, m_MovementTickRates) == 0x000010, "Member 'FDuneAiLODSettings::m_MovementTickRates' has a wrong offset!");
static_assert(offsetof(FDuneAiLODSettings, m_SquadTickRates) == 0x000060, "Member 'FDuneAiLODSettings::m_SquadTickRates' has a wrong offset!");
static_assert(offsetof(FDuneAiLODSettings, m_ControllerTickRates) == 0x0000B0, "Member 'FDuneAiLODSettings::m_ControllerTickRates' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiSquadSettings
// 0x01B8 (0x01B8 - 0x0000)
struct FDuneAiSquadSettings final
{
public:
	TSoftObjectPtr<class UEnvQuery>               FindSquadFormationQuery;                           // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSquadSearchRadius;                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvestigationStimulusMaxAge;                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultAlliesInNeedHealthThreshold;                // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDuneSquadTimers, struct FTimerIntervalPerLod> m_DefaultTimerIntervals;                     // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UEnvQuery>               FindHalfCoverAttractorsQuery;                      // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UEnvQuery>               FindHalfCoverQuery;                                // 0x00C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UEnvQuery>               FindCoverStepOutLocationQuery;                     // 0x00F0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UEnvQuery>               FindInvestigationLocationsQuery;                   // 0x0120(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDecisionSetBase>        SquadDirectiveDecisionSet;                         // 0x0150(0x0030)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, DisableEditOnInstance, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UEnvQuery>               FindSandstormCoverQuery;                           // 0x0180(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMembersAllowedToCheckTarget;                    // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveTargetPlayersShareRadius;                      // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAiSquadSettings) == 0x000008, "Wrong alignment on FDuneAiSquadSettings");
static_assert(sizeof(FDuneAiSquadSettings) == 0x0001B8, "Wrong size on FDuneAiSquadSettings");
static_assert(offsetof(FDuneAiSquadSettings, FindSquadFormationQuery) == 0x000000, "Member 'FDuneAiSquadSettings::FindSquadFormationQuery' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, DefaultSquadSearchRadius) == 0x000030, "Member 'FDuneAiSquadSettings::DefaultSquadSearchRadius' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, InvestigationStimulusMaxAge) == 0x000034, "Member 'FDuneAiSquadSettings::InvestigationStimulusMaxAge' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, DefaultAlliesInNeedHealthThreshold) == 0x000038, "Member 'FDuneAiSquadSettings::DefaultAlliesInNeedHealthThreshold' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, m_DefaultTimerIntervals) == 0x000040, "Member 'FDuneAiSquadSettings::m_DefaultTimerIntervals' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, FindHalfCoverAttractorsQuery) == 0x000090, "Member 'FDuneAiSquadSettings::FindHalfCoverAttractorsQuery' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, FindHalfCoverQuery) == 0x0000C0, "Member 'FDuneAiSquadSettings::FindHalfCoverQuery' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, FindCoverStepOutLocationQuery) == 0x0000F0, "Member 'FDuneAiSquadSettings::FindCoverStepOutLocationQuery' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, FindInvestigationLocationsQuery) == 0x000120, "Member 'FDuneAiSquadSettings::FindInvestigationLocationsQuery' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, SquadDirectiveDecisionSet) == 0x000150, "Member 'FDuneAiSquadSettings::SquadDirectiveDecisionSet' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, FindSandstormCoverQuery) == 0x000180, "Member 'FDuneAiSquadSettings::FindSandstormCoverQuery' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, MaxMembersAllowedToCheckTarget) == 0x0001B0, "Member 'FDuneAiSquadSettings::MaxMembersAllowedToCheckTarget' has a wrong offset!");
static_assert(offsetof(FDuneAiSquadSettings, WaveTargetPlayersShareRadius) == 0x0001B4, "Member 'FDuneAiSquadSettings::WaveTargetPlayersShareRadius' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiPerceptionSettings
// 0x0028 (0x0028 - 0x0000)
struct FDuneAiPerceptionSettings final
{
public:
	float                                         SightMaxStimulusAge;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HearingMaxStimulusAge;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeKeepLostTarget;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerFootstepEmissionRateSeconds;                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerFootstepEmissionMaxRange;                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerFootstepRangeCrouchingModifier;              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerJumpingSoundEmissionMaxRange;                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerReloadingSoundEmissionMaxRange;              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SightSensorMaxTimeSliceMSPerTick;                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SquadKeepTargetMaxStimulusAge;                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAiPerceptionSettings) == 0x000004, "Wrong alignment on FDuneAiPerceptionSettings");
static_assert(sizeof(FDuneAiPerceptionSettings) == 0x000028, "Wrong size on FDuneAiPerceptionSettings");
static_assert(offsetof(FDuneAiPerceptionSettings, SightMaxStimulusAge) == 0x000000, "Member 'FDuneAiPerceptionSettings::SightMaxStimulusAge' has a wrong offset!");
static_assert(offsetof(FDuneAiPerceptionSettings, HearingMaxStimulusAge) == 0x000004, "Member 'FDuneAiPerceptionSettings::HearingMaxStimulusAge' has a wrong offset!");
static_assert(offsetof(FDuneAiPerceptionSettings, TimeKeepLostTarget) == 0x000008, "Member 'FDuneAiPerceptionSettings::TimeKeepLostTarget' has a wrong offset!");
static_assert(offsetof(FDuneAiPerceptionSettings, PlayerFootstepEmissionRateSeconds) == 0x00000C, "Member 'FDuneAiPerceptionSettings::PlayerFootstepEmissionRateSeconds' has a wrong offset!");
static_assert(offsetof(FDuneAiPerceptionSettings, PlayerFootstepEmissionMaxRange) == 0x000010, "Member 'FDuneAiPerceptionSettings::PlayerFootstepEmissionMaxRange' has a wrong offset!");
static_assert(offsetof(FDuneAiPerceptionSettings, PlayerFootstepRangeCrouchingModifier) == 0x000014, "Member 'FDuneAiPerceptionSettings::PlayerFootstepRangeCrouchingModifier' has a wrong offset!");
static_assert(offsetof(FDuneAiPerceptionSettings, PlayerJumpingSoundEmissionMaxRange) == 0x000018, "Member 'FDuneAiPerceptionSettings::PlayerJumpingSoundEmissionMaxRange' has a wrong offset!");
static_assert(offsetof(FDuneAiPerceptionSettings, PlayerReloadingSoundEmissionMaxRange) == 0x00001C, "Member 'FDuneAiPerceptionSettings::PlayerReloadingSoundEmissionMaxRange' has a wrong offset!");
static_assert(offsetof(FDuneAiPerceptionSettings, SightSensorMaxTimeSliceMSPerTick) == 0x000020, "Member 'FDuneAiPerceptionSettings::SightSensorMaxTimeSliceMSPerTick' has a wrong offset!");
static_assert(offsetof(FDuneAiPerceptionSettings, SquadKeepTargetMaxStimulusAge) == 0x000024, "Member 'FDuneAiPerceptionSettings::SquadKeepTargetMaxStimulusAge' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiAudioSettings
// 0x0070 (0x0070 - 0x0000)
struct FDuneAiAudioSettings final
{
public:
	TSoftClassPtr<class UClass>                   LasgunDamageTypeClass;                             // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DartDamageTypeClass;                               // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowDamageLimit;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MedDamageLimit;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighDamageLimit;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearDeathHealthRatio;                              // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAiAudioSettings) == 0x000008, "Wrong alignment on FDuneAiAudioSettings");
static_assert(sizeof(FDuneAiAudioSettings) == 0x000070, "Wrong size on FDuneAiAudioSettings");
static_assert(offsetof(FDuneAiAudioSettings, LasgunDamageTypeClass) == 0x000000, "Member 'FDuneAiAudioSettings::LasgunDamageTypeClass' has a wrong offset!");
static_assert(offsetof(FDuneAiAudioSettings, DartDamageTypeClass) == 0x000030, "Member 'FDuneAiAudioSettings::DartDamageTypeClass' has a wrong offset!");
static_assert(offsetof(FDuneAiAudioSettings, LowDamageLimit) == 0x000060, "Member 'FDuneAiAudioSettings::LowDamageLimit' has a wrong offset!");
static_assert(offsetof(FDuneAiAudioSettings, MedDamageLimit) == 0x000064, "Member 'FDuneAiAudioSettings::MedDamageLimit' has a wrong offset!");
static_assert(offsetof(FDuneAiAudioSettings, HighDamageLimit) == 0x000068, "Member 'FDuneAiAudioSettings::HighDamageLimit' has a wrong offset!");
static_assert(offsetof(FDuneAiAudioSettings, NearDeathHealthRatio) == 0x00006C, "Member 'FDuneAiAudioSettings::NearDeathHealthRatio' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAIWeaponAccuracySettings
// 0x0040 (0x0040 - 0x0000)
struct FDuneAIWeaponAccuracySettings final
{
public:
	TArray<struct FDuneAIWeaponAccuracyConfig>    m_WeaponMaxAccuracyModifierTiers;                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             m_HitRadiusOnAccuracyCurve;                        // 0x0010(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAIWeaponAccuracySettings) == 0x000008, "Wrong alignment on FDuneAIWeaponAccuracySettings");
static_assert(sizeof(FDuneAIWeaponAccuracySettings) == 0x000040, "Wrong size on FDuneAIWeaponAccuracySettings");
static_assert(offsetof(FDuneAIWeaponAccuracySettings, m_WeaponMaxAccuracyModifierTiers) == 0x000000, "Member 'FDuneAIWeaponAccuracySettings::m_WeaponMaxAccuracyModifierTiers' has a wrong offset!");
static_assert(offsetof(FDuneAIWeaponAccuracySettings, m_HitRadiusOnAccuracyCurve) == 0x000010, "Member 'FDuneAIWeaponAccuracySettings::m_HitRadiusOnAccuracyCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiKeyFocusSettings
// 0x0078 (0x0078 - 0x0000)
struct FDuneAiKeyFocusSettings final
{
public:
	TSoftObjectPtr<class UCurveFloat>             m_FocusDistanceCurve;                              // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FocusDistanceWeight;                             // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             m_FocusAngleCurve;                                 // 0x0038(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FocusAngleWeight;                                // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FocusTargetWeight;                               // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinFocusScoreToBeKeyNPC;                         // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_KeyNPCCalculationFrequency;                      // 0x0074(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAiKeyFocusSettings) == 0x000008, "Wrong alignment on FDuneAiKeyFocusSettings");
static_assert(sizeof(FDuneAiKeyFocusSettings) == 0x000078, "Wrong size on FDuneAiKeyFocusSettings");
static_assert(offsetof(FDuneAiKeyFocusSettings, m_FocusDistanceCurve) == 0x000000, "Member 'FDuneAiKeyFocusSettings::m_FocusDistanceCurve' has a wrong offset!");
static_assert(offsetof(FDuneAiKeyFocusSettings, m_FocusDistanceWeight) == 0x000030, "Member 'FDuneAiKeyFocusSettings::m_FocusDistanceWeight' has a wrong offset!");
static_assert(offsetof(FDuneAiKeyFocusSettings, m_FocusAngleCurve) == 0x000038, "Member 'FDuneAiKeyFocusSettings::m_FocusAngleCurve' has a wrong offset!");
static_assert(offsetof(FDuneAiKeyFocusSettings, m_FocusAngleWeight) == 0x000068, "Member 'FDuneAiKeyFocusSettings::m_FocusAngleWeight' has a wrong offset!");
static_assert(offsetof(FDuneAiKeyFocusSettings, m_FocusTargetWeight) == 0x00006C, "Member 'FDuneAiKeyFocusSettings::m_FocusTargetWeight' has a wrong offset!");
static_assert(offsetof(FDuneAiKeyFocusSettings, m_MinFocusScoreToBeKeyNPC) == 0x000070, "Member 'FDuneAiKeyFocusSettings::m_MinFocusScoreToBeKeyNPC' has a wrong offset!");
static_assert(offsetof(FDuneAiKeyFocusSettings, m_KeyNPCCalculationFrequency) == 0x000074, "Member 'FDuneAiKeyFocusSettings::m_KeyNPCCalculationFrequency' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiStaticCharactersSettings
// 0x0018 (0x0018 - 0x0000)
struct FDuneAiStaticCharactersSettings final
{
public:
	float                                         m_TickInterval;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_TimeToShow;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_TimeToHide;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VisibleRangeInSandStorm;                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VisibleRangeInNormal;                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxTimeSliceMSPerTick;                           // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAiStaticCharactersSettings) == 0x000004, "Wrong alignment on FDuneAiStaticCharactersSettings");
static_assert(sizeof(FDuneAiStaticCharactersSettings) == 0x000018, "Wrong size on FDuneAiStaticCharactersSettings");
static_assert(offsetof(FDuneAiStaticCharactersSettings, m_TickInterval) == 0x000000, "Member 'FDuneAiStaticCharactersSettings::m_TickInterval' has a wrong offset!");
static_assert(offsetof(FDuneAiStaticCharactersSettings, m_TimeToShow) == 0x000004, "Member 'FDuneAiStaticCharactersSettings::m_TimeToShow' has a wrong offset!");
static_assert(offsetof(FDuneAiStaticCharactersSettings, m_TimeToHide) == 0x000008, "Member 'FDuneAiStaticCharactersSettings::m_TimeToHide' has a wrong offset!");
static_assert(offsetof(FDuneAiStaticCharactersSettings, m_VisibleRangeInSandStorm) == 0x00000C, "Member 'FDuneAiStaticCharactersSettings::m_VisibleRangeInSandStorm' has a wrong offset!");
static_assert(offsetof(FDuneAiStaticCharactersSettings, m_VisibleRangeInNormal) == 0x000010, "Member 'FDuneAiStaticCharactersSettings::m_VisibleRangeInNormal' has a wrong offset!");
static_assert(offsetof(FDuneAiStaticCharactersSettings, m_MaxTimeSliceMSPerTick) == 0x000014, "Member 'FDuneAiStaticCharactersSettings::m_MaxTimeSliceMSPerTick' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiTierRespawnSettings
// 0x000C (0x000C - 0x0000)
struct FDuneAiTierRespawnSettings final
{
public:
	struct FGameplayTag                           m_TierTag;                                         // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RespawnTimeMinutes;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAiTierRespawnSettings) == 0x000004, "Wrong alignment on FDuneAiTierRespawnSettings");
static_assert(sizeof(FDuneAiTierRespawnSettings) == 0x00000C, "Wrong size on FDuneAiTierRespawnSettings");
static_assert(offsetof(FDuneAiTierRespawnSettings, m_TierTag) == 0x000000, "Member 'FDuneAiTierRespawnSettings::m_TierTag' has a wrong offset!");
static_assert(offsetof(FDuneAiTierRespawnSettings, m_RespawnTimeMinutes) == 0x000008, "Member 'FDuneAiTierRespawnSettings::m_RespawnTimeMinutes' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAiRespawnSettings
// 0x0018 (0x0018 - 0x0000)
struct FDuneAiRespawnSettings final
{
public:
	TArray<struct FDuneAiTierRespawnSettings>     m_TierRespawn;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_FallbackRespawnTimeMinutes;                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneAiRespawnSettings) == 0x000008, "Wrong alignment on FDuneAiRespawnSettings");
static_assert(sizeof(FDuneAiRespawnSettings) == 0x000018, "Wrong size on FDuneAiRespawnSettings");
static_assert(offsetof(FDuneAiRespawnSettings, m_TierRespawn) == 0x000000, "Member 'FDuneAiRespawnSettings::m_TierRespawn' has a wrong offset!");
static_assert(offsetof(FDuneAiRespawnSettings, m_FallbackRespawnTimeMinutes) == 0x000010, "Member 'FDuneAiRespawnSettings::m_FallbackRespawnTimeMinutes' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneNavGridActorRPCData
// 0x0058 (0x0058 - 0x0000)
struct FDuneNavGridActorRPCData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AgentTypes;                                        // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                VolumeSize;                                        // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 SavedData;                                         // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsInitial;                                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneNavGridActorRPCData) == 0x000008, "Wrong alignment on FDuneNavGridActorRPCData");
static_assert(sizeof(FDuneNavGridActorRPCData) == 0x000058, "Wrong size on FDuneNavGridActorRPCData");
static_assert(offsetof(FDuneNavGridActorRPCData, Location) == 0x000000, "Member 'FDuneNavGridActorRPCData::Location' has a wrong offset!");
static_assert(offsetof(FDuneNavGridActorRPCData, AgentTypes) == 0x000018, "Member 'FDuneNavGridActorRPCData::AgentTypes' has a wrong offset!");
static_assert(offsetof(FDuneNavGridActorRPCData, VolumeSize) == 0x000028, "Member 'FDuneNavGridActorRPCData::VolumeSize' has a wrong offset!");
static_assert(offsetof(FDuneNavGridActorRPCData, SavedData) == 0x000040, "Member 'FDuneNavGridActorRPCData::SavedData' has a wrong offset!");
static_assert(offsetof(FDuneNavGridActorRPCData, bIsInitial) == 0x000050, "Member 'FDuneNavGridActorRPCData::bIsInitial' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcWeaponEquipInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FNpcWeaponEquipInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNpcWeaponEquipInfo) == 0x000008, "Wrong alignment on FNpcWeaponEquipInfo");
static_assert(sizeof(FNpcWeaponEquipInfo) == 0x000020, "Wrong size on FNpcWeaponEquipInfo");

// ScriptStruct DuneSandbox.AIFootstepNoiseEvent
// 0x0000 (0x0040 - 0x0040)
struct FAIFootstepNoiseEvent final : public FAINoiseEvent
{
};
static_assert(alignof(FAIFootstepNoiseEvent) == 0x000008, "Wrong alignment on FAIFootstepNoiseEvent");
static_assert(sizeof(FAIFootstepNoiseEvent) == 0x000040, "Wrong size on FAIFootstepNoiseEvent");

// ScriptStruct DuneSandbox.AIWeaponFireNoiseEvent
// 0x0000 (0x0040 - 0x0040)
struct FAIWeaponFireNoiseEvent final : public FAINoiseEvent
{
};
static_assert(alignof(FAIWeaponFireNoiseEvent) == 0x000008, "Wrong alignment on FAIWeaponFireNoiseEvent");
static_assert(sizeof(FAIWeaponFireNoiseEvent) == 0x000040, "Wrong size on FAIWeaponFireNoiseEvent");

// ScriptStruct DuneSandbox.AIBarkNoiseEvent
// 0x0000 (0x0040 - 0x0040)
struct FAIBarkNoiseEvent final : public FAINoiseEvent
{
};
static_assert(alignof(FAIBarkNoiseEvent) == 0x000008, "Wrong alignment on FAIBarkNoiseEvent");
static_assert(sizeof(FAIBarkNoiseEvent) == 0x000040, "Wrong size on FAIBarkNoiseEvent");

// ScriptStruct DuneSandbox.AimOffsetBlendSpaceHolder
// 0x0040 (0x0058 - 0x0018)
struct FAimOffsetBlendSpaceHolder final : public FHolderBase
{
public:
	TSoftObjectPtr<class UAimOffsetBlendSpace>    m_AimOffsetBlendSpace;                             // 0x0018(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   m_Holder;                                          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAimOffsetBlendSpace*                   m_DefaultBlendSpace;                               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAimOffsetBlendSpaceHolder) == 0x000008, "Wrong alignment on FAimOffsetBlendSpaceHolder");
static_assert(sizeof(FAimOffsetBlendSpaceHolder) == 0x000058, "Wrong size on FAimOffsetBlendSpaceHolder");
static_assert(offsetof(FAimOffsetBlendSpaceHolder, m_AimOffsetBlendSpace) == 0x000018, "Member 'FAimOffsetBlendSpaceHolder::m_AimOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(FAimOffsetBlendSpaceHolder, m_Holder) == 0x000048, "Member 'FAimOffsetBlendSpaceHolder::m_Holder' has a wrong offset!");
static_assert(offsetof(FAimOffsetBlendSpaceHolder, m_DefaultBlendSpace) == 0x000050, "Member 'FAimOffsetBlendSpaceHolder::m_DefaultBlendSpace' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimNode_CopyFromPose
// 0x0058 (0x0068 - 0x0010)
struct FAnimNode_CopyFromPose final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePoseLink;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              OtherPoseLink;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         m_Bone;                                            // 0x0030(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         m_BoneAdditionalRelativeMovement;                  // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          m_bEnabled;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_TranslationAlpha;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RotationAlpha;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseComponentSpace;                              // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_BoneAdditionalRelativeMovementAlpha;             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_CopyFromPose) == 0x000008, "Wrong alignment on FAnimNode_CopyFromPose");
static_assert(sizeof(FAnimNode_CopyFromPose) == 0x000068, "Wrong size on FAnimNode_CopyFromPose");
static_assert(offsetof(FAnimNode_CopyFromPose, BasePoseLink) == 0x000010, "Member 'FAnimNode_CopyFromPose::BasePoseLink' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyFromPose, OtherPoseLink) == 0x000020, "Member 'FAnimNode_CopyFromPose::OtherPoseLink' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyFromPose, m_Bone) == 0x000030, "Member 'FAnimNode_CopyFromPose::m_Bone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyFromPose, m_BoneAdditionalRelativeMovement) == 0x000040, "Member 'FAnimNode_CopyFromPose::m_BoneAdditionalRelativeMovement' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyFromPose, m_bEnabled) == 0x000050, "Member 'FAnimNode_CopyFromPose::m_bEnabled' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyFromPose, m_TranslationAlpha) == 0x000054, "Member 'FAnimNode_CopyFromPose::m_TranslationAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyFromPose, m_RotationAlpha) == 0x000058, "Member 'FAnimNode_CopyFromPose::m_RotationAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyFromPose, m_bUseComponentSpace) == 0x00005C, "Member 'FAnimNode_CopyFromPose::m_bUseComponentSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyFromPose, m_BoneAdditionalRelativeMovementAlpha) == 0x000060, "Member 'FAnimNode_CopyFromPose::m_BoneAdditionalRelativeMovementAlpha' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimNode_MirrorFlipBones
// 0x0048 (0x0058 - 0x0010)
struct FAnimNode_MirrorFlipBones final : public FAnimNode_Base
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FMirrorFlipBoneIndex>           SingleBones;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMirrorFlipBoneIndex>           LeftBilateralBones;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMirrorFlipBoneIndex>           RightBilateralBones;                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_MirrorFlipBones) == 0x000008, "Wrong alignment on FAnimNode_MirrorFlipBones");
static_assert(sizeof(FAnimNode_MirrorFlipBones) == 0x000058, "Wrong size on FAnimNode_MirrorFlipBones");
static_assert(offsetof(FAnimNode_MirrorFlipBones, SourcePose) == 0x000010, "Member 'FAnimNode_MirrorFlipBones::SourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_MirrorFlipBones, SingleBones) == 0x000020, "Member 'FAnimNode_MirrorFlipBones::SingleBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_MirrorFlipBones, LeftBilateralBones) == 0x000030, "Member 'FAnimNode_MirrorFlipBones::LeftBilateralBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_MirrorFlipBones, RightBilateralBones) == 0x000040, "Member 'FAnimNode_MirrorFlipBones::RightBilateralBones' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimNode_TransformBoneChain
// 0x0038 (0x0048 - 0x0010)
struct FAnimNode_TransformBoneChain final : public FAnimNode_Base
{
public:
	struct FModifyBoneChain                       m_BoneChain;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 m_BonesToScale;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              SourcePose;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          m_bCanResetBoneScale;                              // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_TransformBoneChain) == 0x000008, "Wrong alignment on FAnimNode_TransformBoneChain");
static_assert(sizeof(FAnimNode_TransformBoneChain) == 0x000048, "Wrong size on FAnimNode_TransformBoneChain");
static_assert(offsetof(FAnimNode_TransformBoneChain, m_BoneChain) == 0x000010, "Member 'FAnimNode_TransformBoneChain::m_BoneChain' has a wrong offset!");
static_assert(offsetof(FAnimNode_TransformBoneChain, m_BonesToScale) == 0x000020, "Member 'FAnimNode_TransformBoneChain::m_BonesToScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_TransformBoneChain, SourcePose) == 0x000030, "Member 'FAnimNode_TransformBoneChain::SourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_TransformBoneChain, m_bCanResetBoneScale) == 0x000040, "Member 'FAnimNode_TransformBoneChain::m_bCanResetBoneScale' has a wrong offset!");

// ScriptStruct DuneSandbox.TryPerformListenActionResponseData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FTryPerformListenActionResponseData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTryPerformListenActionResponseData) == 0x000008, "Wrong alignment on FTryPerformListenActionResponseData");
static_assert(sizeof(FTryPerformListenActionResponseData) == 0x000050, "Wrong size on FTryPerformListenActionResponseData");

// ScriptStruct DuneSandbox.AnimNode_WeighToEffector
// 0x0048 (0x0058 - 0x0010)
struct FAnimNode_WeighToEffector final : public FAnimNode_Base
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ParentBone;                                        // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SocketEffector;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanUseWeight;                                     // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectorAlpha;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseLink                              SourcePose;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_WeighToEffector) == 0x000008, "Wrong alignment on FAnimNode_WeighToEffector");
static_assert(sizeof(FAnimNode_WeighToEffector) == 0x000058, "Wrong size on FAnimNode_WeighToEffector");
static_assert(offsetof(FAnimNode_WeighToEffector, BoneToModify) == 0x000010, "Member 'FAnimNode_WeighToEffector::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_WeighToEffector, ParentBone) == 0x000020, "Member 'FAnimNode_WeighToEffector::ParentBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_WeighToEffector, SocketEffector) == 0x000030, "Member 'FAnimNode_WeighToEffector::SocketEffector' has a wrong offset!");
static_assert(offsetof(FAnimNode_WeighToEffector, bCanUseWeight) == 0x000038, "Member 'FAnimNode_WeighToEffector::bCanUseWeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_WeighToEffector, EffectorAlpha) == 0x00003C, "Member 'FAnimNode_WeighToEffector::EffectorAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_WeighToEffector, SourcePose) == 0x000040, "Member 'FAnimNode_WeighToEffector::SourcePose' has a wrong offset!");

// ScriptStruct DuneSandbox.AnimTask
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FAnimTask final
{
public:
	class UObject*                                m_Object;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x48];                                       // 0x0008(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimTask) == 0x000010, "Wrong alignment on FAnimTask");
static_assert(sizeof(FAnimTask) == 0x000050, "Wrong size on FAnimTask");
static_assert(offsetof(FAnimTask, m_Object) == 0x000000, "Member 'FAnimTask::m_Object' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneLocomotionAnimInstanceProxy
// 0x0020 (0x08B0 - 0x0890)
struct FDuneLocomotionAnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_888[0x28];                                     // 0x0888(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneLocomotionAnimInstanceProxy) == 0x000010, "Wrong alignment on FDuneLocomotionAnimInstanceProxy");
static_assert(sizeof(FDuneLocomotionAnimInstanceProxy) == 0x0008B0, "Wrong size on FDuneLocomotionAnimInstanceProxy");

// ScriptStruct DuneSandbox.DuneMasterHumanoidAnimInstanceProxy
// 0x0070 (0x0900 - 0x0890)
struct FDuneMasterHumanoidAnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_888[0x78];                                     // 0x0888(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneMasterHumanoidAnimInstanceProxy) == 0x000010, "Wrong alignment on FDuneMasterHumanoidAnimInstanceProxy");
static_assert(sizeof(FDuneMasterHumanoidAnimInstanceProxy) == 0x000900, "Wrong size on FDuneMasterHumanoidAnimInstanceProxy");

// ScriptStruct DuneSandbox.EDewHarvestableType
// 0x0000 (0x0008 - 0x0008)
struct FEDewHarvestableType final : public FStringEnumValue
{
};
static_assert(alignof(FEDewHarvestableType) == 0x000004, "Wrong alignment on FEDewHarvestableType");
static_assert(sizeof(FEDewHarvestableType) == 0x000008, "Wrong size on FEDewHarvestableType");

// ScriptStruct DuneSandbox.AudioThreatInfo
// 0x0020 (0x0020 - 0x0000)
struct FAudioThreatInfo final
{
public:
	TArray<struct FAudioThreatDamageEvent>        LocalPlayerHits;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FAudioThreatFlybyEvent>         LocalPlayerFlybys;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioThreatInfo) == 0x000008, "Wrong alignment on FAudioThreatInfo");
static_assert(sizeof(FAudioThreatInfo) == 0x000020, "Wrong size on FAudioThreatInfo");
static_assert(offsetof(FAudioThreatInfo, LocalPlayerHits) == 0x000000, "Member 'FAudioThreatInfo::LocalPlayerHits' has a wrong offset!");
static_assert(offsetof(FAudioThreatInfo, LocalPlayerFlybys) == 0x000010, "Member 'FAudioThreatInfo::LocalPlayerFlybys' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneAudioCacheGpmEvents
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FDuneAudioCacheGpmEvents final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneAudioCacheGpmEvents) == 0x000004, "Wrong alignment on FDuneAudioCacheGpmEvents");
static_assert(sizeof(FDuneAudioCacheGpmEvents) == 0x000008, "Wrong size on FDuneAudioCacheGpmEvents");

// ScriptStruct DuneSandbox.EDuneAudioMasteringMode
// 0x0000 (0x0008 - 0x0008)
struct FEDuneAudioMasteringMode final : public FStringEnumValue
{
};
static_assert(alignof(FEDuneAudioMasteringMode) == 0x000004, "Wrong alignment on FEDuneAudioMasteringMode");
static_assert(sizeof(FEDuneAudioMasteringMode) == 0x000008, "Wrong size on FEDuneAudioMasteringMode");

// ScriptStruct DuneSandbox.DuneAudioObjectTypeSettings
// 0x0180 (0x0180 - 0x0000)
struct FDuneAudioObjectTypeSettings final
{
public:
	struct FFcAudioObjectSettings                 Settings[0x10];                                    // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneAudioObjectTypeSettings) == 0x000008, "Wrong alignment on FDuneAudioObjectTypeSettings");
static_assert(sizeof(FDuneAudioObjectTypeSettings) == 0x000180, "Wrong size on FDuneAudioObjectTypeSettings");
static_assert(offsetof(FDuneAudioObjectTypeSettings, Settings) == 0x000000, "Member 'FDuneAudioObjectTypeSettings::Settings' has a wrong offset!");

// ScriptStruct DuneSandbox.EDunePlayerVoiceGrunt
// 0x0000 (0x0008 - 0x0008)
struct FEDunePlayerVoiceGrunt final : public FStringEnumValue
{
};
static_assert(alignof(FEDunePlayerVoiceGrunt) == 0x000004, "Wrong alignment on FEDunePlayerVoiceGrunt");
static_assert(sizeof(FEDunePlayerVoiceGrunt) == 0x000008, "Wrong size on FEDunePlayerVoiceGrunt");

// ScriptStruct DuneSandbox.BattlegroupsMapSettingsEntry
// 0x0028 (0x0028 - 0x0000)
struct FBattlegroupsMapSettingsEntry final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattlegroupsMapSettings               MapSettings;                                       // 0x0010(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlegroupsMapSettingsEntry) == 0x000008, "Wrong alignment on FBattlegroupsMapSettingsEntry");
static_assert(sizeof(FBattlegroupsMapSettingsEntry) == 0x000028, "Wrong size on FBattlegroupsMapSettingsEntry");
static_assert(offsetof(FBattlegroupsMapSettingsEntry, MapName) == 0x000000, "Member 'FBattlegroupsMapSettingsEntry::MapName' has a wrong offset!");
static_assert(offsetof(FBattlegroupsMapSettingsEntry, MapSettings) == 0x000010, "Member 'FBattlegroupsMapSettingsEntry::MapSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.DunePlayerVoiceSet
// 0x00A8 (0x00A8 - 0x0000)
struct FDunePlayerVoiceSet final
{
public:
	bool                                          m_Enabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_DisplayName;                                     // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EDuneCharacterGender                          m_DefaultBodyType;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFcAudioEvent>           m_CharacterCreationVoice;                          // 0x0028(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FEDunePlayerVoiceGrunt, struct FDunePlayerVoiceGrunt> m_GruntEvents;                 // 0x0058(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDunePlayerVoiceSet) == 0x000008, "Wrong alignment on FDunePlayerVoiceSet");
static_assert(sizeof(FDunePlayerVoiceSet) == 0x0000A8, "Wrong size on FDunePlayerVoiceSet");
static_assert(offsetof(FDunePlayerVoiceSet, m_Enabled) == 0x000000, "Member 'FDunePlayerVoiceSet::m_Enabled' has a wrong offset!");
static_assert(offsetof(FDunePlayerVoiceSet, m_DisplayName) == 0x000008, "Member 'FDunePlayerVoiceSet::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FDunePlayerVoiceSet, m_DefaultBodyType) == 0x000020, "Member 'FDunePlayerVoiceSet::m_DefaultBodyType' has a wrong offset!");
static_assert(offsetof(FDunePlayerVoiceSet, m_CharacterCreationVoice) == 0x000028, "Member 'FDunePlayerVoiceSet::m_CharacterCreationVoice' has a wrong offset!");
static_assert(offsetof(FDunePlayerVoiceSet, m_GruntEvents) == 0x000058, "Member 'FDunePlayerVoiceSet::m_GruntEvents' has a wrong offset!");

// ScriptStruct DuneSandbox.EDunePlayerVoiceSet
// 0x0000 (0x0008 - 0x0008)
struct FEDunePlayerVoiceSet final : public FStringEnumValue
{
};
static_assert(alignof(FEDunePlayerVoiceSet) == 0x000004, "Wrong alignment on FEDunePlayerVoiceSet");
static_assert(sizeof(FEDunePlayerVoiceSet) == 0x000008, "Wrong size on FEDunePlayerVoiceSet");

// ScriptStruct DuneSandbox.PlayerAccessCodesInfoArray
// 0x0018 (0x0140 - 0x0128)
struct FPlayerAccessCodesInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FAccessCodeData>                m_AccessCodesData;                                 // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UPlayerAccessCodesComponent*            m_Owner;                                           // 0x0138(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayerAccessCodesInfoArray) == 0x000008, "Wrong alignment on FPlayerAccessCodesInfoArray");
static_assert(sizeof(FPlayerAccessCodesInfoArray) == 0x000140, "Wrong size on FPlayerAccessCodesInfoArray");
static_assert(offsetof(FPlayerAccessCodesInfoArray, m_AccessCodesData) == 0x000128, "Member 'FPlayerAccessCodesInfoArray::m_AccessCodesData' has a wrong offset!");
static_assert(offsetof(FPlayerAccessCodesInfoArray, m_Owner) == 0x000138, "Member 'FPlayerAccessCodesInfoArray::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemLandclaimData
// 0x0010 (0x0010 - 0x0000)
struct FTotemLandclaimData final
{
public:
	TArray<class ULandclaimBaseComponent*>        m_Landclaims;                                      // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTotemLandclaimData) == 0x000008, "Wrong alignment on FTotemLandclaimData");
static_assert(sizeof(FTotemLandclaimData) == 0x000010, "Wrong size on FTotemLandclaimData");
static_assert(offsetof(FTotemLandclaimData, m_Landclaims) == 0x000000, "Member 'FTotemLandclaimData::m_Landclaims' has a wrong offset!");

// ScriptStruct DuneSandbox.LandclaimSegmentsInfoArray
// 0x0018 (0x0140 - 0x0128)
struct FLandclaimSegmentsInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FLandclaimSegmentData>          m_LandclaimSegmentsData;                           // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class ADunePlaceableTotem*                    m_Owner;                                           // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLandclaimSegmentsInfoArray) == 0x000008, "Wrong alignment on FLandclaimSegmentsInfoArray");
static_assert(sizeof(FLandclaimSegmentsInfoArray) == 0x000140, "Wrong size on FLandclaimSegmentsInfoArray");
static_assert(offsetof(FLandclaimSegmentsInfoArray, m_LandclaimSegmentsData) == 0x000128, "Member 'FLandclaimSegmentsInfoArray::m_LandclaimSegmentsData' has a wrong offset!");
static_assert(offsetof(FLandclaimSegmentsInfoArray, m_Owner) == 0x000138, "Member 'FLandclaimSegmentsInfoArray::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.BattlegroupSortTabProperties
// 0x0040 (0x0040 - 0x0000)
struct FBattlegroupSortTabProperties final
{
public:
	EBattlegroupSortOption                        m_BattlegroupSortOption;                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_TabTitle;                                        // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FSlateChildSize                        m_SlateSize;                                       // 0x0020(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_DesiredWidth;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EBattlegroupSortOption>                m_SortOrderList;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlegroupSortTabProperties) == 0x000008, "Wrong alignment on FBattlegroupSortTabProperties");
static_assert(sizeof(FBattlegroupSortTabProperties) == 0x000040, "Wrong size on FBattlegroupSortTabProperties");
static_assert(offsetof(FBattlegroupSortTabProperties, m_BattlegroupSortOption) == 0x000000, "Member 'FBattlegroupSortTabProperties::m_BattlegroupSortOption' has a wrong offset!");
static_assert(offsetof(FBattlegroupSortTabProperties, m_TabTitle) == 0x000008, "Member 'FBattlegroupSortTabProperties::m_TabTitle' has a wrong offset!");
static_assert(offsetof(FBattlegroupSortTabProperties, m_SlateSize) == 0x000020, "Member 'FBattlegroupSortTabProperties::m_SlateSize' has a wrong offset!");
static_assert(offsetof(FBattlegroupSortTabProperties, m_DesiredWidth) == 0x000028, "Member 'FBattlegroupSortTabProperties::m_DesiredWidth' has a wrong offset!");
static_assert(offsetof(FBattlegroupSortTabProperties, m_SortOrderList) == 0x000030, "Member 'FBattlegroupSortTabProperties::m_SortOrderList' has a wrong offset!");

// ScriptStruct DuneSandbox.HitScanVFXData
// 0x0050 (0x0050 - 0x0000)
struct FHitScanVFXData final
{
public:
	struct FVector                                m_StartLocation;                                   // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_EndLocation;                                     // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_HitNormal;                                       // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              m_SurfaceType;                                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bSuccessHit;                                     // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bShielded;                                       // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitScanVFXData) == 0x000008, "Wrong alignment on FHitScanVFXData");
static_assert(sizeof(FHitScanVFXData) == 0x000050, "Wrong size on FHitScanVFXData");
static_assert(offsetof(FHitScanVFXData, m_StartLocation) == 0x000000, "Member 'FHitScanVFXData::m_StartLocation' has a wrong offset!");
static_assert(offsetof(FHitScanVFXData, m_EndLocation) == 0x000018, "Member 'FHitScanVFXData::m_EndLocation' has a wrong offset!");
static_assert(offsetof(FHitScanVFXData, m_HitNormal) == 0x000030, "Member 'FHitScanVFXData::m_HitNormal' has a wrong offset!");
static_assert(offsetof(FHitScanVFXData, m_SurfaceType) == 0x000048, "Member 'FHitScanVFXData::m_SurfaceType' has a wrong offset!");
static_assert(offsetof(FHitScanVFXData, m_bSuccessHit) == 0x000049, "Member 'FHitScanVFXData::m_bSuccessHit' has a wrong offset!");
static_assert(offsetof(FHitScanVFXData, m_bShielded) == 0x00004A, "Member 'FHitScanVFXData::m_bShielded' has a wrong offset!");

// ScriptStruct DuneSandbox.ValidateTravelRequestMessage
// 0x0070 (0x0070 - 0x0000)
struct FValidateTravelRequestMessage final
{
public:
	class FString                                 RequestID;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FlsId;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FlowId;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PartitionId;                                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerID;                                          // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginId;                                          // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         UnixTimestamp;                                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValidateTravelRequestMessage) == 0x000008, "Wrong alignment on FValidateTravelRequestMessage");
static_assert(sizeof(FValidateTravelRequestMessage) == 0x000070, "Wrong size on FValidateTravelRequestMessage");
static_assert(offsetof(FValidateTravelRequestMessage, RequestID) == 0x000000, "Member 'FValidateTravelRequestMessage::RequestID' has a wrong offset!");
static_assert(offsetof(FValidateTravelRequestMessage, FlsId) == 0x000010, "Member 'FValidateTravelRequestMessage::FlsId' has a wrong offset!");
static_assert(offsetof(FValidateTravelRequestMessage, FlowId) == 0x000020, "Member 'FValidateTravelRequestMessage::FlowId' has a wrong offset!");
static_assert(offsetof(FValidateTravelRequestMessage, MapName) == 0x000030, "Member 'FValidateTravelRequestMessage::MapName' has a wrong offset!");
static_assert(offsetof(FValidateTravelRequestMessage, PartitionId) == 0x000040, "Member 'FValidateTravelRequestMessage::PartitionId' has a wrong offset!");
static_assert(offsetof(FValidateTravelRequestMessage, ServerID) == 0x000048, "Member 'FValidateTravelRequestMessage::ServerID' has a wrong offset!");
static_assert(offsetof(FValidateTravelRequestMessage, OriginId) == 0x000058, "Member 'FValidateTravelRequestMessage::OriginId' has a wrong offset!");
static_assert(offsetof(FValidateTravelRequestMessage, UnixTimestamp) == 0x000068, "Member 'FValidateTravelRequestMessage::UnixTimestamp' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingFastSerializer
// 0x0130 (0x0130 - 0x0000)
struct alignas(0x08) FBuildingFastSerializer final
{
public:
	uint8                                         Pad_0[0x130];                                      // 0x0000(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingFastSerializer) == 0x000008, "Wrong alignment on FBuildingFastSerializer");
static_assert(sizeof(FBuildingFastSerializer) == 0x000130, "Wrong size on FBuildingFastSerializer");

// ScriptStruct DuneSandbox.CanBePlacedData
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FCanBePlacedData final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCanBePlacedData) == 0x000008, "Wrong alignment on FCanBePlacedData");
static_assert(sizeof(FCanBePlacedData) == 0x000058, "Wrong size on FCanBePlacedData");

// ScriptStruct DuneSandbox.ProximityColors
// 0x0008 (0x0008 - 0x0000)
struct FProximityColors final
{
public:
	struct FColor                                 LightColor;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DarkColor;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProximityColors) == 0x000004, "Wrong alignment on FProximityColors");
static_assert(sizeof(FProximityColors) == 0x000008, "Wrong size on FProximityColors");
static_assert(offsetof(FProximityColors, LightColor) == 0x000000, "Member 'FProximityColors::LightColor' has a wrong offset!");
static_assert(offsetof(FProximityColors, DarkColor) == 0x000004, "Member 'FProximityColors::DarkColor' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerBuildingFavoritesInfoArray
// 0x0028 (0x0150 - 0x0128)
struct FPlayerBuildingFavoritesInfoArray final : public FFastArraySerializer
{
public:
	class UBuildingSubsystem*                     BuildingSubsystem;                                 // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBuildingFavoriteData>          m_BuildingFavoritesData;                           // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEBuildableType>                m_BuildingFavorites;                               // 0x0140(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayerBuildingFavoritesInfoArray) == 0x000008, "Wrong alignment on FPlayerBuildingFavoritesInfoArray");
static_assert(sizeof(FPlayerBuildingFavoritesInfoArray) == 0x000150, "Wrong size on FPlayerBuildingFavoritesInfoArray");
static_assert(offsetof(FPlayerBuildingFavoritesInfoArray, BuildingSubsystem) == 0x000128, "Member 'FPlayerBuildingFavoritesInfoArray::BuildingSubsystem' has a wrong offset!");
static_assert(offsetof(FPlayerBuildingFavoritesInfoArray, m_BuildingFavoritesData) == 0x000130, "Member 'FPlayerBuildingFavoritesInfoArray::m_BuildingFavoritesData' has a wrong offset!");
static_assert(offsetof(FPlayerBuildingFavoritesInfoArray, m_BuildingFavorites) == 0x000140, "Member 'FPlayerBuildingFavoritesInfoArray::m_BuildingFavorites' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingSocketDataContainer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBuildingSocketDataContainer final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingSocketDataContainer) == 0x000008, "Wrong alignment on FBuildingSocketDataContainer");
static_assert(sizeof(FBuildingSocketDataContainer) == 0x000010, "Wrong size on FBuildingSocketDataContainer");

// ScriptStruct DuneSandbox.ProcessedPotentialGhosts
// 0x0010 (0x0010 - 0x0000)
struct FProcessedPotentialGhosts final
{
public:
	TArray<struct FPotentialBuildGhost>           m_Ghosts;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcessedPotentialGhosts) == 0x000008, "Wrong alignment on FProcessedPotentialGhosts");
static_assert(sizeof(FProcessedPotentialGhosts) == 0x000010, "Wrong size on FProcessedPotentialGhosts");
static_assert(offsetof(FProcessedPotentialGhosts, m_Ghosts) == 0x000000, "Member 'FProcessedPotentialGhosts::m_Ghosts' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneyStoryPlayerDataFastArrayItem
// 0x003C (0x0048 - 0x000C)
struct FJourneyStoryPlayerDataFastArrayItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADunePlayerCharacter*                   ClientCachedDunePlayerCharacter;                   // 0x0010(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADunePlayerCharacter*                   DunePlayerCharacter;                               // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              PlayerPersistenceId;                               // 0x0020(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CompletedJourneyEventTags;                         // 0x0028(0x0020)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJourneyStoryPlayerDataFastArrayItem) == 0x000008, "Wrong alignment on FJourneyStoryPlayerDataFastArrayItem");
static_assert(sizeof(FJourneyStoryPlayerDataFastArrayItem) == 0x000048, "Wrong size on FJourneyStoryPlayerDataFastArrayItem");
static_assert(offsetof(FJourneyStoryPlayerDataFastArrayItem, ClientCachedDunePlayerCharacter) == 0x000010, "Member 'FJourneyStoryPlayerDataFastArrayItem::ClientCachedDunePlayerCharacter' has a wrong offset!");
static_assert(offsetof(FJourneyStoryPlayerDataFastArrayItem, DunePlayerCharacter) == 0x000018, "Member 'FJourneyStoryPlayerDataFastArrayItem::DunePlayerCharacter' has a wrong offset!");
static_assert(offsetof(FJourneyStoryPlayerDataFastArrayItem, PlayerPersistenceId) == 0x000020, "Member 'FJourneyStoryPlayerDataFastArrayItem::PlayerPersistenceId' has a wrong offset!");
static_assert(offsetof(FJourneyStoryPlayerDataFastArrayItem, CompletedJourneyEventTags) == 0x000028, "Member 'FJourneyStoryPlayerDataFastArrayItem::CompletedJourneyEventTags' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerUnlockedBuildingSetsInfoArray
// 0x0028 (0x0150 - 0x0128)
struct FPlayerUnlockedBuildingSetsInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FUnlockedBuildingSetData>       m_UnlockedBuildingSetsData;                        // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEBuildableUnlockableSet>       m_LearnedBuildingSets;                             // 0x0138(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPrivate)
	class UBuildingPlayerStateComponent*          m_Owner;                                           // 0x0148(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayerUnlockedBuildingSetsInfoArray) == 0x000008, "Wrong alignment on FPlayerUnlockedBuildingSetsInfoArray");
static_assert(sizeof(FPlayerUnlockedBuildingSetsInfoArray) == 0x000150, "Wrong size on FPlayerUnlockedBuildingSetsInfoArray");
static_assert(offsetof(FPlayerUnlockedBuildingSetsInfoArray, m_UnlockedBuildingSetsData) == 0x000128, "Member 'FPlayerUnlockedBuildingSetsInfoArray::m_UnlockedBuildingSetsData' has a wrong offset!");
static_assert(offsetof(FPlayerUnlockedBuildingSetsInfoArray, m_LearnedBuildingSets) == 0x000138, "Member 'FPlayerUnlockedBuildingSetsInfoArray::m_LearnedBuildingSets' has a wrong offset!");
static_assert(offsetof(FPlayerUnlockedBuildingSetsInfoArray, m_Owner) == 0x000148, "Member 'FPlayerUnlockedBuildingSetsInfoArray::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.EBuildableStructureCategoryComposedLimit
// 0x0000 (0x0008 - 0x0008)
struct FEBuildableStructureCategoryComposedLimit final : public FStringEnumValue
{
};
static_assert(alignof(FEBuildableStructureCategoryComposedLimit) == 0x000004, "Wrong alignment on FEBuildableStructureCategoryComposedLimit");
static_assert(sizeof(FEBuildableStructureCategoryComposedLimit) == 0x000008, "Wrong size on FEBuildableStructureCategoryComposedLimit");

// ScriptStruct DuneSandbox.BuildingBlueprintData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FBuildingBlueprintData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingBlueprintData) == 0x000008, "Wrong alignment on FBuildingBlueprintData");
static_assert(sizeof(FBuildingBlueprintData) == 0x000050, "Wrong size on FBuildingBlueprintData");

// ScriptStruct DuneSandbox.AttachedModuleData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAttachedModuleData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int8                                          m_SourceSocketIndex;                               // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x17];                                      // 0x0011(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttachedModuleData) == 0x000008, "Wrong alignment on FAttachedModuleData");
static_assert(sizeof(FAttachedModuleData) == 0x000028, "Wrong size on FAttachedModuleData");
static_assert(offsetof(FAttachedModuleData, m_SourceSocketIndex) == 0x000010, "Member 'FAttachedModuleData::m_SourceSocketIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildingSocketData
// 0x0048 (0x0048 - 0x0000)
struct FBuildingSocketData final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	int8                                          m_BestAttachStability;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0xB];                                       // 0x001D(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAttachedModuleData>            m_AttachedModules;                                 // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingSocketData) == 0x000008, "Wrong alignment on FBuildingSocketData");
static_assert(sizeof(FBuildingSocketData) == 0x000048, "Wrong size on FBuildingSocketData");
static_assert(offsetof(FBuildingSocketData, m_BestAttachStability) == 0x00001C, "Member 'FBuildingSocketData::m_BestAttachStability' has a wrong offset!");
static_assert(offsetof(FBuildingSocketData, m_AttachedModules) == 0x000028, "Member 'FBuildingSocketData::m_AttachedModules' has a wrong offset!");

// ScriptStruct DuneSandbox.DestroyBuildableData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FDestroyBuildableData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDestroyBuildableData) == 0x000008, "Wrong alignment on FDestroyBuildableData");
static_assert(sizeof(FDestroyBuildableData) == 0x000040, "Wrong size on FDestroyBuildableData");

// ScriptStruct DuneSandbox.PerPlayerWaterLootContainerData
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FPerPlayerWaterLootContainerData final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerPlayerWaterLootContainerData) == 0x000010, "Wrong alignment on FPerPlayerWaterLootContainerData");
static_assert(sizeof(FPerPlayerWaterLootContainerData) == 0x0000F0, "Wrong size on FPerPlayerWaterLootContainerData");

// ScriptStruct DuneSandbox.BuildableDestructionSpawnedData
// 0x00A0 (0x00A0 - 0x0000)
struct FBuildableDestructionSpawnedData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   m_BuildingStaticMeshComponent;                     // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      m_NiagaraComponent;                                // 0x0010(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             m_Transform;                                       // 0x0020(0x0060)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_Bounds;                                          // 0x0080(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildableDestructionSpawnedData) == 0x000010, "Wrong alignment on FBuildableDestructionSpawnedData");
static_assert(sizeof(FBuildableDestructionSpawnedData) == 0x0000A0, "Wrong size on FBuildableDestructionSpawnedData");
static_assert(offsetof(FBuildableDestructionSpawnedData, m_BuildingStaticMeshComponent) == 0x000008, "Member 'FBuildableDestructionSpawnedData::m_BuildingStaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FBuildableDestructionSpawnedData, m_NiagaraComponent) == 0x000010, "Member 'FBuildableDestructionSpawnedData::m_NiagaraComponent' has a wrong offset!");
static_assert(offsetof(FBuildableDestructionSpawnedData, m_Transform) == 0x000020, "Member 'FBuildableDestructionSpawnedData::m_Transform' has a wrong offset!");
static_assert(offsetof(FBuildableDestructionSpawnedData, m_Bounds) == 0x000080, "Member 'FBuildableDestructionSpawnedData::m_Bounds' has a wrong offset!");

// ScriptStruct DuneSandbox.HydrationCameraSettings
// 0x0760 (0x0760 - 0x0000)
struct FHydrationCameraSettings final
{
public:
	struct FDuneCameraContext                     m_CameraContextProperties;                         // 0x0000(0x0060)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDuneCameraContextPostProcessing       m_CameraContextPostProcessing;                     // 0x0060(0x0700)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHydrationCameraSettings) == 0x000010, "Wrong alignment on FHydrationCameraSettings");
static_assert(sizeof(FHydrationCameraSettings) == 0x000760, "Wrong size on FHydrationCameraSettings");
static_assert(offsetof(FHydrationCameraSettings, m_CameraContextProperties) == 0x000000, "Member 'FHydrationCameraSettings::m_CameraContextProperties' has a wrong offset!");
static_assert(offsetof(FHydrationCameraSettings, m_CameraContextPostProcessing) == 0x000060, "Member 'FHydrationCameraSettings::m_CameraContextPostProcessing' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneCameraCharacterFlags
// 0x0002 (0x0002 - 0x0000)
struct FDuneCameraCharacterFlags final
{
public:
	bool                                          m_bCharacterWeaponInHand;                          // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bCharacterWeaponInADS;                           // 0x0001(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneCameraCharacterFlags) == 0x000001, "Wrong alignment on FDuneCameraCharacterFlags");
static_assert(sizeof(FDuneCameraCharacterFlags) == 0x000002, "Wrong size on FDuneCameraCharacterFlags");
static_assert(offsetof(FDuneCameraCharacterFlags, m_bCharacterWeaponInHand) == 0x000000, "Member 'FDuneCameraCharacterFlags::m_bCharacterWeaponInHand' has a wrong offset!");
static_assert(offsetof(FDuneCameraCharacterFlags, m_bCharacterWeaponInADS) == 0x000001, "Member 'FDuneCameraCharacterFlags::m_bCharacterWeaponInADS' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneCameraCharacterWeaponData
// 0x0010 (0x0010 - 0x0000)
struct FDuneCameraCharacterWeaponData final
{
public:
	TArray<TSubclassOf<class UDuneCameraModifier>> m_CameraModifiers;                                // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneCameraCharacterWeaponData) == 0x000008, "Wrong alignment on FDuneCameraCharacterWeaponData");
static_assert(sizeof(FDuneCameraCharacterWeaponData) == 0x000010, "Wrong size on FDuneCameraCharacterWeaponData");
static_assert(offsetof(FDuneCameraCharacterWeaponData, m_CameraModifiers) == 0x000000, "Member 'FDuneCameraCharacterWeaponData::m_CameraModifiers' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneCameraVehicleFlags
// 0x0024 (0x0024 - 0x0000)
struct FDuneCameraVehicleFlags final
{
public:
	bool                                          m_bWantsRecenterCamera;                            // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDisableAutoCenter;                              // 0x0001(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bSeatedInVehicle;                                // 0x0002(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           m_CachedCurrentVehicleRoleTag;                     // 0x0004(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDuneCameraVehicleRoleTags             m_CachedVehicleRoleTags;                           // 0x000C(0x0018)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneCameraVehicleFlags) == 0x000004, "Wrong alignment on FDuneCameraVehicleFlags");
static_assert(sizeof(FDuneCameraVehicleFlags) == 0x000024, "Wrong size on FDuneCameraVehicleFlags");
static_assert(offsetof(FDuneCameraVehicleFlags, m_bWantsRecenterCamera) == 0x000000, "Member 'FDuneCameraVehicleFlags::m_bWantsRecenterCamera' has a wrong offset!");
static_assert(offsetof(FDuneCameraVehicleFlags, m_bDisableAutoCenter) == 0x000001, "Member 'FDuneCameraVehicleFlags::m_bDisableAutoCenter' has a wrong offset!");
static_assert(offsetof(FDuneCameraVehicleFlags, m_bSeatedInVehicle) == 0x000002, "Member 'FDuneCameraVehicleFlags::m_bSeatedInVehicle' has a wrong offset!");
static_assert(offsetof(FDuneCameraVehicleFlags, m_CachedCurrentVehicleRoleTag) == 0x000004, "Member 'FDuneCameraVehicleFlags::m_CachedCurrentVehicleRoleTag' has a wrong offset!");
static_assert(offsetof(FDuneCameraVehicleFlags, m_CachedVehicleRoleTags) == 0x00000C, "Member 'FDuneCameraVehicleFlags::m_CachedVehicleRoleTags' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneSpringArmModifierValues
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FDuneSpringArmModifierValues final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneSpringArmModifierValues) == 0x000008, "Wrong alignment on FDuneSpringArmModifierValues");
static_assert(sizeof(FDuneSpringArmModifierValues) == 0x000050, "Wrong size on FDuneSpringArmModifierValues");

// ScriptStruct DuneSandbox.CartographyMapState
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x10) FCartographyMapState final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollectionInstance*   MPCInstance;                                       // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x110];                                     // 0x0060(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCartographyMapState) == 0x000010, "Wrong alignment on FCartographyMapState");
static_assert(sizeof(FCartographyMapState) == 0x000170, "Wrong size on FCartographyMapState");
static_assert(offsetof(FCartographyMapState, MPCInstance) == 0x000058, "Member 'FCartographyMapState::MPCInstance' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterRotationCounter
// 0x0028 (0x0028 - 0x0000)
struct FCharacterRotationCounter final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRotationSetWrapper>            m_RotationModesToRequestingSystems;                // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterRotationCounter) == 0x000008, "Wrong alignment on FCharacterRotationCounter");
static_assert(sizeof(FCharacterRotationCounter) == 0x000028, "Wrong size on FCharacterRotationCounter");
static_assert(offsetof(FCharacterRotationCounter, m_RotationModesToRequestingSystems) == 0x000008, "Member 'FCharacterRotationCounter::m_RotationModesToRequestingSystems' has a wrong offset!");

// ScriptStruct DuneSandbox.ECharacterStatID
// 0x0000 (0x0008 - 0x0008)
struct FECharacterStatID : public FStringEnumValue
{
};
static_assert(alignof(FECharacterStatID) == 0x000004, "Wrong alignment on FECharacterStatID");
static_assert(sizeof(FECharacterStatID) == 0x000008, "Wrong size on FECharacterStatID");

// ScriptStruct DuneSandbox.ECharacterFloatStatID
// 0x0000 (0x0008 - 0x0008)
struct FECharacterFloatStatID final : public FECharacterStatID
{
};
static_assert(alignof(FECharacterFloatStatID) == 0x000004, "Wrong alignment on FECharacterFloatStatID");
static_assert(sizeof(FECharacterFloatStatID) == 0x000008, "Wrong size on FECharacterFloatStatID");

// ScriptStruct DuneSandbox.FootstepVFX
// 0x0018 (0x0018 - 0x0000)
struct FFootstepVFX final
{
public:
	class UPhysicalMaterial*                      m_Material;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         m_VFX;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         m_VFXAttached;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepVFX) == 0x000008, "Wrong alignment on FFootstepVFX");
static_assert(sizeof(FFootstepVFX) == 0x000018, "Wrong size on FFootstepVFX");
static_assert(offsetof(FFootstepVFX, m_Material) == 0x000000, "Member 'FFootstepVFX::m_Material' has a wrong offset!");
static_assert(offsetof(FFootstepVFX, m_VFX) == 0x000008, "Member 'FFootstepVFX::m_VFX' has a wrong offset!");
static_assert(offsetof(FFootstepVFX, m_VFXAttached) == 0x000010, "Member 'FFootstepVFX::m_VFXAttached' has a wrong offset!");

// ScriptStruct DuneSandbox.RespawnLocationData
// 0x005C (0x0068 - 0x000C)
struct FRespawnLocationData final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRespawnLocationUniqueId               m_UniqueId;                                        // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESpawnLocationType                            m_LocationType;                                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FESpawnLocationGroup                   m_LocationGroup;                                   // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FEDuneMapId                            m_Map;                                             // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         m_DimensionId;                                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSpawnTransform                        m_Transform;                                       // 0x0030(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FUniqueID                              m_LocationActorUniqueId;                           // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_bIsAvailable;                                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         m_LastUsedUnixTimestamp;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRespawnLocationData) == 0x000008, "Wrong alignment on FRespawnLocationData");
static_assert(sizeof(FRespawnLocationData) == 0x000068, "Wrong size on FRespawnLocationData");
static_assert(offsetof(FRespawnLocationData, m_UniqueId) == 0x000010, "Member 'FRespawnLocationData::m_UniqueId' has a wrong offset!");
static_assert(offsetof(FRespawnLocationData, m_LocationType) == 0x000018, "Member 'FRespawnLocationData::m_LocationType' has a wrong offset!");
static_assert(offsetof(FRespawnLocationData, m_LocationGroup) == 0x00001C, "Member 'FRespawnLocationData::m_LocationGroup' has a wrong offset!");
static_assert(offsetof(FRespawnLocationData, m_Map) == 0x000024, "Member 'FRespawnLocationData::m_Map' has a wrong offset!");
static_assert(offsetof(FRespawnLocationData, m_DimensionId) == 0x00002C, "Member 'FRespawnLocationData::m_DimensionId' has a wrong offset!");
static_assert(offsetof(FRespawnLocationData, m_Transform) == 0x000030, "Member 'FRespawnLocationData::m_Transform' has a wrong offset!");
static_assert(offsetof(FRespawnLocationData, m_LocationActorUniqueId) == 0x000050, "Member 'FRespawnLocationData::m_LocationActorUniqueId' has a wrong offset!");
static_assert(offsetof(FRespawnLocationData, m_bIsAvailable) == 0x000058, "Member 'FRespawnLocationData::m_bIsAvailable' has a wrong offset!");
static_assert(offsetof(FRespawnLocationData, m_LastUsedUnixTimestamp) == 0x000060, "Member 'FRespawnLocationData::m_LastUsedUnixTimestamp' has a wrong offset!");

// ScriptStruct DuneSandbox.RespawnLocationDataSerializableList
// 0x0010 (0x0138 - 0x0128)
struct FRespawnLocationDataSerializableList final : public FFastArraySerializer
{
public:
	TArray<struct FRespawnLocationData>           m_RespawnLocations;                                // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRespawnLocationDataSerializableList) == 0x000008, "Wrong alignment on FRespawnLocationDataSerializableList");
static_assert(sizeof(FRespawnLocationDataSerializableList) == 0x000138, "Wrong size on FRespawnLocationDataSerializableList");
static_assert(offsetof(FRespawnLocationDataSerializableList, m_RespawnLocations) == 0x000128, "Member 'FRespawnLocationDataSerializableList::m_RespawnLocations' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneReplicatedAcceleration
// 0x0003 (0x0003 - 0x0000)
struct FDuneReplicatedAcceleration final
{
public:
	uint8                                         AccelXYRadians;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AccelXYMagnitude;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          AccelZ;                                            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneReplicatedAcceleration) == 0x000001, "Wrong alignment on FDuneReplicatedAcceleration");
static_assert(sizeof(FDuneReplicatedAcceleration) == 0x000003, "Wrong size on FDuneReplicatedAcceleration");
static_assert(offsetof(FDuneReplicatedAcceleration, AccelXYRadians) == 0x000000, "Member 'FDuneReplicatedAcceleration::AccelXYRadians' has a wrong offset!");
static_assert(offsetof(FDuneReplicatedAcceleration, AccelXYMagnitude) == 0x000001, "Member 'FDuneReplicatedAcceleration::AccelXYMagnitude' has a wrong offset!");
static_assert(offsetof(FDuneReplicatedAcceleration, AccelZ) == 0x000002, "Member 'FDuneReplicatedAcceleration::AccelZ' has a wrong offset!");

// ScriptStruct DuneSandbox.MutableCustomizationData
// 0x0088 (0x0088 - 0x0000)
struct FMutableCustomizationData final
{
public:
	class UCustomizableObjectInstance*            CustomizableObjectInstanceInitial;                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomizableObjectInstance*            CustomizableObjectInstanceCloned;                  // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomizableSkeletalComponent*         CustomizableSkeletalMesh;                          // 0x0010(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizableObjectParametersRemapper  ServerParametersRemapper;                          // 0x0018(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TSet<class FString>                           m_EquipmentParameterNames;                         // 0x0038(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMutableCustomizationData) == 0x000008, "Wrong alignment on FMutableCustomizationData");
static_assert(sizeof(FMutableCustomizationData) == 0x000088, "Wrong size on FMutableCustomizationData");
static_assert(offsetof(FMutableCustomizationData, CustomizableObjectInstanceInitial) == 0x000000, "Member 'FMutableCustomizationData::CustomizableObjectInstanceInitial' has a wrong offset!");
static_assert(offsetof(FMutableCustomizationData, CustomizableObjectInstanceCloned) == 0x000008, "Member 'FMutableCustomizationData::CustomizableObjectInstanceCloned' has a wrong offset!");
static_assert(offsetof(FMutableCustomizationData, CustomizableSkeletalMesh) == 0x000010, "Member 'FMutableCustomizationData::CustomizableSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FMutableCustomizationData, ServerParametersRemapper) == 0x000018, "Member 'FMutableCustomizationData::ServerParametersRemapper' has a wrong offset!");
static_assert(offsetof(FMutableCustomizationData, m_EquipmentParameterNames) == 0x000038, "Member 'FMutableCustomizationData::m_EquipmentParameterNames' has a wrong offset!");

// ScriptStruct DuneSandbox.SuspensorFieldStats
// 0x0014 (0x0014 - 0x0000)
struct FSuspensorFieldStats final
{
public:
	float                                         GravityScalar;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkSpeedScalar;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldApplicationTime;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockAccel;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSuspensorFieldStats) == 0x000004, "Wrong alignment on FSuspensorFieldStats");
static_assert(sizeof(FSuspensorFieldStats) == 0x000014, "Wrong size on FSuspensorFieldStats");
static_assert(offsetof(FSuspensorFieldStats, GravityScalar) == 0x000000, "Member 'FSuspensorFieldStats::GravityScalar' has a wrong offset!");
static_assert(offsetof(FSuspensorFieldStats, WalkSpeedScalar) == 0x000004, "Member 'FSuspensorFieldStats::WalkSpeedScalar' has a wrong offset!");
static_assert(offsetof(FSuspensorFieldStats, FieldApplicationTime) == 0x000008, "Member 'FSuspensorFieldStats::FieldApplicationTime' has a wrong offset!");
static_assert(offsetof(FSuspensorFieldStats, MaxSpeed) == 0x00000C, "Member 'FSuspensorFieldStats::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FSuspensorFieldStats, bLockAccel) == 0x000010, "Member 'FSuspensorFieldStats::bLockAccel' has a wrong offset!");

// ScriptStruct DuneSandbox.SlowDamageApplication
// 0x000C (0x000C - 0x0000)
struct FSlowDamageApplication final
{
public:
	uint32                                        ApplicationUID;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowDamageToApply;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWorldTimeSeconds;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlowDamageApplication) == 0x000004, "Wrong alignment on FSlowDamageApplication");
static_assert(sizeof(FSlowDamageApplication) == 0x00000C, "Wrong size on FSlowDamageApplication");
static_assert(offsetof(FSlowDamageApplication, ApplicationUID) == 0x000000, "Member 'FSlowDamageApplication::ApplicationUID' has a wrong offset!");
static_assert(offsetof(FSlowDamageApplication, SlowDamageToApply) == 0x000004, "Member 'FSlowDamageApplication::SlowDamageToApply' has a wrong offset!");
static_assert(offsetof(FSlowDamageApplication, MaxWorldTimeSeconds) == 0x000008, "Member 'FSlowDamageApplication::MaxWorldTimeSeconds' has a wrong offset!");

// ScriptStruct DuneSandbox.EquipmentMeshDisplay
// 0x0080 (0x0170 - 0x00F0)
struct FEquipmentMeshDisplay final : public FItemMeshDisplayBase
{
public:
	class UCustomizableSkeletalComponent*         m_CustomizableSkeletalComponent;                   // 0x00F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 m_SkeletalMeshComponent;                           // 0x00F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x58];                                     // 0x0100(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneCharacter*                         m_BaseCharacter;                                   // 0x0158(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0x10];                                     // 0x0160(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEquipmentMeshDisplay) == 0x000010, "Wrong alignment on FEquipmentMeshDisplay");
static_assert(sizeof(FEquipmentMeshDisplay) == 0x000170, "Wrong size on FEquipmentMeshDisplay");
static_assert(offsetof(FEquipmentMeshDisplay, m_CustomizableSkeletalComponent) == 0x0000F0, "Member 'FEquipmentMeshDisplay::m_CustomizableSkeletalComponent' has a wrong offset!");
static_assert(offsetof(FEquipmentMeshDisplay, m_SkeletalMeshComponent) == 0x0000F8, "Member 'FEquipmentMeshDisplay::m_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FEquipmentMeshDisplay, m_BaseCharacter) == 0x000158, "Member 'FEquipmentMeshDisplay::m_BaseCharacter' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterMovementTelemetryServerData
// 0x0050 (0x0050 - 0x0000)
struct FCharacterMovementTelemetryServerData final
{
public:
	TArray<class FString>                         ActiveAbilities;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 BehaviourTree;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentAssets;                                     // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentTask;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterState;                                    // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterMovementTelemetryServerData) == 0x000008, "Wrong alignment on FCharacterMovementTelemetryServerData");
static_assert(sizeof(FCharacterMovementTelemetryServerData) == 0x000050, "Wrong size on FCharacterMovementTelemetryServerData");
static_assert(offsetof(FCharacterMovementTelemetryServerData, ActiveAbilities) == 0x000000, "Member 'FCharacterMovementTelemetryServerData::ActiveAbilities' has a wrong offset!");
static_assert(offsetof(FCharacterMovementTelemetryServerData, BehaviourTree) == 0x000010, "Member 'FCharacterMovementTelemetryServerData::BehaviourTree' has a wrong offset!");
static_assert(offsetof(FCharacterMovementTelemetryServerData, CurrentAssets) == 0x000020, "Member 'FCharacterMovementTelemetryServerData::CurrentAssets' has a wrong offset!");
static_assert(offsetof(FCharacterMovementTelemetryServerData, CurrentTask) == 0x000030, "Member 'FCharacterMovementTelemetryServerData::CurrentTask' has a wrong offset!");
static_assert(offsetof(FCharacterMovementTelemetryServerData, CharacterState) == 0x000040, "Member 'FCharacterMovementTelemetryServerData::CharacterState' has a wrong offset!");

// ScriptStruct DuneSandbox.NPCBarksDataRowBase
// 0x0018 (0x0028 - 0x0010)
struct FNPCBarksDataRowBase final : public FTableRowBase
{
public:
	class FName                                   m_Action;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RepeatInterval;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Probability;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Priority;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCBarksDataRowBase) == 0x000008, "Wrong alignment on FNPCBarksDataRowBase");
static_assert(sizeof(FNPCBarksDataRowBase) == 0x000028, "Wrong size on FNPCBarksDataRowBase");
static_assert(offsetof(FNPCBarksDataRowBase, m_Action) == 0x000010, "Member 'FNPCBarksDataRowBase::m_Action' has a wrong offset!");
static_assert(offsetof(FNPCBarksDataRowBase, m_RepeatInterval) == 0x000018, "Member 'FNPCBarksDataRowBase::m_RepeatInterval' has a wrong offset!");
static_assert(offsetof(FNPCBarksDataRowBase, m_Probability) == 0x00001C, "Member 'FNPCBarksDataRowBase::m_Probability' has a wrong offset!");
static_assert(offsetof(FNPCBarksDataRowBase, m_Priority) == 0x000020, "Member 'FNPCBarksDataRowBase::m_Priority' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcCombatAbilityDataRow
// 0x00D0 (0x00E0 - 0x0010)
struct FNpcCombatAbilityDataRow final : public FTableRowBase
{
public:
	bool                                          m_bDeprecated;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDecisionBase>           m_Decision;                                        // 0x0018(0x0030)(Edit, BlueprintVisible, ExportObject, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBehaviorTree>           m_BehaviorTree;                                    // 0x0048(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  m_AbilityDescriptorTags;                           // 0x0078(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_AbilityTargetFinder;                             // 0x0098(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CooldownTimeSeconds;                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           m_RequiredGameplayAbilities;                       // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcCombatAbilityDataRow) == 0x000008, "Wrong alignment on FNpcCombatAbilityDataRow");
static_assert(sizeof(FNpcCombatAbilityDataRow) == 0x0000E0, "Wrong size on FNpcCombatAbilityDataRow");
static_assert(offsetof(FNpcCombatAbilityDataRow, m_bDeprecated) == 0x000010, "Member 'FNpcCombatAbilityDataRow::m_bDeprecated' has a wrong offset!");
static_assert(offsetof(FNpcCombatAbilityDataRow, m_Decision) == 0x000018, "Member 'FNpcCombatAbilityDataRow::m_Decision' has a wrong offset!");
static_assert(offsetof(FNpcCombatAbilityDataRow, m_BehaviorTree) == 0x000048, "Member 'FNpcCombatAbilityDataRow::m_BehaviorTree' has a wrong offset!");
static_assert(offsetof(FNpcCombatAbilityDataRow, m_AbilityDescriptorTags) == 0x000078, "Member 'FNpcCombatAbilityDataRow::m_AbilityDescriptorTags' has a wrong offset!");
static_assert(offsetof(FNpcCombatAbilityDataRow, m_AbilityTargetFinder) == 0x000098, "Member 'FNpcCombatAbilityDataRow::m_AbilityTargetFinder' has a wrong offset!");
static_assert(offsetof(FNpcCombatAbilityDataRow, m_CooldownTimeSeconds) == 0x0000C8, "Member 'FNpcCombatAbilityDataRow::m_CooldownTimeSeconds' has a wrong offset!");
static_assert(offsetof(FNpcCombatAbilityDataRow, m_RequiredGameplayAbilities) == 0x0000D0, "Member 'FNpcCombatAbilityDataRow::m_RequiredGameplayAbilities' has a wrong offset!");

// ScriptStruct DuneSandbox.ExclusionDynamicData
// 0x0080 (0x0080 - 0x0000)
struct FExclusionDynamicData final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0060(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExclusionDynamicData) == 0x000010, "Wrong alignment on FExclusionDynamicData");
static_assert(sizeof(FExclusionDynamicData) == 0x000080, "Wrong size on FExclusionDynamicData");
static_assert(offsetof(FExclusionDynamicData, Transform) == 0x000000, "Member 'FExclusionDynamicData::Transform' has a wrong offset!");
static_assert(offsetof(FExclusionDynamicData, BoxExtent) == 0x000060, "Member 'FExclusionDynamicData::BoxExtent' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcConfigurationDataRowBase
// 0x03D8 (0x03E8 - 0x0010)
struct FNpcConfigurationDataRowBase final : public FTableRowBase
{
public:
	struct FENPCArchetypes                        m_Archetype;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_Specialty;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FENPCRanks                             m_Rank;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENpcDifficultyGroup                           m_DifficultyGroup;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_Tier;                                            // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_TierOffset;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_InternalName;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_DisplayName;                                     // 0x0038(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    m_SenseConfig;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    m_IdleSenseConfig;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0xD0];                                      // 0x0070(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FENPCGeneticsLookName>          m_GeneticsLookNames;                               // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FENPCGeneticsOutfitName>        m_GeneticsOutfitNames;                             // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FENpcDialoguesRowID                    m_DialogueRow;                                     // 0x0160(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_CharacterTemplateName;                           // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNpcWeaponChoice>               m_RangedWeaponOptions;                             // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FNpcWeaponChoice>               m_SecondaryRangedWeaponOptions;                    // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FNpcWeaponChoice>               m_MeleeWeaponOptions;                              // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       m_RangedWeapon;                                    // 0x01A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       m_SecondaryRangedWeapon;                           // 0x01A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEItemTemplateID                       m_MeleeWeapon;                                     // 0x01B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPredefinedTeamId                             m_OverridingTeamID;                                // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEFaction                              m_Faction;                                         // 0x01BC(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_NavAgentType;                                    // 0x01C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WalkingSpeed;                                    // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RunningSpeed;                                    // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseFallingTerminalVelocity;                     // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_FallingTerminalVelocity;                         // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FELootContainerType                    m_LootContainerType;                               // 0x01DC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              m_LootTable;                                       // 0x01E8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  m_DescriptorTags;                                  // 0x0218(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  m_JobTags;                                         // 0x0238(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FENpcHazardAreaResponseSetName         m_HazardAreaResponseSetName;                       // 0x0258(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FENPCCombatBehaviorSetName             m_CombatBehaviorSetName;                           // 0x0260(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_EscapeHazardLevel;                               // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_Flags;                                           // 0x0269(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHostilityType                                m_HostilityType;                                   // 0x026A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26B[0x5];                                      // 0x026B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDuneVoiceSet>           m_VoiceSet;                                        // 0x0270(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bControlledByTheAiBudgetingSystem;               // 0x02A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bPhysicsDisabled;                                // 0x02A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IgnoreAutoAssignedModularAIBehaviors;            // 0x02A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3[0x5];                                      // 0x02A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEModularAIBehaviorName>        m_AssignedModularAIBehaviors;                      // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAiDifficultyConfig>     m_DifficultyConfig;                                // 0x02B8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EAudioSwitchStateGroup_Character, struct FEAudioSwitchState_Character> m_OverridingSfxSwitchStates; // 0x02E8(0x0050)(Edit, DisableEditOnInstance, RepSkip, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   m_PawnClass;                                       // 0x0338(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   m_AIControllerClass;                               // 0x0368(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UBehaviorTree>           m_BehaviorTreeAsset;                               // 0x0398(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  m_AutoDescriptorTags;                              // 0x03C8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FNpcConfigurationDataRowBase) == 0x000008, "Wrong alignment on FNpcConfigurationDataRowBase");
static_assert(sizeof(FNpcConfigurationDataRowBase) == 0x0003E8, "Wrong size on FNpcConfigurationDataRowBase");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_Archetype) == 0x000010, "Member 'FNpcConfigurationDataRowBase::m_Archetype' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_Specialty) == 0x000018, "Member 'FNpcConfigurationDataRowBase::m_Specialty' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_Rank) == 0x000020, "Member 'FNpcConfigurationDataRowBase::m_Rank' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_DifficultyGroup) == 0x000028, "Member 'FNpcConfigurationDataRowBase::m_DifficultyGroup' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_Tier) == 0x000029, "Member 'FNpcConfigurationDataRowBase::m_Tier' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_TierOffset) == 0x00002C, "Member 'FNpcConfigurationDataRowBase::m_TierOffset' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_InternalName) == 0x000030, "Member 'FNpcConfigurationDataRowBase::m_InternalName' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_DisplayName) == 0x000038, "Member 'FNpcConfigurationDataRowBase::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_SenseConfig) == 0x000050, "Member 'FNpcConfigurationDataRowBase::m_SenseConfig' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_IdleSenseConfig) == 0x000060, "Member 'FNpcConfigurationDataRowBase::m_IdleSenseConfig' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_GeneticsLookNames) == 0x000140, "Member 'FNpcConfigurationDataRowBase::m_GeneticsLookNames' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_GeneticsOutfitNames) == 0x000150, "Member 'FNpcConfigurationDataRowBase::m_GeneticsOutfitNames' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_DialogueRow) == 0x000160, "Member 'FNpcConfigurationDataRowBase::m_DialogueRow' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_CharacterTemplateName) == 0x000168, "Member 'FNpcConfigurationDataRowBase::m_CharacterTemplateName' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_RangedWeaponOptions) == 0x000170, "Member 'FNpcConfigurationDataRowBase::m_RangedWeaponOptions' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_SecondaryRangedWeaponOptions) == 0x000180, "Member 'FNpcConfigurationDataRowBase::m_SecondaryRangedWeaponOptions' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_MeleeWeaponOptions) == 0x000190, "Member 'FNpcConfigurationDataRowBase::m_MeleeWeaponOptions' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_RangedWeapon) == 0x0001A0, "Member 'FNpcConfigurationDataRowBase::m_RangedWeapon' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_SecondaryRangedWeapon) == 0x0001A8, "Member 'FNpcConfigurationDataRowBase::m_SecondaryRangedWeapon' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_MeleeWeapon) == 0x0001B0, "Member 'FNpcConfigurationDataRowBase::m_MeleeWeapon' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_OverridingTeamID) == 0x0001B8, "Member 'FNpcConfigurationDataRowBase::m_OverridingTeamID' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_Faction) == 0x0001BC, "Member 'FNpcConfigurationDataRowBase::m_Faction' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_NavAgentType) == 0x0001C4, "Member 'FNpcConfigurationDataRowBase::m_NavAgentType' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_WalkingSpeed) == 0x0001CC, "Member 'FNpcConfigurationDataRowBase::m_WalkingSpeed' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_RunningSpeed) == 0x0001D0, "Member 'FNpcConfigurationDataRowBase::m_RunningSpeed' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_bUseFallingTerminalVelocity) == 0x0001D4, "Member 'FNpcConfigurationDataRowBase::m_bUseFallingTerminalVelocity' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_FallingTerminalVelocity) == 0x0001D8, "Member 'FNpcConfigurationDataRowBase::m_FallingTerminalVelocity' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_LootContainerType) == 0x0001DC, "Member 'FNpcConfigurationDataRowBase::m_LootContainerType' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_LootTable) == 0x0001E8, "Member 'FNpcConfigurationDataRowBase::m_LootTable' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_DescriptorTags) == 0x000218, "Member 'FNpcConfigurationDataRowBase::m_DescriptorTags' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_JobTags) == 0x000238, "Member 'FNpcConfigurationDataRowBase::m_JobTags' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_HazardAreaResponseSetName) == 0x000258, "Member 'FNpcConfigurationDataRowBase::m_HazardAreaResponseSetName' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_CombatBehaviorSetName) == 0x000260, "Member 'FNpcConfigurationDataRowBase::m_CombatBehaviorSetName' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_EscapeHazardLevel) == 0x000268, "Member 'FNpcConfigurationDataRowBase::m_EscapeHazardLevel' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_Flags) == 0x000269, "Member 'FNpcConfigurationDataRowBase::m_Flags' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_HostilityType) == 0x00026A, "Member 'FNpcConfigurationDataRowBase::m_HostilityType' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_VoiceSet) == 0x000270, "Member 'FNpcConfigurationDataRowBase::m_VoiceSet' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_bControlledByTheAiBudgetingSystem) == 0x0002A0, "Member 'FNpcConfigurationDataRowBase::m_bControlledByTheAiBudgetingSystem' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_bPhysicsDisabled) == 0x0002A1, "Member 'FNpcConfigurationDataRowBase::m_bPhysicsDisabled' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_IgnoreAutoAssignedModularAIBehaviors) == 0x0002A2, "Member 'FNpcConfigurationDataRowBase::m_IgnoreAutoAssignedModularAIBehaviors' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_AssignedModularAIBehaviors) == 0x0002A8, "Member 'FNpcConfigurationDataRowBase::m_AssignedModularAIBehaviors' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_DifficultyConfig) == 0x0002B8, "Member 'FNpcConfigurationDataRowBase::m_DifficultyConfig' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_OverridingSfxSwitchStates) == 0x0002E8, "Member 'FNpcConfigurationDataRowBase::m_OverridingSfxSwitchStates' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_PawnClass) == 0x000338, "Member 'FNpcConfigurationDataRowBase::m_PawnClass' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_AIControllerClass) == 0x000368, "Member 'FNpcConfigurationDataRowBase::m_AIControllerClass' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_BehaviorTreeAsset) == 0x000398, "Member 'FNpcConfigurationDataRowBase::m_BehaviorTreeAsset' has a wrong offset!");
static_assert(offsetof(FNpcConfigurationDataRowBase, m_AutoDescriptorTags) == 0x0003C8, "Member 'FNpcConfigurationDataRowBase::m_AutoDescriptorTags' has a wrong offset!");

// ScriptStruct DuneSandbox.ENpcConfigurationType
// 0x0000 (0x0008 - 0x0008)
struct FENpcConfigurationType final : public FStringEnumValue
{
};
static_assert(alignof(FENpcConfigurationType) == 0x000004, "Wrong alignment on FENpcConfigurationType");
static_assert(sizeof(FENpcConfigurationType) == 0x000008, "Wrong size on FENpcConfigurationType");

// ScriptStruct DuneSandbox.NpcGroupCompositionDataRow
// 0x0028 (0x0038 - 0x0010)
struct FNpcGroupCompositionDataRow final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  m_MetaTags;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UDataTable*                             m_GroupCompositionTable;                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcGroupCompositionDataRow) == 0x000008, "Wrong alignment on FNpcGroupCompositionDataRow");
static_assert(sizeof(FNpcGroupCompositionDataRow) == 0x000038, "Wrong size on FNpcGroupCompositionDataRow");
static_assert(offsetof(FNpcGroupCompositionDataRow, m_MetaTags) == 0x000010, "Member 'FNpcGroupCompositionDataRow::m_MetaTags' has a wrong offset!");
static_assert(offsetof(FNpcGroupCompositionDataRow, m_GroupCompositionTable) == 0x000030, "Member 'FNpcGroupCompositionDataRow::m_GroupCompositionTable' has a wrong offset!");

// ScriptStruct DuneSandbox.InteractionWheelSlotData_Vehicle
// 0x0068 (0x0070 - 0x0008)
struct FInteractionWheelSlotData_Vehicle final : public FInteractionWheelSlotData
{
public:
	TWeakObjectPtr<class UInteraction>            InteractionObject;                                 // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0040(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionWheelSlotData_Vehicle) == 0x000008, "Wrong alignment on FInteractionWheelSlotData_Vehicle");
static_assert(sizeof(FInteractionWheelSlotData_Vehicle) == 0x000070, "Wrong size on FInteractionWheelSlotData_Vehicle");
static_assert(offsetof(FInteractionWheelSlotData_Vehicle, InteractionObject) == 0x000008, "Member 'FInteractionWheelSlotData_Vehicle::InteractionObject' has a wrong offset!");
static_assert(offsetof(FInteractionWheelSlotData_Vehicle, Icon) == 0x000040, "Member 'FInteractionWheelSlotData_Vehicle::Icon' has a wrong offset!");

// ScriptStruct DuneSandbox.SightSenseConfig
// 0x0018 (0x0018 - 0x0000)
struct FSightSenseConfig final
{
public:
	float                                         m_SightRadius;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LoseSightRadius;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PeripheralVisionAngleDegrees;                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VerticalVisionAngleDegrees;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxNpcTargetRadius;                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAISenseAffiliationFilter              m_DetectionByAffiliation;                          // 0x0014(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSightSenseConfig) == 0x000004, "Wrong alignment on FSightSenseConfig");
static_assert(sizeof(FSightSenseConfig) == 0x000018, "Wrong size on FSightSenseConfig");
static_assert(offsetof(FSightSenseConfig, m_SightRadius) == 0x000000, "Member 'FSightSenseConfig::m_SightRadius' has a wrong offset!");
static_assert(offsetof(FSightSenseConfig, m_LoseSightRadius) == 0x000004, "Member 'FSightSenseConfig::m_LoseSightRadius' has a wrong offset!");
static_assert(offsetof(FSightSenseConfig, m_PeripheralVisionAngleDegrees) == 0x000008, "Member 'FSightSenseConfig::m_PeripheralVisionAngleDegrees' has a wrong offset!");
static_assert(offsetof(FSightSenseConfig, m_VerticalVisionAngleDegrees) == 0x00000C, "Member 'FSightSenseConfig::m_VerticalVisionAngleDegrees' has a wrong offset!");
static_assert(offsetof(FSightSenseConfig, m_MaxNpcTargetRadius) == 0x000010, "Member 'FSightSenseConfig::m_MaxNpcTargetRadius' has a wrong offset!");
static_assert(offsetof(FSightSenseConfig, m_DetectionByAffiliation) == 0x000014, "Member 'FSightSenseConfig::m_DetectionByAffiliation' has a wrong offset!");

// ScriptStruct DuneSandbox.DamageSenseConfig
// 0x000C (0x000C - 0x0000)
struct FDamageSenseConfig final
{
public:
	float                                         LifeTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPropagating;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PropagatingRange;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageSenseConfig) == 0x000004, "Wrong alignment on FDamageSenseConfig");
static_assert(sizeof(FDamageSenseConfig) == 0x00000C, "Wrong size on FDamageSenseConfig");
static_assert(offsetof(FDamageSenseConfig, LifeTime) == 0x000000, "Member 'FDamageSenseConfig::LifeTime' has a wrong offset!");
static_assert(offsetof(FDamageSenseConfig, bAllowPropagating) == 0x000004, "Member 'FDamageSenseConfig::bAllowPropagating' has a wrong offset!");
static_assert(offsetof(FDamageSenseConfig, PropagatingRange) == 0x000008, "Member 'FDamageSenseConfig::PropagatingRange' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcSenseConfigDataRowBase
// 0x0058 (0x0068 - 0x0010)
struct FNpcSenseConfigDataRowBase final : public FTableRowBase
{
public:
	float                                         m_CombatRange;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseSightSense;                                  // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUseDamageSense;                                 // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSightSenseConfig                      m_SightSense;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FHearingSenseConfig                    m_HearingSense;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDamageSenseConfig                     m_DamageSense;                                     // 0x0040(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_RecognitionBaseTime;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RecognitionBaseDistance;                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RecognitionDistanceMultiplier;                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RecognitionDistanceInstant;                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RecognitionArmedMultiplier;                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RecognitionSandstormMultiplier;                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CryForHelpDelay;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcSenseConfigDataRowBase) == 0x000008, "Wrong alignment on FNpcSenseConfigDataRowBase");
static_assert(sizeof(FNpcSenseConfigDataRowBase) == 0x000068, "Wrong size on FNpcSenseConfigDataRowBase");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_CombatRange) == 0x000010, "Member 'FNpcSenseConfigDataRowBase::m_CombatRange' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_bUseSightSense) == 0x000014, "Member 'FNpcSenseConfigDataRowBase::m_bUseSightSense' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_bUseDamageSense) == 0x000015, "Member 'FNpcSenseConfigDataRowBase::m_bUseDamageSense' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_SightSense) == 0x000018, "Member 'FNpcSenseConfigDataRowBase::m_SightSense' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_HearingSense) == 0x000030, "Member 'FNpcSenseConfigDataRowBase::m_HearingSense' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_DamageSense) == 0x000040, "Member 'FNpcSenseConfigDataRowBase::m_DamageSense' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_RecognitionBaseTime) == 0x00004C, "Member 'FNpcSenseConfigDataRowBase::m_RecognitionBaseTime' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_RecognitionBaseDistance) == 0x000050, "Member 'FNpcSenseConfigDataRowBase::m_RecognitionBaseDistance' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_RecognitionDistanceMultiplier) == 0x000054, "Member 'FNpcSenseConfigDataRowBase::m_RecognitionDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_RecognitionDistanceInstant) == 0x000058, "Member 'FNpcSenseConfigDataRowBase::m_RecognitionDistanceInstant' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_RecognitionArmedMultiplier) == 0x00005C, "Member 'FNpcSenseConfigDataRowBase::m_RecognitionArmedMultiplier' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_RecognitionSandstormMultiplier) == 0x000060, "Member 'FNpcSenseConfigDataRowBase::m_RecognitionSandstormMultiplier' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigDataRowBase, m_CryForHelpDelay) == 0x000064, "Member 'FNpcSenseConfigDataRowBase::m_CryForHelpDelay' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcSenseConfigStorage
// 0x0038 (0x0038 - 0x0000)
struct FNpcSenseConfigStorage final
{
public:
	class UAISenseConfig_Sight*                   SightConfig;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDuneAISenseConfig_Footstep*            FootstepConfig;                                    // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDuneAISenseConfig_FlyBy*               FlyByConfig;                                       // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDuneAISenseConfig_WeaponFire*          WeaponFireConfig;                                  // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDuneAISenseConfig_Bark*                BarkConfig;                                        // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAISenseConfig_Damage*                  DamageConfig;                                      // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDuneAISenseConfig_Squad*               SquadSenseConfig;                                  // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcSenseConfigStorage) == 0x000008, "Wrong alignment on FNpcSenseConfigStorage");
static_assert(sizeof(FNpcSenseConfigStorage) == 0x000038, "Wrong size on FNpcSenseConfigStorage");
static_assert(offsetof(FNpcSenseConfigStorage, SightConfig) == 0x000000, "Member 'FNpcSenseConfigStorage::SightConfig' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigStorage, FootstepConfig) == 0x000008, "Member 'FNpcSenseConfigStorage::FootstepConfig' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigStorage, FlyByConfig) == 0x000010, "Member 'FNpcSenseConfigStorage::FlyByConfig' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigStorage, WeaponFireConfig) == 0x000018, "Member 'FNpcSenseConfigStorage::WeaponFireConfig' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigStorage, BarkConfig) == 0x000020, "Member 'FNpcSenseConfigStorage::BarkConfig' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigStorage, DamageConfig) == 0x000028, "Member 'FNpcSenseConfigStorage::DamageConfig' has a wrong offset!");
static_assert(offsetof(FNpcSenseConfigStorage, SquadSenseConfig) == 0x000030, "Member 'FNpcSenseConfigStorage::SquadSenseConfig' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcStatsDataRowBase
// 0x00E8 (0x00F8 - 0x0010)
struct FNpcStatsDataRowBase final : public FTableRowBase
{
public:
	float                                         Aggressiveness;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mobility;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DodgeChance;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DodgeCooldownTime;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToConsiderKited;                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCoverDistance;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHomeDistance;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreferredDistanceToTargetMin;                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreferredDistanceToTargetMax;                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNpcWeaponStats                        RangedWeaponStats;                                 // 0x0034(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FNpcWeaponStats                        MeleeWeaponStats;                                  // 0x003C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPreferRangedOverMeleeWeapon;                      // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDuneAiMovementSpeed, float>             m_MovementSpeeds;                                  // 0x0048(0x0050)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_TargetingRuleSetClass;                           // 0x0098(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FENpcHazardAreaResponseSetName         m_HazardAreaResponseSetName;                       // 0x00C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  m_DescriptorTags;                                  // 0x00D0(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FEAudioSwitchState_Character           m_CharacterTypeAudioSwitch;                        // 0x00F0(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcStatsDataRowBase) == 0x000008, "Wrong alignment on FNpcStatsDataRowBase");
static_assert(sizeof(FNpcStatsDataRowBase) == 0x0000F8, "Wrong size on FNpcStatsDataRowBase");
static_assert(offsetof(FNpcStatsDataRowBase, Aggressiveness) == 0x000010, "Member 'FNpcStatsDataRowBase::Aggressiveness' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, Mobility) == 0x000014, "Member 'FNpcStatsDataRowBase::Mobility' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, DodgeChance) == 0x000018, "Member 'FNpcStatsDataRowBase::DodgeChance' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, DodgeCooldownTime) == 0x00001C, "Member 'FNpcStatsDataRowBase::DodgeCooldownTime' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, TimeToConsiderKited) == 0x000020, "Member 'FNpcStatsDataRowBase::TimeToConsiderKited' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, MaxCoverDistance) == 0x000024, "Member 'FNpcStatsDataRowBase::MaxCoverDistance' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, MaxHomeDistance) == 0x000028, "Member 'FNpcStatsDataRowBase::MaxHomeDistance' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, PreferredDistanceToTargetMin) == 0x00002C, "Member 'FNpcStatsDataRowBase::PreferredDistanceToTargetMin' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, PreferredDistanceToTargetMax) == 0x000030, "Member 'FNpcStatsDataRowBase::PreferredDistanceToTargetMax' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, RangedWeaponStats) == 0x000034, "Member 'FNpcStatsDataRowBase::RangedWeaponStats' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, MeleeWeaponStats) == 0x00003C, "Member 'FNpcStatsDataRowBase::MeleeWeaponStats' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, bPreferRangedOverMeleeWeapon) == 0x000044, "Member 'FNpcStatsDataRowBase::bPreferRangedOverMeleeWeapon' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, m_MovementSpeeds) == 0x000048, "Member 'FNpcStatsDataRowBase::m_MovementSpeeds' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, m_TargetingRuleSetClass) == 0x000098, "Member 'FNpcStatsDataRowBase::m_TargetingRuleSetClass' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, m_HazardAreaResponseSetName) == 0x0000C8, "Member 'FNpcStatsDataRowBase::m_HazardAreaResponseSetName' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, m_DescriptorTags) == 0x0000D0, "Member 'FNpcStatsDataRowBase::m_DescriptorTags' has a wrong offset!");
static_assert(offsetof(FNpcStatsDataRowBase, m_CharacterTypeAudioSwitch) == 0x0000F0, "Member 'FNpcStatsDataRowBase::m_CharacterTypeAudioSwitch' has a wrong offset!");

// ScriptStruct DuneSandbox.InventoryTrackerSkipVolumeLimits
// 0x0008 (0x0008 - 0x0000)
struct FInventoryTrackerSkipVolumeLimits final
{
public:
	class UItemInventory*                         m_Inventory;                                       // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FInventoryTrackerSkipVolumeLimits) == 0x000008, "Wrong alignment on FInventoryTrackerSkipVolumeLimits");
static_assert(sizeof(FInventoryTrackerSkipVolumeLimits) == 0x000008, "Wrong size on FInventoryTrackerSkipVolumeLimits");
static_assert(offsetof(FInventoryTrackerSkipVolumeLimits, m_Inventory) == 0x000000, "Member 'FInventoryTrackerSkipVolumeLimits::m_Inventory' has a wrong offset!");

// ScriptStruct DuneSandbox.CameraSpringOffsetConfig
// 0x0060 (0x0060 - 0x0000)
struct FCameraSpringOffsetConfig final
{
public:
	struct FCameraLensSettings                    LensSettings;                                      // 0x0000(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurrentAperture;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentFocalLength;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetArmLength;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECharacterCreationCameraFocus                 BaseFocus;                                         // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraSpringOffsetConfig) == 0x000008, "Wrong alignment on FCameraSpringOffsetConfig");
static_assert(sizeof(FCameraSpringOffsetConfig) == 0x000060, "Wrong size on FCameraSpringOffsetConfig");
static_assert(offsetof(FCameraSpringOffsetConfig, LensSettings) == 0x000000, "Member 'FCameraSpringOffsetConfig::LensSettings' has a wrong offset!");
static_assert(offsetof(FCameraSpringOffsetConfig, CurrentAperture) == 0x00001C, "Member 'FCameraSpringOffsetConfig::CurrentAperture' has a wrong offset!");
static_assert(offsetof(FCameraSpringOffsetConfig, CurrentFocalLength) == 0x000020, "Member 'FCameraSpringOffsetConfig::CurrentFocalLength' has a wrong offset!");
static_assert(offsetof(FCameraSpringOffsetConfig, TargetArmLength) == 0x000024, "Member 'FCameraSpringOffsetConfig::TargetArmLength' has a wrong offset!");
static_assert(offsetof(FCameraSpringOffsetConfig, TargetOffset) == 0x000028, "Member 'FCameraSpringOffsetConfig::TargetOffset' has a wrong offset!");
static_assert(offsetof(FCameraSpringOffsetConfig, Rotation) == 0x000040, "Member 'FCameraSpringOffsetConfig::Rotation' has a wrong offset!");
static_assert(offsetof(FCameraSpringOffsetConfig, BaseFocus) == 0x000058, "Member 'FCameraSpringOffsetConfig::BaseFocus' has a wrong offset!");

// ScriptStruct DuneSandbox.ContentConfiguration
// 0x0008 (0x0008 - 0x0000)
struct FContentConfiguration final
{
public:
	TSubclassOf<class UCharacterCreationBaseContentWidget> m_Widget;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentConfiguration) == 0x000008, "Wrong alignment on FContentConfiguration");
static_assert(sizeof(FContentConfiguration) == 0x000008, "Wrong size on FContentConfiguration");
static_assert(offsetof(FContentConfiguration, m_Widget) == 0x000000, "Member 'FContentConfiguration::m_Widget' has a wrong offset!");

// ScriptStruct DuneSandbox.ECharacterMutableState
// 0x0000 (0x0008 - 0x0008)
struct FECharacterMutableState final : public FStringEnumValue
{
};
static_assert(alignof(FECharacterMutableState) == 0x000004, "Wrong alignment on FECharacterMutableState");
static_assert(sizeof(FECharacterMutableState) == 0x000008, "Wrong size on FECharacterMutableState");

// ScriptStruct DuneSandbox.CharacterDeletionConfig
// 0x0003 (0x0003 - 0x0000)
struct FCharacterDeletionConfig final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterDeletionConfig) == 0x000001, "Wrong alignment on FCharacterDeletionConfig");
static_assert(sizeof(FCharacterDeletionConfig) == 0x000003, "Wrong size on FCharacterDeletionConfig");

// ScriptStruct DuneSandbox.SequenceSettingsInfo
// 0x0100 (0x0100 - 0x0000)
struct FSequenceSettingsInfo final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceAsset;                                // 0x0000(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelSequenceSettingsData             LevelSequenceSettings;                             // 0x0030(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FSequencePlaySettingsData              SequencePlaySettings;                              // 0x00E0(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSequenceSettingsInfo) == 0x000010, "Wrong alignment on FSequenceSettingsInfo");
static_assert(sizeof(FSequenceSettingsInfo) == 0x000100, "Wrong size on FSequenceSettingsInfo");
static_assert(offsetof(FSequenceSettingsInfo, LevelSequenceAsset) == 0x000000, "Member 'FSequenceSettingsInfo::LevelSequenceAsset' has a wrong offset!");
static_assert(offsetof(FSequenceSettingsInfo, LevelSequenceSettings) == 0x000030, "Member 'FSequenceSettingsInfo::LevelSequenceSettings' has a wrong offset!");
static_assert(offsetof(FSequenceSettingsInfo, SequencePlaySettings) == 0x0000E0, "Member 'FSequenceSettingsInfo::SequencePlaySettings' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormRoamingSettings
// 0x0028 (0x0028 - 0x0000)
struct FSandwormRoamingSettings final
{
public:
	float                                         ElevationUpdateFrequency;                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoftBorders;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BorderRepulsionFactor;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoamingSegmentLength;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSegmentDeviationAngle;                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultGravity;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenCoGUpdates;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WormDetectionDistance;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TerritorySubsegmentGridX;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TerritorySubsegmentGridY;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandwormRoamingSettings) == 0x000004, "Wrong alignment on FSandwormRoamingSettings");
static_assert(sizeof(FSandwormRoamingSettings) == 0x000028, "Wrong size on FSandwormRoamingSettings");
static_assert(offsetof(FSandwormRoamingSettings, ElevationUpdateFrequency) == 0x000000, "Member 'FSandwormRoamingSettings::ElevationUpdateFrequency' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingSettings, SoftBorders) == 0x000004, "Member 'FSandwormRoamingSettings::SoftBorders' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingSettings, BorderRepulsionFactor) == 0x000008, "Member 'FSandwormRoamingSettings::BorderRepulsionFactor' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingSettings, RoamingSegmentLength) == 0x00000C, "Member 'FSandwormRoamingSettings::RoamingSegmentLength' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingSettings, MaxSegmentDeviationAngle) == 0x000010, "Member 'FSandwormRoamingSettings::MaxSegmentDeviationAngle' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingSettings, DefaultGravity) == 0x000014, "Member 'FSandwormRoamingSettings::DefaultGravity' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingSettings, TimeBetweenCoGUpdates) == 0x000018, "Member 'FSandwormRoamingSettings::TimeBetweenCoGUpdates' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingSettings, WormDetectionDistance) == 0x00001C, "Member 'FSandwormRoamingSettings::WormDetectionDistance' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingSettings, TerritorySubsegmentGridX) == 0x000020, "Member 'FSandwormRoamingSettings::TerritorySubsegmentGridX' has a wrong offset!");
static_assert(offsetof(FSandwormRoamingSettings, TerritorySubsegmentGridY) == 0x000024, "Member 'FSandwormRoamingSettings::TerritorySubsegmentGridY' has a wrong offset!");

// ScriptStruct DuneSandbox.CheatItemDrivenContractData
// 0x0030 (0x0030 - 0x0000)
struct FCheatItemDrivenContractData final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemTemplateId;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ItemName;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   ContractName;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheatItemDrivenContractData) == 0x000008, "Wrong alignment on FCheatItemDrivenContractData");
static_assert(sizeof(FCheatItemDrivenContractData) == 0x000030, "Wrong size on FCheatItemDrivenContractData");
static_assert(offsetof(FCheatItemDrivenContractData, Actor) == 0x000000, "Member 'FCheatItemDrivenContractData::Actor' has a wrong offset!");
static_assert(offsetof(FCheatItemDrivenContractData, ItemTemplateId) == 0x000008, "Member 'FCheatItemDrivenContractData::ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FCheatItemDrivenContractData, ItemName) == 0x000010, "Member 'FCheatItemDrivenContractData::ItemName' has a wrong offset!");
static_assert(offsetof(FCheatItemDrivenContractData, ContractName) == 0x000028, "Member 'FCheatItemDrivenContractData::ContractName' has a wrong offset!");

// ScriptStruct DuneSandbox.CheatContractLocationData
// 0x0028 (0x0028 - 0x0000)
struct FCheatContractLocationData final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheatContractLocationData) == 0x000008, "Wrong alignment on FCheatContractLocationData");
static_assert(sizeof(FCheatContractLocationData) == 0x000028, "Wrong size on FCheatContractLocationData");
static_assert(offsetof(FCheatContractLocationData, Description) == 0x000000, "Member 'FCheatContractLocationData::Description' has a wrong offset!");
static_assert(offsetof(FCheatContractLocationData, Location) == 0x000010, "Member 'FCheatContractLocationData::Location' has a wrong offset!");

// ScriptStruct DuneSandbox.ConsumeItemTrackingInfo
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FConsumeItemTrackingInfo final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConsumeItemTrackingInfo) == 0x000008, "Wrong alignment on FConsumeItemTrackingInfo");
static_assert(sizeof(FConsumeItemTrackingInfo) == 0x000058, "Wrong size on FConsumeItemTrackingInfo");

// ScriptStruct DuneSandbox.InactivityRepData
// 0x0010 (0x0010 - 0x0000)
struct FInactivityRepData final
{
public:
	float                                         m_InactivityTimeoutInSeconds;                      // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_InactivityWarningInSeconds;                      // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RequiredServerFillRatio;                         // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bInactivityKickingAllowed;                       // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInactivityRepData) == 0x000004, "Wrong alignment on FInactivityRepData");
static_assert(sizeof(FInactivityRepData) == 0x000010, "Wrong size on FInactivityRepData");
static_assert(offsetof(FInactivityRepData, m_InactivityTimeoutInSeconds) == 0x000000, "Member 'FInactivityRepData::m_InactivityTimeoutInSeconds' has a wrong offset!");
static_assert(offsetof(FInactivityRepData, m_InactivityWarningInSeconds) == 0x000004, "Member 'FInactivityRepData::m_InactivityWarningInSeconds' has a wrong offset!");
static_assert(offsetof(FInactivityRepData, m_RequiredServerFillRatio) == 0x000008, "Member 'FInactivityRepData::m_RequiredServerFillRatio' has a wrong offset!");
static_assert(offsetof(FInactivityRepData, m_bInactivityKickingAllowed) == 0x00000C, "Member 'FInactivityRepData::m_bInactivityKickingAllowed' has a wrong offset!");

// ScriptStruct DuneSandbox.MentatWidgetRequestData
// 0x0040 (0x0040 - 0x0000)
struct FMentatWidgetRequestData final
{
public:
	class AActor*                                 m_TargetActor;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_WidgetClass;                                     // 0x0008(0x0030)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ExpectedAppearTime;                              // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMentatWidgetRequestData) == 0x000008, "Wrong alignment on FMentatWidgetRequestData");
static_assert(sizeof(FMentatWidgetRequestData) == 0x000040, "Wrong size on FMentatWidgetRequestData");
static_assert(offsetof(FMentatWidgetRequestData, m_TargetActor) == 0x000000, "Member 'FMentatWidgetRequestData::m_TargetActor' has a wrong offset!");
static_assert(offsetof(FMentatWidgetRequestData, m_WidgetClass) == 0x000008, "Member 'FMentatWidgetRequestData::m_WidgetClass' has a wrong offset!");
static_assert(offsetof(FMentatWidgetRequestData, m_ExpectedAppearTime) == 0x000038, "Member 'FMentatWidgetRequestData::m_ExpectedAppearTime' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerTradingTransaction
// 0x0028 (0x0028 - 0x0000)
struct FPlayerTradingTransaction final
{
public:
	struct FPlayerTradingParticipant              Instigator;                                        // 0x0000(0x0010)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FPlayerTradingParticipant              Target;                                            // 0x0010(0x0010)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bItemsTransferred;                                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerTradingTransaction) == 0x000008, "Wrong alignment on FPlayerTradingTransaction");
static_assert(sizeof(FPlayerTradingTransaction) == 0x000028, "Wrong size on FPlayerTradingTransaction");
static_assert(offsetof(FPlayerTradingTransaction, Instigator) == 0x000000, "Member 'FPlayerTradingTransaction::Instigator' has a wrong offset!");
static_assert(offsetof(FPlayerTradingTransaction, Target) == 0x000010, "Member 'FPlayerTradingTransaction::Target' has a wrong offset!");
static_assert(offsetof(FPlayerTradingTransaction, bItemsTransferred) == 0x000020, "Member 'FPlayerTradingTransaction::bItemsTransferred' has a wrong offset!");

// ScriptStruct DuneSandbox.ESecurityZoneGroup
// 0x0000 (0x0008 - 0x0008)
struct FESecurityZoneGroup final : public FStringEnumValue
{
};
static_assert(alignof(FESecurityZoneGroup) == 0x000004, "Wrong alignment on FESecurityZoneGroup");
static_assert(sizeof(FESecurityZoneGroup) == 0x000008, "Wrong size on FESecurityZoneGroup");

// ScriptStruct DuneSandbox.TextChatChannelTypeRowBase
// 0x0050 (0x0060 - 0x0010)
struct FTextChatChannelTypeRowBase final : public FTableRowBase
{
public:
	ETextChatChannelType                          m_Type;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_CanBeActive;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_MaxAmountSubChannels;                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   m_Name;                                            // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_Description;                                     // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FColor                                 m_Color;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 m_PersonalChannelColorOverride;                    // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsVisible;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_TopHeadlineVisible;                              // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_HaveDefaultHoverState;                           // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          M_NotificationAudioEvent;                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextChatChannelTypeRowBase) == 0x000008, "Wrong alignment on FTextChatChannelTypeRowBase");
static_assert(sizeof(FTextChatChannelTypeRowBase) == 0x000060, "Wrong size on FTextChatChannelTypeRowBase");
static_assert(offsetof(FTextChatChannelTypeRowBase, m_Type) == 0x000010, "Member 'FTextChatChannelTypeRowBase::m_Type' has a wrong offset!");
static_assert(offsetof(FTextChatChannelTypeRowBase, m_CanBeActive) == 0x000011, "Member 'FTextChatChannelTypeRowBase::m_CanBeActive' has a wrong offset!");
static_assert(offsetof(FTextChatChannelTypeRowBase, m_MaxAmountSubChannels) == 0x000014, "Member 'FTextChatChannelTypeRowBase::m_MaxAmountSubChannels' has a wrong offset!");
static_assert(offsetof(FTextChatChannelTypeRowBase, m_Name) == 0x000018, "Member 'FTextChatChannelTypeRowBase::m_Name' has a wrong offset!");
static_assert(offsetof(FTextChatChannelTypeRowBase, m_Description) == 0x000030, "Member 'FTextChatChannelTypeRowBase::m_Description' has a wrong offset!");
static_assert(offsetof(FTextChatChannelTypeRowBase, m_Color) == 0x000048, "Member 'FTextChatChannelTypeRowBase::m_Color' has a wrong offset!");
static_assert(offsetof(FTextChatChannelTypeRowBase, m_PersonalChannelColorOverride) == 0x00004C, "Member 'FTextChatChannelTypeRowBase::m_PersonalChannelColorOverride' has a wrong offset!");
static_assert(offsetof(FTextChatChannelTypeRowBase, m_bIsVisible) == 0x000050, "Member 'FTextChatChannelTypeRowBase::m_bIsVisible' has a wrong offset!");
static_assert(offsetof(FTextChatChannelTypeRowBase, m_TopHeadlineVisible) == 0x000051, "Member 'FTextChatChannelTypeRowBase::m_TopHeadlineVisible' has a wrong offset!");
static_assert(offsetof(FTextChatChannelTypeRowBase, m_HaveDefaultHoverState) == 0x000052, "Member 'FTextChatChannelTypeRowBase::m_HaveDefaultHoverState' has a wrong offset!");
static_assert(offsetof(FTextChatChannelTypeRowBase, M_NotificationAudioEvent) == 0x000058, "Member 'FTextChatChannelTypeRowBase::M_NotificationAudioEvent' has a wrong offset!");

// ScriptStruct DuneSandbox.ChatSettingsRowBase
// 0x0058 (0x0068 - 0x0010)
struct FChatSettingsRowBase final : public FTableRowBase
{
public:
	ETextChatChannelType                          m_DefaultViewingChatChannel;                       // 0x0010(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextChatChannelType                          m_DefaultWritingChatChannel;                       // 0x0011(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextChatChannelType                          m_OvermapDefaultWritingChatChannel;                // 0x0012(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_MaximumStoredMessages;                           // 0x0014(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MessageCharacterLimit;                           // 0x0018(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ProximityRadius;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ProximityMessagesMinBatchSize;                   // 0x0020(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaxProximityMessagesProcessedPerFrame;           // 0x0024(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ChatBubbleShowMessageRadius;                     // 0x0028(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ChatBubbleThresholdToHide;                       // 0x002C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             m_ChatBubbleDurationCurve;                         // 0x0030(0x0030)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ChatBubbleDurationInSecs;                        // 0x0060(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AllowedSilenceDurationBeforeHidingVoiceChatIndicatorInSecs; // 0x0064(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatSettingsRowBase) == 0x000008, "Wrong alignment on FChatSettingsRowBase");
static_assert(sizeof(FChatSettingsRowBase) == 0x000068, "Wrong size on FChatSettingsRowBase");
static_assert(offsetof(FChatSettingsRowBase, m_DefaultViewingChatChannel) == 0x000010, "Member 'FChatSettingsRowBase::m_DefaultViewingChatChannel' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_DefaultWritingChatChannel) == 0x000011, "Member 'FChatSettingsRowBase::m_DefaultWritingChatChannel' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_OvermapDefaultWritingChatChannel) == 0x000012, "Member 'FChatSettingsRowBase::m_OvermapDefaultWritingChatChannel' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_MaximumStoredMessages) == 0x000014, "Member 'FChatSettingsRowBase::m_MaximumStoredMessages' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_MessageCharacterLimit) == 0x000018, "Member 'FChatSettingsRowBase::m_MessageCharacterLimit' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_ProximityRadius) == 0x00001C, "Member 'FChatSettingsRowBase::m_ProximityRadius' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_ProximityMessagesMinBatchSize) == 0x000020, "Member 'FChatSettingsRowBase::m_ProximityMessagesMinBatchSize' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_MaxProximityMessagesProcessedPerFrame) == 0x000024, "Member 'FChatSettingsRowBase::m_MaxProximityMessagesProcessedPerFrame' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_ChatBubbleShowMessageRadius) == 0x000028, "Member 'FChatSettingsRowBase::m_ChatBubbleShowMessageRadius' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_ChatBubbleThresholdToHide) == 0x00002C, "Member 'FChatSettingsRowBase::m_ChatBubbleThresholdToHide' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_ChatBubbleDurationCurve) == 0x000030, "Member 'FChatSettingsRowBase::m_ChatBubbleDurationCurve' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_ChatBubbleDurationInSecs) == 0x000060, "Member 'FChatSettingsRowBase::m_ChatBubbleDurationInSecs' has a wrong offset!");
static_assert(offsetof(FChatSettingsRowBase, m_AllowedSilenceDurationBeforeHidingVoiceChatIndicatorInSecs) == 0x000064, "Member 'FChatSettingsRowBase::m_AllowedSilenceDurationBeforeHidingVoiceChatIndicatorInSecs' has a wrong offset!");

// ScriptStruct DuneSandbox.EffectVolume_ActorHitInfo
// 0x0020 (0x0020 - 0x0000)
struct FEffectVolume_ActorHitInfo final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAbilitySystemComponent> ASC;                                               // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UDamageableActorComponent> DAC;                                             // 0x0010(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEffectVolume_ActorHitInfo) == 0x000004, "Wrong alignment on FEffectVolume_ActorHitInfo");
static_assert(sizeof(FEffectVolume_ActorHitInfo) == 0x000020, "Wrong size on FEffectVolume_ActorHitInfo");
static_assert(offsetof(FEffectVolume_ActorHitInfo, Actor) == 0x000000, "Member 'FEffectVolume_ActorHitInfo::Actor' has a wrong offset!");
static_assert(offsetof(FEffectVolume_ActorHitInfo, ASC) == 0x000008, "Member 'FEffectVolume_ActorHitInfo::ASC' has a wrong offset!");
static_assert(offsetof(FEffectVolume_ActorHitInfo, DAC) == 0x000010, "Member 'FEffectVolume_ActorHitInfo::DAC' has a wrong offset!");

// ScriptStruct DuneSandbox.TrackedPlayerAndEffect
// 0x0018 (0x0018 - 0x0000)
struct FTrackedPlayerAndEffect final
{
public:
	class ADunePlayerCharacter*                   PlayerCharacter;                                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackedPlayerAndEffect) == 0x000008, "Wrong alignment on FTrackedPlayerAndEffect");
static_assert(sizeof(FTrackedPlayerAndEffect) == 0x000018, "Wrong size on FTrackedPlayerAndEffect");
static_assert(offsetof(FTrackedPlayerAndEffect, PlayerCharacter) == 0x000000, "Member 'FTrackedPlayerAndEffect::PlayerCharacter' has a wrong offset!");

// ScriptStruct DuneSandbox.TotemOwnershipChangedEvent
// 0x0008 (0x0038 - 0x0030)
struct FTotemOwnershipChangedEvent final : public FGameEvent
{
public:
	class UObject*                                m_WorldContextObject;                              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTotemOwnershipChangedEvent) == 0x000008, "Wrong alignment on FTotemOwnershipChangedEvent");
static_assert(sizeof(FTotemOwnershipChangedEvent) == 0x000038, "Wrong size on FTotemOwnershipChangedEvent");
static_assert(offsetof(FTotemOwnershipChangedEvent, m_WorldContextObject) == 0x000030, "Member 'FTotemOwnershipChangedEvent::m_WorldContextObject' has a wrong offset!");

// ScriptStruct DuneSandbox.BeamVFX
// 0x0010 (0x0010 - 0x0000)
struct FBeamVFX final
{
public:
	class UNiagaraComponent*                      BeamFX;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ImpactFX;                                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBeamVFX) == 0x000008, "Wrong alignment on FBeamVFX");
static_assert(sizeof(FBeamVFX) == 0x000010, "Wrong size on FBeamVFX");
static_assert(offsetof(FBeamVFX, BeamFX) == 0x000000, "Member 'FBeamVFX::BeamFX' has a wrong offset!");
static_assert(offsetof(FBeamVFX, ImpactFX) == 0x000008, "Member 'FBeamVFX::ImpactFX' has a wrong offset!");

// ScriptStruct DuneSandbox.SoftAudioEventData
// 0x0038 (0x0038 - 0x0000)
struct FSoftAudioEventData final
{
public:
	TSoftObjectPtr<class UFcAudioEvent>           AudioEventSoftPtr;                                 // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoftAudioEventData) == 0x000008, "Wrong alignment on FSoftAudioEventData");
static_assert(sizeof(FSoftAudioEventData) == 0x000038, "Wrong size on FSoftAudioEventData");
static_assert(offsetof(FSoftAudioEventData, AudioEventSoftPtr) == 0x000000, "Member 'FSoftAudioEventData::AudioEventSoftPtr' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetContractContactIssuerActionData
// 0x0070 (0x0080 - 0x0010)
struct FCommuninetContractContactIssuerActionData final : public FCommuninetActionDataBase
{
public:
	struct FUniqueID                              ContractItemUid;                                   // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FContractInfo                          ContractInfo;                                      // 0x0018(0x0060)(NativeAccessSpecifierPublic)
	int32                                         ConditionId;                                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommuninetContractContactIssuerActionData) == 0x000008, "Wrong alignment on FCommuninetContractContactIssuerActionData");
static_assert(sizeof(FCommuninetContractContactIssuerActionData) == 0x000080, "Wrong size on FCommuninetContractContactIssuerActionData");
static_assert(offsetof(FCommuninetContractContactIssuerActionData, ContractItemUid) == 0x000010, "Member 'FCommuninetContractContactIssuerActionData::ContractItemUid' has a wrong offset!");
static_assert(offsetof(FCommuninetContractContactIssuerActionData, ContractInfo) == 0x000018, "Member 'FCommuninetContractContactIssuerActionData::ContractInfo' has a wrong offset!");
static_assert(offsetof(FCommuninetContractContactIssuerActionData, ConditionId) == 0x000078, "Member 'FCommuninetContractContactIssuerActionData::ConditionId' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetMapMarkerActionData
// 0x0018 (0x0028 - 0x0010)
struct FCommuninetMapMarkerActionData final : public FCommuninetActionDataBase
{
public:
	struct FVector2D                              m_MarkerLocation;                                  // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEMapMarker                            m_MapMarkerType;                                   // 0x0020(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommuninetMapMarkerActionData) == 0x000008, "Wrong alignment on FCommuninetMapMarkerActionData");
static_assert(sizeof(FCommuninetMapMarkerActionData) == 0x000028, "Wrong size on FCommuninetMapMarkerActionData");
static_assert(offsetof(FCommuninetMapMarkerActionData, m_MarkerLocation) == 0x000010, "Member 'FCommuninetMapMarkerActionData::m_MarkerLocation' has a wrong offset!");
static_assert(offsetof(FCommuninetMapMarkerActionData, m_MapMarkerType) == 0x000020, "Member 'FCommuninetMapMarkerActionData::m_MapMarkerType' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetP2pTradeRequestAnswerActionData
// 0x0010 (0x0020 - 0x0010)
struct FCommuninetP2pTradeRequestAnswerActionData final : public FCommuninetActionDataBase
{
public:
	struct FUniqueID                              Instigator;                                        // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccepted;                                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommuninetP2pTradeRequestAnswerActionData) == 0x000008, "Wrong alignment on FCommuninetP2pTradeRequestAnswerActionData");
static_assert(sizeof(FCommuninetP2pTradeRequestAnswerActionData) == 0x000020, "Wrong size on FCommuninetP2pTradeRequestAnswerActionData");
static_assert(offsetof(FCommuninetP2pTradeRequestAnswerActionData, Instigator) == 0x000010, "Member 'FCommuninetP2pTradeRequestAnswerActionData::Instigator' has a wrong offset!");
static_assert(offsetof(FCommuninetP2pTradeRequestAnswerActionData, bAccepted) == 0x000018, "Member 'FCommuninetP2pTradeRequestAnswerActionData::bAccepted' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleSeatEvent
// 0x0010 (0x0040 - 0x0030)
struct FVehicleSeatEvent final : public FGameEvent
{
public:
	EVehicleModel                                 m_VehicleModel;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleSeatConditionType                     m_VehicleSeatConditionType;                        // 0x0031(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDuneVehicleSeatComponent*              m_VehicleSeatComponent;                            // 0x0038(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleSeatEvent) == 0x000008, "Wrong alignment on FVehicleSeatEvent");
static_assert(sizeof(FVehicleSeatEvent) == 0x000040, "Wrong size on FVehicleSeatEvent");
static_assert(offsetof(FVehicleSeatEvent, m_VehicleModel) == 0x000030, "Member 'FVehicleSeatEvent::m_VehicleModel' has a wrong offset!");
static_assert(offsetof(FVehicleSeatEvent, m_VehicleSeatConditionType) == 0x000031, "Member 'FVehicleSeatEvent::m_VehicleSeatConditionType' has a wrong offset!");
static_assert(offsetof(FVehicleSeatEvent, m_VehicleSeatComponent) == 0x000038, "Member 'FVehicleSeatEvent::m_VehicleSeatComponent' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetP2pTradeRequestCancelActionData
// 0x0008 (0x0018 - 0x0010)
struct FCommuninetP2pTradeRequestCancelActionData final : public FCommuninetActionDataBase
{
public:
	struct FUniqueID                              Target;                                            // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommuninetP2pTradeRequestCancelActionData) == 0x000008, "Wrong alignment on FCommuninetP2pTradeRequestCancelActionData");
static_assert(sizeof(FCommuninetP2pTradeRequestCancelActionData) == 0x000018, "Wrong size on FCommuninetP2pTradeRequestCancelActionData");
static_assert(offsetof(FCommuninetP2pTradeRequestCancelActionData, Target) == 0x000010, "Member 'FCommuninetP2pTradeRequestCancelActionData::Target' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetP2pTradeRequestReceiveActionData
// 0x0008 (0x0018 - 0x0010)
struct FCommuninetP2pTradeRequestReceiveActionData final : public FCommuninetActionDataBase
{
public:
	struct FUniqueID                              Instigator;                                        // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommuninetP2pTradeRequestReceiveActionData) == 0x000008, "Wrong alignment on FCommuninetP2pTradeRequestReceiveActionData");
static_assert(sizeof(FCommuninetP2pTradeRequestReceiveActionData) == 0x000018, "Wrong size on FCommuninetP2pTradeRequestReceiveActionData");
static_assert(offsetof(FCommuninetP2pTradeRequestReceiveActionData, Instigator) == 0x000010, "Member 'FCommuninetP2pTradeRequestReceiveActionData::Instigator' has a wrong offset!");

// ScriptStruct DuneSandbox.CommuninetMessageArgs
// 0x0020 (0x0020 - 0x0000)
struct FCommuninetMessageArgs final
{
public:
	struct FECommuninetMessageId                  MessageId;                                         // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MessageArgs;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FUniqueID                              RecipientUniqueId;                                 // 0x0018(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommuninetMessageArgs) == 0x000008, "Wrong alignment on FCommuninetMessageArgs");
static_assert(sizeof(FCommuninetMessageArgs) == 0x000020, "Wrong size on FCommuninetMessageArgs");
static_assert(offsetof(FCommuninetMessageArgs, MessageId) == 0x000000, "Member 'FCommuninetMessageArgs::MessageId' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageArgs, MessageArgs) == 0x000008, "Member 'FCommuninetMessageArgs::MessageArgs' has a wrong offset!");
static_assert(offsetof(FCommuninetMessageArgs, RecipientUniqueId) == 0x000018, "Member 'FCommuninetMessageArgs::RecipientUniqueId' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractMarkerInfo
// 0x0360 (0x0360 - 0x0000)
struct FContractMarkerInfo final
{
public:
	struct FEContractName                         ContractName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionId;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContractSettings                      ContractSettings;                                  // 0x0010(0x0350)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContractMarkerInfo) == 0x000008, "Wrong alignment on FContractMarkerInfo");
static_assert(sizeof(FContractMarkerInfo) == 0x000360, "Wrong size on FContractMarkerInfo");
static_assert(offsetof(FContractMarkerInfo, ContractName) == 0x000000, "Member 'FContractMarkerInfo::ContractName' has a wrong offset!");
static_assert(offsetof(FContractMarkerInfo, ConditionId) == 0x000008, "Member 'FContractMarkerInfo::ConditionId' has a wrong offset!");
static_assert(offsetof(FContractMarkerInfo, ContractSettings) == 0x000010, "Member 'FContractMarkerInfo::ContractSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.TrackedContractInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FTrackedContractInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackedContractInfo) == 0x000008, "Wrong alignment on FTrackedContractInfo");
static_assert(sizeof(FTrackedContractInfo) == 0x000030, "Wrong size on FTrackedContractInfo");

// ScriptStruct DuneSandbox.ServerGameTweakValue
// 0x0018 (0x0018 - 0x0000)
struct FServerGameTweakValue final
{
public:
	class FName                                   TweakName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TweakValue;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGameTweakValue) == 0x000008, "Wrong alignment on FServerGameTweakValue");
static_assert(sizeof(FServerGameTweakValue) == 0x000018, "Wrong size on FServerGameTweakValue");
static_assert(offsetof(FServerGameTweakValue, TweakName) == 0x000000, "Member 'FServerGameTweakValue::TweakName' has a wrong offset!");
static_assert(offsetof(FServerGameTweakValue, TweakValue) == 0x000008, "Member 'FServerGameTweakValue::TweakValue' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadVendorDecreeEffectBool
// 0x000C (0x000C - 0x0000)
struct FLandsraadVendorDecreeEffectBool final
{
public:
	struct FEFaction                              Faction;                                           // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandsraadVendorType                          VendorType;                                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          active;                                            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandsraadVendorDecreeEffectBool) == 0x000004, "Wrong alignment on FLandsraadVendorDecreeEffectBool");
static_assert(sizeof(FLandsraadVendorDecreeEffectBool) == 0x00000C, "Wrong size on FLandsraadVendorDecreeEffectBool");
static_assert(offsetof(FLandsraadVendorDecreeEffectBool, Faction) == 0x000000, "Member 'FLandsraadVendorDecreeEffectBool::Faction' has a wrong offset!");
static_assert(offsetof(FLandsraadVendorDecreeEffectBool, VendorType) == 0x000008, "Member 'FLandsraadVendorDecreeEffectBool::VendorType' has a wrong offset!");
static_assert(offsetof(FLandsraadVendorDecreeEffectBool, active) == 0x000009, "Member 'FLandsraadVendorDecreeEffectBool::active' has a wrong offset!");

// ScriptStruct DuneSandbox.RadialWheelCategoryData
// 0x0048 (0x0048 - 0x0000)
struct FRadialWheelCategoryData final
{
public:
	class FText                                   m_DisplayName;                                     // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_Icon;                                            // 0x0018(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRadialWheelCategoryData) == 0x000008, "Wrong alignment on FRadialWheelCategoryData");
static_assert(sizeof(FRadialWheelCategoryData) == 0x000048, "Wrong size on FRadialWheelCategoryData");
static_assert(offsetof(FRadialWheelCategoryData, m_DisplayName) == 0x000000, "Member 'FRadialWheelCategoryData::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FRadialWheelCategoryData, m_Icon) == 0x000018, "Member 'FRadialWheelCategoryData::m_Icon' has a wrong offset!");

// ScriptStruct DuneSandbox.CraftingResultItem
// 0x000C (0x000C - 0x0000)
struct FCraftingResultItem final
{
public:
	struct FEItemTemplateID                       ItemTemplateId;                                    // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnCount;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingResultItem) == 0x000004, "Wrong alignment on FCraftingResultItem");
static_assert(sizeof(FCraftingResultItem) == 0x00000C, "Wrong size on FCraftingResultItem");
static_assert(offsetof(FCraftingResultItem, ItemTemplateId) == 0x000000, "Member 'FCraftingResultItem::ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FCraftingResultItem, SpawnCount) == 0x000008, "Member 'FCraftingResultItem::SpawnCount' has a wrong offset!");

// ScriptStruct DuneSandbox.CraftingIngredientRequestAllocNode
// 0x0010 (0x0010 - 0x0000)
struct FCraftingIngredientRequestAllocNode final
{
public:
	TArray<struct FCraftingIngredientItemAllocNode> ItemAllocNodes;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingIngredientRequestAllocNode) == 0x000008, "Wrong alignment on FCraftingIngredientRequestAllocNode");
static_assert(sizeof(FCraftingIngredientRequestAllocNode) == 0x000010, "Wrong size on FCraftingIngredientRequestAllocNode");
static_assert(offsetof(FCraftingIngredientRequestAllocNode, ItemAllocNodes) == 0x000000, "Member 'FCraftingIngredientRequestAllocNode::ItemAllocNodes' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemCraftingRequest
// 0x0050 (0x0050 - 0x0000)
struct FItemCraftingRequest final
{
public:
	struct FEItemCraftingRecipeId                 RecipeId;                                          // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              InstigatorActorId;                                 // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestID;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestCount;                                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestTotalCount;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterAllocation;                                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalWaterRequested;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CostMultiplier;                                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeMultiplier;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulationSucessfull;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCraftingResultItem>            ResultItems;                                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCraftingIngredientRequestAllocNode> IngredientAllocations;                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCraftingRequest) == 0x000008, "Wrong alignment on FItemCraftingRequest");
static_assert(sizeof(FItemCraftingRequest) == 0x000050, "Wrong size on FItemCraftingRequest");
static_assert(offsetof(FItemCraftingRequest, RecipeId) == 0x000000, "Member 'FItemCraftingRequest::RecipeId' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, InstigatorActorId) == 0x000008, "Member 'FItemCraftingRequest::InstigatorActorId' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, RequestID) == 0x000010, "Member 'FItemCraftingRequest::RequestID' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, RequestCount) == 0x000014, "Member 'FItemCraftingRequest::RequestCount' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, RequestTotalCount) == 0x000018, "Member 'FItemCraftingRequest::RequestTotalCount' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, WaterAllocation) == 0x00001C, "Member 'FItemCraftingRequest::WaterAllocation' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, TotalWaterRequested) == 0x000020, "Member 'FItemCraftingRequest::TotalWaterRequested' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, CostMultiplier) == 0x000024, "Member 'FItemCraftingRequest::CostMultiplier' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, TimeMultiplier) == 0x000028, "Member 'FItemCraftingRequest::TimeMultiplier' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, bSimulationSucessfull) == 0x00002C, "Member 'FItemCraftingRequest::bSimulationSucessfull' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, ResultItems) == 0x000030, "Member 'FItemCraftingRequest::ResultItems' has a wrong offset!");
static_assert(offsetof(FItemCraftingRequest, IngredientAllocations) == 0x000040, "Member 'FItemCraftingRequest::IngredientAllocations' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemCraftingComponent
// 0x0038 (0x0038 - 0x0000)
struct FItemCraftingComponent final
{
public:
	TWeakObjectPtr<class UItemCraftingActorComponent> OwnerActorComponent;                           // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetFarmUpTime;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTimeToCraftInSec;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviouslyCompletedTimeToCraftInSec;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemCraftingRequest>           RequestsQueue;                                     // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RequestsQueueMaxLength;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECraftingProcessState                         State;                                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextFreeRequestId;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCraftingComponent) == 0x000008, "Wrong alignment on FItemCraftingComponent");
static_assert(sizeof(FItemCraftingComponent) == 0x000038, "Wrong size on FItemCraftingComponent");
static_assert(offsetof(FItemCraftingComponent, OwnerActorComponent) == 0x000000, "Member 'FItemCraftingComponent::OwnerActorComponent' has a wrong offset!");
static_assert(offsetof(FItemCraftingComponent, TargetFarmUpTime) == 0x000008, "Member 'FItemCraftingComponent::TargetFarmUpTime' has a wrong offset!");
static_assert(offsetof(FItemCraftingComponent, TotalTimeToCraftInSec) == 0x00000C, "Member 'FItemCraftingComponent::TotalTimeToCraftInSec' has a wrong offset!");
static_assert(offsetof(FItemCraftingComponent, PreviouslyCompletedTimeToCraftInSec) == 0x000010, "Member 'FItemCraftingComponent::PreviouslyCompletedTimeToCraftInSec' has a wrong offset!");
static_assert(offsetof(FItemCraftingComponent, RequestsQueue) == 0x000018, "Member 'FItemCraftingComponent::RequestsQueue' has a wrong offset!");
static_assert(offsetof(FItemCraftingComponent, RequestsQueueMaxLength) == 0x000028, "Member 'FItemCraftingComponent::RequestsQueueMaxLength' has a wrong offset!");
static_assert(offsetof(FItemCraftingComponent, State) == 0x00002C, "Member 'FItemCraftingComponent::State' has a wrong offset!");
static_assert(offsetof(FItemCraftingComponent, NextFreeRequestId) == 0x000030, "Member 'FItemCraftingComponent::NextFreeRequestId' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormTargetIgnoreLocation
// 0x0020 (0x0020 - 0x0000)
struct FSandwormTargetIgnoreLocation final
{
public:
	struct FVector                                m_IgnoreLocation;                                  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Timestamp;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandwormTargetIgnoreLocation) == 0x000008, "Wrong alignment on FSandwormTargetIgnoreLocation");
static_assert(sizeof(FSandwormTargetIgnoreLocation) == 0x000020, "Wrong size on FSandwormTargetIgnoreLocation");
static_assert(offsetof(FSandwormTargetIgnoreLocation, m_IgnoreLocation) == 0x000000, "Member 'FSandwormTargetIgnoreLocation::m_IgnoreLocation' has a wrong offset!");
static_assert(offsetof(FSandwormTargetIgnoreLocation, m_Timestamp) == 0x000018, "Member 'FSandwormTargetIgnoreLocation::m_Timestamp' has a wrong offset!");

// ScriptStruct DuneSandbox.ECustomizationMutableRowName
// 0x0000 (0x0008 - 0x0008)
struct FECustomizationMutableRowName final : public FStringEnumValue
{
};
static_assert(alignof(FECustomizationMutableRowName) == 0x000004, "Wrong alignment on FECustomizationMutableRowName");
static_assert(sizeof(FECustomizationMutableRowName) == 0x000008, "Wrong size on FECustomizationMutableRowName");

// ScriptStruct DuneSandbox.ServerDealRadialDamageInfo
// 0x00E0 (0x00E0 - 0x0000)
struct FServerDealRadialDamageInfo final
{
public:
	class FString                                 m_DamageSourceName;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_AttackName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BaseDamage;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinimumDamage;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BaseShieldDamage;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinimumShieldDamage;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_BasePoiseDamage;                                 // 0x0030(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_MinimumPoiseDamage;                              // 0x003C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                m_Origin;                                          // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DamageInnerRadius;                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DamageOuterRadius;                               // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DamageFalloff;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneDamageType>            m_DamageTypeClass;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         m_IgnoreActors;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 m_DamageCauser;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            m_InstigatedByController;                          // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CritMultiplier;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bMulticastDamage;                                // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bPoiseDamagePredicted;                           // 0x009D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             m_DamagePreventionChannel;                         // 0x009E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F[0x1];                                       // 0x009F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_DamageSourceFlags;                               // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApply;                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_GameplayEffectsToApplyToAttacker;                // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_HitInterval;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDirectDamage;                                   // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CalculatedFrameTypeDamageModifier;               // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerDealRadialDamageInfo) == 0x000008, "Wrong alignment on FServerDealRadialDamageInfo");
static_assert(sizeof(FServerDealRadialDamageInfo) == 0x0000E0, "Wrong size on FServerDealRadialDamageInfo");
static_assert(offsetof(FServerDealRadialDamageInfo, m_DamageSourceName) == 0x000000, "Member 'FServerDealRadialDamageInfo::m_DamageSourceName' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_AttackName) == 0x000010, "Member 'FServerDealRadialDamageInfo::m_AttackName' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_BaseDamage) == 0x000020, "Member 'FServerDealRadialDamageInfo::m_BaseDamage' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_MinimumDamage) == 0x000024, "Member 'FServerDealRadialDamageInfo::m_MinimumDamage' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_BaseShieldDamage) == 0x000028, "Member 'FServerDealRadialDamageInfo::m_BaseShieldDamage' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_MinimumShieldDamage) == 0x00002C, "Member 'FServerDealRadialDamageInfo::m_MinimumShieldDamage' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_BasePoiseDamage) == 0x000030, "Member 'FServerDealRadialDamageInfo::m_BasePoiseDamage' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_MinimumPoiseDamage) == 0x00003C, "Member 'FServerDealRadialDamageInfo::m_MinimumPoiseDamage' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_Origin) == 0x000048, "Member 'FServerDealRadialDamageInfo::m_Origin' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_DamageInnerRadius) == 0x000060, "Member 'FServerDealRadialDamageInfo::m_DamageInnerRadius' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_DamageOuterRadius) == 0x000064, "Member 'FServerDealRadialDamageInfo::m_DamageOuterRadius' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_DamageFalloff) == 0x000068, "Member 'FServerDealRadialDamageInfo::m_DamageFalloff' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_DamageTypeClass) == 0x000070, "Member 'FServerDealRadialDamageInfo::m_DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_IgnoreActors) == 0x000078, "Member 'FServerDealRadialDamageInfo::m_IgnoreActors' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_DamageCauser) == 0x000088, "Member 'FServerDealRadialDamageInfo::m_DamageCauser' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_InstigatedByController) == 0x000090, "Member 'FServerDealRadialDamageInfo::m_InstigatedByController' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_CritMultiplier) == 0x000098, "Member 'FServerDealRadialDamageInfo::m_CritMultiplier' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_bMulticastDamage) == 0x00009C, "Member 'FServerDealRadialDamageInfo::m_bMulticastDamage' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_bPoiseDamagePredicted) == 0x00009D, "Member 'FServerDealRadialDamageInfo::m_bPoiseDamagePredicted' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_DamagePreventionChannel) == 0x00009E, "Member 'FServerDealRadialDamageInfo::m_DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_DamageSourceFlags) == 0x0000A0, "Member 'FServerDealRadialDamageInfo::m_DamageSourceFlags' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_GameplayEffectsToApply) == 0x0000A8, "Member 'FServerDealRadialDamageInfo::m_GameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_GameplayEffectsToApplyToAttacker) == 0x0000B8, "Member 'FServerDealRadialDamageInfo::m_GameplayEffectsToApplyToAttacker' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_HitInterval) == 0x0000C8, "Member 'FServerDealRadialDamageInfo::m_HitInterval' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_bDirectDamage) == 0x0000CC, "Member 'FServerDealRadialDamageInfo::m_bDirectDamage' has a wrong offset!");
static_assert(offsetof(FServerDealRadialDamageInfo, m_CalculatedFrameTypeDamageModifier) == 0x0000D0, "Member 'FServerDealRadialDamageInfo::m_CalculatedFrameTypeDamageModifier' has a wrong offset!");

// ScriptStruct DuneSandbox.DamageVisualizationModuleInfo
// 0x0020 (0x0020 - 0x0000)
struct FDamageVisualizationModuleInfo final
{
public:
	class UTextureRenderTarget2D*                 MeshUnwrap;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 MeshHitMask;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               HitMaskMaterialInstance;                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         VehicleModuleMesh;                                 // 0x0018(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageVisualizationModuleInfo) == 0x000008, "Wrong alignment on FDamageVisualizationModuleInfo");
static_assert(sizeof(FDamageVisualizationModuleInfo) == 0x000020, "Wrong size on FDamageVisualizationModuleInfo");
static_assert(offsetof(FDamageVisualizationModuleInfo, MeshUnwrap) == 0x000000, "Member 'FDamageVisualizationModuleInfo::MeshUnwrap' has a wrong offset!");
static_assert(offsetof(FDamageVisualizationModuleInfo, MeshHitMask) == 0x000008, "Member 'FDamageVisualizationModuleInfo::MeshHitMask' has a wrong offset!");
static_assert(offsetof(FDamageVisualizationModuleInfo, HitMaskMaterialInstance) == 0x000010, "Member 'FDamageVisualizationModuleInfo::HitMaskMaterialInstance' has a wrong offset!");
static_assert(offsetof(FDamageVisualizationModuleInfo, VehicleModuleMesh) == 0x000018, "Member 'FDamageVisualizationModuleInfo::VehicleModuleMesh' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneExchangeData
// 0x000C (0x000C - 0x0000)
struct FDuneExchangeData final
{
public:
	struct FEDuneExchangeNames                    ExchangeName;                                      // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsedOrderSlots;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneExchangeData) == 0x000004, "Wrong alignment on FDuneExchangeData");
static_assert(sizeof(FDuneExchangeData) == 0x00000C, "Wrong size on FDuneExchangeData");
static_assert(offsetof(FDuneExchangeData, ExchangeName) == 0x000000, "Member 'FDuneExchangeData::ExchangeName' has a wrong offset!");
static_assert(offsetof(FDuneExchangeData, UsedOrderSlots) == 0x000008, "Member 'FDuneExchangeData::UsedOrderSlots' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadRedeemHouseRewardEvent
// 0x0030 (0x0060 - 0x0030)
struct FLandsraadRedeemHouseRewardEvent final : public FGameEvent
{
public:
	TSoftObjectPtr<class ULandsraadHouseDataAsset> m_HouseAsset;                                     // 0x0030(0x0030)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadRedeemHouseRewardEvent) == 0x000008, "Wrong alignment on FLandsraadRedeemHouseRewardEvent");
static_assert(sizeof(FLandsraadRedeemHouseRewardEvent) == 0x000060, "Wrong size on FLandsraadRedeemHouseRewardEvent");
static_assert(offsetof(FLandsraadRedeemHouseRewardEvent, m_HouseAsset) == 0x000030, "Member 'FLandsraadRedeemHouseRewardEvent::m_HouseAsset' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterUniqueId
// 0x0018 (0x0018 - 0x0000)
struct FEncounterUniqueId final
{
public:
	struct FEEncounterName                        EncounterName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterUniqueId) == 0x000008, "Wrong alignment on FEncounterUniqueId");
static_assert(sizeof(FEncounterUniqueId) == 0x000018, "Wrong size on FEncounterUniqueId");
static_assert(offsetof(FEncounterUniqueId, EncounterName) == 0x000000, "Member 'FEncounterUniqueId::EncounterName' has a wrong offset!");
static_assert(offsetof(FEncounterUniqueId, ActorName) == 0x000008, "Member 'FEncounterUniqueId::ActorName' has a wrong offset!");

// ScriptStruct DuneSandbox.OwningEncounterUid
// 0x000C (0x000C - 0x0000)
struct FOwningEncounterUid final
{
public:
	class FName                                   EncounterUid;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOwningEncounterUid) == 0x000004, "Wrong alignment on FOwningEncounterUid");
static_assert(sizeof(FOwningEncounterUid) == 0x00000C, "Wrong size on FOwningEncounterUid");
static_assert(offsetof(FOwningEncounterUid, EncounterUid) == 0x000000, "Member 'FOwningEncounterUid::EncounterUid' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterNodeGroup
// 0x0010 (0x0010 - 0x0000)
struct FEncounterNodeGroup final
{
public:
	TArray<struct FEncounterNodePoint>            Points;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterNodeGroup) == 0x000008, "Wrong alignment on FEncounterNodeGroup");
static_assert(sizeof(FEncounterNodeGroup) == 0x000010, "Wrong size on FEncounterNodeGroup");
static_assert(offsetof(FEncounterNodeGroup, Points) == 0x000000, "Member 'FEncounterNodeGroup::Points' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterInstance
// 0x00E8 (0x00E8 - 0x0000)
struct FEncounterInstance final
{
public:
	EEncounterInstanceState                       State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTerrainBlockInstance                  Level;                                             // 0x0008(0x00C0)(NativeAccessSpecifierPublic)
	class AEncounter*                             EncounterActor;                                    // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ZeroOriginLocation;                                // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterInstance) == 0x000008, "Wrong alignment on FEncounterInstance");
static_assert(sizeof(FEncounterInstance) == 0x0000E8, "Wrong size on FEncounterInstance");
static_assert(offsetof(FEncounterInstance, State) == 0x000000, "Member 'FEncounterInstance::State' has a wrong offset!");
static_assert(offsetof(FEncounterInstance, Level) == 0x000008, "Member 'FEncounterInstance::Level' has a wrong offset!");
static_assert(offsetof(FEncounterInstance, EncounterActor) == 0x0000C8, "Member 'FEncounterInstance::EncounterActor' has a wrong offset!");
static_assert(offsetof(FEncounterInstance, ZeroOriginLocation) == 0x0000D0, "Member 'FEncounterInstance::ZeroOriginLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterContent
// 0x0010 (0x0010 - 0x0000)
struct FEncounterContent final
{
public:
	TArray<class UObject*>                        Objects;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterContent) == 0x000008, "Wrong alignment on FEncounterContent");
static_assert(sizeof(FEncounterContent) == 0x000010, "Wrong size on FEncounterContent");
static_assert(offsetof(FEncounterContent, Objects) == 0x000000, "Member 'FEncounterContent::Objects' has a wrong offset!");

// ScriptStruct DuneSandbox.EncounterNodeGroupSettings
// 0x00C0 (0x00C0 - 0x0000)
struct FEncounterNodeGroupSettings final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEncounterLocationTemplate             Template;                                          // 0x0008(0x00B0)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterNodeGroupSettings) == 0x000008, "Wrong alignment on FEncounterNodeGroupSettings");
static_assert(sizeof(FEncounterNodeGroupSettings) == 0x0000C0, "Wrong size on FEncounterNodeGroupSettings");
static_assert(offsetof(FEncounterNodeGroupSettings, bIsEnabled) == 0x000000, "Member 'FEncounterNodeGroupSettings::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FEncounterNodeGroupSettings, Template) == 0x000008, "Member 'FEncounterNodeGroupSettings::Template' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerLevelUpEvent
// 0x0008 (0x0038 - 0x0030)
struct FPlayerLevelUpEvent final : public FGameEvent
{
public:
	int32                                         m_PreviousLevel;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NewLevel;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerLevelUpEvent) == 0x000008, "Wrong alignment on FPlayerLevelUpEvent");
static_assert(sizeof(FPlayerLevelUpEvent) == 0x000038, "Wrong size on FPlayerLevelUpEvent");
static_assert(offsetof(FPlayerLevelUpEvent, m_PreviousLevel) == 0x000030, "Member 'FPlayerLevelUpEvent::m_PreviousLevel' has a wrong offset!");
static_assert(offsetof(FPlayerLevelUpEvent, m_NewLevel) == 0x000034, "Member 'FPlayerLevelUpEvent::m_NewLevel' has a wrong offset!");

// ScriptStruct DuneSandbox.GeneratedObjectDataTables
// 0x0060 (0x0060 - 0x0000)
struct FGeneratedObjectDataTables final
{
public:
	TSoftObjectPtr<class UDataTable>              Templates;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              Instances;                                         // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneratedObjectDataTables) == 0x000008, "Wrong alignment on FGeneratedObjectDataTables");
static_assert(sizeof(FGeneratedObjectDataTables) == 0x000060, "Wrong size on FGeneratedObjectDataTables");
static_assert(offsetof(FGeneratedObjectDataTables, Templates) == 0x000000, "Member 'FGeneratedObjectDataTables::Templates' has a wrong offset!");
static_assert(offsetof(FGeneratedObjectDataTables, Instances) == 0x000030, "Member 'FGeneratedObjectDataTables::Instances' has a wrong offset!");

// ScriptStruct DuneSandbox.GenericActorEncounterFactoryCache
// 0x0058 (0x0058 - 0x0000)
struct FGenericActorEncounterFactoryCache final
{
public:
	class UEncountersSubsystem*                   EncountersSubsystem;                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x50];                                       // 0x0008(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenericActorEncounterFactoryCache) == 0x000008, "Wrong alignment on FGenericActorEncounterFactoryCache");
static_assert(sizeof(FGenericActorEncounterFactoryCache) == 0x000058, "Wrong size on FGenericActorEncounterFactoryCache");
static_assert(offsetof(FGenericActorEncounterFactoryCache, EncountersSubsystem) == 0x000000, "Member 'FGenericActorEncounterFactoryCache::EncountersSubsystem' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockStreamingSettings
// 0x0018 (0x0018 - 0x0000)
struct FTerrainBlockStreamingSettings
{
public:
	float                                         Metric;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 LODMetrics;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockStreamingSettings) == 0x000008, "Wrong alignment on FTerrainBlockStreamingSettings");
static_assert(sizeof(FTerrainBlockStreamingSettings) == 0x000018, "Wrong size on FTerrainBlockStreamingSettings");
static_assert(offsetof(FTerrainBlockStreamingSettings, Metric) == 0x000000, "Member 'FTerrainBlockStreamingSettings::Metric' has a wrong offset!");
static_assert(offsetof(FTerrainBlockStreamingSettings, LODMetrics) == 0x000008, "Member 'FTerrainBlockStreamingSettings::LODMetrics' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockStreamingSettingsRule
// 0x0030 (0x0048 - 0x0018)
struct FTerrainBlockStreamingSettingsRule final : public FTerrainBlockStreamingSettings
{
public:
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         Directory;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilterText;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockStreamingSettingsRule) == 0x000008, "Wrong alignment on FTerrainBlockStreamingSettingsRule");
static_assert(sizeof(FTerrainBlockStreamingSettingsRule) == 0x000048, "Wrong size on FTerrainBlockStreamingSettingsRule");
static_assert(offsetof(FTerrainBlockStreamingSettingsRule, Description) == 0x000018, "Member 'FTerrainBlockStreamingSettingsRule::Description' has a wrong offset!");
static_assert(offsetof(FTerrainBlockStreamingSettingsRule, Directory) == 0x000028, "Member 'FTerrainBlockStreamingSettingsRule::Directory' has a wrong offset!");
static_assert(offsetof(FTerrainBlockStreamingSettingsRule, FilterText) == 0x000038, "Member 'FTerrainBlockStreamingSettingsRule::FilterText' has a wrong offset!");

// ScriptStruct DuneSandbox.BattlegroupRegionInfo
// 0x0030 (0x0030 - 0x0000)
struct FBattlegroupRegionInfo final
{
public:
	class FText                                   m_DisplayName;                                     // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class FString                                 m_RegionId;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAutoDetected;                                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlegroupRegionInfo) == 0x000008, "Wrong alignment on FBattlegroupRegionInfo");
static_assert(sizeof(FBattlegroupRegionInfo) == 0x000030, "Wrong size on FBattlegroupRegionInfo");
static_assert(offsetof(FBattlegroupRegionInfo, m_DisplayName) == 0x000000, "Member 'FBattlegroupRegionInfo::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FBattlegroupRegionInfo, m_RegionId) == 0x000018, "Member 'FBattlegroupRegionInfo::m_RegionId' has a wrong offset!");
static_assert(offsetof(FBattlegroupRegionInfo, m_bAutoDetected) == 0x000028, "Member 'FBattlegroupRegionInfo::m_bAutoDetected' has a wrong offset!");

// ScriptStruct DuneSandbox.VariationDetailsEntry
// 0x0038 (0x0038 - 0x0000)
struct FVariationDetailsEntry final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTerrainBlockWorldLayoutEntry>  TerrainBlocks;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTerrainBlockWorldmassEntry>    WorldmassSettings;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVariationDetailsEntry) == 0x000008, "Wrong alignment on FVariationDetailsEntry");
static_assert(sizeof(FVariationDetailsEntry) == 0x000038, "Wrong size on FVariationDetailsEntry");
static_assert(offsetof(FVariationDetailsEntry, Color) == 0x000000, "Member 'FVariationDetailsEntry::Color' has a wrong offset!");
static_assert(offsetof(FVariationDetailsEntry, TerrainBlocks) == 0x000008, "Member 'FVariationDetailsEntry::TerrainBlocks' has a wrong offset!");
static_assert(offsetof(FVariationDetailsEntry, WorldmassSettings) == 0x000018, "Member 'FVariationDetailsEntry::WorldmassSettings' has a wrong offset!");
static_assert(offsetof(FVariationDetailsEntry, Tags) == 0x000028, "Member 'FVariationDetailsEntry::Tags' has a wrong offset!");

// ScriptStruct DuneSandbox.TerrainBlockArray
// 0x0010 (0x0010 - 0x0000)
struct FTerrainBlockArray final
{
public:
	TArray<TWeakObjectPtr<class ATerrainBlockGizmoActor>> Array;                                     // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrainBlockArray) == 0x000008, "Wrong alignment on FTerrainBlockArray");
static_assert(sizeof(FTerrainBlockArray) == 0x000010, "Wrong size on FTerrainBlockArray");
static_assert(offsetof(FTerrainBlockArray, Array) == 0x000000, "Member 'FTerrainBlockArray::Array' has a wrong offset!");

// ScriptStruct DuneSandbox.DamageImmunityRequest
// 0x0038 (0x0038 - 0x0000)
struct FDamageImmunityRequest final
{
public:
	class FName                                   m_ActivatorName;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Range;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Angle;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UDuneDamageType>>    m_DamageTypes;                                     // 0x0010(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<EWeaponModFrame>                       m_WeaponModFrames;                                 // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EDamageBlockType                              m_BlockType;                                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_PoiseDamagePercentageToIgnoreImmunity;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageImmunityRequest) == 0x000008, "Wrong alignment on FDamageImmunityRequest");
static_assert(sizeof(FDamageImmunityRequest) == 0x000038, "Wrong size on FDamageImmunityRequest");
static_assert(offsetof(FDamageImmunityRequest, m_ActivatorName) == 0x000000, "Member 'FDamageImmunityRequest::m_ActivatorName' has a wrong offset!");
static_assert(offsetof(FDamageImmunityRequest, m_Range) == 0x000008, "Member 'FDamageImmunityRequest::m_Range' has a wrong offset!");
static_assert(offsetof(FDamageImmunityRequest, m_Angle) == 0x00000C, "Member 'FDamageImmunityRequest::m_Angle' has a wrong offset!");
static_assert(offsetof(FDamageImmunityRequest, m_DamageTypes) == 0x000010, "Member 'FDamageImmunityRequest::m_DamageTypes' has a wrong offset!");
static_assert(offsetof(FDamageImmunityRequest, m_WeaponModFrames) == 0x000020, "Member 'FDamageImmunityRequest::m_WeaponModFrames' has a wrong offset!");
static_assert(offsetof(FDamageImmunityRequest, m_BlockType) == 0x000030, "Member 'FDamageImmunityRequest::m_BlockType' has a wrong offset!");
static_assert(offsetof(FDamageImmunityRequest, m_PoiseDamagePercentageToIgnoreImmunity) == 0x000034, "Member 'FDamageImmunityRequest::m_PoiseDamagePercentageToIgnoreImmunity' has a wrong offset!");

// ScriptStruct DuneSandbox.DamageImmunityComponent
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FDamageImmunityComponent final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageImmunityComponent) == 0x000008, "Wrong alignment on FDamageImmunityComponent");
static_assert(sizeof(FDamageImmunityComponent) == 0x000030, "Wrong size on FDamageImmunityComponent");

// ScriptStruct DuneSandbox.DamageImmunityHitsComponent
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDamageImmunityHitsComponent final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageImmunityHitsComponent) == 0x000008, "Wrong alignment on FDamageImmunityHitsComponent");
static_assert(sizeof(FDamageImmunityHitsComponent) == 0x000018, "Wrong size on FDamageImmunityHitsComponent");

// ScriptStruct DuneSandbox.MeleeRPCData
// 0x0180 (0x0180 - 0x0000)
struct FMeleeRPCData final
{
public:
	struct FMeleeServerRPCData                    m_MeleeServerRPCData;                              // 0x0000(0x0168)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             m_OwnerController;                                 // 0x0168(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ADuneCharacter>          m_OwnerCharacter;                                  // 0x0170(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  m_HitActor;                                        // 0x0178(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeRPCData) == 0x000008, "Wrong alignment on FMeleeRPCData");
static_assert(sizeof(FMeleeRPCData) == 0x000180, "Wrong size on FMeleeRPCData");
static_assert(offsetof(FMeleeRPCData, m_MeleeServerRPCData) == 0x000000, "Member 'FMeleeRPCData::m_MeleeServerRPCData' has a wrong offset!");
static_assert(offsetof(FMeleeRPCData, m_OwnerController) == 0x000168, "Member 'FMeleeRPCData::m_OwnerController' has a wrong offset!");
static_assert(offsetof(FMeleeRPCData, m_OwnerCharacter) == 0x000170, "Member 'FMeleeRPCData::m_OwnerCharacter' has a wrong offset!");
static_assert(offsetof(FMeleeRPCData, m_HitActor) == 0x000178, "Member 'FMeleeRPCData::m_HitActor' has a wrong offset!");

// ScriptStruct DuneSandbox.DuneOptionSliderOption
// 0x0020 (0x0020 - 0x0000)
struct FDuneOptionSliderOption final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsOptionEnabled : 1;                              // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCustomLabel : 1;                               // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CustomLabel;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuneOptionSliderOption) == 0x000008, "Wrong alignment on FDuneOptionSliderOption");
static_assert(sizeof(FDuneOptionSliderOption) == 0x000020, "Wrong size on FDuneOptionSliderOption");
static_assert(offsetof(FDuneOptionSliderOption, Value) == 0x000000, "Member 'FDuneOptionSliderOption::Value' has a wrong offset!");
static_assert(offsetof(FDuneOptionSliderOption, CustomLabel) == 0x000008, "Member 'FDuneOptionSliderOption::CustomLabel' has a wrong offset!");

// ScriptStruct DuneSandbox.MeleeAttackParams
// 0x00F0 (0x00F0 - 0x0000)
struct FMeleeAttackParams final
{
public:
	struct FTransform                             m_OffsetTransform;                                 // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_AttackName;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_HitBoxSize;                                      // 0x0070(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_AdditionalGameplayEffectsToApply;                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         m_OnHitVFXOverride;                                // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_OnHitAudioOverride;                              // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDuneDamageType>            m_DamageTypeOverride;                              // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DamageDealtOverrideMultiplier;                   // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DamageDealtOverride;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StaminaCostMultiplier;                           // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverridePoiseDamage;                            // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoiseDamageData                       m_PoiseDamageDataOverride;                         // 0x00C0(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamageTowardShieldedDataOverride;           // 0x00CC(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          m_bDirectDamage;                                   // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_PoiseDamageOverrideMultiplier;                   // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockbackType                                m_KnockbackTypeOverrideHit;                        // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockbackType                                m_KnockbackTypeOverrideBreak;                      // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockbackRotationOverride                    m_KnockbackRotationOverride;                       // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bBloodDirectionIsInverted;                       // 0x00E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bBloodDirectionIsStab;                           // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0xB];                                       // 0x00E5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeleeAttackParams) == 0x000010, "Wrong alignment on FMeleeAttackParams");
static_assert(sizeof(FMeleeAttackParams) == 0x0000F0, "Wrong size on FMeleeAttackParams");
static_assert(offsetof(FMeleeAttackParams, m_OffsetTransform) == 0x000000, "Member 'FMeleeAttackParams::m_OffsetTransform' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_AttackName) == 0x000060, "Member 'FMeleeAttackParams::m_AttackName' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_HitBoxSize) == 0x000070, "Member 'FMeleeAttackParams::m_HitBoxSize' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_AdditionalGameplayEffectsToApply) == 0x000088, "Member 'FMeleeAttackParams::m_AdditionalGameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_OnHitVFXOverride) == 0x000098, "Member 'FMeleeAttackParams::m_OnHitVFXOverride' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_OnHitAudioOverride) == 0x0000A0, "Member 'FMeleeAttackParams::m_OnHitAudioOverride' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_DamageTypeOverride) == 0x0000A8, "Member 'FMeleeAttackParams::m_DamageTypeOverride' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_DamageDealtOverrideMultiplier) == 0x0000B0, "Member 'FMeleeAttackParams::m_DamageDealtOverrideMultiplier' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_DamageDealtOverride) == 0x0000B4, "Member 'FMeleeAttackParams::m_DamageDealtOverride' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_StaminaCostMultiplier) == 0x0000B8, "Member 'FMeleeAttackParams::m_StaminaCostMultiplier' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_bOverridePoiseDamage) == 0x0000BC, "Member 'FMeleeAttackParams::m_bOverridePoiseDamage' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_PoiseDamageDataOverride) == 0x0000C0, "Member 'FMeleeAttackParams::m_PoiseDamageDataOverride' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_PoiseDamageTowardShieldedDataOverride) == 0x0000CC, "Member 'FMeleeAttackParams::m_PoiseDamageTowardShieldedDataOverride' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_bDirectDamage) == 0x0000D8, "Member 'FMeleeAttackParams::m_bDirectDamage' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_PoiseDamageOverrideMultiplier) == 0x0000DC, "Member 'FMeleeAttackParams::m_PoiseDamageOverrideMultiplier' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_KnockbackTypeOverrideHit) == 0x0000E0, "Member 'FMeleeAttackParams::m_KnockbackTypeOverrideHit' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_KnockbackTypeOverrideBreak) == 0x0000E1, "Member 'FMeleeAttackParams::m_KnockbackTypeOverrideBreak' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_KnockbackRotationOverride) == 0x0000E2, "Member 'FMeleeAttackParams::m_KnockbackRotationOverride' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_bBloodDirectionIsInverted) == 0x0000E3, "Member 'FMeleeAttackParams::m_bBloodDirectionIsInverted' has a wrong offset!");
static_assert(offsetof(FMeleeAttackParams, m_bBloodDirectionIsStab) == 0x0000E4, "Member 'FMeleeAttackParams::m_bBloodDirectionIsStab' has a wrong offset!");

// ScriptStruct DuneSandbox.MeleePredictedHitData
// 0x0158 (0x0158 - 0x0000)
struct FMeleePredictedHitData final
{
public:
	struct FHitResult                             m_HitResult;                                       // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UDuneDamageType>            m_DuneDamageType;                                  // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectToApply>         m_AdditionalGameplayEffectsToApply;                // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          m_OnHitVFXOverride;                                // 0x0100(0x0030)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_AttackName;                                      // 0x0130(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DamageDealt;                                     // 0x0140(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoiseDamageData                       m_PoiseDamage;                                     // 0x0144(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          m_bDirectDamage;                                   // 0x0150(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeleePredictedHitData) == 0x000008, "Wrong alignment on FMeleePredictedHitData");
static_assert(sizeof(FMeleePredictedHitData) == 0x000158, "Wrong size on FMeleePredictedHitData");
static_assert(offsetof(FMeleePredictedHitData, m_HitResult) == 0x000000, "Member 'FMeleePredictedHitData::m_HitResult' has a wrong offset!");
static_assert(offsetof(FMeleePredictedHitData, m_DuneDamageType) == 0x0000E8, "Member 'FMeleePredictedHitData::m_DuneDamageType' has a wrong offset!");
static_assert(offsetof(FMeleePredictedHitData, m_AdditionalGameplayEffectsToApply) == 0x0000F0, "Member 'FMeleePredictedHitData::m_AdditionalGameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(FMeleePredictedHitData, m_OnHitVFXOverride) == 0x000100, "Member 'FMeleePredictedHitData::m_OnHitVFXOverride' has a wrong offset!");
static_assert(offsetof(FMeleePredictedHitData, m_AttackName) == 0x000130, "Member 'FMeleePredictedHitData::m_AttackName' has a wrong offset!");
static_assert(offsetof(FMeleePredictedHitData, m_DamageDealt) == 0x000140, "Member 'FMeleePredictedHitData::m_DamageDealt' has a wrong offset!");
static_assert(offsetof(FMeleePredictedHitData, m_PoiseDamage) == 0x000144, "Member 'FMeleePredictedHitData::m_PoiseDamage' has a wrong offset!");
static_assert(offsetof(FMeleePredictedHitData, m_bDirectDamage) == 0x000150, "Member 'FMeleePredictedHitData::m_bDirectDamage' has a wrong offset!");

// ScriptStruct DuneSandbox.JourneyStoryPlayerDataFastArray
// 0x0118 (0x0240 - 0x0128)
struct alignas(0x10) FJourneyStoryPlayerDataFastArray final : public FFastArraySerializer
{
public:
	uint8                                         Pad_128[0x108];                                    // 0x0128(0x0108)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJourneyStoryPlayerDataFastArrayItem> Items;                                       // 0x0230(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJourneyStoryPlayerDataFastArray) == 0x000010, "Wrong alignment on FJourneyStoryPlayerDataFastArray");
static_assert(sizeof(FJourneyStoryPlayerDataFastArray) == 0x000240, "Wrong size on FJourneyStoryPlayerDataFastArray");
static_assert(offsetof(FJourneyStoryPlayerDataFastArray, Items) == 0x000230, "Member 'FJourneyStoryPlayerDataFastArray::Items' has a wrong offset!");

// ScriptStruct DuneSandbox.FactionTierData
// 0x0028 (0x0028 - 0x0000)
struct FFactionTierData final
{
public:
	class FText                                   m_FactionTierName;                                 // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         m_MinReputationAmount;                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaxReputationAmount;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_FactionTierTag;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFactionTierData) == 0x000008, "Wrong alignment on FFactionTierData");
static_assert(sizeof(FFactionTierData) == 0x000028, "Wrong size on FFactionTierData");
static_assert(offsetof(FFactionTierData, m_FactionTierName) == 0x000000, "Member 'FFactionTierData::m_FactionTierName' has a wrong offset!");
static_assert(offsetof(FFactionTierData, m_MinReputationAmount) == 0x000018, "Member 'FFactionTierData::m_MinReputationAmount' has a wrong offset!");
static_assert(offsetof(FFactionTierData, m_MaxReputationAmount) == 0x00001C, "Member 'FFactionTierData::m_MaxReputationAmount' has a wrong offset!");
static_assert(offsetof(FFactionTierData, m_FactionTierTag) == 0x000020, "Member 'FFactionTierData::m_FactionTierTag' has a wrong offset!");

// ScriptStruct DuneSandbox.FactionData
// 0x0018 (0x0018 - 0x0000)
struct FFactionData final
{
public:
	struct FEFaction                              Faction;                                           // 0x0000(0x0008)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReputationAmount;                                  // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        timestamp;                                         // 0x0010(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFactionData) == 0x000008, "Wrong alignment on FFactionData");
static_assert(sizeof(FFactionData) == 0x000018, "Wrong size on FFactionData");
static_assert(offsetof(FFactionData, Faction) == 0x000000, "Member 'FFactionData::Faction' has a wrong offset!");
static_assert(offsetof(FFactionData, ReputationAmount) == 0x000008, "Member 'FFactionData::ReputationAmount' has a wrong offset!");
static_assert(offsetof(FFactionData, timestamp) == 0x000010, "Member 'FFactionData::timestamp' has a wrong offset!");

// ScriptStruct DuneSandbox.ImmediatePhysicsComponent
// 0x01A0 (0x01A0 - 0x0000)
struct alignas(0x10) FImmediatePhysicsComponent final
{
public:
	uint8                                         Pad_0[0x1A0];                                      // 0x0000(0x01A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImmediatePhysicsComponent) == 0x000010, "Wrong alignment on FImmediatePhysicsComponent");
static_assert(sizeof(FImmediatePhysicsComponent) == 0x0001A0, "Wrong size on FImmediatePhysicsComponent");

// ScriptStruct DuneSandbox.EFogRevealZoneType
// 0x0000 (0x0008 - 0x0008)
struct FEFogRevealZoneType final : public FStringEnumValue
{
};
static_assert(alignof(FEFogRevealZoneType) == 0x000004, "Wrong alignment on FEFogRevealZoneType");
static_assert(sizeof(FEFogRevealZoneType) == 0x000008, "Wrong size on FEFogRevealZoneType");

// ScriptStruct DuneSandbox.MapAreaData
// 0x0014 (0x0020 - 0x000C)
struct FMapAreaData final : public FFastArraySerializerItem
{
public:
	struct FMapAreaId                             m_AreaId;                                          // 0x000C(0x0002)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              m_TimeDiscovered;                                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              m_TimeFirstEntered;                                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapAreaData) == 0x000008, "Wrong alignment on FMapAreaData");
static_assert(sizeof(FMapAreaData) == 0x000020, "Wrong size on FMapAreaData");
static_assert(offsetof(FMapAreaData, m_AreaId) == 0x00000C, "Member 'FMapAreaData::m_AreaId' has a wrong offset!");
static_assert(offsetof(FMapAreaData, m_TimeDiscovered) == 0x000010, "Member 'FMapAreaData::m_TimeDiscovered' has a wrong offset!");
static_assert(offsetof(FMapAreaData, m_TimeFirstEntered) == 0x000018, "Member 'FMapAreaData::m_TimeFirstEntered' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemParamsList
// 0x0010 (0x0010 - 0x0000)
struct FItemParamsList final
{
public:
	TArray<struct FSortableSpawnItemParams>       m_ItemList;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemParamsList) == 0x000008, "Wrong alignment on FItemParamsList");
static_assert(sizeof(FItemParamsList) == 0x000010, "Wrong size on FItemParamsList");
static_assert(offsetof(FItemParamsList, m_ItemList) == 0x000000, "Member 'FItemParamsList::m_ItemList' has a wrong offset!");

// ScriptStruct DuneSandbox.MapAreaDataSerializer
// 0x0018 (0x0140 - 0x0128)
struct FMapAreaDataSerializer final : public FFastArraySerializer
{
public:
	TArray<struct FMapAreaData>                   m_MapAreaEntries;                                  // 0x0128(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class UFullscreenMapAreasComponent*           m_Owner;                                           // 0x0138(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMapAreaDataSerializer) == 0x000008, "Wrong alignment on FMapAreaDataSerializer");
static_assert(sizeof(FMapAreaDataSerializer) == 0x000140, "Wrong size on FMapAreaDataSerializer");
static_assert(offsetof(FMapAreaDataSerializer, m_MapAreaEntries) == 0x000128, "Member 'FMapAreaDataSerializer::m_MapAreaEntries' has a wrong offset!");
static_assert(offsetof(FMapAreaDataSerializer, m_Owner) == 0x000138, "Member 'FMapAreaDataSerializer::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.LifetimeTrack
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FLifetimeTrack final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLifetimeTrack) == 0x000004, "Wrong alignment on FLifetimeTrack");
static_assert(sizeof(FLifetimeTrack) == 0x000008, "Wrong size on FLifetimeTrack");

// ScriptStruct DuneSandbox.MapMarkerSPS
// 0x0198 (0x02C0 - 0x0128)
struct alignas(0x10) FMapMarkerSPS final : public FFastArraySerializer
{
public:
	uint8                                         Pad_128[0x30];                                     // 0x0128(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FMarkerId, struct FMapMarkerSPSItem> m_MarkerMap;                                    // 0x0158(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	TArray<struct FMapMarkerSPSItem>              m_StaticMarkers;                                   // 0x01A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMapMarkerSPSItem>              m_ClientDynamicItemCache;                          // 0x01B8(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8[0x10];                                     // 0x01C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox2D                                 m_AbsWorldBounds;                                  // 0x01D8(0x0028)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_200[0xC0];                                     // 0x0200(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapMarkerSPS) == 0x000010, "Wrong alignment on FMapMarkerSPS");
static_assert(sizeof(FMapMarkerSPS) == 0x0002C0, "Wrong size on FMapMarkerSPS");
static_assert(offsetof(FMapMarkerSPS, m_MarkerMap) == 0x000158, "Member 'FMapMarkerSPS::m_MarkerMap' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPS, m_StaticMarkers) == 0x0001A8, "Member 'FMapMarkerSPS::m_StaticMarkers' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPS, m_ClientDynamicItemCache) == 0x0001B8, "Member 'FMapMarkerSPS::m_ClientDynamicItemCache' has a wrong offset!");
static_assert(offsetof(FMapMarkerSPS, m_AbsWorldBounds) == 0x0001D8, "Member 'FMapMarkerSPS::m_AbsWorldBounds' has a wrong offset!");

// ScriptStruct DuneSandbox.HarvesterAudioEvents
// 0x0010 (0x0010 - 0x0000)
struct FHarvesterAudioEvents final
{
public:
	class UFcAudioEvent*                          m_HarvestingStart;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_HarvestingStop;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarvesterAudioEvents) == 0x000008, "Wrong alignment on FHarvesterAudioEvents");
static_assert(sizeof(FHarvesterAudioEvents) == 0x000010, "Wrong size on FHarvesterAudioEvents");
static_assert(offsetof(FHarvesterAudioEvents, m_HarvestingStart) == 0x000000, "Member 'FHarvesterAudioEvents::m_HarvestingStart' has a wrong offset!");
static_assert(offsetof(FHarvesterAudioEvents, m_HarvestingStop) == 0x000008, "Member 'FHarvesterAudioEvents::m_HarvestingStop' has a wrong offset!");

// ScriptStruct DuneSandbox.MarkerPayloadPermissions
// 0x0020 (0x0038 - 0x0018)
struct FMarkerPayloadPermissions final : public FMarkerPayloadBase
{
public:
	int64                                         m_OwnerUID;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int64                                         m_TotemId;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 m_TotemName;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMarkerPayloadPermissions) == 0x000008, "Wrong alignment on FMarkerPayloadPermissions");
static_assert(sizeof(FMarkerPayloadPermissions) == 0x000038, "Wrong size on FMarkerPayloadPermissions");
static_assert(offsetof(FMarkerPayloadPermissions, m_OwnerUID) == 0x000018, "Member 'FMarkerPayloadPermissions::m_OwnerUID' has a wrong offset!");
static_assert(offsetof(FMarkerPayloadPermissions, m_TotemId) == 0x000020, "Member 'FMarkerPayloadPermissions::m_TotemId' has a wrong offset!");
static_assert(offsetof(FMarkerPayloadPermissions, m_TotemName) == 0x000028, "Member 'FMarkerPayloadPermissions::m_TotemName' has a wrong offset!");

// ScriptStruct DuneSandbox.MarkerPayloadStaticLocation
// 0x0068 (0x0080 - 0x0018)
struct FMarkerPayloadStaticLocation final : public FMarkerPayloadBase
{
public:
	class FName                                   m_Key;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  m_LocalTags;                                       // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x38];                                      // 0x0040(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          m_bDataChanged;                                    // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarkerPayloadStaticLocation) == 0x000008, "Wrong alignment on FMarkerPayloadStaticLocation");
static_assert(sizeof(FMarkerPayloadStaticLocation) == 0x000080, "Wrong size on FMarkerPayloadStaticLocation");
static_assert(offsetof(FMarkerPayloadStaticLocation, m_Key) == 0x000018, "Member 'FMarkerPayloadStaticLocation::m_Key' has a wrong offset!");
static_assert(offsetof(FMarkerPayloadStaticLocation, m_LocalTags) == 0x000020, "Member 'FMarkerPayloadStaticLocation::m_LocalTags' has a wrong offset!");
static_assert(offsetof(FMarkerPayloadStaticLocation, m_bDataChanged) == 0x000078, "Member 'FMarkerPayloadStaticLocation::m_bDataChanged' has a wrong offset!");

// ScriptStruct DuneSandbox.MarkerPayloadSocialPlayer
// 0x0018 (0x0030 - 0x0018)
struct FMarkerPayloadSocialPlayer final : public FMarkerPayloadBase
{
public:
	class FString                                 m_PlayerName;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarkerPayloadSocialPlayer) == 0x000008, "Wrong alignment on FMarkerPayloadSocialPlayer");
static_assert(sizeof(FMarkerPayloadSocialPlayer) == 0x000030, "Wrong size on FMarkerPayloadSocialPlayer");
static_assert(offsetof(FMarkerPayloadSocialPlayer, m_PlayerName) == 0x000018, "Member 'FMarkerPayloadSocialPlayer::m_PlayerName' has a wrong offset!");

// ScriptStruct DuneSandbox.MarkerPayloadDuneMap
// 0x0008 (0x0020 - 0x0018)
struct FMarkerPayloadDuneMap final : public FMarkerPayloadBase
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarkerPayloadDuneMap) == 0x000008, "Wrong alignment on FMarkerPayloadDuneMap");
static_assert(sizeof(FMarkerPayloadDuneMap) == 0x000020, "Wrong size on FMarkerPayloadDuneMap");

// ScriptStruct DuneSandbox.PermissionMarkerSerializer
// 0x00D8 (0x0200 - 0x0128)
struct alignas(0x10) FPermissionMarkerSerializer final : public FFastArraySerializer
{
public:
	uint8                                         Pad_128[0xC8];                                     // 0x0128(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPermissionMarkerSerializerItem> m_MapMarkers;                                     // 0x01F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermissionMarkerSerializer) == 0x000010, "Wrong alignment on FPermissionMarkerSerializer");
static_assert(sizeof(FPermissionMarkerSerializer) == 0x000200, "Wrong size on FPermissionMarkerSerializer");
static_assert(offsetof(FPermissionMarkerSerializer, m_MapMarkers) == 0x0001F0, "Member 'FPermissionMarkerSerializer::m_MapMarkers' has a wrong offset!");

// ScriptStruct DuneSandbox.DynamicMarkerData
// 0x0010 (0x0010 - 0x0000)
struct FDynamicMarkerData final
{
public:
	class AInWorldMarker*                         InWorldMarker;                                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicMarkerData) == 0x000008, "Wrong alignment on FDynamicMarkerData");
static_assert(sizeof(FDynamicMarkerData) == 0x000010, "Wrong size on FDynamicMarkerData");
static_assert(offsetof(FDynamicMarkerData, InWorldMarker) == 0x000000, "Member 'FDynamicMarkerData::InWorldMarker' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleHighlightInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FVehicleModuleHighlightInfo final
{
public:
	EVehicleModuleType                            ModuleType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleModuleMesh                     ModuleMesh;                                        // 0x0008(0x00D0)(Edit, BlueprintVisible, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         PreviousCustomDepthStencileValue;                  // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviousRenderCustomDepthPass;                    // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   OutLineMeshComponent;                              // 0x00E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleHighlightInfo) == 0x000008, "Wrong alignment on FVehicleModuleHighlightInfo");
static_assert(sizeof(FVehicleModuleHighlightInfo) == 0x0000E8, "Wrong size on FVehicleModuleHighlightInfo");
static_assert(offsetof(FVehicleModuleHighlightInfo, ModuleType) == 0x000000, "Member 'FVehicleModuleHighlightInfo::ModuleType' has a wrong offset!");
static_assert(offsetof(FVehicleModuleHighlightInfo, ModuleMesh) == 0x000008, "Member 'FVehicleModuleHighlightInfo::ModuleMesh' has a wrong offset!");
static_assert(offsetof(FVehicleModuleHighlightInfo, PreviousCustomDepthStencileValue) == 0x0000D8, "Member 'FVehicleModuleHighlightInfo::PreviousCustomDepthStencileValue' has a wrong offset!");
static_assert(offsetof(FVehicleModuleHighlightInfo, bPreviousRenderCustomDepthPass) == 0x0000DC, "Member 'FVehicleModuleHighlightInfo::bPreviousRenderCustomDepthPass' has a wrong offset!");
static_assert(offsetof(FVehicleModuleHighlightInfo, OutLineMeshComponent) == 0x0000E0, "Member 'FVehicleModuleHighlightInfo::OutLineMeshComponent' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterDeathDamageEvent
// 0x0010 (0x0040 - 0x0030)
struct FCharacterDeathDamageEvent final : public FGameEvent
{
public:
	EInstigatorType                               m_KillerType;                                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   m_DamageType;                                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              m_KillerPlayerId;                                  // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterDeathDamageEvent) == 0x000008, "Wrong alignment on FCharacterDeathDamageEvent");
static_assert(sizeof(FCharacterDeathDamageEvent) == 0x000040, "Wrong size on FCharacterDeathDamageEvent");
static_assert(offsetof(FCharacterDeathDamageEvent, m_KillerType) == 0x000030, "Member 'FCharacterDeathDamageEvent::m_KillerType' has a wrong offset!");
static_assert(offsetof(FCharacterDeathDamageEvent, m_DamageType) == 0x000031, "Member 'FCharacterDeathDamageEvent::m_DamageType' has a wrong offset!");
static_assert(offsetof(FCharacterDeathDamageEvent, m_KillerPlayerId) == 0x000038, "Member 'FCharacterDeathDamageEvent::m_KillerPlayerId' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterKilledDamageEvent
// 0x0028 (0x0058 - 0x0030)
struct FCharacterKilledDamageEvent final : public FGameEvent
{
public:
	TWeakObjectPtr<class ADunePlayerCharacter>    m_KillerPlayer;                                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ADuneCharacter>          m_DeadCharacter;                                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_DeathSourceName;                                 // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueID                              m_DeadPlayerId;                                    // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterKilledDamageEvent) == 0x000008, "Wrong alignment on FCharacterKilledDamageEvent");
static_assert(sizeof(FCharacterKilledDamageEvent) == 0x000058, "Wrong size on FCharacterKilledDamageEvent");
static_assert(offsetof(FCharacterKilledDamageEvent, m_KillerPlayer) == 0x000030, "Member 'FCharacterKilledDamageEvent::m_KillerPlayer' has a wrong offset!");
static_assert(offsetof(FCharacterKilledDamageEvent, m_DeadCharacter) == 0x000038, "Member 'FCharacterKilledDamageEvent::m_DeadCharacter' has a wrong offset!");
static_assert(offsetof(FCharacterKilledDamageEvent, m_DeathSourceName) == 0x000040, "Member 'FCharacterKilledDamageEvent::m_DeathSourceName' has a wrong offset!");
static_assert(offsetof(FCharacterKilledDamageEvent, m_DeadPlayerId) == 0x000050, "Member 'FCharacterKilledDamageEvent::m_DeadPlayerId' has a wrong offset!");

// ScriptStruct DuneSandbox.CompletedTradeEvent
// 0x0000 (0x0030 - 0x0030)
struct FCompletedTradeEvent final : public FGameEvent
{
};
static_assert(alignof(FCompletedTradeEvent) == 0x000008, "Wrong alignment on FCompletedTradeEvent");
static_assert(sizeof(FCompletedTradeEvent) == 0x000030, "Wrong size on FCompletedTradeEvent");

// ScriptStruct DuneSandbox.ConditionTestEvent
// 0x0010 (0x0040 - 0x0030)
struct FConditionTestEvent final : public FGameEvent
{
public:
	uint32                                        m_Contribution;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_Identifier;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          m_Flags;                                           // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConditionTestEvent) == 0x000008, "Wrong alignment on FConditionTestEvent");
static_assert(sizeof(FConditionTestEvent) == 0x000040, "Wrong size on FConditionTestEvent");
static_assert(offsetof(FConditionTestEvent, m_Contribution) == 0x000030, "Member 'FConditionTestEvent::m_Contribution' has a wrong offset!");
static_assert(offsetof(FConditionTestEvent, m_Identifier) == 0x000034, "Member 'FConditionTestEvent::m_Identifier' has a wrong offset!");
static_assert(offsetof(FConditionTestEvent, m_Flags) == 0x000038, "Member 'FConditionTestEvent::m_Flags' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsFrameGenerationMethodOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsFrameGenerationMethodOption final : public FSettingsEnumOptionBase
{
public:
	EFrameGenerationMethod                        Method;                                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsFrameGenerationMethodOption) == 0x000008, "Wrong alignment on FSettingsFrameGenerationMethodOption");
static_assert(sizeof(FSettingsFrameGenerationMethodOption) == 0x000028, "Wrong size on FSettingsFrameGenerationMethodOption");
static_assert(offsetof(FSettingsFrameGenerationMethodOption, Method) == 0x000020, "Member 'FSettingsFrameGenerationMethodOption::Method' has a wrong offset!");

// ScriptStruct DuneSandbox.ConstructionEvent
// 0x0020 (0x0050 - 0x0030)
struct FConstructionEvent final : public FGameEvent
{
public:
	struct FEBuildableType                        m_BuildableType;                                   // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConstructionType                             m_ConstructionType;                                // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                m_WorldContextObject;                              // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsHologram;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConstructionEvent) == 0x000008, "Wrong alignment on FConstructionEvent");
static_assert(sizeof(FConstructionEvent) == 0x000050, "Wrong size on FConstructionEvent");
static_assert(offsetof(FConstructionEvent, m_BuildableType) == 0x000030, "Member 'FConstructionEvent::m_BuildableType' has a wrong offset!");
static_assert(offsetof(FConstructionEvent, m_ConstructionType) == 0x000038, "Member 'FConstructionEvent::m_ConstructionType' has a wrong offset!");
static_assert(offsetof(FConstructionEvent, m_WorldContextObject) == 0x000040, "Member 'FConstructionEvent::m_WorldContextObject' has a wrong offset!");
static_assert(offsetof(FConstructionEvent, m_bIsHologram) == 0x000048, "Member 'FConstructionEvent::m_bIsHologram' has a wrong offset!");

// ScriptStruct DuneSandbox.ConsumeEvent
// 0x0018 (0x0048 - 0x0030)
struct FConsumeEvent final : public FGameEvent
{
public:
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_Amount;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFillableType                         m_FillableType;                                    // 0x003C(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConsumeEvent) == 0x000008, "Wrong alignment on FConsumeEvent");
static_assert(sizeof(FConsumeEvent) == 0x000048, "Wrong size on FConsumeEvent");
static_assert(offsetof(FConsumeEvent, m_ItemTemplateId) == 0x000030, "Member 'FConsumeEvent::m_ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FConsumeEvent, m_Amount) == 0x000038, "Member 'FConsumeEvent::m_Amount' has a wrong offset!");
static_assert(offsetof(FConsumeEvent, m_FillableType) == 0x00003C, "Member 'FConsumeEvent::m_FillableType' has a wrong offset!");

// ScriptStruct DuneSandbox.ContractEventData
// 0x0010 (0x0040 - 0x0030)
struct FContractEventData final : public FGameEvent
{
public:
	class UContractDataAsset*                     m_ContractData;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContractEventType                            m_ContractEventType;                               // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContractEventData) == 0x000008, "Wrong alignment on FContractEventData");
static_assert(sizeof(FContractEventData) == 0x000040, "Wrong size on FContractEventData");
static_assert(offsetof(FContractEventData, m_ContractData) == 0x000030, "Member 'FContractEventData::m_ContractData' has a wrong offset!");
static_assert(offsetof(FContractEventData, m_ContractEventType) == 0x000038, "Member 'FContractEventData::m_ContractEventType' has a wrong offset!");

// ScriptStruct DuneSandbox.CraftingEvent
// 0x0010 (0x0040 - 0x0030)
struct FCraftingEvent final : public FGameEvent
{
public:
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_Amount;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingEvent) == 0x000008, "Wrong alignment on FCraftingEvent");
static_assert(sizeof(FCraftingEvent) == 0x000040, "Wrong size on FCraftingEvent");
static_assert(offsetof(FCraftingEvent, m_ItemTemplateId) == 0x000030, "Member 'FCraftingEvent::m_ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FCraftingEvent, m_Amount) == 0x000038, "Member 'FCraftingEvent::m_Amount' has a wrong offset!");

// ScriptStruct DuneSandbox.DepositLiquidEvent
// 0x0008 (0x0038 - 0x0030)
struct FDepositLiquidEvent final : public FGameEvent
{
public:
	uint32                                        m_AmountDeposited;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDepositLiquidType                            m_DepositLiquidType;                               // 0x0034(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDepositLiquidEvent) == 0x000008, "Wrong alignment on FDepositLiquidEvent");
static_assert(sizeof(FDepositLiquidEvent) == 0x000038, "Wrong size on FDepositLiquidEvent");
static_assert(offsetof(FDepositLiquidEvent, m_AmountDeposited) == 0x000030, "Member 'FDepositLiquidEvent::m_AmountDeposited' has a wrong offset!");
static_assert(offsetof(FDepositLiquidEvent, m_DepositLiquidType) == 0x000034, "Member 'FDepositLiquidEvent::m_DepositLiquidType' has a wrong offset!");

// ScriptStruct DuneSandbox.EventLogOpenedEvent
// 0x0000 (0x0030 - 0x0030)
struct FEventLogOpenedEvent final : public FGameEvent
{
};
static_assert(alignof(FEventLogOpenedEvent) == 0x000008, "Wrong alignment on FEventLogOpenedEvent");
static_assert(sizeof(FEventLogOpenedEvent) == 0x000030, "Wrong size on FEventLogOpenedEvent");

// ScriptStruct DuneSandbox.GuildEvent
// 0x0010 (0x0040 - 0x0030)
struct FGuildEvent final : public FGameEvent
{
public:
	EGuildEventType                               m_GuildEventType;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEFaction                              m_GuildFaction;                                    // 0x0034(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildEvent) == 0x000008, "Wrong alignment on FGuildEvent");
static_assert(sizeof(FGuildEvent) == 0x000040, "Wrong size on FGuildEvent");
static_assert(offsetof(FGuildEvent, m_GuildEventType) == 0x000030, "Member 'FGuildEvent::m_GuildEventType' has a wrong offset!");
static_assert(offsetof(FGuildEvent, m_GuildFaction) == 0x000034, "Member 'FGuildEvent::m_GuildFaction' has a wrong offset!");

// ScriptStruct DuneSandbox.HarvestLiquidEvent
// 0x0008 (0x0038 - 0x0030)
struct FHarvestLiquidEvent final : public FGameEvent
{
public:
	uint32                                        m_AmountHarvested;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHarvestLiquidType                            m_LiquidType;                                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHarvestLiquidEvent) == 0x000008, "Wrong alignment on FHarvestLiquidEvent");
static_assert(sizeof(FHarvestLiquidEvent) == 0x000038, "Wrong size on FHarvestLiquidEvent");
static_assert(offsetof(FHarvestLiquidEvent, m_AmountHarvested) == 0x000030, "Member 'FHarvestLiquidEvent::m_AmountHarvested' has a wrong offset!");
static_assert(offsetof(FHarvestLiquidEvent, m_LiquidType) == 0x000034, "Member 'FHarvestLiquidEvent::m_LiquidType' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemDeliveredEvent
// 0x0010 (0x0040 - 0x0030)
struct FItemDeliveredEvent final : public FGameEvent
{
public:
	struct FEItemTemplateID                       m_TemplateId;                                      // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_Quantity;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Durability;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDeliveredEvent) == 0x000008, "Wrong alignment on FItemDeliveredEvent");
static_assert(sizeof(FItemDeliveredEvent) == 0x000040, "Wrong size on FItemDeliveredEvent");
static_assert(offsetof(FItemDeliveredEvent, m_TemplateId) == 0x000030, "Member 'FItemDeliveredEvent::m_TemplateId' has a wrong offset!");
static_assert(offsetof(FItemDeliveredEvent, m_Quantity) == 0x000038, "Member 'FItemDeliveredEvent::m_Quantity' has a wrong offset!");
static_assert(offsetof(FItemDeliveredEvent, m_Durability) == 0x00003C, "Member 'FItemDeliveredEvent::m_Durability' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemOwnedEvent
// 0x0010 (0x0040 - 0x0030)
struct FItemOwnedEvent final : public FGameEvent
{
public:
	struct FEItemTemplateID                       m_ItemTemplateId;                                  // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_AmountChanged;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemOwnedEvent) == 0x000008, "Wrong alignment on FItemOwnedEvent");
static_assert(sizeof(FItemOwnedEvent) == 0x000040, "Wrong size on FItemOwnedEvent");
static_assert(offsetof(FItemOwnedEvent, m_ItemTemplateId) == 0x000030, "Member 'FItemOwnedEvent::m_ItemTemplateId' has a wrong offset!");
static_assert(offsetof(FItemOwnedEvent, m_AmountChanged) == 0x000038, "Member 'FItemOwnedEvent::m_AmountChanged' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadVehicleHandInEvent
// 0x0018 (0x0048 - 0x0030)
struct FLandsraadVehicleHandInEvent final : public FGameEvent
{
public:
	struct FEVehicleCraftingSchematicId           m_VehicleSchematicId;                              // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_Quantity;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MinimumModuleDurability;                         // 0x003C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADuneVehicle*                           m_VehicleToHandIn;                                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadVehicleHandInEvent) == 0x000008, "Wrong alignment on FLandsraadVehicleHandInEvent");
static_assert(sizeof(FLandsraadVehicleHandInEvent) == 0x000048, "Wrong size on FLandsraadVehicleHandInEvent");
static_assert(offsetof(FLandsraadVehicleHandInEvent, m_VehicleSchematicId) == 0x000030, "Member 'FLandsraadVehicleHandInEvent::m_VehicleSchematicId' has a wrong offset!");
static_assert(offsetof(FLandsraadVehicleHandInEvent, m_Quantity) == 0x000038, "Member 'FLandsraadVehicleHandInEvent::m_Quantity' has a wrong offset!");
static_assert(offsetof(FLandsraadVehicleHandInEvent, m_MinimumModuleDurability) == 0x00003C, "Member 'FLandsraadVehicleHandInEvent::m_MinimumModuleDurability' has a wrong offset!");
static_assert(offsetof(FLandsraadVehicleHandInEvent, m_VehicleToHandIn) == 0x000040, "Member 'FLandsraadVehicleHandInEvent::m_VehicleToHandIn' has a wrong offset!");

// ScriptStruct DuneSandbox.NpcDialogueEventData
// 0x0008 (0x0038 - 0x0030)
struct FNpcDialogueEventData final : public FGameEvent
{
public:
	class FName                                   m_DialogueNodeId;                                  // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcDialogueEventData) == 0x000008, "Wrong alignment on FNpcDialogueEventData");
static_assert(sizeof(FNpcDialogueEventData) == 0x000038, "Wrong size on FNpcDialogueEventData");
static_assert(offsetof(FNpcDialogueEventData, m_DialogueNodeId) == 0x000030, "Member 'FNpcDialogueEventData::m_DialogueNodeId' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerEnteredExplorationVolumeEvent
// 0x0048 (0x0078 - 0x0030)
struct FPlayerEnteredExplorationVolumeEvent final : public FGameEvent
{
public:
	class FText                                   m_DisplayName;                                     // 0x0030(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FEMapMarker                            m_MarkerType;                                      // 0x0048(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           m_ExplorationXPTag;                                // 0x0050(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  m_ExplorationIdentifierTags;                       // 0x0058(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerEnteredExplorationVolumeEvent) == 0x000008, "Wrong alignment on FPlayerEnteredExplorationVolumeEvent");
static_assert(sizeof(FPlayerEnteredExplorationVolumeEvent) == 0x000078, "Wrong size on FPlayerEnteredExplorationVolumeEvent");
static_assert(offsetof(FPlayerEnteredExplorationVolumeEvent, m_DisplayName) == 0x000030, "Member 'FPlayerEnteredExplorationVolumeEvent::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FPlayerEnteredExplorationVolumeEvent, m_MarkerType) == 0x000048, "Member 'FPlayerEnteredExplorationVolumeEvent::m_MarkerType' has a wrong offset!");
static_assert(offsetof(FPlayerEnteredExplorationVolumeEvent, m_ExplorationXPTag) == 0x000050, "Member 'FPlayerEnteredExplorationVolumeEvent::m_ExplorationXPTag' has a wrong offset!");
static_assert(offsetof(FPlayerEnteredExplorationVolumeEvent, m_ExplorationIdentifierTags) == 0x000058, "Member 'FPlayerEnteredExplorationVolumeEvent::m_ExplorationIdentifierTags' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerKilledDamageEvent
// 0x0008 (0x0038 - 0x0030)
struct FPlayerKilledDamageEvent final : public FGameEvent
{
public:
	struct FUniqueID                              m_DeadPlayerId;                                    // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerKilledDamageEvent) == 0x000008, "Wrong alignment on FPlayerKilledDamageEvent");
static_assert(sizeof(FPlayerKilledDamageEvent) == 0x000038, "Wrong size on FPlayerKilledDamageEvent");
static_assert(offsetof(FPlayerKilledDamageEvent, m_DeadPlayerId) == 0x000030, "Member 'FPlayerKilledDamageEvent::m_DeadPlayerId' has a wrong offset!");

// ScriptStruct DuneSandbox.RecipeEvent
// 0x0010 (0x0040 - 0x0030)
struct FRecipeEvent final : public FGameEvent
{
public:
	struct FEItemCraftingRecipeId                 m_CraftingRecipeId;                                // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bNewRecipe;                                      // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        m_ChargesAdded;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipeEvent) == 0x000008, "Wrong alignment on FRecipeEvent");
static_assert(sizeof(FRecipeEvent) == 0x000040, "Wrong size on FRecipeEvent");
static_assert(offsetof(FRecipeEvent, m_CraftingRecipeId) == 0x000030, "Member 'FRecipeEvent::m_CraftingRecipeId' has a wrong offset!");
static_assert(offsetof(FRecipeEvent, m_bNewRecipe) == 0x000038, "Member 'FRecipeEvent::m_bNewRecipe' has a wrong offset!");
static_assert(offsetof(FRecipeEvent, m_ChargesAdded) == 0x00003C, "Member 'FRecipeEvent::m_ChargesAdded' has a wrong offset!");

// ScriptStruct DuneSandbox.RepairItemEvent
// 0x0010 (0x0040 - 0x0030)
struct FRepairItemEvent final : public FGameEvent
{
public:
	struct FEItemTemplateID                       m_RepairedItemTemplateId;                          // 0x0030(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_AmountRepaired;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepairItemEvent) == 0x000008, "Wrong alignment on FRepairItemEvent");
static_assert(sizeof(FRepairItemEvent) == 0x000040, "Wrong size on FRepairItemEvent");
static_assert(offsetof(FRepairItemEvent, m_RepairedItemTemplateId) == 0x000030, "Member 'FRepairItemEvent::m_RepairedItemTemplateId' has a wrong offset!");
static_assert(offsetof(FRepairItemEvent, m_AmountRepaired) == 0x000038, "Member 'FRepairItemEvent::m_AmountRepaired' has a wrong offset!");

// ScriptStruct DuneSandbox.ReplenishHydrationEvent
// 0x0020 (0x0050 - 0x0030)
struct FReplenishHydrationEvent final : public FGameEvent
{
public:
	float                                         m_HydrationPercentage;                             // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFillableType                         m_FillableType;                                    // 0x0034(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_HydrationSourceName;                             // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplenishHydrationEvent) == 0x000008, "Wrong alignment on FReplenishHydrationEvent");
static_assert(sizeof(FReplenishHydrationEvent) == 0x000050, "Wrong size on FReplenishHydrationEvent");
static_assert(offsetof(FReplenishHydrationEvent, m_HydrationPercentage) == 0x000030, "Member 'FReplenishHydrationEvent::m_HydrationPercentage' has a wrong offset!");
static_assert(offsetof(FReplenishHydrationEvent, m_FillableType) == 0x000034, "Member 'FReplenishHydrationEvent::m_FillableType' has a wrong offset!");
static_assert(offsetof(FReplenishHydrationEvent, m_HydrationSourceName) == 0x000040, "Member 'FReplenishHydrationEvent::m_HydrationSourceName' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormEvent
// 0x0008 (0x0038 - 0x0030)
struct FSandwormEvent final : public FGameEvent
{
public:
	ESandwormEventType                            m_SandwormEventType;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandwormEvent) == 0x000008, "Wrong alignment on FSandwormEvent");
static_assert(sizeof(FSandwormEvent) == 0x000038, "Wrong size on FSandwormEvent");
static_assert(offsetof(FSandwormEvent, m_SandwormEventType) == 0x000030, "Member 'FSandwormEvent::m_SandwormEventType' has a wrong offset!");

// ScriptStruct DuneSandbox.SurveyEvent
// 0x0008 (0x0038 - 0x0030)
struct FSurveyEvent final : public FGameEvent
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSurveyEvent) == 0x000008, "Wrong alignment on FSurveyEvent");
static_assert(sizeof(FSurveyEvent) == 0x000038, "Wrong size on FSurveyEvent");

// ScriptStruct DuneSandbox.TreasureEvent
// 0x0000 (0x0030 - 0x0030)
struct FTreasureEvent final : public FGameEvent
{
};
static_assert(alignof(FTreasureEvent) == 0x000008, "Wrong alignment on FTreasureEvent");
static_assert(sizeof(FTreasureEvent) == 0x000030, "Wrong size on FTreasureEvent");

// ScriptStruct DuneSandbox.VehicleDestroyedDamageEvent
// 0x0018 (0x0070 - 0x0058)
struct FVehicleDestroyedDamageEvent final : public FBuildableEvent
{
public:
	struct FUniqueID                              m_VehicleID;                                       // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ChassisModule;                                   // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleDestroyedDamageEvent) == 0x000008, "Wrong alignment on FVehicleDestroyedDamageEvent");
static_assert(sizeof(FVehicleDestroyedDamageEvent) == 0x000070, "Wrong size on FVehicleDestroyedDamageEvent");
static_assert(offsetof(FVehicleDestroyedDamageEvent, m_VehicleID) == 0x000058, "Member 'FVehicleDestroyedDamageEvent::m_VehicleID' has a wrong offset!");
static_assert(offsetof(FVehicleDestroyedDamageEvent, m_ChassisModule) == 0x000060, "Member 'FVehicleDestroyedDamageEvent::m_ChassisModule' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleEvent
// 0x0008 (0x0038 - 0x0030)
struct FVehicleEvent final : public FGameEvent
{
public:
	EVehicleModel                                 m_VehicleModel;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleConditionType                         m_VehicleConditionType;                            // 0x0031(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        m_FuelAmount;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleEvent) == 0x000008, "Wrong alignment on FVehicleEvent");
static_assert(sizeof(FVehicleEvent) == 0x000038, "Wrong size on FVehicleEvent");
static_assert(offsetof(FVehicleEvent, m_VehicleModel) == 0x000030, "Member 'FVehicleEvent::m_VehicleModel' has a wrong offset!");
static_assert(offsetof(FVehicleEvent, m_VehicleConditionType) == 0x000031, "Member 'FVehicleEvent::m_VehicleConditionType' has a wrong offset!");
static_assert(offsetof(FVehicleEvent, m_FuelAmount) == 0x000034, "Member 'FVehicleEvent::m_FuelAmount' has a wrong offset!");

// ScriptStruct DuneSandbox.VehicleModuleBrokenDamageEvent
// 0x0018 (0x0070 - 0x0058)
struct FVehicleModuleBrokenDamageEvent final : public FBuildableEvent
{
public:
	struct FUniqueID                              m_VehicleID;                                       // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_VehicleModelName;                                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModuleBrokenDamageEvent) == 0x000008, "Wrong alignment on FVehicleModuleBrokenDamageEvent");
static_assert(sizeof(FVehicleModuleBrokenDamageEvent) == 0x000070, "Wrong size on FVehicleModuleBrokenDamageEvent");
static_assert(offsetof(FVehicleModuleBrokenDamageEvent, m_VehicleID) == 0x000058, "Member 'FVehicleModuleBrokenDamageEvent::m_VehicleID' has a wrong offset!");
static_assert(offsetof(FVehicleModuleBrokenDamageEvent, m_VehicleModelName) == 0x000060, "Member 'FVehicleModuleBrokenDamageEvent::m_VehicleModelName' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponHolsterEvent
// 0x0010 (0x0040 - 0x0030)
struct FWeaponHolsterEvent final : public FGameEvent
{
public:
	TSubclassOf<class UHandheldBase>              m_HandheldClass;                                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsHolstering;                                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponHolsterEvent) == 0x000008, "Wrong alignment on FWeaponHolsterEvent");
static_assert(sizeof(FWeaponHolsterEvent) == 0x000040, "Wrong size on FWeaponHolsterEvent");
static_assert(offsetof(FWeaponHolsterEvent, m_HandheldClass) == 0x000030, "Member 'FWeaponHolsterEvent::m_HandheldClass' has a wrong offset!");
static_assert(offsetof(FWeaponHolsterEvent, m_bIsHolstering) == 0x000038, "Member 'FWeaponHolsterEvent::m_bIsHolstering' has a wrong offset!");

// ScriptStruct DuneSandbox.RecipeInfo
// 0x0014 (0x0014 - 0x0000)
struct FRecipeInfo final
{
public:
	struct FEItemCraftingRecipeId                 BaseRecipeId;                                      // 0x0000(0x0008)(Edit, DisableEditOnInstance, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsNew;                                          // 0x0008(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_NumberOfRecipeUses;                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_bIsLimitedUseRecipe;                             // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESchematicSource                              m_Source;                                          // 0x0011(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipeInfo) == 0x000004, "Wrong alignment on FRecipeInfo");
static_assert(sizeof(FRecipeInfo) == 0x000014, "Wrong size on FRecipeInfo");
static_assert(offsetof(FRecipeInfo, BaseRecipeId) == 0x000000, "Member 'FRecipeInfo::BaseRecipeId' has a wrong offset!");
static_assert(offsetof(FRecipeInfo, m_bIsNew) == 0x000008, "Member 'FRecipeInfo::m_bIsNew' has a wrong offset!");
static_assert(offsetof(FRecipeInfo, m_NumberOfRecipeUses) == 0x00000C, "Member 'FRecipeInfo::m_NumberOfRecipeUses' has a wrong offset!");
static_assert(offsetof(FRecipeInfo, m_bIsLimitedUseRecipe) == 0x000010, "Member 'FRecipeInfo::m_bIsLimitedUseRecipe' has a wrong offset!");
static_assert(offsetof(FRecipeInfo, m_Source) == 0x000011, "Member 'FRecipeInfo::m_Source' has a wrong offset!");

// ScriptStruct DuneSandbox.MultiSchematicStatsComponent_BlueprintWrapper
// 0x0140 (0x0140 - 0x0000)
struct FMultiSchematicStatsComponent_BlueprintWrapper final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMultiSchematicStats                   MultiSchematicStats;                               // 0x00E0(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiSchematicStatsComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FMultiSchematicStatsComponent_BlueprintWrapper");
static_assert(sizeof(FMultiSchematicStatsComponent_BlueprintWrapper) == 0x000140, "Wrong size on FMultiSchematicStatsComponent_BlueprintWrapper");
static_assert(offsetof(FMultiSchematicStatsComponent_BlueprintWrapper, MultiSchematicStats) == 0x0000E0, "Member 'FMultiSchematicStatsComponent_BlueprintWrapper::MultiSchematicStats' has a wrong offset!");

// ScriptStruct DuneSandbox.FillableTypeRow
// 0x0028 (0x0038 - 0x0010)
struct FFillableTypeRow final : public FTableRowBase
{
public:
	class FText                                   m_DisplayName;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           m_Color;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFillableTypeRow) == 0x000008, "Wrong alignment on FFillableTypeRow");
static_assert(sizeof(FFillableTypeRow) == 0x000038, "Wrong size on FFillableTypeRow");
static_assert(offsetof(FFillableTypeRow, m_DisplayName) == 0x000010, "Member 'FFillableTypeRow::m_DisplayName' has a wrong offset!");
static_assert(offsetof(FFillableTypeRow, m_Color) == 0x000028, "Member 'FFillableTypeRow::m_Color' has a wrong offset!");

// ScriptStruct DuneSandbox.WeaponMeshDisplay
// 0x0020 (0x0110 - 0x00F0)
struct FWeaponMeshDisplay final : public FItemMeshDisplayBase
{
public:
	class UWeaponActorComponent*                  m_WeaponComponent;                                 // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x18];                                      // 0x00F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponMeshDisplay) == 0x000010, "Wrong alignment on FWeaponMeshDisplay");
static_assert(sizeof(FWeaponMeshDisplay) == 0x000110, "Wrong size on FWeaponMeshDisplay");
static_assert(offsetof(FWeaponMeshDisplay, m_WeaponComponent) == 0x0000F0, "Member 'FWeaponMeshDisplay::m_WeaponComponent' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemUsageLimitationGroupRow
// 0x0020 (0x0030 - 0x0010)
struct FItemUsageLimitationGroupRow final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  BlockedTags;                                       // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemUsageLimitationGroupRow) == 0x000008, "Wrong alignment on FItemUsageLimitationGroupRow");
static_assert(sizeof(FItemUsageLimitationGroupRow) == 0x000030, "Wrong size on FItemUsageLimitationGroupRow");
static_assert(offsetof(FItemUsageLimitationGroupRow, BlockedTags) == 0x000010, "Member 'FItemUsageLimitationGroupRow::BlockedTags' has a wrong offset!");

// ScriptStruct DuneSandbox.WornItem
// 0x002C (0x0038 - 0x000C)
struct FWornItem final : public FFastArraySerializerItem
{
public:
	class FName                                   m_ItemName;                                        // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_ArmorSlotFlags;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_CustomizationVariantId;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_CustomizationSwatchId;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWornItem) == 0x000004, "Wrong alignment on FWornItem");
static_assert(sizeof(FWornItem) == 0x000038, "Wrong size on FWornItem");
static_assert(offsetof(FWornItem, m_ItemName) == 0x00000C, "Member 'FWornItem::m_ItemName' has a wrong offset!");
static_assert(offsetof(FWornItem, m_ArmorSlotFlags) == 0x000014, "Member 'FWornItem::m_ArmorSlotFlags' has a wrong offset!");
static_assert(offsetof(FWornItem, m_CustomizationVariantId) == 0x000018, "Member 'FWornItem::m_CustomizationVariantId' has a wrong offset!");
static_assert(offsetof(FWornItem, m_CustomizationSwatchId) == 0x000020, "Member 'FWornItem::m_CustomizationSwatchId' has a wrong offset!");

// ScriptStruct DuneSandbox.WornItemSerializableList
// 0x0018 (0x0140 - 0x0128)
struct FWornItemSerializableList final : public FFastArraySerializer
{
public:
	TWeakObjectPtr<class ADuneCharacter>          m_Owner;                                           // 0x0128(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWornItem>                      m_WornItems;                                       // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FWornItemSerializableList) == 0x000008, "Wrong alignment on FWornItemSerializableList");
static_assert(sizeof(FWornItemSerializableList) == 0x000140, "Wrong size on FWornItemSerializableList");
static_assert(offsetof(FWornItemSerializableList, m_Owner) == 0x000128, "Member 'FWornItemSerializableList::m_Owner' has a wrong offset!");
static_assert(offsetof(FWornItemSerializableList, m_WornItems) == 0x000130, "Member 'FWornItemSerializableList::m_WornItems' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceInstanceItemEntry
// 0x0004 (0x0010 - 0x000C)
struct FResourceInstanceItemEntry final : public FFastArraySerializerItem
{
public:
	uint16                                        m_ResourceInstanceIndex;                           // 0x000C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceInstanceItemEntry) == 0x000004, "Wrong alignment on FResourceInstanceItemEntry");
static_assert(sizeof(FResourceInstanceItemEntry) == 0x000010, "Wrong size on FResourceInstanceItemEntry");
static_assert(offsetof(FResourceInstanceItemEntry, m_ResourceInstanceIndex) == 0x00000C, "Member 'FResourceInstanceItemEntry::m_ResourceInstanceIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceInstanceArray
// 0x0018 (0x0140 - 0x0128)
struct FResourceInstanceArray final : public FFastArraySerializer
{
public:
	TArray<struct FResourceInstanceItemEntry>     m_Items;                                           // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class AResourceSpawner*                       m_Owner;                                           // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FResourceInstanceArray) == 0x000008, "Wrong alignment on FResourceInstanceArray");
static_assert(sizeof(FResourceInstanceArray) == 0x000140, "Wrong size on FResourceInstanceArray");
static_assert(offsetof(FResourceInstanceArray, m_Items) == 0x000128, "Member 'FResourceInstanceArray::m_Items' has a wrong offset!");
static_assert(offsetof(FResourceInstanceArray, m_Owner) == 0x000138, "Member 'FResourceInstanceArray::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceVariant
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FResourceVariant final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceVariant) == 0x000004, "Wrong alignment on FResourceVariant");
static_assert(sizeof(FResourceVariant) == 0x00000C, "Wrong size on FResourceVariant");

// ScriptStruct DuneSandbox.ResourceRespawnTimer
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FResourceRespawnTimer final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceRespawnTimer) == 0x000008, "Wrong alignment on FResourceRespawnTimer");
static_assert(sizeof(FResourceRespawnTimer) == 0x000018, "Wrong size on FResourceRespawnTimer");

// ScriptStruct DuneSandbox.ResourceSpawnerConfig
// 0x0010 (0x0010 - 0x0000)
struct FResourceSpawnerConfig final
{
public:
	int32                                         SpawningSeed;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceTypeName;                                  // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnerVariantIndex;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceSpawnerConfig) == 0x000004, "Wrong alignment on FResourceSpawnerConfig");
static_assert(sizeof(FResourceSpawnerConfig) == 0x000010, "Wrong size on FResourceSpawnerConfig");
static_assert(offsetof(FResourceSpawnerConfig, SpawningSeed) == 0x000000, "Member 'FResourceSpawnerConfig::SpawningSeed' has a wrong offset!");
static_assert(offsetof(FResourceSpawnerConfig, ResourceTypeName) == 0x000004, "Member 'FResourceSpawnerConfig::ResourceTypeName' has a wrong offset!");
static_assert(offsetof(FResourceSpawnerConfig, SpawnerVariantIndex) == 0x00000C, "Member 'FResourceSpawnerConfig::SpawnerVariantIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.GameplayEffectOnEquipTarget
// 0x0058 (0x0058 - 0x0000)
struct FGameplayEffectOnEquipTarget final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LabelLocKey;                                       // 0x0038(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsPercentage;                                     // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHigherIsBetter;                                   // 0x0051(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEffectOnEquipTarget) == 0x000008, "Wrong alignment on FGameplayEffectOnEquipTarget");
static_assert(sizeof(FGameplayEffectOnEquipTarget) == 0x000058, "Wrong size on FGameplayEffectOnEquipTarget");
static_assert(offsetof(FGameplayEffectOnEquipTarget, Attribute) == 0x000000, "Member 'FGameplayEffectOnEquipTarget::Attribute' has a wrong offset!");
static_assert(offsetof(FGameplayEffectOnEquipTarget, LabelLocKey) == 0x000038, "Member 'FGameplayEffectOnEquipTarget::LabelLocKey' has a wrong offset!");
static_assert(offsetof(FGameplayEffectOnEquipTarget, bIsPercentage) == 0x000050, "Member 'FGameplayEffectOnEquipTarget::bIsPercentage' has a wrong offset!");
static_assert(offsetof(FGameplayEffectOnEquipTarget, bHigherIsBetter) == 0x000051, "Member 'FGameplayEffectOnEquipTarget::bHigherIsBetter' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsTemporalUpscalerModeOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsTemporalUpscalerModeOption final : public FSettingsEnumOptionBase
{
public:
	EAntiAliasingAndUpscalingMethod               Method;                                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsTemporalUpscalerModeOption) == 0x000008, "Wrong alignment on FSettingsTemporalUpscalerModeOption");
static_assert(sizeof(FSettingsTemporalUpscalerModeOption) == 0x000028, "Wrong size on FSettingsTemporalUpscalerModeOption");
static_assert(offsetof(FSettingsTemporalUpscalerModeOption, Method) == 0x000020, "Member 'FSettingsTemporalUpscalerModeOption::Method' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsUpscalerQualityDLSSOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsUpscalerQualityDLSSOption final : public FSettingsEnumOptionBase
{
public:
	EUDLSSMode                                    Mode;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsUpscalerQualityDLSSOption) == 0x000008, "Wrong alignment on FSettingsUpscalerQualityDLSSOption");
static_assert(sizeof(FSettingsUpscalerQualityDLSSOption) == 0x000028, "Wrong size on FSettingsUpscalerQualityDLSSOption");
static_assert(offsetof(FSettingsUpscalerQualityDLSSOption, Mode) == 0x000020, "Member 'FSettingsUpscalerQualityDLSSOption::Mode' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsUpscalerQualityFSR3Option
// 0x0008 (0x0028 - 0x0020)
struct FSettingsUpscalerQualityFSR3Option final : public FSettingsEnumOptionBase
{
public:
	EFFXFSR3QualityModeCopy                       Mode;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsUpscalerQualityFSR3Option) == 0x000008, "Wrong alignment on FSettingsUpscalerQualityFSR3Option");
static_assert(sizeof(FSettingsUpscalerQualityFSR3Option) == 0x000028, "Wrong size on FSettingsUpscalerQualityFSR3Option");
static_assert(offsetof(FSettingsUpscalerQualityFSR3Option, Mode) == 0x000020, "Member 'FSettingsUpscalerQualityFSR3Option::Mode' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsUpscalerQualityXESSOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsUpscalerQualityXESSOption final : public FSettingsEnumOptionBase
{
public:
	EXeSSQualityMode                              Mode;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsUpscalerQualityXESSOption) == 0x000008, "Wrong alignment on FSettingsUpscalerQualityXESSOption");
static_assert(sizeof(FSettingsUpscalerQualityXESSOption) == 0x000028, "Wrong size on FSettingsUpscalerQualityXESSOption");
static_assert(offsetof(FSettingsUpscalerQualityXESSOption, Mode) == 0x000020, "Member 'FSettingsUpscalerQualityXESSOption::Mode' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingWindowModeOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingWindowModeOption final : public FSettingsEnumOptionBase
{
public:
	EWindowMode                                   Mode;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingWindowModeOption) == 0x000008, "Wrong alignment on FSettingWindowModeOption");
static_assert(sizeof(FSettingWindowModeOption) == 0x000028, "Wrong size on FSettingWindowModeOption");
static_assert(offsetof(FSettingWindowModeOption, Mode) == 0x000020, "Member 'FSettingWindowModeOption::Mode' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsSprintLockModeOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsSprintLockModeOption final : public FSettingsEnumOptionBase
{
public:
	ESprintLockMode                               Mode;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsSprintLockModeOption) == 0x000008, "Wrong alignment on FSettingsSprintLockModeOption");
static_assert(sizeof(FSettingsSprintLockModeOption) == 0x000028, "Wrong size on FSettingsSprintLockModeOption");
static_assert(offsetof(FSettingsSprintLockModeOption, Mode) == 0x000020, "Member 'FSettingsSprintLockModeOption::Mode' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsRadialWheelInputLockModeOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsRadialWheelInputLockModeOption final : public FSettingsEnumOptionBase
{
public:
	ERadialWheelInputLockMode                     Mode;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsRadialWheelInputLockModeOption) == 0x000008, "Wrong alignment on FSettingsRadialWheelInputLockModeOption");
static_assert(sizeof(FSettingsRadialWheelInputLockModeOption) == 0x000028, "Wrong size on FSettingsRadialWheelInputLockModeOption");
static_assert(offsetof(FSettingsRadialWheelInputLockModeOption, Mode) == 0x000020, "Member 'FSettingsRadialWheelInputLockModeOption::Mode' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsRadialWheelCloseBehaviourOption
// 0x0008 (0x0028 - 0x0020)
struct FSettingsRadialWheelCloseBehaviourOption final : public FSettingsEnumOptionBase
{
public:
	ERadialWheelCloseBehaviour                    Mode;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsRadialWheelCloseBehaviourOption) == 0x000008, "Wrong alignment on FSettingsRadialWheelCloseBehaviourOption");
static_assert(sizeof(FSettingsRadialWheelCloseBehaviourOption) == 0x000028, "Wrong size on FSettingsRadialWheelCloseBehaviourOption");
static_assert(offsetof(FSettingsRadialWheelCloseBehaviourOption, Mode) == 0x000020, "Member 'FSettingsRadialWheelCloseBehaviourOption::Mode' has a wrong offset!");

// ScriptStruct DuneSandbox.DataCollectionTextData
// 0x0068 (0x0068 - 0x0000)
struct FDataCollectionTextData final
{
public:
	EPrivacyDialogState                           m_State;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_Title;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_Message;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_ConfirmText;                                     // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   m_CancelText;                                      // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataCollectionTextData) == 0x000008, "Wrong alignment on FDataCollectionTextData");
static_assert(sizeof(FDataCollectionTextData) == 0x000068, "Wrong size on FDataCollectionTextData");
static_assert(offsetof(FDataCollectionTextData, m_State) == 0x000000, "Member 'FDataCollectionTextData::m_State' has a wrong offset!");
static_assert(offsetof(FDataCollectionTextData, m_Title) == 0x000008, "Member 'FDataCollectionTextData::m_Title' has a wrong offset!");
static_assert(offsetof(FDataCollectionTextData, m_Message) == 0x000020, "Member 'FDataCollectionTextData::m_Message' has a wrong offset!");
static_assert(offsetof(FDataCollectionTextData, m_ConfirmText) == 0x000038, "Member 'FDataCollectionTextData::m_ConfirmText' has a wrong offset!");
static_assert(offsetof(FDataCollectionTextData, m_CancelText) == 0x000050, "Member 'FDataCollectionTextData::m_CancelText' has a wrong offset!");

// ScriptStruct DuneSandbox.DimensionInfo
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FDimensionInfo final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDimensionInfo) == 0x000008, "Wrong alignment on FDimensionInfo");
static_assert(sizeof(FDimensionInfo) == 0x000040, "Wrong size on FDimensionInfo");

// ScriptStruct DuneSandbox.BattlegroupInfo
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FBattlegroupInfo final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlegroupInfo) == 0x000008, "Wrong alignment on FBattlegroupInfo");
static_assert(sizeof(FBattlegroupInfo) == 0x000090, "Wrong size on FBattlegroupInfo");

// ScriptStruct DuneSandbox.RepairDamagedPieceData
// 0x0020 (0x0020 - 0x0000)
struct FRepairDamagedPieceData final
{
public:
	class FText                                   m_HealthStatusText;                                // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_HealthPercentageValue;                           // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepairDamagedPieceData) == 0x000008, "Wrong alignment on FRepairDamagedPieceData");
static_assert(sizeof(FRepairDamagedPieceData) == 0x000020, "Wrong size on FRepairDamagedPieceData");
static_assert(offsetof(FRepairDamagedPieceData, m_HealthStatusText) == 0x000000, "Member 'FRepairDamagedPieceData::m_HealthStatusText' has a wrong offset!");
static_assert(offsetof(FRepairDamagedPieceData, m_HealthPercentageValue) == 0x000018, "Member 'FRepairDamagedPieceData::m_HealthPercentageValue' has a wrong offset!");

// ScriptStruct DuneSandbox.MapFocusContext
// 0x0020 (0x0020 - 0x0000)
struct FMapFocusContext final
{
public:
	class AActor*                                 m_Actor;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              m_WorldLocation;                                   // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsFocused;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapFocusContext) == 0x000008, "Wrong alignment on FMapFocusContext");
static_assert(sizeof(FMapFocusContext) == 0x000020, "Wrong size on FMapFocusContext");
static_assert(offsetof(FMapFocusContext, m_Actor) == 0x000000, "Member 'FMapFocusContext::m_Actor' has a wrong offset!");
static_assert(offsetof(FMapFocusContext, m_WorldLocation) == 0x000008, "Member 'FMapFocusContext::m_WorldLocation' has a wrong offset!");
static_assert(offsetof(FMapFocusContext, m_bIsFocused) == 0x000018, "Member 'FMapFocusContext::m_bIsFocused' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemSetupData
// 0x0010 (0x0010 - 0x0000)
struct FItemSetupData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridViewItemData*                      ItemData;                                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSetupData) == 0x000008, "Wrong alignment on FItemSetupData");
static_assert(sizeof(FItemSetupData) == 0x000010, "Wrong size on FItemSetupData");
static_assert(offsetof(FItemSetupData, ItemData) == 0x000008, "Member 'FItemSetupData::ItemData' has a wrong offset!");

// ScriptStruct DuneSandbox.ConsumeFillableNotificationUpdateData
// 0x000C (0x000C - 0x0000)
struct FConsumeFillableNotificationUpdateData final
{
public:
	int32                                         m_Quantity;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEFillableType                         m_FillableType;                                    // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsumeFillableNotificationUpdateData) == 0x000004, "Wrong alignment on FConsumeFillableNotificationUpdateData");
static_assert(sizeof(FConsumeFillableNotificationUpdateData) == 0x00000C, "Wrong size on FConsumeFillableNotificationUpdateData");
static_assert(offsetof(FConsumeFillableNotificationUpdateData, m_Quantity) == 0x000000, "Member 'FConsumeFillableNotificationUpdateData::m_Quantity' has a wrong offset!");
static_assert(offsetof(FConsumeFillableNotificationUpdateData, m_FillableType) == 0x000004, "Member 'FConsumeFillableNotificationUpdateData::m_FillableType' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemFillPickupNotificationUpdateData
// 0x0028 (0x0028 - 0x0000)
struct FItemFillPickupNotificationUpdateData final
{
public:
	struct FEFillableType                         m_FillableType;                                    // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_QuantityAllocated;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_QuantityUnallocated;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bUnallocatedIsLost;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_FillableCurrentQuantity;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_FillableMaxQuantity;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        m_FillableId;                                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemFillPickupNotificationUpdateData) == 0x000008, "Wrong alignment on FItemFillPickupNotificationUpdateData");
static_assert(sizeof(FItemFillPickupNotificationUpdateData) == 0x000028, "Wrong size on FItemFillPickupNotificationUpdateData");
static_assert(offsetof(FItemFillPickupNotificationUpdateData, m_FillableType) == 0x000000, "Member 'FItemFillPickupNotificationUpdateData::m_FillableType' has a wrong offset!");
static_assert(offsetof(FItemFillPickupNotificationUpdateData, m_QuantityAllocated) == 0x000008, "Member 'FItemFillPickupNotificationUpdateData::m_QuantityAllocated' has a wrong offset!");
static_assert(offsetof(FItemFillPickupNotificationUpdateData, m_QuantityUnallocated) == 0x00000C, "Member 'FItemFillPickupNotificationUpdateData::m_QuantityUnallocated' has a wrong offset!");
static_assert(offsetof(FItemFillPickupNotificationUpdateData, m_bUnallocatedIsLost) == 0x000010, "Member 'FItemFillPickupNotificationUpdateData::m_bUnallocatedIsLost' has a wrong offset!");
static_assert(offsetof(FItemFillPickupNotificationUpdateData, m_FillableCurrentQuantity) == 0x000014, "Member 'FItemFillPickupNotificationUpdateData::m_FillableCurrentQuantity' has a wrong offset!");
static_assert(offsetof(FItemFillPickupNotificationUpdateData, m_FillableMaxQuantity) == 0x000018, "Member 'FItemFillPickupNotificationUpdateData::m_FillableMaxQuantity' has a wrong offset!");
static_assert(offsetof(FItemFillPickupNotificationUpdateData, m_FillableId) == 0x000020, "Member 'FItemFillPickupNotificationUpdateData::m_FillableId' has a wrong offset!");

// ScriptStruct DuneSandbox.EStatusEffectNotificationType
// 0x0000 (0x0008 - 0x0008)
struct FEStatusEffectNotificationType final : public FStringEnumValue
{
};
static_assert(alignof(FEStatusEffectNotificationType) == 0x000004, "Wrong alignment on FEStatusEffectNotificationType");
static_assert(sizeof(FEStatusEffectNotificationType) == 0x000008, "Wrong size on FEStatusEffectNotificationType");

// ScriptStruct DuneSandbox.NotificationSettingsRow
// 0x0030 (0x0040 - 0x0010)
struct FNotificationSettingsRow final : public FTableRowBase
{
public:
	float                                         m_PartyInviteInteractiveNotificationDuration;      // 0x0010(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PartyNotificationDuration;                       // 0x0014(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PartyInviteNotificationDuration;                 // 0x0018(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FriendNotificationDuration;                      // 0x001C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FriendInviteNotificationDuration;                // 0x0020(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VehicleRefuelNewStatusNotificationDuration;      // 0x0024(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VehicleRefuelNoMaterialNotificationDuration;     // 0x0028(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VehicleRefuelAlreadyFullNotificationDuration;    // 0x002C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SetDefaultRespawnLocationNotificationDuration;   // 0x0030(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GuildInviteInteractiveNotificationDuration;      // 0x0034(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_GuildNotificationDuration;                       // 0x0038(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNotificationSettingsRow) == 0x000008, "Wrong alignment on FNotificationSettingsRow");
static_assert(sizeof(FNotificationSettingsRow) == 0x000040, "Wrong size on FNotificationSettingsRow");
static_assert(offsetof(FNotificationSettingsRow, m_PartyInviteInteractiveNotificationDuration) == 0x000010, "Member 'FNotificationSettingsRow::m_PartyInviteInteractiveNotificationDuration' has a wrong offset!");
static_assert(offsetof(FNotificationSettingsRow, m_PartyNotificationDuration) == 0x000014, "Member 'FNotificationSettingsRow::m_PartyNotificationDuration' has a wrong offset!");
static_assert(offsetof(FNotificationSettingsRow, m_PartyInviteNotificationDuration) == 0x000018, "Member 'FNotificationSettingsRow::m_PartyInviteNotificationDuration' has a wrong offset!");
static_assert(offsetof(FNotificationSettingsRow, m_FriendNotificationDuration) == 0x00001C, "Member 'FNotificationSettingsRow::m_FriendNotificationDuration' has a wrong offset!");
static_assert(offsetof(FNotificationSettingsRow, m_FriendInviteNotificationDuration) == 0x000020, "Member 'FNotificationSettingsRow::m_FriendInviteNotificationDuration' has a wrong offset!");
static_assert(offsetof(FNotificationSettingsRow, m_VehicleRefuelNewStatusNotificationDuration) == 0x000024, "Member 'FNotificationSettingsRow::m_VehicleRefuelNewStatusNotificationDuration' has a wrong offset!");
static_assert(offsetof(FNotificationSettingsRow, m_VehicleRefuelNoMaterialNotificationDuration) == 0x000028, "Member 'FNotificationSettingsRow::m_VehicleRefuelNoMaterialNotificationDuration' has a wrong offset!");
static_assert(offsetof(FNotificationSettingsRow, m_VehicleRefuelAlreadyFullNotificationDuration) == 0x00002C, "Member 'FNotificationSettingsRow::m_VehicleRefuelAlreadyFullNotificationDuration' has a wrong offset!");
static_assert(offsetof(FNotificationSettingsRow, m_SetDefaultRespawnLocationNotificationDuration) == 0x000030, "Member 'FNotificationSettingsRow::m_SetDefaultRespawnLocationNotificationDuration' has a wrong offset!");
static_assert(offsetof(FNotificationSettingsRow, m_GuildInviteInteractiveNotificationDuration) == 0x000034, "Member 'FNotificationSettingsRow::m_GuildInviteInteractiveNotificationDuration' has a wrong offset!");
static_assert(offsetof(FNotificationSettingsRow, m_GuildNotificationDuration) == 0x000038, "Member 'FNotificationSettingsRow::m_GuildNotificationDuration' has a wrong offset!");

// ScriptStruct DuneSandbox.SettingsEntryRef
// 0x0008 (0x0008 - 0x0000)
struct FSettingsEntryRef final
{
public:
	int32                                         CategoryIndex;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryIndex;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSettingsEntryRef) == 0x000004, "Wrong alignment on FSettingsEntryRef");
static_assert(sizeof(FSettingsEntryRef) == 0x000008, "Wrong size on FSettingsEntryRef");
static_assert(offsetof(FSettingsEntryRef, CategoryIndex) == 0x000000, "Member 'FSettingsEntryRef::CategoryIndex' has a wrong offset!");
static_assert(offsetof(FSettingsEntryRef, EntryIndex) == 0x000004, "Member 'FSettingsEntryRef::EntryIndex' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillUIData
// 0x0002 (0x0002 - 0x0000)
struct FSkillUIData final
{
public:
	uint8                                         SkillPointsTillNextLevel;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CurrentLevel;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillUIData) == 0x000001, "Wrong alignment on FSkillUIData");
static_assert(sizeof(FSkillUIData) == 0x000002, "Wrong size on FSkillUIData");
static_assert(offsetof(FSkillUIData, SkillPointsTillNextLevel) == 0x000000, "Member 'FSkillUIData::SkillPointsTillNextLevel' has a wrong offset!");
static_assert(offsetof(FSkillUIData, CurrentLevel) == 0x000001, "Member 'FSkillUIData::CurrentLevel' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillTreeCategoryGUIData
// 0x0078 (0x0078 - 0x0000)
struct FSkillTreeCategoryGUIData final
{
public:
	class FText                                   m_CategoryName;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_TrainerIcon;                                     // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_CategoryIcon;                                    // 0x0048(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillTreeCategoryGUIData) == 0x000008, "Wrong alignment on FSkillTreeCategoryGUIData");
static_assert(sizeof(FSkillTreeCategoryGUIData) == 0x000078, "Wrong size on FSkillTreeCategoryGUIData");
static_assert(offsetof(FSkillTreeCategoryGUIData, m_CategoryName) == 0x000000, "Member 'FSkillTreeCategoryGUIData::m_CategoryName' has a wrong offset!");
static_assert(offsetof(FSkillTreeCategoryGUIData, m_TrainerIcon) == 0x000018, "Member 'FSkillTreeCategoryGUIData::m_TrainerIcon' has a wrong offset!");
static_assert(offsetof(FSkillTreeCategoryGUIData, m_CategoryIcon) == 0x000048, "Member 'FSkillTreeCategoryGUIData::m_CategoryIcon' has a wrong offset!");

// ScriptStruct DuneSandbox.PartyMemberIndicatorIconVariant
// 0x00C0 (0x00C0 - 0x0000)
struct FPartyMemberIndicatorIconVariant final
{
public:
	TSoftObjectPtr<class UObject>                 m_LeaderMapTexture;                                // 0x0000(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 m_NonLeaderMapTexture;                             // 0x0030(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 m_LeaderOtherTexture;                              // 0x0060(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 m_NonLeaderOtherTexture;                           // 0x0090(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyMemberIndicatorIconVariant) == 0x000008, "Wrong alignment on FPartyMemberIndicatorIconVariant");
static_assert(sizeof(FPartyMemberIndicatorIconVariant) == 0x0000C0, "Wrong size on FPartyMemberIndicatorIconVariant");
static_assert(offsetof(FPartyMemberIndicatorIconVariant, m_LeaderMapTexture) == 0x000000, "Member 'FPartyMemberIndicatorIconVariant::m_LeaderMapTexture' has a wrong offset!");
static_assert(offsetof(FPartyMemberIndicatorIconVariant, m_NonLeaderMapTexture) == 0x000030, "Member 'FPartyMemberIndicatorIconVariant::m_NonLeaderMapTexture' has a wrong offset!");
static_assert(offsetof(FPartyMemberIndicatorIconVariant, m_LeaderOtherTexture) == 0x000060, "Member 'FPartyMemberIndicatorIconVariant::m_LeaderOtherTexture' has a wrong offset!");
static_assert(offsetof(FPartyMemberIndicatorIconVariant, m_NonLeaderOtherTexture) == 0x000090, "Member 'FPartyMemberIndicatorIconVariant::m_NonLeaderOtherTexture' has a wrong offset!");

// ScriptStruct DuneSandbox.ActorPermissionMenuMemberList
// 0x0010 (0x0010 - 0x0000)
struct FActorPermissionMenuMemberList final
{
public:
	TArray<class UPermissionPlayerListEntryData*> m_memberDataList;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorPermissionMenuMemberList) == 0x000008, "Wrong alignment on FActorPermissionMenuMemberList");
static_assert(sizeof(FActorPermissionMenuMemberList) == 0x000010, "Wrong size on FActorPermissionMenuMemberList");
static_assert(offsetof(FActorPermissionMenuMemberList, m_memberDataList) == 0x000000, "Member 'FActorPermissionMenuMemberList::m_memberDataList' has a wrong offset!");

// ScriptStruct DuneSandbox.TaxationDialogContentTotemData
// 0x0018 (0x0018 - 0x0000)
struct FTaxationDialogContentTotemData final
{
public:
	TArray<struct FTaxInvoiceData>                m_Invoices;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UTaxationInvoiceListElementData*        m_ListItemData;                                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaxationDialogContentTotemData) == 0x000008, "Wrong alignment on FTaxationDialogContentTotemData");
static_assert(sizeof(FTaxationDialogContentTotemData) == 0x000018, "Wrong size on FTaxationDialogContentTotemData");
static_assert(offsetof(FTaxationDialogContentTotemData, m_Invoices) == 0x000000, "Member 'FTaxationDialogContentTotemData::m_Invoices' has a wrong offset!");
static_assert(offsetof(FTaxationDialogContentTotemData, m_ListItemData) == 0x000010, "Member 'FTaxationDialogContentTotemData::m_ListItemData' has a wrong offset!");

// ScriptStruct DuneSandbox.BuildableVehicleModuleData
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FBuildableVehicleModuleData final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildableVehicleModuleData) == 0x000004, "Wrong alignment on FBuildableVehicleModuleData");
static_assert(sizeof(FBuildableVehicleModuleData) == 0x00001C, "Wrong size on FBuildableVehicleModuleData");

// ScriptStruct DuneSandbox.HarvestNodeEfficiencyRowBase
// 0x0020 (0x0030 - 0x0010)
struct FHarvestNodeEfficiencyRowBase final : public FTableRowBase
{
public:
	float                                         m_HarvestingMultiplierThreshold;                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   m_Descriptor;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarvestNodeEfficiencyRowBase) == 0x000008, "Wrong alignment on FHarvestNodeEfficiencyRowBase");
static_assert(sizeof(FHarvestNodeEfficiencyRowBase) == 0x000030, "Wrong size on FHarvestNodeEfficiencyRowBase");
static_assert(offsetof(FHarvestNodeEfficiencyRowBase, m_HarvestingMultiplierThreshold) == 0x000010, "Member 'FHarvestNodeEfficiencyRowBase::m_HarvestingMultiplierThreshold' has a wrong offset!");
static_assert(offsetof(FHarvestNodeEfficiencyRowBase, m_Descriptor) == 0x000018, "Member 'FHarvestNodeEfficiencyRowBase::m_Descriptor' has a wrong offset!");

// ScriptStruct DuneSandbox.ResourceNodeSpawnInfo
// 0x0048 (0x0048 - 0x0000)
struct FResourceNodeSpawnInfo final
{
public:
	TSoftObjectPtr<class AActor>                  ResourceSpawner;                                   // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ScanInstigator;                                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResourceNodeSpawnInfo) == 0x000008, "Wrong alignment on FResourceNodeSpawnInfo");
static_assert(sizeof(FResourceNodeSpawnInfo) == 0x000048, "Wrong size on FResourceNodeSpawnInfo");
static_assert(offsetof(FResourceNodeSpawnInfo, ResourceSpawner) == 0x000000, "Member 'FResourceNodeSpawnInfo::ResourceSpawner' has a wrong offset!");
static_assert(offsetof(FResourceNodeSpawnInfo, ScanInstigator) == 0x000038, "Member 'FResourceNodeSpawnInfo::ScanInstigator' has a wrong offset!");

// ScriptStruct DuneSandbox.HazardZoneWeaponData
// 0x0070 (0x0070 - 0x0000)
struct FHazardZoneWeaponData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   DamageTypeClass;                                   // 0x0020(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    GameplayEffects;                                   // 0x0050(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AHazardZone>>        HazardZoneClasses;                                 // 0x0060(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHazardZoneWeaponData) == 0x000008, "Wrong alignment on FHazardZoneWeaponData");
static_assert(sizeof(FHazardZoneWeaponData) == 0x000070, "Wrong size on FHazardZoneWeaponData");
static_assert(offsetof(FHazardZoneWeaponData, DamageTypeClass) == 0x000020, "Member 'FHazardZoneWeaponData::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FHazardZoneWeaponData, GameplayEffects) == 0x000050, "Member 'FHazardZoneWeaponData::GameplayEffects' has a wrong offset!");
static_assert(offsetof(FHazardZoneWeaponData, HazardZoneClasses) == 0x000060, "Member 'FHazardZoneWeaponData::HazardZoneClasses' has a wrong offset!");

// ScriptStruct DuneSandbox.RadiationBiome
// 0x0010 (0x0010 - 0x0000)
struct FRadiationBiome final
{
public:
	class UBiomeArea*                             m_BiomeArea;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IntensityPerSecond;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRadiationBiome) == 0x000008, "Wrong alignment on FRadiationBiome");
static_assert(sizeof(FRadiationBiome) == 0x000010, "Wrong size on FRadiationBiome");
static_assert(offsetof(FRadiationBiome, m_BiomeArea) == 0x000000, "Member 'FRadiationBiome::m_BiomeArea' has a wrong offset!");
static_assert(offsetof(FRadiationBiome, m_IntensityPerSecond) == 0x000008, "Member 'FRadiationBiome::m_IntensityPerSecond' has a wrong offset!");

// ScriptStruct DuneSandbox.ImmediatePhysicsSimulationComponent
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FImmediatePhysicsSimulationComponent final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImmediatePhysicsSimulationComponent) == 0x000008, "Wrong alignment on FImmediatePhysicsSimulationComponent");
static_assert(sizeof(FImmediatePhysicsSimulationComponent) == 0x000048, "Wrong size on FImmediatePhysicsSimulationComponent");

// ScriptStruct DuneSandbox.ImmediatePhysicsPrimitive
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FImmediatePhysicsPrimitive final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImmediatePhysicsPrimitive) == 0x000008, "Wrong alignment on FImmediatePhysicsPrimitive");
static_assert(sizeof(FImmediatePhysicsPrimitive) == 0x000018, "Wrong size on FImmediatePhysicsPrimitive");

// ScriptStruct DuneSandbox.DuneServerDebugData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FDuneServerDebugData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDuneServerDebugData) == 0x000008, "Wrong alignment on FDuneServerDebugData");
static_assert(sizeof(FDuneServerDebugData) == 0x000028, "Wrong size on FDuneServerDebugData");

// ScriptStruct DuneSandbox.EInputAxis
// 0x0000 (0x0008 - 0x0008)
struct FEInputAxis final : public FStringEnumValue
{
};
static_assert(alignof(FEInputAxis) == 0x000004, "Wrong alignment on FEInputAxis");
static_assert(sizeof(FEInputAxis) == 0x000008, "Wrong size on FEInputAxis");

// ScriptStruct DuneSandbox.HighlightActorData
// 0x0058 (0x0058 - 0x0000)
struct FHighlightActorData final
{
public:
	class UStaticMeshComponent*                   HighlightBoxComponent;                             // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UMeshComponent*, int32>            MeshStencilValues;                                 // 0x0008(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHighlightActorData) == 0x000008, "Wrong alignment on FHighlightActorData");
static_assert(sizeof(FHighlightActorData) == 0x000058, "Wrong size on FHighlightActorData");
static_assert(offsetof(FHighlightActorData, HighlightBoxComponent) == 0x000000, "Member 'FHighlightActorData::HighlightBoxComponent' has a wrong offset!");
static_assert(offsetof(FHighlightActorData, MeshStencilValues) == 0x000008, "Member 'FHighlightActorData::MeshStencilValues' has a wrong offset!");

// ScriptStruct DuneSandbox.EFilmbook
// 0x0000 (0x0008 - 0x0008)
struct FEFilmbook final : public FStringEnumValue
{
};
static_assert(alignof(FEFilmbook) == 0x000004, "Wrong alignment on FEFilmbook");
static_assert(sizeof(FEFilmbook) == 0x000008, "Wrong size on FEFilmbook");

// ScriptStruct DuneSandbox.InteractionPlayerVisualData
// 0x0030 (0x0030 - 0x0000)
struct FInteractionPlayerVisualData final
{
public:
	class FText                                   GreyedOutFeedbackText;                             // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EInteractionErrorType                         ErrorType;                                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractionPlayerVisualData) == 0x000008, "Wrong alignment on FInteractionPlayerVisualData");
static_assert(sizeof(FInteractionPlayerVisualData) == 0x000030, "Wrong size on FInteractionPlayerVisualData");
static_assert(offsetof(FInteractionPlayerVisualData, GreyedOutFeedbackText) == 0x000000, "Member 'FInteractionPlayerVisualData::GreyedOutFeedbackText' has a wrong offset!");
static_assert(offsetof(FInteractionPlayerVisualData, ErrorType) == 0x000028, "Member 'FInteractionPlayerVisualData::ErrorType' has a wrong offset!");

// ScriptStruct DuneSandbox.InteractionObjectData
// 0x0070 (0x0070 - 0x0000)
struct FInteractionObjectData final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocationZeroOrigin;                             // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 InteractionClass;                                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractionPlayerVisualData           PlayerVisualData;                                  // 0x0028(0x0030)(NativeAccessSpecifierPublic)
	TArray<uint8>                                 Payload;                                           // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractionObjectData) == 0x000008, "Wrong alignment on FInteractionObjectData");
static_assert(sizeof(FInteractionObjectData) == 0x000070, "Wrong size on FInteractionObjectData");
static_assert(offsetof(FInteractionObjectData, Target) == 0x000000, "Member 'FInteractionObjectData::Target' has a wrong offset!");
static_assert(offsetof(FInteractionObjectData, HitLocationZeroOrigin) == 0x000008, "Member 'FInteractionObjectData::HitLocationZeroOrigin' has a wrong offset!");
static_assert(offsetof(FInteractionObjectData, InteractionClass) == 0x000020, "Member 'FInteractionObjectData::InteractionClass' has a wrong offset!");
static_assert(offsetof(FInteractionObjectData, PlayerVisualData) == 0x000028, "Member 'FInteractionObjectData::PlayerVisualData' has a wrong offset!");
static_assert(offsetof(FInteractionObjectData, Payload) == 0x000058, "Member 'FInteractionObjectData::Payload' has a wrong offset!");

// ScriptStruct DuneSandbox.GameItemStaticDataComponent_BlueprintWrapper
// 0x01B0 (0x01B0 - 0x0000)
struct FGameItemStaticDataComponent_BlueprintWrapper final
{
public:
	struct FGameItemStaticData                    GameItemStaticData;                                // 0x0000(0x01A8)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameItemStaticDataComponent_BlueprintWrapper) == 0x000008, "Wrong alignment on FGameItemStaticDataComponent_BlueprintWrapper");
static_assert(sizeof(FGameItemStaticDataComponent_BlueprintWrapper) == 0x0001B0, "Wrong size on FGameItemStaticDataComponent_BlueprintWrapper");
static_assert(offsetof(FGameItemStaticDataComponent_BlueprintWrapper, GameItemStaticData) == 0x000000, "Member 'FGameItemStaticDataComponent_BlueprintWrapper::GameItemStaticData' has a wrong offset!");

// ScriptStruct DuneSandbox.ItemInventoryComponent
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FItemInventoryComponent final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemInventoryComponent) == 0x000004, "Wrong alignment on FItemInventoryComponent");
static_assert(sizeof(FItemInventoryComponent) == 0x000004, "Wrong size on FItemInventoryComponent");

// ScriptStruct DuneSandbox.GameItemAudioCategoryRow
// 0x0008 (0x0018 - 0x0010)
struct FGameItemAudioCategoryRow final : public FTableRowBase
{
public:
	struct FEGameItemAudioCategory                RedirectTo;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameItemAudioCategoryRow) == 0x000008, "Wrong alignment on FGameItemAudioCategoryRow");
static_assert(sizeof(FGameItemAudioCategoryRow) == 0x000018, "Wrong size on FGameItemAudioCategoryRow");
static_assert(offsetof(FGameItemAudioCategoryRow, RedirectTo) == 0x000010, "Member 'FGameItemAudioCategoryRow::RedirectTo' has a wrong offset!");

// ScriptStruct DuneSandbox.IconLayerPresetTableRow
// 0x0050 (0x0060 - 0x0010)
struct FIconLayerPresetTableRow final : public FTableRowBase
{
public:
	struct FVector2D                              Offset;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DisplaySize;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnchors                               Anchors;                                           // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Tint;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIconLayerPresetTableRow) == 0x000008, "Wrong alignment on FIconLayerPresetTableRow");
static_assert(sizeof(FIconLayerPresetTableRow) == 0x000060, "Wrong size on FIconLayerPresetTableRow");
static_assert(offsetof(FIconLayerPresetTableRow, Offset) == 0x000010, "Member 'FIconLayerPresetTableRow::Offset' has a wrong offset!");
static_assert(offsetof(FIconLayerPresetTableRow, DisplaySize) == 0x000020, "Member 'FIconLayerPresetTableRow::DisplaySize' has a wrong offset!");
static_assert(offsetof(FIconLayerPresetTableRow, Anchors) == 0x000030, "Member 'FIconLayerPresetTableRow::Anchors' has a wrong offset!");
static_assert(offsetof(FIconLayerPresetTableRow, Tint) == 0x000050, "Member 'FIconLayerPresetTableRow::Tint' has a wrong offset!");

// ScriptStruct DuneSandbox.LandsraadSettingsData
// 0x0098 (0x0098 - 0x0000)
struct FLandsraadSettingsData final
{
public:
	int32                                         m_NumberOfWeeksTermRetention;                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NumberOfDecreesToNominate;                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NumberOfGuildsInHighscoreList;                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FECommuninetMessageId                  m_TermStartedMessage;                              // 0x000C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FECommuninetMessageId                  m_VotingStartedMessage;                            // 0x0014(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FECommuninetMessageId                  m_TaskProgressedMessage;                           // 0x001C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FECommuninetMessageId                  m_DecreeActivatedMessage;                          // 0x0024(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsPlayerVotingEnabled;                          // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bIsTerritoryControlEnabled;                      // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBoardLayoutDataAsset*>          m_BoardLayouts;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_VotingPeriodStartBeforeCoriolisCycleInSec;       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_VotingPeriodDurationInSec;                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_FirstTaskRevealDelayFromCompetitionStartInSeconds; // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LandsraadRevealedTaskTimestampMinuteDifference;  // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LandsraadTaskProgressUpdateFrequency;            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LandsraadTaskDailyRevealFrequency;               // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LandsraadTasksRevealedPerDailyReveal;            // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            m_LandsraadProgressFactionBalanceCurve;            // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULandsraadTaskRewardsDataAsset> m_LandsraadTaskRewardsData;                 // 0x0068(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandsraadSettingsData) == 0x000008, "Wrong alignment on FLandsraadSettingsData");
static_assert(sizeof(FLandsraadSettingsData) == 0x000098, "Wrong size on FLandsraadSettingsData");
static_assert(offsetof(FLandsraadSettingsData, m_NumberOfWeeksTermRetention) == 0x000000, "Member 'FLandsraadSettingsData::m_NumberOfWeeksTermRetention' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_NumberOfDecreesToNominate) == 0x000004, "Member 'FLandsraadSettingsData::m_NumberOfDecreesToNominate' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_NumberOfGuildsInHighscoreList) == 0x000008, "Member 'FLandsraadSettingsData::m_NumberOfGuildsInHighscoreList' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_TermStartedMessage) == 0x00000C, "Member 'FLandsraadSettingsData::m_TermStartedMessage' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_VotingStartedMessage) == 0x000014, "Member 'FLandsraadSettingsData::m_VotingStartedMessage' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_TaskProgressedMessage) == 0x00001C, "Member 'FLandsraadSettingsData::m_TaskProgressedMessage' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_DecreeActivatedMessage) == 0x000024, "Member 'FLandsraadSettingsData::m_DecreeActivatedMessage' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_bIsPlayerVotingEnabled) == 0x00002C, "Member 'FLandsraadSettingsData::m_bIsPlayerVotingEnabled' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_bIsTerritoryControlEnabled) == 0x00002D, "Member 'FLandsraadSettingsData::m_bIsTerritoryControlEnabled' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_BoardLayouts) == 0x000030, "Member 'FLandsraadSettingsData::m_BoardLayouts' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_VotingPeriodStartBeforeCoriolisCycleInSec) == 0x000040, "Member 'FLandsraadSettingsData::m_VotingPeriodStartBeforeCoriolisCycleInSec' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_VotingPeriodDurationInSec) == 0x000044, "Member 'FLandsraadSettingsData::m_VotingPeriodDurationInSec' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_FirstTaskRevealDelayFromCompetitionStartInSeconds) == 0x000048, "Member 'FLandsraadSettingsData::m_FirstTaskRevealDelayFromCompetitionStartInSeconds' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_LandsraadRevealedTaskTimestampMinuteDifference) == 0x00004C, "Member 'FLandsraadSettingsData::m_LandsraadRevealedTaskTimestampMinuteDifference' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_LandsraadTaskProgressUpdateFrequency) == 0x000050, "Member 'FLandsraadSettingsData::m_LandsraadTaskProgressUpdateFrequency' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_LandsraadTaskDailyRevealFrequency) == 0x000054, "Member 'FLandsraadSettingsData::m_LandsraadTaskDailyRevealFrequency' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_LandsraadTasksRevealedPerDailyReveal) == 0x000058, "Member 'FLandsraadSettingsData::m_LandsraadTasksRevealedPerDailyReveal' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_LandsraadProgressFactionBalanceCurve) == 0x000060, "Member 'FLandsraadSettingsData::m_LandsraadProgressFactionBalanceCurve' has a wrong offset!");
static_assert(offsetof(FLandsraadSettingsData, m_LandsraadTaskRewardsData) == 0x000068, "Member 'FLandsraadSettingsData::m_LandsraadTaskRewardsData' has a wrong offset!");

// ScriptStruct DuneSandbox.EContainerLootId
// 0x0000 (0x0008 - 0x0008)
struct FEContainerLootId final : public FStringEnumValue
{
};
static_assert(alignof(FEContainerLootId) == 0x000004, "Wrong alignment on FEContainerLootId");
static_assert(sizeof(FEContainerLootId) == 0x000008, "Wrong size on FEContainerLootId");

// ScriptStruct DuneSandbox.TreasureData
// 0x0010 (0x0010 - 0x0000)
struct FTreasureData final
{
public:
	bool                                          bIsInteractable;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADunePlayerController*                  DiscovererInstigator;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTreasureData) == 0x000008, "Wrong alignment on FTreasureData");
static_assert(sizeof(FTreasureData) == 0x000010, "Wrong size on FTreasureData");
static_assert(offsetof(FTreasureData, bIsInteractable) == 0x000000, "Member 'FTreasureData::bIsInteractable' has a wrong offset!");
static_assert(offsetof(FTreasureData, DiscovererInstigator) == 0x000008, "Member 'FTreasureData::DiscovererInstigator' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerDesyncServerState
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FPlayerDesyncServerState final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_LastUpdateFrame;                                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x14];                                      // 0x0054(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerDesyncServerState) == 0x000008, "Wrong alignment on FPlayerDesyncServerState");
static_assert(sizeof(FPlayerDesyncServerState) == 0x000068, "Wrong size on FPlayerDesyncServerState");
static_assert(offsetof(FPlayerDesyncServerState, m_LastUpdateFrame) == 0x000050, "Member 'FPlayerDesyncServerState::m_LastUpdateFrame' has a wrong offset!");

// ScriptStruct DuneSandbox.ListenPlayerActorsActorPermissionData
// 0x0040 (0x0040 - 0x0000)
struct FListenPlayerActorsActorPermissionData final
{
public:
	struct FActorPermissionData                   m_ActorPermissionData;                             // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	double                                        m_Distance;                                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_OwnerName;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FListenPlayerActorsActorPermissionData) == 0x000008, "Wrong alignment on FListenPlayerActorsActorPermissionData");
static_assert(sizeof(FListenPlayerActorsActorPermissionData) == 0x000040, "Wrong size on FListenPlayerActorsActorPermissionData");
static_assert(offsetof(FListenPlayerActorsActorPermissionData, m_ActorPermissionData) == 0x000000, "Member 'FListenPlayerActorsActorPermissionData::m_ActorPermissionData' has a wrong offset!");
static_assert(offsetof(FListenPlayerActorsActorPermissionData, m_Distance) == 0x000028, "Member 'FListenPlayerActorsActorPermissionData::m_Distance' has a wrong offset!");
static_assert(offsetof(FListenPlayerActorsActorPermissionData, m_OwnerName) == 0x000030, "Member 'FListenPlayerActorsActorPermissionData::m_OwnerName' has a wrong offset!");

// ScriptStruct DuneSandbox.PerPlayerActorPlaceablePermissionAccessData
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FPerPlayerActorPlaceablePermissionAccessData final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerPlayerActorPlaceablePermissionAccessData) == 0x000010, "Wrong alignment on FPerPlayerActorPlaceablePermissionAccessData");
static_assert(sizeof(FPerPlayerActorPlaceablePermissionAccessData) == 0x0000F0, "Wrong size on FPerPlayerActorPlaceablePermissionAccessData");

// ScriptStruct DuneSandbox.PingList
// 0x0010 (0x0010 - 0x0000)
struct FPingList final
{
public:
	TArray<struct FPingData>                      m_OrderedPingList;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPingList) == 0x000008, "Wrong alignment on FPingList");
static_assert(sizeof(FPingList) == 0x000010, "Wrong size on FPingList");
static_assert(offsetof(FPingList, m_OrderedPingList) == 0x000000, "Member 'FPingList::m_OrderedPingList' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerActionSystemPayload
// 0x0008 (0x0008 - 0x0000)
struct FPlayerActionSystemPayload final
{
public:
	class UPlayerActionSystemMessage*             m_ActionMessage;                                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayerActionSystemPayload) == 0x000008, "Wrong alignment on FPlayerActionSystemPayload");
static_assert(sizeof(FPlayerActionSystemPayload) == 0x000008, "Wrong size on FPlayerActionSystemPayload");
static_assert(offsetof(FPlayerActionSystemPayload, m_ActionMessage) == 0x000000, "Member 'FPlayerActionSystemPayload::m_ActionMessage' has a wrong offset!");

// ScriptStruct DuneSandbox.PlayerIdentifier
// 0x0068 (0x0068 - 0x0000)
struct FPlayerIdentifier final
{
public:
	EPlayerIdentifierType                         m_PlayerIdentifierType;                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              m_PlayerId;                                        // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FUniqueNetIdRepl                       m_FlsId;                                           // 0x0010(0x0038)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 m_CharacterName;                                   // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 m_FuncomId;                                        // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayerIdentifier) == 0x000008, "Wrong alignment on FPlayerIdentifier");
static_assert(sizeof(FPlayerIdentifier) == 0x000068, "Wrong size on FPlayerIdentifier");
static_assert(offsetof(FPlayerIdentifier, m_PlayerIdentifierType) == 0x000000, "Member 'FPlayerIdentifier::m_PlayerIdentifierType' has a wrong offset!");
static_assert(offsetof(FPlayerIdentifier, m_PlayerId) == 0x000008, "Member 'FPlayerIdentifier::m_PlayerId' has a wrong offset!");
static_assert(offsetof(FPlayerIdentifier, m_FlsId) == 0x000010, "Member 'FPlayerIdentifier::m_FlsId' has a wrong offset!");
static_assert(offsetof(FPlayerIdentifier, m_CharacterName) == 0x000048, "Member 'FPlayerIdentifier::m_CharacterName' has a wrong offset!");
static_assert(offsetof(FPlayerIdentifier, m_FuncomId) == 0x000058, "Member 'FPlayerIdentifier::m_FuncomId' has a wrong offset!");

// ScriptStruct DuneSandbox.EPostProcessCameraModifierName
// 0x0000 (0x0008 - 0x0008)
struct FEPostProcessCameraModifierName final : public FStringEnumValue
{
};
static_assert(alignof(FEPostProcessCameraModifierName) == 0x000004, "Wrong alignment on FEPostProcessCameraModifierName");
static_assert(sizeof(FEPostProcessCameraModifierName) == 0x000008, "Wrong size on FEPostProcessCameraModifierName");

// ScriptStruct DuneSandbox.PostProcessCameraModifierData
// 0x0058 (0x0058 - 0x0000)
struct FPostProcessCameraModifierData final
{
public:
	float                                         DeactivationScoreRelative;                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentScoreRelative;                              // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPostProcessCameraModifier*             Instance;                                          // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPostProcessCameraModifierData) == 0x000008, "Wrong alignment on FPostProcessCameraModifierData");
static_assert(sizeof(FPostProcessCameraModifierData) == 0x000058, "Wrong size on FPostProcessCameraModifierData");
static_assert(offsetof(FPostProcessCameraModifierData, DeactivationScoreRelative) == 0x000000, "Member 'FPostProcessCameraModifierData::DeactivationScoreRelative' has a wrong offset!");
static_assert(offsetof(FPostProcessCameraModifierData, Class) == 0x000008, "Member 'FPostProcessCameraModifierData::Class' has a wrong offset!");
static_assert(offsetof(FPostProcessCameraModifierData, CurrentScoreRelative) == 0x000038, "Member 'FPostProcessCameraModifierData::CurrentScoreRelative' has a wrong offset!");
static_assert(offsetof(FPostProcessCameraModifierData, Instance) == 0x000040, "Member 'FPostProcessCameraModifierData::Instance' has a wrong offset!");

// ScriptStruct DuneSandbox.PerkDynamicData
// 0x0002 (0x0002 - 0x0000)
struct FPerkDynamicData final
{
public:
	uint8                                         CurrentLevel;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerkDynamicData) == 0x000001, "Wrong alignment on FPerkDynamicData");
static_assert(sizeof(FPerkDynamicData) == 0x000002, "Wrong size on FPerkDynamicData");
static_assert(offsetof(FPerkDynamicData, CurrentLevel) == 0x000000, "Member 'FPerkDynamicData::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FPerkDynamicData, bIsNew) == 0x000001, "Member 'FPerkDynamicData::bIsNew' has a wrong offset!");

// ScriptStruct DuneSandbox.LevelComponent
// 0x0148 (0x0148 - 0x0000)
struct FLevelComponent final
{
public:
	TMap<struct FGameplayTag, struct FModuleDynamicData> ModuleData;                                 // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FPerkDynamicData> PerkData;                                     // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   ActivePerkTags;                                    // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FUniqueID, struct FTimespan>      RecentlyKilledVictims;                             // 0x00B0(0x0050)(NativeAccessSpecifierPublic)
	int32                                         TotalXPEarned;                                     // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSkillPoints;                                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnspentSkillPoints;                                // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowMaxNumberOfPerkSlots;                         // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDoOncePerSession_UnspentPointsNotification : 1;   // 0x010D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ESkillTree                                    LastViewedSkillTree;                               // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F[0x1];                                      // 0x010F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CachedNumberOfEffectivePerks;                      // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   NewPhases;                                         // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StarterAbilityModuleTag;                           // 0x0128(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StarterSkillTreeTag;                               // 0x0130(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LatestRespecTimeStamp;                             // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastVersionNumber;                                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForceRespecPopUp;                             // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelComponent) == 0x000008, "Wrong alignment on FLevelComponent");
static_assert(sizeof(FLevelComponent) == 0x000148, "Wrong size on FLevelComponent");
static_assert(offsetof(FLevelComponent, ModuleData) == 0x000000, "Member 'FLevelComponent::ModuleData' has a wrong offset!");
static_assert(offsetof(FLevelComponent, PerkData) == 0x000050, "Member 'FLevelComponent::PerkData' has a wrong offset!");
static_assert(offsetof(FLevelComponent, ActivePerkTags) == 0x0000A0, "Member 'FLevelComponent::ActivePerkTags' has a wrong offset!");
static_assert(offsetof(FLevelComponent, RecentlyKilledVictims) == 0x0000B0, "Member 'FLevelComponent::RecentlyKilledVictims' has a wrong offset!");
static_assert(offsetof(FLevelComponent, TotalXPEarned) == 0x000100, "Member 'FLevelComponent::TotalXPEarned' has a wrong offset!");
static_assert(offsetof(FLevelComponent, TotalSkillPoints) == 0x000104, "Member 'FLevelComponent::TotalSkillPoints' has a wrong offset!");
static_assert(offsetof(FLevelComponent, UnspentSkillPoints) == 0x000108, "Member 'FLevelComponent::UnspentSkillPoints' has a wrong offset!");
static_assert(offsetof(FLevelComponent, bShowMaxNumberOfPerkSlots) == 0x00010C, "Member 'FLevelComponent::bShowMaxNumberOfPerkSlots' has a wrong offset!");
static_assert(offsetof(FLevelComponent, LastViewedSkillTree) == 0x00010E, "Member 'FLevelComponent::LastViewedSkillTree' has a wrong offset!");
static_assert(offsetof(FLevelComponent, CachedNumberOfEffectivePerks) == 0x000110, "Member 'FLevelComponent::CachedNumberOfEffectivePerks' has a wrong offset!");
static_assert(offsetof(FLevelComponent, NewPhases) == 0x000118, "Member 'FLevelComponent::NewPhases' has a wrong offset!");
static_assert(offsetof(FLevelComponent, StarterAbilityModuleTag) == 0x000128, "Member 'FLevelComponent::StarterAbilityModuleTag' has a wrong offset!");
static_assert(offsetof(FLevelComponent, StarterSkillTreeTag) == 0x000130, "Member 'FLevelComponent::StarterSkillTreeTag' has a wrong offset!");
static_assert(offsetof(FLevelComponent, LatestRespecTimeStamp) == 0x000138, "Member 'FLevelComponent::LatestRespecTimeStamp' has a wrong offset!");
static_assert(offsetof(FLevelComponent, LastVersionNumber) == 0x000140, "Member 'FLevelComponent::LastVersionNumber' has a wrong offset!");
static_assert(offsetof(FLevelComponent, bShowForceRespecPopUp) == 0x000144, "Member 'FLevelComponent::bShowForceRespecPopUp' has a wrong offset!");

// ScriptStruct DuneSandbox.XPBufferComponent
// 0x0020 (0x0020 - 0x0000)
struct FXPBufferComponent final
{
public:
	class AActor*                                 m_AwardedTo;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FXPEvent                               m_XPData;                                          // 0x0008(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FXPBufferComponent) == 0x000008, "Wrong alignment on FXPBufferComponent");
static_assert(sizeof(FXPBufferComponent) == 0x000020, "Wrong size on FXPBufferComponent");
static_assert(offsetof(FXPBufferComponent, m_AwardedTo) == 0x000000, "Member 'FXPBufferComponent::m_AwardedTo' has a wrong offset!");
static_assert(offsetof(FXPBufferComponent, m_XPData) == 0x000008, "Member 'FXPBufferComponent::m_XPData' has a wrong offset!");

// ScriptStruct DuneSandbox.SkillBufferComponent
// 0x0018 (0x0018 - 0x0000)
struct FSkillBufferComponent final
{
public:
	class AActor*                                 m_AwardedTo;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillBufferComponent) == 0x000008, "Wrong alignment on FSkillBufferComponent");
static_assert(sizeof(FSkillBufferComponent) == 0x000018, "Wrong size on FSkillBufferComponent");
static_assert(offsetof(FSkillBufferComponent, m_AwardedTo) == 0x000000, "Member 'FSkillBufferComponent::m_AwardedTo' has a wrong offset!");

// ScriptStruct DuneSandbox.CoriolisCheatDebugOptions
// 0x0002 (0x0002 - 0x0000)
struct FCoriolisCheatDebugOptions final
{
public:
	bool                                          bDebug;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDamage;                                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCoriolisCheatDebugOptions) == 0x000001, "Wrong alignment on FCoriolisCheatDebugOptions");
static_assert(sizeof(FCoriolisCheatDebugOptions) == 0x000002, "Wrong size on FCoriolisCheatDebugOptions");
static_assert(offsetof(FCoriolisCheatDebugOptions, bDebug) == 0x000000, "Member 'FCoriolisCheatDebugOptions::bDebug' has a wrong offset!");
static_assert(offsetof(FCoriolisCheatDebugOptions, bForceDamage) == 0x000001, "Member 'FCoriolisCheatDebugOptions::bForceDamage' has a wrong offset!");

// ScriptStruct DuneSandbox.CoriolisZone
// 0x0048 (0x0048 - 0x0000)
struct FCoriolisZone final
{
public:
	class ULevelSequence*                         BiomeSequence;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFogHeightPositioning                         m_FogHeightPositioning;                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerInStormAnimationIndex;                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotInsideShieldWall;                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindSpeed;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBiomeConfiguration*                    BiomeConfiguration;                                // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBiomeMutators                         m_BiomeMutators;                                   // 0x0030(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	class UBiomeArea*                             m_BiomeArea;                                       // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCoriolisZone) == 0x000008, "Wrong alignment on FCoriolisZone");
static_assert(sizeof(FCoriolisZone) == 0x000048, "Wrong size on FCoriolisZone");
static_assert(offsetof(FCoriolisZone, BiomeSequence) == 0x000000, "Member 'FCoriolisZone::BiomeSequence' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, Priority) == 0x000008, "Member 'FCoriolisZone::Priority' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, m_FogHeightPositioning) == 0x00000C, "Member 'FCoriolisZone::m_FogHeightPositioning' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, StartTime) == 0x000010, "Member 'FCoriolisZone::StartTime' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, EndTime) == 0x000014, "Member 'FCoriolisZone::EndTime' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, BlendTime) == 0x000018, "Member 'FCoriolisZone::BlendTime' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, PlayerInStormAnimationIndex) == 0x00001C, "Member 'FCoriolisZone::PlayerInStormAnimationIndex' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, bNotInsideShieldWall) == 0x000020, "Member 'FCoriolisZone::bNotInsideShieldWall' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, WindSpeed) == 0x000024, "Member 'FCoriolisZone::WindSpeed' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, BiomeConfiguration) == 0x000028, "Member 'FCoriolisZone::BiomeConfiguration' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, m_BiomeMutators) == 0x000030, "Member 'FCoriolisZone::m_BiomeMutators' has a wrong offset!");
static_assert(offsetof(FCoriolisZone, m_BiomeArea) == 0x000040, "Member 'FCoriolisZone::m_BiomeArea' has a wrong offset!");

// ScriptStruct DuneSandbox.SandStormShiftingSandState
// 0x0004 (0x0004 - 0x0000)
struct FSandStormShiftingSandState final
{
public:
	float                                         ShiftDirection;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandStormShiftingSandState) == 0x000004, "Wrong alignment on FSandStormShiftingSandState");
static_assert(sizeof(FSandStormShiftingSandState) == 0x000004, "Wrong size on FSandStormShiftingSandState");
static_assert(offsetof(FSandStormShiftingSandState, ShiftDirection) == 0x000000, "Member 'FSandStormShiftingSandState::ShiftDirection' has a wrong offset!");

// ScriptStruct DuneSandbox.LevelZones
// 0x0010 (0x0010 - 0x0000)
struct FLevelZones final
{
public:
	TArray<class UStormZoneDataAsset*>            StormZoneDataAsset;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelZones) == 0x000008, "Wrong alignment on FLevelZones");
static_assert(sizeof(FLevelZones) == 0x000010, "Wrong size on FLevelZones");
static_assert(offsetof(FLevelZones, StormZoneDataAsset) == 0x000000, "Member 'FLevelZones::StormZoneDataAsset' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormBoneInfo
// 0x0060 (0x0060 - 0x0000)
struct FSandwormBoneInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetFromRoot;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandwormBoneInfo) == 0x000008, "Wrong alignment on FSandwormBoneInfo");
static_assert(sizeof(FSandwormBoneInfo) == 0x000060, "Wrong size on FSandwormBoneInfo");
static_assert(offsetof(FSandwormBoneInfo, Name) == 0x000000, "Member 'FSandwormBoneInfo::Name' has a wrong offset!");
static_assert(offsetof(FSandwormBoneInfo, OffsetFromRoot) == 0x000008, "Member 'FSandwormBoneInfo::OffsetFromRoot' has a wrong offset!");
static_assert(offsetof(FSandwormBoneInfo, WorldLocation) == 0x000010, "Member 'FSandwormBoneInfo::WorldLocation' has a wrong offset!");
static_assert(offsetof(FSandwormBoneInfo, WorldRotation) == 0x000028, "Member 'FSandwormBoneInfo::WorldRotation' has a wrong offset!");

// ScriptStruct DuneSandbox.DangerZoneLocationAndVelocity
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FDangerZoneLocationAndVelocity final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDangerZoneLocationAndVelocity) == 0x000008, "Wrong alignment on FDangerZoneLocationAndVelocity");
static_assert(sizeof(FDangerZoneLocationAndVelocity) == 0x000030, "Wrong size on FDangerZoneLocationAndVelocity");

// ScriptStruct DuneSandbox.SandwormThreatSystemSettings
// 0x0288 (0x0288 - 0x0000)
struct FSandwormThreatSystemSettings final
{
public:
	TMap<EThreatBlobType, bool>                   ThreatBlobTypeIsHighPrioMap;                       // 0x0000(0x0050)(Edit, BlueprintVisible, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EThreatBlobType, bool>                   ThreatBlobTypeCanMergeMap;                         // 0x0050(0x0050)(Edit, BlueprintVisible, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EThreatBlobType, bool>                   ThreatBlobHasContributorsMap;                      // 0x00A0(0x0050)(Edit, BlueprintVisible, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EThreatBlobType, bool>                   ThreatBlobCanDecayMap;                             // 0x00F0(0x0050)(Edit, BlueprintVisible, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EThreatBlobType, float>                  ThreatBlobTypeSizeMap;                             // 0x0140(0x0050)(Edit, BlueprintVisible, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ESandowmTargetPriority, float>           MaxCandidateThreatScoreMap;                        // 0x0190(0x0050)(Edit, BlueprintVisible, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EThreatBlobType, float>                  MaxThreatBlobValueMap;                             // 0x01E0(0x0050)(Edit, BlueprintVisible, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EThreatBlobType, bool>                   TheatBlobTypeCanBeAffectedByAreaThreatMap;         // 0x0230(0x0050)(Edit, BlueprintVisible, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ThreatTerritoryUpdateFrequency;                    // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSandwormThreatSystemSettings) == 0x000008, "Wrong alignment on FSandwormThreatSystemSettings");
static_assert(sizeof(FSandwormThreatSystemSettings) == 0x000288, "Wrong size on FSandwormThreatSystemSettings");
static_assert(offsetof(FSandwormThreatSystemSettings, ThreatBlobTypeIsHighPrioMap) == 0x000000, "Member 'FSandwormThreatSystemSettings::ThreatBlobTypeIsHighPrioMap' has a wrong offset!");
static_assert(offsetof(FSandwormThreatSystemSettings, ThreatBlobTypeCanMergeMap) == 0x000050, "Member 'FSandwormThreatSystemSettings::ThreatBlobTypeCanMergeMap' has a wrong offset!");
static_assert(offsetof(FSandwormThreatSystemSettings, ThreatBlobHasContributorsMap) == 0x0000A0, "Member 'FSandwormThreatSystemSettings::ThreatBlobHasContributorsMap' has a wrong offset!");
static_assert(offsetof(FSandwormThreatSystemSettings, ThreatBlobCanDecayMap) == 0x0000F0, "Member 'FSandwormThreatSystemSettings::ThreatBlobCanDecayMap' has a wrong offset!");
static_assert(offsetof(FSandwormThreatSystemSettings, ThreatBlobTypeSizeMap) == 0x000140, "Member 'FSandwormThreatSystemSettings::ThreatBlobTypeSizeMap' has a wrong offset!");
static_assert(offsetof(FSandwormThreatSystemSettings, MaxCandidateThreatScoreMap) == 0x000190, "Member 'FSandwormThreatSystemSettings::MaxCandidateThreatScoreMap' has a wrong offset!");
static_assert(offsetof(FSandwormThreatSystemSettings, MaxThreatBlobValueMap) == 0x0001E0, "Member 'FSandwormThreatSystemSettings::MaxThreatBlobValueMap' has a wrong offset!");
static_assert(offsetof(FSandwormThreatSystemSettings, TheatBlobTypeCanBeAffectedByAreaThreatMap) == 0x000230, "Member 'FSandwormThreatSystemSettings::TheatBlobTypeCanBeAffectedByAreaThreatMap' has a wrong offset!");
static_assert(offsetof(FSandwormThreatSystemSettings, ThreatTerritoryUpdateFrequency) == 0x000280, "Member 'FSandwormThreatSystemSettings::ThreatTerritoryUpdateFrequency' has a wrong offset!");

// ScriptStruct DuneSandbox.SafezoneSubdivision
// 0x0038 (0x0038 - 0x0000)
struct FSafezoneSubdivision final
{
public:
	struct FBox2D                                 m_SubdivisionArea;                                 // 0x0000(0x0028)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class ASplineSafezone*>                m_Safezones;                                       // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSafezoneSubdivision) == 0x000008, "Wrong alignment on FSafezoneSubdivision");
static_assert(sizeof(FSafezoneSubdivision) == 0x000038, "Wrong size on FSafezoneSubdivision");
static_assert(offsetof(FSafezoneSubdivision, m_SubdivisionArea) == 0x000000, "Member 'FSafezoneSubdivision::m_SubdivisionArea' has a wrong offset!");
static_assert(offsetof(FSafezoneSubdivision, m_Safezones) == 0x000028, "Member 'FSafezoneSubdivision::m_Safezones' has a wrong offset!");

// ScriptStruct DuneSandbox.SandwormTerritoryData
// 0x00B0 (0x00B0 - 0x0000)
struct FSandwormTerritoryData final
{
public:
	uint8                                         TerritoryHeatmapColor;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEDuneMapId                            TerritoryMapLocation;                              // 0x0004(0x0008)(Edit, BlueprintVisible, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox2D                                 TerritoryBounds;                                   // 0x0010(0x0028)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                 GlobalTerritoryBounds;                             // 0x0038(0x0028)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   CachedWorldBounds;                                 // 0x0060(0x0038)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SandwormSpawnLocation;                             // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSandwormTerritoryData) == 0x000008, "Wrong alignment on FSandwormTerritoryData");
static_assert(sizeof(FSandwormTerritoryData) == 0x0000B0, "Wrong size on FSandwormTerritoryData");
static_assert(offsetof(FSandwormTerritoryData, TerritoryHeatmapColor) == 0x000000, "Member 'FSandwormTerritoryData::TerritoryHeatmapColor' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryData, TerritoryMapLocation) == 0x000004, "Member 'FSandwormTerritoryData::TerritoryMapLocation' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryData, TerritoryBounds) == 0x000010, "Member 'FSandwormTerritoryData::TerritoryBounds' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryData, GlobalTerritoryBounds) == 0x000038, "Member 'FSandwormTerritoryData::GlobalTerritoryBounds' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryData, CachedWorldBounds) == 0x000060, "Member 'FSandwormTerritoryData::CachedWorldBounds' has a wrong offset!");
static_assert(offsetof(FSandwormTerritoryData, SandwormSpawnLocation) == 0x000098, "Member 'FSandwormTerritoryData::SandwormSpawnLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.SafezoneConvexHull
// 0x0028 (0x0028 - 0x0000)
struct FSafezoneConvexHull final
{
public:
	TArray<struct FVector2D>                      m_ConvexHull;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              m_CenterLocation;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Radius;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSafezoneConvexHull) == 0x000008, "Wrong alignment on FSafezoneConvexHull");
static_assert(sizeof(FSafezoneConvexHull) == 0x000028, "Wrong size on FSafezoneConvexHull");
static_assert(offsetof(FSafezoneConvexHull, m_ConvexHull) == 0x000000, "Member 'FSafezoneConvexHull::m_ConvexHull' has a wrong offset!");
static_assert(offsetof(FSafezoneConvexHull, m_CenterLocation) == 0x000010, "Member 'FSafezoneConvexHull::m_CenterLocation' has a wrong offset!");
static_assert(offsetof(FSafezoneConvexHull, m_Radius) == 0x000020, "Member 'FSafezoneConvexHull::m_Radius' has a wrong offset!");

// ScriptStruct DuneSandbox.ThreatTerritoryComponent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FThreatTerritoryComponent final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatTerritoryComponent) == 0x000008, "Wrong alignment on FThreatTerritoryComponent");
static_assert(sizeof(FThreatTerritoryComponent) == 0x000028, "Wrong size on FThreatTerritoryComponent");

// ScriptStruct DuneSandbox.SecurityZoneData
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FSecurityZoneData final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSecurityZoneData) == 0x000008, "Wrong alignment on FSecurityZoneData");
static_assert(sizeof(FSecurityZoneData) == 0x000090, "Wrong size on FSecurityZoneData");

// ScriptStruct DuneSandbox.ServiceMessageLocalizedEntry
// 0x0030 (0x0030 - 0x0000)
struct FServiceMessageLocalizedEntry final
{
public:
	class FString                                 m_Key;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_Title;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_Body;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServiceMessageLocalizedEntry) == 0x000008, "Wrong alignment on FServiceMessageLocalizedEntry");
static_assert(sizeof(FServiceMessageLocalizedEntry) == 0x000030, "Wrong size on FServiceMessageLocalizedEntry");
static_assert(offsetof(FServiceMessageLocalizedEntry, m_Key) == 0x000000, "Member 'FServiceMessageLocalizedEntry::m_Key' has a wrong offset!");
static_assert(offsetof(FServiceMessageLocalizedEntry, m_Title) == 0x000010, "Member 'FServiceMessageLocalizedEntry::m_Title' has a wrong offset!");
static_assert(offsetof(FServiceMessageLocalizedEntry, m_Body) == 0x000020, "Member 'FServiceMessageLocalizedEntry::m_Body' has a wrong offset!");

// ScriptStruct DuneSandbox.LocalizedEntriesServiceMessagePayload
// 0x0014 (0x0018 - 0x0004)
struct FLocalizedEntriesServiceMessagePayload final : public FServiceMessagePayload
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FServiceMessageLocalizedEntry>  m_LocalizedText;                                   // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizedEntriesServiceMessagePayload) == 0x000008, "Wrong alignment on FLocalizedEntriesServiceMessagePayload");
static_assert(sizeof(FLocalizedEntriesServiceMessagePayload) == 0x000018, "Wrong size on FLocalizedEntriesServiceMessagePayload");
static_assert(offsetof(FLocalizedEntriesServiceMessagePayload, m_LocalizedText) == 0x000008, "Member 'FLocalizedEntriesServiceMessagePayload::m_LocalizedText' has a wrong offset!");

// ScriptStruct DuneSandbox.KeybindSetting
// 0x0038 (0x0038 - 0x0000)
struct FKeybindSetting final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   PrimaryKey;                                        // 0x0008(0x0018)(Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   SecondaryKey;                                      // 0x0020(0x0018)(Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeybindSetting) == 0x000008, "Wrong alignment on FKeybindSetting");
static_assert(sizeof(FKeybindSetting) == 0x000038, "Wrong size on FKeybindSetting");
static_assert(offsetof(FKeybindSetting, Name) == 0x000000, "Member 'FKeybindSetting::Name' has a wrong offset!");
static_assert(offsetof(FKeybindSetting, PrimaryKey) == 0x000008, "Member 'FKeybindSetting::PrimaryKey' has a wrong offset!");
static_assert(offsetof(FKeybindSetting, SecondaryKey) == 0x000020, "Member 'FKeybindSetting::SecondaryKey' has a wrong offset!");

// ScriptStruct DuneSandbox.ShortCommandRuntimeData
// 0x0038 (0x0038 - 0x0000)
struct FShortCommandRuntimeData final
{
public:
	struct FGuid                                  m_Guid;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                m_Instigator;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ShortCommand;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         m_AdditionalMessages;                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShortCommandRuntimeData) == 0x000008, "Wrong alignment on FShortCommandRuntimeData");
static_assert(sizeof(FShortCommandRuntimeData) == 0x000038, "Wrong size on FShortCommandRuntimeData");
static_assert(offsetof(FShortCommandRuntimeData, m_Guid) == 0x000000, "Member 'FShortCommandRuntimeData::m_Guid' has a wrong offset!");
static_assert(offsetof(FShortCommandRuntimeData, m_Instigator) == 0x000010, "Member 'FShortCommandRuntimeData::m_Instigator' has a wrong offset!");
static_assert(offsetof(FShortCommandRuntimeData, m_ShortCommand) == 0x000018, "Member 'FShortCommandRuntimeData::m_ShortCommand' has a wrong offset!");
static_assert(offsetof(FShortCommandRuntimeData, m_AdditionalMessages) == 0x000028, "Member 'FShortCommandRuntimeData::m_AdditionalMessages' has a wrong offset!");

// ScriptStruct DuneSandbox.ShortCommandExecutionResult
// 0x0018 (0x0018 - 0x0000)
struct FShortCommandExecutionResult final
{
public:
	class FString                                 m_ErrorMessage;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsSuccess;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShortCommandExecutionResult) == 0x000008, "Wrong alignment on FShortCommandExecutionResult");
static_assert(sizeof(FShortCommandExecutionResult) == 0x000018, "Wrong size on FShortCommandExecutionResult");
static_assert(offsetof(FShortCommandExecutionResult, m_ErrorMessage) == 0x000000, "Member 'FShortCommandExecutionResult::m_ErrorMessage' has a wrong offset!");
static_assert(offsetof(FShortCommandExecutionResult, m_IsSuccess) == 0x000010, "Member 'FShortCommandExecutionResult::m_IsSuccess' has a wrong offset!");

// ScriptStruct DuneSandbox.ShowroomCameraWrapper
// 0x0018 (0x0018 - 0x0000)
struct FShowroomCameraWrapper final
{
public:
	class AActor*                                 m_Actor;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*               m_Component;                                       // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShowroomCameraWrapper) == 0x000008, "Wrong alignment on FShowroomCameraWrapper");
static_assert(sizeof(FShowroomCameraWrapper) == 0x000018, "Wrong size on FShowroomCameraWrapper");
static_assert(offsetof(FShowroomCameraWrapper, m_Actor) == 0x000000, "Member 'FShowroomCameraWrapper::m_Actor' has a wrong offset!");
static_assert(offsetof(FShowroomCameraWrapper, m_Component) == 0x000008, "Member 'FShowroomCameraWrapper::m_Component' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceBloomEventSpec
// 0x0040 (0x0040 - 0x0000)
struct FSpiceBloomEventSpec final
{
public:
	ESpiceBloomEvent                              EventType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             m_ActivationProbabilityCurve;                      // 0x0008(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LoadedActivationProbabilityCurve;                  // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceBloomEventSpec) == 0x000008, "Wrong alignment on FSpiceBloomEventSpec");
static_assert(sizeof(FSpiceBloomEventSpec) == 0x000040, "Wrong size on FSpiceBloomEventSpec");
static_assert(offsetof(FSpiceBloomEventSpec, EventType) == 0x000000, "Member 'FSpiceBloomEventSpec::EventType' has a wrong offset!");
static_assert(offsetof(FSpiceBloomEventSpec, m_ActivationProbabilityCurve) == 0x000008, "Member 'FSpiceBloomEventSpec::m_ActivationProbabilityCurve' has a wrong offset!");
static_assert(offsetof(FSpiceBloomEventSpec, LoadedActivationProbabilityCurve) == 0x000038, "Member 'FSpiceBloomEventSpec::LoadedActivationProbabilityCurve' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceBloomEvent
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSpiceBloomEvent final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiceBloomEvent) == 0x000008, "Wrong alignment on FSpiceBloomEvent");
static_assert(sizeof(FSpiceBloomEvent) == 0x000020, "Wrong size on FSpiceBloomEvent");

// ScriptStruct DuneSandbox.SpiceBloomParams
// 0x0020 (0x0020 - 0x0000)
struct FSpiceBloomParams final
{
public:
	int32                                         RandomSeed;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BloomingFieldExtent;                               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              UniverseSpawnTime;                                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceBloomParams) == 0x000008, "Wrong alignment on FSpiceBloomParams");
static_assert(sizeof(FSpiceBloomParams) == 0x000020, "Wrong size on FSpiceBloomParams");
static_assert(offsetof(FSpiceBloomParams, RandomSeed) == 0x000000, "Member 'FSpiceBloomParams::RandomSeed' has a wrong offset!");
static_assert(offsetof(FSpiceBloomParams, BloomingFieldExtent) == 0x000008, "Member 'FSpiceBloomParams::BloomingFieldExtent' has a wrong offset!");
static_assert(offsetof(FSpiceBloomParams, UniverseSpawnTime) == 0x000018, "Member 'FSpiceBloomParams::UniverseSpawnTime' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceFieldBiome
// 0x0030 (0x0030 - 0x0000)
struct FSpiceFieldBiome final
{
public:
	class ULevelSequence*                         BiomeSequence;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeInSeconds;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBiomeConfiguration*                    BiomeConfiguration;                                // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBiomeMutators                         m_BiomeMutators;                                   // 0x0018(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0xF];                                       // 0x0019(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	class UBiomeArea*                             m_BiomeArea;                                       // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceFieldBiome) == 0x000008, "Wrong alignment on FSpiceFieldBiome");
static_assert(sizeof(FSpiceFieldBiome) == 0x000030, "Wrong size on FSpiceFieldBiome");
static_assert(offsetof(FSpiceFieldBiome, BiomeSequence) == 0x000000, "Member 'FSpiceFieldBiome::BiomeSequence' has a wrong offset!");
static_assert(offsetof(FSpiceFieldBiome, Priority) == 0x000008, "Member 'FSpiceFieldBiome::Priority' has a wrong offset!");
static_assert(offsetof(FSpiceFieldBiome, BlendTimeInSeconds) == 0x00000C, "Member 'FSpiceFieldBiome::BlendTimeInSeconds' has a wrong offset!");
static_assert(offsetof(FSpiceFieldBiome, BiomeConfiguration) == 0x000010, "Member 'FSpiceFieldBiome::BiomeConfiguration' has a wrong offset!");
static_assert(offsetof(FSpiceFieldBiome, m_BiomeMutators) == 0x000018, "Member 'FSpiceFieldBiome::m_BiomeMutators' has a wrong offset!");
static_assert(offsetof(FSpiceFieldBiome, m_BiomeArea) == 0x000028, "Member 'FSpiceFieldBiome::m_BiomeArea' has a wrong offset!");

// ScriptStruct DuneSandbox.ESpiceFieldType
// 0x0000 (0x0008 - 0x0008)
struct FESpiceFieldType final : public FStringEnumValue
{
};
static_assert(alignof(FESpiceFieldType) == 0x000004, "Wrong alignment on FESpiceFieldType");
static_assert(sizeof(FESpiceFieldType) == 0x000008, "Wrong size on FESpiceFieldType");

// ScriptStruct DuneSandbox.SpiceSystemSettings
// 0x0050 (0x0050 - 0x0000)
struct FSpiceSystemSettings final
{
public:
	TMap<struct FESpiceFieldType, struct FSpiceFieldTypeSettings> m_SpiceFieldTypeSettings;          // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpiceSystemSettings) == 0x000008, "Wrong alignment on FSpiceSystemSettings");
static_assert(sizeof(FSpiceSystemSettings) == 0x000050, "Wrong size on FSpiceSystemSettings");
static_assert(offsetof(FSpiceSystemSettings, m_SpiceFieldTypeSettings) == 0x000000, "Member 'FSpiceSystemSettings::m_SpiceFieldTypeSettings' has a wrong offset!");

// ScriptStruct DuneSandbox.SpiceFieldTypeInfo
// 0x0024 (0x0024 - 0x0000)
struct alignas(0x04) FSpiceFieldTypeInfo final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpiceFieldTypeInfo) == 0x000004, "Wrong alignment on FSpiceFieldTypeInfo");
static_assert(sizeof(FSpiceFieldTypeInfo) == 0x000024, "Wrong size on FSpiceFieldTypeInfo");

// ScriptStruct DuneSandbox.PlayerLeavingSpiceFieldVicinityEvent
// 0x0070 (0x0070 - 0x0000)
struct FPlayerLeavingSpiceFieldVicinityEvent final
{
public:
	struct FSpiceFieldMetricsHeader               hd;                                                // 0x0000(0x0060)(NativeAccessSpecifierPublic)
	float                                         tia;                                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         np;                                                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nup;                                               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MCP;                                               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerLeavingSpiceFieldVicinityEvent) == 0x000008, "Wrong alignment on FPlayerLeavingSpiceFieldVicinityEvent");
static_assert(sizeof(FPlayerLeavingSpiceFieldVicinityEvent) == 0x000070, "Wrong size on FPlayerLeavingSpiceFieldVicinityEvent");
static_assert(offsetof(FPlayerLeavingSpiceFieldVicinityEvent, hd) == 0x000000, "Member 'FPlayerLeavingSpiceFieldVicinityEvent::hd' has a wrong offset!");
static_assert(offsetof(FPlayerLeavingSpiceFieldVicinityEvent, tia) == 0x000060, "Member 'FPlayerLeavingSpiceFieldVicinityEvent::tia' has a wrong offset!");
static_assert(offsetof(FPlayerLeavingSpiceFieldVicinityEvent, np) == 0x000064, "Member 'FPlayerLeavingSpiceFieldVicinityEvent::np' has a wrong offset!");
static_assert(offsetof(FPlayerLeavingSpiceFieldVicinityEvent, nup) == 0x000068, "Member 'FPlayerLeavingSpiceFieldVicinityEvent::nup' has a wrong offset!");
static_assert(offsetof(FPlayerLeavingSpiceFieldVicinityEvent, MCP) == 0x00006C, "Member 'FPlayerLeavingSpiceFieldVicinityEvent::MCP' has a wrong offset!");

// ScriptStruct DuneSandbox.DebugBinocularsContext
// 0x0018 (0x0018 - 0x0000)
struct FDebugBinocularsContext final
{
public:
	struct FVector                                SnapshotLocation;                                  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugBinocularsContext) == 0x000008, "Wrong alignment on FDebugBinocularsContext");
static_assert(sizeof(FDebugBinocularsContext) == 0x000018, "Wrong size on FDebugBinocularsContext");
static_assert(offsetof(FDebugBinocularsContext, SnapshotLocation) == 0x000000, "Member 'FDebugBinocularsContext::SnapshotLocation' has a wrong offset!");

// ScriptStruct DuneSandbox.SurveyProximityState
// 0x000C (0x000C - 0x0000)
struct FSurveyProximityState final
{
public:
	struct FEFogRevealZoneType                    ClientProximityToRevealZone;                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceOverSurveyHeight;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurveyProximityState) == 0x000004, "Wrong alignment on FSurveyProximityState");
static_assert(sizeof(FSurveyProximityState) == 0x00000C, "Wrong size on FSurveyProximityState");
static_assert(offsetof(FSurveyProximityState, ClientProximityToRevealZone) == 0x000000, "Member 'FSurveyProximityState::ClientProximityToRevealZone' has a wrong offset!");
static_assert(offsetof(FSurveyProximityState, DistanceOverSurveyHeight) == 0x000008, "Member 'FSurveyProximityState::DistanceOverSurveyHeight' has a wrong offset!");

// ScriptStruct DuneSandbox.MarkerTypeSurveyConfiguration
// 0x0014 (0x0014 - 0x0000)
struct FMarkerTypeSurveyConfiguration final
{
public:
	bool                                          bOverrideMarkerTagValues;                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncreaseCountWhenDiscovered;                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScannableLogicOverrideType                   ScannableLogic;                                    // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeFromDensityReport;                         // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighQuantityReportThresholdOverride;               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MediumQuantityReportThresholdOverride;             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowQuantityReportThresholdOverride;                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackUpdatesForProgression;                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarkerTypeSurveyConfiguration) == 0x000004, "Wrong alignment on FMarkerTypeSurveyConfiguration");
static_assert(sizeof(FMarkerTypeSurveyConfiguration) == 0x000014, "Wrong size on FMarkerTypeSurveyConfiguration");
static_assert(offsetof(FMarkerTypeSurveyConfiguration, bOverrideMarkerTagValues) == 0x000000, "Member 'FMarkerTypeSurveyConfiguration::bOverrideMarkerTagValues' has a wrong offset!");
static_assert(offsetof(FMarkerTypeSurveyConfiguration, bIncreaseCountWhenDiscovered) == 0x000001, "Member 'FMarkerTypeSurveyConfiguration::bIncreaseCountWhenDiscovered' has a wrong offset!");
static_assert(offsetof(FMarkerTypeSurveyConfiguration, ScannableLogic) == 0x000002, "Member 'FMarkerTypeSurveyConfiguration::ScannableLogic' has a wrong offset!");
static_assert(offsetof(FMarkerTypeSurveyConfiguration, bExcludeFromDensityReport) == 0x000003, "Member 'FMarkerTypeSurveyConfiguration::bExcludeFromDensityReport' has a wrong offset!");
static_assert(offsetof(FMarkerTypeSurveyConfiguration, HighQuantityReportThresholdOverride) == 0x000004, "Member 'FMarkerTypeSurveyConfiguration::HighQuantityReportThresholdOverride' has a wrong offset!");
static_assert(offsetof(FMarkerTypeSurveyConfiguration, MediumQuantityReportThresholdOverride) == 0x000008, "Member 'FMarkerTypeSurveyConfiguration::MediumQuantityReportThresholdOverride' has a wrong offset!");
static_assert(offsetof(FMarkerTypeSurveyConfiguration, LowQuantityReportThresholdOverride) == 0x00000C, "Member 'FMarkerTypeSurveyConfiguration::LowQuantityReportThresholdOverride' has a wrong offset!");
static_assert(offsetof(FMarkerTypeSurveyConfiguration, bTrackUpdatesForProgression) == 0x000010, "Member 'FMarkerTypeSurveyConfiguration::bTrackUpdatesForProgression' has a wrong offset!");

// ScriptStruct DuneSandbox.SurveyProbeConfigurationRow
// 0x0008 (0x0018 - 0x0010)
struct FSurveyProbeConfigurationRow final : public FTableRowBase
{
public:
	float                                         SurveyDuration;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxProximity;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurveyProbeConfigurationRow) == 0x000008, "Wrong alignment on FSurveyProbeConfigurationRow");
static_assert(sizeof(FSurveyProbeConfigurationRow) == 0x000018, "Wrong size on FSurveyProbeConfigurationRow");
static_assert(offsetof(FSurveyProbeConfigurationRow, SurveyDuration) == 0x000010, "Member 'FSurveyProbeConfigurationRow::SurveyDuration' has a wrong offset!");
static_assert(offsetof(FSurveyProbeConfigurationRow, MaxProximity) == 0x000014, "Member 'FSurveyProbeConfigurationRow::MaxProximity' has a wrong offset!");

// ScriptStruct DuneSandbox.ESurveyProbeLevel
// 0x0000 (0x0008 - 0x0008)
struct FESurveyProbeLevel final : public FStringEnumValue
{
};
static_assert(alignof(FESurveyProbeLevel) == 0x000004, "Wrong alignment on FESurveyProbeLevel");
static_assert(sizeof(FESurveyProbeLevel) == 0x000008, "Wrong size on FESurveyProbeLevel");

// ScriptStruct DuneSandbox.SurveyReportDataSerializer
// 0x0028 (0x0150 - 0x0128)
struct FSurveyReportDataSerializer final : public FFastArraySerializer
{
public:
	uint8                                         Pad_128[0x18];                                     // 0x0128(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSurveyReportData>              m_SurveyReports;                                   // 0x0140(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSurveyReportDataSerializer) == 0x000008, "Wrong alignment on FSurveyReportDataSerializer");
static_assert(sizeof(FSurveyReportDataSerializer) == 0x000150, "Wrong size on FSurveyReportDataSerializer");
static_assert(offsetof(FSurveyReportDataSerializer, m_SurveyReports) == 0x000140, "Member 'FSurveyReportDataSerializer::m_SurveyReports' has a wrong offset!");

// ScriptStruct DuneSandbox.TechKnowledgeArray
// 0x0010 (0x0138 - 0x0128)
struct FTechKnowledgeArray final : public FFastArraySerializer
{
public:
	TArray<struct FTechKnowledgeEntry>            m_TechKnowledgeData;                               // 0x0128(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTechKnowledgeArray) == 0x000008, "Wrong alignment on FTechKnowledgeArray");
static_assert(sizeof(FTechKnowledgeArray) == 0x000138, "Wrong size on FTechKnowledgeArray");
static_assert(offsetof(FTechKnowledgeArray, m_TechKnowledgeData) == 0x000128, "Member 'FTechKnowledgeArray::m_TechKnowledgeData' has a wrong offset!");

// ScriptStruct DuneSandbox.BiomeExponentialHeightFogData
// 0x0010 (0x0010 - 0x0000)
struct FBiomeExponentialHeightFogData final
{
public:
	float                                         FogDensity;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightOffset;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideFogDensity;                             // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideFogHeightFalloff;                       // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideFogHeightOffset;                        // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomeExponentialHeightFogData) == 0x000004, "Wrong alignment on FBiomeExponentialHeightFogData");
static_assert(sizeof(FBiomeExponentialHeightFogData) == 0x000010, "Wrong size on FBiomeExponentialHeightFogData");
static_assert(offsetof(FBiomeExponentialHeightFogData, FogDensity) == 0x000000, "Member 'FBiomeExponentialHeightFogData::FogDensity' has a wrong offset!");
static_assert(offsetof(FBiomeExponentialHeightFogData, FogHeightFalloff) == 0x000004, "Member 'FBiomeExponentialHeightFogData::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FBiomeExponentialHeightFogData, FogHeightOffset) == 0x000008, "Member 'FBiomeExponentialHeightFogData::FogHeightOffset' has a wrong offset!");
static_assert(offsetof(FBiomeExponentialHeightFogData, m_bOverrideFogDensity) == 0x00000C, "Member 'FBiomeExponentialHeightFogData::m_bOverrideFogDensity' has a wrong offset!");
static_assert(offsetof(FBiomeExponentialHeightFogData, m_bOverrideFogHeightFalloff) == 0x00000D, "Member 'FBiomeExponentialHeightFogData::m_bOverrideFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FBiomeExponentialHeightFogData, m_bOverrideFogHeightOffset) == 0x00000E, "Member 'FBiomeExponentialHeightFogData::m_bOverrideFogHeightOffset' has a wrong offset!");

// ScriptStruct DuneSandbox.TimeOfDayLightsSettings
// 0x001C (0x001C - 0x0000)
struct FTimeOfDayLightsSettings final
{
public:
	float                                         m_IntensityPercentage;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IndirectLightingIntensityPercentage;             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Temperature;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_StartFadeOutDistance;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EndFadeOutDistance;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideIntensityPercentage;                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideIndirectLightingIntensityPercentage;    // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideTemperature;                            // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideStartFadeOutDistance;                   // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOverrideEndFadeOutDistance;                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeOfDayLightsSettings) == 0x000004, "Wrong alignment on FTimeOfDayLightsSettings");
static_assert(sizeof(FTimeOfDayLightsSettings) == 0x00001C, "Wrong size on FTimeOfDayLightsSettings");
static_assert(offsetof(FTimeOfDayLightsSettings, m_IntensityPercentage) == 0x000000, "Member 'FTimeOfDayLightsSettings::m_IntensityPercentage' has a wrong offset!");
static_assert(offsetof(FTimeOfDayLightsSettings, m_IndirectLightingIntensityPercentage) == 0x000004, "Member 'FTimeOfDayLightsSettings::m_IndirectLightingIntensityPercentage' has a wrong offset!");
static_assert(offsetof(FTimeOfDayLightsSettings, m_Temperature) == 0x000008, "Member 'FTimeOfDayLightsSettings::m_Temperature' has a wrong offset!");
static_assert(offsetof(FTimeOfDayLightsSettings, m_StartFadeOutDistance) == 0x00000C, "Member 'FTimeOfDayLightsSettings::m_StartFadeOutDistance' has a wrong offset!");
static_assert(offsetof(FTimeOfDayLightsSettings, m_EndFadeOutDistance) == 0x000010, "Member 'FTimeOfDayLightsSettings::m_EndFadeOutDistance' has a wrong offset!");
static_assert(offsetof(FTimeOfDayLightsSettings, m_bOverrideIntensityPercentage) == 0x000014, "Member 'FTimeOfDayLightsSettings::m_bOverrideIntensityPercentage' has a wrong offset!");
static_assert(offsetof(FTimeOfDayLightsSettings, m_bOverrideIndirectLightingIntensityPercentage) == 0x000015, "Member 'FTimeOfDayLightsSettings::m_bOverrideIndirectLightingIntensityPercentage' has a wrong offset!");
static_assert(offsetof(FTimeOfDayLightsSettings, m_bOverrideTemperature) == 0x000016, "Member 'FTimeOfDayLightsSettings::m_bOverrideTemperature' has a wrong offset!");
static_assert(offsetof(FTimeOfDayLightsSettings, m_bOverrideStartFadeOutDistance) == 0x000017, "Member 'FTimeOfDayLightsSettings::m_bOverrideStartFadeOutDistance' has a wrong offset!");
static_assert(offsetof(FTimeOfDayLightsSettings, m_bOverrideEndFadeOutDistance) == 0x000018, "Member 'FTimeOfDayLightsSettings::m_bOverrideEndFadeOutDistance' has a wrong offset!");

// ScriptStruct DuneSandbox.ScalarParameterTotalData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FScalarParameterTotalData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScalarParameterTotalData) == 0x000004, "Wrong alignment on FScalarParameterTotalData");
static_assert(sizeof(FScalarParameterTotalData) == 0x000008, "Wrong size on FScalarParameterTotalData");

// ScriptStruct DuneSandbox.ScalarParameterData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FScalarParameterData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScalarParameterData) == 0x000008, "Wrong alignment on FScalarParameterData");
static_assert(sizeof(FScalarParameterData) == 0x000018, "Wrong size on FScalarParameterData");

// ScriptStruct DuneSandbox.MaterialParameterTrack
// 0x0038 (0x0038 - 0x0000)
struct FMaterialParameterTrack final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollectionInstance*   MaterialParameterCollectionInstance;               // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialParameterTrack) == 0x000008, "Wrong alignment on FMaterialParameterTrack");
static_assert(sizeof(FMaterialParameterTrack) == 0x000038, "Wrong size on FMaterialParameterTrack");
static_assert(offsetof(FMaterialParameterTrack, MaterialParameterCollectionInstance) == 0x000030, "Member 'FMaterialParameterTrack::MaterialParameterCollectionInstance' has a wrong offset!");

// ScriptStruct DuneSandbox.MaterialParameterTrackContainer
// 0x0010 (0x0010 - 0x0000)
struct FMaterialParameterTrackContainer final
{
public:
	TArray<struct FMaterialParameterTrack>        MaterialParameterTracks;                           // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialParameterTrackContainer) == 0x000008, "Wrong alignment on FMaterialParameterTrackContainer");
static_assert(sizeof(FMaterialParameterTrackContainer) == 0x000010, "Wrong size on FMaterialParameterTrackContainer");
static_assert(offsetof(FMaterialParameterTrackContainer, MaterialParameterTracks) == 0x000000, "Member 'FMaterialParameterTrackContainer::MaterialParameterTracks' has a wrong offset!");

// ScriptStruct DuneSandbox.TimeOfDayRegionBiomeAreas
// 0x0058 (0x0058 - 0x0000)
struct FTimeOfDayRegionBiomeAreas final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class UBiomeArea*>                       BiomeAreas;                                        // 0x0008(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeOfDayRegionBiomeAreas) == 0x000008, "Wrong alignment on FTimeOfDayRegionBiomeAreas");
static_assert(sizeof(FTimeOfDayRegionBiomeAreas) == 0x000058, "Wrong size on FTimeOfDayRegionBiomeAreas");
static_assert(offsetof(FTimeOfDayRegionBiomeAreas, LevelSequence) == 0x000000, "Member 'FTimeOfDayRegionBiomeAreas::LevelSequence' has a wrong offset!");
static_assert(offsetof(FTimeOfDayRegionBiomeAreas, BiomeAreas) == 0x000008, "Member 'FTimeOfDayRegionBiomeAreas::BiomeAreas' has a wrong offset!");

// ScriptStruct DuneSandbox.TutorialEntry
// 0x0064 (0x0070 - 0x000C)
struct FTutorialEntry final : public FFastArraySerializerItem
{
public:
	struct FETutorialEnum                         m_TutorialId;                                      // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialState                                m_State;                                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x33];                                      // 0x0015(0x0033)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         m_RevealRegistrationId;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         m_CompletionRegistrationId;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         m_CancelRegistrationId;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ETutorialReplicationReason                    m_ReplicationReason;                               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTutorialEntry) == 0x000008, "Wrong alignment on FTutorialEntry");
static_assert(sizeof(FTutorialEntry) == 0x000070, "Wrong size on FTutorialEntry");
static_assert(offsetof(FTutorialEntry, m_TutorialId) == 0x00000C, "Member 'FTutorialEntry::m_TutorialId' has a wrong offset!");
static_assert(offsetof(FTutorialEntry, m_State) == 0x000014, "Member 'FTutorialEntry::m_State' has a wrong offset!");
static_assert(offsetof(FTutorialEntry, m_RevealRegistrationId) == 0x000048, "Member 'FTutorialEntry::m_RevealRegistrationId' has a wrong offset!");
static_assert(offsetof(FTutorialEntry, m_CompletionRegistrationId) == 0x000050, "Member 'FTutorialEntry::m_CompletionRegistrationId' has a wrong offset!");
static_assert(offsetof(FTutorialEntry, m_CancelRegistrationId) == 0x000058, "Member 'FTutorialEntry::m_CancelRegistrationId' has a wrong offset!");
static_assert(offsetof(FTutorialEntry, m_ReplicationReason) == 0x000068, "Member 'FTutorialEntry::m_ReplicationReason' has a wrong offset!");

// ScriptStruct DuneSandbox.TutorialsArray
// 0x0018 (0x0140 - 0x0128)
struct FTutorialsArray final : public FFastArraySerializer
{
public:
	TArray<struct FTutorialEntry>                 m_Tutorials;                                       // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UTutorialActorComponent*                m_Owner;                                           // 0x0138(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialsArray) == 0x000008, "Wrong alignment on FTutorialsArray");
static_assert(sizeof(FTutorialsArray) == 0x000140, "Wrong size on FTutorialsArray");
static_assert(offsetof(FTutorialsArray, m_Tutorials) == 0x000128, "Member 'FTutorialsArray::m_Tutorials' has a wrong offset!");
static_assert(offsetof(FTutorialsArray, m_Owner) == 0x000138, "Member 'FTutorialsArray::m_Owner' has a wrong offset!");

// ScriptStruct DuneSandbox.GenericCheckpointGroup
// 0x0018 (0x0018 - 0x0000)
struct FGenericCheckpointGroup final
{
public:
	class FName                                   m_GroupName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         m_CheckpointsToTrigger;                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenericCheckpointGroup) == 0x000008, "Wrong alignment on FGenericCheckpointGroup");
static_assert(sizeof(FGenericCheckpointGroup) == 0x000018, "Wrong size on FGenericCheckpointGroup");
static_assert(offsetof(FGenericCheckpointGroup, m_GroupName) == 0x000000, "Member 'FGenericCheckpointGroup::m_GroupName' has a wrong offset!");
static_assert(offsetof(FGenericCheckpointGroup, m_CheckpointsToTrigger) == 0x000008, "Member 'FGenericCheckpointGroup::m_CheckpointsToTrigger' has a wrong offset!");

// ScriptStruct DuneSandbox.DateTimeMostSignificantPartFormatSettings
// 0x0038 (0x0038 - 0x0000)
struct FDateTimeMostSignificantPartFormatSettings final
{
public:
	class FText                                   ShortFormat;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DigitsFormat;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTimespan                              DigitsThreshold;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDateTimeMostSignificantPartFormatSettings) == 0x000008, "Wrong alignment on FDateTimeMostSignificantPartFormatSettings");
static_assert(sizeof(FDateTimeMostSignificantPartFormatSettings) == 0x000038, "Wrong size on FDateTimeMostSignificantPartFormatSettings");
static_assert(offsetof(FDateTimeMostSignificantPartFormatSettings, ShortFormat) == 0x000000, "Member 'FDateTimeMostSignificantPartFormatSettings::ShortFormat' has a wrong offset!");
static_assert(offsetof(FDateTimeMostSignificantPartFormatSettings, DigitsFormat) == 0x000018, "Member 'FDateTimeMostSignificantPartFormatSettings::DigitsFormat' has a wrong offset!");
static_assert(offsetof(FDateTimeMostSignificantPartFormatSettings, DigitsThreshold) == 0x000030, "Member 'FDateTimeMostSignificantPartFormatSettings::DigitsThreshold' has a wrong offset!");

// ScriptStruct DuneSandbox.CharacterEquipmentOptionRow
// 0x0070 (0x0080 - 0x0010)
struct FCharacterEquipmentOptionRow final : public FTableRowBase
{
public:
	class FString                                 m_EquipmentName;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_Tooltip;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_MutableParameterName;                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_MutableOptionValue;                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              m_ItemIcon;                                        // 0x0050(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterEquipmentOptionRow) == 0x000008, "Wrong alignment on FCharacterEquipmentOptionRow");
static_assert(sizeof(FCharacterEquipmentOptionRow) == 0x000080, "Wrong size on FCharacterEquipmentOptionRow");
static_assert(offsetof(FCharacterEquipmentOptionRow, m_EquipmentName) == 0x000010, "Member 'FCharacterEquipmentOptionRow::m_EquipmentName' has a wrong offset!");
static_assert(offsetof(FCharacterEquipmentOptionRow, m_Tooltip) == 0x000020, "Member 'FCharacterEquipmentOptionRow::m_Tooltip' has a wrong offset!");
static_assert(offsetof(FCharacterEquipmentOptionRow, m_MutableParameterName) == 0x000030, "Member 'FCharacterEquipmentOptionRow::m_MutableParameterName' has a wrong offset!");
static_assert(offsetof(FCharacterEquipmentOptionRow, m_MutableOptionValue) == 0x000040, "Member 'FCharacterEquipmentOptionRow::m_MutableOptionValue' has a wrong offset!");
static_assert(offsetof(FCharacterEquipmentOptionRow, m_ItemIcon) == 0x000050, "Member 'FCharacterEquipmentOptionRow::m_ItemIcon' has a wrong offset!");

// ScriptStruct DuneSandbox.FilterTextConfiguration
// 0x0050 (0x0050 - 0x0000)
struct FFilterTextConfiguration final
{
public:
	bool                                          TrimPrecedingAndTrailingWhitespaces;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         MinCharacters;                                     // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MaxCharacters;                                     // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCombinedLengthCheck;                           // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyProfanityFiltering;                           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfanityReplace;                                  // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EToxicityFilteringTextType                    ProfanityTextType;                                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyReservedWordFiltering;                        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFilterTextCharactersType                     CharactersType;                                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegexString;                                       // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MaxLineBreaks;                                     // 0x0030(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_AllowedSpecialCharacters;                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         m_MaxSpecialCharacters;                            // 0x0048(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckConsecutiveNumbers;                          // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         m_MaxConsecutiveNumbers;                           // 0x004C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialCharBetweenLettersOrNumbers;               // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFilterTextConfiguration) == 0x000008, "Wrong alignment on FFilterTextConfiguration");
static_assert(sizeof(FFilterTextConfiguration) == 0x000050, "Wrong size on FFilterTextConfiguration");
static_assert(offsetof(FFilterTextConfiguration, TrimPrecedingAndTrailingWhitespaces) == 0x000000, "Member 'FFilterTextConfiguration::TrimPrecedingAndTrailingWhitespaces' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, MinCharacters) == 0x000002, "Member 'FFilterTextConfiguration::MinCharacters' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, MaxCharacters) == 0x000004, "Member 'FFilterTextConfiguration::MaxCharacters' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, bUseCombinedLengthCheck) == 0x000006, "Member 'FFilterTextConfiguration::bUseCombinedLengthCheck' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, ApplyProfanityFiltering) == 0x000007, "Member 'FFilterTextConfiguration::ApplyProfanityFiltering' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, ProfanityReplace) == 0x000008, "Member 'FFilterTextConfiguration::ProfanityReplace' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, ProfanityTextType) == 0x000018, "Member 'FFilterTextConfiguration::ProfanityTextType' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, ApplyReservedWordFiltering) == 0x000019, "Member 'FFilterTextConfiguration::ApplyReservedWordFiltering' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, CharactersType) == 0x00001A, "Member 'FFilterTextConfiguration::CharactersType' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, RegexString) == 0x000020, "Member 'FFilterTextConfiguration::RegexString' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, MaxLineBreaks) == 0x000030, "Member 'FFilterTextConfiguration::MaxLineBreaks' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, m_AllowedSpecialCharacters) == 0x000038, "Member 'FFilterTextConfiguration::m_AllowedSpecialCharacters' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, m_MaxSpecialCharacters) == 0x000048, "Member 'FFilterTextConfiguration::m_MaxSpecialCharacters' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, bCheckConsecutiveNumbers) == 0x00004A, "Member 'FFilterTextConfiguration::bCheckConsecutiveNumbers' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, m_MaxConsecutiveNumbers) == 0x00004C, "Member 'FFilterTextConfiguration::m_MaxConsecutiveNumbers' has a wrong offset!");
static_assert(offsetof(FFilterTextConfiguration, bSpecialCharBetweenLettersOrNumbers) == 0x00004E, "Member 'FFilterTextConfiguration::bSpecialCharBetweenLettersOrNumbers' has a wrong offset!");

// ScriptStruct DuneSandbox.OrnithopterAudioEvents
// 0x0058 (0x0058 - 0x0000)
struct FOrnithopterAudioEvents final
{
public:
	class UFcAudioEvent*                          m_DragonflyModeStart;                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_DragonflyModeEnd;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_VultureModeStart;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_VultureModeEnd;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_TakeOff;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_TouchDown;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandingGearOut;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LandingGearIn;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_WingsOut;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_WingsIn;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_Dash;                                            // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrnithopterAudioEvents) == 0x000008, "Wrong alignment on FOrnithopterAudioEvents");
static_assert(sizeof(FOrnithopterAudioEvents) == 0x000058, "Wrong size on FOrnithopterAudioEvents");
static_assert(offsetof(FOrnithopterAudioEvents, m_DragonflyModeStart) == 0x000000, "Member 'FOrnithopterAudioEvents::m_DragonflyModeStart' has a wrong offset!");
static_assert(offsetof(FOrnithopterAudioEvents, m_DragonflyModeEnd) == 0x000008, "Member 'FOrnithopterAudioEvents::m_DragonflyModeEnd' has a wrong offset!");
static_assert(offsetof(FOrnithopterAudioEvents, m_VultureModeStart) == 0x000010, "Member 'FOrnithopterAudioEvents::m_VultureModeStart' has a wrong offset!");
static_assert(offsetof(FOrnithopterAudioEvents, m_VultureModeEnd) == 0x000018, "Member 'FOrnithopterAudioEvents::m_VultureModeEnd' has a wrong offset!");
static_assert(offsetof(FOrnithopterAudioEvents, m_TakeOff) == 0x000020, "Member 'FOrnithopterAudioEvents::m_TakeOff' has a wrong offset!");
static_assert(offsetof(FOrnithopterAudioEvents, m_TouchDown) == 0x000028, "Member 'FOrnithopterAudioEvents::m_TouchDown' has a wrong offset!");
static_assert(offsetof(FOrnithopterAudioEvents, m_LandingGearOut) == 0x000030, "Member 'FOrnithopterAudioEvents::m_LandingGearOut' has a wrong offset!");
static_assert(offsetof(FOrnithopterAudioEvents, m_LandingGearIn) == 0x000038, "Member 'FOrnithopterAudioEvents::m_LandingGearIn' has a wrong offset!");
static_assert(offsetof(FOrnithopterAudioEvents, m_WingsOut) == 0x000040, "Member 'FOrnithopterAudioEvents::m_WingsOut' has a wrong offset!");
static_assert(offsetof(FOrnithopterAudioEvents, m_WingsIn) == 0x000048, "Member 'FOrnithopterAudioEvents::m_WingsIn' has a wrong offset!");
static_assert(offsetof(FOrnithopterAudioEvents, m_Dash) == 0x000050, "Member 'FOrnithopterAudioEvents::m_Dash' has a wrong offset!");

// ScriptStruct DuneSandbox.EVehicleStatID
// 0x0000 (0x0008 - 0x0008)
struct FEVehicleStatID : public FStringEnumValue
{
};
static_assert(alignof(FEVehicleStatID) == 0x000004, "Wrong alignment on FEVehicleStatID");
static_assert(sizeof(FEVehicleStatID) == 0x000008, "Wrong size on FEVehicleStatID");

// ScriptStruct DuneSandbox.EVehicleInt32StatID
// 0x0000 (0x0008 - 0x0008)
struct FEVehicleInt32StatID final : public FEVehicleStatID
{
};
static_assert(alignof(FEVehicleInt32StatID) == 0x000004, "Wrong alignment on FEVehicleInt32StatID");
static_assert(sizeof(FEVehicleInt32StatID) == 0x000008, "Wrong size on FEVehicleInt32StatID");

// ScriptStruct DuneSandbox.EVehicleFloatStatID
// 0x0000 (0x0008 - 0x0008)
struct FEVehicleFloatStatID final : public FEVehicleStatID
{
};
static_assert(alignof(FEVehicleFloatStatID) == 0x000004, "Wrong alignment on FEVehicleFloatStatID");
static_assert(sizeof(FEVehicleFloatStatID) == 0x000008, "Wrong size on FEVehicleFloatStatID");

}

