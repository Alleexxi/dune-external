#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Vehicle_Flying

#include "Basic.hpp"

#include "DuneSandbox_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.CalculateChassisVariables
// 0x0508 (0x0508 - 0x0000)
struct BPFL_Vehicle_Flying_C_CalculateChassisVariables final
{
public:
	struct FOrnithopterEffectsDriverComponent     OrnithopterEffectsDriverComponent;                 // 0x0000(0x01C8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	double                                        IKWeightGears;                                     // 0x01C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToGroundToLowerGear;                       // 0x01D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BodyRotationOffset;                                // 0x01D8(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        DeltaTime;                                         // 0x01F0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          Target;                                            // 0x01F8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0200(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EOrnithopterFlightMode                        Flight_ModeValue;                                  // 0x0208(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IKWeightGearsValue;                                // 0x0210(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BodyRotationOffsetValue;                           // 0x0218(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsDashing;                                        // 0x0230(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0232(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_233[0x1];                                      // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0370(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0380(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Cos_ReturnValue;                          // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZY_ReturnValue;                // 0x03A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x03D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Cos_ReturnValue_1;                        // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZX_ReturnValue;                // 0x03F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0430(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_8;      // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Multiply_RotatorFloat_ReturnValue;        // 0x0450(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0468(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_SelectRotator_ReturnValue;                // 0x0480(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_SelectRotator_ReturnValue_1;              // 0x04A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x04B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1;   // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast;         // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x04F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_1;         // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast_1;          // 0x0504(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Flying_C_CalculateChassisVariables) == 0x000008, "Wrong alignment on BPFL_Vehicle_Flying_C_CalculateChassisVariables");
static_assert(sizeof(BPFL_Vehicle_Flying_C_CalculateChassisVariables) == 0x000508, "Wrong size on BPFL_Vehicle_Flying_C_CalculateChassisVariables");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, OrnithopterEffectsDriverComponent) == 0x000000, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::OrnithopterEffectsDriverComponent' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, IKWeightGears) == 0x0001C8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::IKWeightGears' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, DistanceToGroundToLowerGear) == 0x0001D0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::DistanceToGroundToLowerGear' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, BodyRotationOffset) == 0x0001D8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::BodyRotationOffset' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, DeltaTime) == 0x0001F0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::DeltaTime' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, Target) == 0x0001F8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::Target' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, __WorldContext) == 0x000200, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, Flight_ModeValue) == 0x000208, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::Flight_ModeValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, IKWeightGearsValue) == 0x000210, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::IKWeightGearsValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, BodyRotationOffsetValue) == 0x000218, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::BodyRotationOffsetValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, bIsDashing) == 0x000230, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::bIsDashing' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_bBlockingHit) == 0x000231, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_bInitialOverlap) == 0x000232, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_Time) == 0x000234, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_Distance) == 0x000238, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_Location) == 0x000240, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_ImpactPoint) == 0x000258, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_Normal) == 0x000270, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_ImpactNormal) == 0x000288, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_PhysMat) == 0x0002A0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_HitActor) == 0x0002A8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_HitComponent) == 0x0002B0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_HitBoneName) == 0x0002B8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_BoneName) == 0x0002C0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_HitItem) == 0x0002C8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_ElementIndex) == 0x0002CC, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_FaceIndex) == 0x0002D0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_TraceStart) == 0x0002D8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakHitResult_TraceEnd) == 0x0002F0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakVector_X) == 0x000308, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakVector_Y) == 0x000310, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakVector_Z) == 0x000318, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000320, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000328, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_SelectFloat_ReturnValue) == 0x000330, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000338, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_MakeRotator_ReturnValue) == 0x000340, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_FInterpTo_ReturnValue) == 0x000358, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000360, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000368, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_GetOwningComponent_ReturnValue) == 0x000370, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000378, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_GetRightVector_ReturnValue) == 0x000380, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Cos_ReturnValue) == 0x000398, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_MakeRotFromZY_ReturnValue) == 0x0003A0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_MakeRotFromZY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0003B8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakRotator_Roll) == 0x0003C0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakRotator_Pitch) == 0x0003C4, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakRotator_Yaw) == 0x0003C8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x0003D0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_GetForwardVector_ReturnValue) == 0x0003D8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Cos_ReturnValue_1) == 0x0003F0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Cos_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_MakeRotFromZX_ReturnValue) == 0x0003F8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_MakeRotFromZX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x000410, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakRotator_Roll_1) == 0x000418, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakRotator_Pitch_1) == 0x00041C, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_BreakRotator_Yaw_1) == 0x000420, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x000428, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_MakeRotator_ReturnValue_1) == 0x000430, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_ReturnValue_8) == 0x000448, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_RotatorFloat_ReturnValue) == 0x000450, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_RotatorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_MakeRotator_ReturnValue_2) == 0x000468, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_SelectRotator_ReturnValue) == 0x000480, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_SelectRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000498, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_SelectRotator_ReturnValue_1) == 0x0004A0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_SelectRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_RInterpTo_ReturnValue) == 0x0004B8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x0004D0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1) == 0x0004D8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0004E0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_Less_DoubleDouble_B_ImplicitCast) == 0x0004E8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_Less_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0004F0, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0004F4, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x0004F8, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_MakeRotator_Pitch_ImplicitCast_1) == 0x0004FC, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_MakeRotator_Pitch_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000500, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateChassisVariables, CallFunc_MakeRotator_Roll_ImplicitCast_1) == 0x000504, "Member 'BPFL_Vehicle_Flying_C_CalculateChassisVariables::CallFunc_MakeRotator_Roll_ImplicitCast_1' has a wrong offset!");

// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.CalculateLoadingRamp
// 0x05C8 (0x05C8 - 0x0000)
struct BPFL_Vehicle_Flying_C_CalculateLoadingRamp final
{
public:
	struct FOrnithopterEffectsDriverComponent     OrnithopterEffectsDriverComponent;                 // 0x0000(0x01C8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class FName                                   LoadingRampIKSocket;                               // 0x01C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IKTraceDistance;                                   // 0x01D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x01D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          Target;                                            // 0x01E0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x01E8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bOpenRampValue;                                    // 0x01F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLoadingRampValue;                            // 0x01F8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IKWeightRampValue;                                 // 0x0210(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IKWeight_Ramp;                                     // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_LoadingRamp;                                // 0x0220(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOpenRamp;                                         // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0240(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A[0x2];                                      // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x02A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0308(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0338(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0380(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x03B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x03C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x03E0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x03F0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x04E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EA[0x2];                                      // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x04F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0510(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0528(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0540(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0558(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0560(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0568(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x0578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0580(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x0584(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58C[0x4];                                      // 0x058C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0590(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x05A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp) == 0x000008, "Wrong alignment on BPFL_Vehicle_Flying_C_CalculateLoadingRamp");
static_assert(sizeof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp) == 0x0005C8, "Wrong size on BPFL_Vehicle_Flying_C_CalculateLoadingRamp");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, OrnithopterEffectsDriverComponent) == 0x000000, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::OrnithopterEffectsDriverComponent' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, LoadingRampIKSocket) == 0x0001C8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::LoadingRampIKSocket' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, IKTraceDistance) == 0x0001D0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::IKTraceDistance' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, DeltaTime) == 0x0001D8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::DeltaTime' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, Target) == 0x0001E0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::Target' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, __WorldContext) == 0x0001E8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, bOpenRampValue) == 0x0001F0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::bOpenRampValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, TargetLoadingRampValue) == 0x0001F8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::TargetLoadingRampValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, IKWeightRampValue) == 0x000210, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::IKWeightRampValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, IKWeight_Ramp) == 0x000218, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::IKWeight_Ramp' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, Target_LoadingRamp) == 0x000220, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::Target_LoadingRamp' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, bOpenRamp) == 0x000238, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::bOpenRamp' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_GetOwningComponent_ReturnValue) == 0x000240, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_bBlockingHit) == 0x000248, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_bInitialOverlap) == 0x000249, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_Time) == 0x00024C, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_Distance) == 0x000250, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_Location) == 0x000258, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_ImpactPoint) == 0x000270, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_Normal) == 0x000288, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_ImpactNormal) == 0x0002A0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_PhysMat) == 0x0002B8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_HitActor) == 0x0002C0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_HitComponent) == 0x0002C8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_HitBoneName) == 0x0002D0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_BoneName) == 0x0002D8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_HitItem) == 0x0002E0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_ElementIndex) == 0x0002E4, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_FaceIndex) == 0x0002E8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_TraceStart) == 0x0002F0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_TraceEnd) == 0x000308, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000320, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000321, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_GetOwningActor_ReturnValue) == 0x000328, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BooleanAND_ReturnValue) == 0x000330, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000338, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakVector_X) == 0x000350, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakVector_Y) == 0x000358, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakVector_Z) == 0x000360, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_SelectFloat_ReturnValue) == 0x000368, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000370, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000378, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_GetSocketLocation_ReturnValue) == 0x000380, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakVector_X_1) == 0x000398, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakVector_Y_1) == 0x0003A0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakVector_Z_1) == 0x0003A8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_MakeVector_ReturnValue) == 0x0003B0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_MakeVector_ReturnValue_1) == 0x0003C8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, Temp_object_Variable) == 0x0003E0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_LineTraceSingle_OutHit) == 0x0003F0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_LineTraceSingle_ReturnValue) == 0x0004D8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_FInterpTo_ReturnValue) == 0x0004E0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0004E8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0004E9, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_Time_1) == 0x0004EC, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_Distance_1) == 0x0004F0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_Location_1) == 0x0004F8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000510, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_Normal_1) == 0x000528, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000540, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_PhysMat_1) == 0x000558, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_HitActor_1) == 0x000560, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_HitComponent_1) == 0x000568, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_HitBoneName_1) == 0x000570, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_BoneName_1) == 0x000578, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_HitItem_1) == 0x000580, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_ElementIndex_1) == 0x000584, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_FaceIndex_1) == 0x000588, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_TraceStart_1) == 0x000590, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_BreakHitResult_TraceEnd_1) == 0x0005A8, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateLoadingRamp, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x0005C0, "Member 'BPFL_Vehicle_Flying_C_CalculateLoadingRamp::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.CalculateScannerAimOffsets
// 0x0288 (0x0288 - 0x0000)
struct BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets final
{
public:
	class ADuneVehicle*                           OwnerVehicle;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FOrnithopterEffectsDriverComponent     OrnithopterEffectsDriverComponent;                 // 0x0008(0x01C8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	double                                        Pitch;                                             // 0x01D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchMin;                                          // 0x01D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchMax;                                          // 0x01E0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw;                                               // 0x01E8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YawMin;                                            // 0x01F0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YawMax;                                            // 0x01F8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x0200(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0208(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        PitchValue;                                        // 0x0210(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YawValue;                                          // 0x0218(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPosseseablePawnInterface> CallFunc_GetDriverCharacter_self_CastInput;    // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         CallFunc_GetDriverCharacter_ReturnValue;           // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeUnclamped_ReturnValue;            // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeUnclamped_ReturnValue_1;          // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeUnclamped_Value_ImplicitCast;     // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeUnclamped_Value_ImplicitCast_1;   // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets) == 0x000008, "Wrong alignment on BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets");
static_assert(sizeof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets) == 0x000288, "Wrong size on BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, OwnerVehicle) == 0x000000, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::OwnerVehicle' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, OrnithopterEffectsDriverComponent) == 0x000008, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::OrnithopterEffectsDriverComponent' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, Pitch) == 0x0001D0, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, PitchMin) == 0x0001D8, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::PitchMin' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, PitchMax) == 0x0001E0, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::PitchMax' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, Yaw) == 0x0001E8, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, YawMin) == 0x0001F0, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::YawMin' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, YawMax) == 0x0001F8, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::YawMax' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, DeltaTime) == 0x000200, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::DeltaTime' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, __WorldContext) == 0x000208, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, PitchValue) == 0x000210, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::PitchValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, YawValue) == 0x000218, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::YawValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_GetDriverCharacter_self_CastInput) == 0x000220, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_GetDriverCharacter_self_CastInput' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_GetDriverCharacter_ReturnValue) == 0x000230, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_GetDriverCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_BreakRotator_Roll) == 0x000238, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_BreakRotator_Pitch) == 0x00023C, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_BreakRotator_Yaw) == 0x000240, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_IsValid_ReturnValue) == 0x000244, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_MapRangeUnclamped_ReturnValue) == 0x000248, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_MapRangeUnclamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_SelectFloat_ReturnValue) == 0x000250, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_FInterpTo_ReturnValue) == 0x000258, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_MapRangeUnclamped_ReturnValue_1) == 0x000260, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_MapRangeUnclamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_SelectFloat_ReturnValue_1) == 0x000268, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_FInterpTo_ReturnValue_1) == 0x000270, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_MapRangeUnclamped_Value_ImplicitCast) == 0x000278, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_MapRangeUnclamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets, CallFunc_MapRangeUnclamped_Value_ImplicitCast_1) == 0x000280, "Member 'BPFL_Vehicle_Flying_C_CalculateScannerAimOffsets::CallFunc_MapRangeUnclamped_Value_ImplicitCast_1' has a wrong offset!");

// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.CalculateWingOSC
// 0x00A0 (0x00A0 - 0x0000)
struct BPFL_Vehicle_Flying_C_CalculateWingOSC final
{
public:
	double                                        WingAngleFlying;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OscillationAmount;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OSCVariance;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipFlop;                                          // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        OscillationAngle;                                  // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WingOSCVariance;                                   // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OSCFlipFlop;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloat_ReturnValue;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Flying_C_CalculateWingOSC) == 0x000008, "Wrong alignment on BPFL_Vehicle_Flying_C_CalculateWingOSC");
static_assert(sizeof(BPFL_Vehicle_Flying_C_CalculateWingOSC) == 0x0000A0, "Wrong size on BPFL_Vehicle_Flying_C_CalculateWingOSC");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, WingAngleFlying) == 0x000000, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::WingAngleFlying' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, OscillationAmount) == 0x000008, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::OscillationAmount' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, DeltaTime) == 0x000010, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::DeltaTime' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, OSCVariance) == 0x000018, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::OSCVariance' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, FlipFlop) == 0x000020, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::FlipFlop' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, __WorldContext) == 0x000028, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, OscillationAngle) == 0x000030, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::OscillationAngle' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, WingOSCVariance) == 0x000038, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::WingOSCVariance' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, OSCFlipFlop) == 0x000040, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::OSCFlipFlop' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000048, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, Temp_real_Variable) == 0x000050, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, CallFunc_Lerp_ReturnValue) == 0x000058, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, CallFunc_Not_PreBool_ReturnValue) == 0x000060, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, Temp_real_Variable_1) == 0x000068, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, Temp_bool_Variable) == 0x000070, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, CallFunc_RandomFloat_ReturnValue) == 0x000078, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, K2Node_Select_Default) == 0x000080, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, CallFunc_FInterpTo_ReturnValue) == 0x000088, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000090, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingOSC, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'BPFL_Vehicle_Flying_C_CalculateWingOSC::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.CalculateWingVariables
// 0x0328 (0x0328 - 0x0000)
struct BPFL_Vehicle_Flying_C_CalculateWingVariables final
{
public:
	struct FOrnithopterEffectsDriverComponent     OrnithopterEffectsDriverComponent;                 // 0x0000(0x01C8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	float                                         ForwardAxis;                                       // 0x01C8(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StrafeAxis;                                        // 0x01CC(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpAxis;                                            // 0x01D0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Pitch;                                             // 0x01D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw;                                               // 0x01E0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOrnithopterFlightMode                        CurrentFlightMode;                                 // 0x01E8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOSC;                                             // 0x01E9(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OscillationAmmount;                                // 0x01F0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x01F8(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatSpringState                      ForwardSpringState;                                // 0x01FC(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FFloatSpringState                      StrafeSpringState;                                 // 0x0208(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FFloatSpringState                      UpSpringState;                                     // 0x0214(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0220(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ForwardValue;                                      // 0x0228(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StrafeValue;                                       // 0x0230(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpValue;                                           // 0x0234(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchValue;                                        // 0x0238(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YawValue;                                          // 0x0240(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostValue;                                        // 0x0248(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Out_Of_Power;                                      // 0x024C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OscillationAmountValue;                            // 0x0250(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_ReturnValue;            // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_ReturnValue_1;          // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_ReturnValue_2;          // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x02A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue_2;                  // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue_3;                  // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ForwardValue_ImplicitCast;   // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_FunctionResult_OscillationAmountValue_ImplicitCast; // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Target_ImplicitCast;            // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Target_ImplicitCast_1;          // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_Target_ImplicitCast;    // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_Target_ImplicitCast_1;  // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_Target_ImplicitCast_2;  // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast;         // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast_1;       // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast_2;       // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast_3;       // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Flying_C_CalculateWingVariables) == 0x000008, "Wrong alignment on BPFL_Vehicle_Flying_C_CalculateWingVariables");
static_assert(sizeof(BPFL_Vehicle_Flying_C_CalculateWingVariables) == 0x000328, "Wrong size on BPFL_Vehicle_Flying_C_CalculateWingVariables");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, OrnithopterEffectsDriverComponent) == 0x000000, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::OrnithopterEffectsDriverComponent' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, ForwardAxis) == 0x0001C8, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::ForwardAxis' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, StrafeAxis) == 0x0001CC, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::StrafeAxis' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, UpAxis) == 0x0001D0, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::UpAxis' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, Pitch) == 0x0001D8, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, Yaw) == 0x0001E0, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CurrentFlightMode) == 0x0001E8, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CurrentFlightMode' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, IsOSC) == 0x0001E9, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::IsOSC' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, OscillationAmmount) == 0x0001F0, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::OscillationAmmount' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, DeltaTime) == 0x0001F8, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::DeltaTime' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, ForwardSpringState) == 0x0001FC, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::ForwardSpringState' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, StrafeSpringState) == 0x000208, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::StrafeSpringState' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, UpSpringState) == 0x000214, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::UpSpringState' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, __WorldContext) == 0x000220, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, ForwardValue) == 0x000228, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::ForwardValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, StrafeValue) == 0x000230, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::StrafeValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, UpValue) == 0x000234, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::UpValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, PitchValue) == 0x000238, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::PitchValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, YawValue) == 0x000240, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::YawValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, BoostValue) == 0x000248, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::BoostValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, Out_Of_Power) == 0x00024C, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::Out_Of_Power' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, OscillationAmountValue) == 0x000250, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::OscillationAmountValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_Not_PreBool_ReturnValue) == 0x000254, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_BreakRotator_Roll) == 0x000258, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_BreakRotator_Pitch) == 0x00025C, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_BreakRotator_Yaw) == 0x000260, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_BreakVector_X) == 0x000268, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_BreakVector_Y) == 0x000270, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_BreakVector_Z) == 0x000278, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FloatSpringInterp_ReturnValue) == 0x000280, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FloatSpringInterp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FloatSpringInterp_ReturnValue_1) == 0x000284, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FloatSpringInterp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FloatSpringInterp_ReturnValue_2) == 0x000288, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FloatSpringInterp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FInterpTo_ReturnValue) == 0x000290, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FInterpTo_ReturnValue_1) == 0x000298, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_BooleanAND_ReturnValue) == 0x0002A0, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002A1, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0002A2, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_BooleanOR_ReturnValue) == 0x0002A3, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FInterpTo_ReturnValue_2) == 0x0002A8, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_BooleanOR_ReturnValue_1) == 0x0002B0, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FInterpTo_ReturnValue_3) == 0x0002B8, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_SelectFloat_ReturnValue) == 0x0002C0, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_SelectFloat_ReturnValue_1) == 0x0002C8, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, K2Node_FunctionResult_ForwardValue_ImplicitCast) == 0x0002D0, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::K2Node_FunctionResult_ForwardValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, K2Node_FunctionResult_OscillationAmountValue_ImplicitCast) == 0x0002D8, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::K2Node_FunctionResult_OscillationAmountValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_SelectFloat_B_ImplicitCast) == 0x0002E0, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FInterpTo_Target_ImplicitCast) == 0x0002E8, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FInterpTo_Target_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FInterpTo_Target_ImplicitCast_1) == 0x0002F0, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FInterpTo_Target_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FloatSpringInterp_Target_ImplicitCast) == 0x0002F8, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FloatSpringInterp_Target_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FloatSpringInterp_Target_ImplicitCast_1) == 0x0002FC, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FloatSpringInterp_Target_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FloatSpringInterp_Target_ImplicitCast_2) == 0x000300, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FloatSpringInterp_Target_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FInterpTo_DeltaTime_ImplicitCast) == 0x000308, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FInterpTo_DeltaTime_ImplicitCast_1) == 0x000310, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FInterpTo_DeltaTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FInterpTo_DeltaTime_ImplicitCast_2) == 0x000318, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FInterpTo_DeltaTime_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_CalculateWingVariables, CallFunc_FInterpTo_DeltaTime_ImplicitCast_3) == 0x000320, "Member 'BPFL_Vehicle_Flying_C_CalculateWingVariables::CallFunc_FInterpTo_DeltaTime_ImplicitCast_3' has a wrong offset!");

// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.ControlRigIKSolver
// 0x00F0 (0x00F0 - 0x0000)
struct BPFL_Vehicle_Flying_C_ControlRigIKSolver final
{
public:
	class UDuneVehicleAnimInstance*               Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   FootBone;                                          // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IKTraceDistance;                                   // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LegOffset;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LegTarget;                                         // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FootTarget;                                        // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpdateAsyncGroundTrace_Location;          // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpdateAsyncGroundTrace_Normal;            // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateAsyncGroundTrace_ReturnValue;       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Flying_C_ControlRigIKSolver) == 0x000008, "Wrong alignment on BPFL_Vehicle_Flying_C_ControlRigIKSolver");
static_assert(sizeof(BPFL_Vehicle_Flying_C_ControlRigIKSolver) == 0x0000F0, "Wrong size on BPFL_Vehicle_Flying_C_ControlRigIKSolver");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, Target) == 0x000000, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::Target' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, FootBone) == 0x000008, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::FootBone' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, IKTraceDistance) == 0x000010, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::IKTraceDistance' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, LegOffset) == 0x000018, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::LegOffset' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, __WorldContext) == 0x000020, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, LegTarget) == 0x000028, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::LegTarget' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, FootTarget) == 0x000040, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::FootTarget' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, CallFunc_UpdateAsyncGroundTrace_Location) == 0x000058, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::CallFunc_UpdateAsyncGroundTrace_Location' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, CallFunc_UpdateAsyncGroundTrace_Normal) == 0x000070, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::CallFunc_UpdateAsyncGroundTrace_Normal' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, CallFunc_UpdateAsyncGroundTrace_ReturnValue) == 0x000088, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::CallFunc_UpdateAsyncGroundTrace_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, CallFunc_MakeVector_ReturnValue) == 0x000090, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A8, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000C0, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_ControlRigIKSolver, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000D8, "Member 'BPFL_Vehicle_Flying_C_ControlRigIKSolver::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.GetQuicksandSinkDepth
// 0x0030 (0x0030 - 0x0000)
struct BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth final
{
public:
	class ADuneOrnithopter*                       Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSinkDepth;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicleQuicksandActorComponent*        QuicksandComp;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentSinkDepth_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_CurrentSinkDepth_ImplicitCast; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth) == 0x000008, "Wrong alignment on BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth");
static_assert(sizeof(BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth) == 0x000030, "Wrong size on BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth");
static_assert(offsetof(BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth, Target) == 0x000000, "Member 'BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth::Target' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth, __WorldContext) == 0x000008, "Member 'BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth, CurrentSinkDepth) == 0x000010, "Member 'BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth::CurrentSinkDepth' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth, QuicksandComp) == 0x000018, "Member 'BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth::QuicksandComp' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth, CallFunc_GetCurrentSinkDepth_ReturnValue) == 0x000020, "Member 'BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth::CallFunc_GetCurrentSinkDepth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth, K2Node_FunctionResult_CurrentSinkDepth_ImplicitCast) == 0x000028, "Member 'BPFL_Vehicle_Flying_C_GetQuicksandSinkDepth::K2Node_FunctionResult_CurrentSinkDepth_ImplicitCast' has a wrong offset!");

// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.SetWingCollision
// 0x0130 (0x0130 - 0x0000)
struct BPFL_Vehicle_Flying_C_SetWingCollision final
{
public:
	class ADuneVehicle*                           Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOSC;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EVehicleModuleType                            LocomotionType;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     NewLocalVar;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         MeshComponent;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EVehicleModuleType>                    K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm)
	EVehicleModuleType                            CallFunc_Array_Get_Item;                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVehicleModuleMesh                     CallFunc_GetVehicleModuleMesh_ReturnValue;         // 0x0058(0x00D0)(ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasModuleType_ReturnValue;                // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Flying_C_SetWingCollision) == 0x000008, "Wrong alignment on BPFL_Vehicle_Flying_C_SetWingCollision");
static_assert(sizeof(BPFL_Vehicle_Flying_C_SetWingCollision) == 0x000130, "Wrong size on BPFL_Vehicle_Flying_C_SetWingCollision");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, Target) == 0x000000, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::Target' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, IsOSC) == 0x000008, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::IsOSC' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, __WorldContext) == 0x000010, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, LocomotionType) == 0x000018, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::LocomotionType' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, NewLocalVar) == 0x000020, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::NewLocalVar' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, MeshComponent) == 0x000028, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::MeshComponent' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, K2Node_MakeArray_Array) == 0x000040, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, CallFunc_Array_Get_Item) == 0x000050, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, CallFunc_GetVehicleModuleMesh_ReturnValue) == 0x000058, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::CallFunc_GetVehicleModuleMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, CallFunc_Less_IntInt_ReturnValue) == 0x000128, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_SetWingCollision, CallFunc_HasModuleType_ReturnValue) == 0x000129, "Member 'BPFL_Vehicle_Flying_C_SetWingCollision::CallFunc_HasModuleType_ReturnValue' has a wrong offset!");

// Function BPFL_Vehicle_Flying.BPFL_Vehicle_Flying_C.UpdateFlightMode
// 0x0018 (0x0018 - 0x0000)
struct BPFL_Vehicle_Flying_C_UpdateFlightMode final
{
public:
	EOrnithopterFlightMode                        NewFlightMode;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOrnithopterFlightMode                        CurrentFlightMode;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EOrnithopterFlightMode                        FlightMode;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsOSC;                                            // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOSC;                                             // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Vehicle_Flying_C_UpdateFlightMode) == 0x000008, "Wrong alignment on BPFL_Vehicle_Flying_C_UpdateFlightMode");
static_assert(sizeof(BPFL_Vehicle_Flying_C_UpdateFlightMode) == 0x000018, "Wrong size on BPFL_Vehicle_Flying_C_UpdateFlightMode");
static_assert(offsetof(BPFL_Vehicle_Flying_C_UpdateFlightMode, NewFlightMode) == 0x000000, "Member 'BPFL_Vehicle_Flying_C_UpdateFlightMode::NewFlightMode' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_UpdateFlightMode, CurrentFlightMode) == 0x000001, "Member 'BPFL_Vehicle_Flying_C_UpdateFlightMode::CurrentFlightMode' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_UpdateFlightMode, __WorldContext) == 0x000008, "Member 'BPFL_Vehicle_Flying_C_UpdateFlightMode::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_UpdateFlightMode, FlightMode) == 0x000010, "Member 'BPFL_Vehicle_Flying_C_UpdateFlightMode::FlightMode' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_UpdateFlightMode, bIsOSC) == 0x000011, "Member 'BPFL_Vehicle_Flying_C_UpdateFlightMode::bIsOSC' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_UpdateFlightMode, IsOSC) == 0x000012, "Member 'BPFL_Vehicle_Flying_C_UpdateFlightMode::IsOSC' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_UpdateFlightMode, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000013, "Member 'BPFL_Vehicle_Flying_C_UpdateFlightMode::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_UpdateFlightMode, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000014, "Member 'BPFL_Vehicle_Flying_C_UpdateFlightMode::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Vehicle_Flying_C_UpdateFlightMode, K2Node_SwitchEnum_CmpSuccess) == 0x000015, "Member 'BPFL_Vehicle_Flying_C_UpdateFlightMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

