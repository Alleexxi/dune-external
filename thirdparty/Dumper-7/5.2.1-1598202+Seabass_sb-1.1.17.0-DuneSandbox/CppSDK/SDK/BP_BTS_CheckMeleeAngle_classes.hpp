#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BTS_CheckMeleeAngle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BTS_CheckMeleeAngle.BP_BTS_CheckMeleeAngle_C
// 0x0060 (0x0100 - 0x00A0)
class UBP_BTS_CheckMeleeAngle_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 Target;                                            // 0x00A8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 IsTargetInMeleeAngle;                              // 0x00D0(0x0028)(Edit, BlueprintVisible)
	double                                        MeleeMaxAngle;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BTS_CheckMeleeAngle(int32 EntryPoint);
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BTS_CheckMeleeAngle_C">();
	}
	static class UBP_BTS_CheckMeleeAngle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BTS_CheckMeleeAngle_C>();
	}
};
static_assert(alignof(UBP_BTS_CheckMeleeAngle_C) == 0x000008, "Wrong alignment on UBP_BTS_CheckMeleeAngle_C");
static_assert(sizeof(UBP_BTS_CheckMeleeAngle_C) == 0x000100, "Wrong size on UBP_BTS_CheckMeleeAngle_C");
static_assert(offsetof(UBP_BTS_CheckMeleeAngle_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_BTS_CheckMeleeAngle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BTS_CheckMeleeAngle_C, Target) == 0x0000A8, "Member 'UBP_BTS_CheckMeleeAngle_C::Target' has a wrong offset!");
static_assert(offsetof(UBP_BTS_CheckMeleeAngle_C, IsTargetInMeleeAngle) == 0x0000D0, "Member 'UBP_BTS_CheckMeleeAngle_C::IsTargetInMeleeAngle' has a wrong offset!");
static_assert(offsetof(UBP_BTS_CheckMeleeAngle_C, MeleeMaxAngle) == 0x0000F8, "Member 'UBP_BTS_CheckMeleeAngle_C::MeleeMaxAngle' has a wrong offset!");

}

