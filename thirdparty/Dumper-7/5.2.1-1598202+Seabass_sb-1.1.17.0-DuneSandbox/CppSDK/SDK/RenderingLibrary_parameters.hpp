#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RenderingLibrary

#include "Basic.hpp"

#include "Renderer_structs.hpp"
#include "RenderingLibrary_structs.hpp"


namespace SDK::Params
{

// Function RenderingLibrary.FuncomRenderingLibrary.BatchDrawMaterialToRenderTargetMinimal
// 0x00F8 (0x00F8 - 0x0000)
struct FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 TextureRenderTarget;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDrawToRenderTargetMinimalContext      RenderBatchContext;                                // 0x0018(0x00D8)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUseRenderPass;                                    // 0x00F0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimpleRenderPassExecutionStage               RenderPassExecutionStage;                          // 0x00F1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal) == 0x000008, "Wrong alignment on FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal");
static_assert(sizeof(FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal) == 0x0000F8, "Wrong size on FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal");
static_assert(offsetof(FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal, WorldContextObject) == 0x000000, "Member 'FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal, TextureRenderTarget) == 0x000008, "Member 'FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal::TextureRenderTarget' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal, Material) == 0x000010, "Member 'FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal::Material' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal, RenderBatchContext) == 0x000018, "Member 'FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal::RenderBatchContext' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal, bUseRenderPass) == 0x0000F0, "Member 'FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal::bUseRenderPass' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal, RenderPassExecutionStage) == 0x0000F1, "Member 'FuncomRenderingLibrary_BatchDrawMaterialToRenderTargetMinimal::RenderPassExecutionStage' has a wrong offset!");

// Function RenderingLibrary.FuncomRenderingLibrary.BeginDrawMaterialBatchMinimal
// 0x00E0 (0x00E0 - 0x0000)
struct FuncomRenderingLibrary_BeginDrawMaterialBatchMinimal final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDrawToRenderTargetMinimalContext      RenderBatchContext;                                // 0x0008(0x00D8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FuncomRenderingLibrary_BeginDrawMaterialBatchMinimal) == 0x000008, "Wrong alignment on FuncomRenderingLibrary_BeginDrawMaterialBatchMinimal");
static_assert(sizeof(FuncomRenderingLibrary_BeginDrawMaterialBatchMinimal) == 0x0000E0, "Wrong size on FuncomRenderingLibrary_BeginDrawMaterialBatchMinimal");
static_assert(offsetof(FuncomRenderingLibrary_BeginDrawMaterialBatchMinimal, WorldContextObject) == 0x000000, "Member 'FuncomRenderingLibrary_BeginDrawMaterialBatchMinimal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_BeginDrawMaterialBatchMinimal, RenderBatchContext) == 0x000008, "Member 'FuncomRenderingLibrary_BeginDrawMaterialBatchMinimal::RenderBatchContext' has a wrong offset!");

// Function RenderingLibrary.FuncomRenderingLibrary.DrawMaterialToRenderTargetMinimal
// 0x0020 (0x0020 - 0x0000)
struct FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 TextureRenderTarget;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRenderPass;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimpleRenderPassExecutionStage               RenderPassExecutionStage;                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal) == 0x000008, "Wrong alignment on FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal");
static_assert(sizeof(FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal) == 0x000020, "Wrong size on FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal");
static_assert(offsetof(FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal, WorldContextObject) == 0x000000, "Member 'FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal, TextureRenderTarget) == 0x000008, "Member 'FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal::TextureRenderTarget' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal, Material) == 0x000010, "Member 'FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal::Material' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal, bUseRenderPass) == 0x000018, "Member 'FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal::bUseRenderPass' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal, RenderPassExecutionStage) == 0x000019, "Member 'FuncomRenderingLibrary_DrawMaterialToRenderTargetMinimal::RenderPassExecutionStage' has a wrong offset!");

// Function RenderingLibrary.FuncomRenderingLibrary.EndDrawMaterialBatchMinimal
// 0x00E0 (0x00E0 - 0x0000)
struct FuncomRenderingLibrary_EndDrawMaterialBatchMinimal final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDrawToRenderTargetMinimalContext      RenderBatchContext;                                // 0x0008(0x00D8)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FuncomRenderingLibrary_EndDrawMaterialBatchMinimal) == 0x000008, "Wrong alignment on FuncomRenderingLibrary_EndDrawMaterialBatchMinimal");
static_assert(sizeof(FuncomRenderingLibrary_EndDrawMaterialBatchMinimal) == 0x0000E0, "Wrong size on FuncomRenderingLibrary_EndDrawMaterialBatchMinimal");
static_assert(offsetof(FuncomRenderingLibrary_EndDrawMaterialBatchMinimal, WorldContextObject) == 0x000000, "Member 'FuncomRenderingLibrary_EndDrawMaterialBatchMinimal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FuncomRenderingLibrary_EndDrawMaterialBatchMinimal, RenderBatchContext) == 0x000008, "Member 'FuncomRenderingLibrary_EndDrawMaterialBatchMinimal::RenderBatchContext' has a wrong offset!");

}

