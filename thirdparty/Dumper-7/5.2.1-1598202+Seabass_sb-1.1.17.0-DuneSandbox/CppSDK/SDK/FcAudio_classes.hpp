#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FcAudio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FcAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Niagara_classes.hpp"
#include "AkAudio_classes.hpp"
#include "MovieScene_classes.hpp"


namespace SDK
{

// Class FcAudio.FcAudioVolumeInterface
// 0x0000 (0x0000 - 0x0000)
class IFcAudioVolumeInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioVolumeInterface">();
	}
	static class IFcAudioVolumeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFcAudioVolumeInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IFcAudioVolumeInterface) == 0x000001, "Wrong alignment on IFcAudioVolumeInterface");
static_assert(sizeof(IFcAudioVolumeInterface) == 0x000001, "Wrong size on IFcAudioVolumeInterface");

// Class FcAudio.FcAudioAmbientRule
// 0x0000 (0x0038 - 0x0038)
class UFcAudioAmbientRule : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioAmbientRule">();
	}
	static class UFcAudioAmbientRule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioAmbientRule>();
	}
};
static_assert(alignof(UFcAudioAmbientRule) == 0x000008, "Wrong alignment on UFcAudioAmbientRule");
static_assert(sizeof(UFcAudioAmbientRule) == 0x000038, "Wrong size on UFcAudioAmbientRule");

// Class FcAudio.FcAudioAmbientSubsystem
// 0x0218 (0x0250 - 0x0038)
class UFcAudioAmbientSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x218];                                     // 0x0038(0x0218)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioAmbientSubsystem">();
	}
	static class UFcAudioAmbientSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioAmbientSubsystem>();
	}
};
static_assert(alignof(UFcAudioAmbientSubsystem) == 0x000008, "Wrong alignment on UFcAudioAmbientSubsystem");
static_assert(sizeof(UFcAudioAmbientSubsystem) == 0x000250, "Wrong size on UFcAudioAmbientSubsystem");

// Class FcAudio.FcAudioCheatManager
// 0x0000 (0x0030 - 0x0030)
class UFcAudioCheatManager final : public UCheatManagerExtension
{
public:
	void FcAudio();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioCheatManager">();
	}
	static class UFcAudioCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioCheatManager>();
	}
};
static_assert(alignof(UFcAudioCheatManager) == 0x000008, "Wrong alignment on UFcAudioCheatManager");
static_assert(sizeof(UFcAudioCheatManager) == 0x000030, "Wrong size on UFcAudioCheatManager");

// Class FcAudio.FcAudioEvent
// 0x0038 (0x0068 - 0x0030)
class UFcAudioEvent final : public UObject
{
public:
	class UAkAudioEvent*                          m_AudioEvent;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEAudioEventConcurrencyConfig          ConcurrencyRule;                                   // 0x0038(0x0006)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_Description;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_GroupTag;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_PriorityLevel;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisallowCulling;                                   // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioEvent">();
	}
	static class UFcAudioEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioEvent>();
	}
};
static_assert(alignof(UFcAudioEvent) == 0x000008, "Wrong alignment on UFcAudioEvent");
static_assert(sizeof(UFcAudioEvent) == 0x000068, "Wrong size on UFcAudioEvent");
static_assert(offsetof(UFcAudioEvent, m_AudioEvent) == 0x000030, "Member 'UFcAudioEvent::m_AudioEvent' has a wrong offset!");
static_assert(offsetof(UFcAudioEvent, ConcurrencyRule) == 0x000038, "Member 'UFcAudioEvent::ConcurrencyRule' has a wrong offset!");
static_assert(offsetof(UFcAudioEvent, m_Description) == 0x000040, "Member 'UFcAudioEvent::m_Description' has a wrong offset!");
static_assert(offsetof(UFcAudioEvent, m_GroupTag) == 0x000050, "Member 'UFcAudioEvent::m_GroupTag' has a wrong offset!");
static_assert(offsetof(UFcAudioEvent, m_PriorityLevel) == 0x000060, "Member 'UFcAudioEvent::m_PriorityLevel' has a wrong offset!");
static_assert(offsetof(UFcAudioEvent, DisallowCulling) == 0x000064, "Member 'UFcAudioEvent::DisallowCulling' has a wrong offset!");

// Class FcAudio.FcAudioObjectSettingsAsset
// 0x0018 (0x0050 - 0x0038)
class UFcAudioObjectSettingsAsset final : public UDataAsset
{
public:
	struct FFcAudioObjectSettings                 Settings;                                          // 0x0038(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioObjectSettingsAsset">();
	}
	static class UFcAudioObjectSettingsAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioObjectSettingsAsset>();
	}
};
static_assert(alignof(UFcAudioObjectSettingsAsset) == 0x000008, "Wrong alignment on UFcAudioObjectSettingsAsset");
static_assert(sizeof(UFcAudioObjectSettingsAsset) == 0x000050, "Wrong size on UFcAudioObjectSettingsAsset");
static_assert(offsetof(UFcAudioObjectSettingsAsset, Settings) == 0x000038, "Member 'UFcAudioObjectSettingsAsset::Settings' has a wrong offset!");

// Class FcAudio.FcAudioReverbGroup
// 0x0030 (0x0060 - 0x0030)
class UFcAudioReverbGroup final : public UObject
{
public:
	bool                                          m_bEnabled;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveMap;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAkAcousticTexture*>             m_AffectedAcousticTextures;                        // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFcAudioReverbDistanceBus>      m_SortedPerDistanceBus;                            // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioReverbGroup">();
	}
	static class UFcAudioReverbGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioReverbGroup>();
	}
};
static_assert(alignof(UFcAudioReverbGroup) == 0x000008, "Wrong alignment on UFcAudioReverbGroup");
static_assert(sizeof(UFcAudioReverbGroup) == 0x000060, "Wrong size on UFcAudioReverbGroup");
static_assert(offsetof(UFcAudioReverbGroup, m_bEnabled) == 0x000030, "Member 'UFcAudioReverbGroup::m_bEnabled' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbGroup, CurveMap) == 0x000038, "Member 'UFcAudioReverbGroup::CurveMap' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbGroup, m_AffectedAcousticTextures) == 0x000040, "Member 'UFcAudioReverbGroup::m_AffectedAcousticTextures' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbGroup, m_SortedPerDistanceBus) == 0x000050, "Member 'UFcAudioReverbGroup::m_SortedPerDistanceBus' has a wrong offset!");

// Class FcAudio.FcAudioShelteredSettings
// 0x0010 (0x0040 - 0x0030)
class UFcAudioShelteredSettings : public UObject
{
public:
	bool                                          m_bEnable;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_NumRaysUp;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NumRaysDown;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxRayDistance;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioShelteredSettings">();
	}
	static class UFcAudioShelteredSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioShelteredSettings>();
	}
};
static_assert(alignof(UFcAudioShelteredSettings) == 0x000008, "Wrong alignment on UFcAudioShelteredSettings");
static_assert(sizeof(UFcAudioShelteredSettings) == 0x000040, "Wrong size on UFcAudioShelteredSettings");
static_assert(offsetof(UFcAudioShelteredSettings, m_bEnable) == 0x000030, "Member 'UFcAudioShelteredSettings::m_bEnable' has a wrong offset!");
static_assert(offsetof(UFcAudioShelteredSettings, m_NumRaysUp) == 0x000034, "Member 'UFcAudioShelteredSettings::m_NumRaysUp' has a wrong offset!");
static_assert(offsetof(UFcAudioShelteredSettings, m_NumRaysDown) == 0x000038, "Member 'UFcAudioShelteredSettings::m_NumRaysDown' has a wrong offset!");
static_assert(offsetof(UFcAudioShelteredSettings, m_MaxRayDistance) == 0x00003C, "Member 'UFcAudioShelteredSettings::m_MaxRayDistance' has a wrong offset!");

// Class FcAudio.FcAudioComponent
// 0x0020 (0x0380 - 0x0360)
#pragma pack(push, 0x1)
class alignas(0x10) UFcAudioComponent : public USceneComponent
{
public:
	uint8                                         Pad_360[0x4];                                      // 0x0360(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          m_bStopAllSoundsOnDestroy;                         // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioObjectSettingsAsset*            m_AudioSettings;                                   // 0x0368(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PostAudioEvent(const class UFcAudioEvent* AudioEvent);
	void PostAutoCulledAudioEvent(const class UFcAudioEvent* AudioEvent);
	void StopAllAudioEvents();
	void StopAudioEvent(const class UFcAudioEvent* AudioEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioComponent">();
	}
	static class UFcAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UFcAudioComponent) == 0x000010, "Wrong alignment on UFcAudioComponent");
static_assert(sizeof(UFcAudioComponent) == 0x000380, "Wrong size on UFcAudioComponent");
static_assert(offsetof(UFcAudioComponent, m_bStopAllSoundsOnDestroy) == 0x000364, "Member 'UFcAudioComponent::m_bStopAllSoundsOnDestroy' has a wrong offset!");
static_assert(offsetof(UFcAudioComponent, m_AudioSettings) == 0x000368, "Member 'UFcAudioComponent::m_AudioSettings' has a wrong offset!");

// Class FcAudio.FcAudioSplineComponent
// 0x0020 (0x0750 - 0x0730)
class UFcAudioSplineComponent final : public USplineComponent
{
public:
	float                                         m_VolumeHeight;                                    // 0x0730(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        m_NumSubdivisions;                                 // 0x0734(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_736[0x2];                                      // 0x0736(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             CollisionBodySetup;                                // 0x0738(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_740[0x10];                                     // 0x0740(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioSplineComponent">();
	}
	static class UFcAudioSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioSplineComponent>();
	}
};
static_assert(alignof(UFcAudioSplineComponent) == 0x000010, "Wrong alignment on UFcAudioSplineComponent");
static_assert(sizeof(UFcAudioSplineComponent) == 0x000750, "Wrong size on UFcAudioSplineComponent");
static_assert(offsetof(UFcAudioSplineComponent, m_VolumeHeight) == 0x000730, "Member 'UFcAudioSplineComponent::m_VolumeHeight' has a wrong offset!");
static_assert(offsetof(UFcAudioSplineComponent, m_NumSubdivisions) == 0x000734, "Member 'UFcAudioSplineComponent::m_NumSubdivisions' has a wrong offset!");
static_assert(offsetof(UFcAudioSplineComponent, CollisionBodySetup) == 0x000738, "Member 'UFcAudioSplineComponent::CollisionBodySetup' has a wrong offset!");

// Class FcAudio.FcSpatialAudioEditorPreview
// 0x0010 (0x0640 - 0x0630)
class UFcSpatialAudioEditorPreview final : public UPrimitiveComponent
{
public:
	class UAkSurfaceReflectorSetComponent*        m_SurfaceReflectorSetComponent;                    // 0x0630(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_638[0x8];                                      // 0x0638(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcSpatialAudioEditorPreview">();
	}
	static class UFcSpatialAudioEditorPreview* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcSpatialAudioEditorPreview>();
	}
};
static_assert(alignof(UFcSpatialAudioEditorPreview) == 0x000010, "Wrong alignment on UFcSpatialAudioEditorPreview");
static_assert(sizeof(UFcSpatialAudioEditorPreview) == 0x000640, "Wrong size on UFcSpatialAudioEditorPreview");
static_assert(offsetof(UFcSpatialAudioEditorPreview, m_SurfaceReflectorSetComponent) == 0x000630, "Member 'UFcSpatialAudioEditorPreview::m_SurfaceReflectorSetComponent' has a wrong offset!");

// Class FcAudio.FcAudioActorBase
// 0x0008 (0x0358 - 0x0350)
class AFcAudioActorBase : public AActor
{
public:
	class UFcAudioComponent*                      m_AudioComponent;                                  // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UFcAudioComponent* GetAudioComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioActorBase">();
	}
	static class AFcAudioActorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFcAudioActorBase>();
	}
};
static_assert(alignof(AFcAudioActorBase) == 0x000008, "Wrong alignment on AFcAudioActorBase");
static_assert(sizeof(AFcAudioActorBase) == 0x000358, "Wrong size on AFcAudioActorBase");
static_assert(offsetof(AFcAudioActorBase, m_AudioComponent) == 0x000350, "Member 'AFcAudioActorBase::m_AudioComponent' has a wrong offset!");

// Class FcAudio.FcAudioSimpleEmitter
// 0x0008 (0x0360 - 0x0358)
class AFcAudioSimpleEmitter : public AFcAudioActorBase
{
public:
	class UFcAudioEvent*                          m_AudioEvent;                                      // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PostAudioEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioSimpleEmitter">();
	}
	static class AFcAudioSimpleEmitter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFcAudioSimpleEmitter>();
	}
};
static_assert(alignof(AFcAudioSimpleEmitter) == 0x000008, "Wrong alignment on AFcAudioSimpleEmitter");
static_assert(sizeof(AFcAudioSimpleEmitter) == 0x000360, "Wrong size on AFcAudioSimpleEmitter");
static_assert(offsetof(AFcAudioSimpleEmitter, m_AudioEvent) == 0x000358, "Member 'AFcAudioSimpleEmitter::m_AudioEvent' has a wrong offset!");

// Class FcAudio.FcAudioSplineTrigger
// 0x0128 (0x0478 - 0x0350)
class AFcAudioSplineTrigger : public AActor
{
public:
	uint8                                         Pad_350[0x44];                                     // 0x0350(0x0044)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          m_bTriggerOnCamera;                                // 0x0394(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bTriggerOnceEnter;                               // 0x0395(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bTriggerOnceExit;                                // 0x0396(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_397[0x1];                                      // 0x0397(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_VolumeHeight;                                    // 0x0398(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_NumSubdivisions;                                 // 0x039C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioSplineComponent*                m_SplineComponent;                                 // 0x03A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                            m_StaticMesh;                                      // 0x03A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFcAudioEvent*                          m_OnEnterAudioEvent;                               // 0x03B0(0x0008)(ZeroConstructor, Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFcAudioEvent*                          m_OnExitAudioEvent;                                // 0x03B8(0x0008)(ZeroConstructor, Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFcAudioSplineAudioEvents              m_NormalAudioEvents;                               // 0x03C0(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          m_bUseSubsequentAudioEvents;                       // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_SubsequentAudioEventsCooldown;                   // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFcAudioSplineAudioEvents              m_SubsequentAudioEvents;                           // 0x03E8(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         m_EnvironmentPriority;                             // 0x0408(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEnvironment*                    m_EnvironmentAsset;                                // 0x0410(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AFcAudioTriggeredEmitter*>       m_TriggeredEmittersToEnable;                       // 0x0418(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	class UAkAuxBus*                              m_ReverbAuxBus;                                    // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         m_ReverbAuxBusSendLevel;                           // 0x0430(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          m_bDisableProceduralReverb;                        // 0x0434(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioRoomType*                       m_RoomType;                                        // 0x0438(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFcAudioEvent*                          m_OnSubsequentEnterAudioEvent;                     // 0x0440(0x0008)(ZeroConstructor, Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFcAudioEvent*                          m_OnSubsequentExitAudioEvent;                      // 0x0448(0x0008)(ZeroConstructor, Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_450[0x4];                                      // 0x0450(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_EmittersCooldownTimer;                           // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AFcAudioSimpleEmitter*>          m_EmittersToTriggerOnEnter;                        // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AFcAudioSimpleEmitter*>          m_EmittersToTriggerOnLeave;                        // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioSplineTrigger">();
	}
	static class AFcAudioSplineTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFcAudioSplineTrigger>();
	}
};
static_assert(alignof(AFcAudioSplineTrigger) == 0x000008, "Wrong alignment on AFcAudioSplineTrigger");
static_assert(sizeof(AFcAudioSplineTrigger) == 0x000478, "Wrong size on AFcAudioSplineTrigger");
static_assert(offsetof(AFcAudioSplineTrigger, m_bTriggerOnCamera) == 0x000394, "Member 'AFcAudioSplineTrigger::m_bTriggerOnCamera' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_bTriggerOnceEnter) == 0x000395, "Member 'AFcAudioSplineTrigger::m_bTriggerOnceEnter' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_bTriggerOnceExit) == 0x000396, "Member 'AFcAudioSplineTrigger::m_bTriggerOnceExit' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_VolumeHeight) == 0x000398, "Member 'AFcAudioSplineTrigger::m_VolumeHeight' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_NumSubdivisions) == 0x00039C, "Member 'AFcAudioSplineTrigger::m_NumSubdivisions' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_SplineComponent) == 0x0003A0, "Member 'AFcAudioSplineTrigger::m_SplineComponent' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_StaticMesh) == 0x0003A8, "Member 'AFcAudioSplineTrigger::m_StaticMesh' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_OnEnterAudioEvent) == 0x0003B0, "Member 'AFcAudioSplineTrigger::m_OnEnterAudioEvent' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_OnExitAudioEvent) == 0x0003B8, "Member 'AFcAudioSplineTrigger::m_OnExitAudioEvent' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_NormalAudioEvents) == 0x0003C0, "Member 'AFcAudioSplineTrigger::m_NormalAudioEvents' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_bUseSubsequentAudioEvents) == 0x0003E0, "Member 'AFcAudioSplineTrigger::m_bUseSubsequentAudioEvents' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_SubsequentAudioEventsCooldown) == 0x0003E4, "Member 'AFcAudioSplineTrigger::m_SubsequentAudioEventsCooldown' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_SubsequentAudioEvents) == 0x0003E8, "Member 'AFcAudioSplineTrigger::m_SubsequentAudioEvents' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_EnvironmentPriority) == 0x000408, "Member 'AFcAudioSplineTrigger::m_EnvironmentPriority' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_EnvironmentAsset) == 0x000410, "Member 'AFcAudioSplineTrigger::m_EnvironmentAsset' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_TriggeredEmittersToEnable) == 0x000418, "Member 'AFcAudioSplineTrigger::m_TriggeredEmittersToEnable' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_ReverbAuxBus) == 0x000428, "Member 'AFcAudioSplineTrigger::m_ReverbAuxBus' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_ReverbAuxBusSendLevel) == 0x000430, "Member 'AFcAudioSplineTrigger::m_ReverbAuxBusSendLevel' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_bDisableProceduralReverb) == 0x000434, "Member 'AFcAudioSplineTrigger::m_bDisableProceduralReverb' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_RoomType) == 0x000438, "Member 'AFcAudioSplineTrigger::m_RoomType' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_OnSubsequentEnterAudioEvent) == 0x000440, "Member 'AFcAudioSplineTrigger::m_OnSubsequentEnterAudioEvent' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_OnSubsequentExitAudioEvent) == 0x000448, "Member 'AFcAudioSplineTrigger::m_OnSubsequentExitAudioEvent' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_EmittersCooldownTimer) == 0x000454, "Member 'AFcAudioSplineTrigger::m_EmittersCooldownTimer' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_EmittersToTriggerOnEnter) == 0x000458, "Member 'AFcAudioSplineTrigger::m_EmittersToTriggerOnEnter' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineTrigger, m_EmittersToTriggerOnLeave) == 0x000468, "Member 'AFcAudioSplineTrigger::m_EmittersToTriggerOnLeave' has a wrong offset!");

// Class FcAudio.FcAudioSplineEmitter
// 0x0010 (0x0488 - 0x0478)
class AFcAudioSplineEmitter : public AFcAudioSplineTrigger
{
public:
	bool                                          m_bFollowPlayerElevation;                          // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_MaxRangeFadeDistance;                            // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_EmitterAudioEvent;                               // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioSplineEmitter">();
	}
	static class AFcAudioSplineEmitter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFcAudioSplineEmitter>();
	}
};
static_assert(alignof(AFcAudioSplineEmitter) == 0x000008, "Wrong alignment on AFcAudioSplineEmitter");
static_assert(sizeof(AFcAudioSplineEmitter) == 0x000488, "Wrong size on AFcAudioSplineEmitter");
static_assert(offsetof(AFcAudioSplineEmitter, m_bFollowPlayerElevation) == 0x000478, "Member 'AFcAudioSplineEmitter::m_bFollowPlayerElevation' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineEmitter, m_MaxRangeFadeDistance) == 0x00047C, "Member 'AFcAudioSplineEmitter::m_MaxRangeFadeDistance' has a wrong offset!");
static_assert(offsetof(AFcAudioSplineEmitter, m_EmitterAudioEvent) == 0x000480, "Member 'AFcAudioSplineEmitter::m_EmitterAudioEvent' has a wrong offset!");

// Class FcAudio.FcAudioTriggeredEmitter
// 0x0018 (0x0370 - 0x0358)
class AFcAudioTriggeredEmitter final : public AFcAudioActorBase
{
public:
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          m_AudioEventStart;                                 // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFcAudioEvent*                          m_AudioEventStop;                                  // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PostAudioEventEnd();
	void PostAudioEventStart();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioTriggeredEmitter">();
	}
	static class AFcAudioTriggeredEmitter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFcAudioTriggeredEmitter>();
	}
};
static_assert(alignof(AFcAudioTriggeredEmitter) == 0x000008, "Wrong alignment on AFcAudioTriggeredEmitter");
static_assert(sizeof(AFcAudioTriggeredEmitter) == 0x000370, "Wrong size on AFcAudioTriggeredEmitter");
static_assert(offsetof(AFcAudioTriggeredEmitter, m_AudioEventStart) == 0x000360, "Member 'AFcAudioTriggeredEmitter::m_AudioEventStart' has a wrong offset!");
static_assert(offsetof(AFcAudioTriggeredEmitter, m_AudioEventStop) == 0x000368, "Member 'AFcAudioTriggeredEmitter::m_AudioEventStop' has a wrong offset!");

// Class FcAudio.FcAudioTriggerVolume
// 0x0098 (0x0420 - 0x0388)
class AFcAudioTriggerVolume final : public AVolume
{
public:
	uint8                                         Pad_388[0x48];                                     // 0x0388(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          m_AudioEventOnEnter;                               // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFcAudioEvent*                          m_AudioEventOnLeave;                               // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         m_EnvironmentPriority;                             // 0x03E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEnvironment*                    m_EnvironmentAsset;                                // 0x03E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AFcAudioTriggeredEmitter*>       m_TriggeredEmittersToEnable;                       // 0x03F0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	class UAkAuxBus*                              m_ReverbAuxBus;                                    // 0x0400(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         m_ReverbAuxBusSendLevel;                           // 0x0408(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          m_bDisableProceduralReverb;                        // 0x040C(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40D[0x3];                                      // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioRoomType*                       m_RoomType;                                        // 0x0410(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_418[0x8];                                      // 0x0418(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnVolumeEntered(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnVolumeExited(class AActor* OverlappedActor, class AActor* OtherActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioTriggerVolume">();
	}
	static class AFcAudioTriggerVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFcAudioTriggerVolume>();
	}
};
static_assert(alignof(AFcAudioTriggerVolume) == 0x000008, "Wrong alignment on AFcAudioTriggerVolume");
static_assert(sizeof(AFcAudioTriggerVolume) == 0x000420, "Wrong size on AFcAudioTriggerVolume");
static_assert(offsetof(AFcAudioTriggerVolume, m_AudioEventOnEnter) == 0x0003D0, "Member 'AFcAudioTriggerVolume::m_AudioEventOnEnter' has a wrong offset!");
static_assert(offsetof(AFcAudioTriggerVolume, m_AudioEventOnLeave) == 0x0003D8, "Member 'AFcAudioTriggerVolume::m_AudioEventOnLeave' has a wrong offset!");
static_assert(offsetof(AFcAudioTriggerVolume, m_EnvironmentPriority) == 0x0003E0, "Member 'AFcAudioTriggerVolume::m_EnvironmentPriority' has a wrong offset!");
static_assert(offsetof(AFcAudioTriggerVolume, m_EnvironmentAsset) == 0x0003E8, "Member 'AFcAudioTriggerVolume::m_EnvironmentAsset' has a wrong offset!");
static_assert(offsetof(AFcAudioTriggerVolume, m_TriggeredEmittersToEnable) == 0x0003F0, "Member 'AFcAudioTriggerVolume::m_TriggeredEmittersToEnable' has a wrong offset!");
static_assert(offsetof(AFcAudioTriggerVolume, m_ReverbAuxBus) == 0x000400, "Member 'AFcAudioTriggerVolume::m_ReverbAuxBus' has a wrong offset!");
static_assert(offsetof(AFcAudioTriggerVolume, m_ReverbAuxBusSendLevel) == 0x000408, "Member 'AFcAudioTriggerVolume::m_ReverbAuxBusSendLevel' has a wrong offset!");
static_assert(offsetof(AFcAudioTriggerVolume, m_bDisableProceduralReverb) == 0x00040C, "Member 'AFcAudioTriggerVolume::m_bDisableProceduralReverb' has a wrong offset!");
static_assert(offsetof(AFcAudioTriggerVolume, m_RoomType) == 0x000410, "Member 'AFcAudioTriggerVolume::m_RoomType' has a wrong offset!");

// Class FcAudio.FcSpatialAudioVolume
// 0x00B0 (0x0450 - 0x03A0)
class AFcSpatialAudioVolume : public AAkSpatialAudioVolume
{
public:
	uint8                                         Pad_3A0[0x48];                                     // 0x03A0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          m_AudioEventOnPlayerEnter;                         // 0x03E8(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_AudioEventOnPlayerLeave;                         // 0x03F0(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFcAudioEvent*>                  m_AudioEventsOnPlayerEnter;                        // 0x03F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFcAudioEvent*>                  m_AudioEventsOnPlayerLeave;                        // 0x0408(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_bUseCameraForTrigger;                            // 0x0418(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDisableRoomForReverb;                           // 0x0419(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41A[0x6];                                      // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFcAudioTriggeredEmitter*>       m_TriggeredEmittersToEnable;                       // 0x0420(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	class UFcAudioRoomType*                       m_RoomType;                                        // 0x0430(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bDisableProceduralReverb;                        // 0x0438(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkRoomComponent*                       m_Room;                                            // 0x0440(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFcAudioEnvironment*                    m_EnvironmentAsset;                                // 0x0448(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcSpatialAudioVolume">();
	}
	static class AFcSpatialAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFcSpatialAudioVolume>();
	}
};
static_assert(alignof(AFcSpatialAudioVolume) == 0x000008, "Wrong alignment on AFcSpatialAudioVolume");
static_assert(sizeof(AFcSpatialAudioVolume) == 0x000450, "Wrong size on AFcSpatialAudioVolume");
static_assert(offsetof(AFcSpatialAudioVolume, m_AudioEventOnPlayerEnter) == 0x0003E8, "Member 'AFcSpatialAudioVolume::m_AudioEventOnPlayerEnter' has a wrong offset!");
static_assert(offsetof(AFcSpatialAudioVolume, m_AudioEventOnPlayerLeave) == 0x0003F0, "Member 'AFcSpatialAudioVolume::m_AudioEventOnPlayerLeave' has a wrong offset!");
static_assert(offsetof(AFcSpatialAudioVolume, m_AudioEventsOnPlayerEnter) == 0x0003F8, "Member 'AFcSpatialAudioVolume::m_AudioEventsOnPlayerEnter' has a wrong offset!");
static_assert(offsetof(AFcSpatialAudioVolume, m_AudioEventsOnPlayerLeave) == 0x000408, "Member 'AFcSpatialAudioVolume::m_AudioEventsOnPlayerLeave' has a wrong offset!");
static_assert(offsetof(AFcSpatialAudioVolume, m_bUseCameraForTrigger) == 0x000418, "Member 'AFcSpatialAudioVolume::m_bUseCameraForTrigger' has a wrong offset!");
static_assert(offsetof(AFcSpatialAudioVolume, m_bDisableRoomForReverb) == 0x000419, "Member 'AFcSpatialAudioVolume::m_bDisableRoomForReverb' has a wrong offset!");
static_assert(offsetof(AFcSpatialAudioVolume, m_TriggeredEmittersToEnable) == 0x000420, "Member 'AFcSpatialAudioVolume::m_TriggeredEmittersToEnable' has a wrong offset!");
static_assert(offsetof(AFcSpatialAudioVolume, m_RoomType) == 0x000430, "Member 'AFcSpatialAudioVolume::m_RoomType' has a wrong offset!");
static_assert(offsetof(AFcSpatialAudioVolume, m_bDisableProceduralReverb) == 0x000438, "Member 'AFcSpatialAudioVolume::m_bDisableProceduralReverb' has a wrong offset!");
static_assert(offsetof(AFcSpatialAudioVolume, m_Room) == 0x000440, "Member 'AFcSpatialAudioVolume::m_Room' has a wrong offset!");
static_assert(offsetof(AFcSpatialAudioVolume, m_EnvironmentAsset) == 0x000448, "Member 'AFcSpatialAudioVolume::m_EnvironmentAsset' has a wrong offset!");

// Class FcAudio.FcAudioAmbientRuleMatchMesh
// 0x0038 (0x0070 - 0x0038)
class UFcAudioAmbientRuleMatchMesh final : public UFcAudioAmbientRule
{
public:
	TArray<struct FFcAudioAmbientRuleMatchMeshProperties> m_StaticMeshMatches;                       // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         m_CheckRadius;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_MaxInstancesWithinRadius;                        // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bOnlyVisibleMeshes;                              // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFcAudioEvent*>                  m_AudioEvents;                                     // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UFcAudioObjectSettingsAsset*            m_AudioObjectSettingsAsset;                        // 0x0068(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioAmbientRuleMatchMesh">();
	}
	static class UFcAudioAmbientRuleMatchMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioAmbientRuleMatchMesh>();
	}
};
static_assert(alignof(UFcAudioAmbientRuleMatchMesh) == 0x000008, "Wrong alignment on UFcAudioAmbientRuleMatchMesh");
static_assert(sizeof(UFcAudioAmbientRuleMatchMesh) == 0x000070, "Wrong size on UFcAudioAmbientRuleMatchMesh");
static_assert(offsetof(UFcAudioAmbientRuleMatchMesh, m_StaticMeshMatches) == 0x000038, "Member 'UFcAudioAmbientRuleMatchMesh::m_StaticMeshMatches' has a wrong offset!");
static_assert(offsetof(UFcAudioAmbientRuleMatchMesh, m_CheckRadius) == 0x000048, "Member 'UFcAudioAmbientRuleMatchMesh::m_CheckRadius' has a wrong offset!");
static_assert(offsetof(UFcAudioAmbientRuleMatchMesh, m_MaxInstancesWithinRadius) == 0x00004C, "Member 'UFcAudioAmbientRuleMatchMesh::m_MaxInstancesWithinRadius' has a wrong offset!");
static_assert(offsetof(UFcAudioAmbientRuleMatchMesh, m_bOnlyVisibleMeshes) == 0x000050, "Member 'UFcAudioAmbientRuleMatchMesh::m_bOnlyVisibleMeshes' has a wrong offset!");
static_assert(offsetof(UFcAudioAmbientRuleMatchMesh, m_AudioEvents) == 0x000058, "Member 'UFcAudioAmbientRuleMatchMesh::m_AudioEvents' has a wrong offset!");
static_assert(offsetof(UFcAudioAmbientRuleMatchMesh, m_AudioObjectSettingsAsset) == 0x000068, "Member 'UFcAudioAmbientRuleMatchMesh::m_AudioObjectSettingsAsset' has a wrong offset!");

// Class FcAudio.FcAudioAmbientSettings
// 0x0038 (0x0068 - 0x0030)
class UFcAudioAmbientSettings : public UObject
{
public:
	TArray<class UFcAudioAmbientRuleMatchMesh*>   m_RulesMatchMesh;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          m_bAllActorClassesWithDynamicUpdate;               // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           m_ActorsClassesWithDynamicUpdate;                  // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UStaticMeshComponent>> m_IgnoredStaticMeshClasses;                      // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioAmbientSettings">();
	}
	static class UFcAudioAmbientSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioAmbientSettings>();
	}
};
static_assert(alignof(UFcAudioAmbientSettings) == 0x000008, "Wrong alignment on UFcAudioAmbientSettings");
static_assert(sizeof(UFcAudioAmbientSettings) == 0x000068, "Wrong size on UFcAudioAmbientSettings");
static_assert(offsetof(UFcAudioAmbientSettings, m_RulesMatchMesh) == 0x000030, "Member 'UFcAudioAmbientSettings::m_RulesMatchMesh' has a wrong offset!");
static_assert(offsetof(UFcAudioAmbientSettings, m_bAllActorClassesWithDynamicUpdate) == 0x000040, "Member 'UFcAudioAmbientSettings::m_bAllActorClassesWithDynamicUpdate' has a wrong offset!");
static_assert(offsetof(UFcAudioAmbientSettings, m_ActorsClassesWithDynamicUpdate) == 0x000048, "Member 'UFcAudioAmbientSettings::m_ActorsClassesWithDynamicUpdate' has a wrong offset!");
static_assert(offsetof(UFcAudioAmbientSettings, m_IgnoredStaticMeshClasses) == 0x000058, "Member 'UFcAudioAmbientSettings::m_IgnoredStaticMeshClasses' has a wrong offset!");

// Class FcAudio.FcAudioEventSection
// 0x0010 (0x0108 - 0x00F8)
class UFcAudioEventSection final : public UMovieSceneSection
{
public:
	class UFcAudioEvent*                          m_AudioEvent;                                      // 0x00F8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_bStopAtSectionEnd;                               // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAudioEvent(class UFcAudioEvent* InAudioEvent);
	void SetStopAtSectionEnd(bool bStopAtSectionEnd);

	class UFcAudioEvent* GetAudioEvent() const;
	bool GetStopAtSectionEnd() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioEventSection">();
	}
	static class UFcAudioEventSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioEventSection>();
	}
};
static_assert(alignof(UFcAudioEventSection) == 0x000008, "Wrong alignment on UFcAudioEventSection");
static_assert(sizeof(UFcAudioEventSection) == 0x000108, "Wrong size on UFcAudioEventSection");
static_assert(offsetof(UFcAudioEventSection, m_AudioEvent) == 0x0000F8, "Member 'UFcAudioEventSection::m_AudioEvent' has a wrong offset!");
static_assert(offsetof(UFcAudioEventSection, m_bStopAtSectionEnd) == 0x000100, "Member 'UFcAudioEventSection::m_bStopAtSectionEnd' has a wrong offset!");

// Class FcAudio.FcAudioObjectTrack
// 0x0030 (0x00D0 - 0x00A0)
class UFcAudioObjectTrack final : public UMovieSceneTrack
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             m_AudioSections;                                   // 0x00A8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  m_ObjectBinding;                                   // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          m_bKeepAliveWhilePlaying;                          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioObjectTrack">();
	}
	static class UFcAudioObjectTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioObjectTrack>();
	}
};
static_assert(alignof(UFcAudioObjectTrack) == 0x000008, "Wrong alignment on UFcAudioObjectTrack");
static_assert(sizeof(UFcAudioObjectTrack) == 0x0000D0, "Wrong size on UFcAudioObjectTrack");
static_assert(offsetof(UFcAudioObjectTrack, m_AudioSections) == 0x0000A8, "Member 'UFcAudioObjectTrack::m_AudioSections' has a wrong offset!");
static_assert(offsetof(UFcAudioObjectTrack, m_ObjectBinding) == 0x0000B8, "Member 'UFcAudioObjectTrack::m_ObjectBinding' has a wrong offset!");
static_assert(offsetof(UFcAudioObjectTrack, m_bKeepAliveWhilePlaying) == 0x0000C8, "Member 'UFcAudioObjectTrack::m_bKeepAliveWhilePlaying' has a wrong offset!");

// Class FcAudio.FcAudioRtpcSection
// 0x0010 (0x0108 - 0x00F8)
class UFcAudioRtpcSection final : public UMovieSceneSection
{
public:
	TArray<struct FFcAudioRtpcSectionCurveData>   m_Curves;                                          // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void AddRtpcValueKey(class UAkRtpc* InRtpc, const struct FFrameNumber& InTime, const float InValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioRtpcSection">();
	}
	static class UFcAudioRtpcSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioRtpcSection>();
	}
};
static_assert(alignof(UFcAudioRtpcSection) == 0x000008, "Wrong alignment on UFcAudioRtpcSection");
static_assert(sizeof(UFcAudioRtpcSection) == 0x000108, "Wrong size on UFcAudioRtpcSection");
static_assert(offsetof(UFcAudioRtpcSection, m_Curves) == 0x0000F8, "Member 'UFcAudioRtpcSection::m_Curves' has a wrong offset!");

// Class FcAudio.FcAudioNiagaraDataInterfacePlayer
// 0x0028 (0x0068 - 0x0040)
class UFcAudioNiagaraDataInterfacePlayer final : public UNiagaraDataInterface
{
public:
	class UFcAudioEvent*                          AudioEvent;                                        // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioObjectSettingsAsset*            AudioObjectSettings;                               // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayUniqueOrIgnore;                               // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceStopOnDestroy;                               // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          AudioEventOnDestroy;                               // 0x0058(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayOnlyWhenVisible;                              // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioNiagaraDataInterfacePlayer">();
	}
	static class UFcAudioNiagaraDataInterfacePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioNiagaraDataInterfacePlayer>();
	}
};
static_assert(alignof(UFcAudioNiagaraDataInterfacePlayer) == 0x000008, "Wrong alignment on UFcAudioNiagaraDataInterfacePlayer");
static_assert(sizeof(UFcAudioNiagaraDataInterfacePlayer) == 0x000068, "Wrong size on UFcAudioNiagaraDataInterfacePlayer");
static_assert(offsetof(UFcAudioNiagaraDataInterfacePlayer, AudioEvent) == 0x000040, "Member 'UFcAudioNiagaraDataInterfacePlayer::AudioEvent' has a wrong offset!");
static_assert(offsetof(UFcAudioNiagaraDataInterfacePlayer, AudioObjectSettings) == 0x000048, "Member 'UFcAudioNiagaraDataInterfacePlayer::AudioObjectSettings' has a wrong offset!");
static_assert(offsetof(UFcAudioNiagaraDataInterfacePlayer, bPlayUniqueOrIgnore) == 0x000050, "Member 'UFcAudioNiagaraDataInterfacePlayer::bPlayUniqueOrIgnore' has a wrong offset!");
static_assert(offsetof(UFcAudioNiagaraDataInterfacePlayer, bForceStopOnDestroy) == 0x000051, "Member 'UFcAudioNiagaraDataInterfacePlayer::bForceStopOnDestroy' has a wrong offset!");
static_assert(offsetof(UFcAudioNiagaraDataInterfacePlayer, AudioEventOnDestroy) == 0x000058, "Member 'UFcAudioNiagaraDataInterfacePlayer::AudioEventOnDestroy' has a wrong offset!");
static_assert(offsetof(UFcAudioNiagaraDataInterfacePlayer, bPlayOnlyWhenVisible) == 0x000060, "Member 'UFcAudioNiagaraDataInterfacePlayer::bPlayOnlyWhenVisible' has a wrong offset!");

// Class FcAudio.AudioSubsystem
// 0x0468 (0x04A0 - 0x0038)
class UAudioSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x468];                                     // 0x0038(0x0468)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioSubsystem">();
	}
	static class UAudioSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioSubsystem>();
	}
};
static_assert(alignof(UAudioSubsystem) == 0x000008, "Wrong alignment on UAudioSubsystem");
static_assert(sizeof(UAudioSubsystem) == 0x0004A0, "Wrong size on UAudioSubsystem");

// Class FcAudio.AudioSystemStatics
// 0x0000 (0x0030 - 0x0030)
class UAudioSystemStatics final : public UBlueprintFunctionLibrary
{
public:
	static class APlayerCameraManager* GetFirstPlayerCameraManager(const class UObject* WorldContextObject);
	static class APawn* GetFirstPlayerPawn(const class UObject* WorldContextObject);
	static void LoadAndPlayAudioEventGlobal(const class UObject* WorldContextObject, const TSoftObjectPtr<class UFcAudioEvent>& AudioEventSoftPtr);
	static void PlayAudioEvent(class UObject* WorldContextObject, const class UFcAudioEvent* AudioEvent, const class USceneComponent* OptionalFollowComponent);
	static void PlayAudioEventGlobal(class UObject* WorldContextObject, const class UFcAudioEvent* AudioEvent);
	static void StopAudioEventGlobal(class UObject* WorldContextObject, const class UFcAudioEvent* AudioEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioSystemStatics">();
	}
	static class UAudioSystemStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioSystemStatics>();
	}
};
static_assert(alignof(UAudioSystemStatics) == 0x000008, "Wrong alignment on UAudioSystemStatics");
static_assert(sizeof(UAudioSystemStatics) == 0x000030, "Wrong size on UAudioSystemStatics");

// Class FcAudio.FcAudioCacheSubsystem
// 0x0060 (0x0098 - 0x0038)
class UFcAudioCacheSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEnvironment*                    m_DefaultAudioEnvironment;                         // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioCacheSubsystem">();
	}
	static class UFcAudioCacheSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioCacheSubsystem>();
	}
};
static_assert(alignof(UFcAudioCacheSubsystem) == 0x000008, "Wrong alignment on UFcAudioCacheSubsystem");
static_assert(sizeof(UFcAudioCacheSubsystem) == 0x000098, "Wrong size on UFcAudioCacheSubsystem");
static_assert(offsetof(UFcAudioCacheSubsystem, m_DefaultAudioEnvironment) == 0x000088, "Member 'UFcAudioCacheSubsystem::m_DefaultAudioEnvironment' has a wrong offset!");

// Class FcAudio.FcAudioEnvironment
// 0x0018 (0x0050 - 0x0038)
class UFcAudioEnvironment final : public UDataAsset
{
public:
	class UFcAudioEvent*                          m_EnterAudioEvent;                                 // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFcAudioEvent*                          m_LeaveAudioEvent;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LeaveAudioStopFadeTime;                          // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioEnvironment">();
	}
	static class UFcAudioEnvironment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioEnvironment>();
	}
};
static_assert(alignof(UFcAudioEnvironment) == 0x000008, "Wrong alignment on UFcAudioEnvironment");
static_assert(sizeof(UFcAudioEnvironment) == 0x000050, "Wrong size on UFcAudioEnvironment");
static_assert(offsetof(UFcAudioEnvironment, m_EnterAudioEvent) == 0x000038, "Member 'UFcAudioEnvironment::m_EnterAudioEvent' has a wrong offset!");
static_assert(offsetof(UFcAudioEnvironment, m_LeaveAudioEvent) == 0x000040, "Member 'UFcAudioEnvironment::m_LeaveAudioEvent' has a wrong offset!");
static_assert(offsetof(UFcAudioEnvironment, m_LeaveAudioStopFadeTime) == 0x000048, "Member 'UFcAudioEnvironment::m_LeaveAudioStopFadeTime' has a wrong offset!");

// Class FcAudio.FcAudioReverbSettings
// 0x0088 (0x00B8 - 0x0030)
class UFcAudioReverbSettings : public UObject
{
public:
	bool                                          m_bEnable;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             m_ReverbCollisionChannel;                          // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_CameraSourceReverbAmount;                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ReverbMaxRayDistance;                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ReverbMaxRaysPerEntity;                          // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFcAudioReverbGroup*>            m_ReverbGroupsForAudioObjects;                     // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFcAudioReverbDistanceBus              m_ReverbAudioObjectInfinityDistanceBus;            // 0x0050(0x0028)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UFcAudioReverbGroup*>            m_ReverbGroupsForCamera;                           // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFcAudioReverbDistanceBus              m_ReverbCameraObjectInfinityDistanceBus;           // 0x0088(0x0028)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         m_FglEntityProcessingMinBatchSize;                 // 0x00B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioReverbSettings">();
	}
	static class UFcAudioReverbSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioReverbSettings>();
	}
};
static_assert(alignof(UFcAudioReverbSettings) == 0x000008, "Wrong alignment on UFcAudioReverbSettings");
static_assert(sizeof(UFcAudioReverbSettings) == 0x0000B8, "Wrong size on UFcAudioReverbSettings");
static_assert(offsetof(UFcAudioReverbSettings, m_bEnable) == 0x000030, "Member 'UFcAudioReverbSettings::m_bEnable' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbSettings, m_ReverbCollisionChannel) == 0x000031, "Member 'UFcAudioReverbSettings::m_ReverbCollisionChannel' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbSettings, m_CameraSourceReverbAmount) == 0x000034, "Member 'UFcAudioReverbSettings::m_CameraSourceReverbAmount' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbSettings, m_ReverbMaxRayDistance) == 0x000038, "Member 'UFcAudioReverbSettings::m_ReverbMaxRayDistance' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbSettings, m_ReverbMaxRaysPerEntity) == 0x00003C, "Member 'UFcAudioReverbSettings::m_ReverbMaxRaysPerEntity' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbSettings, m_ReverbGroupsForAudioObjects) == 0x000040, "Member 'UFcAudioReverbSettings::m_ReverbGroupsForAudioObjects' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbSettings, m_ReverbAudioObjectInfinityDistanceBus) == 0x000050, "Member 'UFcAudioReverbSettings::m_ReverbAudioObjectInfinityDistanceBus' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbSettings, m_ReverbGroupsForCamera) == 0x000078, "Member 'UFcAudioReverbSettings::m_ReverbGroupsForCamera' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbSettings, m_ReverbCameraObjectInfinityDistanceBus) == 0x000088, "Member 'UFcAudioReverbSettings::m_ReverbCameraObjectInfinityDistanceBus' has a wrong offset!");
static_assert(offsetof(UFcAudioReverbSettings, m_FglEntityProcessingMinBatchSize) == 0x0000B0, "Member 'UFcAudioReverbSettings::m_FglEntityProcessingMinBatchSize' has a wrong offset!");

// Class FcAudio.FcAudioRoomType
// 0x0028 (0x0058 - 0x0030)
class UFcAudioRoomType final : public UObject
{
public:
	class FString                                 m_AkSwitchStateName;                               // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioRoomType">();
	}
	static class UFcAudioRoomType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioRoomType>();
	}
};
static_assert(alignof(UFcAudioRoomType) == 0x000008, "Wrong alignment on UFcAudioRoomType");
static_assert(sizeof(UFcAudioRoomType) == 0x000058, "Wrong size on UFcAudioRoomType");
static_assert(offsetof(UFcAudioRoomType, m_AkSwitchStateName) == 0x000030, "Member 'UFcAudioRoomType::m_AkSwitchStateName' has a wrong offset!");

// Class FcAudio.FcAudioSettings
// 0x0100 (0x0130 - 0x0030)
class UFcAudioSettings final : public UObject
{
public:
	TSoftClassPtr<class UClass>                   m_SurfaceTypeMap;                                  // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             m_DefaultTraceCollisionChannel;                    // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   m_ReverbSettings;                                  // 0x0068(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_ShelteredSettings;                               // 0x0098(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   m_AmbientSettings;                                 // 0x00C8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFcAudioEnvironment>     m_DefaultAudioEnvironment;                         // 0x00F8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_HighQualityOcclusionForRadius;                   // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CullingExtraDistanceMargin;                      // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioSettings">();
	}
	static class UFcAudioSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioSettings>();
	}
};
static_assert(alignof(UFcAudioSettings) == 0x000008, "Wrong alignment on UFcAudioSettings");
static_assert(sizeof(UFcAudioSettings) == 0x000130, "Wrong size on UFcAudioSettings");
static_assert(offsetof(UFcAudioSettings, m_SurfaceTypeMap) == 0x000030, "Member 'UFcAudioSettings::m_SurfaceTypeMap' has a wrong offset!");
static_assert(offsetof(UFcAudioSettings, m_DefaultTraceCollisionChannel) == 0x000060, "Member 'UFcAudioSettings::m_DefaultTraceCollisionChannel' has a wrong offset!");
static_assert(offsetof(UFcAudioSettings, m_ReverbSettings) == 0x000068, "Member 'UFcAudioSettings::m_ReverbSettings' has a wrong offset!");
static_assert(offsetof(UFcAudioSettings, m_ShelteredSettings) == 0x000098, "Member 'UFcAudioSettings::m_ShelteredSettings' has a wrong offset!");
static_assert(offsetof(UFcAudioSettings, m_AmbientSettings) == 0x0000C8, "Member 'UFcAudioSettings::m_AmbientSettings' has a wrong offset!");
static_assert(offsetof(UFcAudioSettings, m_DefaultAudioEnvironment) == 0x0000F8, "Member 'UFcAudioSettings::m_DefaultAudioEnvironment' has a wrong offset!");
static_assert(offsetof(UFcAudioSettings, m_HighQualityOcclusionForRadius) == 0x000128, "Member 'UFcAudioSettings::m_HighQualityOcclusionForRadius' has a wrong offset!");
static_assert(offsetof(UFcAudioSettings, m_CullingExtraDistanceMargin) == 0x00012C, "Member 'UFcAudioSettings::m_CullingExtraDistanceMargin' has a wrong offset!");

// Class FcAudio.FcAudioSettingsPerUser
// 0x0000 (0x0030 - 0x0030)
class UFcAudioSettingsPerUser final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioSettingsPerUser">();
	}
	static class UFcAudioSettingsPerUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioSettingsPerUser>();
	}
};
static_assert(alignof(UFcAudioSettingsPerUser) == 0x000008, "Wrong alignment on UFcAudioSettingsPerUser");
static_assert(sizeof(UFcAudioSettingsPerUser) == 0x000030, "Wrong size on UFcAudioSettingsPerUser");

// Class FcAudio.FcAudioSurfaceTypeMap
// 0x09D8 (0x0A08 - 0x0030)
class UFcAudioSurfaceTypeMap : public UObject
{
public:
	class FString                                 m_PhysicalSurfaceToSwitchNameMap[0x3F];            // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_420[0x5E8];                                    // 0x0420(0x05E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FcAudioSurfaceTypeMap">();
	}
	static class UFcAudioSurfaceTypeMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFcAudioSurfaceTypeMap>();
	}
};
static_assert(alignof(UFcAudioSurfaceTypeMap) == 0x000008, "Wrong alignment on UFcAudioSurfaceTypeMap");
static_assert(sizeof(UFcAudioSurfaceTypeMap) == 0x000A08, "Wrong size on UFcAudioSurfaceTypeMap");
static_assert(offsetof(UFcAudioSurfaceTypeMap, m_PhysicalSurfaceToSwitchNameMap) == 0x000030, "Member 'UFcAudioSurfaceTypeMap::m_PhysicalSurfaceToSwitchNameMap' has a wrong offset!");

}

