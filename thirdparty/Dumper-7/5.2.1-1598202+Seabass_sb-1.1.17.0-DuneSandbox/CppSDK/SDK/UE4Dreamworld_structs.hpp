#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UE4Dreamworld

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum UE4Dreamworld.EPlayerPersistenceActor
// NumValues: 0x0004
enum class EPlayerPersistenceActor : uint8
{
	State                                    = 0,
	Controller                               = 1,
	Pawn                                     = 2,
	EPlayerPersistenceActor_MAX              = 3,
};

// Enum UE4Dreamworld.EStatModifierType
// NumValues: 0x0004
enum class EStatModifierType : uint8
{
	PreMultiplier                            = 0,
	Adder                                    = 1,
	PostMultiplier                           = 2,
	EStatModifierType_MAX                    = 3,
};

// Enum UE4Dreamworld.EBudgetingBindingType
// NumValues: 0x0004
enum class EBudgetingBindingType : uint8
{
	Single                                   = 0,
	RegexMatch                               = 1,
	RegexReplace                             = 2,
	EBudgetingBindingType_MAX                = 3,
};

// Enum UE4Dreamworld.EBudgetingExcludeBindingType
// NumValues: 0x0003
enum class EBudgetingExcludeBindingType : uint8
{
	Single                                   = 0,
	RegexMatch                               = 1,
	EBudgetingExcludeBindingType_MAX         = 2,
};

// Enum UE4Dreamworld.EBudgetingSubSystemName
// NumValues: 0x0003
enum class EBudgetingSubSystemName : uint8
{
	GeneralCPU                               = 0,
	FGLProcessor                             = 1,
	EBudgetingSubSystemName_MAX              = 2,
};

// Enum UE4Dreamworld.EBoxOverlapMobilityType
// NumValues: 0x0004
enum class EBoxOverlapMobilityType : uint8
{
	Any                                      = 0,
	Static                                   = 1,
	Dynamic                                  = 2,
	EBoxOverlapMobilityType_MAX              = 3,
};

// ScriptStruct UE4Dreamworld.StatModifierId
// 0x0004 (0x0004 - 0x0000)
struct FStatModifierId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatModifierId) == 0x000004, "Wrong alignment on FStatModifierId");
static_assert(sizeof(FStatModifierId) == 0x000004, "Wrong size on FStatModifierId");
static_assert(offsetof(FStatModifierId, ID) == 0x000000, "Member 'FStatModifierId::ID' has a wrong offset!");

// ScriptStruct UE4Dreamworld.StatModifier
// 0x000C (0x000C - 0x0000)
struct FStatModifier final
{
public:
	EStatModifierType                             Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatModifierId                        UniqueID;                                          // 0x0004(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatModifier) == 0x000004, "Wrong alignment on FStatModifier");
static_assert(sizeof(FStatModifier) == 0x00000C, "Wrong size on FStatModifier");
static_assert(offsetof(FStatModifier, Type) == 0x000000, "Member 'FStatModifier::Type' has a wrong offset!");
static_assert(offsetof(FStatModifier, UniqueID) == 0x000004, "Member 'FStatModifier::UniqueID' has a wrong offset!");
static_assert(offsetof(FStatModifier, Value) == 0x000008, "Member 'FStatModifier::Value' has a wrong offset!");

// ScriptStruct UE4Dreamworld.StringEnumValue
// 0x0008 (0x0008 - 0x0000)
struct FStringEnumValue
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringEnumValue) == 0x000004, "Wrong alignment on FStringEnumValue");
static_assert(sizeof(FStringEnumValue) == 0x000008, "Wrong size on FStringEnumValue");
static_assert(offsetof(FStringEnumValue, Name) == 0x000000, "Member 'FStringEnumValue::Name' has a wrong offset!");

// ScriptStruct UE4Dreamworld.AutomaticMapValidationList
// 0x0010 (0x0010 - 0x0000)
struct FAutomaticMapValidationList final
{
public:
	TArray<struct FSoftObjectPath>                MapList;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAutomaticMapValidationList) == 0x000008, "Wrong alignment on FAutomaticMapValidationList");
static_assert(sizeof(FAutomaticMapValidationList) == 0x000010, "Wrong size on FAutomaticMapValidationList");
static_assert(offsetof(FAutomaticMapValidationList, MapList) == 0x000000, "Member 'FAutomaticMapValidationList::MapList' has a wrong offset!");

// ScriptStruct UE4Dreamworld.StatReplicator
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x08) FStatReplicator final
{
public:
	uint8                                         Pad_0[0xD0];                                       // 0x0000(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatReplicator) == 0x000008, "Wrong alignment on FStatReplicator");
static_assert(sizeof(FStatReplicator) == 0x0000D0, "Wrong size on FStatReplicator");

// ScriptStruct UE4Dreamworld.StatNodeModifiers
// 0x0018 (0x0018 - 0x0000)
struct FStatNodeModifiers final
{
public:
	TArray<struct FStatModifier>                  List;                                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FStatModifierId                        LastId;                                            // 0x0010(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatNodeModifiers) == 0x000008, "Wrong alignment on FStatNodeModifiers");
static_assert(sizeof(FStatNodeModifiers) == 0x000018, "Wrong size on FStatNodeModifiers");
static_assert(offsetof(FStatNodeModifiers, List) == 0x000000, "Member 'FStatNodeModifiers::List' has a wrong offset!");
static_assert(offsetof(FStatNodeModifiers, LastId) == 0x000010, "Member 'FStatNodeModifiers::LastId' has a wrong offset!");

// ScriptStruct UE4Dreamworld.StatGroupBase
// 0x0020 (0x0020 - 0x0000)
struct FStatGroupBase final
{
public:
	uint64                                        m_DirtyFlags;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStatNodeModifiers>             m_Modifiers;                                       // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatGroupBase) == 0x000008, "Wrong alignment on FStatGroupBase");
static_assert(sizeof(FStatGroupBase) == 0x000020, "Wrong size on FStatGroupBase");
static_assert(offsetof(FStatGroupBase, m_DirtyFlags) == 0x000000, "Member 'FStatGroupBase::m_DirtyFlags' has a wrong offset!");
static_assert(offsetof(FStatGroupBase, m_Modifiers) == 0x000008, "Member 'FStatGroupBase::m_Modifiers' has a wrong offset!");

// ScriptStruct UE4Dreamworld.ValidationWorldSection
// 0x0040 (0x0040 - 0x0000)
struct FValidationWorldSection final
{
public:
	struct FBox                                   Bounds;                                            // 0x0000(0x0038)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         BoundsHash;                                        // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValidationWorldSection) == 0x000008, "Wrong alignment on FValidationWorldSection");
static_assert(sizeof(FValidationWorldSection) == 0x000040, "Wrong size on FValidationWorldSection");
static_assert(offsetof(FValidationWorldSection, Bounds) == 0x000000, "Member 'FValidationWorldSection::Bounds' has a wrong offset!");
static_assert(offsetof(FValidationWorldSection, BoundsHash) == 0x000038, "Member 'FValidationWorldSection::BoundsHash' has a wrong offset!");

// ScriptStruct UE4Dreamworld.BudgetingBinding
// 0x0030 (0x0030 - 0x0000)
struct FBudgetingBinding final
{
public:
	EBudgetingBindingType                         m_Type;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchPattern;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetCategory;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBudgetingSubSystemName                       Subsystem;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBudgetingBinding) == 0x000008, "Wrong alignment on FBudgetingBinding");
static_assert(sizeof(FBudgetingBinding) == 0x000030, "Wrong size on FBudgetingBinding");
static_assert(offsetof(FBudgetingBinding, m_Type) == 0x000000, "Member 'FBudgetingBinding::m_Type' has a wrong offset!");
static_assert(offsetof(FBudgetingBinding, MatchPattern) == 0x000008, "Member 'FBudgetingBinding::MatchPattern' has a wrong offset!");
static_assert(offsetof(FBudgetingBinding, TargetCategory) == 0x000018, "Member 'FBudgetingBinding::TargetCategory' has a wrong offset!");
static_assert(offsetof(FBudgetingBinding, Subsystem) == 0x000028, "Member 'FBudgetingBinding::Subsystem' has a wrong offset!");

// ScriptStruct UE4Dreamworld.BudgetingExcludeCategory
// 0x0018 (0x0018 - 0x0000)
struct FBudgetingExcludeCategory final
{
public:
	EBudgetingExcludeBindingType                  m_Type;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExcludePattern;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBudgetingExcludeCategory) == 0x000008, "Wrong alignment on FBudgetingExcludeCategory");
static_assert(sizeof(FBudgetingExcludeCategory) == 0x000018, "Wrong size on FBudgetingExcludeCategory");
static_assert(offsetof(FBudgetingExcludeCategory, m_Type) == 0x000000, "Member 'FBudgetingExcludeCategory::m_Type' has a wrong offset!");
static_assert(offsetof(FBudgetingExcludeCategory, ExcludePattern) == 0x000008, "Member 'FBudgetingExcludeCategory::ExcludePattern' has a wrong offset!");

// ScriptStruct UE4Dreamworld.BoxOverlapResult
// 0x0008 (0x0008 - 0x0000)
struct FBoxOverlapResult final
{
public:
	TWeakObjectPtr<class UPrimitiveComponent>     Component;                                         // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoxOverlapResult) == 0x000004, "Wrong alignment on FBoxOverlapResult");
static_assert(sizeof(FBoxOverlapResult) == 0x000008, "Wrong size on FBoxOverlapResult");
static_assert(offsetof(FBoxOverlapResult, Component) == 0x000000, "Member 'FBoxOverlapResult::Component' has a wrong offset!");

}

