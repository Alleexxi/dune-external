#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraMod_GroundVehicle_SpeedToCameraPitch

#include "Basic.hpp"

#include "BP_CameraMod_GroundVehicle_SpeedToCameraPitch_classes.hpp"
#include "BP_CameraMod_GroundVehicle_SpeedToCameraPitch_parameters.hpp"


namespace SDK
{

// Function BP_CameraMod_GroundVehicle_SpeedToCameraPitch.BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C.BlueprintModifyCamera
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   ViewLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  ViewRotation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         NewViewLocation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        NewViewRotation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float*                                  NewFOV                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraMod_GroundVehicle_SpeedToCameraPitch_C::BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C", "BlueprintModifyCamera");

	Params::BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C_BlueprintModifyCamera Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.ViewLocation = std::move(ViewLocation);
	Parms.ViewRotation = std::move(ViewRotation);
	Parms.FOV = FOV;

	UObject::ProcessEvent(Func, &Parms);

	if (NewViewLocation != nullptr)
		*NewViewLocation = std::move(Parms.NewViewLocation);

	if (NewViewRotation != nullptr)
		*NewViewRotation = std::move(Parms.NewViewRotation);

	if (NewFOV != nullptr)
		*NewFOV = Parms.NewFOV;
}


// Function BP_CameraMod_GroundVehicle_SpeedToCameraPitch.BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C.CheckPlayerInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   InputRegistered                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraMod_GroundVehicle_SpeedToCameraPitch_C::CheckPlayerInput(bool* InputRegistered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C", "CheckPlayerInput");

	Params::BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C_CheckPlayerInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InputRegistered != nullptr)
		*InputRegistered = Parms.InputRegistered;
}


// Function BP_CameraMod_GroundVehicle_SpeedToCameraPitch.BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C.CheckPlayerInputAndSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADuneVehicle*                     DuneVehicle                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// double                                  InputTimeThreshold                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  SpeedThreshold                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   No_Input                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Has_Speed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraMod_GroundVehicle_SpeedToCameraPitch_C::CheckPlayerInputAndSpeed(class ADuneVehicle* DuneVehicle, double InputTimeThreshold, double SpeedThreshold, bool* No_Input, bool* Has_Speed, struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C", "CheckPlayerInputAndSpeed");

	Params::BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C_CheckPlayerInputAndSpeed Parms{};

	Parms.DuneVehicle = DuneVehicle;
	Parms.InputTimeThreshold = InputTimeThreshold;
	Parms.SpeedThreshold = SpeedThreshold;

	UObject::ProcessEvent(Func, &Parms);

	if (No_Input != nullptr)
		*No_Input = Parms.No_Input;

	if (Has_Speed != nullptr)
		*Has_Speed = Parms.Has_Speed;

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function BP_CameraMod_GroundVehicle_SpeedToCameraPitch.BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C.ExecuteUbergraph_BP_CameraMod_GroundVehicle_SpeedToCameraPitch
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraMod_GroundVehicle_SpeedToCameraPitch_C::ExecuteUbergraph_BP_CameraMod_GroundVehicle_SpeedToCameraPitch(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C", "ExecuteUbergraph_BP_CameraMod_GroundVehicle_SpeedToCameraPitch");

	Params::BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C_ExecuteUbergraph_BP_CameraMod_GroundVehicle_SpeedToCameraPitch Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraMod_GroundVehicle_SpeedToCameraPitch.BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C.OnAddedToCamera
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UBP_CameraMod_GroundVehicle_SpeedToCameraPitch_C::OnAddedToCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraMod_GroundVehicle_SpeedToCameraPitch_C", "OnAddedToCamera");

	UObject::ProcessEvent(Func, nullptr);
}

}

