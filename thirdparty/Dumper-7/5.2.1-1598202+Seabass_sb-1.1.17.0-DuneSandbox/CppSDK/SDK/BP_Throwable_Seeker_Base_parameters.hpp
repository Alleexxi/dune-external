#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Throwable_Seeker_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Throwable_Seeker_Base.BP_Throwable_Seeker_Base_C.ExecuteUbergraph_BP_Throwable_Seeker_Base
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_InDeltaTime;                          // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Velocity;                             // 0x0010(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_Transform;                            // 0x0030(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base) == 0x000010, "Wrong alignment on BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base");
static_assert(sizeof(BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base) == 0x0000A0, "Wrong size on BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base, EntryPoint) == 0x000000, "Member 'BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base, K2Node_Event_InDeltaTime) == 0x000008, "Member 'BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base, CallFunc_IsDedicatedServer_ReturnValue) == 0x00000C, "Member 'BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base, K2Node_Event_Velocity) == 0x000010, "Member 'BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base::K2Node_Event_Velocity' has a wrong offset!");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base, K2Node_Event_Transform) == 0x000030, "Member 'BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base::K2Node_Event_Transform' has a wrong offset!");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_Throwable_Seeker_Base.BP_Throwable_Seeker_Base_C.Launch
// 0x0080 (0x0080 - 0x0000)
struct BP_Throwable_Seeker_Base_C_Launch final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Throwable_Seeker_Base_C_Launch) == 0x000010, "Wrong alignment on BP_Throwable_Seeker_Base_C_Launch");
static_assert(sizeof(BP_Throwable_Seeker_Base_C_Launch) == 0x000080, "Wrong size on BP_Throwable_Seeker_Base_C_Launch");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_Launch, Velocity) == 0x000000, "Member 'BP_Throwable_Seeker_Base_C_Launch::Velocity' has a wrong offset!");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_Launch, Transform) == 0x000020, "Member 'BP_Throwable_Seeker_Base_C_Launch::Transform' has a wrong offset!");

// Function BP_Throwable_Seeker_Base.BP_Throwable_Seeker_Base_C.SimulateTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Throwable_Seeker_Base_C_SimulateTick final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Throwable_Seeker_Base_C_SimulateTick) == 0x000004, "Wrong alignment on BP_Throwable_Seeker_Base_C_SimulateTick");
static_assert(sizeof(BP_Throwable_Seeker_Base_C_SimulateTick) == 0x000004, "Wrong size on BP_Throwable_Seeker_Base_C_SimulateTick");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_SimulateTick, InDeltaTime) == 0x000000, "Member 'BP_Throwable_Seeker_Base_C_SimulateTick::InDeltaTime' has a wrong offset!");

// Function BP_Throwable_Seeker_Base.BP_Throwable_Seeker_Base_C.IsClimbable
// 0x0010 (0x0010 - 0x0000)
struct BP_Throwable_Seeker_Base_C_IsClimbable final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Throwable_Seeker_Base_C_IsClimbable) == 0x000008, "Wrong alignment on BP_Throwable_Seeker_Base_C_IsClimbable");
static_assert(sizeof(BP_Throwable_Seeker_Base_C_IsClimbable) == 0x000010, "Wrong size on BP_Throwable_Seeker_Base_C_IsClimbable");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_IsClimbable, InActor) == 0x000000, "Member 'BP_Throwable_Seeker_Base_C_IsClimbable::InActor' has a wrong offset!");
static_assert(offsetof(BP_Throwable_Seeker_Base_C_IsClimbable, ReturnValue) == 0x000008, "Member 'BP_Throwable_Seeker_Base_C_IsClimbable::ReturnValue' has a wrong offset!");

}

