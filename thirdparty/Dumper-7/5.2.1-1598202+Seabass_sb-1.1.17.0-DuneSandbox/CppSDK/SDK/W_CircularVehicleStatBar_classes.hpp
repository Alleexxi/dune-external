#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CircularVehicleStatBar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_CircularVehicleStatBar.W_CircularVehicleStatBar_C
// 0x0040 (0x0810 - 0x07D0)
class UW_CircularVehicleStatBar_C final : public UCircularVehicleStatBarWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 barBorder_inside_1_side;                           // 0x07D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 barBorder_inside_2_side;                           // 0x07E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IndicatorLineImage;                                // 0x07E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        m_InsideBorderSwitcher;                            // 0x07F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             ThresholdIndicatorSlot;                            // 0x07F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          paddingtest;                                       // 0x0800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          m_IndicatorLabelAlignment;                         // 0x0801(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_802[0x6];                                      // 0x0802(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        m_CachedMaxValue;                                  // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetIndicatorLabelHorizontalAlignment(EHorizontalAlignment HorizontalAlignment);
	void PreConstruct(bool IsDesignTime);
	void OnSetValues(const float InCurrentValue, const float InMaxValue);
	void OnPercentageChanged(const float InPercentage);
	void ExecuteUbergraph_W_CircularVehicleStatBar(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_CircularVehicleStatBar_C">();
	}
	static class UW_CircularVehicleStatBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_CircularVehicleStatBar_C>();
	}
};
static_assert(alignof(UW_CircularVehicleStatBar_C) == 0x000010, "Wrong alignment on UW_CircularVehicleStatBar_C");
static_assert(sizeof(UW_CircularVehicleStatBar_C) == 0x000810, "Wrong size on UW_CircularVehicleStatBar_C");
static_assert(offsetof(UW_CircularVehicleStatBar_C, UberGraphFrame) == 0x0007D0, "Member 'UW_CircularVehicleStatBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_CircularVehicleStatBar_C, barBorder_inside_1_side) == 0x0007D8, "Member 'UW_CircularVehicleStatBar_C::barBorder_inside_1_side' has a wrong offset!");
static_assert(offsetof(UW_CircularVehicleStatBar_C, barBorder_inside_2_side) == 0x0007E0, "Member 'UW_CircularVehicleStatBar_C::barBorder_inside_2_side' has a wrong offset!");
static_assert(offsetof(UW_CircularVehicleStatBar_C, IndicatorLineImage) == 0x0007E8, "Member 'UW_CircularVehicleStatBar_C::IndicatorLineImage' has a wrong offset!");
static_assert(offsetof(UW_CircularVehicleStatBar_C, m_InsideBorderSwitcher) == 0x0007F0, "Member 'UW_CircularVehicleStatBar_C::m_InsideBorderSwitcher' has a wrong offset!");
static_assert(offsetof(UW_CircularVehicleStatBar_C, ThresholdIndicatorSlot) == 0x0007F8, "Member 'UW_CircularVehicleStatBar_C::ThresholdIndicatorSlot' has a wrong offset!");
static_assert(offsetof(UW_CircularVehicleStatBar_C, paddingtest) == 0x000800, "Member 'UW_CircularVehicleStatBar_C::paddingtest' has a wrong offset!");
static_assert(offsetof(UW_CircularVehicleStatBar_C, m_IndicatorLabelAlignment) == 0x000801, "Member 'UW_CircularVehicleStatBar_C::m_IndicatorLabelAlignment' has a wrong offset!");
static_assert(offsetof(UW_CircularVehicleStatBar_C, m_CachedMaxValue) == 0x000808, "Member 'UW_CircularVehicleStatBar_C::m_CachedMaxValue' has a wrong offset!");

}

