#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_SingleDamageNumber

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_SingleDamageNumber.W_SingleDamageNumber_C
// 0x0058 (0x02E0 - 0x0288)
class UW_SingleDamageNumber_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCommonTextBlock*                       NumberText;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector                                WorldLocation;                                     // 0x0298(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinScale;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxScale;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDistance;                                       // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CritText;                                          // 0x02C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetNumberData(double InDamageNumber, const struct FVector& InHitLocation, const struct FSlateColor& InTextColor, bool InCrit, bool InShielded);
	void NewNumberAdded(const struct FVector& InNewNumberLocation);
	void ExecuteUbergraph_W_SingleDamageNumber(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_SingleDamageNumber_C">();
	}
	static class UW_SingleDamageNumber_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_SingleDamageNumber_C>();
	}
};
static_assert(alignof(UW_SingleDamageNumber_C) == 0x000008, "Wrong alignment on UW_SingleDamageNumber_C");
static_assert(sizeof(UW_SingleDamageNumber_C) == 0x0002E0, "Wrong size on UW_SingleDamageNumber_C");
static_assert(offsetof(UW_SingleDamageNumber_C, UberGraphFrame) == 0x000288, "Member 'UW_SingleDamageNumber_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_SingleDamageNumber_C, NumberText) == 0x000290, "Member 'UW_SingleDamageNumber_C::NumberText' has a wrong offset!");
static_assert(offsetof(UW_SingleDamageNumber_C, WorldLocation) == 0x000298, "Member 'UW_SingleDamageNumber_C::WorldLocation' has a wrong offset!");
static_assert(offsetof(UW_SingleDamageNumber_C, MinScale) == 0x0002B0, "Member 'UW_SingleDamageNumber_C::MinScale' has a wrong offset!");
static_assert(offsetof(UW_SingleDamageNumber_C, MaxScale) == 0x0002B8, "Member 'UW_SingleDamageNumber_C::MaxScale' has a wrong offset!");
static_assert(offsetof(UW_SingleDamageNumber_C, MaxDistance) == 0x0002C0, "Member 'UW_SingleDamageNumber_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(UW_SingleDamageNumber_C, CritText) == 0x0002C8, "Member 'UW_SingleDamageNumber_C::CritText' has a wrong offset!");

}

