#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PatrolShip

#include "Basic.hpp"

#include "BP_PatrolShip_classes.hpp"
#include "BP_PatrolShip_parameters.hpp"


namespace SDK
{

// Function BP_PatrolShip.BP_PatrolShip_C.BndEvt__BP_PatrolShip_DamageableActor_K2Node_ComponentBoundEvent_1_MulticastDamageDealtUnreliableSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<struct FMulticastDamageInfo>&FrameDamageInfo                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ABP_PatrolShip_C::BndEvt__BP_PatrolShip_DamageableActor_K2Node_ComponentBoundEvent_1_MulticastDamageDealtUnreliableSignature__DelegateSignature(const TArray<struct FMulticastDamageInfo>& FrameDamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "BndEvt__BP_PatrolShip_DamageableActor_K2Node_ComponentBoundEvent_1_MulticastDamageDealtUnreliableSignature__DelegateSignature");

	Params::BP_PatrolShip_C_BndEvt__BP_PatrolShip_DamageableActor_K2Node_ComponentBoundEvent_1_MulticastDamageDealtUnreliableSignature__DelegateSignature Parms{};

	Parms.FrameDamageInfo = std::move(FrameDamageInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PatrolShip.BP_PatrolShip_C.BP_OnLightSettingsApplied
// (Event, Protected, BlueprintEvent)

void ABP_PatrolShip_C::BP_OnLightSettingsApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "BP_OnLightSettingsApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.BP_StartDeparture
// (Event, Public, BlueprintEvent)

void ABP_PatrolShip_C::BP_StartDeparture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "BP_StartDeparture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.BP_TogglePatrolShipSpline
// (Event, Public, BlueprintEvent)

void ABP_PatrolShip_C::BP_TogglePatrolShipSpline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "BP_TogglePatrolShipSpline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.BP_TriggerSuspensorFieldAtLocation
// (Event, Protected, BlueprintEvent)
// Parameters:
// const struct FTransform&                Transform                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const float                             LifeTime                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const float                             SphereRadius                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PatrolShip_C::BP_TriggerSuspensorFieldAtLocation(const struct FTransform& Transform, const float LifeTime, const float SphereRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "BP_TriggerSuspensorFieldAtLocation");

	Params::BP_PatrolShip_C_BP_TriggerSuspensorFieldAtLocation Parms{};

	Parms.Transform = std::move(Transform);
	Parms.LifeTime = LifeTime;
	Parms.SphereRadius = SphereRadius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PatrolShip.BP_PatrolShip_C.Close Ship Exits
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PatrolShip_C::Close_Ship_Exits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "Close Ship Exits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.ExecuteUbergraph_BP_PatrolShip
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PatrolShip_C::ExecuteUbergraph_BP_PatrolShip(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "ExecuteUbergraph_BP_PatrolShip");

	Params::BP_PatrolShip_C_ExecuteUbergraph_BP_PatrolShip Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PatrolShip.BP_PatrolShip_C.LightsEnabledEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_PatrolShip_C::LightsEnabledEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "LightsEnabledEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.OnAllNPCsSpawned
// (Event, Protected, BlueprintEvent)

void ABP_PatrolShip_C::OnAllNPCsSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "OnAllNPCsSpawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.OnDamaged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_PatrolShip_C::OnDamaged(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "OnDamaged");

	Params::BP_PatrolShip_C_OnDamaged Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PatrolShip.BP_PatrolShip_C.OnPatrolShipTargetTrackedChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           CurrentTargetToTrack                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PatrolShip_C::OnPatrolShipTargetTrackedChanged(class AActor* CurrentTargetToTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "OnPatrolShipTargetTrackedChanged");

	Params::BP_PatrolShip_C_OnPatrolShipTargetTrackedChanged Parms{};

	Parms.CurrentTargetToTrack = CurrentTargetToTrack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PatrolShip.BP_PatrolShip_C.OnShipArrivalAnimationFinished
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PatrolShip_C::OnShipArrivalAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "OnShipArrivalAnimationFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.OnShipDepartureAnimationFinished
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PatrolShip_C::OnShipDepartureAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "OnShipDepartureAnimationFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.Play Sequence on Ship
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsArrival                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TimeStartOffset                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PatrolShip_C::Play_Sequence_on_Ship(bool IsArrival, double TimeStartOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "Play Sequence on Ship");

	Params::BP_PatrolShip_C_Play_Sequence_on_Ship Parms{};

	Parms.IsArrival = IsArrival;
	Parms.TimeStartOffset = TimeStartOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PatrolShip.BP_PatrolShip_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PatrolShip_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_PatrolShip_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "ReceiveHit");

	Params::BP_PatrolShip_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PatrolShip.BP_PatrolShip_C.SequenceFinishedEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_PatrolShip_C::SequenceFinishedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "SequenceFinishedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.SpotlightTrackingFunction
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   TargetLocation                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const float                             DeltaTime                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ABP_PatrolShip_C::SpotlightTrackingFunction(const struct FVector& TargetLocation, const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "SpotlightTrackingFunction");

	Params::BP_PatrolShip_C_SpotlightTrackingFunction Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PatrolShip.BP_PatrolShip_C.TogglePatrolshipSpline
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PatrolShip_C::TogglePatrolshipSpline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "TogglePatrolshipSpline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.Trigger Suspensor Field at Location
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LifeSpan                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PatrolShip_C::Trigger_Suspensor_Field_at_Location(const struct FTransform& Transform, double Radius, double LifeSpan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "Trigger Suspensor Field at Location");

	Params::BP_PatrolShip_C_Trigger_Suspensor_Field_at_Location Parms{};

	Parms.Transform = std::move(Transform);
	Parms.Radius = Radius;
	Parms.LifeSpan = LifeSpan;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PatrolShip.BP_PatrolShip_C.Update VFX
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PatrolShip_C::Update_VFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "Update VFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.UpdateCosmeticLightColors
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PatrolShip_C::UpdateCosmeticLightColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "UpdateCosmeticLightColors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PatrolShip.BP_PatrolShip_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_PatrolShip_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PatrolShip_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

