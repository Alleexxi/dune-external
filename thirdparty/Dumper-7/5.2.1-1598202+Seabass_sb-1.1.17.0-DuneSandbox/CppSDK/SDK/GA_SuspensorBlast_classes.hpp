#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_SuspensorBlast

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "DreamworldPreInit_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_SuspensorBlast.GA_SuspensorBlast_C
// 0x0100 (0x0638 - 0x0538)
class UGA_SuspensorBlast_C final : public UDuneEquipableGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0538(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        TimeStart;                                         // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         DuneCharacter;                                     // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitInputRelease*          Async_Input_Task;                                  // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayEvent*         Async_Power_Task;                                  // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitMovementModeChange*    Async_Movement_Mode_Task;                          // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitMovementModeChange*    Async_Movement_Mode_Task_0;                        // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                ASC;                                               // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            ConstantCostHandle;                                // 0x0578(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EDebugLevel                                   LogLevel;                                          // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_589[0x3];                                      // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DamageImmunityName;                                // 0x058C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFallDmgImmuneActive;                              // 0x0594(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_595[0x3];                                      // 0x0595(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Inner_Radius;                                      // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Outer_Radius;                                      // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_Falloff;                                    // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTimeBeforeRelease;                              // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_PlayMontageAndWait*        Async_Anim_Task;                                   // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MaxInnerDamage;                                    // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinInnerDamage;                                    // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinOuterDmg;                                       // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxOuterDmg;                                       // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeElapsedBeforeExplosion;                        // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SecondsBeforeMaxDamage;                            // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ImpulseScalar;                                     // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CameraContext_Activate;                            // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInitialAirborne;                                // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bExploded;                                         // 0x05F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F2[0x2];                                      // 0x05F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockbackDelay;                                    // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementEnableDelay;                               // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bImpulseAllowed;                                   // 0x05FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD[0x3];                                      // 0x05FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            GEMovementBlockHandle;                             // 0x0600(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          bIsMovementStopped;                                // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDrawDebug;                                   // 0x0611(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_612[0x6];                                      // 0x0612(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitCancel*                CancelWaitTask;                                    // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CachedFullCooldown;                                // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedReducedCooldown;                             // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlastHasGoneOff;                                   // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AbilityMontage;                                    // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Added_9701B952478ECA293231B89D3A5E0BCB();
	void AttemptDeactivateFallDamageImmunity();
	void CheckInitialMovement(const class ADuneCharacter* Character, bool* IsInitiallyAirborne);
	void EndMovementLockAndCost();
	void EventReceived_A965671F45B1875C47BED088A8C300E7(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_GA_SuspensorBlast(int32 EntryPoint);
	void Explode();
	void HitActorsCallback(const TSet<class AActor*>& HitActors);
	void InitAndReset(bool* bSuccess);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnBlendOut_3222B7BC40F8B76C00391C8AF02176E2();
	void OnCancel_3EB9E4904D5E6881219EEEA7C03A0397();
	void OnCancelled_3222B7BC40F8B76C00391C8AF02176E2();
	void OnChange_9A45DECC4C279370BFBD3EB45E574388(EMovementMode NewMovementMode, uint8 CustomMoveMode);
	void OnCompleted_3222B7BC40F8B76C00391C8AF02176E2();
	void OnFinish_24A9EE1649B94B25CFD001AF9945741D();
	void OnFinish_2B641E314E7F28488238E4B240EA90AE();
	void OnFinish_86E77EB94705D703F49FDF9868B3D9A3();
	void OnFinish_B5E686C34002597113A605879DD29397();
	void OnFinish_D33C482E497402F157682998BB734D86();
	void OnInterrupted_3222B7BC40F8B76C00391C8AF02176E2();
	void OnRelease_2437ACDA4630FA812388348C44A8A7C1(float TimeHeld);
	void OnSync_183A95C34E92FC0D5E019589C7F5EC15();
	void Removed_7FCDDED949F89D3D80A219B9FD742388();
	void ResumeMovementInput();
	void ScaleDamage(double* InnerDmg, double* OuterDmg);
	void StopMovementInput();
	void TaskCleanup();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_SuspensorBlast_C">();
	}
	static class UGA_SuspensorBlast_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_SuspensorBlast_C>();
	}
};
static_assert(alignof(UGA_SuspensorBlast_C) == 0x000008, "Wrong alignment on UGA_SuspensorBlast_C");
static_assert(sizeof(UGA_SuspensorBlast_C) == 0x000638, "Wrong size on UGA_SuspensorBlast_C");
static_assert(offsetof(UGA_SuspensorBlast_C, UberGraphFrame) == 0x000538, "Member 'UGA_SuspensorBlast_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, TimeStart) == 0x000540, "Member 'UGA_SuspensorBlast_C::TimeStart' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, DuneCharacter) == 0x000548, "Member 'UGA_SuspensorBlast_C::DuneCharacter' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, Async_Input_Task) == 0x000550, "Member 'UGA_SuspensorBlast_C::Async_Input_Task' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, Async_Power_Task) == 0x000558, "Member 'UGA_SuspensorBlast_C::Async_Power_Task' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, Async_Movement_Mode_Task) == 0x000560, "Member 'UGA_SuspensorBlast_C::Async_Movement_Mode_Task' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, Async_Movement_Mode_Task_0) == 0x000568, "Member 'UGA_SuspensorBlast_C::Async_Movement_Mode_Task_0' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, ASC) == 0x000570, "Member 'UGA_SuspensorBlast_C::ASC' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, ConstantCostHandle) == 0x000578, "Member 'UGA_SuspensorBlast_C::ConstantCostHandle' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, LogLevel) == 0x000588, "Member 'UGA_SuspensorBlast_C::LogLevel' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, DamageImmunityName) == 0x00058C, "Member 'UGA_SuspensorBlast_C::DamageImmunityName' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, bFallDmgImmuneActive) == 0x000594, "Member 'UGA_SuspensorBlast_C::bFallDmgImmuneActive' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, Inner_Radius) == 0x000598, "Member 'UGA_SuspensorBlast_C::Inner_Radius' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, Outer_Radius) == 0x00059C, "Member 'UGA_SuspensorBlast_C::Outer_Radius' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, Damage_Falloff) == 0x0005A0, "Member 'UGA_SuspensorBlast_C::Damage_Falloff' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, MinTimeBeforeRelease) == 0x0005A4, "Member 'UGA_SuspensorBlast_C::MinTimeBeforeRelease' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, Async_Anim_Task) == 0x0005A8, "Member 'UGA_SuspensorBlast_C::Async_Anim_Task' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, MaxInnerDamage) == 0x0005B0, "Member 'UGA_SuspensorBlast_C::MaxInnerDamage' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, MinInnerDamage) == 0x0005B8, "Member 'UGA_SuspensorBlast_C::MinInnerDamage' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, MinOuterDmg) == 0x0005C0, "Member 'UGA_SuspensorBlast_C::MinOuterDmg' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, MaxOuterDmg) == 0x0005C8, "Member 'UGA_SuspensorBlast_C::MaxOuterDmg' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, TimeElapsedBeforeExplosion) == 0x0005D0, "Member 'UGA_SuspensorBlast_C::TimeElapsedBeforeExplosion' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, SecondsBeforeMaxDamage) == 0x0005D8, "Member 'UGA_SuspensorBlast_C::SecondsBeforeMaxDamage' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, ImpulseScalar) == 0x0005E0, "Member 'UGA_SuspensorBlast_C::ImpulseScalar' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, CameraContext_Activate) == 0x0005E8, "Member 'UGA_SuspensorBlast_C::CameraContext_Activate' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, bIsInitialAirborne) == 0x0005F0, "Member 'UGA_SuspensorBlast_C::bIsInitialAirborne' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, bExploded) == 0x0005F1, "Member 'UGA_SuspensorBlast_C::bExploded' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, KnockbackDelay) == 0x0005F4, "Member 'UGA_SuspensorBlast_C::KnockbackDelay' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, MovementEnableDelay) == 0x0005F8, "Member 'UGA_SuspensorBlast_C::MovementEnableDelay' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, bImpulseAllowed) == 0x0005FC, "Member 'UGA_SuspensorBlast_C::bImpulseAllowed' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, GEMovementBlockHandle) == 0x000600, "Member 'UGA_SuspensorBlast_C::GEMovementBlockHandle' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, bIsMovementStopped) == 0x000610, "Member 'UGA_SuspensorBlast_C::bIsMovementStopped' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, ShouldDrawDebug) == 0x000611, "Member 'UGA_SuspensorBlast_C::ShouldDrawDebug' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, CancelWaitTask) == 0x000618, "Member 'UGA_SuspensorBlast_C::CancelWaitTask' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, CachedFullCooldown) == 0x000620, "Member 'UGA_SuspensorBlast_C::CachedFullCooldown' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, CachedReducedCooldown) == 0x000624, "Member 'UGA_SuspensorBlast_C::CachedReducedCooldown' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, BlastHasGoneOff) == 0x000628, "Member 'UGA_SuspensorBlast_C::BlastHasGoneOff' has a wrong offset!");
static_assert(offsetof(UGA_SuspensorBlast_C, AbilityMontage) == 0x000630, "Member 'UGA_SuspensorBlast_C::AbilityMontage' has a wrong offset!");

}

