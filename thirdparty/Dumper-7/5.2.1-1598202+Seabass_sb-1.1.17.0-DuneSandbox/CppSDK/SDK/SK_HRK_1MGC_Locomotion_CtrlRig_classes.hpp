#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SK_HRK_1MGC_Locomotion_CtrlRig

#include "Basic.hpp"

#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// RigVMBlueprintGeneratedClass SK_HRK_1MGC_Locomotion_CtrlRig.SK_HRK_1MGC_Locomotion_CtrlRig_C
// 0x00E0 (0x04E0 - 0x0400)
class USK_HRK_1MGC_Locomotion_CtrlRig_C final : public UControlRig
{
public:
	double                                        Steering;                                          // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IK_Target_FL;                                      // 0x0408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IK_Target_FR;                                      // 0x0420(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IK_Target_RL;                                      // 0x0438(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IK_Target_RR;                                      // 0x0450(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FL_Rotation;                                       // 0x0468(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FR_Rotation;                                       // 0x0480(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RL_Rotation;                                       // 0x0498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RR_Rotation;                                       // 0x04B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotation_FL;                                  // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotation_FR;                                  // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotation_Rear;                                // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SK_HRK_1MGC_Locomotion_CtrlRig_C">();
	}
	static class USK_HRK_1MGC_Locomotion_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USK_HRK_1MGC_Locomotion_CtrlRig_C>();
	}
};
static_assert(alignof(USK_HRK_1MGC_Locomotion_CtrlRig_C) == 0x000008, "Wrong alignment on USK_HRK_1MGC_Locomotion_CtrlRig_C");
static_assert(sizeof(USK_HRK_1MGC_Locomotion_CtrlRig_C) == 0x0004E0, "Wrong size on USK_HRK_1MGC_Locomotion_CtrlRig_C");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, Steering) == 0x000400, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::Steering' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, IK_Target_FL) == 0x000408, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::IK_Target_FL' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, IK_Target_FR) == 0x000420, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::IK_Target_FR' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, IK_Target_RL) == 0x000438, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::IK_Target_RL' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, IK_Target_RR) == 0x000450, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::IK_Target_RR' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, FL_Rotation) == 0x000468, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::FL_Rotation' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, FR_Rotation) == 0x000480, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::FR_Rotation' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, RL_Rotation) == 0x000498, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::RL_Rotation' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, RR_Rotation) == 0x0004B0, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::RR_Rotation' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, WheelRotation_FL) == 0x0004C8, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::WheelRotation_FL' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, WheelRotation_FR) == 0x0004D0, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::WheelRotation_FR' has a wrong offset!");
static_assert(offsetof(USK_HRK_1MGC_Locomotion_CtrlRig_C, WheelRotation_Rear) == 0x0004D8, "Member 'USK_HRK_1MGC_Locomotion_CtrlRig_C::WheelRotation_Rear' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_HRK_1MGC_Locomotion_CtrlRig.RigVMMemory_Literal
// 0x0290 (0x02C0 - 0x0030)
class SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FTransform                             RigVMModel___OffsetTransformForItem_OffsetTransform__Const; // 0x0030(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__Const; // 0x0090(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatMul_B__Const;                // 0x00A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___KalmanFloat_BufferSize__Const;        // 0x00AC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___OffsetTransformForItem_Weight__Const; // 0x00B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const; // 0x00B4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_Items__Const;       // 0x00B8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___SetTransform_Item__Const;             // 0x00C8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___SetTransform_Space__Const;            // 0x00D4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___SetTransform_bInitial__Const;         // 0x00D5(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__Const;           // 0x00D8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Secondary__Const;         // 0x0120(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_AimBone_DebugSettings         RigVMModel___AimBoneMath_DebugSettings__Const;     // 0x0170(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_Minimum__Const;        // 0x01E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Maximum__Const;        // 0x01E4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___KalmanFloat_1_BufferSize__Const;      // 0x01E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_Item__Const; // 0x01EC(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_B__Const;                    // 0x01F8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SetTransform_1_Item__Const;           // 0x01FC(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_1_Item__Const; // 0x0208(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SetTransform_2_Item__Const;           // 0x0214(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_2_Primary__Const;         // 0x0220(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_2_Minimum__Const;      // 0x0268(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_Maximum__Const;      // 0x026C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_2_B__Const;                  // 0x0270(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SetTransform_3_Item__Const;           // 0x0274(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_2_1_B__Const;                // 0x0280(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___OffsetTransformForItem_1_Item__Const; // 0x0284(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___OffsetTransformForItem_1_1_Item__Const; // 0x0290(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___OffsetTransformForItem_1_1_1_Item__Const; // 0x029C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___OffsetTransformForItem_1_1_2_Item__Const; // 0x02A8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_HRK_1MGC_Locomotion_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal) == 0x0002C0, "Wrong size on SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_OffsetTransform__Const) == 0x000030, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathQuaternionFromRotator_Rotator__Const) == 0x000090, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathQuaternionFromRotator_Rotator__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatMul_B__Const) == 0x0000A8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatMul_B__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_BufferSize__Const) == 0x0000AC, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_Weight__Const) == 0x0000B0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_Weight__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const) == 0x0000B4, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_Items__Const) == 0x0000B8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_Item__Const) == 0x0000C8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_Space__Const) == 0x0000D4, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_Space__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_bInitial__Const) == 0x0000D5, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_bInitial__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Primary__Const) == 0x0000D8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Secondary__Const) == 0x000120, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_DebugSettings__Const) == 0x000170, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Minimum__Const) == 0x0001E0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Maximum__Const) == 0x0001E4, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_1_BufferSize__Const) == 0x0001E8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_1_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_Item__Const) == 0x0001EC, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___Multiply_B__Const) == 0x0001F8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___Multiply_B__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_1_Item__Const) == 0x0001FC, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_1_Item__Const) == 0x000208, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_2_Item__Const) == 0x000214, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_2_Primary__Const) == 0x000220, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_2_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_2_Minimum__Const) == 0x000268, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_2_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_2_Maximum__Const) == 0x00026C, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_2_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___Multiply_2_B__Const) == 0x000270, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___Multiply_2_B__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___SetTransform_3_Item__Const) == 0x000274, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___SetTransform_3_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___Multiply_2_1_B__Const) == 0x000280, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___Multiply_2_1_B__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_1_Item__Const) == 0x000284, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_1_1_Item__Const) == 0x000290, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_1_1_1_Item__Const) == 0x00029C, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_1_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_1_1_2_Item__Const) == 0x0002A8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_1_1_2_Item__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_HRK_1MGC_Locomotion_CtrlRig.RigVMMemory_Work
// 0x1060 (0x1090 - 0x0030)
class SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Element; // 0x0030(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_Result;     // 0x0040(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_Result;                   // 0x0060(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_Result;                  // 0x0064(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_A;                       // 0x0068(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_Buffer;                   // 0x0070(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_LastInsertIndex;          // 0x0080(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__IO; // 0x0090(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_OffsetTransform__IO; // 0x00B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_CachedIndex;   // 0x0110(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_Items__IO;          // 0x0120(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Index; // 0x0130(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Count; // 0x0134(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Ratio; // 0x0138(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun; // 0x013C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_Result;   // 0x0150(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_Result;                 // 0x0170(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Result;                // 0x0174(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_Result;     // 0x0178(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_Result;                   // 0x0190(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x01F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x0250(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_Global;           // 0x0260(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__IO;              // 0x0278(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_PrimaryCachedSpace;       // 0x02C0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_SecondaryCachedSpace;     // 0x02D0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_bIsInitialized;           // 0x02E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_Value;      // 0x02F0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Value;                 // 0x0310(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_Buffer;                 // 0x0318(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_LastInsertIndex;        // 0x0328(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_Result;       // 0x0338(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_Value;        // 0x0350(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_Rotator__IO; // 0x0370(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SetTransform_Value__IO;               // 0x0390(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_CachedIndex;             // 0x03F0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_4_Result; // 0x0400(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_Result;                      // 0x0420(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_4_Rotator__IO; // 0x0428(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO; // 0x0440(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex; // 0x04A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_1_Result; // 0x04B0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_1_Result;               // 0x04D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_Result;              // 0x04D4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_1_Result;   // 0x04D8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_1_Result;                 // 0x04F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x0550(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x05B0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_1_Global;         // 0x05C0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_1_Primary__IO;            // 0x05D8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_PrimaryCachedSpace;     // 0x0620(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_1_SecondaryCachedSpace;   // 0x0630(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_1_bIsInitialized;         // 0x0640(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_1_Value;    // 0x0650(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_1_Value;               // 0x0670(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_674[0x4];                                      // 0x0674(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_1_Buffer;               // 0x0678(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_1_LastInsertIndex;      // 0x0688(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_2_Result;     // 0x0698(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_2_Value;      // 0x06B0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_1_Rotator__IO; // 0x06D0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_6E8[0x8];                                      // 0x06E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SetTransform_1_Value__IO;             // 0x06F0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_1_CachedIndex;           // 0x0750(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_5_Result; // 0x0760(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_1_Result;                    // 0x0780(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_784[0x4];                                      // 0x0784(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_5_Rotator__IO; // 0x0788(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_1_OffsetTransform__IO; // 0x07A0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_1_CachedIndex; // 0x0800(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_2_Result; // 0x0810(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_2_Result;               // 0x0830(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_Result;              // 0x0834(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_2_Result;   // 0x0838(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_2_Result;                 // 0x0850(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_Transform;     // 0x08B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_CachedIndex;   // 0x0910(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_2_Global;         // 0x0920(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_2_Primary__IO;            // 0x0938(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_PrimaryCachedSpace;     // 0x0980(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_SecondaryCachedSpace;   // 0x0990(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_2_bIsInitialized;         // 0x09A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_2_Value;    // 0x09B0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_Value;               // 0x09D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D4[0x4];                                      // 0x09D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_2_Buffer;               // 0x09D8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_2_LastInsertIndex;      // 0x09E8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_3_Result;     // 0x09F8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_3_Value;      // 0x0A10(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_2_Rotator__IO; // 0x0A30(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	double                                        RigVMModel___Add_Result;                           // 0x0A48(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Add_A;                                // 0x0A50(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Clamp_Result;                         // 0x0A58(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_2_Result;                    // 0x0A5C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFilter_Result;                  // 0x0A60(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFilter_Value;                   // 0x0A64(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TArray<float>>                         RigVMModel___KalmanFilter_Buffer;                  // 0x0A68(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFilter_LastInsertIndex;         // 0x0A78(0x0010)(Edit, EditConst, NonTransactional)
	double                                        RigVMModel___Add_B;                                // 0x0A88(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___SetTransform_2_Value__IO;             // 0x0A90(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_2_CachedIndex;           // 0x0AF0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_3_Result; // 0x0B00(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_1_3_Result;               // 0x0B20(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_Result;              // 0x0B24(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_3_Result;   // 0x0B28(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_3_Result;                 // 0x0B40(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_Transform;     // 0x0BA0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_CachedIndex;   // 0x0C00(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_3_Global;         // 0x0C10(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_3_Primary__IO;            // 0x0C28(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_3_PrimaryCachedSpace;     // 0x0C70(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_3_SecondaryCachedSpace;   // 0x0C80(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_3_bIsInitialized;         // 0x0C90(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_3_Value;    // 0x0CA0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_Value;               // 0x0CC0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC4[0x4];                                      // 0x0CC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_1_3_Buffer;               // 0x0CC8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_1_3_LastInsertIndex;      // 0x0CD8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_4_Result;     // 0x0CE8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_4_Value;      // 0x0D00(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_3_Rotator__IO; // 0x0D20(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	double                                        RigVMModel___Add_1_Result;                         // 0x0D38(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Add_1_A;                              // 0x0D40(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Clamp_1_Result;                       // 0x0D48(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_2_1_Result;                  // 0x0D4C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Add_1_B;                              // 0x0D50(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D58[0x8];                                      // 0x0D58(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SetTransform_3_Value__IO;             // 0x0D60(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___SetTransform_3_CachedIndex;           // 0x0DC0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_Result;   // 0x0DD0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_Rotator__IO; // 0x0DF0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_E08[0x8];                                      // 0x0E08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO; // 0x0E10(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_1_CachedIndex; // 0x0E70(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_1_Result; // 0x0E80(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO; // 0x0EA0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_EB8[0x8];                                      // 0x0EB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_1_1_OffsetTransform__IO; // 0x0EC0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_1_1_CachedIndex; // 0x0F20(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_1_1_Result; // 0x0F30(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_1_1_Rotator__IO; // 0x0F50(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_F68[0x8];                                      // 0x0F68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_1_1_1_OffsetTransform__IO; // 0x0F70(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_1_1_1_CachedIndex; // 0x0FD0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_1_2_Result; // 0x0FE0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_1_2_Rotator__IO; // 0x1000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_1018[0x8];                                     // 0x1018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_1_1_2_OffsetTransform__IO; // 0x1020(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_1_1_2_CachedIndex; // 0x1080(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_HRK_1MGC_Locomotion_CtrlRig.RigVMMemory_Work", true>();
	}
	static class SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work) == 0x001090, "Wrong size on SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Element) == 0x000030, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Element' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Result) == 0x000040, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Result) == 0x000060, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatMul_Result) == 0x000064, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatMul_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatMul_A) == 0x000068, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatMul_A' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Buffer) == 0x000070, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_LastInsertIndex) == 0x000080, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Rotator__IO) == 0x000090, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_OffsetTransform__IO) == 0x0000B0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_CachedIndex) == 0x000110, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_Items__IO) == 0x000120, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Index) == 0x000130, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Index' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Count) == 0x000134, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Count' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Ratio) == 0x000138, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_Ratio' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun) == 0x00013C, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Result) == 0x000150, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_Result) == 0x000170, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Result) == 0x000174, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Result) == 0x000178, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Result) == 0x000190, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x0001F0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x000250, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_Global) == 0x000260, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_Global' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Primary__IO) == 0x000278, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_PrimaryCachedSpace) == 0x0002C0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_SecondaryCachedSpace) == 0x0002D0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_bIsInitialized) == 0x0002E0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Value) == 0x0002F0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Value) == 0x000310, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_Buffer) == 0x000318, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_LastInsertIndex) == 0x000328, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Result) == 0x000338, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Value) == 0x000350, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Rotator__IO) == 0x000370, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_Value__IO) == 0x000390, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_CachedIndex) == 0x0003F0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_4_Result) == 0x000400, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_4_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_Result) == 0x000420, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_4_Rotator__IO) == 0x000428, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_4_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO) == 0x000440, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex) == 0x0004A0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_1_Result) == 0x0004B0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_1_Result) == 0x0004D0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_Result) == 0x0004D4, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_Result) == 0x0004D8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_Result) == 0x0004F0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_Transform) == 0x000550, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_CachedIndex) == 0x0005B0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_1_Global) == 0x0005C0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_1_Global' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_Primary__IO) == 0x0005D8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_PrimaryCachedSpace) == 0x000620, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_SecondaryCachedSpace) == 0x000630, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_1_bIsInitialized) == 0x000640, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_1_Value) == 0x000650, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_1_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_1_Value) == 0x000670, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_1_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_1_Buffer) == 0x000678, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_1_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_1_LastInsertIndex) == 0x000688, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_1_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_Result) == 0x000698, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_2_Value) == 0x0006B0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_2_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_1_Rotator__IO) == 0x0006D0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_1_Value__IO) == 0x0006F0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_1_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_1_CachedIndex) == 0x000750, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_5_Result) == 0x000760, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_5_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_1_Result) == 0x000780, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_5_Rotator__IO) == 0x000788, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_5_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_1_OffsetTransform__IO) == 0x0007A0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_1_CachedIndex) == 0x000800, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_2_Result) == 0x000810, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_2_Result) == 0x000830, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_Result) == 0x000834, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_2_Result) == 0x000838, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_Result) == 0x000850, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_Transform) == 0x0008B0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_CachedIndex) == 0x000910, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_2_Global) == 0x000920, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_2_Global' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_Primary__IO) == 0x000938, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_PrimaryCachedSpace) == 0x000980, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_SecondaryCachedSpace) == 0x000990, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_bIsInitialized) == 0x0009A0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_2_Value) == 0x0009B0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_2_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_Value) == 0x0009D0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_2_Buffer) == 0x0009D8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_2_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_2_LastInsertIndex) == 0x0009E8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_2_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_Result) == 0x0009F8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_Value) == 0x000A10, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_2_Rotator__IO) == 0x000A30, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_Result) == 0x000A48, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_A) == 0x000A50, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_A' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Clamp_Result) == 0x000A58, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Clamp_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_2_Result) == 0x000A5C, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFilter_Result) == 0x000A60, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFilter_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFilter_Value) == 0x000A64, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFilter_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFilter_Buffer) == 0x000A68, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFilter_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFilter_LastInsertIndex) == 0x000A78, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFilter_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_B) == 0x000A88, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_B' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_2_Value__IO) == 0x000A90, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_2_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_2_CachedIndex) == 0x000AF0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_3_Result) == 0x000B00, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_3_Result) == 0x000B20, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_Result) == 0x000B24, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_3_Result) == 0x000B28, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_Result) == 0x000B40, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_Transform) == 0x000BA0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_Transform' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_CachedIndex) == 0x000C00, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_3_Global) == 0x000C10, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_3_Global' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_Primary__IO) == 0x000C28, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_PrimaryCachedSpace) == 0x000C70, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_SecondaryCachedSpace) == 0x000C80, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_bIsInitialized) == 0x000C90, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_3_Value) == 0x000CA0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_3_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_Value) == 0x000CC0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_3_Buffer) == 0x000CC8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_3_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_1_3_LastInsertIndex) == 0x000CD8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_1_3_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_4_Result) == 0x000CE8, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_4_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_4_Value) == 0x000D00, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_4_Value' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_3_Rotator__IO) == 0x000D20, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_3_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_1_Result) == 0x000D38, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_1_A) == 0x000D40, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_1_A' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Clamp_1_Result) == 0x000D48, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Clamp_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_2_1_Result) == 0x000D4C, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Add_1_B) == 0x000D50, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Add_1_B' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_3_Value__IO) == 0x000D60, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_3_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___SetTransform_3_CachedIndex) == 0x000DC0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___SetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_Result) == 0x000DD0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_Rotator__IO) == 0x000DF0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO) == 0x000E10, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_CachedIndex) == 0x000E70, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_Result) == 0x000E80, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO) == 0x000EA0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_1_OffsetTransform__IO) == 0x000EC0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_1_CachedIndex) == 0x000F20, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_1_Result) == 0x000F30, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_1_Rotator__IO) == 0x000F50, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_1_1_OffsetTransform__IO) == 0x000F70, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_1_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_1_1_CachedIndex) == 0x000FD0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_2_Result) == 0x000FE0, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_2_Rotator__IO) == 0x001000, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_1_2_OffsetTransform__IO) == 0x001020, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_1_2_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_1_2_CachedIndex) == 0x001080, "Member 'SK_HRK_1MGC_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_1_2_CachedIndex' has a wrong offset!");

}

