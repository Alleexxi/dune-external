#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_CommonTechArt

#include "Basic.hpp"

#include "BPFL_CommonTechArt_classes.hpp"
#include "BPFL_CommonTechArt_parameters.hpp"


namespace SDK
{

// Function BPFL_CommonTechArt.BPFL_CommonTechArt_C.Clamp Linear Color
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FLinearColor&              In_Color                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor*                    Clamped_Color                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_CommonTechArt_C::Clamp_Linear_Color(const struct FLinearColor& In_Color, double Min, double Max, class UObject* __WorldContext, struct FLinearColor* Clamped_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonTechArt_C", "Clamp Linear Color");

	Params::BPFL_CommonTechArt_C_Clamp_Linear_Color Parms{};

	Parms.In_Color = std::move(In_Color);
	Parms.Min = Min;
	Parms.Max = Max;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Clamped_Color != nullptr)
		*Clamped_Color = std::move(Parms.Clamped_Color);
}


// Function BPFL_CommonTechArt.BPFL_CommonTechArt_C.Get System Path from Level path
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class FString&                    In_Path                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString*                          Return_Value                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBPFL_CommonTechArt_C::Get_System_Path_from_Level_path(const class FString& In_Path, class UObject* __WorldContext, class FString* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonTechArt_C", "Get System Path from Level path");

	Params::BPFL_CommonTechArt_C_Get_System_Path_from_Level_path Parms{};

	Parms.In_Path = std::move(In_Path);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = std::move(Parms.Return_Value);
}


// Function BPFL_CommonTechArt.BPFL_CommonTechArt_C.LinearColorToVector4
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FLinearColor&              Linear_Color                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector4*                        Vector_4                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_CommonTechArt_C::LinearColorToVector4(const struct FLinearColor& Linear_Color, class UObject* __WorldContext, struct FVector4* Vector_4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonTechArt_C", "LinearColorToVector4");

	Params::BPFL_CommonTechArt_C_LinearColorToVector4 Parms{};

	Parms.Linear_Color = std::move(Linear_Color);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Vector_4 != nullptr)
		*Vector_4 = std::move(Parms.Vector_4);
}


// Function BPFL_CommonTechArt.BPFL_CommonTechArt_C.Pack Channel Selection Into Float
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FLinearColor&              Channel_Selection                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 Packed_Float                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_CommonTechArt_C::Pack_Channel_Selection_Into_Float(const struct FLinearColor& Channel_Selection, class UObject* __WorldContext, double* Packed_Float)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonTechArt_C", "Pack Channel Selection Into Float");

	Params::BPFL_CommonTechArt_C_Pack_Channel_Selection_Into_Float Parms{};

	Parms.Channel_Selection = std::move(Channel_Selection);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Packed_Float != nullptr)
		*Packed_Float = Parms.Packed_Float;
}


// Function BPFL_CommonTechArt.BPFL_CommonTechArt_C.Pack Linear Color Into Float
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FLinearColor&              Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 PackedFloat                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_CommonTechArt_C::Pack_Linear_Color_Into_Float(const struct FLinearColor& Color, class UObject* __WorldContext, double* PackedFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonTechArt_C", "Pack Linear Color Into Float");

	Params::BPFL_CommonTechArt_C_Pack_Linear_Color_Into_Float Parms{};

	Parms.Color = std::move(Color);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PackedFloat != nullptr)
		*PackedFloat = Parms.PackedFloat;
}


// Function BPFL_CommonTechArt.BPFL_CommonTechArt_C.Pack Normalized Vector Into Float
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 PackedFloat                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_CommonTechArt_C::Pack_Normalized_Vector_Into_Float(const struct FVector& Vector, class UObject* __WorldContext, double* PackedFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonTechArt_C", "Pack Normalized Vector Into Float");

	Params::BPFL_CommonTechArt_C_Pack_Normalized_Vector_Into_Float Parms{};

	Parms.Vector = std::move(Vector);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PackedFloat != nullptr)
		*PackedFloat = Parms.PackedFloat;
}


// Function BPFL_CommonTechArt.BPFL_CommonTechArt_C.SetDefaultCustomPrimitiveDataColorLinearRGB
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   DataIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              InColor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_CommonTechArt_C::SetDefaultCustomPrimitiveDataColorLinearRGB(class UPrimitiveComponent* Target, int32 DataIndex, const struct FLinearColor& InColor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonTechArt_C", "SetDefaultCustomPrimitiveDataColorLinearRGB");

	Params::BPFL_CommonTechArt_C_SetDefaultCustomPrimitiveDataColorLinearRGB Parms{};

	Parms.Target = Target;
	Parms.DataIndex = DataIndex;
	Parms.InColor = std::move(InColor);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_CommonTechArt.BPFL_CommonTechArt_C.SetDefaultCustomPrimitiveDataColorLinearRGBA
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   DataIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              InColor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_CommonTechArt_C::SetDefaultCustomPrimitiveDataColorLinearRGBA(class UPrimitiveComponent* Target, int32 DataIndex, const struct FLinearColor& InColor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonTechArt_C", "SetDefaultCustomPrimitiveDataColorLinearRGBA");

	Params::BPFL_CommonTechArt_C_SetDefaultCustomPrimitiveDataColorLinearRGBA Parms{};

	Parms.Target = Target;
	Parms.DataIndex = DataIndex;
	Parms.InColor = std::move(InColor);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_CommonTechArt.BPFL_CommonTechArt_C.Vector Elements Ordered By Size
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Vecotor_to_process                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Element_Size_Ordered_Vector                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_CommonTechArt_C::Vector_Elements_Ordered_By_Size(const struct FVector& Vecotor_to_process, class UObject* __WorldContext, struct FVector* Element_Size_Ordered_Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonTechArt_C", "Vector Elements Ordered By Size");

	Params::BPFL_CommonTechArt_C_Vector_Elements_Ordered_By_Size Parms{};

	Parms.Vecotor_to_process = std::move(Vecotor_to_process);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Element_Size_Ordered_Vector != nullptr)
		*Element_Size_Ordered_Vector = std::move(Parms.Element_Size_Ordered_Vector);
}


// Function BPFL_CommonTechArt.BPFL_CommonTechArt_C.Gather Dependencies
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FAssetData>&              Objects_to_check                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UClass*>&                  Classes_to_collect_                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Recursive                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Also_scan_references_                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FAssetData>*              Referenced_Assets_Data_                                (Parm, OutParm)

void UBPFL_CommonTechArt_C::Gather_Dependencies(TArray<struct FAssetData>& Objects_to_check, TArray<class UClass*>& Classes_to_collect_, bool Recursive, bool Also_scan_references_, class UObject* __WorldContext, TArray<struct FAssetData>* Referenced_Assets_Data_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPFL_CommonTechArt_C", "Gather Dependencies");

	Params::BPFL_CommonTechArt_C_Gather_Dependencies Parms{};

	Parms.Objects_to_check = std::move(Objects_to_check);
	Parms.Classes_to_collect_ = std::move(Classes_to_collect_);
	Parms.Recursive = Recursive;
	Parms.Also_scan_references_ = Also_scan_references_;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	Objects_to_check = std::move(Parms.Objects_to_check);
	Classes_to_collect_ = std::move(Parms.Classes_to_collect_);

	if (Referenced_Assets_Data_ != nullptr)
		*Referenced_Assets_Data_ = std::move(Parms.Referenced_Assets_Data_);
}

}

