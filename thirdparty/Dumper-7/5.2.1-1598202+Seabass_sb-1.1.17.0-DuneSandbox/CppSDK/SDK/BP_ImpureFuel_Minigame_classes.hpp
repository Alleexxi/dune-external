#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ImpureFuel_Minigame

#include "Basic.hpp"

#include "BP_ResourceNode_DestructibleMesh_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ImpureFuel_Minigame.BP_ImpureFuel_Minigame_C
// 0x00A0 (0x07E8 - 0x0748)
class ABP_ImpureFuel_Minigame_C final : public ABP_ResourceNode_DestructibleMesh_C
{
public:
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G3V3;                           // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G2V3;                           // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G4V1;                           // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G3V2;                           // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G3V1;                           // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G2V2;                           // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G1V2;                           // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G1V1;                           // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G1V3;                           // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G2V1;                           // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G4V3;                           // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineComponent*           ResourceNodeSpline_G4V2;                           // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow_G4;                                          // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow_G1;                                          // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow_G2;                                          // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow_G3;                                          // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AIMTransitionCurve;                                // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AIMCurrentTransitionTime;                          // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AIMDistToNodeScalar;                               // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ProjectionPlane;                                   // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ImpureFuel_Minigame_C">();
	}
	static class ABP_ImpureFuel_Minigame_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ImpureFuel_Minigame_C>();
	}
};
static_assert(alignof(ABP_ImpureFuel_Minigame_C) == 0x000008, "Wrong alignment on ABP_ImpureFuel_Minigame_C");
static_assert(sizeof(ABP_ImpureFuel_Minigame_C) == 0x0007E8, "Wrong size on ABP_ImpureFuel_Minigame_C");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G3V3) == 0x000748, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G3V3' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G2V3) == 0x000750, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G2V3' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G4V1) == 0x000758, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G4V1' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G3V2) == 0x000760, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G3V2' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G3V1) == 0x000768, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G3V1' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G2V2) == 0x000770, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G2V2' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G1V2) == 0x000778, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G1V2' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G1V1) == 0x000780, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G1V1' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G1V3) == 0x000788, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G1V3' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G2V1) == 0x000790, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G2V1' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G4V3) == 0x000798, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G4V3' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ResourceNodeSpline_G4V2) == 0x0007A0, "Member 'ABP_ImpureFuel_Minigame_C::ResourceNodeSpline_G4V2' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, Arrow_G4) == 0x0007A8, "Member 'ABP_ImpureFuel_Minigame_C::Arrow_G4' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, Arrow_G1) == 0x0007B0, "Member 'ABP_ImpureFuel_Minigame_C::Arrow_G1' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, Arrow_G2) == 0x0007B8, "Member 'ABP_ImpureFuel_Minigame_C::Arrow_G2' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, Arrow_G3) == 0x0007C0, "Member 'ABP_ImpureFuel_Minigame_C::Arrow_G3' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, AIMTransitionCurve) == 0x0007C8, "Member 'ABP_ImpureFuel_Minigame_C::AIMTransitionCurve' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, AIMCurrentTransitionTime) == 0x0007D0, "Member 'ABP_ImpureFuel_Minigame_C::AIMCurrentTransitionTime' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, AIMDistToNodeScalar) == 0x0007D8, "Member 'ABP_ImpureFuel_Minigame_C::AIMDistToNodeScalar' has a wrong offset!");
static_assert(offsetof(ABP_ImpureFuel_Minigame_C, ProjectionPlane) == 0x0007E0, "Member 'ABP_ImpureFuel_Minigame_C::ProjectionPlane' has a wrong offset!");

}

