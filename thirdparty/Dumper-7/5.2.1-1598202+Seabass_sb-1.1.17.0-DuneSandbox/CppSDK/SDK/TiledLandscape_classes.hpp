#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TiledLandscape

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "TiledLandscape_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Landscape_structs.hpp"


namespace SDK
{

// Class TiledLandscape.TiledLandscapeTerrainBlocksDataProviderBase
// 0x0000 (0x0038 - 0x0038)
class UTiledLandscapeTerrainBlocksDataProviderBase final : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TiledLandscapeTerrainBlocksDataProviderBase">();
	}
	static class UTiledLandscapeTerrainBlocksDataProviderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTiledLandscapeTerrainBlocksDataProviderBase>();
	}
};
static_assert(alignof(UTiledLandscapeTerrainBlocksDataProviderBase) == 0x000008, "Wrong alignment on UTiledLandscapeTerrainBlocksDataProviderBase");
static_assert(sizeof(UTiledLandscapeTerrainBlocksDataProviderBase) == 0x000038, "Wrong size on UTiledLandscapeTerrainBlocksDataProviderBase");

// Class TiledLandscape.LandscapeHoleVolumeBase
// 0x0000 (0x0388 - 0x0388)
class ALandscapeHoleVolumeBase : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeHoleVolumeBase">();
	}
	static class ALandscapeHoleVolumeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeHoleVolumeBase>();
	}
};
static_assert(alignof(ALandscapeHoleVolumeBase) == 0x000008, "Wrong alignment on ALandscapeHoleVolumeBase");
static_assert(sizeof(ALandscapeHoleVolumeBase) == 0x000388, "Wrong size on ALandscapeHoleVolumeBase");

// Class TiledLandscape.LandscapeHoleVolume
// 0x0058 (0x03E0 - 0x0388)
class ALandscapeHoleVolume final : public ALandscapeHoleVolumeBase
{
public:
	TMap<TWeakObjectPtr<class ULandscapeHeightfieldCollisionComponent>, class FName> MaskedCollisionComponentPtrMap; // 0x0388(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D8[0x8];                                      // 0x03D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeHoleVolume">();
	}
	static class ALandscapeHoleVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeHoleVolume>();
	}
};
static_assert(alignof(ALandscapeHoleVolume) == 0x000008, "Wrong alignment on ALandscapeHoleVolume");
static_assert(sizeof(ALandscapeHoleVolume) == 0x0003E0, "Wrong size on ALandscapeHoleVolume");
static_assert(offsetof(ALandscapeHoleVolume, MaskedCollisionComponentPtrMap) == 0x000388, "Member 'ALandscapeHoleVolume::MaskedCollisionComponentPtrMap' has a wrong offset!");

// Class TiledLandscape.BiomeData
// 0x0070 (0x00A0 - 0x0030)
class UBiomeData final : public UObject
{
public:
	TArray<struct FBiomeInfo>                     BiomeInfo;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BiomeDistributionMap;                              // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BiomeDistributionWidth;                            // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BiomeDistributionHeight;                           // 0x0054(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PresetDimension;                                   // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBiomeRegionInfo>               RegionInfo;                                        // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 RegionMap;                                         // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RegionMapWidth;                                    // 0x0088(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegionMapHeight;                                   // 0x008C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32>                                TransitionTileVersions;                            // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BiomeData">();
	}
	static class UBiomeData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBiomeData>();
	}
};
static_assert(alignof(UBiomeData) == 0x000008, "Wrong alignment on UBiomeData");
static_assert(sizeof(UBiomeData) == 0x0000A0, "Wrong size on UBiomeData");
static_assert(offsetof(UBiomeData, BiomeInfo) == 0x000030, "Member 'UBiomeData::BiomeInfo' has a wrong offset!");
static_assert(offsetof(UBiomeData, BiomeDistributionMap) == 0x000040, "Member 'UBiomeData::BiomeDistributionMap' has a wrong offset!");
static_assert(offsetof(UBiomeData, BiomeDistributionWidth) == 0x000050, "Member 'UBiomeData::BiomeDistributionWidth' has a wrong offset!");
static_assert(offsetof(UBiomeData, BiomeDistributionHeight) == 0x000054, "Member 'UBiomeData::BiomeDistributionHeight' has a wrong offset!");
static_assert(offsetof(UBiomeData, PresetDimension) == 0x000058, "Member 'UBiomeData::PresetDimension' has a wrong offset!");
static_assert(offsetof(UBiomeData, RegionInfo) == 0x000068, "Member 'UBiomeData::RegionInfo' has a wrong offset!");
static_assert(offsetof(UBiomeData, RegionMap) == 0x000078, "Member 'UBiomeData::RegionMap' has a wrong offset!");
static_assert(offsetof(UBiomeData, RegionMapWidth) == 0x000088, "Member 'UBiomeData::RegionMapWidth' has a wrong offset!");
static_assert(offsetof(UBiomeData, RegionMapHeight) == 0x00008C, "Member 'UBiomeData::RegionMapHeight' has a wrong offset!");
static_assert(offsetof(UBiomeData, TransitionTileVersions) == 0x000090, "Member 'UBiomeData::TransitionTileVersions' has a wrong offset!");

// Class TiledLandscape.TiledLandscapeManager
// 0x0648 (0x0680 - 0x0038)
class UTiledLandscapeManager final : public UDataAsset
{
public:
	class UBiomeData*                             BiomeData;                                         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBiomeData*                             DeepDesertData;                                    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StreamingDistance;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VistaTilesNorth;                                   // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VistaTilesEast;                                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VistaTilesSouth;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         VistaTilesWest;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxHeightmapTextureSize;                           // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumLOD;                                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTiledLandscapeTileLODEntryDetails     LOD1;                                              // 0x0068(0x0168)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FTiledLandscapeTileLODEntryDetails     LOD2;                                              // 0x01D0(0x0168)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FTiledLandscapeTileLODEntryDetails     LOD3;                                              // 0x0338(0x0168)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FTiledLandscapeTileLODEntryDetails     LOD4;                                              // 0x04A0(0x0168)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	TArray<struct FTileHoleData>                  TileHoles;                                         // 0x0608(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UTileLoadedCallbackHole*>        TileHoleCallbacks;                                 // 0x0618(0x0010)(ZeroConstructor, Transient, DuplicateTransient, NonPIEDuplicateTransient, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FIntPoint>           UniqueTileDetailsByNameMap;                        // 0x0628(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_678[0x8];                                      // 0x0678(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TiledLandscapeManager">();
	}
	static class UTiledLandscapeManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTiledLandscapeManager>();
	}
};
static_assert(alignof(UTiledLandscapeManager) == 0x000008, "Wrong alignment on UTiledLandscapeManager");
static_assert(sizeof(UTiledLandscapeManager) == 0x000680, "Wrong size on UTiledLandscapeManager");
static_assert(offsetof(UTiledLandscapeManager, BiomeData) == 0x000038, "Member 'UTiledLandscapeManager::BiomeData' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, DeepDesertData) == 0x000040, "Member 'UTiledLandscapeManager::DeepDesertData' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, StreamingDistance) == 0x000048, "Member 'UTiledLandscapeManager::StreamingDistance' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, VistaTilesNorth) == 0x00004C, "Member 'UTiledLandscapeManager::VistaTilesNorth' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, VistaTilesEast) == 0x000050, "Member 'UTiledLandscapeManager::VistaTilesEast' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, VistaTilesSouth) == 0x000054, "Member 'UTiledLandscapeManager::VistaTilesSouth' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, VistaTilesWest) == 0x000058, "Member 'UTiledLandscapeManager::VistaTilesWest' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, MaxHeightmapTextureSize) == 0x00005C, "Member 'UTiledLandscapeManager::MaxHeightmapTextureSize' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, NumLOD) == 0x000060, "Member 'UTiledLandscapeManager::NumLOD' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, LOD1) == 0x000068, "Member 'UTiledLandscapeManager::LOD1' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, LOD2) == 0x0001D0, "Member 'UTiledLandscapeManager::LOD2' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, LOD3) == 0x000338, "Member 'UTiledLandscapeManager::LOD3' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, LOD4) == 0x0004A0, "Member 'UTiledLandscapeManager::LOD4' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, TileHoles) == 0x000608, "Member 'UTiledLandscapeManager::TileHoles' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, TileHoleCallbacks) == 0x000618, "Member 'UTiledLandscapeManager::TileHoleCallbacks' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeManager, UniqueTileDetailsByNameMap) == 0x000628, "Member 'UTiledLandscapeManager::UniqueTileDetailsByNameMap' has a wrong offset!");

// Class TiledLandscape.TileLoadedCallbackHole
// 0x0020 (0x0050 - 0x0030)
class UTileLoadedCallbackHole final : public UObject
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTileLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TileLoadedCallbackHole">();
	}
	static class UTileLoadedCallbackHole* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTileLoadedCallbackHole>();
	}
};
static_assert(alignof(UTileLoadedCallbackHole) == 0x000008, "Wrong alignment on UTileLoadedCallbackHole");
static_assert(sizeof(UTileLoadedCallbackHole) == 0x000050, "Wrong size on UTileLoadedCallbackHole");

// Class TiledLandscape.TiledLandscapeGeneralSettings
// 0x0018 (0x0048 - 0x0030)
class UTiledLandscapeGeneralSettings final : public UObject
{
public:
	bool                                          bRebuildAllBiomes;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TransitionTileVersion;                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkAreaXStart;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkAreaYStart;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkAreaWidth;                                     // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkAreaHeight;                                    // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TiledLandscapeGeneralSettings">();
	}
	static class UTiledLandscapeGeneralSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTiledLandscapeGeneralSettings>();
	}
};
static_assert(alignof(UTiledLandscapeGeneralSettings) == 0x000008, "Wrong alignment on UTiledLandscapeGeneralSettings");
static_assert(sizeof(UTiledLandscapeGeneralSettings) == 0x000048, "Wrong size on UTiledLandscapeGeneralSettings");
static_assert(offsetof(UTiledLandscapeGeneralSettings, bRebuildAllBiomes) == 0x000030, "Member 'UTiledLandscapeGeneralSettings::bRebuildAllBiomes' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeGeneralSettings, TransitionTileVersion) == 0x000034, "Member 'UTiledLandscapeGeneralSettings::TransitionTileVersion' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeGeneralSettings, WorkAreaXStart) == 0x000038, "Member 'UTiledLandscapeGeneralSettings::WorkAreaXStart' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeGeneralSettings, WorkAreaYStart) == 0x00003C, "Member 'UTiledLandscapeGeneralSettings::WorkAreaYStart' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeGeneralSettings, WorkAreaWidth) == 0x000040, "Member 'UTiledLandscapeGeneralSettings::WorkAreaWidth' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeGeneralSettings, WorkAreaHeight) == 0x000044, "Member 'UTiledLandscapeGeneralSettings::WorkAreaHeight' has a wrong offset!");

// Class TiledLandscape.TiledLandscapeLODSettings
// 0x0028 (0x0058 - 0x0030)
class UTiledLandscapeLODSettings final : public UObject
{
public:
	int32                                         MaxLODLevel;                                       // 0x0030(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComponentScreenSizeToUseSubSections;               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLandscapeProxyMaterialOverride> LODMaterialOverrides;                             // 0x0038(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	TArray<struct FLandscapePerLODMaterialOverride> PerLODMaterialOverrides;                         // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TiledLandscapeLODSettings">();
	}
	static class UTiledLandscapeLODSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTiledLandscapeLODSettings>();
	}
};
static_assert(alignof(UTiledLandscapeLODSettings) == 0x000008, "Wrong alignment on UTiledLandscapeLODSettings");
static_assert(sizeof(UTiledLandscapeLODSettings) == 0x000058, "Wrong size on UTiledLandscapeLODSettings");
static_assert(offsetof(UTiledLandscapeLODSettings, MaxLODLevel) == 0x000030, "Member 'UTiledLandscapeLODSettings::MaxLODLevel' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeLODSettings, ComponentScreenSizeToUseSubSections) == 0x000034, "Member 'UTiledLandscapeLODSettings::ComponentScreenSizeToUseSubSections' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeLODSettings, LODMaterialOverrides) == 0x000038, "Member 'UTiledLandscapeLODSettings::LODMaterialOverrides' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeLODSettings, PerLODMaterialOverrides) == 0x000048, "Member 'UTiledLandscapeLODSettings::PerLODMaterialOverrides' has a wrong offset!");

// Class TiledLandscape.TiledLandscapeRVTSettings
// 0x0040 (0x0070 - 0x0030)
class UTiledLandscapeRVTSettings final : public UObject
{
public:
	TSoftObjectPtr<class UMaterialInterface>      MaterialOverride;                                  // 0x0030(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class URuntimeVirtualTexture>> RuntimeVirtualTextures;                     // 0x0060(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TiledLandscapeRVTSettings">();
	}
	static class UTiledLandscapeRVTSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTiledLandscapeRVTSettings>();
	}
};
static_assert(alignof(UTiledLandscapeRVTSettings) == 0x000008, "Wrong alignment on UTiledLandscapeRVTSettings");
static_assert(sizeof(UTiledLandscapeRVTSettings) == 0x000070, "Wrong size on UTiledLandscapeRVTSettings");
static_assert(offsetof(UTiledLandscapeRVTSettings, MaterialOverride) == 0x000030, "Member 'UTiledLandscapeRVTSettings::MaterialOverride' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeRVTSettings, RuntimeVirtualTextures) == 0x000060, "Member 'UTiledLandscapeRVTSettings::RuntimeVirtualTextures' has a wrong offset!");

// Class TiledLandscape.TiledLandscapeTerrainBlockSettings
// 0x0040 (0x0070 - 0x0030)
class UTiledLandscapeTerrainBlockSettings final : public UObject
{
public:
	class FString                                 TerrainBlockArtLevelPostfix;                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTiledLandscapeTerrainBlocksDataProviderBase> TerrainBlockProvider;         // 0x0040(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TiledLandscapeTerrainBlockSettings">();
	}
	static class UTiledLandscapeTerrainBlockSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTiledLandscapeTerrainBlockSettings>();
	}
};
static_assert(alignof(UTiledLandscapeTerrainBlockSettings) == 0x000008, "Wrong alignment on UTiledLandscapeTerrainBlockSettings");
static_assert(sizeof(UTiledLandscapeTerrainBlockSettings) == 0x000070, "Wrong size on UTiledLandscapeTerrainBlockSettings");
static_assert(offsetof(UTiledLandscapeTerrainBlockSettings, TerrainBlockArtLevelPostfix) == 0x000030, "Member 'UTiledLandscapeTerrainBlockSettings::TerrainBlockArtLevelPostfix' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeTerrainBlockSettings, TerrainBlockProvider) == 0x000040, "Member 'UTiledLandscapeTerrainBlockSettings::TerrainBlockProvider' has a wrong offset!");

// Class TiledLandscape.TiledLandscapeSettings
// 0x0030 (0x0060 - 0x0030)
class UTiledLandscapeSettings final : public UObject
{
public:
	class UTiledLandscapeGeneralSettings*         General;                                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTiledLandscapeLODSettings*             LOD;                                               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTiledLandscapeRVTSettings*             RVT;                                               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTiledLandscapeRVTSettings*             TerrainBlockRVT;                                   // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTiledLandscapeLODSettings*             TerrainBlockLOD;                                   // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTiledLandscapeTerrainBlockSettings*    TerrainBlock;                                      // 0x0058(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TiledLandscapeSettings">();
	}
	static class UTiledLandscapeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTiledLandscapeSettings>();
	}
};
static_assert(alignof(UTiledLandscapeSettings) == 0x000008, "Wrong alignment on UTiledLandscapeSettings");
static_assert(sizeof(UTiledLandscapeSettings) == 0x000060, "Wrong size on UTiledLandscapeSettings");
static_assert(offsetof(UTiledLandscapeSettings, General) == 0x000030, "Member 'UTiledLandscapeSettings::General' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeSettings, LOD) == 0x000038, "Member 'UTiledLandscapeSettings::LOD' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeSettings, RVT) == 0x000040, "Member 'UTiledLandscapeSettings::RVT' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeSettings, TerrainBlockRVT) == 0x000048, "Member 'UTiledLandscapeSettings::TerrainBlockRVT' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeSettings, TerrainBlockLOD) == 0x000050, "Member 'UTiledLandscapeSettings::TerrainBlockLOD' has a wrong offset!");
static_assert(offsetof(UTiledLandscapeSettings, TerrainBlock) == 0x000058, "Member 'UTiledLandscapeSettings::TerrainBlock' has a wrong offset!");

}

