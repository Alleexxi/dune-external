#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CollisionVolume

#include "Basic.hpp"

#include "BP_CollisionVolume_classes.hpp"
#include "BP_CollisionVolume_parameters.hpp"


namespace SDK
{

// Function BP_CollisionVolume.BP_CollisionVolume_C.ExecuteUbergraph_BP_CollisionVolume
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollisionVolume_C::ExecuteUbergraph_BP_CollisionVolume(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionVolume_C", "ExecuteUbergraph_BP_CollisionVolume");

	Params::BP_CollisionVolume_C_ExecuteUbergraph_BP_CollisionVolume Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionVolume.BP_CollisionVolume_C.PostUserConstructionScript
// (Event, Protected, BlueprintEvent)

void ABP_CollisionVolume_C::PostUserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionVolume_C", "PostUserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionVolume.BP_CollisionVolume_C.Set Collision Profile 
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CollisionVolume_C::Set_Collision_Profile_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionVolume_C", "Set Collision Profile ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionVolume.BP_CollisionVolume_C.Set Physical Material
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CollisionVolume_C::Set_Physical_Material()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionVolume_C", "Set Physical Material");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionVolume.BP_CollisionVolume_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CollisionVolume_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionVolume_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionVolume.BP_CollisionVolume_C.IsClimbable
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class AActor*                     InActor                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_CollisionVolume_C::IsClimbable(const class AActor* InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionVolume_C", "IsClimbable");

	Params::BP_CollisionVolume_C_IsClimbable Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

