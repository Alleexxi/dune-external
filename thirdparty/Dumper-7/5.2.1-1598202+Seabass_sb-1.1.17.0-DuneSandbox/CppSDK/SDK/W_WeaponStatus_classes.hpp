#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WeaponStatus

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_WeaponStatus.W_WeaponStatus_C
// 0x0090 (0x05D0 - 0x0540)
class UW_WeaponStatus_C final : public UWeaponStatusWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0540(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       InventoryAmmo;                                     // 0x0548(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Ammo;                                              // 0x0550(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LowAmmo;                                           // 0x0558(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       NoInventoryAmmo;                                   // 0x0560(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       NoAmmo;                                            // 0x0568(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hide;                                              // 0x0570(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 ActiveHorizontalLine;                              // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridPanel*                             ActiveWeaponGrid;                                  // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             FavoriteItemIcon;                                  // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridPanel*                             FavoriteWeaponGrid;                                // 0x0590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 m_PaddingDecorVerticalLine;                        // 0x0598(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         MaxClipAmmo;                                       // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentClipAmmo;                                   // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Reserve_Ammo;                                      // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVisibleByTag;                                    // 0x05AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AD[0x3];                                      // 0x05AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CharacterStateVisibilityTags;                      // 0x05B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

public:
	void UpdateReserveColor();
	void UpdateFavoriteWeaponVisibility();
	void UpdateAmmoColor();
	void TryUpdateVisibility(const struct FGameplayTag& NewState);
	void OnWeaponChanged(const class FText& InFriendlyName);
	void OnVehicleTurretSet(class ADuneVehicleTurret* InVehicleTurret);
	void OnVehicleTurretRemoved(class ADuneVehicleTurret* InVehicleTurret);
	void OnReserveAmmoChanged(const int32 ReserveAmmo);
	void OnMaxAmmoChanged(const int32 InMaxAmmo);
	void OnHotbarVisibilityChanged(const bool bIsHotbarVisible);
	void OnHideComplete();
	void OnFavoriteWeaponRemoved();
	void OnFavoriteWeaponAdded(const TSoftObjectPtr<class UTexture2D>& Icon);
	void OnCharacterStateChanged(const struct FGameplayTag& PreviousCharacterState, const struct FGameplayTag& NewCharacterState);
	void OnAnimationFinished(const class UWidgetAnimation* Animation);
	void OnAmmoChanged(const int32 InAmmo);
	struct FSlateColor Get_m_AmmoCurrent_ColorAndOpacity();
	void ExecuteUbergraph_W_WeaponStatus(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_WeaponStatus_C">();
	}
	static class UW_WeaponStatus_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_WeaponStatus_C>();
	}
};
static_assert(alignof(UW_WeaponStatus_C) == 0x000010, "Wrong alignment on UW_WeaponStatus_C");
static_assert(sizeof(UW_WeaponStatus_C) == 0x0005D0, "Wrong size on UW_WeaponStatus_C");
static_assert(offsetof(UW_WeaponStatus_C, UberGraphFrame) == 0x000540, "Member 'UW_WeaponStatus_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, InventoryAmmo) == 0x000548, "Member 'UW_WeaponStatus_C::InventoryAmmo' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, Ammo) == 0x000550, "Member 'UW_WeaponStatus_C::Ammo' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, LowAmmo) == 0x000558, "Member 'UW_WeaponStatus_C::LowAmmo' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, NoInventoryAmmo) == 0x000560, "Member 'UW_WeaponStatus_C::NoInventoryAmmo' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, NoAmmo) == 0x000568, "Member 'UW_WeaponStatus_C::NoAmmo' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, Hide) == 0x000570, "Member 'UW_WeaponStatus_C::Hide' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, ActiveHorizontalLine) == 0x000578, "Member 'UW_WeaponStatus_C::ActiveHorizontalLine' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, ActiveWeaponGrid) == 0x000580, "Member 'UW_WeaponStatus_C::ActiveWeaponGrid' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, FavoriteItemIcon) == 0x000588, "Member 'UW_WeaponStatus_C::FavoriteItemIcon' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, FavoriteWeaponGrid) == 0x000590, "Member 'UW_WeaponStatus_C::FavoriteWeaponGrid' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, m_PaddingDecorVerticalLine) == 0x000598, "Member 'UW_WeaponStatus_C::m_PaddingDecorVerticalLine' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, MaxClipAmmo) == 0x0005A0, "Member 'UW_WeaponStatus_C::MaxClipAmmo' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, CurrentClipAmmo) == 0x0005A4, "Member 'UW_WeaponStatus_C::CurrentClipAmmo' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, Reserve_Ammo) == 0x0005A8, "Member 'UW_WeaponStatus_C::Reserve_Ammo' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, IsVisibleByTag) == 0x0005AC, "Member 'UW_WeaponStatus_C::IsVisibleByTag' has a wrong offset!");
static_assert(offsetof(UW_WeaponStatus_C, CharacterStateVisibilityTags) == 0x0005B0, "Member 'UW_WeaponStatus_C::CharacterStateVisibilityTags' has a wrong offset!");

}

