#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PvEDebugInfo

#include "Basic.hpp"

#include "BPI_PvEDebugInfo_classes.hpp"
#include "BPI_PvEDebugInfo_parameters.hpp"


namespace SDK
{

// Function BPI_PvEDebugInfo.BPI_PvEDebugInfo_C.TryTriggerRooms
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADunePlayerCharacter*             Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    TargetInstigator                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PvEDebugInfo_C::TryTriggerRooms(class ADunePlayerCharacter* Instigator, bool TargetInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PvEDebugInfo_C", "TryTriggerRooms");

	Params::BPI_PvEDebugInfo_C_TryTriggerRooms Parms{};

	Parms.Instigator = Instigator;
	Parms.TargetInstigator = TargetInstigator;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PvEDebugInfo.BPI_PvEDebugInfo_C.SetNPCComposition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADunePlayerController*            RequestingPlayer                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class FString&                    NewComposition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_PvEDebugInfo_C::SetNPCComposition(class ADunePlayerController* RequestingPlayer, const class FString& NewComposition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PvEDebugInfo_C", "SetNPCComposition");

	Params::BPI_PvEDebugInfo_C_SetNPCComposition Parms{};

	Parms.RequestingPlayer = RequestingPlayer;
	Parms.NewComposition = std::move(NewComposition);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PvEDebugInfo.BPI_PvEDebugInfo_C.ReceivePvEDescriptorLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PvEDebugInfo_C::ReceivePvEDescriptorLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PvEDebugInfo_C", "ReceivePvEDescriptorLocation");

	Params::BPI_PvEDebugInfo_C_ReceivePvEDescriptorLocation Parms{};

	Parms.Location = std::move(Location);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PvEDebugInfo.BPI_PvEDebugInfo_C.ReceiveDebugInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FF_BP_PvEDebugInfo&        DebugInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_PvEDebugInfo_C::ReceiveDebugInfo(const struct FF_BP_PvEDebugInfo& DebugInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PvEDebugInfo_C", "ReceiveDebugInfo");

	Params::BPI_PvEDebugInfo_C_ReceiveDebugInfo Parms{};

	Parms.DebugInfo = std::move(DebugInfo);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PvEDebugInfo.BPI_PvEDebugInfo_C.IsOverridden
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsOverridden_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          GroupCompName                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_PvEDebugInfo_C::IsOverridden(bool* IsOverridden_0, class FString* GroupCompName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PvEDebugInfo_C", "IsOverridden");

	Params::BPI_PvEDebugInfo_C_IsOverridden Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsOverridden_0 != nullptr)
		*IsOverridden_0 = Parms.IsOverridden_0;

	if (GroupCompName != nullptr)
		*GroupCompName = std::move(Parms.GroupCompName);
}

}

