#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ImprintSystem

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ImprintSystem_structs.hpp"


namespace SDK
{

// Class ImprintSystem.DynamicSandSubSystem
// 0x0038 (0x0070 - 0x0038)
class UDynamicSandSubSystem final : public UWorldSubsystem
{
public:
	TSoftClassPtr<class UClass>                   m_SoftDynamicSandSetupActor;                       // 0x0038(0x0030)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 m_DynamicSandSetupActor;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static bool CanApplyDynamicSandDeformation(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicSandSubSystem">();
	}
	static class UDynamicSandSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicSandSubSystem>();
	}
};
static_assert(alignof(UDynamicSandSubSystem) == 0x000008, "Wrong alignment on UDynamicSandSubSystem");
static_assert(sizeof(UDynamicSandSubSystem) == 0x000070, "Wrong size on UDynamicSandSubSystem");
static_assert(offsetof(UDynamicSandSubSystem, m_SoftDynamicSandSetupActor) == 0x000038, "Member 'UDynamicSandSubSystem::m_SoftDynamicSandSetupActor' has a wrong offset!");
static_assert(offsetof(UDynamicSandSubSystem, m_DynamicSandSetupActor) == 0x000068, "Member 'UDynamicSandSubSystem::m_DynamicSandSetupActor' has a wrong offset!");

// Class ImprintSystem.ImprintCaptureComponent
// 0x0080 (0x0CC0 - 0x0C40)
class UImprintCaptureComponent : public UCustomSceneCaptureComponent2D
{
public:
	bool                                          bEnableCapture;                                    // 0x0C40(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C41[0x7];                                      // 0x0C41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LandscapeImprintMaterial;                          // 0x0C48(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               LandscapeImprintMaterialInstanceDynamic;           // 0x0C50(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImprintCaptureSource                         ImprintCaptureSource;                              // 0x0C58(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFluidNinja;                                    // 0x0C59(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5A[0x2];                                      // 0x0C5A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocationStepGrid;                                  // 0x0C5C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalOffset;                                    // 0x0C60(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDisplacement;                                   // 0x0C64(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilterOutUndergroundDistance;                      // 0x0C68(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6C[0x4];                                      // 0x0C6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 DeformationBufferOutput;                           // 0x0C70(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 DownscaledImprintsTarget;                          // 0x0C78(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 ImprintFinalDestinationRenderTarget;               // 0x0C80(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               FluidNinjaOutputDensityVelocity;                   // 0x0C88(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDeformationBufferCompatibility;             // 0x0C90(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C91[0x7];                                      // 0x0C91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         FluidNinjaContainers;                              // 0x0C98(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CA8[0x18];                                     // 0x0CA8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CaptureImprints(const float DeltaTime);
	void EnableImprintCapture(const bool bEnable);
	bool ShouldComputeDeformation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ImprintCaptureComponent">();
	}
	static class UImprintCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImprintCaptureComponent>();
	}
};
static_assert(alignof(UImprintCaptureComponent) == 0x000010, "Wrong alignment on UImprintCaptureComponent");
static_assert(sizeof(UImprintCaptureComponent) == 0x000CC0, "Wrong size on UImprintCaptureComponent");
static_assert(offsetof(UImprintCaptureComponent, bEnableCapture) == 0x000C40, "Member 'UImprintCaptureComponent::bEnableCapture' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, LandscapeImprintMaterial) == 0x000C48, "Member 'UImprintCaptureComponent::LandscapeImprintMaterial' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, LandscapeImprintMaterialInstanceDynamic) == 0x000C50, "Member 'UImprintCaptureComponent::LandscapeImprintMaterialInstanceDynamic' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, ImprintCaptureSource) == 0x000C58, "Member 'UImprintCaptureComponent::ImprintCaptureSource' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, bUseFluidNinja) == 0x000C59, "Member 'UImprintCaptureComponent::bUseFluidNinja' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, LocationStepGrid) == 0x000C5C, "Member 'UImprintCaptureComponent::LocationStepGrid' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, VerticalOffset) == 0x000C60, "Member 'UImprintCaptureComponent::VerticalOffset' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, MaxDisplacement) == 0x000C64, "Member 'UImprintCaptureComponent::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, FilterOutUndergroundDistance) == 0x000C68, "Member 'UImprintCaptureComponent::FilterOutUndergroundDistance' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, DeformationBufferOutput) == 0x000C70, "Member 'UImprintCaptureComponent::DeformationBufferOutput' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, DownscaledImprintsTarget) == 0x000C78, "Member 'UImprintCaptureComponent::DownscaledImprintsTarget' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, ImprintFinalDestinationRenderTarget) == 0x000C80, "Member 'UImprintCaptureComponent::ImprintFinalDestinationRenderTarget' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, FluidNinjaOutputDensityVelocity) == 0x000C88, "Member 'UImprintCaptureComponent::FluidNinjaOutputDensityVelocity' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, bEnableDeformationBufferCompatibility) == 0x000C90, "Member 'UImprintCaptureComponent::bEnableDeformationBufferCompatibility' has a wrong offset!");
static_assert(offsetof(UImprintCaptureComponent, FluidNinjaContainers) == 0x000C98, "Member 'UImprintCaptureComponent::FluidNinjaContainers' has a wrong offset!");

}

