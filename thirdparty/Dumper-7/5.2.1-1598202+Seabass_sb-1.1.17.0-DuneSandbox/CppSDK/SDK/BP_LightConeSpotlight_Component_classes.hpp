#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightConeSpotlight_Component

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightConeSpotlight_Component.BP_LightConeSpotlight_Component_C
// 0x0008 (0x0130 - 0x0128)
class UBP_LightConeSpotlight_Component_C final : public UActorComponent
{
public:
	class UMaterialInterface*                     SpotlightMaterial;                                 // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ScaleSpotlightConeMeshToFitSpotlight(class USpotLightComponent* SpotLight, class USceneComponent* Spotlight_Cone_Mesh);
	void SetAtmosphericMaterialValues(class USpotLightComponent* SpotLight, class UPrimitiveComponent* SpotlightConeMesh, double AtmosphericIntensity, double AtmosphericSourceIntensity, bool TurnOffLightConeDuringDay_, double LengthOfTransition, double HourShift, double MinimumDayIntensity, class UMaterialInstanceDynamic** DynamicMaterialInstance);
	void SetEmissiveMaterialValues(class USpotLightComponent* SpotLight, class UPrimitiveComponent* StaticMesh, int32 EmissiveMaterialIndex, class FName EmissiveColorParameterName, class FName EmissiveIntensityParameterName, double* MaxEmissiveIntensity, class UMaterialInstanceDynamic** DynamicMaterialInstance);
	void SetLightValues(class USpotLightComponent* SpotLight, const struct FLinearColor& LightColor, double MaxLightIntensity, double AttenuationRadius, double InnerConeAngle, double OuterConeAngle);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightConeSpotlight_Component_C">();
	}
	static class UBP_LightConeSpotlight_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_LightConeSpotlight_Component_C>();
	}
};
static_assert(alignof(UBP_LightConeSpotlight_Component_C) == 0x000008, "Wrong alignment on UBP_LightConeSpotlight_Component_C");
static_assert(sizeof(UBP_LightConeSpotlight_Component_C) == 0x000130, "Wrong size on UBP_LightConeSpotlight_Component_C");
static_assert(offsetof(UBP_LightConeSpotlight_Component_C, SpotlightMaterial) == 0x000128, "Member 'UBP_LightConeSpotlight_Component_C::SpotlightMaterial' has a wrong offset!");

}

