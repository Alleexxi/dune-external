#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CinematicHandler_Component

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CinematicHandler_Component.BP_CinematicHandler_Component_C
// 0x0028 (0x0150 - 0x0128)
class UBP_CinematicHandler_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0128(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ULevelSequencePlayer*                   Active_Sequence_Player;                            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          IsPlayingCinematic;                                // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Calling_Object;                                    // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FrozeLevelStreaming;                               // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TriggerCinematicOnClient(class ALevelSequenceActor* LevelSequenceActor, class UObject* CallingObject, bool FreezeLevelStreaming);
	void ToggleCinematicMode(bool Value);
	void Set_Cinematic_Mode(bool CinematicMode);
	void Server_NotifyCallerFinishedCinematic(class UObject* CallingObject);
	void PlayCinematicSequence(class ALevelSequenceActor* Sequence, class ULevelSequencePlayer** SequencePlayer);
	void FInishedPlayingCinematic();
	void FinishedCinematic(class UObject* OwningObject);
	void ExecuteUbergraph_BP_CinematicHandler_Component(int32 EntryPoint);
	void CinematicWasStarted();
	void BeginCinematic(class ALevelSequenceActor* LevelSequenceActor, class UObject* CallingObject, bool FreezeLevelStreaming);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CinematicHandler_Component_C">();
	}
	static class UBP_CinematicHandler_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CinematicHandler_Component_C>();
	}
};
static_assert(alignof(UBP_CinematicHandler_Component_C) == 0x000008, "Wrong alignment on UBP_CinematicHandler_Component_C");
static_assert(sizeof(UBP_CinematicHandler_Component_C) == 0x000150, "Wrong size on UBP_CinematicHandler_Component_C");
static_assert(offsetof(UBP_CinematicHandler_Component_C, UberGraphFrame) == 0x000128, "Member 'UBP_CinematicHandler_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CinematicHandler_Component_C, Active_Sequence_Player) == 0x000130, "Member 'UBP_CinematicHandler_Component_C::Active_Sequence_Player' has a wrong offset!");
static_assert(offsetof(UBP_CinematicHandler_Component_C, IsPlayingCinematic) == 0x000138, "Member 'UBP_CinematicHandler_Component_C::IsPlayingCinematic' has a wrong offset!");
static_assert(offsetof(UBP_CinematicHandler_Component_C, Calling_Object) == 0x000140, "Member 'UBP_CinematicHandler_Component_C::Calling_Object' has a wrong offset!");
static_assert(offsetof(UBP_CinematicHandler_Component_C, FrozeLevelStreaming) == 0x000148, "Member 'UBP_CinematicHandler_Component_C::FrozeLevelStreaming' has a wrong offset!");

}

