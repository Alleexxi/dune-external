#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PEvents

#include "Basic.hpp"

#include "BPI_PEvents_classes.hpp"
#include "BPI_PEvents_parameters.hpp"


namespace SDK
{

// Function BPI_PEvents.BPI_PEvents_C.TryTriggerNearestPvEDescriptor
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PEvents_C::TryTriggerNearestPvEDescriptor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PEvents_C", "TryTriggerNearestPvEDescriptor");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_PEvents.BPI_PEvents_C.SetPvEComposition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    NewComposition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_PEvents_C::SetPvEComposition(const class FString& NewComposition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PEvents_C", "SetPvEComposition");

	Params::BPI_PEvents_C_SetPvEComposition Parms{};

	Parms.NewComposition = std::move(NewComposition);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PEvents.BPI_PEvents_C.RequestPvEDebugInfo
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PEvents_C::RequestPvEDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PEvents_C", "RequestPvEDebugInfo");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_PEvents.BPI_PEvents_C.RequestPvECompositionLocation
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PEvents_C::RequestPvECompositionLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PEvents_C", "RequestPvECompositionLocation");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_PEvents.BPI_PEvents_C.ReportEventMsg
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Msg                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_PEvents_C::ReportEventMsg(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PEvents_C", "ReportEventMsg");

	Params::BPI_PEvents_C_ReportEventMsg Parms{};

	Parms.Msg = std::move(Msg);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PEvents.BPI_PEvents_C.ReceivePOIs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FFPlayerEventsPOI>& POIs                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void IBPI_PEvents_C::ReceivePOIs(const TArray<struct FFPlayerEventsPOI>& POIs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PEvents_C", "ReceivePOIs");

	Params::BPI_PEvents_C_ReceivePOIs Parms{};

	Parms.POIs = std::move(POIs);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PEvents.BPI_PEvents_C.OnOpen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Admin_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PEvents_C::OnOpen(bool Admin_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PEvents_C", "OnOpen");

	Params::BPI_PEvents_C_OnOpen Parms{};

	Parms.Admin_ = Admin_;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PEvents.BPI_PEvents_C.GetPOIs
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PEvents_C::GetPOIs(class UObject* Instigator, class FName Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PEvents_C", "GetPOIs");

	Params::BPI_PEvents_C_GetPOIs Parms{};

	Parms.Instigator = Instigator;
	Parms.Type = Type;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

