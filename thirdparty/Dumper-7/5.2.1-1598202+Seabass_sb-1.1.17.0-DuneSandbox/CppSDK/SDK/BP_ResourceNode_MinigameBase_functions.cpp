#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ResourceNode_MinigameBase

#include "Basic.hpp"

#include "BP_ResourceNode_MinigameBase_classes.hpp"
#include "BP_ResourceNode_MinigameBase_parameters.hpp"


namespace SDK
{

// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.BPGetActiveFractureLines
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<uint8>*                          OutFractureLineIndices                                 (Parm, OutParm)

void ABP_ResourceNode_MinigameBase_C::BPGetActiveFractureLines(TArray<uint8>* OutFractureLineIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "BPGetActiveFractureLines");

	Params::BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutFractureLineIndices != nullptr)
		*OutFractureLineIndices = std::move(Parms.OutFractureLineIndices);
}


// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.BPGetGroupToScan
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class AActor*                     InScanningActor                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName*                            OutGroupId                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceNode_MinigameBase_C::BPGetGroupToScan(const class AActor* InScanningActor, class FName* OutGroupId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "BPGetGroupToScan");

	Params::BP_ResourceNode_MinigameBase_C_BPGetGroupToScan Parms{};

	Parms.InScanningActor = InScanningActor;

	UObject::ProcessEvent(Func, &Parms);

	if (OutGroupId != nullptr)
		*OutGroupId = Parms.OutGroupId;
}


// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.BPOnFractureLineSegmentActivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             SegmentIndex                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceNode_MinigameBase_C::BPOnFractureLineSegmentActivated(const int32 SegmentIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "BPOnFractureLineSegmentActivated");

	Params::BP_ResourceNode_MinigameBase_C_BPOnFractureLineSegmentActivated Parms{};

	Parms.SegmentIndex = SegmentIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.BPOnNodeScanned
// (Event, Protected, BlueprintEvent)

void ABP_ResourceNode_MinigameBase_C::BPOnNodeScanned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "BPOnNodeScanned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.ExecuteUbergraph_BP_ResourceNode_MinigameBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceNode_MinigameBase_C::ExecuteUbergraph_BP_ResourceNode_MinigameBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "ExecuteUbergraph_BP_ResourceNode_MinigameBase");

	Params::BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.GetComponentsToReactToScan
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class USceneComponent*>*         SceneComponents                                        (Parm, OutParm, ContainsInstancedReference)

void ABP_ResourceNode_MinigameBase_C::GetComponentsToReactToScan(TArray<class USceneComponent*>* SceneComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "GetComponentsToReactToScan");

	Params::BP_ResourceNode_MinigameBase_C_GetComponentsToReactToScan Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SceneComponents != nullptr)
		*SceneComponents = std::move(Parms.SceneComponents);
}


// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.GetFractureLineGroupFromGroupId
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Group_Id                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FF_FractureLineGameplayGroup*    Fracture_Line_Group                                    (Parm, OutParm, HasGetValueTypeHash)

void ABP_ResourceNode_MinigameBase_C::GetFractureLineGroupFromGroupId(class FName Group_Id, struct FF_FractureLineGameplayGroup* Fracture_Line_Group)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "GetFractureLineGroupFromGroupId");

	Params::BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId Parms{};

	Parms.Group_Id = Group_Id;

	UObject::ProcessEvent(Func, &Parms);

	if (Fracture_Line_Group != nullptr)
		*Fracture_Line_Group = std::move(Parms.Fracture_Line_Group);
}


// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.IsParentDestroyed
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FF_FractureLineGameplayGroup&Group                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool*                                   IsDestroyed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceNode_MinigameBase_C::IsParentDestroyed(const struct FF_FractureLineGameplayGroup& Group, bool* IsDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "IsParentDestroyed");

	Params::BP_ResourceNode_MinigameBase_C_IsParentDestroyed Parms{};

	Parms.Group = std::move(Group);

	UObject::ProcessEvent(Func, &Parms);

	if (IsDestroyed != nullptr)
		*IsDestroyed = Parms.IsDestroyed;
}


// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_ResourceNode_MinigameBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.UpdateScannableComponentsCustomDepth
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ResourceNode_MinigameBase_C::UpdateScannableComponentsCustomDepth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "UpdateScannableComponentsCustomDepth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.BPCalculateImpactForceFeedback
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const bool                              bIsHittingFractureLine                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  OutLeftLargeMotorIntensity                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  OutLeftSmallMotorIntensity                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  OutRightLargeMotorIntensity                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  OutRightSmallMotorIntensity                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ResourceNode_MinigameBase_C::BPCalculateImpactForceFeedback(const bool bIsHittingFractureLine, float* OutLeftLargeMotorIntensity, float* OutLeftSmallMotorIntensity, float* OutRightLargeMotorIntensity, float* OutRightSmallMotorIntensity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ResourceNode_MinigameBase_C", "BPCalculateImpactForceFeedback");

	Params::BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback Parms{};

	Parms.bIsHittingFractureLine = bIsHittingFractureLine;

	UObject::ProcessEvent(Func, &Parms);

	if (OutLeftLargeMotorIntensity != nullptr)
		*OutLeftLargeMotorIntensity = Parms.OutLeftLargeMotorIntensity;

	if (OutLeftSmallMotorIntensity != nullptr)
		*OutLeftSmallMotorIntensity = Parms.OutLeftSmallMotorIntensity;

	if (OutRightLargeMotorIntensity != nullptr)
		*OutRightLargeMotorIntensity = Parms.OutRightLargeMotorIntensity;

	if (OutRightSmallMotorIntensity != nullptr)
		*OutRightSmallMotorIntensity = Parms.OutRightSmallMotorIntensity;
}

}

