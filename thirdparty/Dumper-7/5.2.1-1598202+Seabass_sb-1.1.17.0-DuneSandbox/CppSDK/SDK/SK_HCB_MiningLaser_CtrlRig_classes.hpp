#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SK_HCB_MiningLaser_CtrlRig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// RigVMBlueprintGeneratedClass SK_HCB_MiningLaser_CtrlRig.SK_HCB_MiningLaser_CtrlRig_C
// 0x0010 (0x0410 - 0x0400)
class USK_HCB_MiningLaser_CtrlRig_C final : public UControlRig
{
public:
	double                                        AimPitch;                                          // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurretRotation;                                    // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SK_HCB_MiningLaser_CtrlRig_C">();
	}
	static class USK_HCB_MiningLaser_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USK_HCB_MiningLaser_CtrlRig_C>();
	}
};
static_assert(alignof(USK_HCB_MiningLaser_CtrlRig_C) == 0x000008, "Wrong alignment on USK_HCB_MiningLaser_CtrlRig_C");
static_assert(sizeof(USK_HCB_MiningLaser_CtrlRig_C) == 0x000410, "Wrong size on USK_HCB_MiningLaser_CtrlRig_C");
static_assert(offsetof(USK_HCB_MiningLaser_CtrlRig_C, AimPitch) == 0x000400, "Member 'USK_HCB_MiningLaser_CtrlRig_C::AimPitch' has a wrong offset!");
static_assert(offsetof(USK_HCB_MiningLaser_CtrlRig_C, TurretRotation) == 0x000408, "Member 'USK_HCB_MiningLaser_CtrlRig_C::TurretRotation' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_HCB_MiningLaser_CtrlRig.RigVMMemory_Literal
// 0x00A0 (0x00D0 - 0x0030)
class SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_Item__Const; // 0x0030(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__Const; // 0x0040(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__Const; // 0x00A0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         RigVMModel___RigUnit_OffsetTransformForItem_Weight__Const; // 0x00B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_OffsetTransformForItem_bPropagateToChildren__Const; // 0x00BC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_2_Item__Const; // 0x00C0(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_HCB_MiningLaser_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal) == 0x0000D0, "Wrong size on SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_Item__Const) == 0x000030, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__Const) == 0x000040, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal, RigVMModel___MathQuaternionFromRotator_Rotator__Const) == 0x0000A0, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal::RigVMModel___MathQuaternionFromRotator_Rotator__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_Weight__Const) == 0x0000B8, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_Weight__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_bPropagateToChildren__Const) == 0x0000BC, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_2_Item__Const) == 0x0000C0, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_2_Item__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_HCB_MiningLaser_CtrlRig.RigVMMemory_Work
// 0x0160 (0x0190 - 0x0030)
class SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_Result;     // 0x0030(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__IO; // 0x0050(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO; // 0x0070(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex; // 0x00D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_Result;   // 0x00E0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_Rotator__IO; // 0x0100(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_2_OffsetTransform__IO; // 0x0120(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_2_CachedIndex; // 0x0180(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_HCB_MiningLaser_CtrlRig.RigVMMemory_Work", true>();
	}
	static class SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work) == 0x000190, "Wrong size on SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Result) == 0x000030, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Rotator__IO) == 0x000050, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO) == 0x000070, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex) == 0x0000D0, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_Result) == 0x0000E0, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_Rotator__IO) == 0x000100, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_2_OffsetTransform__IO) == 0x000120, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_2_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_2_CachedIndex) == 0x000180, "Member 'SK_HCB_MiningLaser_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_2_CachedIndex' has a wrong offset!");

}

