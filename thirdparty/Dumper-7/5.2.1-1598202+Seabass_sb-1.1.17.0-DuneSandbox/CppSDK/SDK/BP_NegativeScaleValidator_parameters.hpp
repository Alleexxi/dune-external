#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NegativeScaleValidator

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_NegativeScaleValidator.BP_NegativeScaleValidator_C.BP_GatherWorldData
// 0x0058 (0x0058 - 0x0000)
struct BP_NegativeScaleValidator_C_BP_GatherWorldData final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        ActorClassObjects;                                 // 0x0008(0x0010)(Edit, BlueprintVisible)
	TArray<class UObject*>                        CallFunc_GetAllObjectsOfClass_OutObjects;          // 0x0018(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_DynamicCast_AsActor;                        // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NegativeScaleValidator_C_BP_GatherWorldData) == 0x000008, "Wrong alignment on BP_NegativeScaleValidator_C_BP_GatherWorldData");
static_assert(sizeof(BP_NegativeScaleValidator_C_BP_GatherWorldData) == 0x000058, "Wrong size on BP_NegativeScaleValidator_C_BP_GatherWorldData");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, World) == 0x000000, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::World' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, ActorClassObjects) == 0x000008, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::ActorClassObjects' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, CallFunc_GetAllObjectsOfClass_OutObjects) == 0x000018, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::CallFunc_GetAllObjectsOfClass_OutObjects' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, K2Node_DynamicCast_AsActor) == 0x000040, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::K2Node_DynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_BP_GatherWorldData, CallFunc_Array_Add_ReturnValue) == 0x000050, "Member 'BP_NegativeScaleValidator_C_BP_GatherWorldData::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_NegativeScaleValidator.BP_NegativeScaleValidator_C.Does Vector Have Negative Values
// 0x0040 (0x0040 - 0x0000)
struct BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasNegativeValues;                                 // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values) == 0x000008, "Wrong alignment on BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values");
static_assert(sizeof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values) == 0x000040, "Wrong size on BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values");
static_assert(offsetof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values, Vector) == 0x000000, "Member 'BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values::Vector' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values, HasNegativeValues) == 0x000018, "Member 'BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values::HasNegativeValues' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values, CallFunc_BreakVector_X) == 0x000020, "Member 'BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values, CallFunc_BreakVector_Y) == 0x000028, "Member 'BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values, CallFunc_BreakVector_Z) == 0x000030, "Member 'BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000039, "Member 'BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x00003A, "Member 'BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values, CallFunc_BooleanOR_ReturnValue) == 0x00003B, "Member 'BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values, CallFunc_BooleanOR_ReturnValue_1) == 0x00003C, "Member 'BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BP_NegativeScaleValidator.BP_NegativeScaleValidator_C.ExecuteUbergraph_BP_NegativeScaleValidator
// 0x0010 (0x0010 - 0x0000)
struct BP_NegativeScaleValidator_C_ExecuteUbergraph_BP_NegativeScaleValidator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 K2Node_Event_World;                                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NegativeScaleValidator_C_ExecuteUbergraph_BP_NegativeScaleValidator) == 0x000008, "Wrong alignment on BP_NegativeScaleValidator_C_ExecuteUbergraph_BP_NegativeScaleValidator");
static_assert(sizeof(BP_NegativeScaleValidator_C_ExecuteUbergraph_BP_NegativeScaleValidator) == 0x000010, "Wrong size on BP_NegativeScaleValidator_C_ExecuteUbergraph_BP_NegativeScaleValidator");
static_assert(offsetof(BP_NegativeScaleValidator_C_ExecuteUbergraph_BP_NegativeScaleValidator, EntryPoint) == 0x000000, "Member 'BP_NegativeScaleValidator_C_ExecuteUbergraph_BP_NegativeScaleValidator::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ExecuteUbergraph_BP_NegativeScaleValidator, K2Node_Event_World) == 0x000008, "Member 'BP_NegativeScaleValidator_C_ExecuteUbergraph_BP_NegativeScaleValidator::K2Node_Event_World' has a wrong offset!");

// Function BP_NegativeScaleValidator.BP_NegativeScaleValidator_C.GatherWorldData
// 0x0008 (0x0008 - 0x0000)
struct BP_NegativeScaleValidator_C_GatherWorldData final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NegativeScaleValidator_C_GatherWorldData) == 0x000008, "Wrong alignment on BP_NegativeScaleValidator_C_GatherWorldData");
static_assert(sizeof(BP_NegativeScaleValidator_C_GatherWorldData) == 0x000008, "Wrong size on BP_NegativeScaleValidator_C_GatherWorldData");
static_assert(offsetof(BP_NegativeScaleValidator_C_GatherWorldData, World) == 0x000000, "Member 'BP_NegativeScaleValidator_C_GatherWorldData::World' has a wrong offset!");

// Function BP_NegativeScaleValidator.BP_NegativeScaleValidator_C.ValidateWorld
// 0x0040 (0x0040 - 0x0000)
struct BP_NegativeScaleValidator_C_ValidateWorld final
{
public:
	bool                                          bSectionsPassedValidation;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PassedValidation;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Does_Vector_Have_Negative_Values_HasNegativeValues; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NegativeScaleValidator_C_ValidateWorld) == 0x000008, "Wrong alignment on BP_NegativeScaleValidator_C_ValidateWorld");
static_assert(sizeof(BP_NegativeScaleValidator_C_ValidateWorld) == 0x000040, "Wrong size on BP_NegativeScaleValidator_C_ValidateWorld");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, bSectionsPassedValidation) == 0x000000, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::bSectionsPassedValidation' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, ReturnValue) == 0x000001, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, PassedValidation) == 0x000002, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::PassedValidation' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, CallFunc_GetActorScale3D_ReturnValue) == 0x000020, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NegativeScaleValidator_C_ValidateWorld, CallFunc_Does_Vector_Have_Negative_Values_HasNegativeValues) == 0x000038, "Member 'BP_NegativeScaleValidator_C_ValidateWorld::CallFunc_Does_Vector_Have_Negative_Values_HasNegativeValues' has a wrong offset!");

}

