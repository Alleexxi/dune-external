#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LayeredMaterials

#include "Basic.hpp"

#include "DeveloperSettings_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class LayeredMaterials.MaterialExpressionSecondaryReadParameter
// 0x0048 (0x0100 - 0x00B8)
class UMaterialExpressionSecondaryReadParameter : public UMaterialExpression
{
public:
	struct FExpressionInput                       IndexOverride;                                     // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SecondaryReadIndex;                                // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ParameterId;                                       // 0x00EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionSecondaryReadParameter">();
	}
	static class UMaterialExpressionSecondaryReadParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSecondaryReadParameter>();
	}
};
static_assert(alignof(UMaterialExpressionSecondaryReadParameter) == 0x000008, "Wrong alignment on UMaterialExpressionSecondaryReadParameter");
static_assert(sizeof(UMaterialExpressionSecondaryReadParameter) == 0x000100, "Wrong size on UMaterialExpressionSecondaryReadParameter");
static_assert(offsetof(UMaterialExpressionSecondaryReadParameter, IndexOverride) == 0x0000B8, "Member 'UMaterialExpressionSecondaryReadParameter::IndexOverride' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionSecondaryReadParameter, ParameterName) == 0x0000E0, "Member 'UMaterialExpressionSecondaryReadParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionSecondaryReadParameter, SecondaryReadIndex) == 0x0000E8, "Member 'UMaterialExpressionSecondaryReadParameter::SecondaryReadIndex' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionSecondaryReadParameter, ParameterId) == 0x0000EC, "Member 'UMaterialExpressionSecondaryReadParameter::ParameterId' has a wrong offset!");

// Class LayeredMaterials.MaterialExpressionSecondaryReadVector
// 0x0010 (0x0110 - 0x0100)
class UMaterialExpressionSecondaryReadVector final : public UMaterialExpressionSecondaryReadParameter
{
public:
	struct FLinearColor                           DefaultValue;                                      // 0x0100(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionSecondaryReadVector">();
	}
	static class UMaterialExpressionSecondaryReadVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSecondaryReadVector>();
	}
};
static_assert(alignof(UMaterialExpressionSecondaryReadVector) == 0x000008, "Wrong alignment on UMaterialExpressionSecondaryReadVector");
static_assert(sizeof(UMaterialExpressionSecondaryReadVector) == 0x000110, "Wrong size on UMaterialExpressionSecondaryReadVector");
static_assert(offsetof(UMaterialExpressionSecondaryReadVector, DefaultValue) == 0x000100, "Member 'UMaterialExpressionSecondaryReadVector::DefaultValue' has a wrong offset!");

// Class LayeredMaterials.LayeredMaterialSettings
// 0x0060 (0x00A0 - 0x0040)
class ULayeredMaterialSettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UUserDefinedEnum>        LayeredMaterialCategoryEnum;                       // 0x0040(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UUserDefinedEnum>        LayerCategoryEnum;                                 // 0x0070(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LayeredMaterialSettings">();
	}
	static class ULayeredMaterialSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULayeredMaterialSettings>();
	}
};
static_assert(alignof(ULayeredMaterialSettings) == 0x000008, "Wrong alignment on ULayeredMaterialSettings");
static_assert(sizeof(ULayeredMaterialSettings) == 0x0000A0, "Wrong size on ULayeredMaterialSettings");
static_assert(offsetof(ULayeredMaterialSettings, LayeredMaterialCategoryEnum) == 0x000040, "Member 'ULayeredMaterialSettings::LayeredMaterialCategoryEnum' has a wrong offset!");
static_assert(offsetof(ULayeredMaterialSettings, LayerCategoryEnum) == 0x000070, "Member 'ULayeredMaterialSettings::LayerCategoryEnum' has a wrong offset!");

// Class LayeredMaterials.MaterialExpressionSecondaryReadScalar
// 0x0010 (0x0110 - 0x0100)
class UMaterialExpressionSecondaryReadScalar final : public UMaterialExpressionSecondaryReadParameter
{
public:
	float                                         DefaultValue;                                      // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMin;                                         // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMax;                                         // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionSecondaryReadScalar">();
	}
	static class UMaterialExpressionSecondaryReadScalar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSecondaryReadScalar>();
	}
};
static_assert(alignof(UMaterialExpressionSecondaryReadScalar) == 0x000008, "Wrong alignment on UMaterialExpressionSecondaryReadScalar");
static_assert(sizeof(UMaterialExpressionSecondaryReadScalar) == 0x000110, "Wrong size on UMaterialExpressionSecondaryReadScalar");
static_assert(offsetof(UMaterialExpressionSecondaryReadScalar, DefaultValue) == 0x000100, "Member 'UMaterialExpressionSecondaryReadScalar::DefaultValue' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionSecondaryReadScalar, SliderMin) == 0x000104, "Member 'UMaterialExpressionSecondaryReadScalar::SliderMin' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionSecondaryReadScalar, SliderMax) == 0x000108, "Member 'UMaterialExpressionSecondaryReadScalar::SliderMax' has a wrong offset!");

// Class LayeredMaterials.LayeredMaterialsBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class ULayeredMaterialsBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UMaterialInstanceLayeredDynamic* CreateDynamicLayeredMaterialInstance(class UPrimitiveComponent* PrimitiveComponent, int32 ElementIndex, class UMaterialInstanceLayered* SourceMaterial, class FName OptionalName);
	static void GetLayeredMaterialCategory(class UMaterialInstanceLayered* InLayeredMaterial, int32* OutCategory);
	static void GetLayeredMaterialLayerCategory(class UMaterialInstanceLayered* InLayeredMaterial, int32 InLayerIndex, int32* OutLayerCategory);
	static void GetLayeredMaterialLayerName(class UMaterialInstanceLayered* InLayeredMaterial, int32 InLayerIndex, class FName* OutLayerName);
	static void GetLayeredMaterialNumLayers(class UMaterialInstanceLayered* InLayeredMaterial, int32* OutNumLayers);
	static void SetLayeredMaterialCategory(class UMaterialInstanceLayered* InLayeredMaterial, int32 InCategory);
	static void SetLayeredMaterialLayerCategory(class UMaterialInstanceLayered* InLayeredMaterial, int32 InLayerIndex, int32 InLayerCategory);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LayeredMaterialsBlueprintLibrary">();
	}
	static class ULayeredMaterialsBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULayeredMaterialsBlueprintLibrary>();
	}
};
static_assert(alignof(ULayeredMaterialsBlueprintLibrary) == 0x000008, "Wrong alignment on ULayeredMaterialsBlueprintLibrary");
static_assert(sizeof(ULayeredMaterialsBlueprintLibrary) == 0x000030, "Wrong size on ULayeredMaterialsBlueprintLibrary");

// Class LayeredMaterials.MaterialExpressionLayerParameter
// 0x0028 (0x0108 - 0x00E0)
class UMaterialExpressionLayerParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                       LayerIndexOverride;                                // 0x00E0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLayerParameter">();
	}
	static class UMaterialExpressionLayerParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLayerParameter>();
	}
};
static_assert(alignof(UMaterialExpressionLayerParameter) == 0x000008, "Wrong alignment on UMaterialExpressionLayerParameter");
static_assert(sizeof(UMaterialExpressionLayerParameter) == 0x000108, "Wrong size on UMaterialExpressionLayerParameter");
static_assert(offsetof(UMaterialExpressionLayerParameter, LayerIndexOverride) == 0x0000E0, "Member 'UMaterialExpressionLayerParameter::LayerIndexOverride' has a wrong offset!");

// Class LayeredMaterials.MaterialExpressionOpaqueLayerIndexSample
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionOpaqueLayerIndexSample final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionOpaqueLayerIndexSample">();
	}
	static class UMaterialExpressionOpaqueLayerIndexSample* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionOpaqueLayerIndexSample>();
	}
};
static_assert(alignof(UMaterialExpressionOpaqueLayerIndexSample) == 0x000008, "Wrong alignment on UMaterialExpressionOpaqueLayerIndexSample");
static_assert(sizeof(UMaterialExpressionOpaqueLayerIndexSample) == 0x0000B8, "Wrong size on UMaterialExpressionOpaqueLayerIndexSample");

// Class LayeredMaterials.MaterialExpressionScalarLayerParameter
// 0x0010 (0x0118 - 0x0108)
class UMaterialExpressionScalarLayerParameter final : public UMaterialExpressionLayerParameter
{
public:
	float                                         DefaultValue;                                      // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMin;                                         // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderMax;                                         // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionScalarLayerParameter">();
	}
	static class UMaterialExpressionScalarLayerParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionScalarLayerParameter>();
	}
};
static_assert(alignof(UMaterialExpressionScalarLayerParameter) == 0x000008, "Wrong alignment on UMaterialExpressionScalarLayerParameter");
static_assert(sizeof(UMaterialExpressionScalarLayerParameter) == 0x000118, "Wrong size on UMaterialExpressionScalarLayerParameter");
static_assert(offsetof(UMaterialExpressionScalarLayerParameter, DefaultValue) == 0x000108, "Member 'UMaterialExpressionScalarLayerParameter::DefaultValue' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionScalarLayerParameter, SliderMin) == 0x00010C, "Member 'UMaterialExpressionScalarLayerParameter::SliderMin' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionScalarLayerParameter, SliderMax) == 0x000110, "Member 'UMaterialExpressionScalarLayerParameter::SliderMax' has a wrong offset!");

// Class LayeredMaterials.MaterialExpressionTextureLayerObjectParameter
// 0x0010 (0x0118 - 0x0108)
class UMaterialExpressionTextureLayerObjectParameter final : public UMaterialExpressionLayerParameter
{
public:
	class UTexture2D*                             DefaultValue;                                      // 0x0108(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialSamplerType                          SamplerType;                                       // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESamplerSourceMode                            SamplerSource;                                     // 0x0111(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionTextureLayerObjectParameter">();
	}
	static class UMaterialExpressionTextureLayerObjectParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureLayerObjectParameter>();
	}
};
static_assert(alignof(UMaterialExpressionTextureLayerObjectParameter) == 0x000008, "Wrong alignment on UMaterialExpressionTextureLayerObjectParameter");
static_assert(sizeof(UMaterialExpressionTextureLayerObjectParameter) == 0x000118, "Wrong size on UMaterialExpressionTextureLayerObjectParameter");
static_assert(offsetof(UMaterialExpressionTextureLayerObjectParameter, DefaultValue) == 0x000108, "Member 'UMaterialExpressionTextureLayerObjectParameter::DefaultValue' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerObjectParameter, SamplerType) == 0x000110, "Member 'UMaterialExpressionTextureLayerObjectParameter::SamplerType' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerObjectParameter, SamplerSource) == 0x000111, "Member 'UMaterialExpressionTextureLayerObjectParameter::SamplerSource' has a wrong offset!");

// Class LayeredMaterials.MaterialExpressionTextureLayerParameter
// 0x0148 (0x0250 - 0x0108)
class UMaterialExpressionTextureLayerParameter final : public UMaterialExpressionLayerParameter
{
public:
	class UTexture2D*                             DefaultValue;                                      // 0x0108(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialSamplerType                          SamplerType;                                       // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       Coordinates;                                       // 0x0118(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       MipValue;                                          // 0x0140(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       CoordinatesDX;                                     // 0x0168(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       CoordinatesDY;                                     // 0x0190(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       AutomaticViewMipBiasValue;                         // 0x01B8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	ETextureMipValueMode                          MipValueMode;                                      // 0x01E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESamplerSourceMode                            SamplerSource;                                     // 0x01E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2[0x2];                                      // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ConstCoordinate;                                   // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstMipValue;                                     // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AutomaticViewMipBias : 1;                          // 0x01EC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FParameterChannelNames                 ChannelNames;                                      // 0x01F0(0x0060)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionTextureLayerParameter">();
	}
	static class UMaterialExpressionTextureLayerParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionTextureLayerParameter>();
	}
};
static_assert(alignof(UMaterialExpressionTextureLayerParameter) == 0x000008, "Wrong alignment on UMaterialExpressionTextureLayerParameter");
static_assert(sizeof(UMaterialExpressionTextureLayerParameter) == 0x000250, "Wrong size on UMaterialExpressionTextureLayerParameter");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, DefaultValue) == 0x000108, "Member 'UMaterialExpressionTextureLayerParameter::DefaultValue' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, SamplerType) == 0x000110, "Member 'UMaterialExpressionTextureLayerParameter::SamplerType' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, Coordinates) == 0x000118, "Member 'UMaterialExpressionTextureLayerParameter::Coordinates' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, MipValue) == 0x000140, "Member 'UMaterialExpressionTextureLayerParameter::MipValue' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, CoordinatesDX) == 0x000168, "Member 'UMaterialExpressionTextureLayerParameter::CoordinatesDX' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, CoordinatesDY) == 0x000190, "Member 'UMaterialExpressionTextureLayerParameter::CoordinatesDY' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, AutomaticViewMipBiasValue) == 0x0001B8, "Member 'UMaterialExpressionTextureLayerParameter::AutomaticViewMipBiasValue' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, MipValueMode) == 0x0001E0, "Member 'UMaterialExpressionTextureLayerParameter::MipValueMode' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, SamplerSource) == 0x0001E1, "Member 'UMaterialExpressionTextureLayerParameter::SamplerSource' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, ConstCoordinate) == 0x0001E4, "Member 'UMaterialExpressionTextureLayerParameter::ConstCoordinate' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, ConstMipValue) == 0x0001E8, "Member 'UMaterialExpressionTextureLayerParameter::ConstMipValue' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionTextureLayerParameter, ChannelNames) == 0x0001F0, "Member 'UMaterialExpressionTextureLayerParameter::ChannelNames' has a wrong offset!");

// Class LayeredMaterials.MaterialExpressionVectorLayerParameter
// 0x0070 (0x0178 - 0x0108)
class UMaterialExpressionVectorLayerParameter final : public UMaterialExpressionLayerParameter
{
public:
	struct FLinearColor                           DefaultValue;                                      // 0x0108(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FParameterChannelNames                 ChannelNames;                                      // 0x0118(0x0060)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionVectorLayerParameter">();
	}
	static class UMaterialExpressionVectorLayerParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionVectorLayerParameter>();
	}
};
static_assert(alignof(UMaterialExpressionVectorLayerParameter) == 0x000008, "Wrong alignment on UMaterialExpressionVectorLayerParameter");
static_assert(sizeof(UMaterialExpressionVectorLayerParameter) == 0x000178, "Wrong size on UMaterialExpressionVectorLayerParameter");
static_assert(offsetof(UMaterialExpressionVectorLayerParameter, DefaultValue) == 0x000108, "Member 'UMaterialExpressionVectorLayerParameter::DefaultValue' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionVectorLayerParameter, ChannelNames) == 0x000118, "Member 'UMaterialExpressionVectorLayerParameter::ChannelNames' has a wrong offset!");

// Class LayeredMaterials.MaterialInstanceLayered
// 0x00D0 (0x0330 - 0x0260)
class UMaterialInstanceLayered final : public UMaterialInstance
{
public:
	class UTexture2D*                             OpaqueLayerIndexMap;                               // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, int32>                      LayerNameToLayerIndex;                             // 0x0268(0x0050)(NativeAccessSpecifierPrivate)
	TArray<class UMaterialLayerPreset*>           SecondaryReads;                                    // 0x02B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         UserDefinedCategory;                               // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2CC[0x64];                                     // 0x02CC(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetNumLayers() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialInstanceLayered">();
	}
	static class UMaterialInstanceLayered* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialInstanceLayered>();
	}
};
static_assert(alignof(UMaterialInstanceLayered) == 0x000008, "Wrong alignment on UMaterialInstanceLayered");
static_assert(sizeof(UMaterialInstanceLayered) == 0x000330, "Wrong size on UMaterialInstanceLayered");
static_assert(offsetof(UMaterialInstanceLayered, OpaqueLayerIndexMap) == 0x000260, "Member 'UMaterialInstanceLayered::OpaqueLayerIndexMap' has a wrong offset!");
static_assert(offsetof(UMaterialInstanceLayered, LayerNameToLayerIndex) == 0x000268, "Member 'UMaterialInstanceLayered::LayerNameToLayerIndex' has a wrong offset!");
static_assert(offsetof(UMaterialInstanceLayered, SecondaryReads) == 0x0002B8, "Member 'UMaterialInstanceLayered::SecondaryReads' has a wrong offset!");
static_assert(offsetof(UMaterialInstanceLayered, UserDefinedCategory) == 0x0002C8, "Member 'UMaterialInstanceLayered::UserDefinedCategory' has a wrong offset!");

// Class LayeredMaterials.MaterialInstanceLayeredDynamic
// 0x0050 (0x02B0 - 0x0260)
class UMaterialInstanceLayeredDynamic final : public UMaterialInstance
{
public:
	uint8                                         Pad_260[0x50];                                     // 0x0260(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyInterpParameters(class UMaterialInstance* Source);
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly);
	float K2_GetScalarLayerParameterValue(class FName LayerName, class FName ParameterName);
	float K2_GetScalarParameterValue(class FName ParameterName);
	class UTexture* K2_GetTextureLayerParameterValue(class FName LayerName, class FName ParameterName);
	class UTexture* K2_GetTextureParameterValue(class FName ParameterName);
	struct FLinearColor K2_GetVectorLayerParameterValue(class FName LayerName, class FName ParameterName);
	struct FLinearColor K2_GetVectorParameterValue(class FName ParameterName);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float ALPHA);
	void SetScalarLayerParameterValue(class FName LayerName, class FName ParameterName, float Value);
	void SetScalarParameterValue(class FName ParameterName, float Value);
	void SetTextureLayerParameterValue(class FName LayerName, class FName ParameterName, class UTexture* Value);
	void SetTextureParameterValue(class FName ParameterName, class UTexture* Value);
	void SetVectorLayerParameterValue(class FName LayerName, class FName ParameterName, const struct FLinearColor& Value);
	void SetVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialInstanceLayeredDynamic">();
	}
	static class UMaterialInstanceLayeredDynamic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialInstanceLayeredDynamic>();
	}
};
static_assert(alignof(UMaterialInstanceLayeredDynamic) == 0x000008, "Wrong alignment on UMaterialInstanceLayeredDynamic");
static_assert(sizeof(UMaterialInstanceLayeredDynamic) == 0x0002B0, "Wrong size on UMaterialInstanceLayeredDynamic");

// Class LayeredMaterials.MaterialLayerPreset
// 0x0118 (0x0150 - 0x0038)
class UMaterialLayerPreset final : public UMaterialLayerPresetBase
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FScalarParameterValue>          ScalarParameterValues;                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorParameterValue>          VectorParameterValues;                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTextureParameterValue>         TextureParameterValues;                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FStaticMaterialLayerData               StaticLayerData;                                   // 0x0070(0x00C8)(NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x18];                                     // 0x0138(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialLayerPreset">();
	}
	static class UMaterialLayerPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialLayerPreset>();
	}
};
static_assert(alignof(UMaterialLayerPreset) == 0x000008, "Wrong alignment on UMaterialLayerPreset");
static_assert(sizeof(UMaterialLayerPreset) == 0x000150, "Wrong size on UMaterialLayerPreset");
static_assert(offsetof(UMaterialLayerPreset, ScalarParameterValues) == 0x000040, "Member 'UMaterialLayerPreset::ScalarParameterValues' has a wrong offset!");
static_assert(offsetof(UMaterialLayerPreset, VectorParameterValues) == 0x000050, "Member 'UMaterialLayerPreset::VectorParameterValues' has a wrong offset!");
static_assert(offsetof(UMaterialLayerPreset, TextureParameterValues) == 0x000060, "Member 'UMaterialLayerPreset::TextureParameterValues' has a wrong offset!");
static_assert(offsetof(UMaterialLayerPreset, StaticLayerData) == 0x000070, "Member 'UMaterialLayerPreset::StaticLayerData' has a wrong offset!");

}

