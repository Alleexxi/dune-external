#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SK_HCB_Locomotion_CtrlRig

#include "Basic.hpp"

#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// RigVMBlueprintGeneratedClass SK_HCB_Locomotion_CtrlRig.SK_HCB_Locomotion_CtrlRig_C
// 0x0088 (0x0488 - 0x0400)
class USK_HCB_Locomotion_CtrlRig_C final : public UControlRig
{
public:
	double                                        Steering;                                          // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Front_L_Offset;                                    // 0x0408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Front_R_Offset;                                    // 0x0420(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Rear_L_Offset;                                     // 0x0438(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Rear_R_Offset;                                     // 0x0450(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotationFL;                                   // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotationFR;                                   // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotationRL;                                   // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelRotationRR;                                   // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SK_HCB_Locomotion_CtrlRig_C">();
	}
	static class USK_HCB_Locomotion_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USK_HCB_Locomotion_CtrlRig_C>();
	}
};
static_assert(alignof(USK_HCB_Locomotion_CtrlRig_C) == 0x000008, "Wrong alignment on USK_HCB_Locomotion_CtrlRig_C");
static_assert(sizeof(USK_HCB_Locomotion_CtrlRig_C) == 0x000488, "Wrong size on USK_HCB_Locomotion_CtrlRig_C");
static_assert(offsetof(USK_HCB_Locomotion_CtrlRig_C, Steering) == 0x000400, "Member 'USK_HCB_Locomotion_CtrlRig_C::Steering' has a wrong offset!");
static_assert(offsetof(USK_HCB_Locomotion_CtrlRig_C, Front_L_Offset) == 0x000408, "Member 'USK_HCB_Locomotion_CtrlRig_C::Front_L_Offset' has a wrong offset!");
static_assert(offsetof(USK_HCB_Locomotion_CtrlRig_C, Front_R_Offset) == 0x000420, "Member 'USK_HCB_Locomotion_CtrlRig_C::Front_R_Offset' has a wrong offset!");
static_assert(offsetof(USK_HCB_Locomotion_CtrlRig_C, Rear_L_Offset) == 0x000438, "Member 'USK_HCB_Locomotion_CtrlRig_C::Rear_L_Offset' has a wrong offset!");
static_assert(offsetof(USK_HCB_Locomotion_CtrlRig_C, Rear_R_Offset) == 0x000450, "Member 'USK_HCB_Locomotion_CtrlRig_C::Rear_R_Offset' has a wrong offset!");
static_assert(offsetof(USK_HCB_Locomotion_CtrlRig_C, WheelRotationFL) == 0x000468, "Member 'USK_HCB_Locomotion_CtrlRig_C::WheelRotationFL' has a wrong offset!");
static_assert(offsetof(USK_HCB_Locomotion_CtrlRig_C, WheelRotationFR) == 0x000470, "Member 'USK_HCB_Locomotion_CtrlRig_C::WheelRotationFR' has a wrong offset!");
static_assert(offsetof(USK_HCB_Locomotion_CtrlRig_C, WheelRotationRL) == 0x000478, "Member 'USK_HCB_Locomotion_CtrlRig_C::WheelRotationRL' has a wrong offset!");
static_assert(offsetof(USK_HCB_Locomotion_CtrlRig_C, WheelRotationRR) == 0x000480, "Member 'USK_HCB_Locomotion_CtrlRig_C::WheelRotationRR' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_HCB_Locomotion_CtrlRig.RigVMMemory_Literal
// 0x0310 (0x0340 - 0x0030)
class SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	int32                                         RigVMModel___KalmanFloat_BufferSize__Const;        // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___OffsetTransformForItem_OffsetTransform__Const; // 0x0040(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__Const; // 0x00A0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatMul_B__Const;                // 0x00B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___OffsetTransformForItem_Weight__Const; // 0x00BC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const; // 0x00C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_1_Items__Const;     // 0x00C8(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___MathFloatMul_1_B__Const;              // 0x00D8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_2_Items__Const;     // 0x00E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_Item__Const;     // 0x00F0(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___RigUnit_SetTransform_Space__Const;    // 0x00FC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_SetTransform_bInitial__Const; // 0x00FD(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_Value__Const;    // 0x0100(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__Const;           // 0x0160(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Secondary__Const;         // 0x01A8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimBone_DebugSettings         RigVMModel___AimBoneMath_DebugSettings__Const;     // 0x01F0(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_Minimum__Const;        // 0x0260(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Maximum__Const;        // 0x0264(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___KalmanFloat_2_BufferSize__Const;      // 0x0268(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___OffsetTransformForItem_2_Item__Const; // 0x026C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_B__Const;                    // 0x0278(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_2_Item__Const;   // 0x027C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___OffsetTransformForItem_2_1_Item__Const; // 0x0288(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_3_Item__Const;   // 0x0294(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_3_Primary__Const;         // 0x02A0(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	float                                         RigVMModel___MathFloatClamp_3_Maximum__Const;      // 0x02E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___OffsetTransformForItem_2_2_Item__Const; // 0x02EC(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_4_Item__Const;   // 0x02F8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___OffsetTransformForItem_2_3_Item__Const; // 0x0304(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_Item__Const; // 0x0310(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_1_Item__Const; // 0x031C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_2_Item__Const; // 0x0328(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_OffsetTransformForItem_3_Item__Const; // 0x0334(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_HCB_Locomotion_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal) == 0x000340, "Wrong size on SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_BufferSize__Const) == 0x000030, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_OffsetTransform__Const) == 0x000040, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathQuaternionFromRotator_Rotator__Const) == 0x0000A0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathQuaternionFromRotator_Rotator__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatMul_B__Const) == 0x0000B8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatMul_B__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_Weight__Const) == 0x0000BC, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_Weight__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const) == 0x0000C0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_1_Items__Const) == 0x0000C8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_1_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatMul_1_B__Const) == 0x0000D8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatMul_1_B__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_ItemArray_2_Items__Const) == 0x0000E0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_ItemArray_2_Items__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Item__Const) == 0x0000F0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Space__Const) == 0x0000FC, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Space__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_bInitial__Const) == 0x0000FD, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_bInitial__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Value__Const) == 0x000100, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Value__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Primary__Const) == 0x000160, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_Secondary__Const) == 0x0001A8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_Secondary__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_DebugSettings__Const) == 0x0001F0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Minimum__Const) == 0x000260, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Minimum__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_Maximum__Const) == 0x000264, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___KalmanFloat_2_BufferSize__Const) == 0x000268, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___KalmanFloat_2_BufferSize__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_2_Item__Const) == 0x00026C, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___Multiply_B__Const) == 0x000278, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___Multiply_B__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_2_Item__Const) == 0x00027C, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_2_1_Item__Const) == 0x000288, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_2_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_3_Item__Const) == 0x000294, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_3_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___AimBoneMath_3_Primary__Const) == 0x0002A0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___AimBoneMath_3_Primary__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___MathFloatClamp_3_Maximum__Const) == 0x0002E8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___MathFloatClamp_3_Maximum__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_2_2_Item__Const) == 0x0002EC, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_2_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_4_Item__Const) == 0x0002F8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_4_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___OffsetTransformForItem_2_3_Item__Const) == 0x000304, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___OffsetTransformForItem_2_3_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_Item__Const) == 0x000310, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_1_Item__Const) == 0x00031C, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_1_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_2_Item__Const) == 0x000328, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_2_Item__Const' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_OffsetTransformForItem_3_Item__Const) == 0x000334, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_OffsetTransformForItem_3_Item__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass SK_HCB_Locomotion_CtrlRig.RigVMMemory_Work
// 0x1240 (0x1270 - 0x0030)
class SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	float                                         RigVMModel___KalmanFloat_Result;                   // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_Value;                    // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_Buffer;                   // 0x0038(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_LastInsertIndex;          // 0x0048(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Element; // 0x0058(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_Result;     // 0x0070(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_Result;                  // 0x0090(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_Rotator__IO; // 0x0098(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___OffsetTransformForItem_OffsetTransform__IO; // 0x00B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_CachedIndex;   // 0x0110(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_1_Items__IO;        // 0x0120(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Index; // 0x0130(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Count; // 0x0134(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Ratio; // 0x0138(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_BlockToRun; // 0x013C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Element; // 0x0144(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_1_Result;   // 0x0150(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatMul_1_Result;                // 0x0170(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_1_Rotator__IO; // 0x0178(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO; // 0x0190(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_1_CachedIndex; // 0x01F0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigElementKey>                 RigVMModel___RigUnit_ItemArray_2_Items__IO;        // 0x0200(0x0010)(Edit, EditConst, NonTransactional)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Index; // 0x0210(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Count; // 0x0214(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Ratio; // 0x0218(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_BlockToRun; // 0x021C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0xC];                                      // 0x0224(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_Result;   // 0x0230(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_Result;                 // 0x0250(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Result;                // 0x0254(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_Result;     // 0x0258(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_Result;                   // 0x0270(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x02D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x0330(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_Global;           // 0x0340(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_Primary__IO;              // 0x0358(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_PrimaryCachedSpace;       // 0x03A0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_SecondaryCachedSpace;     // 0x03B0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_bIsInitialized;           // 0x03C0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_Value;      // 0x03D0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_Value;                 // 0x03F0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_Buffer;                 // 0x03F8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_LastInsertIndex;        // 0x0408(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_Result;       // 0x0418(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_Value;        // 0x0430(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_Rotator__IO; // 0x0450(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_Value__IO;       // 0x0470(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_CachedIndex;     // 0x04D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_1_Result; // 0x04E0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_Result;                      // 0x0500(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_1_Rotator__IO; // 0x0508(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_OffsetTransform__IO; // 0x0520(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_2_CachedIndex; // 0x0580(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_2_Result; // 0x0590(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_2_Result;               // 0x05B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_Result;              // 0x05B4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_2_Result;   // 0x05B8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_2_Result;                 // 0x05D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_2_Transform;     // 0x0630(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_2_CachedIndex;   // 0x0690(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_2_Global;         // 0x06A0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_2_Primary__IO;            // 0x06B8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_PrimaryCachedSpace;     // 0x0700(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_2_SecondaryCachedSpace;   // 0x0710(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_2_bIsInitialized;         // 0x0720(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_2_Value;    // 0x0730(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_2_Value;               // 0x0750(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_754[0x4];                                      // 0x0754(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_2_Buffer;               // 0x0758(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_2_LastInsertIndex;      // 0x0768(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_3_Result;     // 0x0778(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_3_Value;      // 0x0790(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_2_Rotator__IO; // 0x07B0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_7C8[0x8];                                      // 0x07C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_2_Value__IO;     // 0x07D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_2_CachedIndex;   // 0x0830(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_1_1_Result; // 0x0840(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_1_Result;                    // 0x0860(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_864[0x4];                                      // 0x0864(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_1_1_Rotator__IO; // 0x0868(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_1_OffsetTransform__IO; // 0x0880(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_2_1_CachedIndex; // 0x08E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_3_Result; // 0x08F0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_3_Result;               // 0x0910(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_Result;              // 0x0914(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_3_Result;   // 0x0918(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_3_Result;                 // 0x0930(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_3_Transform;     // 0x0990(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_3_CachedIndex;   // 0x09F0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_3_Global;         // 0x0A00(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_3_Primary__IO;            // 0x0A18(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_3_PrimaryCachedSpace;     // 0x0A60(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_3_SecondaryCachedSpace;   // 0x0A70(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_3_bIsInitialized;         // 0x0A80(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_3_Value;    // 0x0A90(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_3_Value;               // 0x0AB0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB4[0x4];                                      // 0x0AB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_3_Buffer;               // 0x0AB8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_3_LastInsertIndex;      // 0x0AC8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_4_Result;     // 0x0AD8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_4_Value;      // 0x0AF0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_3_Rotator__IO; // 0x0B10(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_B28[0x8];                                      // 0x0B28(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_3_Value__IO;     // 0x0B30(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_3_CachedIndex;   // 0x0B90(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_1_2_Result; // 0x0BA0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_2_Result;                    // 0x0BC0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC4[0x4];                                      // 0x0BC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_1_2_Rotator__IO; // 0x0BC8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_2_OffsetTransform__IO; // 0x0BE0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_2_2_CachedIndex; // 0x0C40(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_4_Result; // 0x0C50(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___KalmanFloat_2_4_Result;               // 0x0C70(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Result;              // 0x0C74(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_1_4_Result;   // 0x0C78(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___AimBoneMath_4_Result;                 // 0x0C90(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_4_Transform;     // 0x0CF0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_4_CachedIndex;   // 0x0D50(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___ToRigSpace_Location_4_Global;         // 0x0D60(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimBoneMath_4_Primary__IO;            // 0x0D78(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_4_PrimaryCachedSpace;     // 0x0DC0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimBoneMath_4_SecondaryCachedSpace;   // 0x0DD0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimBoneMath_4_bIsInitialized;         // 0x0DE0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_1_4_Value;    // 0x0DF0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatClamp_4_Value;               // 0x0E10(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E14[0x4];                                      // 0x0E14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TArray<float>>                         RigVMModel___KalmanFloat_2_4_Buffer;               // 0x0E18(0x0010)(Edit, EditConst, NonTransactional)
	TArray<int32>                                 RigVMModel___KalmanFloat_2_4_LastInsertIndex;      // 0x0E28(0x0010)(Edit, EditConst, NonTransactional)
	struct FRotator                               RigVMModel___MathQuaternionToRotator_5_Result;     // 0x0E38(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  RigVMModel___MathQuaternionToRotator_5_Value;      // 0x0E50(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_4_Rotator__IO; // 0x0E70(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_E88[0x8];                                      // 0x0E88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_4_Value__IO;     // 0x0E90(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_4_CachedIndex;   // 0x0EF0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_3_1_3_Result; // 0x0F00(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Multiply_3_Result;                    // 0x0F20(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F24[0x4];                                      // 0x0F24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_3_1_3_Rotator__IO; // 0x0F28(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FTransform                             RigVMModel___OffsetTransformForItem_2_3_OffsetTransform__IO; // 0x0F40(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___OffsetTransformForItem_2_3_CachedIndex; // 0x0FA0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_1_Result; // 0x0FB0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO; // 0x0FD0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_FE8[0x8];                                      // 0x0FE8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO; // 0x0FF0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex; // 0x1050(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_1_1_Result; // 0x1060(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_1_1_Rotator__IO; // 0x1080(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_1098[0x8];                                     // 0x1098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_1_OffsetTransform__IO; // 0x10A0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_1_CachedIndex; // 0x1100(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_1_2_Result; // 0x1110(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_1_2_Rotator__IO; // 0x1130(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_1148[0x8];                                     // 0x1148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_2_OffsetTransform__IO; // 0x1150(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_2_CachedIndex; // 0x11B0(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___MathQuaternionFromRotator_2_1_3_Result; // 0x11C0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RigVMModel___MathQuaternionFromRotator_2_1_3_Rotator__IO; // 0x11E0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	uint8                                         Pad_11F8[0x8];                                     // 0x11F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_OffsetTransformForItem_3_OffsetTransform__IO; // 0x1200(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_OffsetTransformForItem_3_CachedIndex; // 0x1260(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass SK_HCB_Locomotion_CtrlRig.RigVMMemory_Work", true>();
	}
	static class SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work) == 0x001270, "Wrong size on SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Result) == 0x000030, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Value) == 0x000034, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_Buffer) == 0x000038, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_LastInsertIndex) == 0x000048, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Element) == 0x000058, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Element' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Result) == 0x000070, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatMul_Result) == 0x000090, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatMul_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_Rotator__IO) == 0x000098, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_OffsetTransform__IO) == 0x0000B0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_CachedIndex) == 0x000110, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_1_Items__IO) == 0x000120, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_1_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Index) == 0x000130, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Index' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Count) == 0x000134, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Count' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Ratio) == 0x000138, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_Ratio' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_BlockToRun) == 0x00013C, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_1_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Element) == 0x000144, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Element' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Result) == 0x000150, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatMul_1_Result) == 0x000170, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatMul_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_1_Rotator__IO) == 0x000178, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO) == 0x000190, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_1_CachedIndex) == 0x0001F0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_ItemArray_2_Items__IO) == 0x000200, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_ItemArray_2_Items__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Index) == 0x000210, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Index' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Count) == 0x000214, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Count' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Ratio) == 0x000218, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_Ratio' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_BlockToRun) == 0x00021C, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_ArrayIterator_2_BlockToRun' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_Result) == 0x000230, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_Result) == 0x000250, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Result) == 0x000254, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Result) == 0x000258, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Result) == 0x000270, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x0002D0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x000330, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_Global) == 0x000340, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_Global' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_Primary__IO) == 0x000358, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_PrimaryCachedSpace) == 0x0003A0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_SecondaryCachedSpace) == 0x0003B0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_bIsInitialized) == 0x0003C0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_Value) == 0x0003D0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_Value) == 0x0003F0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_Buffer) == 0x0003F8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_LastInsertIndex) == 0x000408, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Result) == 0x000418, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_Value) == 0x000430, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_Rotator__IO) == 0x000450, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_Value__IO) == 0x000470, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_CachedIndex) == 0x0004D0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_Result) == 0x0004E0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_Result) == 0x000500, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_Rotator__IO) == 0x000508, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_OffsetTransform__IO) == 0x000520, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_CachedIndex) == 0x000580, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_2_Result) == 0x000590, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_2_Result) == 0x0005B0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_Result) == 0x0005B4, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_2_Result) == 0x0005B8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_Result) == 0x0005D0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_Transform) == 0x000630, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_2_CachedIndex) == 0x000690, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_2_Global) == 0x0006A0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_2_Global' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_Primary__IO) == 0x0006B8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_PrimaryCachedSpace) == 0x000700, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_SecondaryCachedSpace) == 0x000710, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_2_bIsInitialized) == 0x000720, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_2_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_2_Value) == 0x000730, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_2_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_2_Value) == 0x000750, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_2_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_2_Buffer) == 0x000758, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_2_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_2_LastInsertIndex) == 0x000768, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_2_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_Result) == 0x000778, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_3_Value) == 0x000790, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_3_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_2_Rotator__IO) == 0x0007B0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_2_Value__IO) == 0x0007D0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_2_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_2_CachedIndex) == 0x000830, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_1_Result) == 0x000840, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_1_Result) == 0x000860, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_1_Rotator__IO) == 0x000868, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_1_OffsetTransform__IO) == 0x000880, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_1_CachedIndex) == 0x0008E0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_3_Result) == 0x0008F0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_3_Result) == 0x000910, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_Result) == 0x000914, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_3_Result) == 0x000918, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_Result) == 0x000930, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_Transform) == 0x000990, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_Transform' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_3_CachedIndex) == 0x0009F0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_3_Global) == 0x000A00, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_3_Global' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_Primary__IO) == 0x000A18, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_PrimaryCachedSpace) == 0x000A60, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_SecondaryCachedSpace) == 0x000A70, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_3_bIsInitialized) == 0x000A80, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_3_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_3_Value) == 0x000A90, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_3_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_3_Value) == 0x000AB0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_3_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_3_Buffer) == 0x000AB8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_3_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_3_LastInsertIndex) == 0x000AC8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_3_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_4_Result) == 0x000AD8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_4_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_4_Value) == 0x000AF0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_4_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_3_Rotator__IO) == 0x000B10, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_3_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_3_Value__IO) == 0x000B30, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_3_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_3_CachedIndex) == 0x000B90, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_2_Result) == 0x000BA0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_2_Result) == 0x000BC0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_2_Rotator__IO) == 0x000BC8, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_2_OffsetTransform__IO) == 0x000BE0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_2_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_2_CachedIndex) == 0x000C40, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_4_Result) == 0x000C50, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_4_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_4_Result) == 0x000C70, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_4_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_Result) == 0x000C74, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_4_Result) == 0x000C78, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_4_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_Result) == 0x000C90, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_Transform) == 0x000CF0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_Transform' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_4_CachedIndex) == 0x000D50, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___ToRigSpace_Location_4_Global) == 0x000D60, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___ToRigSpace_Location_4_Global' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_Primary__IO) == 0x000D78, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_Primary__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_PrimaryCachedSpace) == 0x000DC0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_SecondaryCachedSpace) == 0x000DD0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___AimBoneMath_4_bIsInitialized) == 0x000DE0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___AimBoneMath_4_bIsInitialized' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_1_4_Value) == 0x000DF0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_1_4_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathFloatClamp_4_Value) == 0x000E10, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathFloatClamp_4_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_4_Buffer) == 0x000E18, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_4_Buffer' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___KalmanFloat_2_4_LastInsertIndex) == 0x000E28, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___KalmanFloat_2_4_LastInsertIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_5_Result) == 0x000E38, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_5_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionToRotator_5_Value) == 0x000E50, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionToRotator_5_Value' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_4_Rotator__IO) == 0x000E70, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_4_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_4_Value__IO) == 0x000E90, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_4_Value__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_4_CachedIndex) == 0x000EF0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_4_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_3_Result) == 0x000F00, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_3_Result) == 0x000F20, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_3_1_3_Rotator__IO) == 0x000F28, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_3_1_3_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_3_OffsetTransform__IO) == 0x000F40, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_3_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___OffsetTransformForItem_2_3_CachedIndex) == 0x000FA0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___OffsetTransformForItem_2_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_Result) == 0x000FB0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO) == 0x000FD0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO) == 0x000FF0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex) == 0x001050, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_1_Result) == 0x001060, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_1_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_1_Rotator__IO) == 0x001080, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_1_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_1_OffsetTransform__IO) == 0x0010A0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_1_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_1_CachedIndex) == 0x001100, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_2_Result) == 0x001110, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_2_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_2_Rotator__IO) == 0x001130, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_2_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_2_OffsetTransform__IO) == 0x001150, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_2_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_2_CachedIndex) == 0x0011B0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_3_Result) == 0x0011C0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_3_Result' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___MathQuaternionFromRotator_2_1_3_Rotator__IO) == 0x0011E0, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___MathQuaternionFromRotator_2_1_3_Rotator__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_3_OffsetTransform__IO) == 0x001200, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_3_OffsetTransform__IO' has a wrong offset!");
static_assert(offsetof(SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_OffsetTransformForItem_3_CachedIndex) == 0x001260, "Member 'SK_HCB_Locomotion_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_OffsetTransformForItem_3_CachedIndex' has a wrong offset!");

}

