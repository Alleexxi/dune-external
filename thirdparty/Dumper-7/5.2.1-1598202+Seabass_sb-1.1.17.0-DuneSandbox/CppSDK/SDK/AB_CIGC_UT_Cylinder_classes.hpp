#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_CIGC_UT_Cylinder

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ControlRig_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_CIGC_UT_Cylinder.AB_CIGC_UT_Cylinder_C
// 0x04E0 (0x0A00 - 0x0520)
class UAB_CIGC_UT_Cylinder_C final : public UWheeledVehicleAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0520(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0528(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0530(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0538(0x0020)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x0558(0x0470)()
	double                                        __CustomProperty_Rotation_90650AA84230720C5904289ABC2EDF59; // 0x09C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta_Time_X;                                      // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation;                                          // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotationAlpha;                                     // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           BoneArray;                                         // 0x09F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_AB_CIGC_UT_Cylinder(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_CIGC_UT_Cylinder_C">();
	}
	static class UAB_CIGC_UT_Cylinder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_CIGC_UT_Cylinder_C>();
	}
};
static_assert(alignof(UAB_CIGC_UT_Cylinder_C) == 0x000010, "Wrong alignment on UAB_CIGC_UT_Cylinder_C");
static_assert(sizeof(UAB_CIGC_UT_Cylinder_C) == 0x000A00, "Wrong size on UAB_CIGC_UT_Cylinder_C");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, UberGraphFrame) == 0x000520, "Member 'UAB_CIGC_UT_Cylinder_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, AnimBlueprintExtension_PropertyAccess) == 0x000528, "Member 'UAB_CIGC_UT_Cylinder_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, AnimBlueprintExtension_Base) == 0x000530, "Member 'UAB_CIGC_UT_Cylinder_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, AnimGraphNode_Root) == 0x000538, "Member 'UAB_CIGC_UT_Cylinder_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, AnimGraphNode_ControlRig) == 0x000558, "Member 'UAB_CIGC_UT_Cylinder_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, __CustomProperty_Rotation_90650AA84230720C5904289ABC2EDF59) == 0x0009C8, "Member 'UAB_CIGC_UT_Cylinder_C::__CustomProperty_Rotation_90650AA84230720C5904289ABC2EDF59' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, Delta_Time_X) == 0x0009D0, "Member 'UAB_CIGC_UT_Cylinder_C::Delta_Time_X' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, Rotation) == 0x0009D8, "Member 'UAB_CIGC_UT_Cylinder_C::Rotation' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, RotationAlpha) == 0x0009E0, "Member 'UAB_CIGC_UT_Cylinder_C::RotationAlpha' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, Speed) == 0x0009E8, "Member 'UAB_CIGC_UT_Cylinder_C::Speed' has a wrong offset!");
static_assert(offsetof(UAB_CIGC_UT_Cylinder_C, BoneArray) == 0x0009F0, "Member 'UAB_CIGC_UT_Cylinder_C::BoneArray' has a wrong offset!");

}

