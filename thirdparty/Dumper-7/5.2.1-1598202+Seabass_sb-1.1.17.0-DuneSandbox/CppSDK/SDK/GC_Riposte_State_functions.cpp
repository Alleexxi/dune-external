#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_Riposte_State

#include "Basic.hpp"

#include "GC_Riposte_State_classes.hpp"
#include "GC_Riposte_State_parameters.hpp"


namespace SDK
{

// Function GC_Riposte_State.GC_Riposte_State_C.ExecuteUbergraph_GC_Riposte_State
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_Riposte_State_C::ExecuteUbergraph_GC_Riposte_State(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_Riposte_State_C", "ExecuteUbergraph_GC_Riposte_State");

	Params::GC_Riposte_State_C_ExecuteUbergraph_GC_Riposte_State Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_Riposte_State.GC_Riposte_State_C.OnActive
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MyTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayCueParameters&    Parameters                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AGC_Riposte_State_C::OnActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_Riposte_State_C", "OnActive");

	Params::GC_Riposte_State_C_OnActive Parms{};

	Parms.MyTarget = MyTarget;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GC_Riposte_State.GC_Riposte_State_C.OnImmunityBlockedHit
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class AActor*                     InDamagingActor                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                InHitResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AGC_Riposte_State_C::OnImmunityBlockedHit(const class AActor* InDamagingActor, const struct FHitResult& InHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_Riposte_State_C", "OnImmunityBlockedHit");

	Params::GC_Riposte_State_C_OnImmunityBlockedHit Parms{};

	Parms.InDamagingActor = InDamagingActor;
	Parms.InHitResult = std::move(InHitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_Riposte_State.GC_Riposte_State_C.OnImmunityBlockedHitPredicted
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDamageImmunityHitPredictionType        InPredictionType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class AActor*                     InDamagingActor                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                InHitResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AGC_Riposte_State_C::OnImmunityBlockedHitPredicted(EDamageImmunityHitPredictionType InPredictionType, const class AActor* InDamagingActor, const struct FHitResult& InHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_Riposte_State_C", "OnImmunityBlockedHitPredicted");

	Params::GC_Riposte_State_C_OnImmunityBlockedHitPredicted Parms{};

	Parms.InPredictionType = InPredictionType;
	Parms.InDamagingActor = InDamagingActor;
	Parms.InHitResult = std::move(InHitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_Riposte_State.GC_Riposte_State_C.OnRemove
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MyTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayCueParameters&    Parameters                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AGC_Riposte_State_C::OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_Riposte_State_C", "OnRemove");

	Params::GC_Riposte_State_C_OnRemove Parms{};

	Parms.MyTarget = MyTarget;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GC_Riposte_State.GC_Riposte_State_C.SetImmunityDelegates
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldBeBound                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGC_Riposte_State_C::SetImmunityDelegates(class AActor* TargetActor, bool ShouldBeBound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_Riposte_State_C", "SetImmunityDelegates");

	Params::GC_Riposte_State_C_SetImmunityDelegates Parms{};

	Parms.TargetActor = TargetActor;
	Parms.ShouldBeBound = ShouldBeBound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_Riposte_State.GC_Riposte_State_C.SpawnImage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AGC_Riposte_State_C::SpawnImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_Riposte_State_C", "SpawnImage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GC_Riposte_State.GC_Riposte_State_C.SpawnImpactVFX
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AGC_Riposte_State_C::SpawnImpactVFX(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_Riposte_State_C", "SpawnImpactVFX");

	Params::GC_Riposte_State_C_SpawnImpactVFX Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_Riposte_State.GC_Riposte_State_C.TryPlayInterruption
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AGC_Riposte_State_C::TryPlayInterruption(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_Riposte_State_C", "TryPlayInterruption");

	Params::GC_Riposte_State_C_TryPlayInterruption Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}

}

