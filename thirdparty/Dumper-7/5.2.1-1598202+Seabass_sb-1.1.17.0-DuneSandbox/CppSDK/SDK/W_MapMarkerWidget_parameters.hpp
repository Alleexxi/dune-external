#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MapMarkerWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"


namespace SDK::Params
{

// Function W_MapMarkerWidget.W_MapMarkerWidget_C.ExecuteUbergraph_W_MapMarkerWidget
// 0x0240 (0x0240 - 0x0000)
struct W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEMapMarker                            K2Node_Event_MarkerType;                           // 0x0004(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFullscreenMapMarkerRowBase            K2Node_Event_MarkerStaticData;                     // 0x0010(0x0158)(ConstParm)
	struct FMapMarkerGuiData                      K2Node_Event_MarkerDynamicData;                    // 0x0168(0x0098)(ConstParm)
	EMarkerDiscoveryLevel                         K2Node_Event_DiscoveryLevel;                       // 0x0200(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              K2Node_Event_MarkerIconTexture;                    // 0x0208(0x0030)(ConstParm, UObjectWrapper, HasGetValueTypeHash)
	struct FEIconPresetWidgetName                 K2Node_Event_MarkerIconPreset;                     // 0x0238(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget) == 0x000008, "Wrong alignment on W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget");
static_assert(sizeof(W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget) == 0x000240, "Wrong size on W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget");
static_assert(offsetof(W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget, EntryPoint) == 0x000000, "Member 'W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget, K2Node_Event_MarkerType) == 0x000004, "Member 'W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget::K2Node_Event_MarkerType' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget, K2Node_Event_MarkerStaticData) == 0x000010, "Member 'W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget::K2Node_Event_MarkerStaticData' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget, K2Node_Event_MarkerDynamicData) == 0x000168, "Member 'W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget::K2Node_Event_MarkerDynamicData' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget, K2Node_Event_DiscoveryLevel) == 0x000200, "Member 'W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget::K2Node_Event_DiscoveryLevel' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget, K2Node_Event_MarkerIconTexture) == 0x000208, "Member 'W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget::K2Node_Event_MarkerIconTexture' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget, K2Node_Event_MarkerIconPreset) == 0x000238, "Member 'W_MapMarkerWidget_C_ExecuteUbergraph_W_MapMarkerWidget::K2Node_Event_MarkerIconPreset' has a wrong offset!");

// Function W_MapMarkerWidget.W_MapMarkerWidget_C.OnDiscoveryLevelChanged
// 0x0040 (0x0040 - 0x0000)
struct W_MapMarkerWidget_C_OnDiscoveryLevelChanged final
{
public:
	EMarkerDiscoveryLevel                         DiscoveryLevel;                                    // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              MarkerIconTexture;                                 // 0x0008(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)
	struct FEIconPresetWidgetName                 MarkerIconPreset;                                  // 0x0038(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapMarkerWidget_C_OnDiscoveryLevelChanged) == 0x000008, "Wrong alignment on W_MapMarkerWidget_C_OnDiscoveryLevelChanged");
static_assert(sizeof(W_MapMarkerWidget_C_OnDiscoveryLevelChanged) == 0x000040, "Wrong size on W_MapMarkerWidget_C_OnDiscoveryLevelChanged");
static_assert(offsetof(W_MapMarkerWidget_C_OnDiscoveryLevelChanged, DiscoveryLevel) == 0x000000, "Member 'W_MapMarkerWidget_C_OnDiscoveryLevelChanged::DiscoveryLevel' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_OnDiscoveryLevelChanged, MarkerIconTexture) == 0x000008, "Member 'W_MapMarkerWidget_C_OnDiscoveryLevelChanged::MarkerIconTexture' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_OnDiscoveryLevelChanged, MarkerIconPreset) == 0x000038, "Member 'W_MapMarkerWidget_C_OnDiscoveryLevelChanged::MarkerIconPreset' has a wrong offset!");

// Function W_MapMarkerWidget.W_MapMarkerWidget_C.SetIconFlashing
// 0x0010 (0x0010 - 0x0000)
struct W_MapMarkerWidget_C_SetIconFlashing final
{
public:
	bool                                          EnableFlashing;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapMarkerWidget_C_SetIconFlashing) == 0x000008, "Wrong alignment on W_MapMarkerWidget_C_SetIconFlashing");
static_assert(sizeof(W_MapMarkerWidget_C_SetIconFlashing) == 0x000010, "Wrong size on W_MapMarkerWidget_C_SetIconFlashing");
static_assert(offsetof(W_MapMarkerWidget_C_SetIconFlashing, EnableFlashing) == 0x000000, "Member 'W_MapMarkerWidget_C_SetIconFlashing::EnableFlashing' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_SetIconFlashing, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'W_MapMarkerWidget_C_SetIconFlashing::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function W_MapMarkerWidget.W_MapMarkerWidget_C.Update
// 0x01F8 (0x01F8 - 0x0000)
struct W_MapMarkerWidget_C_Update final
{
public:
	struct FEMapMarker                            MarkerType;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FFullscreenMapMarkerRowBase            MarkerStaticData;                                  // 0x0008(0x0158)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FMapMarkerGuiData                      MarkerDynamicData;                                 // 0x0160(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_MapMarkerWidget_C_Update) == 0x000008, "Wrong alignment on W_MapMarkerWidget_C_Update");
static_assert(sizeof(W_MapMarkerWidget_C_Update) == 0x0001F8, "Wrong size on W_MapMarkerWidget_C_Update");
static_assert(offsetof(W_MapMarkerWidget_C_Update, MarkerType) == 0x000000, "Member 'W_MapMarkerWidget_C_Update::MarkerType' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_Update, MarkerStaticData) == 0x000008, "Member 'W_MapMarkerWidget_C_Update::MarkerStaticData' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_Update, MarkerDynamicData) == 0x000160, "Member 'W_MapMarkerWidget_C_Update::MarkerDynamicData' has a wrong offset!");

// Function W_MapMarkerWidget.W_MapMarkerWidget_C.UpdateRadius
// 0x0038 (0x0038 - 0x0000)
struct W_MapMarkerWidget_C_UpdateRadius final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowRadius;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldToViewScale_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SetRadius_Radius_ImplicitCast;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetRadius_WorldToViewScale_ImplicitCast;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapMarkerWidget_C_UpdateRadius) == 0x000008, "Wrong alignment on W_MapMarkerWidget_C_UpdateRadius");
static_assert(sizeof(W_MapMarkerWidget_C_UpdateRadius) == 0x000038, "Wrong size on W_MapMarkerWidget_C_UpdateRadius");
static_assert(offsetof(W_MapMarkerWidget_C_UpdateRadius, Color) == 0x000000, "Member 'W_MapMarkerWidget_C_UpdateRadius::Color' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_UpdateRadius, bShowRadius) == 0x000010, "Member 'W_MapMarkerWidget_C_UpdateRadius::bShowRadius' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_UpdateRadius, CallFunc_GetWorldToViewScale_ReturnValue) == 0x000014, "Member 'W_MapMarkerWidget_C_UpdateRadius::CallFunc_GetWorldToViewScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_UpdateRadius, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'W_MapMarkerWidget_C_UpdateRadius::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_UpdateRadius, CallFunc_SetRadius_Radius_ImplicitCast) == 0x000020, "Member 'W_MapMarkerWidget_C_UpdateRadius::CallFunc_SetRadius_Radius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_UpdateRadius, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'W_MapMarkerWidget_C_UpdateRadius::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_MapMarkerWidget_C_UpdateRadius, CallFunc_SetRadius_WorldToViewScale_ImplicitCast) == 0x000030, "Member 'W_MapMarkerWidget_C_UpdateRadius::CallFunc_SetRadius_WorldToViewScale_ImplicitCast' has a wrong offset!");

}

