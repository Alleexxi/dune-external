#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_SpiceAddiction

#include "Basic.hpp"

#include "BPFL_SpiceAddiction_classes.hpp"
#include "BPFL_SpiceAddiction_parameters.hpp"


namespace SDK
{

// Function BPFL_SpiceAddiction.BPFL_SpiceAddiction_C.Apply Camera Modifiers to Local Player
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UClass*>&                  Camera_Modifiers                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_SpiceAddiction_C::Apply_Camera_Modifiers_to_Local_Player(TArray<class UClass*>& Camera_Modifiers, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_SpiceAddiction_C", "Apply Camera Modifiers to Local Player");

	Params::BPFL_SpiceAddiction_C_Apply_Camera_Modifiers_to_Local_Player Parms{};

	Parms.Camera_Modifiers = std::move(Camera_Modifiers);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Camera_Modifiers = std::move(Parms.Camera_Modifiers);
}


// Function BPFL_SpiceAddiction.BPFL_SpiceAddiction_C.Apply Gameplay Effects to Actor
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UClass*>&                  Gameplay_Effects                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_SpiceAddiction_C::Apply_Gameplay_Effects_to_Actor(class AActor* Actor, TArray<class UClass*>& Gameplay_Effects, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_SpiceAddiction_C", "Apply Gameplay Effects to Actor");

	Params::BPFL_SpiceAddiction_C_Apply_Gameplay_Effects_to_Actor Parms{};

	Parms.Actor = Actor;
	Parms.Gameplay_Effects = std::move(Gameplay_Effects);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Gameplay_Effects = std::move(Parms.Gameplay_Effects);
}


// Function BPFL_SpiceAddiction.BPFL_SpiceAddiction_C.Get Actor Spice State
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ESpiceState*                            Spice_State                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_SpiceAddiction_C::Get_Actor_Spice_State(class AActor* Actor, class UClass* Settings, class UObject* __WorldContext, ESpiceState* Spice_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_SpiceAddiction_C", "Get Actor Spice State");

	Params::BPFL_SpiceAddiction_C_Get_Actor_Spice_State Parms{};

	Parms.Actor = Actor;
	Parms.Settings = Settings;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Spice_State != nullptr)
		*Spice_State = Parms.Spice_State;
}


// Function BPFL_SpiceAddiction.BPFL_SpiceAddiction_C.Get Spice Vision Data
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESpiceState                             SpiceState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   EntryFound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSpiceVisionData*                SpiceVisionData                                        (Parm, OutParm, NoDestructor)

void UBPFL_SpiceAddiction_C::Get_Spice_Vision_Data(ESpiceState SpiceState, class UClass* Settings, class UObject* __WorldContext, bool* EntryFound, struct FSpiceVisionData* SpiceVisionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_SpiceAddiction_C", "Get Spice Vision Data");

	Params::BPFL_SpiceAddiction_C_Get_Spice_Vision_Data Parms{};

	Parms.SpiceState = SpiceState;
	Parms.Settings = Settings;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EntryFound != nullptr)
		*EntryFound = Parms.EntryFound;

	if (SpiceVisionData != nullptr)
		*SpiceVisionData = std::move(Parms.SpiceVisionData);
}


// Function BPFL_SpiceAddiction.BPFL_SpiceAddiction_C.Handle Spice Addiction Status Change On Actor
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Spice_Addiction_Enabled                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Addicted                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Spice_Addiction_Settings                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_SpiceAddiction_C::Handle_Spice_Addiction_Status_Change_On_Actor(class AActor* Actor, bool Is_Spice_Addiction_Enabled, bool Is_Addicted, class UClass* Spice_Addiction_Settings, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_SpiceAddiction_C", "Handle Spice Addiction Status Change On Actor");

	Params::BPFL_SpiceAddiction_C_Handle_Spice_Addiction_Status_Change_On_Actor Parms{};

	Parms.Actor = Actor;
	Parms.Is_Spice_Addiction_Enabled = Is_Spice_Addiction_Enabled;
	Parms.Is_Addicted = Is_Addicted;
	Parms.Spice_Addiction_Settings = Spice_Addiction_Settings;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPFL_SpiceAddiction.BPFL_SpiceAddiction_C.Handle Spice Visions Enabled Changed
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FSpiceAddictionComponent&  SpiceAddictionComponent                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// TArray<class UClass*>&                  Gameplay_Effects                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_SpiceAddiction_C::Handle_Spice_Visions_Enabled_Changed(class AActor* Actor, const struct FSpiceAddictionComponent& SpiceAddictionComponent, TArray<class UClass*>& Gameplay_Effects, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_SpiceAddiction_C", "Handle Spice Visions Enabled Changed");

	Params::BPFL_SpiceAddiction_C_Handle_Spice_Visions_Enabled_Changed Parms{};

	Parms.Actor = Actor;
	Parms.SpiceAddictionComponent = std::move(SpiceAddictionComponent);
	Parms.Gameplay_Effects = std::move(Gameplay_Effects);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Gameplay_Effects = std::move(Parms.Gameplay_Effects);
}


// Function BPFL_SpiceAddiction.BPFL_SpiceAddiction_C.Remove Camera Modifiers from Local Player
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UClass*>&                  Camera_Modifiers                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_SpiceAddiction_C::Remove_Camera_Modifiers_from_Local_Player(TArray<class UClass*>& Camera_Modifiers, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_SpiceAddiction_C", "Remove Camera Modifiers from Local Player");

	Params::BPFL_SpiceAddiction_C_Remove_Camera_Modifiers_from_Local_Player Parms{};

	Parms.Camera_Modifiers = std::move(Camera_Modifiers);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Camera_Modifiers = std::move(Parms.Camera_Modifiers);
}


// Function BPFL_SpiceAddiction.BPFL_SpiceAddiction_C.Remove Gameplay Effects from Actor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UClass*>&                  Gameplay_Effects                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_SpiceAddiction_C::Remove_Gameplay_Effects_from_Actor(class AActor* Actor, TArray<class UClass*>& Gameplay_Effects, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_SpiceAddiction_C", "Remove Gameplay Effects from Actor");

	Params::BPFL_SpiceAddiction_C_Remove_Gameplay_Effects_from_Actor Parms{};

	Parms.Actor = Actor;
	Parms.Gameplay_Effects = std::move(Gameplay_Effects);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Gameplay_Effects = std::move(Parms.Gameplay_Effects);
}


// Function BPFL_SpiceAddiction.BPFL_SpiceAddiction_C.Try Log Error
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Error_Message                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool&                                   Has_Shown_Error                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPFL_SpiceAddiction_C::Try_Log_Error(const class FString& Error_Message, bool& Has_Shown_Error, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_SpiceAddiction_C", "Try Log Error");

	Params::BPFL_SpiceAddiction_C_Try_Log_Error Parms{};

	Parms.Error_Message = std::move(Error_Message);
	Parms.Has_Shown_Error = Has_Shown_Error;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Has_Shown_Error = Parms.Has_Shown_Error;
}

}

