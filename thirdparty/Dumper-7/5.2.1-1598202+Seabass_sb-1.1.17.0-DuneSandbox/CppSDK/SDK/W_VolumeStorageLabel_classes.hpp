#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_VolumeStorageLabel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_VolumeStorageLabel.W_VolumeStorageLabel_C
// 0x0078 (0x0348 - 0x02D0)
class UW_VolumeStorageLabel_C final : public UAnimatedLabelWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDuneImage*                             Arrow;                                             // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               ArrowOverlay;                                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BoxBackground;                                     // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               CountTextSizeBox;                                  // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             MaxGlowArrow;                                      // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 OutlineBox;                                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_0;                                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             TriangleSlot;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             VolumeStorageIconSlot;                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          MirrorBackground;                                  // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          AddTriangle;                                       // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       Common_Content_Text;                               // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                VolumeSlotPadding;                                 // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFlipped;                                         // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateTriangleVisibility();
	void SetMaxState(bool IsMax);
	void SetFlipped(bool IsFlipped_0);
	void SetAddTriangle(bool AddTriangle_0);
	void PreConstruct(bool IsDesignTime);
	void ExecuteUbergraph_W_VolumeStorageLabel(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_VolumeStorageLabel_C">();
	}
	static class UW_VolumeStorageLabel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_VolumeStorageLabel_C>();
	}
};
static_assert(alignof(UW_VolumeStorageLabel_C) == 0x000008, "Wrong alignment on UW_VolumeStorageLabel_C");
static_assert(sizeof(UW_VolumeStorageLabel_C) == 0x000348, "Wrong size on UW_VolumeStorageLabel_C");
static_assert(offsetof(UW_VolumeStorageLabel_C, UberGraphFrame) == 0x0002D0, "Member 'UW_VolumeStorageLabel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, Arrow) == 0x0002D8, "Member 'UW_VolumeStorageLabel_C::Arrow' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, ArrowOverlay) == 0x0002E0, "Member 'UW_VolumeStorageLabel_C::ArrowOverlay' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, BoxBackground) == 0x0002E8, "Member 'UW_VolumeStorageLabel_C::BoxBackground' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, CountTextSizeBox) == 0x0002F0, "Member 'UW_VolumeStorageLabel_C::CountTextSizeBox' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, MaxGlowArrow) == 0x0002F8, "Member 'UW_VolumeStorageLabel_C::MaxGlowArrow' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, OutlineBox) == 0x000300, "Member 'UW_VolumeStorageLabel_C::OutlineBox' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, ScaleBox_0) == 0x000308, "Member 'UW_VolumeStorageLabel_C::ScaleBox_0' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, TriangleSlot) == 0x000310, "Member 'UW_VolumeStorageLabel_C::TriangleSlot' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, VolumeStorageIconSlot) == 0x000318, "Member 'UW_VolumeStorageLabel_C::VolumeStorageIconSlot' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, MirrorBackground) == 0x000320, "Member 'UW_VolumeStorageLabel_C::MirrorBackground' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, AddTriangle) == 0x000321, "Member 'UW_VolumeStorageLabel_C::AddTriangle' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, Common_Content_Text) == 0x000328, "Member 'UW_VolumeStorageLabel_C::Common_Content_Text' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, VolumeSlotPadding) == 0x000330, "Member 'UW_VolumeStorageLabel_C::VolumeSlotPadding' has a wrong offset!");
static_assert(offsetof(UW_VolumeStorageLabel_C, IsFlipped) == 0x000340, "Member 'UW_VolumeStorageLabel_C::IsFlipped' has a wrong offset!");

}

