#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Dash

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Dash.GA_Dash_C
// 0x00C0 (0x05F0 - 0x0530)
class UGA_Dash_C final : public UDuneGameplayAction
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ADuneCharacter*                         AvatarCharacter;                                   // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDashStats                             DashStats;                                         // 0x0540(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDashStats                             DashStatsNPC;                                      // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	double                                        TimeToWaitForMovementMode;                         // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeToStopWaitingForMovementMode;                  // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MeleeImmunityDeactivationTime;                     // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MeleeImmunityDurationTunable;                      // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         DamageImmunityTypes;                               // 0x0580(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<EWeaponModFrame>                       WeaponModFrames;                                   // 0x0590(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	double                                        ImmunityRangeTunable;                              // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ImmunityAngleTunable;                              // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasDeactivatedDamageImmunity;                      // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B1[0x3];                                      // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActivatorName;                                     // 0x05B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECustomMovementType>                   RequiredCustomMovementModes;                       // 0x05C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x05D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            Gameplay_Effect_Class;                             // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UDamageableActorComponent*              DamageableComponent;                               // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnAvatarSet(const struct FGameplayAbilityActorInfo& InActorInfo);
	void ExecuteUbergraph_GA_Dash(int32 EntryPoint);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnChange_A43C86CD488375795A32C4BD28851D87(EMovementMode NewMovementMode, uint8 CustomMoveMode);
	void OnFinish_46A0CF16449E24DD479592A346C09E46();
	void Try_Activate_Suspensor_Dash(bool* bDidActivateSuspensorDash);
	void Unblock_Movement(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Dash_C">();
	}
	static class UGA_Dash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Dash_C>();
	}
};
static_assert(alignof(UGA_Dash_C) == 0x000008, "Wrong alignment on UGA_Dash_C");
static_assert(sizeof(UGA_Dash_C) == 0x0005F0, "Wrong size on UGA_Dash_C");
static_assert(offsetof(UGA_Dash_C, UberGraphFrame) == 0x000530, "Member 'UGA_Dash_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, AvatarCharacter) == 0x000538, "Member 'UGA_Dash_C::AvatarCharacter' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, DashStats) == 0x000540, "Member 'UGA_Dash_C::DashStats' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, DashStatsNPC) == 0x000550, "Member 'UGA_Dash_C::DashStatsNPC' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, TimeToWaitForMovementMode) == 0x000560, "Member 'UGA_Dash_C::TimeToWaitForMovementMode' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, TimeToStopWaitingForMovementMode) == 0x000568, "Member 'UGA_Dash_C::TimeToStopWaitingForMovementMode' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, MeleeImmunityDeactivationTime) == 0x000570, "Member 'UGA_Dash_C::MeleeImmunityDeactivationTime' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, MeleeImmunityDurationTunable) == 0x000578, "Member 'UGA_Dash_C::MeleeImmunityDurationTunable' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, DamageImmunityTypes) == 0x000580, "Member 'UGA_Dash_C::DamageImmunityTypes' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, WeaponModFrames) == 0x000590, "Member 'UGA_Dash_C::WeaponModFrames' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, ImmunityRangeTunable) == 0x0005A0, "Member 'UGA_Dash_C::ImmunityRangeTunable' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, ImmunityAngleTunable) == 0x0005A8, "Member 'UGA_Dash_C::ImmunityAngleTunable' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, HasDeactivatedDamageImmunity) == 0x0005B0, "Member 'UGA_Dash_C::HasDeactivatedDamageImmunity' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, ActivatorName) == 0x0005B4, "Member 'UGA_Dash_C::ActivatorName' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, RequiredCustomMovementModes) == 0x0005C0, "Member 'UGA_Dash_C::RequiredCustomMovementModes' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, EffectHandle) == 0x0005D0, "Member 'UGA_Dash_C::EffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, Gameplay_Effect_Class) == 0x0005E0, "Member 'UGA_Dash_C::Gameplay_Effect_Class' has a wrong offset!");
static_assert(offsetof(UGA_Dash_C, DamageableComponent) == 0x0005E8, "Member 'UGA_Dash_C::DamageableComponent' has a wrong offset!");

}

