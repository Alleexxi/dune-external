#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpiceFieldBase

#include "Basic.hpp"

#include "DuneSandbox_structs.hpp"


namespace SDK::Params
{

// Function BP_SpiceFieldBase.BP_SpiceFieldBase_C.ExecuteUbergraph_BP_SpiceFieldBase
// 0x0018 (0x0018 - 0x0000)
struct BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESpiceAddictionSystemStatus                   K2Node_Event_SpiceAddictionSystemStatus;           // 0x0004(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADunePlayerCharacter*                   K2Node_Event_PlayerCharacter;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpiceAddictionEnabled_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpiceAddicted_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase) == 0x000008, "Wrong alignment on BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase");
static_assert(sizeof(BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase) == 0x000018, "Wrong size on BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase");
static_assert(offsetof(BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase, EntryPoint) == 0x000000, "Member 'BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase, K2Node_Event_SpiceAddictionSystemStatus) == 0x000004, "Member 'BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase::K2Node_Event_SpiceAddictionSystemStatus' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase, K2Node_Event_PlayerCharacter) == 0x000008, "Member 'BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase::K2Node_Event_PlayerCharacter' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase, CallFunc_IsSpiceAddictionEnabled_ReturnValue) == 0x000010, "Member 'BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase::CallFunc_IsSpiceAddictionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase, CallFunc_IsSpiceAddicted_ReturnValue) == 0x000011, "Member 'BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase::CallFunc_IsSpiceAddicted_ReturnValue' has a wrong offset!");

// Function BP_SpiceFieldBase.BP_SpiceFieldBase_C.HandleOverlappingPlayerSpiceAddictionStatusChanged
// 0x0030 (0x0030 - 0x0000)
struct BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSpiceAddictionEnabled;                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSpiceAddicted;                                  // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SpiceAddictionSettings_C*           SpiceAddictionSettings;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class USpiceAddictionSettings*          CallFunc_GetDefaultSpiceAddictionSettings_ReturnValue; // 0x0018(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_SpiceAddictionSettings_C*           K2Node_DynamicCast_AsBP_Spice_Addiction_Settings;  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged) == 0x000008, "Wrong alignment on BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged");
static_assert(sizeof(BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged) == 0x000030, "Wrong size on BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged");
static_assert(offsetof(BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged, Player) == 0x000000, "Member 'BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged::Player' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged, bIsSpiceAddictionEnabled) == 0x000008, "Member 'BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged::bIsSpiceAddictionEnabled' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged, bIsSpiceAddicted) == 0x000009, "Member 'BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged::bIsSpiceAddicted' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged, SpiceAddictionSettings) == 0x000010, "Member 'BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged::SpiceAddictionSettings' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged, CallFunc_GetDefaultSpiceAddictionSettings_ReturnValue) == 0x000018, "Member 'BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged::CallFunc_GetDefaultSpiceAddictionSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged, K2Node_DynamicCast_AsBP_Spice_Addiction_Settings) == 0x000020, "Member 'BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged::K2Node_DynamicCast_AsBP_Spice_Addiction_Settings' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_SpiceFieldBase.BP_SpiceFieldBase_C.OnOverlappingPlayerSpiceAddictionStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_SpiceFieldBase_C_OnOverlappingPlayerSpiceAddictionStatusChanged final
{
public:
	ESpiceAddictionSystemStatus                   SpiceAddictionSystemStatus;                        // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADunePlayerCharacter*                   PlayerCharacter;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpiceFieldBase_C_OnOverlappingPlayerSpiceAddictionStatusChanged) == 0x000008, "Wrong alignment on BP_SpiceFieldBase_C_OnOverlappingPlayerSpiceAddictionStatusChanged");
static_assert(sizeof(BP_SpiceFieldBase_C_OnOverlappingPlayerSpiceAddictionStatusChanged) == 0x000010, "Wrong size on BP_SpiceFieldBase_C_OnOverlappingPlayerSpiceAddictionStatusChanged");
static_assert(offsetof(BP_SpiceFieldBase_C_OnOverlappingPlayerSpiceAddictionStatusChanged, SpiceAddictionSystemStatus) == 0x000000, "Member 'BP_SpiceFieldBase_C_OnOverlappingPlayerSpiceAddictionStatusChanged::SpiceAddictionSystemStatus' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnOverlappingPlayerSpiceAddictionStatusChanged, PlayerCharacter) == 0x000008, "Member 'BP_SpiceFieldBase_C_OnOverlappingPlayerSpiceAddictionStatusChanged::PlayerCharacter' has a wrong offset!");

// Function BP_SpiceFieldBase.BP_SpiceFieldBase_C.OnPlayerEnteredSpiceField
// 0x0030 (0x0030 - 0x0000)
struct BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField final
{
public:
	class ADunePlayerCharacter*                   PlayerCharacter;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         Temp_class_Variable;                               // 0x0008(0x0010)(ReferenceParm)
	ESpiceAddictionSystemStatus                   CallFunc_GetSpiceAddictionSystemStatus_ReturnValue; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpiceAddicted_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpiceAddictionEnabled_ReturnValue;      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         Temp_class_Variable_1;                             // 0x0020(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField) == 0x000008, "Wrong alignment on BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField");
static_assert(sizeof(BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField) == 0x000030, "Wrong size on BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField, PlayerCharacter) == 0x000000, "Member 'BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField, Temp_class_Variable) == 0x000008, "Member 'BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField, CallFunc_GetSpiceAddictionSystemStatus_ReturnValue) == 0x000018, "Member 'BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField::CallFunc_GetSpiceAddictionSystemStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField, CallFunc_IsSpiceAddicted_ReturnValue) == 0x000019, "Member 'BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField::CallFunc_IsSpiceAddicted_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField, CallFunc_IsSpiceAddictionEnabled_ReturnValue) == 0x00001A, "Member 'BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField::CallFunc_IsSpiceAddictionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField, Temp_class_Variable_1) == 0x000020, "Member 'BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField::Temp_class_Variable_1' has a wrong offset!");

// Function BP_SpiceFieldBase.BP_SpiceFieldBase_C.OnPlayerLeftSpiceField
// 0x0030 (0x0030 - 0x0000)
struct BP_SpiceFieldBase_C_OnPlayerLeftSpiceField final
{
public:
	class ADunePlayerCharacter*                   PlayerCharacter;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         Temp_class_Variable;                               // 0x0008(0x0010)(ReferenceParm)
	ESpiceAddictionSystemStatus                   CallFunc_GetSpiceAddictionSystemStatus_ReturnValue; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpiceAddicted_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpiceAddictionEnabled_ReturnValue;      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         Temp_class_Variable_1;                             // 0x0020(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_SpiceFieldBase_C_OnPlayerLeftSpiceField) == 0x000008, "Wrong alignment on BP_SpiceFieldBase_C_OnPlayerLeftSpiceField");
static_assert(sizeof(BP_SpiceFieldBase_C_OnPlayerLeftSpiceField) == 0x000030, "Wrong size on BP_SpiceFieldBase_C_OnPlayerLeftSpiceField");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerLeftSpiceField, PlayerCharacter) == 0x000000, "Member 'BP_SpiceFieldBase_C_OnPlayerLeftSpiceField::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerLeftSpiceField, Temp_class_Variable) == 0x000008, "Member 'BP_SpiceFieldBase_C_OnPlayerLeftSpiceField::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerLeftSpiceField, CallFunc_GetSpiceAddictionSystemStatus_ReturnValue) == 0x000018, "Member 'BP_SpiceFieldBase_C_OnPlayerLeftSpiceField::CallFunc_GetSpiceAddictionSystemStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerLeftSpiceField, CallFunc_IsSpiceAddicted_ReturnValue) == 0x000019, "Member 'BP_SpiceFieldBase_C_OnPlayerLeftSpiceField::CallFunc_IsSpiceAddicted_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerLeftSpiceField, CallFunc_IsSpiceAddictionEnabled_ReturnValue) == 0x00001A, "Member 'BP_SpiceFieldBase_C_OnPlayerLeftSpiceField::CallFunc_IsSpiceAddictionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SpiceFieldBase_C_OnPlayerLeftSpiceField, Temp_class_Variable_1) == 0x000020, "Member 'BP_SpiceFieldBase_C_OnPlayerLeftSpiceField::Temp_class_Variable_1' has a wrong offset!");

}

