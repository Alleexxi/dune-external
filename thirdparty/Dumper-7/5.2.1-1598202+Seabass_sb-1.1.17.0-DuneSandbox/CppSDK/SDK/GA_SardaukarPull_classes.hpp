#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_SardaukarPull

#include "Basic.hpp"

#include "GA_EquipableAbility_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_SardaukarPull.GA_SardaukarPull_C
// 0x0270 (0x07F0 - 0x0580)
class UGA_SardaukarPull_C : public UGA_EquipableAbility_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0580(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        MaxTraceDistance;                                  // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimDelay;                                         // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PostFireWaitDelay;                                 // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59C[0x4];                                      // 0x059C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BaseImpulseForce;                                  // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxTotalForce;                                     // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitActorOffsetFromRoot;                            // 0x05B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         DuneCharacter;                                     // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ModifiedPhysicsStateDuration;                      // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasLandedIntoSlide;                               // 0x05DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasModifiedPhysics;                               // 0x05DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DE[0x2];                                      // 0x05DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlideOutTime;                                      // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlideOutVelocity;                                  // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAimOffsetBlendSpace*                   AbilityAimOffset;                                  // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CacheMaxTotalForce;                                // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CacheBaseImpulseForce;                             // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CacheMaxTraceDistance;                             // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               Trace_Channel;                                     // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bButtonReleased;                                   // 0x0609(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60A[0x6];                                      // 0x060A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UPhysicalMaterial*>                ProhibitedMaterials;                               // 0x0610(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FHitResult                             TraceOutHitResult;                                 // 0x0660(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FName                                   Targeting_Task_Instance_Name;                      // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PostHitCharacter_PreEndAbilityDelay;               // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_754[0x4];                                      // 0x0754(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDuneDamageType>            SardaukarPullDamageType;                           // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          bUsedOnTarget;                                     // 0x0760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_761[0x7];                                      // 0x0761(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CacheCooldownForCancelled;                         // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CacheCooldownForTargetUsage;                       // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CacheCooldownForTerrainUsage;                      // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CameraContextStart;                                // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CameraContextMovement;                             // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CameraContextTarget;                               // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PostFireCancellationDelay;                         // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79C[0x4];                                      // 0x079C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AirborneCharacterImpulse;                          // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewTempGravityScalar;                              // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Cast_GC_Tag;                                       // 0x07AC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B4[0x4];                                      // 0x07B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_VerifyClientMove*          Task_VerifyMovement;                               // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RootMotionPullPower;                               // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_ApplyRootMotionConstantForce* RootMotionTask;                                 // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bAddedMoveBlock;                                   // 0x07D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D1[0x7];                                      // 0x07D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            MoveBlockGE;                                       // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         RootMotionDuration;                                // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SardaukarPullLaunchTag;                            // 0x07E4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bInvalidShot;                                      // 0x07EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Added_7048C5D14FC24B1CF22079831D104BD5();
	void AttemptAddRemoveTempPhysicsChanges(bool bIsAdd);
	void CacheTuningValues();
	void Cancelled_D93B48344C1327AD716797833B699976(const struct FGameplayAbilityTargetDataHandle& Data);
	void CheckHazardZone(struct FHitResult& HitResult, bool* bOut);
	bool CheckPhysicalMaterial(const struct FHitResult& HitResult);
	void ExecuteUbergraph_GA_SardaukarPull(int32 EntryPoint);
	void Get_Scaled_Force(class AActor* HitActor_0, const struct FVector& NormalizedPullDirection, struct FVector* Force, double* Multiplier);
	void HandleHittingCharacter(const struct FHitResult& HitResult, int32* TargetIsCharacter);
	void ImpulseLaunch();
	void InitializeStaticProperties(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec);
	void InvalidHit();
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void Launch_Character();
	void MovementCorrections(bool Enable);
	void OnBlendOut_F9411DE1402A1401D9CFEA81E4E4C751();
	void OnCancelled_F9411DE1402A1401D9CFEA81E4E4C751();
	void OnCompleted_F9411DE1402A1401D9CFEA81E4E4C751();
	void OnFinish_04D212C6427638352A6D679D901BB69E();
	void OnFinish_0E4E5EC54ED28A05A3A9BF829BEB29B2();
	void OnFinish_51B10FE448446FC6B6F500AEF45FECBB();
	void OnFinish_629E705544D56D593CB628ADC23444BD();
	void OnFinish_8902D18C4F2024EEC239FDB9FC5199A8();
	void OnFinish_DFA7FDA04EEE7074E55676B99D5043DB();
	void OnInterrupted_F9411DE1402A1401D9CFEA81E4E4C751();
	void OnRelease_251A0FD642CFBD1DE782959D332E8DC3(float TimeHeld);
	void PostHitCharacter();
	void Removed_73C1C180461632A75A0A8A843D07B380();
	void ResetTempVariables();
	void RootMotionLaunch();
	void TargetConfirmation(const struct FGameplayAbilityTargetDataHandle& Data);
	void UseRootMotionLaunch(bool* bUseRootMotionLaunch);
	void Valid_Terrain_Hit_Found();
	void ValidData_D93B48344C1327AD716797833B699976(const struct FGameplayAbilityTargetDataHandle& Data);
	void WireVisuals();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_SardaukarPull_C">();
	}
	static class UGA_SardaukarPull_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_SardaukarPull_C>();
	}
};
static_assert(alignof(UGA_SardaukarPull_C) == 0x000008, "Wrong alignment on UGA_SardaukarPull_C");
static_assert(sizeof(UGA_SardaukarPull_C) == 0x0007F0, "Wrong size on UGA_SardaukarPull_C");
static_assert(offsetof(UGA_SardaukarPull_C, UberGraphFrame) == 0x000580, "Member 'UGA_SardaukarPull_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, MaxTraceDistance) == 0x000588, "Member 'UGA_SardaukarPull_C::MaxTraceDistance' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, AnimDelay) == 0x000590, "Member 'UGA_SardaukarPull_C::AnimDelay' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, PostFireWaitDelay) == 0x000598, "Member 'UGA_SardaukarPull_C::PostFireWaitDelay' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, BaseImpulseForce) == 0x0005A0, "Member 'UGA_SardaukarPull_C::BaseImpulseForce' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, MaxTotalForce) == 0x0005A8, "Member 'UGA_SardaukarPull_C::MaxTotalForce' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, HitActor) == 0x0005B0, "Member 'UGA_SardaukarPull_C::HitActor' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, HitActorOffsetFromRoot) == 0x0005B8, "Member 'UGA_SardaukarPull_C::HitActorOffsetFromRoot' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, DuneCharacter) == 0x0005D0, "Member 'UGA_SardaukarPull_C::DuneCharacter' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, ModifiedPhysicsStateDuration) == 0x0005D8, "Member 'UGA_SardaukarPull_C::ModifiedPhysicsStateDuration' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, bHasLandedIntoSlide) == 0x0005DC, "Member 'UGA_SardaukarPull_C::bHasLandedIntoSlide' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, bHasModifiedPhysics) == 0x0005DD, "Member 'UGA_SardaukarPull_C::bHasModifiedPhysics' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, SlideOutTime) == 0x0005E0, "Member 'UGA_SardaukarPull_C::SlideOutTime' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, SlideOutVelocity) == 0x0005E4, "Member 'UGA_SardaukarPull_C::SlideOutVelocity' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, AbilityAimOffset) == 0x0005E8, "Member 'UGA_SardaukarPull_C::AbilityAimOffset' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, CacheMaxTotalForce) == 0x0005F0, "Member 'UGA_SardaukarPull_C::CacheMaxTotalForce' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, CacheBaseImpulseForce) == 0x0005F8, "Member 'UGA_SardaukarPull_C::CacheBaseImpulseForce' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, CacheMaxTraceDistance) == 0x000600, "Member 'UGA_SardaukarPull_C::CacheMaxTraceDistance' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, Trace_Channel) == 0x000608, "Member 'UGA_SardaukarPull_C::Trace_Channel' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, bButtonReleased) == 0x000609, "Member 'UGA_SardaukarPull_C::bButtonReleased' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, ProhibitedMaterials) == 0x000610, "Member 'UGA_SardaukarPull_C::ProhibitedMaterials' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, TraceOutHitResult) == 0x000660, "Member 'UGA_SardaukarPull_C::TraceOutHitResult' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, Targeting_Task_Instance_Name) == 0x000748, "Member 'UGA_SardaukarPull_C::Targeting_Task_Instance_Name' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, PostHitCharacter_PreEndAbilityDelay) == 0x000750, "Member 'UGA_SardaukarPull_C::PostHitCharacter_PreEndAbilityDelay' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, SardaukarPullDamageType) == 0x000758, "Member 'UGA_SardaukarPull_C::SardaukarPullDamageType' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, bUsedOnTarget) == 0x000760, "Member 'UGA_SardaukarPull_C::bUsedOnTarget' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, CacheCooldownForCancelled) == 0x000768, "Member 'UGA_SardaukarPull_C::CacheCooldownForCancelled' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, CacheCooldownForTargetUsage) == 0x000770, "Member 'UGA_SardaukarPull_C::CacheCooldownForTargetUsage' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, CacheCooldownForTerrainUsage) == 0x000778, "Member 'UGA_SardaukarPull_C::CacheCooldownForTerrainUsage' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, CameraContextStart) == 0x000780, "Member 'UGA_SardaukarPull_C::CameraContextStart' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, CameraContextMovement) == 0x000788, "Member 'UGA_SardaukarPull_C::CameraContextMovement' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, CameraContextTarget) == 0x000790, "Member 'UGA_SardaukarPull_C::CameraContextTarget' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, PostFireCancellationDelay) == 0x000798, "Member 'UGA_SardaukarPull_C::PostFireCancellationDelay' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, AirborneCharacterImpulse) == 0x0007A0, "Member 'UGA_SardaukarPull_C::AirborneCharacterImpulse' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, NewTempGravityScalar) == 0x0007A8, "Member 'UGA_SardaukarPull_C::NewTempGravityScalar' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, Cast_GC_Tag) == 0x0007AC, "Member 'UGA_SardaukarPull_C::Cast_GC_Tag' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, Task_VerifyMovement) == 0x0007B8, "Member 'UGA_SardaukarPull_C::Task_VerifyMovement' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, RootMotionPullPower) == 0x0007C0, "Member 'UGA_SardaukarPull_C::RootMotionPullPower' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, RootMotionTask) == 0x0007C8, "Member 'UGA_SardaukarPull_C::RootMotionTask' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, bAddedMoveBlock) == 0x0007D0, "Member 'UGA_SardaukarPull_C::bAddedMoveBlock' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, MoveBlockGE) == 0x0007D8, "Member 'UGA_SardaukarPull_C::MoveBlockGE' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, RootMotionDuration) == 0x0007E0, "Member 'UGA_SardaukarPull_C::RootMotionDuration' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, SardaukarPullLaunchTag) == 0x0007E4, "Member 'UGA_SardaukarPull_C::SardaukarPullLaunchTag' has a wrong offset!");
static_assert(offsetof(UGA_SardaukarPull_C, bInvalidShot) == 0x0007EC, "Member 'UGA_SardaukarPull_C::bInvalidShot' has a wrong offset!");

}

