#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_NerveStrike

#include "Basic.hpp"

#include "GA_NerveStrike_classes.hpp"
#include "GA_NerveStrike_parameters.hpp"


namespace SDK
{

// Function GA_NerveStrike.GA_NerveStrike_C.Added_9701B952478ECA293231B89DF07834C6
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::Added_9701B952478ECA293231B89DF07834C6()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "Added_9701B952478ECA293231B89DF07834C6");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.CacheTuningValues
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::CacheTuningValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "CacheTuningValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.EventReceived_0BE1A0B845A7623E031786AA601AB872
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayEventData&        Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UGA_NerveStrike_C::EventReceived_0BE1A0B845A7623E031786AA601AB872(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "EventReceived_0BE1A0B845A7623E031786AA601AB872");

	Params::GA_NerveStrike_C_EventReceived_0BE1A0B845A7623E031786AA601AB872 Parms{};

	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_NerveStrike.GA_NerveStrike_C.EventReceived_43640DA34E5FB90C0C57B6A072DF7E51
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayEventData&        Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UGA_NerveStrike_C::EventReceived_43640DA34E5FB90C0C57B6A072DF7E51(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "EventReceived_43640DA34E5FB90C0C57B6A072DF7E51");

	Params::GA_NerveStrike_C_EventReceived_43640DA34E5FB90C0C57B6A072DF7E51 Parms{};

	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_NerveStrike.GA_NerveStrike_C.EventReceived_CCC58D0D4A59190F62D3A28231D64E5F
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayEventData&        Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UGA_NerveStrike_C::EventReceived_CCC58D0D4A59190F62D3A28231D64E5F(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "EventReceived_CCC58D0D4A59190F62D3A28231D64E5F");

	Params::GA_NerveStrike_C_EventReceived_CCC58D0D4A59190F62D3A28231D64E5F Parms{};

	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_NerveStrike.GA_NerveStrike_C.ExecuteUbergraph_GA_NerveStrike
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_NerveStrike_C::ExecuteUbergraph_GA_NerveStrike(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "ExecuteUbergraph_GA_NerveStrike");

	Params::GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_NerveStrike.GA_NerveStrike_C.Get Actor Rotation Towards
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGA_NerveStrike_C::Get_Actor_Rotation_Towards(class AActor* Actor, const struct FVector& Target, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "Get Actor Rotation Towards");

	Params::GA_NerveStrike_C_Get_Actor_Rotation_Towards Parms{};

	Parms.Actor = Actor;
	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function GA_NerveStrike.GA_NerveStrike_C.GetTargetingDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UGA_NerveStrike_C::GetTargetingDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "GetTargetingDirection");

	Params::GA_NerveStrike_C_GetTargetingDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_NerveStrike.GA_NerveStrike_C.InitializeStaticProperties
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityActorInfo& ActorInfo                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// const struct FGameplayAbilitySpec&      Spec                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UGA_NerveStrike_C::InitializeStaticProperties(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpec& Spec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "InitializeStaticProperties");

	Params::GA_NerveStrike_C_InitializeStaticProperties Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.Spec = std::move(Spec);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_NerveStrike.GA_NerveStrike_C.InitMemberVariables
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_NerveStrike_C::InitMemberVariables(bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "InitMemberVariables");

	Params::GA_NerveStrike_C_InitMemberVariables Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function GA_NerveStrike.GA_NerveStrike_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_NerveStrike_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_NerveStrike_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "K2_OnEndAbility");

	Params::GA_NerveStrike_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_NerveStrike.GA_NerveStrike_C.OnBlendOut_FCC5BA4B42F0B4CE40749A87CCBB9A88
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::OnBlendOut_FCC5BA4B42F0B4CE40749A87CCBB9A88()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "OnBlendOut_FCC5BA4B42F0B4CE40749A87CCBB9A88");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.OnCancelled_FCC5BA4B42F0B4CE40749A87CCBB9A88
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::OnCancelled_FCC5BA4B42F0B4CE40749A87CCBB9A88()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "OnCancelled_FCC5BA4B42F0B4CE40749A87CCBB9A88");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.OnCompleted_FCC5BA4B42F0B4CE40749A87CCBB9A88
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::OnCompleted_FCC5BA4B42F0B4CE40749A87CCBB9A88()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "OnCompleted_FCC5BA4B42F0B4CE40749A87CCBB9A88");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.OnFinish_3913C93844B9A448F78FDC97F4AF1021
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::OnFinish_3913C93844B9A448F78FDC97F4AF1021()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "OnFinish_3913C93844B9A448F78FDC97F4AF1021");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.OnFinish_D33C482E497402F1576829987155728B
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::OnFinish_D33C482E497402F1576829987155728B()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "OnFinish_D33C482E497402F1576829987155728B");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.OnInterrupted_FCC5BA4B42F0B4CE40749A87CCBB9A88
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::OnInterrupted_FCC5BA4B42F0B4CE40749A87CCBB9A88()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "OnInterrupted_FCC5BA4B42F0B4CE40749A87CCBB9A88");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.OnSync_183A95C34E92FC0D5E0195890DD3D318
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::OnSync_183A95C34E92FC0D5E0195890DD3D318()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "OnSync_183A95C34E92FC0D5E0195890DD3D318");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.OnSync_7E6D786C46398E982D198D9AB9B1B172
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::OnSync_7E6D786C46398E982D198D9AB9B1B172()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "OnSync_7E6D786C46398E982D198D9AB9B1B172");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.PerformStrikeSequence
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::PerformStrikeSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "PerformStrikeSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.Removed_7FCDDED949F89D3D80A219B937521C85
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::Removed_7FCDDED949F89D3D80A219B937521C85()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "Removed_7FCDDED949F89D3D80A219B937521C85");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.ThrowAndDebuff
// (BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::ThrowAndDebuff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "ThrowAndDebuff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.TryRotateTowardsTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetActor_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGA_NerveStrike_C::TryRotateTowardsTarget(class AActor* Actor, class AActor* TargetActor_0, struct FRotator* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "TryRotateTowardsTarget");

	Params::GA_NerveStrike_C_TryRotateTowardsTarget Parms{};

	Parms.Actor = Actor;
	Parms.TargetActor_0 = TargetActor_0;

	UObject::ProcessEvent(Func, &Parms);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);
}


// Function GA_NerveStrike.GA_NerveStrike_C.TrySoftLockTarget
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_NerveStrike_C::TrySoftLockTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "TrySoftLockTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_NerveStrike.GA_NerveStrike_C.DebugDrawTargetting
// (Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const struct FVector&                   Center                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HalfHeight                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_NerveStrike_C::DebugDrawTargetting(const struct FVector& Center, float HalfHeight, const struct FVector& Direction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "DebugDrawTargetting");

	Params::GA_NerveStrike_C_DebugDrawTargetting Parms{};

	Parms.Center = std::move(Center);
	Parms.HalfHeight = HalfHeight;
	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_NerveStrike.GA_NerveStrike_C.FilterTargets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<class AActor*>&                  Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class AActor*>*                  Filtered                                               (Parm, OutParm)

void UGA_NerveStrike_C::FilterTargets(TArray<class AActor*>& Targets, TArray<class AActor*>* Filtered) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "FilterTargets");

	Params::GA_NerveStrike_C_FilterTargets Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);

	if (Filtered != nullptr)
		*Filtered = std::move(Parms.Filtered);
}


// Function GA_NerveStrike.GA_NerveStrike_C.FindTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ADuneCharacter*                   OwnerCharacter_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bStart                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor**                          TargetCharacter                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_NerveStrike_C::FindTarget(class ADuneCharacter* OwnerCharacter_0, bool bStart, class AActor** TargetCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "FindTarget");

	Params::GA_NerveStrike_C_FindTarget Parms{};

	Parms.OwnerCharacter_0 = OwnerCharacter_0;
	Parms.bStart = bStart;

	UObject::ProcessEvent(Func, &Parms);

	if (TargetCharacter != nullptr)
		*TargetCharacter = Parms.TargetCharacter;
}


// Function GA_NerveStrike.GA_NerveStrike_C.Get Best Target
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const struct FVector&                   TargetingOrigin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   TargetingDirection_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>&                  Candidates                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AActor**                          Best                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_NerveStrike_C::Get_Best_Target(const struct FVector& TargetingOrigin, const struct FVector& TargetingDirection_0, TArray<class AActor*>& Candidates, class AActor** Best) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "Get Best Target");

	Params::GA_NerveStrike_C_Get_Best_Target Parms{};

	Parms.TargetingOrigin = std::move(TargetingOrigin);
	Parms.TargetingDirection_0 = std::move(TargetingDirection_0);
	Parms.Candidates = std::move(Candidates);

	UObject::ProcessEvent(Func, &Parms);

	Candidates = std::move(Parms.Candidates);

	if (Best != nullptr)
		*Best = Parms.Best;
}


// Function GA_NerveStrike.GA_NerveStrike_C.ValidateTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ADuneCharacter*                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_NerveStrike_C::ValidateTarget(class ADuneCharacter* Target, bool* Valid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_NerveStrike_C", "ValidateTarget");

	Params::GA_NerveStrike_C_ValidateTarget Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}

}

