#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mine_Remote_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "BP_ProjectileThrowableBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Mine_Remote_Base.BP_Mine_Remote_Base_C
// 0x00C8 (0x1160 - 0x1098)
class ABP_Mine_Remote_Base_C : public ABP_ProjectileThrowableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Mine_Remote_Base_C;              // 0x1098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDamageableActorComponent*              DamageableActor;                                   // 0x10A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AMercunaNavModifierVolume*              MercunaNavModifier;                                // 0x10A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFcAudioEvent*                          Audio_Detonation;                                  // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Material_Element_Index;                            // 0x10B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10BC[0x4];                                     // 0x10BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynamicMaterialInstance;                           // 0x10C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           EmissiveColor;                                     // 0x10C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasSetEmissive;                                   // 0x10D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bLaunched;                                         // 0x10D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_10DA[0x2];                                     // 0x10DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExpirationTimer_Seconds;                           // 0x10DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDetonated;                                        // 0x10E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_10E1[0x7];                                     // 0x10E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ExpirationTimerHandle;                             // 0x10E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<ECollisionChannel>                     DontLandOnCollisionObjectTypes;                    // 0x10F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bDetonateOnDestroy;                                // 0x1100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1101[0x3];                                     // 0x1101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cached_Base_Damage;                                // 0x1104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cached_Minimum_Damage;                             // 0x1108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cached_Damage_Inner_Radius;                        // 0x110C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cached_Damage_Outer_Radius;                        // 0x1110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1114[0x4];                                     // 0x1114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CachedPoiseDamage;                                 // 0x1118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoiseDamageData                       CachedPoiseDamageStruct;                           // 0x1120(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_112C[0x4];                                     // 0x112C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFcAudioEvent*                          SFX_MinePlacement;                                 // 0x1130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ProximityRadius;                                   // 0x1138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_113C[0x4];                                     // 0x113C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnDetonate;                                        // 0x1140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bShouldProximityDetonate;                          // 0x1150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bArmingTimePassed;                                 // 0x1151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1152[0x6];                                     // 0x1152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ArmingTime;                                        // 0x1158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_Mine_Remote_DamageableActor_K2Node_ComponentBoundEvent_1_HandleDeathOrDefeatOnServerSignature__DelegateSignature(const struct FInstigatorInfo& InstigatorInfo, const bool bIsDeath, TSubclassOf<class UDuneDamageType> DeathDefeatCausingDamageType);
	void CacheTuningValues();
	void CreateNavModifier();
	void DelayForExpiration();
	void DestroyedEventByTimer();
	void Detonate();
	void ExecuteUbergraph_BP_Mine_Remote_Base(int32 EntryPoint);
	void HitActorsCallbackForTelem(const TSet<class AActor*>& HitActors);
	void Launch(const struct FVector& Velocity, const struct FTransform& Transform);
	void MulticastAttachMine(const struct FTransform& MineTransform, class AActor* AttachActor, class UPrimitiveComponent* AttachComponent);
	void MulticastDetonate();
	void MulticastSwapPredictedForSimulatedProxy();
	void OnProjectileStopped(const struct FHitResult& ImpactResult);
	void OnRep_bHasSetEmissive();
	void PredictedProjectileDestroyed(class AActor* DestroyedActor);
	void ReceiveActorReplaced(class AActor* FromActor);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void SetEmissiveColor();
	void SimulateTick(const float InDeltaTime);
	void SwapPredictedForSimulatedProxy();

	bool IsValidLandingSpot(const struct FHitResult& Hit) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Mine_Remote_Base_C">();
	}
	static class ABP_Mine_Remote_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Mine_Remote_Base_C>();
	}
};
static_assert(alignof(ABP_Mine_Remote_Base_C) == 0x000008, "Wrong alignment on ABP_Mine_Remote_Base_C");
static_assert(sizeof(ABP_Mine_Remote_Base_C) == 0x001160, "Wrong size on ABP_Mine_Remote_Base_C");
static_assert(offsetof(ABP_Mine_Remote_Base_C, UberGraphFrame_BP_Mine_Remote_Base_C) == 0x001098, "Member 'ABP_Mine_Remote_Base_C::UberGraphFrame_BP_Mine_Remote_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, DamageableActor) == 0x0010A0, "Member 'ABP_Mine_Remote_Base_C::DamageableActor' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, MercunaNavModifier) == 0x0010A8, "Member 'ABP_Mine_Remote_Base_C::MercunaNavModifier' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, Audio_Detonation) == 0x0010B0, "Member 'ABP_Mine_Remote_Base_C::Audio_Detonation' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, Material_Element_Index) == 0x0010B8, "Member 'ABP_Mine_Remote_Base_C::Material_Element_Index' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, DynamicMaterialInstance) == 0x0010C0, "Member 'ABP_Mine_Remote_Base_C::DynamicMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, EmissiveColor) == 0x0010C8, "Member 'ABP_Mine_Remote_Base_C::EmissiveColor' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, bHasSetEmissive) == 0x0010D8, "Member 'ABP_Mine_Remote_Base_C::bHasSetEmissive' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, bLaunched) == 0x0010D9, "Member 'ABP_Mine_Remote_Base_C::bLaunched' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, ExpirationTimer_Seconds) == 0x0010DC, "Member 'ABP_Mine_Remote_Base_C::ExpirationTimer_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, bDetonated) == 0x0010E0, "Member 'ABP_Mine_Remote_Base_C::bDetonated' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, ExpirationTimerHandle) == 0x0010E8, "Member 'ABP_Mine_Remote_Base_C::ExpirationTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, DontLandOnCollisionObjectTypes) == 0x0010F0, "Member 'ABP_Mine_Remote_Base_C::DontLandOnCollisionObjectTypes' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, bDetonateOnDestroy) == 0x001100, "Member 'ABP_Mine_Remote_Base_C::bDetonateOnDestroy' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, Cached_Base_Damage) == 0x001104, "Member 'ABP_Mine_Remote_Base_C::Cached_Base_Damage' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, Cached_Minimum_Damage) == 0x001108, "Member 'ABP_Mine_Remote_Base_C::Cached_Minimum_Damage' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, Cached_Damage_Inner_Radius) == 0x00110C, "Member 'ABP_Mine_Remote_Base_C::Cached_Damage_Inner_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, Cached_Damage_Outer_Radius) == 0x001110, "Member 'ABP_Mine_Remote_Base_C::Cached_Damage_Outer_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, CachedPoiseDamage) == 0x001118, "Member 'ABP_Mine_Remote_Base_C::CachedPoiseDamage' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, CachedPoiseDamageStruct) == 0x001120, "Member 'ABP_Mine_Remote_Base_C::CachedPoiseDamageStruct' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, SFX_MinePlacement) == 0x001130, "Member 'ABP_Mine_Remote_Base_C::SFX_MinePlacement' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, ProximityRadius) == 0x001138, "Member 'ABP_Mine_Remote_Base_C::ProximityRadius' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, OnDetonate) == 0x001140, "Member 'ABP_Mine_Remote_Base_C::OnDetonate' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, bShouldProximityDetonate) == 0x001150, "Member 'ABP_Mine_Remote_Base_C::bShouldProximityDetonate' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, bArmingTimePassed) == 0x001151, "Member 'ABP_Mine_Remote_Base_C::bArmingTimePassed' has a wrong offset!");
static_assert(offsetof(ABP_Mine_Remote_Base_C, ArmingTime) == 0x001158, "Member 'ABP_Mine_Remote_Base_C::ArmingTime' has a wrong offset!");

}

