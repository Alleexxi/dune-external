#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpiceFieldBase

#include "Basic.hpp"

#include "BP_SpiceFieldBase_classes.hpp"
#include "BP_SpiceFieldBase_parameters.hpp"


namespace SDK
{

// Function BP_SpiceFieldBase.BP_SpiceFieldBase_C.ExecuteUbergraph_BP_SpiceFieldBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiceFieldBase_C::ExecuteUbergraph_BP_SpiceFieldBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiceFieldBase_C", "ExecuteUbergraph_BP_SpiceFieldBase");

	Params::BP_SpiceFieldBase_C_ExecuteUbergraph_BP_SpiceFieldBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SpiceFieldBase.BP_SpiceFieldBase_C.HandleOverlappingPlayerSpiceAddictionStatusChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsSpiceAddictionEnabled                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsSpiceAddicted                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SpiceFieldBase_C::HandleOverlappingPlayerSpiceAddictionStatusChanged(class AActor* Player, bool bIsSpiceAddictionEnabled, bool bIsSpiceAddicted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiceFieldBase_C", "HandleOverlappingPlayerSpiceAddictionStatusChanged");

	Params::BP_SpiceFieldBase_C_HandleOverlappingPlayerSpiceAddictionStatusChanged Parms{};

	Parms.Player = Player;
	Parms.bIsSpiceAddictionEnabled = bIsSpiceAddictionEnabled;
	Parms.bIsSpiceAddicted = bIsSpiceAddicted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SpiceFieldBase.BP_SpiceFieldBase_C.OnOverlappingPlayerSpiceAddictionStatusChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const ESpiceAddictionSystemStatus       SpiceAddictionSystemStatus                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADunePlayerCharacter*             PlayerCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SpiceFieldBase_C::OnOverlappingPlayerSpiceAddictionStatusChanged(const ESpiceAddictionSystemStatus SpiceAddictionSystemStatus, class ADunePlayerCharacter* PlayerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiceFieldBase_C", "OnOverlappingPlayerSpiceAddictionStatusChanged");

	Params::BP_SpiceFieldBase_C_OnOverlappingPlayerSpiceAddictionStatusChanged Parms{};

	Parms.SpiceAddictionSystemStatus = SpiceAddictionSystemStatus;
	Parms.PlayerCharacter = PlayerCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SpiceFieldBase.BP_SpiceFieldBase_C.OnPlayerEnteredSpiceField
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADunePlayerCharacter*             PlayerCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SpiceFieldBase_C::OnPlayerEnteredSpiceField(class ADunePlayerCharacter* PlayerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiceFieldBase_C", "OnPlayerEnteredSpiceField");

	Params::BP_SpiceFieldBase_C_OnPlayerEnteredSpiceField Parms{};

	Parms.PlayerCharacter = PlayerCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SpiceFieldBase.BP_SpiceFieldBase_C.OnPlayerLeftSpiceField
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADunePlayerCharacter*             PlayerCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SpiceFieldBase_C::OnPlayerLeftSpiceField(class ADunePlayerCharacter* PlayerCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpiceFieldBase_C", "OnPlayerLeftSpiceField");

	Params::BP_SpiceFieldBase_C_OnPlayerLeftSpiceField Parms{};

	Parms.PlayerCharacter = PlayerCharacter;

	UObject::ProcessEvent(Func, &Parms);
}

}

