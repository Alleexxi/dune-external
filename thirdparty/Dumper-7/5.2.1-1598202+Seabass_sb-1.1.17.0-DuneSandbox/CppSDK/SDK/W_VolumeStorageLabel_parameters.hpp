#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_VolumeStorageLabel

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.UpdateTriangleVisibility
// 0x0004 (0x0004 - 0x0000)
struct W_VolumeStorageLabel_C_UpdateTriangleVisibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VolumeStorageLabel_C_UpdateTriangleVisibility) == 0x000001, "Wrong alignment on W_VolumeStorageLabel_C_UpdateTriangleVisibility");
static_assert(sizeof(W_VolumeStorageLabel_C_UpdateTriangleVisibility) == 0x000004, "Wrong size on W_VolumeStorageLabel_C_UpdateTriangleVisibility");
static_assert(offsetof(W_VolumeStorageLabel_C_UpdateTriangleVisibility, Temp_bool_Variable) == 0x000000, "Member 'W_VolumeStorageLabel_C_UpdateTriangleVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_UpdateTriangleVisibility, Temp_byte_Variable) == 0x000001, "Member 'W_VolumeStorageLabel_C_UpdateTriangleVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_UpdateTriangleVisibility, Temp_byte_Variable_1) == 0x000002, "Member 'W_VolumeStorageLabel_C_UpdateTriangleVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_UpdateTriangleVisibility, K2Node_Select_Default) == 0x000003, "Member 'W_VolumeStorageLabel_C_UpdateTriangleVisibility::K2Node_Select_Default' has a wrong offset!");

// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.SetMaxState
// 0x0100 (0x0100 - 0x0000)
struct W_VolumeStorageLabel_C_SetMaxState final
{
public:
	bool                                          IsMax;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_2;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonTextStyle>           Temp_class_Variable;                               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCommonTextStyle>           Temp_class_Variable_1;                             // 0x0058(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USizeBoxSlot*                           CallFunc_SlotAsSizeBoxSlot_ReturnValue;            // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_2;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00C0(0x0014)()
	float                                         K2Node_Select_Default_4;                           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UCommonTextStyle>           K2Node_Select_Default_5;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetRenderOpacity_InOpacity_ImplicitCast;  // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VolumeStorageLabel_C_SetMaxState) == 0x000008, "Wrong alignment on W_VolumeStorageLabel_C_SetMaxState");
static_assert(sizeof(W_VolumeStorageLabel_C_SetMaxState) == 0x000100, "Wrong size on W_VolumeStorageLabel_C_SetMaxState");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, IsMax) == 0x000000, "Member 'W_VolumeStorageLabel_C_SetMaxState::IsMax' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_bool_Variable) == 0x000001, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_struct_Variable) == 0x000004, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_struct_Variable_1) == 0x000014, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_bool_Variable_1) == 0x000024, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_real_Variable) == 0x000028, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_real_Variable_1) == 0x00002C, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_bool_Variable_2) == 0x000030, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_byte_Variable) == 0x000031, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_byte_Variable_1) == 0x000032, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_bool_Variable_3) == 0x000033, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_real_Variable_2) == 0x000038, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_real_Variable_3) == 0x000040, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_bool_Variable_4) == 0x000048, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_class_Variable) == 0x000050, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_class_Variable_1) == 0x000058, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_bool_Variable_5) == 0x000060, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_struct_Variable_2) == 0x000064, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, Temp_struct_Variable_3) == 0x000074, "Member 'W_VolumeStorageLabel_C_SetMaxState::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, CallFunc_SlotAsSizeBoxSlot_ReturnValue) == 0x000088, "Member 'W_VolumeStorageLabel_C_SetMaxState::CallFunc_SlotAsSizeBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, K2Node_Select_Default) == 0x000090, "Member 'W_VolumeStorageLabel_C_SetMaxState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, K2Node_Select_Default_1) == 0x0000A0, "Member 'W_VolumeStorageLabel_C_SetMaxState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, K2Node_Select_Default_2) == 0x0000A8, "Member 'W_VolumeStorageLabel_C_SetMaxState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, K2Node_Select_Default_3) == 0x0000B0, "Member 'W_VolumeStorageLabel_C_SetMaxState::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, K2Node_MakeStruct_SlateColor) == 0x0000C0, "Member 'W_VolumeStorageLabel_C_SetMaxState::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, K2Node_Select_Default_4) == 0x0000D4, "Member 'W_VolumeStorageLabel_C_SetMaxState::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, K2Node_Select_Default_5) == 0x0000D8, "Member 'W_VolumeStorageLabel_C_SetMaxState::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, K2Node_MakeStruct_Margin) == 0x0000E0, "Member 'W_VolumeStorageLabel_C_SetMaxState::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000F0, "Member 'W_VolumeStorageLabel_C_SetMaxState::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, CallFunc_IsValid_ReturnValue) == 0x0000F8, "Member 'W_VolumeStorageLabel_C_SetMaxState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetMaxState, CallFunc_SetRenderOpacity_InOpacity_ImplicitCast) == 0x0000FC, "Member 'W_VolumeStorageLabel_C_SetMaxState::CallFunc_SetRenderOpacity_InOpacity_ImplicitCast' has a wrong offset!");

// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.SetFlipped
// 0x0058 (0x0058 - 0x0000)
struct W_VolumeStorageLabel_C_SetFlipped final
{
public:
	bool                                          IsFlipped_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_MakeStruct_Left_ImplicitCast;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VolumeStorageLabel_C_SetFlipped) == 0x000008, "Wrong alignment on W_VolumeStorageLabel_C_SetFlipped");
static_assert(sizeof(W_VolumeStorageLabel_C_SetFlipped) == 0x000058, "Wrong size on W_VolumeStorageLabel_C_SetFlipped");
static_assert(offsetof(W_VolumeStorageLabel_C_SetFlipped, IsFlipped_0) == 0x000000, "Member 'W_VolumeStorageLabel_C_SetFlipped::IsFlipped_0' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetFlipped, Temp_bool_Variable) == 0x000001, "Member 'W_VolumeStorageLabel_C_SetFlipped::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetFlipped, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'W_VolumeStorageLabel_C_SetFlipped::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetFlipped, Temp_real_Variable) == 0x000010, "Member 'W_VolumeStorageLabel_C_SetFlipped::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetFlipped, Temp_real_Variable_1) == 0x000018, "Member 'W_VolumeStorageLabel_C_SetFlipped::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetFlipped, K2Node_Select_Default) == 0x000020, "Member 'W_VolumeStorageLabel_C_SetFlipped::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetFlipped, CallFunc_SlotAsGridSlot_ReturnValue) == 0x000028, "Member 'W_VolumeStorageLabel_C_SetFlipped::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetFlipped, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'W_VolumeStorageLabel_C_SetFlipped::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetFlipped, K2Node_MakeStruct_Margin) == 0x000040, "Member 'W_VolumeStorageLabel_C_SetFlipped::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_SetFlipped, K2Node_MakeStruct_Left_ImplicitCast) == 0x000050, "Member 'W_VolumeStorageLabel_C_SetFlipped::K2Node_MakeStruct_Left_ImplicitCast' has a wrong offset!");

// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.SetAddTriangle
// 0x0001 (0x0001 - 0x0000)
struct W_VolumeStorageLabel_C_SetAddTriangle final
{
public:
	bool                                          AddTriangle_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VolumeStorageLabel_C_SetAddTriangle) == 0x000001, "Wrong alignment on W_VolumeStorageLabel_C_SetAddTriangle");
static_assert(sizeof(W_VolumeStorageLabel_C_SetAddTriangle) == 0x000001, "Wrong size on W_VolumeStorageLabel_C_SetAddTriangle");
static_assert(offsetof(W_VolumeStorageLabel_C_SetAddTriangle, AddTriangle_0) == 0x000000, "Member 'W_VolumeStorageLabel_C_SetAddTriangle::AddTriangle_0' has a wrong offset!");

// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_VolumeStorageLabel_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VolumeStorageLabel_C_PreConstruct) == 0x000001, "Wrong alignment on W_VolumeStorageLabel_C_PreConstruct");
static_assert(sizeof(W_VolumeStorageLabel_C_PreConstruct) == 0x000001, "Wrong size on W_VolumeStorageLabel_C_PreConstruct");
static_assert(offsetof(W_VolumeStorageLabel_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_VolumeStorageLabel_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_VolumeStorageLabel.W_VolumeStorageLabel_C.ExecuteUbergraph_W_VolumeStorageLabel
// 0x0020 (0x0020 - 0x0000)
struct W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       K2Node_DynamicCast_AsCommon_Text;                  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USizeBoxSlot*                           CallFunc_SlotAsSizeBoxSlot_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel) == 0x000008, "Wrong alignment on W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel");
static_assert(sizeof(W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel) == 0x000020, "Wrong size on W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel");
static_assert(offsetof(W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel, EntryPoint) == 0x000000, "Member 'W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel, K2Node_Event_IsDesignTime) == 0x000004, "Member 'W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel, K2Node_DynamicCast_AsCommon_Text) == 0x000008, "Member 'W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel::K2Node_DynamicCast_AsCommon_Text' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel, CallFunc_SlotAsSizeBoxSlot_ReturnValue) == 0x000018, "Member 'W_VolumeStorageLabel_C_ExecuteUbergraph_W_VolumeStorageLabel::CallFunc_SlotAsSizeBoxSlot_ReturnValue' has a wrong offset!");

}

