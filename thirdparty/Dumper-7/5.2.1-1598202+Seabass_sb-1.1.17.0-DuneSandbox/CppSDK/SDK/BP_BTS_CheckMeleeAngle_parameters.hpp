#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BTS_CheckMeleeAngle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_BTS_CheckMeleeAngle.BP_BTS_CheckMeleeAngle_C.ExecuteUbergraph_BP_BTS_CheckMeleeAngle
// 0x00C8 (0x00C8 - 0x0000)
struct BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController_2;                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_AngleBetween_ReturnValue;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle) == 0x000008, "Wrong alignment on BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle");
static_assert(sizeof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle) == 0x0000C8, "Wrong size on BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, EntryPoint) == 0x000000, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, K2Node_Event_OwnerController_1) == 0x000008, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, K2Node_Event_ControlledPawn_1) == 0x000010, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, K2Node_Event_OwnerController) == 0x000018, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, K2Node_Event_ControlledPawn) == 0x000020, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, K2Node_Event_OwnerController_2) == 0x000028, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::K2Node_Event_OwnerController_2' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, K2Node_Event_ControlledPawn_2) == 0x000030, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::K2Node_Event_ControlledPawn_2' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, K2Node_Event_DeltaSeconds) == 0x000038, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000040, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000068, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000080, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, CallFunc_GetActorForwardVector_ReturnValue) == 0x000098, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, CallFunc_IsValid_ReturnValue_1) == 0x0000B0, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, CallFunc_AngleBetween_ReturnValue) == 0x0000B4, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::CallFunc_AngleBetween_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x0000C0, "Member 'BP_BTS_CheckMeleeAngle_C_ExecuteUbergraph_BP_BTS_CheckMeleeAngle::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_BTS_CheckMeleeAngle.BP_BTS_CheckMeleeAngle_C.ReceiveActivationAI
// 0x0010 (0x0010 - 0x0000)
struct BP_BTS_CheckMeleeAngle_C_ReceiveActivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_CheckMeleeAngle_C_ReceiveActivationAI) == 0x000008, "Wrong alignment on BP_BTS_CheckMeleeAngle_C_ReceiveActivationAI");
static_assert(sizeof(BP_BTS_CheckMeleeAngle_C_ReceiveActivationAI) == 0x000010, "Wrong size on BP_BTS_CheckMeleeAngle_C_ReceiveActivationAI");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ReceiveActivationAI, OwnerController) == 0x000000, "Member 'BP_BTS_CheckMeleeAngle_C_ReceiveActivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ReceiveActivationAI, ControlledPawn) == 0x000008, "Member 'BP_BTS_CheckMeleeAngle_C_ReceiveActivationAI::ControlledPawn' has a wrong offset!");

// Function BP_BTS_CheckMeleeAngle.BP_BTS_CheckMeleeAngle_C.ReceiveDeactivationAI
// 0x0010 (0x0010 - 0x0000)
struct BP_BTS_CheckMeleeAngle_C_ReceiveDeactivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_CheckMeleeAngle_C_ReceiveDeactivationAI) == 0x000008, "Wrong alignment on BP_BTS_CheckMeleeAngle_C_ReceiveDeactivationAI");
static_assert(sizeof(BP_BTS_CheckMeleeAngle_C_ReceiveDeactivationAI) == 0x000010, "Wrong size on BP_BTS_CheckMeleeAngle_C_ReceiveDeactivationAI");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ReceiveDeactivationAI, OwnerController) == 0x000000, "Member 'BP_BTS_CheckMeleeAngle_C_ReceiveDeactivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ReceiveDeactivationAI, ControlledPawn) == 0x000008, "Member 'BP_BTS_CheckMeleeAngle_C_ReceiveDeactivationAI::ControlledPawn' has a wrong offset!");

// Function BP_BTS_CheckMeleeAngle.BP_BTS_CheckMeleeAngle_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BP_BTS_CheckMeleeAngle_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BTS_CheckMeleeAngle_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BP_BTS_CheckMeleeAngle_C_ReceiveTickAI");
static_assert(sizeof(BP_BTS_CheckMeleeAngle_C_ReceiveTickAI) == 0x000018, "Wrong size on BP_BTS_CheckMeleeAngle_C_ReceiveTickAI");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BP_BTS_CheckMeleeAngle_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BP_BTS_CheckMeleeAngle_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BP_BTS_CheckMeleeAngle_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BP_BTS_CheckMeleeAngle_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

}

