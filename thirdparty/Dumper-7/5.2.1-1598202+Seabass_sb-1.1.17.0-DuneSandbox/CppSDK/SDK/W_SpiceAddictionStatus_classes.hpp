#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_SpiceAddictionStatus

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_SpiceAddictionStatus.W_SpiceAddictionStatus_C
// 0x0070 (0x0540 - 0x04D0)
class UW_SpiceAddictionStatus_C final : public USpiceAddictionStatusWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       BreatheOpacityIconOnly;                            // 0x04D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UW_CircularStatBar_C*                   m_SpiceAmountBar;                                  // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UListView*                              PermanentEffects;                                  // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             SpiceGlow;                                         // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             SpiceLevelIcon;                                    // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UListView*                              TemporaryEffects;                                  // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_DiamondLinearProgressBar_C*          ToleranceBar;                                      // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       ToleranceText;                                     // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UTexture2D*>                     SpiceLevelIcons;                                   // 0x0518(0x0010)(Edit, BlueprintVisible)
	class UMaterialInstanceDynamic*               Material_Instance;                                 // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldShowText;                                   // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_531[0x7];                                      // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Spice_Icon_Glow_Threshold;                         // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetEffectEntriesEnabled(class UListView* Effect_List, bool Is_Enabled);
	void RemoveExpiredEffectEntries(class UListView* Effect_List);
	void OnTemporaryEffectApplied(const struct FActiveGameplayEffectHandle& GameplayEffectHandle, const class USpiceAddictionGameplayEffectUIData* UIData);
	void OnSpiceToleranceAmountChanged(const float CurrentSpiceAmount, const float MaxSpiceAmount);
	void OnSpiceExposureLevelChanged(const float SpiceExposureLevel);
	void OnSpiceAmountChanged(const float CurrentSpiceAmount, const float MaxSpiceAmount);
	void OnPulseOpacity();
	void OnPermanentEffectApplied(const struct FActiveGameplayEffectHandle& GameplayEffectHandle, const class USpiceAddictionGameplayEffectUIData* UIData);
	void OnEffectDisplayEnabledChanged(const bool bIsEffectDisplayEnabled);
	void IsTrackingEffect(const struct FActiveGameplayEffectHandle& EffectHandle, class UListView* EffectList, bool* bIsTrackingEffect);
	void Finished_1C08B2D241CCA300D1E4DC81393463E0();
	void ExecuteUbergraph_W_SpiceAddictionStatus(int32 EntryPoint);
	void AddEffectEntry(class UListView* Effect_List, const struct FActiveGameplayEffectHandle& Gameplay_Effect_Handle, class USpiceAddictionGameplayEffectUIData* Gameplay_Effect_UI_Data);

	TArray<TSubclassOf<class UGameplayEffect>> GetGameplayEffectsToTrack() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_SpiceAddictionStatus_C">();
	}
	static class UW_SpiceAddictionStatus_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_SpiceAddictionStatus_C>();
	}
};
static_assert(alignof(UW_SpiceAddictionStatus_C) == 0x000010, "Wrong alignment on UW_SpiceAddictionStatus_C");
static_assert(sizeof(UW_SpiceAddictionStatus_C) == 0x000540, "Wrong size on UW_SpiceAddictionStatus_C");
static_assert(offsetof(UW_SpiceAddictionStatus_C, UberGraphFrame) == 0x0004D0, "Member 'UW_SpiceAddictionStatus_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, BreatheOpacityIconOnly) == 0x0004D8, "Member 'UW_SpiceAddictionStatus_C::BreatheOpacityIconOnly' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, m_SpiceAmountBar) == 0x0004E0, "Member 'UW_SpiceAddictionStatus_C::m_SpiceAmountBar' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, PermanentEffects) == 0x0004E8, "Member 'UW_SpiceAddictionStatus_C::PermanentEffects' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, SpiceGlow) == 0x0004F0, "Member 'UW_SpiceAddictionStatus_C::SpiceGlow' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, SpiceLevelIcon) == 0x0004F8, "Member 'UW_SpiceAddictionStatus_C::SpiceLevelIcon' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, TemporaryEffects) == 0x000500, "Member 'UW_SpiceAddictionStatus_C::TemporaryEffects' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, ToleranceBar) == 0x000508, "Member 'UW_SpiceAddictionStatus_C::ToleranceBar' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, ToleranceText) == 0x000510, "Member 'UW_SpiceAddictionStatus_C::ToleranceText' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, SpiceLevelIcons) == 0x000518, "Member 'UW_SpiceAddictionStatus_C::SpiceLevelIcons' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, Material_Instance) == 0x000528, "Member 'UW_SpiceAddictionStatus_C::Material_Instance' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, bShouldShowText) == 0x000530, "Member 'UW_SpiceAddictionStatus_C::bShouldShowText' has a wrong offset!");
static_assert(offsetof(UW_SpiceAddictionStatus_C, Spice_Icon_Glow_Threshold) == 0x000538, "Member 'UW_SpiceAddictionStatus_C::Spice_Icon_Glow_Threshold' has a wrong offset!");

}

