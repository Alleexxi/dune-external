#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_TriangleHeader

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_TriangleHeader.W_TriangleHeader_C
// 0x0068 (0x0348 - 0x02E0)
class UW_TriangleHeader_C final : public UTriangleHeaderWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDuneSizeBox*                           LabelSizeBox;                                      // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             LeftOfTextSlot;                                    // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LineGradientLeft;                                  // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LineGradientRight;                                 // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_TriangleLabel_C*                     W_TriangleLabel;                                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0310(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          Right_Line;                                        // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Left_Line;                                         // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          HighlightHeader;                                   // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          HeaderHighlighted;                                 // 0x032B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsUpperCaseText;                                  // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Triangle_Label_Desired_Size;                       // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Align_Left;                                        // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Is_Unlocked;                                       // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Text_Scrollable;                                // 0x0342(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_343[0x1];                                      // 0x0343(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Label_Maximum_Size;                                // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_W_TriangleHeader(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_TriangleHeader_C">();
	}
	static class UW_TriangleHeader_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_TriangleHeader_C>();
	}
};
static_assert(alignof(UW_TriangleHeader_C) == 0x000008, "Wrong alignment on UW_TriangleHeader_C");
static_assert(sizeof(UW_TriangleHeader_C) == 0x000348, "Wrong size on UW_TriangleHeader_C");
static_assert(offsetof(UW_TriangleHeader_C, UberGraphFrame) == 0x0002E0, "Member 'UW_TriangleHeader_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, LabelSizeBox) == 0x0002E8, "Member 'UW_TriangleHeader_C::LabelSizeBox' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, LeftOfTextSlot) == 0x0002F0, "Member 'UW_TriangleHeader_C::LeftOfTextSlot' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, LineGradientLeft) == 0x0002F8, "Member 'UW_TriangleHeader_C::LineGradientLeft' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, LineGradientRight) == 0x000300, "Member 'UW_TriangleHeader_C::LineGradientRight' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, W_TriangleLabel) == 0x000308, "Member 'UW_TriangleHeader_C::W_TriangleLabel' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, Text) == 0x000310, "Member 'UW_TriangleHeader_C::Text' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, Right_Line) == 0x000328, "Member 'UW_TriangleHeader_C::Right_Line' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, Left_Line) == 0x000329, "Member 'UW_TriangleHeader_C::Left_Line' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, HighlightHeader) == 0x00032A, "Member 'UW_TriangleHeader_C::HighlightHeader' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, HeaderHighlighted) == 0x00032B, "Member 'UW_TriangleHeader_C::HeaderHighlighted' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, bIsUpperCaseText) == 0x00032C, "Member 'UW_TriangleHeader_C::bIsUpperCaseText' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, Triangle_Label_Desired_Size) == 0x000330, "Member 'UW_TriangleHeader_C::Triangle_Label_Desired_Size' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, Align_Left) == 0x000340, "Member 'UW_TriangleHeader_C::Align_Left' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, Is_Unlocked) == 0x000341, "Member 'UW_TriangleHeader_C::Is_Unlocked' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, Is_Text_Scrollable) == 0x000342, "Member 'UW_TriangleHeader_C::Is_Text_Scrollable' has a wrong offset!");
static_assert(offsetof(UW_TriangleHeader_C, Label_Maximum_Size) == 0x000344, "Member 'UW_TriangleHeader_C::Label_Maximum_Size' has a wrong offset!");

}

