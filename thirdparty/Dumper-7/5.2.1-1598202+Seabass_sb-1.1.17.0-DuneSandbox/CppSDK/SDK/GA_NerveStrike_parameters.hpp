#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_NerveStrike

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PersistenceCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GA_NerveStrike.GA_NerveStrike_C.CacheTuningValues
// 0x0004 (0x0004 - 0x0000)
struct GA_NerveStrike_C_CacheTuningValues final
{
public:
	float                                         CallFunc_GetTuningValueByString_ReturnValue;       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_CacheTuningValues) == 0x000004, "Wrong alignment on GA_NerveStrike_C_CacheTuningValues");
static_assert(sizeof(GA_NerveStrike_C_CacheTuningValues) == 0x000004, "Wrong size on GA_NerveStrike_C_CacheTuningValues");
static_assert(offsetof(GA_NerveStrike_C_CacheTuningValues, CallFunc_GetTuningValueByString_ReturnValue) == 0x000000, "Member 'GA_NerveStrike_C_CacheTuningValues::CallFunc_GetTuningValueByString_ReturnValue' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.EventReceived_0BE1A0B845A7623E031786AA601AB872
// 0x00B0 (0x00B0 - 0x0000)
struct GA_NerveStrike_C_EventReceived_0BE1A0B845A7623E031786AA601AB872 final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_NerveStrike_C_EventReceived_0BE1A0B845A7623E031786AA601AB872) == 0x000008, "Wrong alignment on GA_NerveStrike_C_EventReceived_0BE1A0B845A7623E031786AA601AB872");
static_assert(sizeof(GA_NerveStrike_C_EventReceived_0BE1A0B845A7623E031786AA601AB872) == 0x0000B0, "Wrong size on GA_NerveStrike_C_EventReceived_0BE1A0B845A7623E031786AA601AB872");
static_assert(offsetof(GA_NerveStrike_C_EventReceived_0BE1A0B845A7623E031786AA601AB872, Payload) == 0x000000, "Member 'GA_NerveStrike_C_EventReceived_0BE1A0B845A7623E031786AA601AB872::Payload' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.EventReceived_43640DA34E5FB90C0C57B6A072DF7E51
// 0x00B0 (0x00B0 - 0x0000)
struct GA_NerveStrike_C_EventReceived_43640DA34E5FB90C0C57B6A072DF7E51 final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_NerveStrike_C_EventReceived_43640DA34E5FB90C0C57B6A072DF7E51) == 0x000008, "Wrong alignment on GA_NerveStrike_C_EventReceived_43640DA34E5FB90C0C57B6A072DF7E51");
static_assert(sizeof(GA_NerveStrike_C_EventReceived_43640DA34E5FB90C0C57B6A072DF7E51) == 0x0000B0, "Wrong size on GA_NerveStrike_C_EventReceived_43640DA34E5FB90C0C57B6A072DF7E51");
static_assert(offsetof(GA_NerveStrike_C_EventReceived_43640DA34E5FB90C0C57B6A072DF7E51, Payload) == 0x000000, "Member 'GA_NerveStrike_C_EventReceived_43640DA34E5FB90C0C57B6A072DF7E51::Payload' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.EventReceived_CCC58D0D4A59190F62D3A28231D64E5F
// 0x00B0 (0x00B0 - 0x0000)
struct GA_NerveStrike_C_EventReceived_CCC58D0D4A59190F62D3A28231D64E5F final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_NerveStrike_C_EventReceived_CCC58D0D4A59190F62D3A28231D64E5F) == 0x000008, "Wrong alignment on GA_NerveStrike_C_EventReceived_CCC58D0D4A59190F62D3A28231D64E5F");
static_assert(sizeof(GA_NerveStrike_C_EventReceived_CCC58D0D4A59190F62D3A28231D64E5F) == 0x0000B0, "Wrong size on GA_NerveStrike_C_EventReceived_CCC58D0D4A59190F62D3A28231D64E5F");
static_assert(offsetof(GA_NerveStrike_C_EventReceived_CCC58D0D4A59190F62D3A28231D64E5F, Payload) == 0x000000, "Member 'GA_NerveStrike_C_EventReceived_CCC58D0D4A59190F62D3A28231D64E5F::Payload' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.ExecuteUbergraph_GA_NerveStrike
// 0x0D50 (0x0D50 - 0x0000)
struct GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetTargetingDirection_ReturnValue;        // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_CustomEvent_Payload;                        // 0x0030(0x00B0)()
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_1; // 0x00E0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Temp_struct_Variable;                              // 0x00F0(0x00B0)()
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue;            // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_PlayMontageAndWaitWithRootMotion* CallFunc_CreateAbilityTask_ReturnValue;     // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x01BC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_NetworkSyncPoint*          CallFunc_WaitNetSync_ReturnValue;                  // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x01D8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x01EC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x01FC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x020C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitDelay*                 Temp_wildcard_DelayAsyncTask_Variable;             // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_7;            // 0x0228(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue_1;          // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     Temp_struct_Variable_1;                            // 0x0250(0x00B0)()
	class UAbilityTask_WaitDelay*                 CallFunc_WaitDelay_ReturnValue;                    // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FindTarget_TargetCharacter;               // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0318(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_CustomEvent_Payload_1;                      // 0x0320(0x00B0)()
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_8; // 0x03D4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAbilityLevel_ReturnValue;              // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData;               // 0x03F0(0x00B0)()
	bool                                          CallFunc_CheckSecurityZonesForHarmfulEffect_ReturnValue; // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue_2;          // 0x04A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_TryRotateTowardsTarget_OutRotation;       // 0x04B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_1;  // 0x04D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Temp_struct_Variable_2;                            // 0x04D8(0x00B0)()
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0588(0x0010)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FindTarget_TargetCharacter_1;             // 0x0598(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_2;  // 0x05A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_Payload_2;                      // 0x05B0(0x00B0)()
	int32                                         CallFunc_GetAbilityLevel_ReturnValue_1;            // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_9; // 0x0664(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_674[0x4];                                      // 0x0674(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0678(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData_1;             // 0x0680(0x00B0)()
	bool                                          CallFunc_CheckSecurityZonesForHarmfulEffect_ReturnValue_1; // 0x0730(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_731[0x7];                                      // 0x0731(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_TryRotateTowardsTarget_OutRotation_1;     // 0x0738(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_3;  // 0x0750(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue_1; // 0x0758(0x0010)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_10;           // 0x0768(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_NetworkSyncPoint*          CallFunc_WaitNetSync_ReturnValue_1;                // 0x0778(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0780(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0781(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_782[0x6];                                      // 0x0782(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_4;  // 0x0788(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_11;           // 0x0790(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x07A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveActiveGameplayEffect_ReturnValue;   // 0x07A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A2[0x6];                                      // 0x07A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x07A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x07C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x07C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x07E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x07F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0810(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0828(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0840(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0858(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_859[0x7];                                      // 0x0859(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0860(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x0878(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FGameplayAbilityTargetDataHandle       CallFunc_AbilityTargetDataFromHitResult_ReturnValue; // 0x0960(0x0028)()
	bool                                          CallFunc_K2_CommitAbilityCost_ReturnValue;         // 0x0988(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0989(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98A[0x6];                                      // 0x098A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_5;  // 0x0990(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FPoiseDamageData                       K2Node_MakeStruct_PoiseDamageData;                 // 0x0998(0x000C)(NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x09A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveActiveGameplayEffect_ReturnValue_1; // 0x09A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x09A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A7[0x1];                                      // 0x09A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayTagRemoved*    CallFunc_WaitGameplayTagRemove_ReturnValue;        // 0x09A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x09B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B1[0x7];                                      // 0x09B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_TryRotateTowardsTarget_OutRotation_2;     // 0x09B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x09D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D1[0x7];                                      // 0x09D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x09D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetCurrentMontage_ReturnValue;            // 0x09E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSectionLength_ReturnValue;             // 0x09F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F4[0x4];                                      // 0x09F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitDelay*                 CallFunc_WaitDelay_ReturnValue_1;                  // 0x09F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0A00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A01[0x7];                                      // 0x0A01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayTagAdded*      CallFunc_WaitGameplayTagAdd_ReturnValue;           // 0x0A08(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x0A10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A11[0x3];                                      // 0x0A11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_12;           // 0x0A14(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InitMemberVariables_bSuccess;             // 0x0A24(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A25[0x3];                                      // 0x0A25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FServerDealDamageInfo                  K2Node_MakeStruct_ServerDealDamageInfo;            // 0x0A28(0x0198)(ContainsInstancedReference)
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0BC0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0BC8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         K2Node_DynamicCast_AsDune_Character;               // 0x0BD0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0BD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD9[0x3];                                      // 0x0BD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0BDC(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryExitSubstateByTag_ReturnValue;         // 0x0BE4(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE5[0x3];                                      // 0x0BE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              K2Node_Event_ActorInfo;                            // 0x0BE8(0x0048)(ConstParm, ContainsInstancedReference)
	struct FGameplayAbilitySpec                   K2Node_Event_Spec;                                 // 0x0C30(0x0100)(ConstParm, ContainsInstancedReference)
	int32                                         CallFunc_GetAbilityLevel_ReturnValue_2;            // 0x0D30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_CommitAbilityCooldownWithDuration_ReturnValue; // 0x0D34(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D35[0x3];                                      // 0x0D35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue; // 0x0D38(0x0010)(ReferenceParm, ContainsInstancedReference)
	float                                         CallFunc_BP_ApplyGameplayEffectToSelf_Level_ImplicitCast; // 0x0D48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BP_ApplyGameplayEffectToSelf_Level_ImplicitCast_1; // 0x0D4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike) == 0x000008, "Wrong alignment on GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike");
static_assert(sizeof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike) == 0x000D50, "Wrong size on GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, EntryPoint) == 0x000000, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetTargetingDirection_ReturnValue) == 0x000008, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetTargetingDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CustomEvent_Payload) == 0x000030, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CustomEvent_Payload' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000E0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, Temp_struct_Variable) == 0x0000F0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_WaitGameplayEvent_ReturnValue) == 0x0001A0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_WaitGameplayEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue) == 0x0001A8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_1) == 0x0001A9, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_CreateAbilityTask_ReturnValue) == 0x0001B0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_CreateAbilityTask_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_2) == 0x0001B8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_2) == 0x0001BC, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_WaitNetSync_ReturnValue) == 0x0001D0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_WaitNetSync_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_3) == 0x0001D8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_3) == 0x0001E8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_4) == 0x0001EC, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_5) == 0x0001FC, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_6) == 0x00020C, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, Temp_wildcard_DelayAsyncTask_Variable) == 0x000220, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::Temp_wildcard_DelayAsyncTask_Variable' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_7) == 0x000228, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_4) == 0x000238, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_WaitGameplayEvent_ReturnValue_1) == 0x000240, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_WaitGameplayEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_5) == 0x000248, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, Temp_struct_Variable_1) == 0x000250, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_WaitDelay_ReturnValue) == 0x000300, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_WaitDelay_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_FindTarget_TargetCharacter) == 0x000308, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_FindTarget_TargetCharacter' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_6) == 0x000310, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000318, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CustomEvent_Payload_1) == 0x000320, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CustomEvent_Payload_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_7) == 0x0003D0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_8) == 0x0003D4, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetAbilityLevel_ReturnValue) == 0x0003E4, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetAbilityLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0003E8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_MakeStruct_GameplayEventData) == 0x0003F0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_MakeStruct_GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_CheckSecurityZonesForHarmfulEffect_ReturnValue) == 0x0004A0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_CheckSecurityZonesForHarmfulEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_WaitGameplayEvent_ReturnValue_2) == 0x0004A8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_WaitGameplayEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_8) == 0x0004B0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_TryRotateTowardsTarget_OutRotation) == 0x0004B8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_TryRotateTowardsTarget_OutRotation' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetAbilitySystemComponent_ReturnValue_1) == 0x0004D0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetAbilitySystemComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, Temp_struct_Variable_2) == 0x0004D8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000588, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_FindTarget_TargetCharacter_1) == 0x000598, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_FindTarget_TargetCharacter_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetAbilitySystemComponent_ReturnValue_2) == 0x0005A0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetAbilitySystemComponent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_9) == 0x0005A8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CustomEvent_Payload_2) == 0x0005B0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CustomEvent_Payload_2' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetAbilityLevel_ReturnValue_1) == 0x000660, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetAbilityLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_9) == 0x000664, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000678, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_MakeStruct_GameplayEventData_1) == 0x000680, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_MakeStruct_GameplayEventData_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_CheckSecurityZonesForHarmfulEffect_ReturnValue_1) == 0x000730, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_CheckSecurityZonesForHarmfulEffect_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_TryRotateTowardsTarget_OutRotation_1) == 0x000738, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_TryRotateTowardsTarget_OutRotation_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetAbilitySystemComponent_ReturnValue_3) == 0x000750, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetAbilitySystemComponent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue_1) == 0x000758, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_10) == 0x000768, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_WaitNetSync_ReturnValue_1) == 0x000778, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_WaitNetSync_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_10) == 0x000780, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_Event_bWasCancelled) == 0x000781, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetAbilitySystemComponent_ReturnValue_4) == 0x000788, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetAbilitySystemComponent_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_11) == 0x000790, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_11' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_11) == 0x0007A0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_RemoveActiveGameplayEffect_ReturnValue) == 0x0007A1, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_RemoveActiveGameplayEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0007A8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetController_ReturnValue) == 0x0007C0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0007C8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0007E0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_Normal_ReturnValue) == 0x0007F8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000810, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000828, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000840, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_12) == 0x000858, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_Normal_ReturnValue_1) == 0x000860, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_MakeHitResult_ReturnValue) == 0x000878, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_AbilityTargetDataFromHitResult_ReturnValue) == 0x000960, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_AbilityTargetDataFromHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_K2_CommitAbilityCost_ReturnValue) == 0x000988, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_K2_CommitAbilityCost_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_13) == 0x000989, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetAbilitySystemComponent_ReturnValue_5) == 0x000990, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetAbilitySystemComponent_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_MakeStruct_PoiseDamageData) == 0x000998, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_MakeStruct_PoiseDamageData' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_14) == 0x0009A4, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_RemoveActiveGameplayEffect_ReturnValue_1) == 0x0009A5, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_RemoveActiveGameplayEffect_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_BooleanAND_ReturnValue) == 0x0009A6, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_WaitGameplayTagRemove_ReturnValue) == 0x0009A8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_WaitGameplayTagRemove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_15) == 0x0009B0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_TryRotateTowardsTarget_OutRotation_2) == 0x0009B8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_TryRotateTowardsTarget_OutRotation_2' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_16) == 0x0009D0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetDisplayName_ReturnValue) == 0x0009D8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetCurrentMontage_ReturnValue) == 0x0009E8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetCurrentMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetSectionLength_ReturnValue) == 0x0009F0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetSectionLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_WaitDelay_ReturnValue_1) == 0x0009F8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_WaitDelay_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_17) == 0x000A00, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_WaitGameplayTagAdd_ReturnValue) == 0x000A08, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_WaitGameplayTagAdd_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_IsValid_ReturnValue_18) == 0x000A10, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_CreateDelegate_OutputDelegate_12) == 0x000A14, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_CreateDelegate_OutputDelegate_12' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_InitMemberVariables_bSuccess) == 0x000A24, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_InitMemberVariables_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_MakeStruct_ServerDealDamageInfo) == 0x000A28, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_MakeStruct_ServerDealDamageInfo' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetMovementComponent_ReturnValue) == 0x000BC0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000BC8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_DynamicCast_AsDune_Character) == 0x000BD0, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_DynamicCast_AsDune_Character' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_DynamicCast_bSuccess) == 0x000BD8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000BDC, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_TryExitSubstateByTag_ReturnValue) == 0x000BE4, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_TryExitSubstateByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_Event_ActorInfo) == 0x000BE8, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_Event_ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, K2Node_Event_Spec) == 0x000C30, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::K2Node_Event_Spec' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_GetAbilityLevel_ReturnValue_2) == 0x000D30, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_GetAbilityLevel_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_K2_CommitAbilityCooldownWithDuration_ReturnValue) == 0x000D34, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_K2_CommitAbilityCooldownWithDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue) == 0x000D38, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_BP_ApplyGameplayEffectToSelf_Level_ImplicitCast) == 0x000D48, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_BP_ApplyGameplayEffectToSelf_Level_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike, CallFunc_BP_ApplyGameplayEffectToSelf_Level_ImplicitCast_1) == 0x000D4C, "Member 'GA_NerveStrike_C_ExecuteUbergraph_GA_NerveStrike::CallFunc_BP_ApplyGameplayEffectToSelf_Level_ImplicitCast_1' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.Get Actor Rotation Towards
// 0x0098 (0x0098 - 0x0000)
struct GA_NerveStrike_C_Get_Actor_Rotation_Towards final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZX_ReturnValue;                // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_NerveStrike_C_Get_Actor_Rotation_Towards) == 0x000008, "Wrong alignment on GA_NerveStrike_C_Get_Actor_Rotation_Towards");
static_assert(sizeof(GA_NerveStrike_C_Get_Actor_Rotation_Towards) == 0x000098, "Wrong size on GA_NerveStrike_C_Get_Actor_Rotation_Towards");
static_assert(offsetof(GA_NerveStrike_C_Get_Actor_Rotation_Towards, Actor) == 0x000000, "Member 'GA_NerveStrike_C_Get_Actor_Rotation_Towards::Actor' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Actor_Rotation_Towards, Target) == 0x000008, "Member 'GA_NerveStrike_C_Get_Actor_Rotation_Towards::Target' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Actor_Rotation_Towards, Rotation) == 0x000020, "Member 'GA_NerveStrike_C_Get_Actor_Rotation_Towards::Rotation' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Actor_Rotation_Towards, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'GA_NerveStrike_C_Get_Actor_Rotation_Towards::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Actor_Rotation_Towards, CallFunc_GetActorUpVector_ReturnValue) == 0x000050, "Member 'GA_NerveStrike_C_Get_Actor_Rotation_Towards::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Actor_Rotation_Towards, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'GA_NerveStrike_C_Get_Actor_Rotation_Towards::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Actor_Rotation_Towards, CallFunc_MakeRotFromZX_ReturnValue) == 0x000080, "Member 'GA_NerveStrike_C_Get_Actor_Rotation_Towards::CallFunc_MakeRotFromZX_ReturnValue' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.GetTargetingDirection
// 0x0040 (0x0040 - 0x0000)
struct GA_NerveStrike_C_GetTargetingDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADunePlayerCharacter*                   K2Node_DynamicCast_AsDune_Player_Character;        // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsNearlyZero_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_GetTargetingDirection) == 0x000008, "Wrong alignment on GA_NerveStrike_C_GetTargetingDirection");
static_assert(sizeof(GA_NerveStrike_C_GetTargetingDirection) == 0x000040, "Wrong size on GA_NerveStrike_C_GetTargetingDirection");
static_assert(offsetof(GA_NerveStrike_C_GetTargetingDirection, ReturnValue) == 0x000000, "Member 'GA_NerveStrike_C_GetTargetingDirection::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_GetTargetingDirection, CallFunc_GetActorForwardVector_ReturnValue) == 0x000018, "Member 'GA_NerveStrike_C_GetTargetingDirection::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_GetTargetingDirection, K2Node_DynamicCast_AsDune_Player_Character) == 0x000030, "Member 'GA_NerveStrike_C_GetTargetingDirection::K2Node_DynamicCast_AsDune_Player_Character' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_GetTargetingDirection, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'GA_NerveStrike_C_GetTargetingDirection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_GetTargetingDirection, CallFunc_Vector_IsNearlyZero_ReturnValue) == 0x000039, "Member 'GA_NerveStrike_C_GetTargetingDirection::CallFunc_Vector_IsNearlyZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_GetTargetingDirection, CallFunc_Not_PreBool_ReturnValue) == 0x00003A, "Member 'GA_NerveStrike_C_GetTargetingDirection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.InitializeStaticProperties
// 0x0148 (0x0148 - 0x0000)
struct GA_NerveStrike_C_InitializeStaticProperties final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0048(0x0100)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(GA_NerveStrike_C_InitializeStaticProperties) == 0x000008, "Wrong alignment on GA_NerveStrike_C_InitializeStaticProperties");
static_assert(sizeof(GA_NerveStrike_C_InitializeStaticProperties) == 0x000148, "Wrong size on GA_NerveStrike_C_InitializeStaticProperties");
static_assert(offsetof(GA_NerveStrike_C_InitializeStaticProperties, ActorInfo) == 0x000000, "Member 'GA_NerveStrike_C_InitializeStaticProperties::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_InitializeStaticProperties, Spec) == 0x000048, "Member 'GA_NerveStrike_C_InitializeStaticProperties::Spec' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.InitMemberVariables
// 0x0040 (0x0040 - 0x0000)
struct GA_NerveStrike_C_InitMemberVariables final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADunePlayerController*                  K2Node_DynamicCast_AsDune_Player_Controller;       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueID                              CallFunc_GetPersistenceId_ReturnValue;             // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         K2Node_DynamicCast_AsDune_Character;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_InitMemberVariables) == 0x000008, "Wrong alignment on GA_NerveStrike_C_InitMemberVariables");
static_assert(sizeof(GA_NerveStrike_C_InitMemberVariables) == 0x000040, "Wrong size on GA_NerveStrike_C_InitMemberVariables");
static_assert(offsetof(GA_NerveStrike_C_InitMemberVariables, bSuccess) == 0x000000, "Member 'GA_NerveStrike_C_InitMemberVariables::bSuccess' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_InitMemberVariables, CallFunc_GetController_ReturnValue) == 0x000008, "Member 'GA_NerveStrike_C_InitMemberVariables::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_InitMemberVariables, K2Node_DynamicCast_AsDune_Player_Controller) == 0x000010, "Member 'GA_NerveStrike_C_InitMemberVariables::K2Node_DynamicCast_AsDune_Player_Controller' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_InitMemberVariables, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_NerveStrike_C_InitMemberVariables::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_InitMemberVariables, CallFunc_GetPersistenceId_ReturnValue) == 0x000020, "Member 'GA_NerveStrike_C_InitMemberVariables::CallFunc_GetPersistenceId_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_InitMemberVariables, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000028, "Member 'GA_NerveStrike_C_InitMemberVariables::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_InitMemberVariables, K2Node_DynamicCast_AsDune_Character) == 0x000030, "Member 'GA_NerveStrike_C_InitMemberVariables::K2Node_DynamicCast_AsDune_Character' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_InitMemberVariables, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'GA_NerveStrike_C_InitMemberVariables::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_NerveStrike_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_NerveStrike_C_K2_OnEndAbility");
static_assert(sizeof(GA_NerveStrike_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_NerveStrike_C_K2_OnEndAbility");
static_assert(offsetof(GA_NerveStrike_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_NerveStrike_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.TryRotateTowardsTarget
// 0x0068 (0x0068 - 0x0000)
struct GA_NerveStrike_C_TryRotateTowardsTarget final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor_0;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OutRotation;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Get_Actor_Rotation_Towards_Rotation;      // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_TryRotateTowardsTarget) == 0x000008, "Wrong alignment on GA_NerveStrike_C_TryRotateTowardsTarget");
static_assert(sizeof(GA_NerveStrike_C_TryRotateTowardsTarget) == 0x000068, "Wrong size on GA_NerveStrike_C_TryRotateTowardsTarget");
static_assert(offsetof(GA_NerveStrike_C_TryRotateTowardsTarget, Actor) == 0x000000, "Member 'GA_NerveStrike_C_TryRotateTowardsTarget::Actor' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_TryRotateTowardsTarget, TargetActor_0) == 0x000008, "Member 'GA_NerveStrike_C_TryRotateTowardsTarget::TargetActor_0' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_TryRotateTowardsTarget, OutRotation) == 0x000010, "Member 'GA_NerveStrike_C_TryRotateTowardsTarget::OutRotation' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_TryRotateTowardsTarget, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'GA_NerveStrike_C_TryRotateTowardsTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_TryRotateTowardsTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'GA_NerveStrike_C_TryRotateTowardsTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_TryRotateTowardsTarget, CallFunc_Get_Actor_Rotation_Towards_Rotation) == 0x000048, "Member 'GA_NerveStrike_C_TryRotateTowardsTarget::CallFunc_Get_Actor_Rotation_Towards_Rotation' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_TryRotateTowardsTarget, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000060, "Member 'GA_NerveStrike_C_TryRotateTowardsTarget::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.TrySoftLockTarget
// 0x0010 (0x0010 - 0x0000)
struct GA_NerveStrike_C_TrySoftLockTarget final
{
public:
	class ADunePlayerCharacter*                   K2Node_DynamicCast_AsDune_Player_Character;        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_TrySoftLockTarget) == 0x000008, "Wrong alignment on GA_NerveStrike_C_TrySoftLockTarget");
static_assert(sizeof(GA_NerveStrike_C_TrySoftLockTarget) == 0x000010, "Wrong size on GA_NerveStrike_C_TrySoftLockTarget");
static_assert(offsetof(GA_NerveStrike_C_TrySoftLockTarget, K2Node_DynamicCast_AsDune_Player_Character) == 0x000000, "Member 'GA_NerveStrike_C_TrySoftLockTarget::K2Node_DynamicCast_AsDune_Player_Character' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_TrySoftLockTarget, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'GA_NerveStrike_C_TrySoftLockTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_TrySoftLockTarget, CallFunc_IsActive_ReturnValue) == 0x000009, "Member 'GA_NerveStrike_C_TrySoftLockTarget::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_TrySoftLockTarget, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'GA_NerveStrike_C_TrySoftLockTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.DebugDrawTargetting
// 0x0128 (0x0128 - 0x0000)
struct GA_NerveStrike_C_DebugDrawTargetting final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast;    // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast_1;  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DrawDebugCapsule_Radius_ImplicitCast;     // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_DebugDrawTargetting) == 0x000008, "Wrong alignment on GA_NerveStrike_C_DebugDrawTargetting");
static_assert(sizeof(GA_NerveStrike_C_DebugDrawTargetting) == 0x000128, "Wrong size on GA_NerveStrike_C_DebugDrawTargetting");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, Center) == 0x000000, "Member 'GA_NerveStrike_C_DebugDrawTargetting::Center' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, HalfHeight) == 0x000018, "Member 'GA_NerveStrike_C_DebugDrawTargetting::HalfHeight' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, Direction) == 0x000020, "Member 'GA_NerveStrike_C_DebugDrawTargetting::Direction' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000038, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000050, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000058, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_Vector_Up_ReturnValue) == 0x000070, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_RotateAngleAxis_ReturnValue) == 0x000088, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000A0, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x0000B8, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D0, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0000E8, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000100, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast) == 0x000118, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast_1) == 0x00011C, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_DebugDrawTargetting, CallFunc_DrawDebugCapsule_Radius_ImplicitCast) == 0x000120, "Member 'GA_NerveStrike_C_DebugDrawTargetting::CallFunc_DrawDebugCapsule_Radius_ImplicitCast' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.FilterTargets
// 0x0060 (0x0060 - 0x0000)
struct GA_NerveStrike_C_FilterTargets final
{
public:
	TArray<class AActor*>                         Targets;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class AActor*>                         Filtered;                                          // 0x0010(0x0010)(Parm, OutParm)
	TArray<class AActor*>                         FilteredTargetActors;                              // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         K2Node_DynamicCast_AsDune_Character;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ValidateTarget_Valid;                     // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_FilterTargets) == 0x000008, "Wrong alignment on GA_NerveStrike_C_FilterTargets");
static_assert(sizeof(GA_NerveStrike_C_FilterTargets) == 0x000060, "Wrong size on GA_NerveStrike_C_FilterTargets");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, Targets) == 0x000000, "Member 'GA_NerveStrike_C_FilterTargets::Targets' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, Filtered) == 0x000010, "Member 'GA_NerveStrike_C_FilterTargets::Filtered' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, FilteredTargetActors) == 0x000020, "Member 'GA_NerveStrike_C_FilterTargets::FilteredTargetActors' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'GA_NerveStrike_C_FilterTargets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, Temp_int_Array_Index_Variable) == 0x000034, "Member 'GA_NerveStrike_C_FilterTargets::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'GA_NerveStrike_C_FilterTargets::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, CallFunc_Array_Get_Item) == 0x000040, "Member 'GA_NerveStrike_C_FilterTargets::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, K2Node_DynamicCast_AsDune_Character) == 0x000048, "Member 'GA_NerveStrike_C_FilterTargets::K2Node_DynamicCast_AsDune_Character' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'GA_NerveStrike_C_FilterTargets::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, CallFunc_Less_IntInt_ReturnValue) == 0x000051, "Member 'GA_NerveStrike_C_FilterTargets::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, CallFunc_ValidateTarget_Valid) == 0x000052, "Member 'GA_NerveStrike_C_FilterTargets::CallFunc_ValidateTarget_Valid' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'GA_NerveStrike_C_FilterTargets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FilterTargets, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'GA_NerveStrike_C_FilterTargets::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.FindTarget
// 0x00B8 (0x00B8 - 0x0000)
struct GA_NerveStrike_C_FindTarget final
{
public:
	class ADuneCharacter*                         OwnerCharacter_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bStart;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetCharacter;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Origin;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0068(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_CapsuleOverlapActors_OutActors;           // 0x0080(0x0010)(ReferenceParm)
	bool                                          CallFunc_CapsuleOverlapActors_ReturnValue;         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_FilterTargets_Filtered;                   // 0x0098(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Get_Best_Target_Best;                     // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CapsuleOverlapActors_Radius_ImplicitCast; // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_FindTarget) == 0x000008, "Wrong alignment on GA_NerveStrike_C_FindTarget");
static_assert(sizeof(GA_NerveStrike_C_FindTarget) == 0x0000B8, "Wrong size on GA_NerveStrike_C_FindTarget");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, OwnerCharacter_0) == 0x000000, "Member 'GA_NerveStrike_C_FindTarget::OwnerCharacter_0' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, bStart) == 0x000008, "Member 'GA_NerveStrike_C_FindTarget::bStart' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, TargetCharacter) == 0x000010, "Member 'GA_NerveStrike_C_FindTarget::TargetCharacter' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, HalfHeight) == 0x000018, "Member 'GA_NerveStrike_C_FindTarget::HalfHeight' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, Origin) == 0x000020, "Member 'GA_NerveStrike_C_FindTarget::Origin' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, K2Node_MakeArray_Array) == 0x000038, "Member 'GA_NerveStrike_C_FindTarget::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000048, "Member 'GA_NerveStrike_C_FindTarget::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'GA_NerveStrike_C_FindTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, K2Node_MakeArray_Array_1) == 0x000068, "Member 'GA_NerveStrike_C_FindTarget::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, CallFunc_SelectFloat_ReturnValue) == 0x000078, "Member 'GA_NerveStrike_C_FindTarget::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, CallFunc_CapsuleOverlapActors_OutActors) == 0x000080, "Member 'GA_NerveStrike_C_FindTarget::CallFunc_CapsuleOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, CallFunc_CapsuleOverlapActors_ReturnValue) == 0x000090, "Member 'GA_NerveStrike_C_FindTarget::CallFunc_CapsuleOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, CallFunc_FilterTargets_Filtered) == 0x000098, "Member 'GA_NerveStrike_C_FindTarget::CallFunc_FilterTargets_Filtered' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, CallFunc_Get_Best_Target_Best) == 0x0000A8, "Member 'GA_NerveStrike_C_FindTarget::CallFunc_Get_Best_Target_Best' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_FindTarget, CallFunc_CapsuleOverlapActors_Radius_ImplicitCast) == 0x0000B0, "Member 'GA_NerveStrike_C_FindTarget::CallFunc_CapsuleOverlapActors_Radius_ImplicitCast' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.Get Best Target
// 0x00D0 (0x00D0 - 0x0000)
struct GA_NerveStrike_C_Get_Best_Target final
{
public:
	struct FVector                                TargetingOrigin;                                   // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetingDirection_0;                              // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Candidates;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class AActor*                                 Best;                                              // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 BestTargetActor;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        BestTargetDistance;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanTargetCharacter_ReturnValue;           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeSquared_ReturnValue;                 // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_Get_Best_Target) == 0x000008, "Wrong alignment on GA_NerveStrike_C_Get_Best_Target");
static_assert(sizeof(GA_NerveStrike_C_Get_Best_Target) == 0x0000D0, "Wrong size on GA_NerveStrike_C_Get_Best_Target");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, TargetingOrigin) == 0x000000, "Member 'GA_NerveStrike_C_Get_Best_Target::TargetingOrigin' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, TargetingDirection_0) == 0x000018, "Member 'GA_NerveStrike_C_Get_Best_Target::TargetingDirection_0' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, Candidates) == 0x000030, "Member 'GA_NerveStrike_C_Get_Best_Target::Candidates' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, Best) == 0x000040, "Member 'GA_NerveStrike_C_Get_Best_Target::Best' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, BestTargetActor) == 0x000048, "Member 'GA_NerveStrike_C_Get_Best_Target::BestTargetActor' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, BestTargetDistance) == 0x000050, "Member 'GA_NerveStrike_C_Get_Best_Target::BestTargetDistance' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, Temp_int_Array_Index_Variable) == 0x000058, "Member 'GA_NerveStrike_C_Get_Best_Target::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_Array_Get_Item) == 0x000060, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000088, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000A0, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_CanTargetCharacter_ReturnValue) == 0x0000A8, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_CanTargetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_DegAcos_ReturnValue) == 0x0000B0, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_VSizeSquared_ReturnValue) == 0x0000B8, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, Temp_int_Loop_Counter_Variable) == 0x0000C0, "Member 'GA_NerveStrike_C_Get_Best_Target::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000C4, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_Less_IntInt_ReturnValue) == 0x0000C5, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_Add_IntInt_ReturnValue) == 0x0000C8, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0000CC, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_BooleanOR_ReturnValue) == 0x0000CD, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000CE, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_Get_Best_Target, CallFunc_BooleanAND_ReturnValue) == 0x0000CF, "Member 'GA_NerveStrike_C_Get_Best_Target::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GA_NerveStrike.GA_NerveStrike_C.ValidateTarget
// 0x0010 (0x0010 - 0x0000)
struct GA_NerveStrike_C_ValidateTarget final
{
public:
	class ADuneCharacter*                         Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInDownedState_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamageBlockType                              CallFunc_IsImmuneToDamage_ReturnValue;             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_NerveStrike_C_ValidateTarget) == 0x000008, "Wrong alignment on GA_NerveStrike_C_ValidateTarget");
static_assert(sizeof(GA_NerveStrike_C_ValidateTarget) == 0x000010, "Wrong size on GA_NerveStrike_C_ValidateTarget");
static_assert(offsetof(GA_NerveStrike_C_ValidateTarget, Target) == 0x000000, "Member 'GA_NerveStrike_C_ValidateTarget::Target' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ValidateTarget, Valid) == 0x000008, "Member 'GA_NerveStrike_C_ValidateTarget::Valid' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ValidateTarget, CallFunc_IsInDownedState_ReturnValue) == 0x000009, "Member 'GA_NerveStrike_C_ValidateTarget::CallFunc_IsInDownedState_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ValidateTarget, CallFunc_IsImmuneToDamage_ReturnValue) == 0x00000A, "Member 'GA_NerveStrike_C_ValidateTarget::CallFunc_IsImmuneToDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ValidateTarget, CallFunc_IsDead_ReturnValue) == 0x00000B, "Member 'GA_NerveStrike_C_ValidateTarget::CallFunc_IsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ValidateTarget, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'GA_NerveStrike_C_ValidateTarget::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ValidateTarget, CallFunc_BooleanOR_ReturnValue) == 0x00000D, "Member 'GA_NerveStrike_C_ValidateTarget::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ValidateTarget, CallFunc_BooleanOR_ReturnValue_1) == 0x00000E, "Member 'GA_NerveStrike_C_ValidateTarget::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_NerveStrike_C_ValidateTarget, CallFunc_Not_PreBool_ReturnValue) == 0x00000F, "Member 'GA_NerveStrike_C_ValidateTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

}

