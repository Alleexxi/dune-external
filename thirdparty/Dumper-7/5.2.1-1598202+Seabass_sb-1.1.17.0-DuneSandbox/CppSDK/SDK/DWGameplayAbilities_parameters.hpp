#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DWGameplayAbilities

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "DWGameplayAbilities_structs.hpp"
#include "FglCore_structs.hpp"


namespace SDK::Params
{

// Function DWGameplayAbilities.DWAbilitySystemComponent.ClientAcknowledgeKey
// 0x0002 (0x0002 - 0x0000)
struct DWAbilitySystemComponent_ClientAcknowledgeKey final
{
public:
	int16                                         AcknowledgementKey;                                // 0x0000(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DWAbilitySystemComponent_ClientAcknowledgeKey) == 0x000002, "Wrong alignment on DWAbilitySystemComponent_ClientAcknowledgeKey");
static_assert(sizeof(DWAbilitySystemComponent_ClientAcknowledgeKey) == 0x000002, "Wrong size on DWAbilitySystemComponent_ClientAcknowledgeKey");
static_assert(offsetof(DWAbilitySystemComponent_ClientAcknowledgeKey, AcknowledgementKey) == 0x000000, "Member 'DWAbilitySystemComponent_ClientAcknowledgeKey::AcknowledgementKey' has a wrong offset!");

// Function DWGameplayAbilities.DWAbilitySystemComponent.ServerApplyGameplayEffectSpecToSelf
// 0x02B0 (0x02B0 - 0x0000)
struct DWAbilitySystemComponent_ServerApplyGameplayEffectSpecToSelf final
{
public:
	struct FGameplayEffectSpec                    GameplayEffect;                                    // 0x0000(0x0298)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0298(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DWAbilitySystemComponent_ServerApplyGameplayEffectSpecToSelf) == 0x000008, "Wrong alignment on DWAbilitySystemComponent_ServerApplyGameplayEffectSpecToSelf");
static_assert(sizeof(DWAbilitySystemComponent_ServerApplyGameplayEffectSpecToSelf) == 0x0002B0, "Wrong size on DWAbilitySystemComponent_ServerApplyGameplayEffectSpecToSelf");
static_assert(offsetof(DWAbilitySystemComponent_ServerApplyGameplayEffectSpecToSelf, GameplayEffect) == 0x000000, "Member 'DWAbilitySystemComponent_ServerApplyGameplayEffectSpecToSelf::GameplayEffect' has a wrong offset!");
static_assert(offsetof(DWAbilitySystemComponent_ServerApplyGameplayEffectSpecToSelf, PredictionKey) == 0x000298, "Member 'DWAbilitySystemComponent_ServerApplyGameplayEffectSpecToSelf::PredictionKey' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.ActivateAbilityByClass
// 0x0028 (0x0028 - 0x0000)
struct DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass final
{
public:
	TSubclassOf<class UDWGameplayAbility>         Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IAbilitySystemInterface> Target;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbilityHandle                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass) == 0x000008, "Wrong alignment on DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass");
static_assert(sizeof(DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass) == 0x000028, "Wrong size on DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass, Ability) == 0x000000, "Member 'DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass::Ability' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass, Target) == 0x000008, "Member 'DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass::Target' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass, ReturnValue) == 0x000018, "Member 'DWGameplayAbilityFunctionLibrary_ActivateAbilityByClass::ReturnValue' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.ApplyEffectByClass
// 0x0030 (0x0030 - 0x0000)
struct DWGameplayAbilityFunctionLibrary_ApplyEffectByClass final
{
public:
	TSubclassOf<class UDWGameplayEffect>          GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IAbilitySystemInterface> Target;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectHandle                          ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DWGameplayAbilityFunctionLibrary_ApplyEffectByClass) == 0x000008, "Wrong alignment on DWGameplayAbilityFunctionLibrary_ApplyEffectByClass");
static_assert(sizeof(DWGameplayAbilityFunctionLibrary_ApplyEffectByClass) == 0x000030, "Wrong size on DWGameplayAbilityFunctionLibrary_ApplyEffectByClass");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_ApplyEffectByClass, GameplayEffectClass) == 0x000000, "Member 'DWGameplayAbilityFunctionLibrary_ApplyEffectByClass::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_ApplyEffectByClass, Target) == 0x000008, "Member 'DWGameplayAbilityFunctionLibrary_ApplyEffectByClass::Target' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_ApplyEffectByClass, Level) == 0x000018, "Member 'DWGameplayAbilityFunctionLibrary_ApplyEffectByClass::Level' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_ApplyEffectByClass, ReturnValue) == 0x000020, "Member 'DWGameplayAbilityFunctionLibrary_ApplyEffectByClass::ReturnValue' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.GetAbilityState
// 0x0018 (0x0018 - 0x0000)
struct DWGameplayAbilityFunctionLibrary_GetAbilityState final
{
public:
	struct FAbilityHandle                         Handle;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAbilityHandleState                           ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DWGameplayAbilityFunctionLibrary_GetAbilityState) == 0x000008, "Wrong alignment on DWGameplayAbilityFunctionLibrary_GetAbilityState");
static_assert(sizeof(DWGameplayAbilityFunctionLibrary_GetAbilityState) == 0x000018, "Wrong size on DWGameplayAbilityFunctionLibrary_GetAbilityState");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_GetAbilityState, Handle) == 0x000000, "Member 'DWGameplayAbilityFunctionLibrary_GetAbilityState::Handle' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_GetAbilityState, ReturnValue) == 0x000010, "Member 'DWGameplayAbilityFunctionLibrary_GetAbilityState::ReturnValue' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.GetActiveGameplayHandle
// 0x0020 (0x0020 - 0x0000)
struct DWGameplayAbilityFunctionLibrary_GetActiveGameplayHandle final
{
public:
	struct FEffectHandle                          Handle;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DWGameplayAbilityFunctionLibrary_GetActiveGameplayHandle) == 0x000008, "Wrong alignment on DWGameplayAbilityFunctionLibrary_GetActiveGameplayHandle");
static_assert(sizeof(DWGameplayAbilityFunctionLibrary_GetActiveGameplayHandle) == 0x000020, "Wrong size on DWGameplayAbilityFunctionLibrary_GetActiveGameplayHandle");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_GetActiveGameplayHandle, Handle) == 0x000000, "Member 'DWGameplayAbilityFunctionLibrary_GetActiveGameplayHandle::Handle' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_GetActiveGameplayHandle, ReturnValue) == 0x000010, "Member 'DWGameplayAbilityFunctionLibrary_GetActiveGameplayHandle::ReturnValue' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.GetEffectState
// 0x0018 (0x0018 - 0x0000)
struct DWGameplayAbilityFunctionLibrary_GetEffectState final
{
public:
	struct FEffectHandle                          Handle;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EEffectHandleState                            ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DWGameplayAbilityFunctionLibrary_GetEffectState) == 0x000008, "Wrong alignment on DWGameplayAbilityFunctionLibrary_GetEffectState");
static_assert(sizeof(DWGameplayAbilityFunctionLibrary_GetEffectState) == 0x000018, "Wrong size on DWGameplayAbilityFunctionLibrary_GetEffectState");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_GetEffectState, Handle) == 0x000000, "Member 'DWGameplayAbilityFunctionLibrary_GetEffectState::Handle' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_GetEffectState, ReturnValue) == 0x000010, "Member 'DWGameplayAbilityFunctionLibrary_GetEffectState::ReturnValue' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayAbilityFunctionLibrary.RemoveEffect
// 0x0028 (0x0028 - 0x0000)
struct DWGameplayAbilityFunctionLibrary_RemoveEffect final
{
public:
	struct FEffectHandle                          EffectHandle;                                      // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TScriptInterface<class IAbilitySystemInterface> Target;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DWGameplayAbilityFunctionLibrary_RemoveEffect) == 0x000008, "Wrong alignment on DWGameplayAbilityFunctionLibrary_RemoveEffect");
static_assert(sizeof(DWGameplayAbilityFunctionLibrary_RemoveEffect) == 0x000028, "Wrong size on DWGameplayAbilityFunctionLibrary_RemoveEffect");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_RemoveEffect, EffectHandle) == 0x000000, "Member 'DWGameplayAbilityFunctionLibrary_RemoveEffect::EffectHandle' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_RemoveEffect, Target) == 0x000010, "Member 'DWGameplayAbilityFunctionLibrary_RemoveEffect::Target' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_RemoveEffect, StacksToRemove) == 0x000020, "Member 'DWGameplayAbilityFunctionLibrary_RemoveEffect::StacksToRemove' has a wrong offset!");
static_assert(offsetof(DWGameplayAbilityFunctionLibrary_RemoveEffect, ReturnValue) == 0x000024, "Member 'DWGameplayAbilityFunctionLibrary_RemoveEffect::ReturnValue' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayAbility.EndTask
// 0x0008 (0x0008 - 0x0000)
struct DWGameplayAbility_EndTask final
{
public:
	struct FAbilityTaskHandle                     Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DWGameplayAbility_EndTask) == 0x000008, "Wrong alignment on DWGameplayAbility_EndTask");
static_assert(sizeof(DWGameplayAbility_EndTask) == 0x000008, "Wrong size on DWGameplayAbility_EndTask");
static_assert(offsetof(DWGameplayAbility_EndTask, Handle) == 0x000000, "Member 'DWGameplayAbility_EndTask::Handle' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayAbility.InitializeStaticProperties
// 0x0148 (0x0148 - 0x0000)
struct DWGameplayAbility_InitializeStaticProperties final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0048(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DWGameplayAbility_InitializeStaticProperties) == 0x000008, "Wrong alignment on DWGameplayAbility_InitializeStaticProperties");
static_assert(sizeof(DWGameplayAbility_InitializeStaticProperties) == 0x000148, "Wrong size on DWGameplayAbility_InitializeStaticProperties");
static_assert(offsetof(DWGameplayAbility_InitializeStaticProperties, ActorInfo) == 0x000000, "Member 'DWGameplayAbility_InitializeStaticProperties::ActorInfo' has a wrong offset!");
static_assert(offsetof(DWGameplayAbility_InitializeStaticProperties, Spec) == 0x000048, "Member 'DWGameplayAbility_InitializeStaticProperties::Spec' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayAbility.SetupPostAuthorityTransfer
// 0x0148 (0x0148 - 0x0000)
struct DWGameplayAbility_SetupPostAuthorityTransfer final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0048(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DWGameplayAbility_SetupPostAuthorityTransfer) == 0x000008, "Wrong alignment on DWGameplayAbility_SetupPostAuthorityTransfer");
static_assert(sizeof(DWGameplayAbility_SetupPostAuthorityTransfer) == 0x000148, "Wrong size on DWGameplayAbility_SetupPostAuthorityTransfer");
static_assert(offsetof(DWGameplayAbility_SetupPostAuthorityTransfer, ActorInfo) == 0x000000, "Member 'DWGameplayAbility_SetupPostAuthorityTransfer::ActorInfo' has a wrong offset!");
static_assert(offsetof(DWGameplayAbility_SetupPostAuthorityTransfer, Spec) == 0x000048, "Member 'DWGameplayAbility_SetupPostAuthorityTransfer::Spec' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayAbility.GetContext
// 0x0010 (0x0010 - 0x0000)
struct DWGameplayAbility_GetContext final
{
public:
	struct FRuntimeImmediateContext               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DWGameplayAbility_GetContext) == 0x000008, "Wrong alignment on DWGameplayAbility_GetContext");
static_assert(sizeof(DWGameplayAbility_GetContext) == 0x000010, "Wrong size on DWGameplayAbility_GetContext");
static_assert(offsetof(DWGameplayAbility_GetContext, ReturnValue) == 0x000000, "Member 'DWGameplayAbility_GetContext::ReturnValue' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayEffect.GetDurationMagnitudeForLevel
// 0x000C (0x000C - 0x0000)
struct DWGameplayEffect_GetDurationMagnitudeForLevel final
{
public:
	float                                         InLevel;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMagnitude;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DWGameplayEffect_GetDurationMagnitudeForLevel) == 0x000004, "Wrong alignment on DWGameplayEffect_GetDurationMagnitudeForLevel");
static_assert(sizeof(DWGameplayEffect_GetDurationMagnitudeForLevel) == 0x00000C, "Wrong size on DWGameplayEffect_GetDurationMagnitudeForLevel");
static_assert(offsetof(DWGameplayEffect_GetDurationMagnitudeForLevel, InLevel) == 0x000000, "Member 'DWGameplayEffect_GetDurationMagnitudeForLevel::InLevel' has a wrong offset!");
static_assert(offsetof(DWGameplayEffect_GetDurationMagnitudeForLevel, OutMagnitude) == 0x000004, "Member 'DWGameplayEffect_GetDurationMagnitudeForLevel::OutMagnitude' has a wrong offset!");
static_assert(offsetof(DWGameplayEffect_GetDurationMagnitudeForLevel, ReturnValue) == 0x000008, "Member 'DWGameplayEffect_GetDurationMagnitudeForLevel::ReturnValue' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayEffect.GetModifierMagnitudeForLevelAndAttribute
// 0x0048 (0x0048 - 0x0000)
struct DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute final
{
public:
	struct FGameplayAttribute                     InAttribute;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLevel;                                           // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMagnitude;                                      // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute) == 0x000008, "Wrong alignment on DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute");
static_assert(sizeof(DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute) == 0x000048, "Wrong size on DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute");
static_assert(offsetof(DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute, InAttribute) == 0x000000, "Member 'DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute::InAttribute' has a wrong offset!");
static_assert(offsetof(DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute, InLevel) == 0x000038, "Member 'DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute::InLevel' has a wrong offset!");
static_assert(offsetof(DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute, OutMagnitude) == 0x00003C, "Member 'DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute::OutMagnitude' has a wrong offset!");
static_assert(offsetof(DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute, ReturnValue) == 0x000040, "Member 'DWGameplayEffect_GetModifierMagnitudeForLevelAndAttribute::ReturnValue' has a wrong offset!");

// Function DWGameplayAbilities.DWGameplayEffect.GetModifierMagnitudesForLevel
// 0x0018 (0x0018 - 0x0000)
struct DWGameplayEffect_GetModifierMagnitudesForLevel final
{
public:
	TArray<float>                                 OutVals;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InLevel;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DWGameplayEffect_GetModifierMagnitudesForLevel) == 0x000008, "Wrong alignment on DWGameplayEffect_GetModifierMagnitudesForLevel");
static_assert(sizeof(DWGameplayEffect_GetModifierMagnitudesForLevel) == 0x000018, "Wrong size on DWGameplayEffect_GetModifierMagnitudesForLevel");
static_assert(offsetof(DWGameplayEffect_GetModifierMagnitudesForLevel, OutVals) == 0x000000, "Member 'DWGameplayEffect_GetModifierMagnitudesForLevel::OutVals' has a wrong offset!");
static_assert(offsetof(DWGameplayEffect_GetModifierMagnitudesForLevel, InLevel) == 0x000010, "Member 'DWGameplayEffect_GetModifierMagnitudesForLevel::InLevel' has a wrong offset!");

}

