#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_VehicleModuleIcon

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"


namespace SDK::Params
{

// Function W_VehicleModuleIcon.W_VehicleModuleIcon_C.Setup Module Visuals
// 0x0080 (0x0080 - 0x0000)
struct W_VehicleModuleIcon_C_Setup_Module_Visuals final
{
public:
	EVehicleModuleAttachState                     Module_State;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemDurabilityState                          Durability;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DurabilityValue;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            NotAttatchedColor;                                 // 0x0010(0x0014)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetLinearColorValue_ReturnValue;          // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0038(0x0014)()
	EVehicleModuleAttachState                     Temp_byte_Variable;                                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0050(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x0064(0x0014)()
	float                                         CallFunc_GetLinearColorValue_InTime_ImplicitCast;  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VehicleModuleIcon_C_Setup_Module_Visuals) == 0x000008, "Wrong alignment on W_VehicleModuleIcon_C_Setup_Module_Visuals");
static_assert(sizeof(W_VehicleModuleIcon_C_Setup_Module_Visuals) == 0x000080, "Wrong size on W_VehicleModuleIcon_C_Setup_Module_Visuals");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, Module_State) == 0x000000, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::Module_State' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, Durability) == 0x000001, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::Durability' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, DurabilityValue) == 0x000008, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::DurabilityValue' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, NotAttatchedColor) == 0x000010, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::NotAttatchedColor' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, Temp_bool_Variable) == 0x000024, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, CallFunc_GetLinearColorValue_ReturnValue) == 0x000028, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::CallFunc_GetLinearColorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, K2Node_MakeStruct_SlateColor) == 0x000038, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, Temp_byte_Variable) == 0x00004C, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, K2Node_Select_Default) == 0x000050, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, K2Node_Select_Default_1) == 0x000064, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_Setup_Module_Visuals, CallFunc_GetLinearColorValue_InTime_ImplicitCast) == 0x000078, "Member 'W_VehicleModuleIcon_C_Setup_Module_Visuals::CallFunc_GetLinearColorValue_InTime_ImplicitCast' has a wrong offset!");

// Function W_VehicleModuleIcon.W_VehicleModuleIcon_C.Set Size
// 0x0008 (0x0008 - 0x0000)
struct W_VehicleModuleIcon_C_Set_Size final
{
public:
	struct FDeprecateSlateVector2D                Size;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VehicleModuleIcon_C_Set_Size) == 0x000004, "Wrong alignment on W_VehicleModuleIcon_C_Set_Size");
static_assert(sizeof(W_VehicleModuleIcon_C_Set_Size) == 0x000008, "Wrong size on W_VehicleModuleIcon_C_Set_Size");
static_assert(offsetof(W_VehicleModuleIcon_C_Set_Size, Size) == 0x000000, "Member 'W_VehicleModuleIcon_C_Set_Size::Size' has a wrong offset!");

// Function W_VehicleModuleIcon.W_VehicleModuleIcon_C.Set Icon
// 0x0030 (0x0030 - 0x0000)
struct W_VehicleModuleIcon_C_Set_Icon final
{
public:
	TSoftObjectPtr<class UTexture2D>              SoftTexture;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(W_VehicleModuleIcon_C_Set_Icon) == 0x000008, "Wrong alignment on W_VehicleModuleIcon_C_Set_Icon");
static_assert(sizeof(W_VehicleModuleIcon_C_Set_Icon) == 0x000030, "Wrong size on W_VehicleModuleIcon_C_Set_Icon");
static_assert(offsetof(W_VehicleModuleIcon_C_Set_Icon, SoftTexture) == 0x000000, "Member 'W_VehicleModuleIcon_C_Set_Icon::SoftTexture' has a wrong offset!");

// Function W_VehicleModuleIcon.W_VehicleModuleIcon_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_VehicleModuleIcon_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VehicleModuleIcon_C_PreConstruct) == 0x000001, "Wrong alignment on W_VehicleModuleIcon_C_PreConstruct");
static_assert(sizeof(W_VehicleModuleIcon_C_PreConstruct) == 0x000001, "Wrong size on W_VehicleModuleIcon_C_PreConstruct");
static_assert(offsetof(W_VehicleModuleIcon_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_VehicleModuleIcon_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_VehicleModuleIcon.W_VehicleModuleIcon_C.ExecuteUbergraph_W_VehicleModuleIcon
// 0x0008 (0x0008 - 0x0000)
struct W_VehicleModuleIcon_C_ExecuteUbergraph_W_VehicleModuleIcon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_VehicleModuleIcon_C_ExecuteUbergraph_W_VehicleModuleIcon) == 0x000004, "Wrong alignment on W_VehicleModuleIcon_C_ExecuteUbergraph_W_VehicleModuleIcon");
static_assert(sizeof(W_VehicleModuleIcon_C_ExecuteUbergraph_W_VehicleModuleIcon) == 0x000008, "Wrong size on W_VehicleModuleIcon_C_ExecuteUbergraph_W_VehicleModuleIcon");
static_assert(offsetof(W_VehicleModuleIcon_C_ExecuteUbergraph_W_VehicleModuleIcon, EntryPoint) == 0x000000, "Member 'W_VehicleModuleIcon_C_ExecuteUbergraph_W_VehicleModuleIcon::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_VehicleModuleIcon_C_ExecuteUbergraph_W_VehicleModuleIcon, K2Node_Event_IsDesignTime) == 0x000004, "Member 'W_VehicleModuleIcon_C_ExecuteUbergraph_W_VehicleModuleIcon::K2Node_Event_IsDesignTime' has a wrong offset!");

}

