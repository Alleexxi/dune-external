#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CharacterCreationInnerTraitSlot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_CharacterCreationInnerTraitSlot.W_CharacterCreationInnerTraitSlot_C.ExecuteUbergraph_W_CharacterCreationInnerTraitSlot
// 0x000C (0x000C - 0x0000)
struct W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot) == 0x000004, "Wrong alignment on W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot");
static_assert(sizeof(W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot) == 0x00000C, "Wrong size on W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot, EntryPoint) == 0x000000, "Member 'W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot, Temp_bool_Variable) == 0x000004, "Member 'W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot, Temp_byte_Variable) == 0x000005, "Member 'W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot, Temp_byte_Variable_1) == 0x000006, "Member 'W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot, K2Node_Event_IsDesignTime) == 0x000007, "Member 'W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot, K2Node_Select_Default) == 0x000008, "Member 'W_CharacterCreationInnerTraitSlot_C_ExecuteUbergraph_W_CharacterCreationInnerTraitSlot::K2Node_Select_Default' has a wrong offset!");

// Function W_CharacterCreationInnerTraitSlot.W_CharacterCreationInnerTraitSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_CharacterCreationInnerTraitSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CharacterCreationInnerTraitSlot_C_PreConstruct) == 0x000001, "Wrong alignment on W_CharacterCreationInnerTraitSlot_C_PreConstruct");
static_assert(sizeof(W_CharacterCreationInnerTraitSlot_C_PreConstruct) == 0x000001, "Wrong size on W_CharacterCreationInnerTraitSlot_C_PreConstruct");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_CharacterCreationInnerTraitSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_CharacterCreationInnerTraitSlot.W_CharacterCreationInnerTraitSlot_C.Set Textures
// 0x0020 (0x0020 - 0x0000)
struct W_CharacterCreationInnerTraitSlot_C_Set_Textures final
{
public:
	class UTexture2D*                             Diamond;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CutEdge;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             MAinBody;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             End;                                               // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CharacterCreationInnerTraitSlot_C_Set_Textures) == 0x000008, "Wrong alignment on W_CharacterCreationInnerTraitSlot_C_Set_Textures");
static_assert(sizeof(W_CharacterCreationInnerTraitSlot_C_Set_Textures) == 0x000020, "Wrong size on W_CharacterCreationInnerTraitSlot_C_Set_Textures");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Set_Textures, Diamond) == 0x000000, "Member 'W_CharacterCreationInnerTraitSlot_C_Set_Textures::Diamond' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Set_Textures, CutEdge) == 0x000008, "Member 'W_CharacterCreationInnerTraitSlot_C_Set_Textures::CutEdge' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Set_Textures, MAinBody) == 0x000010, "Member 'W_CharacterCreationInnerTraitSlot_C_Set_Textures::MAinBody' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Set_Textures, End) == 0x000018, "Member 'W_CharacterCreationInnerTraitSlot_C_Set_Textures::End' has a wrong offset!");

// Function W_CharacterCreationInnerTraitSlot.W_CharacterCreationInnerTraitSlot_C.Setup Slot
// 0x0030 (0x0030 - 0x0000)
struct W_CharacterCreationInnerTraitSlot_C_Setup_Slot final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                InPadding;                                         // 0x000C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_Slot_Visible_;                                  // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot) == 0x000008, "Wrong alignment on W_CharacterCreationInnerTraitSlot_C_Setup_Slot");
static_assert(sizeof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot) == 0x000030, "Wrong size on W_CharacterCreationInnerTraitSlot_C_Setup_Slot");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot, Widget) == 0x000000, "Member 'W_CharacterCreationInnerTraitSlot_C_Setup_Slot::Widget' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot, InHorizontalAlignment) == 0x000008, "Member 'W_CharacterCreationInnerTraitSlot_C_Setup_Slot::InHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot, InPadding) == 0x00000C, "Member 'W_CharacterCreationInnerTraitSlot_C_Setup_Slot::InPadding' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot, Is_Slot_Visible_) == 0x00001C, "Member 'W_CharacterCreationInnerTraitSlot_C_Setup_Slot::Is_Slot_Visible_' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot, Temp_byte_Variable) == 0x00001D, "Member 'W_CharacterCreationInnerTraitSlot_C_Setup_Slot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot, Temp_byte_Variable_1) == 0x00001E, "Member 'W_CharacterCreationInnerTraitSlot_C_Setup_Slot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot, CallFunc_SlotAsGridSlot_ReturnValue) == 0x000020, "Member 'W_CharacterCreationInnerTraitSlot_C_Setup_Slot::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot, Temp_bool_Variable) == 0x000028, "Member 'W_CharacterCreationInnerTraitSlot_C_Setup_Slot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_CharacterCreationInnerTraitSlot_C_Setup_Slot, K2Node_Select_Default) == 0x000029, "Member 'W_CharacterCreationInnerTraitSlot_C_Setup_Slot::K2Node_Select_Default' has a wrong offset!");

}

