#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StormLightningManager_Component

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StormLightningManager_Component.BP_StormLightningManager_Component_C
// 0x0070 (0x0198 - 0x0128)
class UBP_StormLightningManager_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0128(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextureRenderTarget2D*                 LightningRT;                                       // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Lightning_History;                             // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        HistoryStrength;                                   // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanRepeatLightning;                                // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Frequency_Min;                                     // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Frequency_Max;                                     // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightningFrequency;                                // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_StormLightningComponent_C*>  LightningComponents;                               // 0x0168(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UStormLightningComponent*               PreviousLightning;                                 // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Lightning_Draw;                                // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          LightningActive;                                   // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LightningTimer;                                    // 0x0190(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CreateDMI();
	void DrawAll();
	void DrawLightningIntoRT(const struct FVector& WorldLocation, double Radius, double Strength);
	void DrawRandomLightning();
	void ExecuteUbergraph_BP_StormLightningManager_Component(int32 EntryPoint);
	void Get_World_Location_to_RTLocation(const struct FVector& InWorldLocation, struct FVector* OutRTLocation, struct FVector* OutSnappedRTLocation);
	void InitLightning();
	void InitLightningtimer();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void StopLightning();
	void UpdateLightningRT();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StormLightningManager_Component_C">();
	}
	static class UBP_StormLightningManager_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_StormLightningManager_Component_C>();
	}
};
static_assert(alignof(UBP_StormLightningManager_Component_C) == 0x000008, "Wrong alignment on UBP_StormLightningManager_Component_C");
static_assert(sizeof(UBP_StormLightningManager_Component_C) == 0x000198, "Wrong size on UBP_StormLightningManager_Component_C");
static_assert(offsetof(UBP_StormLightningManager_Component_C, UberGraphFrame) == 0x000128, "Member 'UBP_StormLightningManager_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, LightningRT) == 0x000130, "Member 'UBP_StormLightningManager_Component_C::LightningRT' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, DMI_Lightning_History) == 0x000138, "Member 'UBP_StormLightningManager_Component_C::DMI_Lightning_History' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, HistoryStrength) == 0x000140, "Member 'UBP_StormLightningManager_Component_C::HistoryStrength' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, CanRepeatLightning) == 0x000148, "Member 'UBP_StormLightningManager_Component_C::CanRepeatLightning' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, Frequency_Min) == 0x000150, "Member 'UBP_StormLightningManager_Component_C::Frequency_Min' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, Frequency_Max) == 0x000158, "Member 'UBP_StormLightningManager_Component_C::Frequency_Max' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, LightningFrequency) == 0x000160, "Member 'UBP_StormLightningManager_Component_C::LightningFrequency' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, LightningComponents) == 0x000168, "Member 'UBP_StormLightningManager_Component_C::LightningComponents' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, PreviousLightning) == 0x000178, "Member 'UBP_StormLightningManager_Component_C::PreviousLightning' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, DMI_Lightning_Draw) == 0x000180, "Member 'UBP_StormLightningManager_Component_C::DMI_Lightning_Draw' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, LightningActive) == 0x000188, "Member 'UBP_StormLightningManager_Component_C::LightningActive' has a wrong offset!");
static_assert(offsetof(UBP_StormLightningManager_Component_C, LightningTimer) == 0x000190, "Member 'UBP_StormLightningManager_Component_C::LightningTimer' has a wrong offset!");

}

