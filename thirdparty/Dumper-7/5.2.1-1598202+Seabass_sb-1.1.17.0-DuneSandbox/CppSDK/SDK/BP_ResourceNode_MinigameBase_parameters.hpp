#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ResourceNode_MinigameBase

#include "Basic.hpp"

#include "F_FractureLineGameplayGroup_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.BPGetActiveFractureLines
// 0x00D8 (0x00D8 - 0x0000)
struct BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines final
{
public:
	TArray<uint8>                                 OutFractureLineIndices;                            // 0x0000(0x0010)(Parm, OutParm)
	TArray<uint8>                                 local_Output;                                      // 0x0010(0x0010)(Edit, BlueprintVisible)
	class FName                                   local_Version;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   local_Group;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFractureLineSplineData                CallFunc_Array_Get_Item;                           // 0x0048(0x0020)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_FractureLineGameplayGroup           CallFunc_Array_Get_Item_1;                         // 0x0070(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_2;                         // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines) == 0x000008, "Wrong alignment on BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines");
static_assert(sizeof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines) == 0x0000D8, "Wrong size on BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, OutFractureLineIndices) == 0x000000, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::OutFractureLineIndices' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, local_Output) == 0x000010, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::local_Output' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, local_Version) == 0x000020, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::local_Version' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, local_Group) == 0x000028, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::local_Group' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Conv_IntToByte_ReturnValue) == 0x000034, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, Temp_int_Array_Index_Variable_1) == 0x000040, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, Temp_int_Loop_Counter_Variable_1) == 0x00006C, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Less_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Array_Length_ReturnValue_1) == 0x0000B4, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_RandomInteger_ReturnValue) == 0x0000B8, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Array_Get_Item_2) == 0x0000BC, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C4, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Array_Length_ReturnValue_2) == 0x0000C8, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000CC, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Array_Add_ReturnValue) == 0x0000D0, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Array_Contains_ReturnValue) == 0x0000D4, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines, CallFunc_Array_Contains_ReturnValue_1) == 0x0000D5, "Member 'BP_ResourceNode_MinigameBase_C_BPGetActiveFractureLines::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");

// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.BPGetGroupToScan
// 0x0130 (0x0130 - 0x0000)
struct BP_ResourceNode_MinigameBase_C_BPGetGroupToScan final
{
public:
	const class AActor*                           InScanningActor;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutGroupId;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MaxScoringGroup;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxScore;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_FractureLineGameplayGroup           CallFunc_Array_Get_Item;                           // 0x0098(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsParentDestroyed_IsDestroyed;            // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UArrowComponent*>                CallFunc_GetComponentsByTag_ReturnValue;           // 0x00E0(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UArrowComponent*                        CallFunc_Array_Get_Item_1;                         // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFractureLineGroupDestroyed_ReturnValue; // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan) == 0x000008, "Wrong alignment on BP_ResourceNode_MinigameBase_C_BPGetGroupToScan");
static_assert(sizeof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan) == 0x000130, "Wrong size on BP_ResourceNode_MinigameBase_C_BPGetGroupToScan");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, InScanningActor) == 0x000000, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::InScanningActor' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, OutGroupId) == 0x000008, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::OutGroupId' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, MaxScoringGroup) == 0x000010, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::MaxScoringGroup' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, MaxScore) == 0x000018, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::MaxScore' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000050, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_Normal_ReturnValue) == 0x000080, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_Array_Get_Item) == 0x000098, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_Array_Length_ReturnValue) == 0x0000D8, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_IsParentDestroyed_IsDestroyed) == 0x0000DC, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_IsParentDestroyed_IsDestroyed' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_Less_IntInt_ReturnValue) == 0x0000DD, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_GetComponentsByTag_ReturnValue) == 0x0000E0, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_GetComponentsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_Array_Get_Item_1) == 0x0000F0, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_IsFractureLineGroupDestroyed_ReturnValue) == 0x0000F8, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_IsFractureLineGroupDestroyed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_IsValid_ReturnValue_1) == 0x0000F9, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_GetForwardVector_ReturnValue) == 0x000100, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_Dot_VectorVector_ReturnValue) == 0x000118, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000120, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPGetGroupToScan, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000128, "Member 'BP_ResourceNode_MinigameBase_C_BPGetGroupToScan::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.BPOnFractureLineSegmentActivated
// 0x0004 (0x0004 - 0x0000)
struct BP_ResourceNode_MinigameBase_C_BPOnFractureLineSegmentActivated final
{
public:
	int32                                         SegmentIndex;                                      // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ResourceNode_MinigameBase_C_BPOnFractureLineSegmentActivated) == 0x000004, "Wrong alignment on BP_ResourceNode_MinigameBase_C_BPOnFractureLineSegmentActivated");
static_assert(sizeof(BP_ResourceNode_MinigameBase_C_BPOnFractureLineSegmentActivated) == 0x000004, "Wrong size on BP_ResourceNode_MinigameBase_C_BPOnFractureLineSegmentActivated");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPOnFractureLineSegmentActivated, SegmentIndex) == 0x000000, "Member 'BP_ResourceNode_MinigameBase_C_BPOnFractureLineSegmentActivated::SegmentIndex' has a wrong offset!");

// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.ExecuteUbergraph_BP_ResourceNode_MinigameBase
// 0x00C0 (0x00C0 - 0x0000)
struct BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetMaxElement_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SegmentIndex;                         // 0x0078(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UResourceNodeSplineMeshComponent*       CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTimeSeconds_ReturnValue;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetCustomPrimitiveDataFloat_Value_ImplicitCast; // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase) == 0x000008, "Wrong alignment on BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase");
static_assert(sizeof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase) == 0x0000C0, "Wrong size on BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, EntryPoint) == 0x000000, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_GetComponentBounds_Origin) == 0x000008, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_GetComponentBounds_BoxExtent) == 0x000020, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_GetComponentBounds_SphereRadius) == 0x000038, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_GetMaxElement_ReturnValue) == 0x000040, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_GetMaxElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_BreakVector_X) == 0x000048, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_BreakVector_Y) == 0x000050, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_BreakVector_Z) == 0x000058, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000070, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, K2Node_Event_SegmentIndex) == 0x000078, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::K2Node_Event_SegmentIndex' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000080, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_Array_Get_Item) == 0x000088, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_GetTimeSeconds_ReturnValue) == 0x000098, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_MakeVector_ReturnValue) == 0x0000A0, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000B8, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase, CallFunc_SetCustomPrimitiveDataFloat_Value_ImplicitCast) == 0x0000BC, "Member 'BP_ResourceNode_MinigameBase_C_ExecuteUbergraph_BP_ResourceNode_MinigameBase::CallFunc_SetCustomPrimitiveDataFloat_Value_ImplicitCast' has a wrong offset!");

// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.GetComponentsToReactToScan
// 0x0020 (0x0020 - 0x0000)
struct BP_ResourceNode_MinigameBase_C_GetComponentsToReactToScan final
{
public:
	TArray<class USceneComponent*>                SceneComponents;                                   // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class USceneComponent*>                NewLocalVar_0;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
};
static_assert(alignof(BP_ResourceNode_MinigameBase_C_GetComponentsToReactToScan) == 0x000008, "Wrong alignment on BP_ResourceNode_MinigameBase_C_GetComponentsToReactToScan");
static_assert(sizeof(BP_ResourceNode_MinigameBase_C_GetComponentsToReactToScan) == 0x000020, "Wrong size on BP_ResourceNode_MinigameBase_C_GetComponentsToReactToScan");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetComponentsToReactToScan, SceneComponents) == 0x000000, "Member 'BP_ResourceNode_MinigameBase_C_GetComponentsToReactToScan::SceneComponents' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetComponentsToReactToScan, NewLocalVar_0) == 0x000010, "Member 'BP_ResourceNode_MinigameBase_C_GetComponentsToReactToScan::NewLocalVar_0' has a wrong offset!");

// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.GetFractureLineGroupFromGroupId
// 0x00E8 (0x00E8 - 0x0000)
struct BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId final
{
public:
	class FName                                   Group_Id;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_FractureLineGameplayGroup           Fracture_Line_Group;                               // 0x0008(0x0040)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_FractureLineGameplayGroup           K2Node_MakeStruct_F_FractureLineGameplayGroup;     // 0x0058(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_FractureLineGameplayGroup           CallFunc_Array_Get_Item;                           // 0x00A0(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId) == 0x000008, "Wrong alignment on BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId");
static_assert(sizeof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId) == 0x0000E8, "Wrong size on BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId, Group_Id) == 0x000000, "Member 'BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId::Group_Id' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId, Fracture_Line_Group) == 0x000008, "Member 'BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId::Fracture_Line_Group' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId, Temp_int_Array_Index_Variable) == 0x000048, "Member 'BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId, K2Node_MakeStruct_F_FractureLineGameplayGroup) == 0x000058, "Member 'BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId::K2Node_MakeStruct_F_FractureLineGameplayGroup' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId, CallFunc_Less_IntInt_ReturnValue) == 0x0000E0, "Member 'BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000E1, "Member 'BP_ResourceNode_MinigameBase_C_GetFractureLineGroupFromGroupId::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.IsParentDestroyed
// 0x00C0 (0x00C0 - 0x0000)
struct BP_ResourceNode_MinigameBase_C_IsParentDestroyed final
{
public:
	struct FF_FractureLineGameplayGroup           Group;                                             // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          IsDestroyed;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_FractureLineGameplayGroup           CallFunc_Array_Get_Item_1;                         // 0x0078(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFractureLineGroupDestroyed_ReturnValue; // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed) == 0x000008, "Wrong alignment on BP_ResourceNode_MinigameBase_C_IsParentDestroyed");
static_assert(sizeof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed) == 0x0000C0, "Wrong size on BP_ResourceNode_MinigameBase_C_IsParentDestroyed");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, Group) == 0x000000, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::Group' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, IsDestroyed) == 0x000040, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::IsDestroyed' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, Temp_bool_True_if_break_was_hit_Variable) == 0x000041, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, Temp_int_Array_Index_Variable_1) == 0x000060, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, Temp_int_Loop_Counter_Variable_1) == 0x000064, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_BooleanAND_ReturnValue) == 0x000070, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_Array_Length_ReturnValue_1) == 0x0000B8, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000BC, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000BD, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_IsParentDestroyed, CallFunc_IsFractureLineGroupDestroyed_ReturnValue) == 0x0000BE, "Member 'BP_ResourceNode_MinigameBase_C_IsParentDestroyed::CallFunc_IsFractureLineGroupDestroyed_ReturnValue' has a wrong offset!");

// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.UpdateScannableComponentsCustomDepth
// 0x0048 (0x0048 - 0x0000)
struct BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetComponentsToReactToScan_SceneComponents; // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         K2Node_DynamicCast_AsMesh_Component;               // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth) == 0x000008, "Wrong alignment on BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth");
static_assert(sizeof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth) == 0x000048, "Wrong size on BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth, CallFunc_SelectInt_ReturnValue) == 0x00000C, "Member 'BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth, CallFunc_GetComponentsToReactToScan_SceneComponents) == 0x000010, "Member 'BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth::CallFunc_GetComponentsToReactToScan_SceneComponents' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth, K2Node_DynamicCast_AsMesh_Component) == 0x000038, "Member 'BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth::K2Node_DynamicCast_AsMesh_Component' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_ResourceNode_MinigameBase_C_UpdateScannableComponentsCustomDepth::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_ResourceNode_MinigameBase.BP_ResourceNode_MinigameBase_C.BPCalculateImpactForceFeedback
// 0x0038 (0x0038 - 0x0000)
struct BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback final
{
public:
	bool                                          bIsHittingFractureLine;                            // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutLeftLargeMotorIntensity;                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutLeftSmallMotorIntensity;                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutRightLargeMotorIntensity;                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutRightSmallMotorIntensity;                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_FunctionResult_OutLeftLargeMotorIntensity_ImplicitCast; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_FunctionResult_OutLeftSmallMotorIntensity_ImplicitCast; // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_FunctionResult_OutRightLargeMotorIntensity_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_FunctionResult_OutRightSmallMotorIntensity_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback) == 0x000008, "Wrong alignment on BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback");
static_assert(sizeof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback) == 0x000038, "Wrong size on BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, bIsHittingFractureLine) == 0x000000, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::bIsHittingFractureLine' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, OutLeftLargeMotorIntensity) == 0x000004, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::OutLeftLargeMotorIntensity' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, OutLeftSmallMotorIntensity) == 0x000008, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::OutLeftSmallMotorIntensity' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, OutRightLargeMotorIntensity) == 0x00000C, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::OutRightLargeMotorIntensity' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, OutRightSmallMotorIntensity) == 0x000010, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::OutRightSmallMotorIntensity' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, CallFunc_SelectFloat_ReturnValue) == 0x000018, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, CallFunc_SelectFloat_ReturnValue_1) == 0x000020, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, K2Node_FunctionResult_OutLeftLargeMotorIntensity_ImplicitCast) == 0x000028, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::K2Node_FunctionResult_OutLeftLargeMotorIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, K2Node_FunctionResult_OutLeftSmallMotorIntensity_ImplicitCast) == 0x00002C, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::K2Node_FunctionResult_OutLeftSmallMotorIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, K2Node_FunctionResult_OutRightLargeMotorIntensity_ImplicitCast) == 0x000030, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::K2Node_FunctionResult_OutRightLargeMotorIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback, K2Node_FunctionResult_OutRightSmallMotorIntensity_ImplicitCast) == 0x000034, "Member 'BP_ResourceNode_MinigameBase_C_BPCalculateImpactForceFeedback::K2Node_FunctionResult_OutRightSmallMotorIntensity_ImplicitCast' has a wrong offset!");

}

