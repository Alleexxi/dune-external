#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_HCB_MiningLaser

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AB_HCB_MiningLaser.AB_HCB_MiningLaser_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct AB_HCB_MiningLaser_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_HCB_MiningLaser_C_AnimGraph) == 0x000008, "Wrong alignment on AB_HCB_MiningLaser_C_AnimGraph");
static_assert(sizeof(AB_HCB_MiningLaser_C_AnimGraph) == 0x000010, "Wrong size on AB_HCB_MiningLaser_C_AnimGraph");
static_assert(offsetof(AB_HCB_MiningLaser_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'AB_HCB_MiningLaser_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function AB_HCB_MiningLaser.AB_HCB_MiningLaser_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct AB_HCB_MiningLaser_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_HCB_MiningLaser_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on AB_HCB_MiningLaser_C_BlueprintUpdateAnimation");
static_assert(sizeof(AB_HCB_MiningLaser_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on AB_HCB_MiningLaser_C_BlueprintUpdateAnimation");
static_assert(offsetof(AB_HCB_MiningLaser_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'AB_HCB_MiningLaser_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function AB_HCB_MiningLaser.AB_HCB_MiningLaser_C.CalculateTurretRotation
// 0x0070 (0x0070 - 0x0000)
struct AB_HCB_MiningLaser_C_CalculateTurretRotation final
{
public:
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_AimPitch_ImplicitCast;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_TurretRotation_ImplicitCast;    // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_HCB_MiningLaser_C_CalculateTurretRotation) == 0x000008, "Wrong alignment on AB_HCB_MiningLaser_C_CalculateTurretRotation");
static_assert(sizeof(AB_HCB_MiningLaser_C_CalculateTurretRotation) == 0x000070, "Wrong size on AB_HCB_MiningLaser_C_CalculateTurretRotation");
static_assert(offsetof(AB_HCB_MiningLaser_C_CalculateTurretRotation, CallFunc_MakeRotator_ReturnValue) == 0x000000, "Member 'AB_HCB_MiningLaser_C_CalculateTurretRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_CalculateTurretRotation, CallFunc_GetOwningComponent_ReturnValue) == 0x000018, "Member 'AB_HCB_MiningLaser_C_CalculateTurretRotation::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_CalculateTurretRotation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000020, "Member 'AB_HCB_MiningLaser_C_CalculateTurretRotation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_CalculateTurretRotation, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000038, "Member 'AB_HCB_MiningLaser_C_CalculateTurretRotation::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_CalculateTurretRotation, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'AB_HCB_MiningLaser_C_CalculateTurretRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_CalculateTurretRotation, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'AB_HCB_MiningLaser_C_CalculateTurretRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_CalculateTurretRotation, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'AB_HCB_MiningLaser_C_CalculateTurretRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_CalculateTurretRotation, K2Node_VariableSet_AimPitch_ImplicitCast) == 0x000060, "Member 'AB_HCB_MiningLaser_C_CalculateTurretRotation::K2Node_VariableSet_AimPitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_CalculateTurretRotation, K2Node_VariableSet_TurretRotation_ImplicitCast) == 0x000068, "Member 'AB_HCB_MiningLaser_C_CalculateTurretRotation::K2Node_VariableSet_TurretRotation_ImplicitCast' has a wrong offset!");

// Function AB_HCB_MiningLaser.AB_HCB_MiningLaser_C.ExecuteUbergraph_AB_HCB_MiningLaser
// 0x0030 (0x0030 - 0x0000)
struct AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_Delta_Time_X_ImplicitCast;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser) == 0x000008, "Wrong alignment on AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser");
static_assert(sizeof(AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser) == 0x000030, "Wrong size on AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser");
static_assert(offsetof(AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser, EntryPoint) == 0x000000, "Member 'AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser::EntryPoint' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser, K2Node_Event_DeltaTimeX) == 0x000008, "Member 'AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser, CallFunc_FInterpTo_ReturnValue) == 0x000010, "Member 'AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser, CallFunc_FInterpTo_ReturnValue_1) == 0x000018, "Member 'AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser, K2Node_VariableSet_Delta_Time_X_ImplicitCast) == 0x000028, "Member 'AB_HCB_MiningLaser_C_ExecuteUbergraph_AB_HCB_MiningLaser::K2Node_VariableSet_Delta_Time_X_ImplicitCast' has a wrong offset!");

// Function AB_HCB_MiningLaser.AB_HCB_MiningLaser_C.InitReferences
// 0x0078 (0x0078 - 0x0000)
struct AB_HCB_MiningLaser_C_InitReferences final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuneCharacter*                         CallFunc_GetSeatedCharacter_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_TankBase_C*                         K2Node_DynamicCast_AsBP_Tank_Base;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPosseseablePawnInterface> CallFunc_GetDuneVehicle_self_CastInput;        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADuneVehicle*                           CallFunc_GetDuneVehicle_ReturnValue;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TankBase_C*                         K2Node_DynamicCast_AsBP_Tank_Base_1;               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADuneVehicleTurret*                     K2Node_DynamicCast_AsDune_Vehicle_Turret;          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_HCB_MiningLaser_C_InitReferences) == 0x000008, "Wrong alignment on AB_HCB_MiningLaser_C_InitReferences");
static_assert(sizeof(AB_HCB_MiningLaser_C_InitReferences) == 0x000078, "Wrong size on AB_HCB_MiningLaser_C_InitReferences");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'AB_HCB_MiningLaser_C_InitReferences::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'AB_HCB_MiningLaser_C_InitReferences::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, CallFunc_GetSeatedCharacter_ReturnValue) == 0x000008, "Member 'AB_HCB_MiningLaser_C_InitReferences::CallFunc_GetSeatedCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, CallFunc_IsValid_ReturnValue_2) == 0x000010, "Member 'AB_HCB_MiningLaser_C_InitReferences::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000018, "Member 'AB_HCB_MiningLaser_C_InitReferences::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, K2Node_DynamicCast_AsBP_Tank_Base) == 0x000020, "Member 'AB_HCB_MiningLaser_C_InitReferences::K2Node_DynamicCast_AsBP_Tank_Base' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'AB_HCB_MiningLaser_C_InitReferences::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, CallFunc_IsValid_ReturnValue_3) == 0x000029, "Member 'AB_HCB_MiningLaser_C_InitReferences::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, CallFunc_GetDuneVehicle_self_CastInput) == 0x000030, "Member 'AB_HCB_MiningLaser_C_InitReferences::CallFunc_GetDuneVehicle_self_CastInput' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, CallFunc_GetDuneVehicle_ReturnValue) == 0x000040, "Member 'AB_HCB_MiningLaser_C_InitReferences::CallFunc_GetDuneVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, CallFunc_IsValid_ReturnValue_4) == 0x000048, "Member 'AB_HCB_MiningLaser_C_InitReferences::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, K2Node_DynamicCast_AsBP_Tank_Base_1) == 0x000050, "Member 'AB_HCB_MiningLaser_C_InitReferences::K2Node_DynamicCast_AsBP_Tank_Base_1' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'AB_HCB_MiningLaser_C_InitReferences::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x000060, "Member 'AB_HCB_MiningLaser_C_InitReferences::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, K2Node_DynamicCast_AsDune_Vehicle_Turret) == 0x000068, "Member 'AB_HCB_MiningLaser_C_InitReferences::K2Node_DynamicCast_AsDune_Vehicle_Turret' has a wrong offset!");
static_assert(offsetof(AB_HCB_MiningLaser_C_InitReferences, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'AB_HCB_MiningLaser_C_InitReferences::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function AB_HCB_MiningLaser.AB_HCB_MiningLaser_C.SetTurretRotation
// 0x0001 (0x0001 - 0x0000)
struct AB_HCB_MiningLaser_C_SetTurretRotation final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_HCB_MiningLaser_C_SetTurretRotation) == 0x000001, "Wrong alignment on AB_HCB_MiningLaser_C_SetTurretRotation");
static_assert(sizeof(AB_HCB_MiningLaser_C_SetTurretRotation) == 0x000001, "Wrong size on AB_HCB_MiningLaser_C_SetTurretRotation");
static_assert(offsetof(AB_HCB_MiningLaser_C_SetTurretRotation, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'AB_HCB_MiningLaser_C_SetTurretRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

