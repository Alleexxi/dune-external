#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_GadgetsAndAbilitiesHUD

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_GadgetsAndAbilitiesHUD.W_GadgetsAndAbilitiesHUD_C
// 0x0160 (0x0630 - 0x04D0)
class UW_GadgetsAndAbilitiesHUD_C final : public UGadgetsAndAbilitiesHUDWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       BuffActivated;                                     // 0x04D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SpiceSaturated;                                    // 0x04E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       MiddleSlotRaiseAnimation;                          // 0x04E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UDuneImage*                             DiamondBG;                                         // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       MiddleHintText;                                    // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               MiddleSlotOverlay;                                 // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                MiddleSlotTextBorder;                              // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_ThirdAbilityInputAction_C*           PrecienceInputHint;                                // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             Spicebar;                                          // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               SpiceBarOverlay;                                   // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           SpiceBarVBox;                                      // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	ESpiceState                                   CachedSpiceState;                                  // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_531[0x7];                                      // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_HUDGadgetAbilitySlot_C*              Middle_Slot_Widget;                                // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_HUDGadgetAbilitySlot_C*              Right_Slot_Widget;                                 // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_HUDGadgetAbilitySlot_C*              Left_Slot_Widget;                                  // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SpiceStateMax;                                     // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpiceStateMin;                                     // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PosChevronOpacity;                                 // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColorAtlas*                 CurveAtlas;                                        // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PrescienceBarMaterial;                             // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<ESpiceState, class UCurveLinearColor*>   SpiceSaturationBarFillCurveMap;                    // 0x0570(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<ESpiceState, struct FLinearColor>        SpiceSaturationBarOutlineMap;                      // 0x05C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAbilitySystemComponent*                Ability_System_Component;                          // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ADunePlayerCharacter*                   Cached_Player_Character;                           // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CachedRemainingSpice;                              // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateSpiceStateOverlay(class ADuneCharacter* Character);
	void UpdateSpiceStateMinMax();
	void UpdateInputHintVisibility(int32 Selection, bool Index_0);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Setup_Spice_State_Visuals(ESpiceState Current_State, ESpiceState Previous_State);
	void Set_Spice_Bar_Total(float Value);
	void Set_Spice_Bar_Progress(float Value);
	void Set_Reactivation_State(class UInputActionWidget* Input_Action_Widget, ELabelPosition Label_Position, const class FText& Reactivation_Text);
	void OnTotalRemainingSpiceAmountChanged(const float RemainingSpice);
	void OnSpiceStateChanged(ESpiceState PrevState, ESpiceState NewState);
	void OnSpiceChanged(const float CurrentSpice, const float MaxSpice);
	void OnSpiceAddictedReset();
	void OnSpiceAddictedChanged(const bool bIsSpiceAddicted);
	void OnSlotFilledChanged(class UGadgetOrAbilitySlotHUDWidget* SlotWidget, const int32 SlotIndex, const bool bIsFilled);
	void OnReactivationStateChanged_Middle(bool Reactivatable, const class FText& Reactivation_Text);
	void ForceUpdateOnSpiceChanged();
	void ExecuteUbergraph_W_GadgetsAndAbilitiesHUD(int32 EntryPoint);
	void Destruct();
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_GadgetsAndAbilitiesHUD_C">();
	}
	static class UW_GadgetsAndAbilitiesHUD_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_GadgetsAndAbilitiesHUD_C>();
	}
};
static_assert(alignof(UW_GadgetsAndAbilitiesHUD_C) == 0x000010, "Wrong alignment on UW_GadgetsAndAbilitiesHUD_C");
static_assert(sizeof(UW_GadgetsAndAbilitiesHUD_C) == 0x000630, "Wrong size on UW_GadgetsAndAbilitiesHUD_C");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, UberGraphFrame) == 0x0004D0, "Member 'UW_GadgetsAndAbilitiesHUD_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, BuffActivated) == 0x0004D8, "Member 'UW_GadgetsAndAbilitiesHUD_C::BuffActivated' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, SpiceSaturated) == 0x0004E0, "Member 'UW_GadgetsAndAbilitiesHUD_C::SpiceSaturated' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, MiddleSlotRaiseAnimation) == 0x0004E8, "Member 'UW_GadgetsAndAbilitiesHUD_C::MiddleSlotRaiseAnimation' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, DiamondBG) == 0x0004F0, "Member 'UW_GadgetsAndAbilitiesHUD_C::DiamondBG' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, MiddleHintText) == 0x0004F8, "Member 'UW_GadgetsAndAbilitiesHUD_C::MiddleHintText' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, MiddleSlotOverlay) == 0x000500, "Member 'UW_GadgetsAndAbilitiesHUD_C::MiddleSlotOverlay' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, MiddleSlotTextBorder) == 0x000508, "Member 'UW_GadgetsAndAbilitiesHUD_C::MiddleSlotTextBorder' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, PrecienceInputHint) == 0x000510, "Member 'UW_GadgetsAndAbilitiesHUD_C::PrecienceInputHint' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, Spicebar) == 0x000518, "Member 'UW_GadgetsAndAbilitiesHUD_C::Spicebar' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, SpiceBarOverlay) == 0x000520, "Member 'UW_GadgetsAndAbilitiesHUD_C::SpiceBarOverlay' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, SpiceBarVBox) == 0x000528, "Member 'UW_GadgetsAndAbilitiesHUD_C::SpiceBarVBox' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, CachedSpiceState) == 0x000530, "Member 'UW_GadgetsAndAbilitiesHUD_C::CachedSpiceState' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, Middle_Slot_Widget) == 0x000538, "Member 'UW_GadgetsAndAbilitiesHUD_C::Middle_Slot_Widget' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, Right_Slot_Widget) == 0x000540, "Member 'UW_GadgetsAndAbilitiesHUD_C::Right_Slot_Widget' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, Left_Slot_Widget) == 0x000548, "Member 'UW_GadgetsAndAbilitiesHUD_C::Left_Slot_Widget' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, SpiceStateMax) == 0x000550, "Member 'UW_GadgetsAndAbilitiesHUD_C::SpiceStateMax' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, SpiceStateMin) == 0x000558, "Member 'UW_GadgetsAndAbilitiesHUD_C::SpiceStateMin' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, PosChevronOpacity) == 0x00055C, "Member 'UW_GadgetsAndAbilitiesHUD_C::PosChevronOpacity' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, CurveAtlas) == 0x000560, "Member 'UW_GadgetsAndAbilitiesHUD_C::CurveAtlas' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, PrescienceBarMaterial) == 0x000568, "Member 'UW_GadgetsAndAbilitiesHUD_C::PrescienceBarMaterial' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, SpiceSaturationBarFillCurveMap) == 0x000570, "Member 'UW_GadgetsAndAbilitiesHUD_C::SpiceSaturationBarFillCurveMap' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, SpiceSaturationBarOutlineMap) == 0x0005C0, "Member 'UW_GadgetsAndAbilitiesHUD_C::SpiceSaturationBarOutlineMap' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, Ability_System_Component) == 0x000610, "Member 'UW_GadgetsAndAbilitiesHUD_C::Ability_System_Component' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, Cached_Player_Character) == 0x000618, "Member 'UW_GadgetsAndAbilitiesHUD_C::Cached_Player_Character' has a wrong offset!");
static_assert(offsetof(UW_GadgetsAndAbilitiesHUD_C, CachedRemainingSpice) == 0x000620, "Member 'UW_GadgetsAndAbilitiesHUD_C::CachedRemainingSpice' has a wrong offset!");

}

