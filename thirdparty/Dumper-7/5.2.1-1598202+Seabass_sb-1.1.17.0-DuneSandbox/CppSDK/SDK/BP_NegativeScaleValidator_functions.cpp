#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NegativeScaleValidator

#include "Basic.hpp"

#include "BP_NegativeScaleValidator_classes.hpp"
#include "BP_NegativeScaleValidator_parameters.hpp"


namespace SDK
{

// Function BP_NegativeScaleValidator.BP_NegativeScaleValidator_C.BP_GatherWorldData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_NegativeScaleValidator_C::BP_GatherWorldData(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NegativeScaleValidator_C", "BP_GatherWorldData");

	Params::BP_NegativeScaleValidator_C_BP_GatherWorldData Parms{};

	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NegativeScaleValidator.BP_NegativeScaleValidator_C.Does Vector Have Negative Values
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasNegativeValues                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NegativeScaleValidator_C::Does_Vector_Have_Negative_Values(const struct FVector& Vector, bool* HasNegativeValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NegativeScaleValidator_C", "Does Vector Have Negative Values");

	Params::BP_NegativeScaleValidator_C_Does_Vector_Have_Negative_Values Parms{};

	Parms.Vector = std::move(Vector);

	UObject::ProcessEvent(Func, &Parms);

	if (HasNegativeValues != nullptr)
		*HasNegativeValues = Parms.HasNegativeValues;
}


// Function BP_NegativeScaleValidator.BP_NegativeScaleValidator_C.ExecuteUbergraph_BP_NegativeScaleValidator
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NegativeScaleValidator_C::ExecuteUbergraph_BP_NegativeScaleValidator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NegativeScaleValidator_C", "ExecuteUbergraph_BP_NegativeScaleValidator");

	Params::BP_NegativeScaleValidator_C_ExecuteUbergraph_BP_NegativeScaleValidator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NegativeScaleValidator.BP_NegativeScaleValidator_C.GatherWorldData
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_NegativeScaleValidator_C::GatherWorldData(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NegativeScaleValidator_C", "GatherWorldData");

	Params::BP_NegativeScaleValidator_C_GatherWorldData Parms{};

	Parms.World = World;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NegativeScaleValidator.BP_NegativeScaleValidator_C.ValidateWorld
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSectionsPassedValidation                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_NegativeScaleValidator_C::ValidateWorld(bool bSectionsPassedValidation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NegativeScaleValidator_C", "ValidateWorld");

	Params::BP_NegativeScaleValidator_C_ValidateWorld Parms{};

	Parms.bSectionsPassedValidation = bSectionsPassedValidation;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

