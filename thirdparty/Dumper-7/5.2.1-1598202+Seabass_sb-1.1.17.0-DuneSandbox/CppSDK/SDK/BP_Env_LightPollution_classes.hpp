#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Env_LightPollution

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Env_MaterialBillboard_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Env_LightPollution.BP_Env_LightPollution_C
// 0x00D8 (0x0438 - 0x0360)
class ABP_Env_LightPollution_C final : public ABP_Env_MaterialBillboard_C
{
public:
	class UPointLightComponent*                   PointLight_Distance;                               // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    Lens_Flare_Selection;                              // 0x0368(0x0010)(Edit, BlueprintVisible, NoDestructor)
	double                                        Origin_to_Camera_Positioning;                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Billboard_Size_X;                                  // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Billboard_Size_Y;                                  // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Day_Strength_Multiplier;                           // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Strength_Multiplier;                         // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Closeup_Fadeout_Offset;                            // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Closeup_Fadeout_Length;                            // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Flare_Texture;                                     // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Intensity;                                   // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Size;                                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Desaturation;                                // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Rotation_Multiplier;                         // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Flare_Tint;                                        // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Boost_at_Distance___Screen_Center;           // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Boost_at_Distance___Screen_Edges;            // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Diffuse_Intensity;                           // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Flare_Diffuse_Radius;                              // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Flare_Diffuse_Tint___Opacity;                      // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDistancePointLight;                          // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               PointLight_DynMatInst;                             // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PointLightFadeLength;                              // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PointLightFadeOffset;                              // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MeshProximityFade___Distance;                      // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Env_LightPollution_C">();
	}
	static class ABP_Env_LightPollution_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Env_LightPollution_C>();
	}
};
static_assert(alignof(ABP_Env_LightPollution_C) == 0x000008, "Wrong alignment on ABP_Env_LightPollution_C");
static_assert(sizeof(ABP_Env_LightPollution_C) == 0x000438, "Wrong size on ABP_Env_LightPollution_C");
static_assert(offsetof(ABP_Env_LightPollution_C, PointLight_Distance) == 0x000360, "Member 'ABP_Env_LightPollution_C::PointLight_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Lens_Flare_Selection) == 0x000368, "Member 'ABP_Env_LightPollution_C::Lens_Flare_Selection' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Origin_to_Camera_Positioning) == 0x000378, "Member 'ABP_Env_LightPollution_C::Origin_to_Camera_Positioning' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Billboard_Size_X) == 0x000380, "Member 'ABP_Env_LightPollution_C::Billboard_Size_X' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Billboard_Size_Y) == 0x000388, "Member 'ABP_Env_LightPollution_C::Billboard_Size_Y' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Day_Strength_Multiplier) == 0x000390, "Member 'ABP_Env_LightPollution_C::Day_Strength_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Night_Strength_Multiplier) == 0x000398, "Member 'ABP_Env_LightPollution_C::Night_Strength_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Closeup_Fadeout_Offset) == 0x0003A0, "Member 'ABP_Env_LightPollution_C::Closeup_Fadeout_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Closeup_Fadeout_Length) == 0x0003A8, "Member 'ABP_Env_LightPollution_C::Closeup_Fadeout_Length' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Texture) == 0x0003B0, "Member 'ABP_Env_LightPollution_C::Flare_Texture' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Intensity) == 0x0003B8, "Member 'ABP_Env_LightPollution_C::Flare_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Size) == 0x0003C0, "Member 'ABP_Env_LightPollution_C::Flare_Size' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Desaturation) == 0x0003C8, "Member 'ABP_Env_LightPollution_C::Flare_Desaturation' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Rotation_Multiplier) == 0x0003D0, "Member 'ABP_Env_LightPollution_C::Flare_Rotation_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Tint) == 0x0003D8, "Member 'ABP_Env_LightPollution_C::Flare_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Boost_at_Distance___Screen_Center) == 0x0003E8, "Member 'ABP_Env_LightPollution_C::Flare_Boost_at_Distance___Screen_Center' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Boost_at_Distance___Screen_Edges) == 0x0003F0, "Member 'ABP_Env_LightPollution_C::Flare_Boost_at_Distance___Screen_Edges' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Diffuse_Intensity) == 0x0003F8, "Member 'ABP_Env_LightPollution_C::Flare_Diffuse_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Diffuse_Radius) == 0x000400, "Member 'ABP_Env_LightPollution_C::Flare_Diffuse_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, Flare_Diffuse_Tint___Opacity) == 0x000408, "Member 'ABP_Env_LightPollution_C::Flare_Diffuse_Tint___Opacity' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, EnableDistancePointLight) == 0x000418, "Member 'ABP_Env_LightPollution_C::EnableDistancePointLight' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, PointLight_DynMatInst) == 0x000420, "Member 'ABP_Env_LightPollution_C::PointLight_DynMatInst' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, PointLightFadeLength) == 0x000428, "Member 'ABP_Env_LightPollution_C::PointLightFadeLength' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, PointLightFadeOffset) == 0x00042C, "Member 'ABP_Env_LightPollution_C::PointLightFadeOffset' has a wrong offset!");
static_assert(offsetof(ABP_Env_LightPollution_C, MeshProximityFade___Distance) == 0x000430, "Member 'ABP_Env_LightPollution_C::MeshProximityFade___Distance' has a wrong offset!");

}

