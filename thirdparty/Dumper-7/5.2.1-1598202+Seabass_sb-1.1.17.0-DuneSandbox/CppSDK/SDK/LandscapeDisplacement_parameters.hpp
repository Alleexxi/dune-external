#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LandscapeDisplacement

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "LandscapeDisplacement_structs.hpp"


namespace SDK::Params
{

// Function LandscapeDisplacement.LandscapeDisplacementVolume.GetLayerTransform
// 0x0080 (0x0080 - 0x0000)
struct LandscapeDisplacementVolume_GetLayerTransform final
{
public:
	int32                                         layerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandscapeDisplacementVolume_GetLayerTransform) == 0x000010, "Wrong alignment on LandscapeDisplacementVolume_GetLayerTransform");
static_assert(sizeof(LandscapeDisplacementVolume_GetLayerTransform) == 0x000080, "Wrong size on LandscapeDisplacementVolume_GetLayerTransform");
static_assert(offsetof(LandscapeDisplacementVolume_GetLayerTransform, layerIndex) == 0x000000, "Member 'LandscapeDisplacementVolume_GetLayerTransform::layerIndex' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_GetLayerTransform, InTransform) == 0x000010, "Member 'LandscapeDisplacementVolume_GetLayerTransform::InTransform' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_GetLayerTransform, ReturnValue) == 0x000070, "Member 'LandscapeDisplacementVolume_GetLayerTransform::ReturnValue' has a wrong offset!");

// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetDisplacementAlpha
// 0x0004 (0x0004 - 0x0000)
struct LandscapeDisplacementVolume_SetDisplacementAlpha final
{
public:
	float                                         DisplacementAlpha;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandscapeDisplacementVolume_SetDisplacementAlpha) == 0x000004, "Wrong alignment on LandscapeDisplacementVolume_SetDisplacementAlpha");
static_assert(sizeof(LandscapeDisplacementVolume_SetDisplacementAlpha) == 0x000004, "Wrong size on LandscapeDisplacementVolume_SetDisplacementAlpha");
static_assert(offsetof(LandscapeDisplacementVolume_SetDisplacementAlpha, DisplacementAlpha) == 0x000000, "Member 'LandscapeDisplacementVolume_SetDisplacementAlpha::DisplacementAlpha' has a wrong offset!");

// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetDynamicDisplacementState
// 0x00B8 (0x00B8 - 0x0000)
struct LandscapeDisplacementVolume_SetDynamicDisplacementState final
{
public:
	int32                                         layerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDisplacementState                     State;                                             // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandscapeDisplacementVolume_SetDynamicDisplacementState) == 0x000008, "Wrong alignment on LandscapeDisplacementVolume_SetDynamicDisplacementState");
static_assert(sizeof(LandscapeDisplacementVolume_SetDynamicDisplacementState) == 0x0000B8, "Wrong size on LandscapeDisplacementVolume_SetDynamicDisplacementState");
static_assert(offsetof(LandscapeDisplacementVolume_SetDynamicDisplacementState, layerIndex) == 0x000000, "Member 'LandscapeDisplacementVolume_SetDynamicDisplacementState::layerIndex' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetDynamicDisplacementState, State) == 0x000008, "Member 'LandscapeDisplacementVolume_SetDynamicDisplacementState::State' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetDynamicDisplacementState, ReturnValue) == 0x0000B0, "Member 'LandscapeDisplacementVolume_SetDynamicDisplacementState::ReturnValue' has a wrong offset!");

// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetDynamicDisplacementStatePoints
// 0x00E8 (0x00E8 - 0x0000)
struct LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints final
{
public:
	int32                                         layerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDisplacementState                     State;                                             // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDisplacementPointData                 pointData;                                         // 0x00B0(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints) == 0x000008, "Wrong alignment on LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints");
static_assert(sizeof(LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints) == 0x0000E8, "Wrong size on LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints");
static_assert(offsetof(LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints, layerIndex) == 0x000000, "Member 'LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints::layerIndex' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints, State) == 0x000008, "Member 'LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints::State' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints, pointData) == 0x0000B0, "Member 'LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints::pointData' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints, ReturnValue) == 0x0000E0, "Member 'LandscapeDisplacementVolume_SetDynamicDisplacementStatePoints::ReturnValue' has a wrong offset!");

// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetFlipbookDisplacementState
// 0x00E0 (0x00E0 - 0x0000)
struct LandscapeDisplacementVolume_SetFlipbookDisplacementState final
{
public:
	int32                                         layerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDisplacementState                     State;                                             // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector4f                              FlipBookRenderState;                               // 0x00B0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpriteOffset;                                      // 0x00C0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0xF];                                       // 0x00D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandscapeDisplacementVolume_SetFlipbookDisplacementState) == 0x000010, "Wrong alignment on LandscapeDisplacementVolume_SetFlipbookDisplacementState");
static_assert(sizeof(LandscapeDisplacementVolume_SetFlipbookDisplacementState) == 0x0000E0, "Wrong size on LandscapeDisplacementVolume_SetFlipbookDisplacementState");
static_assert(offsetof(LandscapeDisplacementVolume_SetFlipbookDisplacementState, layerIndex) == 0x000000, "Member 'LandscapeDisplacementVolume_SetFlipbookDisplacementState::layerIndex' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetFlipbookDisplacementState, State) == 0x000008, "Member 'LandscapeDisplacementVolume_SetFlipbookDisplacementState::State' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetFlipbookDisplacementState, FlipBookRenderState) == 0x0000B0, "Member 'LandscapeDisplacementVolume_SetFlipbookDisplacementState::FlipBookRenderState' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetFlipbookDisplacementState, SpriteOffset) == 0x0000C0, "Member 'LandscapeDisplacementVolume_SetFlipbookDisplacementState::SpriteOffset' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetFlipbookDisplacementState, ReturnValue) == 0x0000D0, "Member 'LandscapeDisplacementVolume_SetFlipbookDisplacementState::ReturnValue' has a wrong offset!");

// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetLayerDisplacementAlpha
// 0x000C (0x000C - 0x0000)
struct LandscapeDisplacementVolume_SetLayerDisplacementAlpha final
{
public:
	int32                                         layerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAlpha;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandscapeDisplacementVolume_SetLayerDisplacementAlpha) == 0x000004, "Wrong alignment on LandscapeDisplacementVolume_SetLayerDisplacementAlpha");
static_assert(sizeof(LandscapeDisplacementVolume_SetLayerDisplacementAlpha) == 0x00000C, "Wrong size on LandscapeDisplacementVolume_SetLayerDisplacementAlpha");
static_assert(offsetof(LandscapeDisplacementVolume_SetLayerDisplacementAlpha, layerIndex) == 0x000000, "Member 'LandscapeDisplacementVolume_SetLayerDisplacementAlpha::layerIndex' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetLayerDisplacementAlpha, InAlpha) == 0x000004, "Member 'LandscapeDisplacementVolume_SetLayerDisplacementAlpha::InAlpha' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetLayerDisplacementAlpha, ReturnValue) == 0x000008, "Member 'LandscapeDisplacementVolume_SetLayerDisplacementAlpha::ReturnValue' has a wrong offset!");

// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetLayerDisplacementState
// 0x00B8 (0x00B8 - 0x0000)
struct LandscapeDisplacementVolume_SetLayerDisplacementState final
{
public:
	int32                                         layerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDisplacementState                     State;                                             // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandscapeDisplacementVolume_SetLayerDisplacementState) == 0x000008, "Wrong alignment on LandscapeDisplacementVolume_SetLayerDisplacementState");
static_assert(sizeof(LandscapeDisplacementVolume_SetLayerDisplacementState) == 0x0000B8, "Wrong size on LandscapeDisplacementVolume_SetLayerDisplacementState");
static_assert(offsetof(LandscapeDisplacementVolume_SetLayerDisplacementState, layerIndex) == 0x000000, "Member 'LandscapeDisplacementVolume_SetLayerDisplacementState::layerIndex' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetLayerDisplacementState, State) == 0x000008, "Member 'LandscapeDisplacementVolume_SetLayerDisplacementState::State' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetLayerDisplacementState, ReturnValue) == 0x0000B0, "Member 'LandscapeDisplacementVolume_SetLayerDisplacementState::ReturnValue' has a wrong offset!");

// Function LandscapeDisplacement.LandscapeDisplacementVolume.SetLayerTransform
// 0x0080 (0x0080 - 0x0000)
struct LandscapeDisplacementVolume_SetLayerTransform final
{
public:
	int32                                         layerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandscapeDisplacementVolume_SetLayerTransform) == 0x000010, "Wrong alignment on LandscapeDisplacementVolume_SetLayerTransform");
static_assert(sizeof(LandscapeDisplacementVolume_SetLayerTransform) == 0x000080, "Wrong size on LandscapeDisplacementVolume_SetLayerTransform");
static_assert(offsetof(LandscapeDisplacementVolume_SetLayerTransform, layerIndex) == 0x000000, "Member 'LandscapeDisplacementVolume_SetLayerTransform::layerIndex' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetLayerTransform, InTransform) == 0x000010, "Member 'LandscapeDisplacementVolume_SetLayerTransform::InTransform' has a wrong offset!");
static_assert(offsetof(LandscapeDisplacementVolume_SetLayerTransform, ReturnValue) == 0x000070, "Member 'LandscapeDisplacementVolume_SetLayerTransform::ReturnValue' has a wrong offset!");

// Function LandscapeDisplacement.LandscapeDisplacementVolume.GetDisplacementAlpha
// 0x0004 (0x0004 - 0x0000)
struct LandscapeDisplacementVolume_GetDisplacementAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandscapeDisplacementVolume_GetDisplacementAlpha) == 0x000004, "Wrong alignment on LandscapeDisplacementVolume_GetDisplacementAlpha");
static_assert(sizeof(LandscapeDisplacementVolume_GetDisplacementAlpha) == 0x000004, "Wrong size on LandscapeDisplacementVolume_GetDisplacementAlpha");
static_assert(offsetof(LandscapeDisplacementVolume_GetDisplacementAlpha, ReturnValue) == 0x000000, "Member 'LandscapeDisplacementVolume_GetDisplacementAlpha::ReturnValue' has a wrong offset!");

// Function LandscapeDisplacement.LandscapeDisplacementVolume.IsTicking
// 0x0001 (0x0001 - 0x0000)
struct LandscapeDisplacementVolume_IsTicking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandscapeDisplacementVolume_IsTicking) == 0x000001, "Wrong alignment on LandscapeDisplacementVolume_IsTicking");
static_assert(sizeof(LandscapeDisplacementVolume_IsTicking) == 0x000001, "Wrong size on LandscapeDisplacementVolume_IsTicking");
static_assert(offsetof(LandscapeDisplacementVolume_IsTicking, ReturnValue) == 0x000000, "Member 'LandscapeDisplacementVolume_IsTicking::ReturnValue' has a wrong offset!");

}

