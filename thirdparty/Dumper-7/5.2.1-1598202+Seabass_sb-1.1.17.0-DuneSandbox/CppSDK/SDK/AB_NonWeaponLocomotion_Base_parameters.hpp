#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_NonWeaponLocomotion_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"


namespace SDK::Params
{

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_AnimGraph) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_AnimGraph");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_AnimGraph) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_AnimGraph");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.CombatLocomotionAirPoses
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_CombatLocomotionAirPoses final
{
public:
	struct FPoseLink                              CombatLocomotionAirPoses_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionAirPoses) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_CombatLocomotionAirPoses");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionAirPoses) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_CombatLocomotionAirPoses");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionAirPoses, CombatLocomotionAirPoses_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_CombatLocomotionAirPoses::CombatLocomotionAirPoses_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.CombatLocomotionCrouchPoses
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_CombatLocomotionCrouchPoses final
{
public:
	struct FPoseLink                              CombatLocomotionCrouchPoses_0;                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionCrouchPoses) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_CombatLocomotionCrouchPoses");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionCrouchPoses) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_CombatLocomotionCrouchPoses");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionCrouchPoses, CombatLocomotionCrouchPoses_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_CombatLocomotionCrouchPoses::CombatLocomotionCrouchPoses_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.CombatLocomotionStandPoses
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_CombatLocomotionStandPoses final
{
public:
	struct FPoseLink                              CombatLocomotionStandPoses_0;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionStandPoses) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_CombatLocomotionStandPoses");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionStandPoses) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_CombatLocomotionStandPoses");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionStandPoses, CombatLocomotionStandPoses_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_CombatLocomotionStandPoses::CombatLocomotionStandPoses_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.CombatLocomotionSuspensorPoses
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_CombatLocomotionSuspensorPoses final
{
public:
	struct FPoseLink                              CombatLocomotionSuspensorPoses_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionSuspensorPoses) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_CombatLocomotionSuspensorPoses");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionSuspensorPoses) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_CombatLocomotionSuspensorPoses");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_CombatLocomotionSuspensorPoses, CombatLocomotionSuspensorPoses_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_CombatLocomotionSuspensorPoses::CombatLocomotionSuspensorPoses_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.CrouchingIdle
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_CrouchingIdle final
{
public:
	struct FPoseLink                              CrouchingIdle_0;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_CrouchingIdle) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_CrouchingIdle");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_CrouchingIdle) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_CrouchingIdle");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_CrouchingIdle, CrouchingIdle_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_CrouchingIdle::CrouchingIdle_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.CrouchingMove
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_CrouchingMove final
{
public:
	struct FPoseLink                              CrouchingMove_0;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_CrouchingMove) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_CrouchingMove");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_CrouchingMove) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_CrouchingMove");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_CrouchingMove, CrouchingMove_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_CrouchingMove::CrouchingMove_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.CrouchingStartMoveOmniDirectional
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_CrouchingStartMoveOmniDirectional final
{
public:
	struct FPoseLink                              CrouchingStartMoveOmniDirectional_0;               // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_CrouchingStartMoveOmniDirectional) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_CrouchingStartMoveOmniDirectional");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_CrouchingStartMoveOmniDirectional) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_CrouchingStartMoveOmniDirectional");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_CrouchingStartMoveOmniDirectional, CrouchingStartMoveOmniDirectional_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_CrouchingStartMoveOmniDirectional::CrouchingStartMoveOmniDirectional_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.CrouchingStopNoWeapon
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_CrouchingStopNoWeapon final
{
public:
	struct FPoseLink                              CrouchingStopNoWeapon_0;                           // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_CrouchingStopNoWeapon) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_CrouchingStopNoWeapon");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_CrouchingStopNoWeapon) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_CrouchingStopNoWeapon");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_CrouchingStopNoWeapon, CrouchingStopNoWeapon_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_CrouchingStopNoWeapon::CrouchingStopNoWeapon_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.CrouchingStopWeapon
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_CrouchingStopWeapon final
{
public:
	struct FPoseLink                              CrouchingStopWeapon_0;                             // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_CrouchingStopWeapon) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_CrouchingStopWeapon");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_CrouchingStopWeapon) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_CrouchingStopWeapon");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_CrouchingStopWeapon, CrouchingStopWeapon_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_CrouchingStopWeapon::CrouchingStopWeapon_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.CrouchToStanding
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_CrouchToStanding final
{
public:
	struct FPoseLink                              CrouchToStanding_0;                                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_CrouchToStanding) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_CrouchToStanding");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_CrouchToStanding) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_CrouchToStanding");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_CrouchToStanding, CrouchToStanding_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_CrouchToStanding::CrouchToStanding_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.ExecuteUbergraph_AB_NonWeaponLocomotion_Base
// 0x0048 (0x0048 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWalkRunAlpha_ReturnValue;              // 0x0014(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWalkRunAlpha_ReturnValue_1;            // 0x001C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast_1;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base) == 0x000048, "Wrong size on AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, EntryPoint) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x000004, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000008, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x00000C, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000010, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_GetWalkRunAlpha_ReturnValue) == 0x000014, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_GetWalkRunAlpha_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000018, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_GetWalkRunAlpha_ReturnValue_1) == 0x00001C, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_GetWalkRunAlpha_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000020, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_BooleanAND_ReturnValue_1) == 0x000021, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_Less_DoubleDouble_A_ImplicitCast_1) == 0x000030, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_Less_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000038, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000040, "Member 'AB_NonWeaponLocomotion_Base_C_ExecuteUbergraph_AB_NonWeaponLocomotion_Base::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.LayerJumpApex
// 0x0020 (0x0020 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_LayerJumpApex final
{
public:
	struct FPoseLink                              JumpApex_GroundLocomotion;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LayerJumpApex_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_LayerJumpApex) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_LayerJumpApex");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_LayerJumpApex) == 0x000020, "Wrong size on AB_NonWeaponLocomotion_Base_C_LayerJumpApex");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_LayerJumpApex, JumpApex_GroundLocomotion) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_LayerJumpApex::JumpApex_GroundLocomotion' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_LayerJumpApex, LayerJumpApex_0) == 0x000010, "Member 'AB_NonWeaponLocomotion_Base_C_LayerJumpApex::LayerJumpApex_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.LayerJumpIn
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_LayerJumpIn final
{
public:
	struct FPoseLink                              LayerJumpIn_0;                                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_LayerJumpIn) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_LayerJumpIn");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_LayerJumpIn) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_LayerJumpIn");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_LayerJumpIn, LayerJumpIn_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_LayerJumpIn::LayerJumpIn_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.LayerJumpOut
// 0x0020 (0x0020 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_LayerJumpOut final
{
public:
	struct FPoseLink                              JumpOut_GroundLocomotion;                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LayerJumpOut_0;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_LayerJumpOut) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_LayerJumpOut");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_LayerJumpOut) == 0x000020, "Wrong size on AB_NonWeaponLocomotion_Base_C_LayerJumpOut");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_LayerJumpOut, JumpOut_GroundLocomotion) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_LayerJumpOut::JumpOut_GroundLocomotion' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_LayerJumpOut, LayerJumpOut_0) == 0x000010, "Member 'AB_NonWeaponLocomotion_Base_C_LayerJumpOut::LayerJumpOut_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.OnLocomotionVariationStarted
// 0x0020 (0x0020 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_OnLocomotionVariationStarted final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_OnLocomotionVariationStarted) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_OnLocomotionVariationStarted");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_OnLocomotionVariationStarted) == 0x000020, "Wrong size on AB_NonWeaponLocomotion_Base_C_OnLocomotionVariationStarted");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_OnLocomotionVariationStarted, Context) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_OnLocomotionVariationStarted::Context' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_OnLocomotionVariationStarted, Node) == 0x000010, "Member 'AB_NonWeaponLocomotion_Base_C_OnLocomotionVariationStarted::Node' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.StandingIdle
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_StandingIdle final
{
public:
	struct FPoseLink                              StandingIdle_0;                                    // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_StandingIdle) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_StandingIdle");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_StandingIdle) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_StandingIdle");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_StandingIdle, StandingIdle_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_StandingIdle::StandingIdle_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.StandingMove
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_StandingMove final
{
public:
	struct FPoseLink                              StandingMove_0;                                    // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_StandingMove) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_StandingMove");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_StandingMove) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_StandingMove");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_StandingMove, StandingMove_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_StandingMove::StandingMove_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.StandingStartMoveDirectional
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_StandingStartMoveDirectional final
{
public:
	struct FPoseLink                              StandingStartMoveDirectional_0;                    // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_StandingStartMoveDirectional) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_StandingStartMoveDirectional");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_StandingStartMoveDirectional) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_StandingStartMoveDirectional");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_StandingStartMoveDirectional, StandingStartMoveDirectional_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_StandingStartMoveDirectional::StandingStartMoveDirectional_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.StandingStartMoveOmni
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_StandingStartMoveOmni final
{
public:
	struct FPoseLink                              StandingStartMoveOmni_0;                           // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_StandingStartMoveOmni) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_StandingStartMoveOmni");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_StandingStartMoveOmni) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_StandingStartMoveOmni");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_StandingStartMoveOmni, StandingStartMoveOmni_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_StandingStartMoveOmni::StandingStartMoveOmni_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.StandingStopNoWeapon
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_StandingStopNoWeapon final
{
public:
	struct FPoseLink                              StandingStopNoWeapon_0;                            // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_StandingStopNoWeapon) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_StandingStopNoWeapon");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_StandingStopNoWeapon) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_StandingStopNoWeapon");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_StandingStopNoWeapon, StandingStopNoWeapon_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_StandingStopNoWeapon::StandingStopNoWeapon_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.StandingStopWeapon
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_StandingStopWeapon final
{
public:
	struct FPoseLink                              StandingStopWeapon_0;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_StandingStopWeapon) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_StandingStopWeapon");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_StandingStopWeapon) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_StandingStopWeapon");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_StandingStopWeapon, StandingStopWeapon_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_StandingStopWeapon::StandingStopWeapon_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.StandingToCrouch
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_StandingToCrouch final
{
public:
	struct FPoseLink                              StandingToCrouch_0;                                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_StandingToCrouch) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_StandingToCrouch");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_StandingToCrouch) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_StandingToCrouch");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_StandingToCrouch, StandingToCrouch_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_StandingToCrouch::StandingToCrouch_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.Stunned
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_Stunned final
{
public:
	struct FPoseLink                              Stunned_0;                                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_Stunned) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_Stunned");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_Stunned) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_Stunned");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_Stunned, Stunned_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_Stunned::Stunned_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.StunnedOut
// 0x0010 (0x0010 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_StunnedOut final
{
public:
	struct FPoseLink                              StunnedOut_0;                                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_StunnedOut) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_StunnedOut");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_StunnedOut) == 0x000010, "Wrong size on AB_NonWeaponLocomotion_Base_C_StunnedOut");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_StunnedOut, StunnedOut_0) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_StunnedOut::StunnedOut_0' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.GetAdditiveStateAlpha
// 0x0018 (0x0018 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDuneLocomotionAnimInstance*      CallFunc_GetLocomotionAnimInstance_ReturnValue;    // 0x0008(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha) == 0x000018, "Wrong size on AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha, ReturnValue) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha::ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha, CallFunc_GetLocomotionAnimInstance_ReturnValue) == 0x000008, "Member 'AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha::CallFunc_GetLocomotionAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000010, "Member 'AB_NonWeaponLocomotion_Base_C_GetAdditiveStateAlpha::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.GetForwardSlope
// 0x0018 (0x0018 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_GetForwardSlope final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDuneLocomotionAnimInstance*      CallFunc_GetLocomotionAnimInstance_ReturnValue;    // 0x0008(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_GetForwardSlope) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_GetForwardSlope");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_GetForwardSlope) == 0x000018, "Wrong size on AB_NonWeaponLocomotion_Base_C_GetForwardSlope");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetForwardSlope, ReturnValue) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_GetForwardSlope::ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetForwardSlope, CallFunc_GetLocomotionAnimInstance_ReturnValue) == 0x000008, "Member 'AB_NonWeaponLocomotion_Base_C_GetForwardSlope::CallFunc_GetLocomotionAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetForwardSlope, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000010, "Member 'AB_NonWeaponLocomotion_Base_C_GetForwardSlope::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.GetReadyAimStateUpperbodyAlpha
// 0x0028 (0x0028 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCombatAnimationState_ReturnValue;      // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Value_ImplicitCast;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha) == 0x000028, "Wrong size on AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha, ReturnValue) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha::ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha, CallFunc_GetCombatAnimationState_ReturnValue) == 0x000008, "Member 'AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha::CallFunc_GetCombatAnimationState_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha, CallFunc_FClamp_Value_ImplicitCast) == 0x000020, "Member 'AB_NonWeaponLocomotion_Base_C_GetReadyAimStateUpperbodyAlpha::CallFunc_FClamp_Value_ImplicitCast' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.GetRightSlope
// 0x0018 (0x0018 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_GetRightSlope final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDuneLocomotionAnimInstance*      CallFunc_GetLocomotionAnimInstance_ReturnValue;    // 0x0008(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_GetRightSlope) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_GetRightSlope");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_GetRightSlope) == 0x000018, "Wrong size on AB_NonWeaponLocomotion_Base_C_GetRightSlope");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetRightSlope, ReturnValue) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_GetRightSlope::ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetRightSlope, CallFunc_GetLocomotionAnimInstance_ReturnValue) == 0x000008, "Member 'AB_NonWeaponLocomotion_Base_C_GetRightSlope::CallFunc_GetLocomotionAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetRightSlope, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000010, "Member 'AB_NonWeaponLocomotion_Base_C_GetRightSlope::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.GetRunBreaker
// 0x0068 (0x0068 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_GetRunBreaker final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FAnimSequenceHolder                    CallFunc_Array_Get_Item;                           // 0x0008(0x0058)()
	class UAnimSequence*                          CallFunc_BreakAnimSequenceHolder_m_Holder;         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_GetRunBreaker) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_GetRunBreaker");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_GetRunBreaker) == 0x000068, "Wrong size on AB_NonWeaponLocomotion_Base_C_GetRunBreaker");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetRunBreaker, ReturnValue) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_GetRunBreaker::ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetRunBreaker, CallFunc_Array_Get_Item) == 0x000008, "Member 'AB_NonWeaponLocomotion_Base_C_GetRunBreaker::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetRunBreaker, CallFunc_BreakAnimSequenceHolder_m_Holder) == 0x000060, "Member 'AB_NonWeaponLocomotion_Base_C_GetRunBreaker::CallFunc_BreakAnimSequenceHolder_m_Holder' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.GetTurnStartYaw
// 0x0018 (0x0018 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDuneLocomotionAnimInstance*      CallFunc_GetLocomotionAnimInstance_ReturnValue;    // 0x0008(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw) == 0x000018, "Wrong size on AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw, ReturnValue) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw::ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw, CallFunc_GetLocomotionAnimInstance_ReturnValue) == 0x000008, "Member 'AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw::CallFunc_GetLocomotionAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000010, "Member 'AB_NonWeaponLocomotion_Base_C_GetTurnStartYaw::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");

// Function AB_NonWeaponLocomotion_Base.AB_NonWeaponLocomotion_Base_C.GetWalkBreaker
// 0x0078 (0x0078 - 0x0000)
struct AB_NonWeaponLocomotion_Base_C_GetWalkBreaker final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSequenceHolder                    CallFunc_Array_Get_Item;                           // 0x0018(0x0058)()
	class UAnimSequence*                          CallFunc_BreakAnimSequenceHolder_m_Holder;         // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_NonWeaponLocomotion_Base_C_GetWalkBreaker) == 0x000008, "Wrong alignment on AB_NonWeaponLocomotion_Base_C_GetWalkBreaker");
static_assert(sizeof(AB_NonWeaponLocomotion_Base_C_GetWalkBreaker) == 0x000078, "Wrong size on AB_NonWeaponLocomotion_Base_C_GetWalkBreaker");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetWalkBreaker, ReturnValue) == 0x000000, "Member 'AB_NonWeaponLocomotion_Base_C_GetWalkBreaker::ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetWalkBreaker, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'AB_NonWeaponLocomotion_Base_C_GetWalkBreaker::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetWalkBreaker, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'AB_NonWeaponLocomotion_Base_C_GetWalkBreaker::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetWalkBreaker, CallFunc_Clamp_ReturnValue) == 0x000010, "Member 'AB_NonWeaponLocomotion_Base_C_GetWalkBreaker::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetWalkBreaker, CallFunc_Array_Get_Item) == 0x000018, "Member 'AB_NonWeaponLocomotion_Base_C_GetWalkBreaker::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AB_NonWeaponLocomotion_Base_C_GetWalkBreaker, CallFunc_BreakAnimSequenceHolder_m_Holder) == 0x000070, "Member 'AB_NonWeaponLocomotion_Base_C_GetWalkBreaker::CallFunc_BreakAnimSequenceHolder_m_Holder' has a wrong offset!");

}

