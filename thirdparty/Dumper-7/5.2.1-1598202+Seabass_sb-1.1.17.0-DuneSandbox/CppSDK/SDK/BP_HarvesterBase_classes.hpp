#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HarvesterBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HarvesterBase.BP_HarvesterBase_C
// 0x0060 (0x2260 - 0x2200)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_HarvesterBase_C : public ADuneHarvesterVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2200(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_VehicleLightComponent_C*            BP_VehicleLightComponent;                          // 0x2208(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_FrontR;                                  // 0x2210(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_FrontL;                                  // 0x2218(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UScannableComponent*                    Scannable;                                         // 0x2220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDriverSeatComponent*                   DriverSeat;                                        // 0x2228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsHarvesting;                                     // 0x2230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2231[0x3];                                     // 0x2231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x2234(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2244[0x4];                                     // 0x2244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Shield_Broken;                                     // 0x2248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void SetVehicleFaction(EVehicleBrand Faction);
	void RefreshColor();
	void ReceiveBeginPlay();
	void OnRep_Color();
	void OnOperationModeChanged_Event(bool bIsHarvesting_0);
	void OnMeshLoaded(const EVehicleModuleType& VehicleModuleType);
	void ExecuteUbergraph_BP_HarvesterBase(int32 EntryPoint);
	void DestroyShieldBox(class UProceduralMeshComponent* ShieldBox);
	void BndEvt__BP_TankBase_m_DamageableActorComponent_K2Node_ComponentBoundEvent_0_HandleShieldEnergyBrokenSignature__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HarvesterBase_C">();
	}
	static class ABP_HarvesterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HarvesterBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_HarvesterBase_C) == 0x000010, "Wrong alignment on ABP_HarvesterBase_C");
static_assert(sizeof(ABP_HarvesterBase_C) == 0x002260, "Wrong size on ABP_HarvesterBase_C");
static_assert(offsetof(ABP_HarvesterBase_C, UberGraphFrame) == 0x002200, "Member 'ABP_HarvesterBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HarvesterBase_C, BP_VehicleLightComponent) == 0x002208, "Member 'ABP_HarvesterBase_C::BP_VehicleLightComponent' has a wrong offset!");
static_assert(offsetof(ABP_HarvesterBase_C, SpotLight_FrontR) == 0x002210, "Member 'ABP_HarvesterBase_C::SpotLight_FrontR' has a wrong offset!");
static_assert(offsetof(ABP_HarvesterBase_C, SpotLight_FrontL) == 0x002218, "Member 'ABP_HarvesterBase_C::SpotLight_FrontL' has a wrong offset!");
static_assert(offsetof(ABP_HarvesterBase_C, Scannable) == 0x002220, "Member 'ABP_HarvesterBase_C::Scannable' has a wrong offset!");
static_assert(offsetof(ABP_HarvesterBase_C, DriverSeat) == 0x002228, "Member 'ABP_HarvesterBase_C::DriverSeat' has a wrong offset!");
static_assert(offsetof(ABP_HarvesterBase_C, bIsHarvesting) == 0x002230, "Member 'ABP_HarvesterBase_C::bIsHarvesting' has a wrong offset!");
static_assert(offsetof(ABP_HarvesterBase_C, Color) == 0x002234, "Member 'ABP_HarvesterBase_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_HarvesterBase_C, Shield_Broken) == 0x002248, "Member 'ABP_HarvesterBase_C::Shield_Broken' has a wrong offset!");

}

