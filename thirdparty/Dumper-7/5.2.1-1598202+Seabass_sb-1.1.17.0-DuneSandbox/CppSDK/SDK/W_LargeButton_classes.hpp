#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_LargeButton

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DuneSandbox_structs.hpp"
#include "DuneSandbox_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_LargeButton.W_LargeButton_C
// 0x0100 (0x0610 - 0x0510)
class UW_LargeButton_C final : public UButtonWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0510(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Completed;                                         // 0x0518(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Pressed;                                           // 0x0520(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hovered;                                           // 0x0528(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UDuneImage*                             BottomRighTriangle;                                // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             Button;                                            // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             Diamond;                                           // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             DiamondIcon;                                       // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDuneImage*                             Glow;                                              // 0x0550(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsHoldButton;                                      // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_559[0x7];                                      // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Normal_Button_Material;                            // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Locked_Button_Material;                            // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Disabled_Button_Material;                          // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Normal_Glow_color;                                 // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Locked_Glow_Color;                                 // 0x0588(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentProgres;                                    // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Normal_Diamond_Material;                           // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Locked_Diamond_Material;                           // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Disabled_Diamond_Material;                         // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cached_Text_Color;                                 // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimateText;                                       // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9[0x7];                                      // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Text_Color_Alpha;                                  // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTween*                                 Text_Color_tween;                                  // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Start_Color;                                       // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Target_Color;                                      // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Pressed_Text_Color;                                // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Update_Text_Color(double ALPHA);
	void Set_Is_Hold_Button(bool IsHoldButton_);
	void PreConstruct(bool IsDesignTime);
	void OnPressedStateChanged(class UButtonWidget* Widget, bool bNewState);
	void OnHoveredStateChanged(class UButtonWidget* Widget, bool bNewState);
	void OnButtonStateChanged(class UButtonWidget* Widget, EButtonWidgetState bNewButtonState);
	void Interpolate_Text_Color(const struct FLinearColor& Target_Color_0, float ALPHA);
	struct FLinearColor Get_Default_Text_Color();
	void ExecuteUbergraph_W_LargeButton(int32 EntryPoint);
	void Destruct();
	void CREATEDELEGATE_PROXYFUNCTION_0(float Progress);
	void Animate_Text_Color(const struct FLinearColor& Target_Color_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_LargeButton_C">();
	}
	static class UW_LargeButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_LargeButton_C>();
	}
};
static_assert(alignof(UW_LargeButton_C) == 0x000010, "Wrong alignment on UW_LargeButton_C");
static_assert(sizeof(UW_LargeButton_C) == 0x000610, "Wrong size on UW_LargeButton_C");
static_assert(offsetof(UW_LargeButton_C, UberGraphFrame) == 0x000510, "Member 'UW_LargeButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Completed) == 0x000518, "Member 'UW_LargeButton_C::Completed' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Pressed) == 0x000520, "Member 'UW_LargeButton_C::Pressed' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Hovered) == 0x000528, "Member 'UW_LargeButton_C::Hovered' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, BottomRighTriangle) == 0x000530, "Member 'UW_LargeButton_C::BottomRighTriangle' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Button) == 0x000538, "Member 'UW_LargeButton_C::Button' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Diamond) == 0x000540, "Member 'UW_LargeButton_C::Diamond' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, DiamondIcon) == 0x000548, "Member 'UW_LargeButton_C::DiamondIcon' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Glow) == 0x000550, "Member 'UW_LargeButton_C::Glow' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, IsHoldButton) == 0x000558, "Member 'UW_LargeButton_C::IsHoldButton' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Normal_Button_Material) == 0x000560, "Member 'UW_LargeButton_C::Normal_Button_Material' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Locked_Button_Material) == 0x000568, "Member 'UW_LargeButton_C::Locked_Button_Material' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Disabled_Button_Material) == 0x000570, "Member 'UW_LargeButton_C::Disabled_Button_Material' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Normal_Glow_color) == 0x000578, "Member 'UW_LargeButton_C::Normal_Glow_color' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Locked_Glow_Color) == 0x000588, "Member 'UW_LargeButton_C::Locked_Glow_Color' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, CurrentProgres) == 0x000598, "Member 'UW_LargeButton_C::CurrentProgres' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Normal_Diamond_Material) == 0x0005A0, "Member 'UW_LargeButton_C::Normal_Diamond_Material' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Locked_Diamond_Material) == 0x0005A8, "Member 'UW_LargeButton_C::Locked_Diamond_Material' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Disabled_Diamond_Material) == 0x0005B0, "Member 'UW_LargeButton_C::Disabled_Diamond_Material' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Cached_Text_Color) == 0x0005B8, "Member 'UW_LargeButton_C::Cached_Text_Color' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, AnimateText) == 0x0005C8, "Member 'UW_LargeButton_C::AnimateText' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Text_Color_Alpha) == 0x0005D0, "Member 'UW_LargeButton_C::Text_Color_Alpha' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Text_Color_tween) == 0x0005D8, "Member 'UW_LargeButton_C::Text_Color_tween' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Start_Color) == 0x0005E0, "Member 'UW_LargeButton_C::Start_Color' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Target_Color) == 0x0005F0, "Member 'UW_LargeButton_C::Target_Color' has a wrong offset!");
static_assert(offsetof(UW_LargeButton_C, Pressed_Text_Color) == 0x000600, "Member 'UW_LargeButton_C::Pressed_Text_Color' has a wrong offset!");

}

