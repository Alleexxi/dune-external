#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Sandbike_CHOAM

#include "Basic.hpp"

#include "BP_SandbikeBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Sandbike_CHOAM.BP_Sandbike_CHOAM_C
// 0x0040 (0x21B0 - 0x2170)
class ABP_Sandbike_CHOAM_C final : public ABP_SandbikeBase_C
{
public:
	class UCapsuleComponent*                      ImmediatePhysicsFrontCollision;                    // 0x2168(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      ImmediatePhysicsBodyCollision;                     // 0x2170(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   DeformationBuffer_Tracks_FL;                       // 0x2178(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   DeformationBuffer_TracksB;                         // 0x2180(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   DeformationBuffer_TracksFR;                        // 0x2188(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DeformationEffects;                                // 0x2190(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDuneVehicleWheelComponent*             BackWheel;                                         // 0x2198(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDuneVehicleWheelComponent*             FrontLeftWheel;                                    // 0x21A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDuneVehicleWheelComponent*             FrontRightWheel;                                   // 0x21A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	bool ShouldApplyDynamicRollDamping();
	bool ShouldApplyDynamicPitchDamping();

	void AreWheelsInTheAir(bool* FrontLeftWheel_0, bool* FrontRightWheel_0, bool* BackWheel_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Sandbike_CHOAM_C">();
	}
	static class ABP_Sandbike_CHOAM_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Sandbike_CHOAM_C>();
	}
};
static_assert(alignof(ABP_Sandbike_CHOAM_C) == 0x000010, "Wrong alignment on ABP_Sandbike_CHOAM_C");
static_assert(sizeof(ABP_Sandbike_CHOAM_C) == 0x0021B0, "Wrong size on ABP_Sandbike_CHOAM_C");
static_assert(offsetof(ABP_Sandbike_CHOAM_C, ImmediatePhysicsFrontCollision) == 0x002168, "Member 'ABP_Sandbike_CHOAM_C::ImmediatePhysicsFrontCollision' has a wrong offset!");
static_assert(offsetof(ABP_Sandbike_CHOAM_C, ImmediatePhysicsBodyCollision) == 0x002170, "Member 'ABP_Sandbike_CHOAM_C::ImmediatePhysicsBodyCollision' has a wrong offset!");
static_assert(offsetof(ABP_Sandbike_CHOAM_C, DeformationBuffer_Tracks_FL) == 0x002178, "Member 'ABP_Sandbike_CHOAM_C::DeformationBuffer_Tracks_FL' has a wrong offset!");
static_assert(offsetof(ABP_Sandbike_CHOAM_C, DeformationBuffer_TracksB) == 0x002180, "Member 'ABP_Sandbike_CHOAM_C::DeformationBuffer_TracksB' has a wrong offset!");
static_assert(offsetof(ABP_Sandbike_CHOAM_C, DeformationBuffer_TracksFR) == 0x002188, "Member 'ABP_Sandbike_CHOAM_C::DeformationBuffer_TracksFR' has a wrong offset!");
static_assert(offsetof(ABP_Sandbike_CHOAM_C, DeformationEffects) == 0x002190, "Member 'ABP_Sandbike_CHOAM_C::DeformationEffects' has a wrong offset!");
static_assert(offsetof(ABP_Sandbike_CHOAM_C, BackWheel) == 0x002198, "Member 'ABP_Sandbike_CHOAM_C::BackWheel' has a wrong offset!");
static_assert(offsetof(ABP_Sandbike_CHOAM_C, FrontLeftWheel) == 0x0021A0, "Member 'ABP_Sandbike_CHOAM_C::FrontLeftWheel' has a wrong offset!");
static_assert(offsetof(ABP_Sandbike_CHOAM_C, FrontRightWheel) == 0x0021A8, "Member 'ABP_Sandbike_CHOAM_C::FrontRightWheel' has a wrong offset!");

}

