#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_Locomotion_Climbing

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AB_Locomotion_Climbing.AB_Locomotion_Climbing_C.AnimGraph
// 0x0020 (0x0020 - 0x0000)
struct AB_Locomotion_Climbing_C_AnimGraph final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimGraph_0;                                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_Locomotion_Climbing_C_AnimGraph) == 0x000008, "Wrong alignment on AB_Locomotion_Climbing_C_AnimGraph");
static_assert(sizeof(AB_Locomotion_Climbing_C_AnimGraph) == 0x000020, "Wrong size on AB_Locomotion_Climbing_C_AnimGraph");
static_assert(offsetof(AB_Locomotion_Climbing_C_AnimGraph, InPose) == 0x000000, "Member 'AB_Locomotion_Climbing_C_AnimGraph::InPose' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_AnimGraph, AnimGraph_0) == 0x000010, "Member 'AB_Locomotion_Climbing_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function AB_Locomotion_Climbing.AB_Locomotion_Climbing_C.ClimbingLayer
// 0x0020 (0x0020 - 0x0000)
struct AB_Locomotion_Climbing_C_ClimbingLayer final
{
public:
	struct FPoseLink                              InPose_1;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ClimbingLayer_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_Locomotion_Climbing_C_ClimbingLayer) == 0x000008, "Wrong alignment on AB_Locomotion_Climbing_C_ClimbingLayer");
static_assert(sizeof(AB_Locomotion_Climbing_C_ClimbingLayer) == 0x000020, "Wrong size on AB_Locomotion_Climbing_C_ClimbingLayer");
static_assert(offsetof(AB_Locomotion_Climbing_C_ClimbingLayer, InPose_1) == 0x000000, "Member 'AB_Locomotion_Climbing_C_ClimbingLayer::InPose_1' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ClimbingLayer, ClimbingLayer_0) == 0x000010, "Member 'AB_Locomotion_Climbing_C_ClimbingLayer::ClimbingLayer_0' has a wrong offset!");

// Function AB_Locomotion_Climbing.AB_Locomotion_Climbing_C.DisabledLayer
// 0x0020 (0x0020 - 0x0000)
struct AB_Locomotion_Climbing_C_DisabledLayer final
{
public:
	struct FPoseLink                              InPose_4;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              DisabledLayer_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_Locomotion_Climbing_C_DisabledLayer) == 0x000008, "Wrong alignment on AB_Locomotion_Climbing_C_DisabledLayer");
static_assert(sizeof(AB_Locomotion_Climbing_C_DisabledLayer) == 0x000020, "Wrong size on AB_Locomotion_Climbing_C_DisabledLayer");
static_assert(offsetof(AB_Locomotion_Climbing_C_DisabledLayer, InPose_4) == 0x000000, "Member 'AB_Locomotion_Climbing_C_DisabledLayer::InPose_4' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_DisabledLayer, DisabledLayer_0) == 0x000010, "Member 'AB_Locomotion_Climbing_C_DisabledLayer::DisabledLayer_0' has a wrong offset!");

// Function AB_Locomotion_Climbing.AB_Locomotion_Climbing_C.ExecuteUbergraph_AB_Locomotion_Climbing
// 0x0088 (0x0088 - 0x0000)
struct AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue_1;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_2;     // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADuneCharacter*                         K2Node_DynamicCast_AsDune_Character;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClimbingCharacterMovementComponent*    CallFunc_GetComponentByClass_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_1;    // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_1;  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_2;  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing) == 0x000008, "Wrong alignment on AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing");
static_assert(sizeof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing) == 0x000088, "Wrong size on AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, EntryPoint) == 0x000000, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::EntryPoint' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000005, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_GetRelevantAnimTime_ReturnValue) == 0x000008, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_GetRelevantAnimTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_GetRelevantAnimTime_ReturnValue_1) == 0x00000C, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_GetRelevantAnimTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000010, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000011, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_BooleanOR_ReturnValue) == 0x000012, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x000014, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_BooleanOR_ReturnValue_1) == 0x000018, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000019, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x00001C, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000021, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_BooleanOR_ReturnValue_2) == 0x000022, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_BooleanOR_ReturnValue_3) == 0x000023, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_Not_PreBool_ReturnValue_1) == 0x000024, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2) == 0x000028, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_LessEqual_DoubleDouble_ReturnValue_2) == 0x00002C, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_LessEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_BooleanAND_ReturnValue_1) == 0x00002D, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_GetOwningActor_ReturnValue) == 0x000030, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, K2Node_DynamicCast_AsDune_Character) == 0x000038, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::K2Node_DynamicCast_AsDune_Character' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_GetComponentByClass_ReturnValue) == 0x000048, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000058, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000060, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_Greater_DoubleDouble_A_ImplicitCast_1) == 0x000068, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_Greater_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000070, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_1) == 0x000078, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_2) == 0x000080, "Member 'AB_Locomotion_Climbing_C_ExecuteUbergraph_AB_Locomotion_Climbing::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");

// Function AB_Locomotion_Climbing.AB_Locomotion_Climbing_C.QuicksandLayer
// 0x0028 (0x0028 - 0x0000)
struct AB_Locomotion_Climbing_C_QuicksandLayer final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          HasWeaponInHand;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              QuicksandLayer_0;                                  // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_Locomotion_Climbing_C_QuicksandLayer) == 0x000008, "Wrong alignment on AB_Locomotion_Climbing_C_QuicksandLayer");
static_assert(sizeof(AB_Locomotion_Climbing_C_QuicksandLayer) == 0x000028, "Wrong size on AB_Locomotion_Climbing_C_QuicksandLayer");
static_assert(offsetof(AB_Locomotion_Climbing_C_QuicksandLayer, InPose_0) == 0x000000, "Member 'AB_Locomotion_Climbing_C_QuicksandLayer::InPose_0' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_QuicksandLayer, HasWeaponInHand) == 0x000010, "Member 'AB_Locomotion_Climbing_C_QuicksandLayer::HasWeaponInHand' has a wrong offset!");
static_assert(offsetof(AB_Locomotion_Climbing_C_QuicksandLayer, QuicksandLayer_0) == 0x000018, "Member 'AB_Locomotion_Climbing_C_QuicksandLayer::QuicksandLayer_0' has a wrong offset!");

// Function AB_Locomotion_Climbing.AB_Locomotion_Climbing_C.ScramblingLayer
// 0x0010 (0x0010 - 0x0000)
struct AB_Locomotion_Climbing_C_ScramblingLayer final
{
public:
	struct FPoseLink                              ScramblingLayer_0;                                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_Locomotion_Climbing_C_ScramblingLayer) == 0x000008, "Wrong alignment on AB_Locomotion_Climbing_C_ScramblingLayer");
static_assert(sizeof(AB_Locomotion_Climbing_C_ScramblingLayer) == 0x000010, "Wrong size on AB_Locomotion_Climbing_C_ScramblingLayer");
static_assert(offsetof(AB_Locomotion_Climbing_C_ScramblingLayer, ScramblingLayer_0) == 0x000000, "Member 'AB_Locomotion_Climbing_C_ScramblingLayer::ScramblingLayer_0' has a wrong offset!");

// Function AB_Locomotion_Climbing.AB_Locomotion_Climbing_C.SuspensorLayer
// 0x0010 (0x0010 - 0x0000)
struct AB_Locomotion_Climbing_C_SuspensorLayer final
{
public:
	struct FPoseLink                              SuspensorLayer_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_Locomotion_Climbing_C_SuspensorLayer) == 0x000008, "Wrong alignment on AB_Locomotion_Climbing_C_SuspensorLayer");
static_assert(sizeof(AB_Locomotion_Climbing_C_SuspensorLayer) == 0x000010, "Wrong size on AB_Locomotion_Climbing_C_SuspensorLayer");
static_assert(offsetof(AB_Locomotion_Climbing_C_SuspensorLayer, SuspensorLayer_0) == 0x000000, "Member 'AB_Locomotion_Climbing_C_SuspensorLayer::SuspensorLayer_0' has a wrong offset!");

}

