#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NinjaLive

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "UserInput_Enum_structs.hpp"
#include "InactiveBehaviour_Enum_structs.hpp"
#include "DreamworldPreInit_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NinjaLive.NinjaLive_C
// 0x0300 (0x0650 - 0x0350)
class ANinjaLive_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNinjaLiveComponent_C*                  NinjaLiveComponent;                                // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractionVolume;                                 // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ActivationVolume;                                  // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TraceMesh;                                         // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RT_DensityPreview;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      InactiveGrayMaterial;                              // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableBlueprint;                                  // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeCounterForBrush;                               // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSeconds;                                      // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MousePressed;                                      // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowTraceMeshInEditor;                             // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AA[0x6];                                      // 0x03AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceMeshSize;                                     // 0x03B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EUserInput_Enum                               UserInputBasedInteraction;                         // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverlapBasedInteraction;                           // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CA[0x6];                                      // 0x03CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANinjaLive_C*>                   NinjaLIVECollisionExclude;                         // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Time;                                              // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimActivatedByPawnProximity;                       // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowActivationVolumeInEditor;                      // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EA[0x6];                                      // 0x03EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActivationVolumeSize;                              // 0x03F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        ActivatorProximityCheckFrequency;                  // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             ActivatorType;                                     // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Activator;                                         // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          PawnInsideActivationBounds;                        // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InitDone;                                          // 0x0421(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BeginPlaySupressed;                                // 0x0422(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTraceMeshAsInteractionVolume;                   // 0x0423(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowInteractionVolumeInEditor;                     // 0x0424(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425[0x3];                                      // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InteractionVolumeSize;                             // 0x0428(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<bool>                                  MultipleTouchLookup;                               // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        TickRateCustom;                                    // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    InteractionVolumeTemplate;                         // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   TrackActorPrimitiveComponentsWithTag;              // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TrackActorSkeletalMeshComponentsWithTag;           // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      OverlapFilterInclusiveObjType;                     // 0x0470(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           OverlapFilterInclusiveBoneNameExact;               // 0x0480(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         OverlapFilterInclusiveBoneNamePartial;             // 0x0490(0x0010)(Edit, BlueprintVisible)
	TArray<class AActor*>                         ExcludeSpecificActorsFromOverlap;                  // 0x04A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          AutoExcludeLargeOverlappingObjects;                // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECollisionChannel, EObjectTypeQuery>     OverlapFilterInclusiveCollisionType;               // 0x04B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EInactiveBehaviour_Enum                       TraceMeshInactiveBehaviour;                        // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActivationEventsDebugPrint;                        // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimContainerCapacityWarning;                       // 0x050A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SaveDebugTextToLog;                                // 0x050B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebugTextLifeTimeLength;                           // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OverlappingSkeletalMesh;                           // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        BrushStrengthTemp2;                                // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputFeedbackTemp1;                                // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableAndNotTickBlock;                            // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_531[0x7];                                      // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            OverlappingComponents;                             // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AActor*>                         OverlappingActors;                                 // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<int32, class UPrimitiveComponent*>       SkeletalMesh_TempArray_Pairs;                      // 0x0558(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AActor*>                         OverlappingActorsInitial;                          // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OwnerRePlayEvent;                                  // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          OverrideComponentVariables;                        // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoConnectToMemoryPool_IF_Found;                  // 0x05C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CA[0x2];                                      // 0x05CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutputFilterMaterialIndex;                         // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowLODdebugMessagesOnScreen;                      // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GlobalBrushScale;                                  // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LOD1_ReduceIterations;                             // 0x05E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LOD2_ReduceSamplingFPS;                            // 0x05E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LOD3_ReduceCollisionAmount;                        // 0x05E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E3[0x1];                                      // 0x05E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinSamplingFPS;                                    // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LOD_FarBound;                                      // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LOD_NearBound;                                     // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DownscaleCollisionPainterResolution;               // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DownscalePressureResolution;                       // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SingleTargetMode;                                  // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InitialActorsProcessed;                            // 0x0601(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SKMeshTagged;                                      // 0x0602(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_603[0x5];                                      // 0x0603(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OverlapFilterInclusiveBoneNameExactTemp;           // 0x0608(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          FluidNinjaEnabled;                                 // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowWindInfluence;                                // 0x0619(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61A[0x6];                                      // 0x061A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WindDensityInfluence;                              // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindSpeedInfluence;                                // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RT_VelocityDensity;                                // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SavedTraceMeshSize;                                // 0x0638(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BeginOverlapComponent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ClearTraceMeshSizeOverride();
	void EndOverlapComponent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_NinjaLive(int32 EntryPoint);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpTchEvt_Pressed(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpTchEvt_Released(ETouchIndex FingerIndex, const struct FVector& Location);
	void LiveActivation(class FName ParamName, double FadeTimeOfBrush, double FadeTimeOfCanvas);
	void LiveFluidParams(double BrushSize);
	void OverrideTraceMeshSize(const struct FVector& TraceMeshSize_0);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds_0);
	void Replay();
	void ResetTempArrays();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NinjaLive_C">();
	}
	static class ANinjaLive_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANinjaLive_C>();
	}
};
static_assert(alignof(ANinjaLive_C) == 0x000008, "Wrong alignment on ANinjaLive_C");
static_assert(sizeof(ANinjaLive_C) == 0x000650, "Wrong size on ANinjaLive_C");
static_assert(offsetof(ANinjaLive_C, UberGraphFrame) == 0x000350, "Member 'ANinjaLive_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, NinjaLiveComponent) == 0x000358, "Member 'ANinjaLive_C::NinjaLiveComponent' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InteractionVolume) == 0x000360, "Member 'ANinjaLive_C::InteractionVolume' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ActivationVolume) == 0x000368, "Member 'ANinjaLive_C::ActivationVolume' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TraceMesh) == 0x000370, "Member 'ANinjaLive_C::TraceMesh' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, Root) == 0x000378, "Member 'ANinjaLive_C::Root' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, RT_DensityPreview) == 0x000380, "Member 'ANinjaLive_C::RT_DensityPreview' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InactiveGrayMaterial) == 0x000388, "Member 'ANinjaLive_C::InactiveGrayMaterial' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DisableBlueprint) == 0x000390, "Member 'ANinjaLive_C::DisableBlueprint' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TimeCounterForBrush) == 0x000398, "Member 'ANinjaLive_C::TimeCounterForBrush' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DeltaSeconds) == 0x0003A0, "Member 'ANinjaLive_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, MousePressed) == 0x0003A8, "Member 'ANinjaLive_C::MousePressed' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ShowTraceMeshInEditor) == 0x0003A9, "Member 'ANinjaLive_C::ShowTraceMeshInEditor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TraceMeshSize) == 0x0003B0, "Member 'ANinjaLive_C::TraceMeshSize' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, UserInputBasedInteraction) == 0x0003C8, "Member 'ANinjaLive_C::UserInputBasedInteraction' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapBasedInteraction) == 0x0003C9, "Member 'ANinjaLive_C::OverlapBasedInteraction' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, NinjaLIVECollisionExclude) == 0x0003D0, "Member 'ANinjaLive_C::NinjaLIVECollisionExclude' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, Time) == 0x0003E0, "Member 'ANinjaLive_C::Time' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SimActivatedByPawnProximity) == 0x0003E8, "Member 'ANinjaLive_C::SimActivatedByPawnProximity' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ShowActivationVolumeInEditor) == 0x0003E9, "Member 'ANinjaLive_C::ShowActivationVolumeInEditor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ActivationVolumeSize) == 0x0003F0, "Member 'ANinjaLive_C::ActivationVolumeSize' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ActivatorProximityCheckFrequency) == 0x000408, "Member 'ANinjaLive_C::ActivatorProximityCheckFrequency' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ActivatorType) == 0x000410, "Member 'ANinjaLive_C::ActivatorType' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, Activator) == 0x000418, "Member 'ANinjaLive_C::Activator' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, PawnInsideActivationBounds) == 0x000420, "Member 'ANinjaLive_C::PawnInsideActivationBounds' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InitDone) == 0x000421, "Member 'ANinjaLive_C::InitDone' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, BeginPlaySupressed) == 0x000422, "Member 'ANinjaLive_C::BeginPlaySupressed' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, UseTraceMeshAsInteractionVolume) == 0x000423, "Member 'ANinjaLive_C::UseTraceMeshAsInteractionVolume' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ShowInteractionVolumeInEditor) == 0x000424, "Member 'ANinjaLive_C::ShowInteractionVolumeInEditor' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InteractionVolumeSize) == 0x000428, "Member 'ANinjaLive_C::InteractionVolumeSize' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, MultipleTouchLookup) == 0x000440, "Member 'ANinjaLive_C::MultipleTouchLookup' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TickRateCustom) == 0x000450, "Member 'ANinjaLive_C::TickRateCustom' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InteractionVolumeTemplate) == 0x000458, "Member 'ANinjaLive_C::InteractionVolumeTemplate' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TrackActorPrimitiveComponentsWithTag) == 0x000460, "Member 'ANinjaLive_C::TrackActorPrimitiveComponentsWithTag' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TrackActorSkeletalMeshComponentsWithTag) == 0x000468, "Member 'ANinjaLive_C::TrackActorSkeletalMeshComponentsWithTag' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapFilterInclusiveObjType) == 0x000470, "Member 'ANinjaLive_C::OverlapFilterInclusiveObjType' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapFilterInclusiveBoneNameExact) == 0x000480, "Member 'ANinjaLive_C::OverlapFilterInclusiveBoneNameExact' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapFilterInclusiveBoneNamePartial) == 0x000490, "Member 'ANinjaLive_C::OverlapFilterInclusiveBoneNamePartial' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ExcludeSpecificActorsFromOverlap) == 0x0004A0, "Member 'ANinjaLive_C::ExcludeSpecificActorsFromOverlap' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, AutoExcludeLargeOverlappingObjects) == 0x0004B0, "Member 'ANinjaLive_C::AutoExcludeLargeOverlappingObjects' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapFilterInclusiveCollisionType) == 0x0004B8, "Member 'ANinjaLive_C::OverlapFilterInclusiveCollisionType' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, TraceMeshInactiveBehaviour) == 0x000508, "Member 'ANinjaLive_C::TraceMeshInactiveBehaviour' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ActivationEventsDebugPrint) == 0x000509, "Member 'ANinjaLive_C::ActivationEventsDebugPrint' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SimContainerCapacityWarning) == 0x00050A, "Member 'ANinjaLive_C::SimContainerCapacityWarning' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SaveDebugTextToLog) == 0x00050B, "Member 'ANinjaLive_C::SaveDebugTextToLog' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DebugTextLifeTimeLength) == 0x000510, "Member 'ANinjaLive_C::DebugTextLifeTimeLength' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlappingSkeletalMesh) == 0x000518, "Member 'ANinjaLive_C::OverlappingSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, BrushStrengthTemp2) == 0x000520, "Member 'ANinjaLive_C::BrushStrengthTemp2' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InputFeedbackTemp1) == 0x000528, "Member 'ANinjaLive_C::InputFeedbackTemp1' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DisableAndNotTickBlock) == 0x000530, "Member 'ANinjaLive_C::DisableAndNotTickBlock' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlappingComponents) == 0x000538, "Member 'ANinjaLive_C::OverlappingComponents' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlappingActors) == 0x000548, "Member 'ANinjaLive_C::OverlappingActors' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SkeletalMesh_TempArray_Pairs) == 0x000558, "Member 'ANinjaLive_C::SkeletalMesh_TempArray_Pairs' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlappingActorsInitial) == 0x0005A8, "Member 'ANinjaLive_C::OverlappingActorsInitial' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OwnerRePlayEvent) == 0x0005B8, "Member 'ANinjaLive_C::OwnerRePlayEvent' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverrideComponentVariables) == 0x0005C8, "Member 'ANinjaLive_C::OverrideComponentVariables' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, AutoConnectToMemoryPool_IF_Found) == 0x0005C9, "Member 'ANinjaLive_C::AutoConnectToMemoryPool_IF_Found' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OutputFilterMaterialIndex) == 0x0005CC, "Member 'ANinjaLive_C::OutputFilterMaterialIndex' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, ShowLODdebugMessagesOnScreen) == 0x0005D0, "Member 'ANinjaLive_C::ShowLODdebugMessagesOnScreen' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, GlobalBrushScale) == 0x0005D8, "Member 'ANinjaLive_C::GlobalBrushScale' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, LOD1_ReduceIterations) == 0x0005E0, "Member 'ANinjaLive_C::LOD1_ReduceIterations' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, LOD2_ReduceSamplingFPS) == 0x0005E1, "Member 'ANinjaLive_C::LOD2_ReduceSamplingFPS' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, LOD3_ReduceCollisionAmount) == 0x0005E2, "Member 'ANinjaLive_C::LOD3_ReduceCollisionAmount' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, MinSamplingFPS) == 0x0005E4, "Member 'ANinjaLive_C::MinSamplingFPS' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, LOD_FarBound) == 0x0005E8, "Member 'ANinjaLive_C::LOD_FarBound' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, LOD_NearBound) == 0x0005F0, "Member 'ANinjaLive_C::LOD_NearBound' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DownscaleCollisionPainterResolution) == 0x0005F8, "Member 'ANinjaLive_C::DownscaleCollisionPainterResolution' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, DownscalePressureResolution) == 0x0005FC, "Member 'ANinjaLive_C::DownscalePressureResolution' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SingleTargetMode) == 0x000600, "Member 'ANinjaLive_C::SingleTargetMode' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, InitialActorsProcessed) == 0x000601, "Member 'ANinjaLive_C::InitialActorsProcessed' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SKMeshTagged) == 0x000602, "Member 'ANinjaLive_C::SKMeshTagged' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, OverlapFilterInclusiveBoneNameExactTemp) == 0x000608, "Member 'ANinjaLive_C::OverlapFilterInclusiveBoneNameExactTemp' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, FluidNinjaEnabled) == 0x000618, "Member 'ANinjaLive_C::FluidNinjaEnabled' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, AllowWindInfluence) == 0x000619, "Member 'ANinjaLive_C::AllowWindInfluence' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, WindDensityInfluence) == 0x000620, "Member 'ANinjaLive_C::WindDensityInfluence' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, WindSpeedInfluence) == 0x000628, "Member 'ANinjaLive_C::WindSpeedInfluence' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, RT_VelocityDensity) == 0x000630, "Member 'ANinjaLive_C::RT_VelocityDensity' has a wrong offset!");
static_assert(offsetof(ANinjaLive_C, SavedTraceMeshSize) == 0x000638, "Member 'ANinjaLive_C::SavedTraceMeshSize' has a wrong offset!");

}

