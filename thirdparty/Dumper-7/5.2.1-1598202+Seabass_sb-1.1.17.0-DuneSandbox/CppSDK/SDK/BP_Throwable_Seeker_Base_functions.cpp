#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Throwable_Seeker_Base

#include "Basic.hpp"

#include "BP_Throwable_Seeker_Base_classes.hpp"
#include "BP_Throwable_Seeker_Base_parameters.hpp"


namespace SDK
{

// Function BP_Throwable_Seeker_Base.BP_Throwable_Seeker_Base_C.Activate
// (BlueprintCallable, BlueprintEvent)

void ABP_Throwable_Seeker_Base_C::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwable_Seeker_Base_C", "Activate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Throwable_Seeker_Base.BP_Throwable_Seeker_Base_C.ExecuteUbergraph_BP_Throwable_Seeker_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Throwable_Seeker_Base_C::ExecuteUbergraph_BP_Throwable_Seeker_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwable_Seeker_Base_C", "ExecuteUbergraph_BP_Throwable_Seeker_Base");

	Params::BP_Throwable_Seeker_Base_C_ExecuteUbergraph_BP_Throwable_Seeker_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Throwable_Seeker_Base.BP_Throwable_Seeker_Base_C.Launch
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Velocity                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTransform&                Transform                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Throwable_Seeker_Base_C::Launch(const struct FVector& Velocity, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwable_Seeker_Base_C", "Launch");

	Params::BP_Throwable_Seeker_Base_C_Launch Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Throwable_Seeker_Base.BP_Throwable_Seeker_Base_C.SimulateTick
// (Event, Public, BlueprintEvent)
// Parameters:
// const float                             InDeltaTime                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Throwable_Seeker_Base_C::SimulateTick(const float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwable_Seeker_Base_C", "SimulateTick");

	Params::BP_Throwable_Seeker_Base_C_SimulateTick Parms{};

	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Throwable_Seeker_Base.BP_Throwable_Seeker_Base_C.IsClimbable
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class AActor*                     InActor                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Throwable_Seeker_Base_C::IsClimbable(const class AActor* InActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwable_Seeker_Base_C", "IsClimbable");

	Params::BP_Throwable_Seeker_Base_C_IsClimbable Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

