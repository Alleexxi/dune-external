#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DeformationBuffer_OrniTurbulence

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_DeformationBufferParticleBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DeformationBuffer_OrniTurbulence.BP_DeformationBuffer_OrniTurbulence_C
// 0x0030 (0x03B0 - 0x0380)
class ABP_DeformationBuffer_OrniTurbulence_C final : public ABP_DeformationBufferParticleBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DeformationBuffer_OrniTurbulence_C; // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FTimerHandle                           UpdateTimer;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_OrnithopterBase_C*                  OrnithoperActor;                                   // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        MaxDistanceToGround;                               // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     Out_Hits;                                          // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_BP_DeformationBuffer_OrniTurbulence(int32 EntryPoint);
	class UDuneOrnithopterAnimInstance* GetOrnithopterAnimInstance();
	void IsCloseEnoughToGround(double MaxDistanceToGround_0, bool* Return);
	void ReceiveBeginPlay();
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DeformationBuffer_OrniTurbulence_C">();
	}
	static class ABP_DeformationBuffer_OrniTurbulence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DeformationBuffer_OrniTurbulence_C>();
	}
};
static_assert(alignof(ABP_DeformationBuffer_OrniTurbulence_C) == 0x000008, "Wrong alignment on ABP_DeformationBuffer_OrniTurbulence_C");
static_assert(sizeof(ABP_DeformationBuffer_OrniTurbulence_C) == 0x0003B0, "Wrong size on ABP_DeformationBuffer_OrniTurbulence_C");
static_assert(offsetof(ABP_DeformationBuffer_OrniTurbulence_C, UberGraphFrame_BP_DeformationBuffer_OrniTurbulence_C) == 0x000380, "Member 'ABP_DeformationBuffer_OrniTurbulence_C::UberGraphFrame_BP_DeformationBuffer_OrniTurbulence_C' has a wrong offset!");
static_assert(offsetof(ABP_DeformationBuffer_OrniTurbulence_C, UpdateTimer) == 0x000388, "Member 'ABP_DeformationBuffer_OrniTurbulence_C::UpdateTimer' has a wrong offset!");
static_assert(offsetof(ABP_DeformationBuffer_OrniTurbulence_C, OrnithoperActor) == 0x000390, "Member 'ABP_DeformationBuffer_OrniTurbulence_C::OrnithoperActor' has a wrong offset!");
static_assert(offsetof(ABP_DeformationBuffer_OrniTurbulence_C, MaxDistanceToGround) == 0x000398, "Member 'ABP_DeformationBuffer_OrniTurbulence_C::MaxDistanceToGround' has a wrong offset!");
static_assert(offsetof(ABP_DeformationBuffer_OrniTurbulence_C, Out_Hits) == 0x0003A0, "Member 'ABP_DeformationBuffer_OrniTurbulence_C::Out_Hits' has a wrong offset!");

}

